commit bf78b1accef46efd9b624967cb74ae8d3c215a2b
Author: Adrian Hunter <adrian.hunter@intel.com>
Date:   Wed Jul 10 21:07:37 2024 +0300

    mmc: sdhci: Fix max_seg_size for 64KiB PAGE_SIZE
    
    commit 63d20a94f24fc1cbaf44d0e7c0e0a8077fde0aef upstream.
    
    blk_queue_max_segment_size() ensured:
    
            if (max_size < PAGE_SIZE)
                    max_size = PAGE_SIZE;
    
    whereas:
    
    blk_validate_limits() makes it an error:
    
            if (WARN_ON_ONCE(lim->max_segment_size < PAGE_SIZE))
                    return -EINVAL;
    
    The change from one to the other, exposed sdhci which was setting maximum
    segment size too low in some circumstances.
    
    Fix the maximum segment size when it is too low.
    
    Fixes: 616f87661792 ("mmc: pass queue_limits to blk_mq_alloc_disk")
    Cc: stable@vger.kernel.org
    Signed-off-by: Adrian Hunter <adrian.hunter@intel.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Acked-by: Jon Hunter <jonathanh@nvidia.com>
    Tested-by: Jon Hunter <jonathanh@nvidia.com>
    Link: https://lore.kernel.org/r/20240710180737.142504-1-adrian.hunter@intel.com
    Signed-off-by: Ulf Hansson <ulf.hansson@linaro.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/mmc/host/sdhci.c b/drivers/mmc/host/sdhci.c
index 112584aa0772..fbf7a91bed35 100644
--- a/drivers/mmc/host/sdhci.c
+++ b/drivers/mmc/host/sdhci.c
@@ -4727,6 +4727,21 @@ int sdhci_setup_host(struct sdhci_host *host)
 		if (host->quirks & SDHCI_QUIRK_BROKEN_ADMA_ZEROLEN_DESC) {
 			host->max_adma = 65532; /* 32-bit alignment */
 			mmc->max_seg_size = 65535;
+			/*
+			 * sdhci_adma_table_pre() expects to define 1 DMA
+			 * descriptor per segment, so the maximum segment size
+			 * is set accordingly. SDHCI allows up to 64KiB per DMA
+			 * descriptor (16-bit field), but some controllers do
+			 * not support "zero means 65536" reducing the maximum
+			 * for them to 65535. That is a problem if PAGE_SIZE is
+			 * 64KiB because the block layer does not support
+			 * max_seg_size < PAGE_SIZE, however
+			 * sdhci_adma_table_pre() has a workaround to handle
+			 * that case, and split the descriptor. Refer also
+			 * comment in sdhci_adma_table_pre().
+			 */
+			if (mmc->max_seg_size < PAGE_SIZE)
+				mmc->max_seg_size = PAGE_SIZE;
 		} else {
 			mmc->max_seg_size = 65536;
 		}
