/**
 * @name linux-7b439aaa62fee474a0d84d67a25f4984467e7b95-pmic_spmi_probe
 * @id cpp/linux/7b439aaa62fee474a0d84d67a25f4984467e7b95/pmic-spmi-probe
 * @description linux-7b439aaa62fee474a0d84d67a25f4984467e7b95-drivers/mfd/qcom-spmi-pmic.c-pmic_spmi_probe CVE-2023-52765
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vctx_234, Variable vret_235, Parameter vsdev_231, EqualityOperation target_4, AddressOfExpr target_5, ExprStmt target_6, ReturnStmt target_7, AddressOfExpr target_8) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_235
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("pmic_spmi_get_base_revid")
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsdev_231
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vctx_234
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
	and target_7.getExpr().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation())
	and target_8.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vret_235, EqualityOperation target_4) {
exists(IfStmt target_1 |
	target_1.getCondition().(VariableAccess).getTarget()=vret_235
	and target_1.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=vret_235
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(1)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4)
}

predicate func_2(ExprStmt target_6, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
	and target_2.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_6.getLocation()))
}

predicate func_3(Function func) {
exists(ExprStmt target_3 |
	target_3.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
	and target_3.getFollowingStmt() instanceof ReturnStmt)
}

predicate func_4(Variable vctx_234, Parameter vsdev_231, EqualityOperation target_4) {
	target_4.getLeftOperand().(RemExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="usid"
	and target_4.getLeftOperand().(RemExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsdev_231
	and target_4.getLeftOperand().(RemExpr).getRightOperand().(PointerFieldAccess).getTarget().getName()="num_usids"
	and target_4.getLeftOperand().(RemExpr).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_234
	and target_4.getRightOperand().(Literal).getValue()="0"
}

predicate func_5(Variable vctx_234, AddressOfExpr target_5) {
	target_5.getOperand().(PointerFieldAccess).getTarget().getName()="pmic"
	and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_234
}

predicate func_6(Variable vctx_234, Parameter vsdev_231, ExprStmt target_6) {
	target_6.getExpr().(FunctionCall).getTarget().hasName("spmi_device_set_drvdata")
	and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsdev_231
	and target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vctx_234
}

predicate func_7(Variable vret_235, ReturnStmt target_7) {
	target_7.getExpr().(VariableAccess).getTarget()=vret_235
}

predicate func_8(Variable vctx_234, Parameter vsdev_231, AddressOfExpr target_8) {
	target_8.getOperand().(PointerFieldAccess).getTarget().getName()="dev"
	and target_8.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsdev_231
	and target_8.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("pmic_spmi_load_revid")
	and target_8.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("regmap *")
	and target_8.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="pmic"
	and target_8.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_234
}

from Function func, Variable vctx_234, Variable vret_235, Parameter vsdev_231, EqualityOperation target_4, AddressOfExpr target_5, ExprStmt target_6, ReturnStmt target_7, AddressOfExpr target_8
where
not func_0(vctx_234, vret_235, vsdev_231, target_4, target_5, target_6, target_7, target_8)
and not func_1(vret_235, target_4)
and not func_2(target_6, func)
and not func_3(func)
and func_4(vctx_234, vsdev_231, target_4)
and func_5(vctx_234, target_5)
and func_6(vctx_234, vsdev_231, target_6)
and func_7(vret_235, target_7)
and func_8(vctx_234, vsdev_231, target_8)
and vctx_234.getType().hasName("qcom_spmi_dev *")
and vret_235.getType().hasName("int")
and vsdev_231.getType().hasName("spmi_device *")
and vctx_234.(LocalVariable).getFunction() = func
and vret_235.(LocalVariable).getFunction() = func
and vsdev_231.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
