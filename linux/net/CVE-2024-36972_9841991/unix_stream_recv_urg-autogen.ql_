/**
 * @name linux-9841991a446c87f90f66f4b9fee6fe934c1336a2-unix_stream_recv_urg
 * @id cpp/linux/9841991a446c87f90f66f4b9fee6fe934c1336a2/unix-stream-recv-urg
 * @description linux-9841991a446c87f90f66f4b9fee6fe934c1336a2-net/unix/af_unix.c-unix_stream_recv_urg CVE-2024-36972
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsk_2564, IfStmt target_3, LogicalOrExpr target_4, Function func) {
exists(ExprStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="sk_receive_queue"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vsk_2564
				)
				and obj_2.getTarget().getName()="lock"
			)
		)
		and obj_0.getTarget().hasName("spin_lock")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_3.getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_1(Variable vsk_2564, LogicalOrExpr target_4) {
exists(ExprStmt target_1 |
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="sk_receive_queue"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vsk_2564
				)
				and obj_2.getTarget().getName()="lock"
			)
		)
		and obj_0.getTarget().hasName("spin_unlock")
	)
	and exists(BlockStmt obj_4 | obj_4=target_1.getParent() |
		exists(IfStmt obj_5 | obj_5=obj_4.getParent() |
			obj_5.getThen().(BlockStmt).getStmt(0)=target_1
			and obj_5.getCondition()=target_4
		)
	)
)
}

predicate func_2(Variable vsk_2564, ExprStmt target_5, Function func) {
exists(ExprStmt target_2 |
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="sk_receive_queue"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vsk_2564
				)
				and obj_2.getTarget().getName()="lock"
			)
		)
		and obj_0.getTarget().hasName("spin_unlock")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_5.getLocation())
)
}

predicate func_3(Variable vsk_2564, IfStmt target_3) {
	exists(LogicalOrExpr obj_0 | obj_0=target_3.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getLeftOperand() |
			obj_1.getTarget().hasName("sock_flag")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vsk_2564
		)
		and exists(NotExpr obj_2 | obj_2=obj_0.getRightOperand() |
			exists(PointerFieldAccess obj_3 | obj_3=obj_2.getOperand() |
				obj_3.getTarget().getName()="oob_skb"
				and obj_3.getQualifier().(VariableAccess).getTarget().getType().hasName("unix_sock *")
			)
		)
	)
	and exists(BlockStmt obj_4 | obj_4=target_3.getThen() |
		exists(ExprStmt obj_5 | obj_5=obj_4.getStmt(0) |
			exists(FunctionCall obj_6 | obj_6=obj_5.getExpr() |
				obj_6.getTarget().hasName("spin_unlock")
				and obj_6.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="lock"
			)
		)
		and exists(ExprStmt obj_7 | obj_7=obj_4.getStmt(1) |
			exists(FunctionCall obj_8 | obj_8=obj_7.getExpr() |
				exists(AddressOfExpr obj_9 | obj_9=obj_8.getArgument(0) |
					exists(PointerFieldAccess obj_10 | obj_10=obj_9.getOperand() |
						obj_10.getTarget().getName()="iolock"
						and obj_10.getQualifier().(VariableAccess).getTarget().getType().hasName("unix_sock *")
					)
				)
				and obj_8.getTarget().hasName("mutex_unlock")
			)
		)
	)
}

predicate func_4(Variable vsk_2564, LogicalOrExpr target_4) {
	exists(FunctionCall obj_0 | obj_0=target_4.getLeftOperand() |
		obj_0.getTarget().hasName("sock_flag")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vsk_2564
	)
	and exists(NotExpr obj_1 | obj_1=target_4.getRightOperand() |
		exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
			obj_2.getTarget().getName()="oob_skb"
			and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("unix_sock *")
		)
	)
}

predicate func_5(Function func, ExprStmt target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getExpr() |
		obj_0.getTarget().hasName("spin_unlock")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="lock"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

from Function func, Variable vsk_2564, IfStmt target_3, LogicalOrExpr target_4, ExprStmt target_5
where
not func_0(vsk_2564, target_3, target_4, func)
and not func_1(vsk_2564, target_4)
and not func_2(vsk_2564, target_5, func)
and func_3(vsk_2564, target_3)
and func_4(vsk_2564, target_4)
and func_5(func, target_5)
and vsk_2564.getType().hasName("sock *")
and vsk_2564.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
