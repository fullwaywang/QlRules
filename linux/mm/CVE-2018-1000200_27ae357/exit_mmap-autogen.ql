/**
 * @name linux-27ae357fa82be5ab73b2ef8d39dcb8ca2563483a-exit_mmap
 * @id cpp/linux/27ae357fa82be5ab73b2ef8d39dcb8ca2563483a/exit-mmap
 * @description linux-27ae357fa82be5ab73b2ef8d39dcb8ca2563483a-mm/mmap.c-exit_mmap CVE-2018-1000200
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(FunctionCall target_3, Function func) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
		and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
		and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
		and target_0.getEnclosingFunction() = func)
}

predicate func_1(Parameter vmm_3018, FunctionCall target_3, NotExpr target_4, AddressOfExpr target_5) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(FunctionCall).getTarget().hasName("__oom_reap_task_mm")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmm_3018
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
		and target_4.getOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(FunctionCall target_3, Function func) {
	exists(ExprStmt target_2 |
		target_2.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
		and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_2
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
		and target_2.getEnclosingFunction() = func)
}

predicate func_3(Parameter vmm_3018, FunctionCall target_3) {
		target_3.getTarget().hasName("__builtin_expect")
		and target_3.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("mm_is_oom_victim")
		and target_3.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmm_3018
		and target_3.getArgument(1).(Literal).getValue()="0"
}

predicate func_4(Parameter vmm_3018, NotExpr target_4) {
		target_4.getOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("mm_is_oom_victim")
		and target_4.getOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmm_3018
}

predicate func_5(Parameter vmm_3018, AddressOfExpr target_5) {
		target_5.getOperand().(PointerFieldAccess).getTarget().getName()="flags"
		and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmm_3018
}

from Function func, Parameter vmm_3018, FunctionCall target_3, NotExpr target_4, AddressOfExpr target_5
where
not func_0(target_3, func)
and not func_1(vmm_3018, target_3, target_4, target_5)
and not func_2(target_3, func)
and func_3(vmm_3018, target_3)
and func_4(vmm_3018, target_4)
and func_5(vmm_3018, target_5)
and vmm_3018.getType().hasName("mm_struct *")
and vmm_3018.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
