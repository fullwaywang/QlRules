/**
 * @name linux-37dc1718dc0c4392dbfcb9adec22a776e745dd69-check_stack_access_within_bounds
 * @id cpp/linux/37dc1718dc0c4392dbfcb9adec22a776e745dd69/check-stack-access-within-bounds
 * @description linux-37dc1718dc0c4392dbfcb9adec22a776e745dd69-kernel/bpf/verifier.c-check_stack_access_within_bounds CVE-2024-35905
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vaccess_size_4288, Variable verr_4295, IfStmt target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=verr_4295
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vaccess_size_4288
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_4295
	and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-14"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getRValue().(AddExpr).getRightOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(5).(VariableAccess).getLocation())
	and target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vaccess_size_4288, Variable verr_4295, IfStmt target_1) {
	target_1.getCondition().(VariableAccess).getTarget()=verr_4295
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("tnum_is_const")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getCondition().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="var_off"
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getCondition().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_reg_state *")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("bpf_verifier_env *")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="invalid%s stack R%d off=%d size=%d\n"
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("char *")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(5).(VariableAccess).getTarget()=vaccess_size_4288
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("tnum_strn")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("char[48]")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="var_off"
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getElse().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getElse().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("bpf_verifier_env *")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getElse().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="invalid variable-offset%s stack R%d var_off=%s size=%d\n"
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getElse().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("char *")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getElse().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getElse().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("char[48]")
	and target_1.getThen().(BlockStmt).getStmt(0).(IfStmt).getElse().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(5).(VariableAccess).getTarget()=vaccess_size_4288
}

predicate func_2(Parameter vaccess_size_4288, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getExpr().(AssignExpr).getRValue().(AddExpr).getLeftOperand().(AddExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="smax_value"
	and target_2.getExpr().(AssignExpr).getRValue().(AddExpr).getLeftOperand().(AddExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_reg_state *")
	and target_2.getExpr().(AssignExpr).getRValue().(AddExpr).getLeftOperand().(AddExpr).getRightOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getExpr().(AssignExpr).getRValue().(AddExpr).getRightOperand().(VariableAccess).getTarget()=vaccess_size_4288
}

predicate func_3(Parameter vaccess_size_4288, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("bpf_verifier_env *")
	and target_3.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="invalid%s stack R%d off=%d size=%d\n"
	and target_3.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("char *")
	and target_3.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getExpr().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getExpr().(FunctionCall).getArgument(5).(VariableAccess).getTarget()=vaccess_size_4288
}

predicate func_4(Variable verr_4295, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_4295
	and target_4.getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-22"
}

from Function func, Parameter vaccess_size_4288, Variable verr_4295, IfStmt target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4
where
not func_0(vaccess_size_4288, verr_4295, target_1, target_2, target_3, target_4, func)
and func_1(vaccess_size_4288, verr_4295, target_1)
and func_2(vaccess_size_4288, target_2)
and func_3(vaccess_size_4288, target_3)
and func_4(verr_4295, target_4)
and vaccess_size_4288.getType().hasName("int")
and verr_4295.getType().hasName("int")
and vaccess_size_4288.getFunction() = func
and verr_4295.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
