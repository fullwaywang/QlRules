commit c7c447735f762f6d6d0878e229371797845ef4ab	c7c447735f762f6d6d0878e229371797845ef4ab
Author: Toon Verwaest <verwaest@chromium.org>
Date:   Fri Jun 16 17:13:52 2023 +0200

    [runtime] Set instance prototypes directly on maps
    
    Bug: chromium:1452137
    Change-Id: If1de44950711c99da4ace2e988f188421e849330
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4618153
    Commit-Queue: Toon Verwaest <verwaest@chromium.org>
    Reviewed-by: Igor Sheludko <ishell@chromium.org>
    Auto-Submit: Toon Verwaest <verwaest@chromium.org>
    Commit-Queue: Igor Sheludko <ishell@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#88326}

diff --git a/src/objects/js-function.cc b/src/objects/js-function.cc
index d76b7d938c8..fef1daa6873 100644
--- a/src/objects/js-function.cc
+++ b/src/objects/js-function.cc
@@ -678,6 +678,10 @@ void SetInstancePrototype(Isolate* isolate, Handle<JSFunction> function,
       // At that point, a new initial map is created and the prototype is put
       // into the initial map where it belongs.
       function->set_prototype_or_initial_map(*value, kReleaseStore);
+      if (value->IsJSObjectThatCanBeTrackedAsPrototype()) {
+        // Optimize as prototype to detach it from its transition tree.
+        JSObject::OptimizeAsPrototype(Handle<JSObject>::cast(value));
+      }
     } else {
       Handle<Map> new_map =
           Map::Copy(isolate, initial_map, "SetInstancePrototype");
@@ -809,8 +813,10 @@ void JSFunction::EnsureHasInitialMap(Handle<JSFunction> function) {
   Handle<HeapObject> prototype;
   if (function->has_instance_prototype()) {
     prototype = handle(function->instance_prototype(), isolate);
+    map->set_prototype(*prototype);
   } else {
     prototype = isolate->factory()->NewFunctionPrototype(function);
+    Map::SetPrototype(isolate, map, prototype);
   }
   DCHECK(map->has_fast_object_elements());
 
