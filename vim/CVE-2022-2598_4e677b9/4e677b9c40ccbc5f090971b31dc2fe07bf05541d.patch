commit 4e677b9c40ccbc5f090971b31dc2fe07bf05541d
Author: Bram Moolenaar <Bram@vim.org>
Date:   Thu Jul 28 18:44:27 2022 +0100

    patch 9.0.0101: invalid memory access in diff mode with "dp" and undo
    
    Problem:    Invalid memory access in diff mode with "dp" and undo.
    Solution:   Make sure the line number does not go below one.

diff --git a/src/diff.c b/src/diff.c
index e4bafe2c9..fb43eee84 100644
--- a/src/diff.c
+++ b/src/diff.c
@@ -464,7 +464,10 @@ diff_mark_adjust_tp(
 		    for (i = 0; i < DB_COUNT; ++i)
 			if (tp->tp_diffbuf[i] != NULL && i != idx)
 			{
-			    dp->df_lnum[i] -= off;
+			    if (dp->df_lnum[i] > off)
+				dp->df_lnum[i] -= off;
+			    else
+				dp->df_lnum[i] = 1;
 			    dp->df_count[i] += n;
 			}
 		}
@@ -2863,8 +2866,8 @@ ex_diffgetput(exarg_T *eap)
 	    {
 		// remember deleting the last line of the buffer
 		buf_empty = curbuf->b_ml.ml_line_count == 1;
-		ml_delete(lnum);
-		--added;
+		if (ml_delete(lnum) == OK)
+		    --added;
 	    }
 	    for (i = 0; i < dp->df_count[idx_from] - start_skip - end_skip; ++i)
 	    {
diff --git a/src/testdir/test_diffmode.vim b/src/testdir/test_diffmode.vim
index dcacd5516..41f7fe349 100644
--- a/src/testdir/test_diffmode.vim
+++ b/src/testdir/test_diffmode.vim
@@ -1628,5 +1628,19 @@ func Test_diff_manipulations()
   %bwipe!
 endfunc
 
+" This was causing the line number in the diff block to go below one.
+" FIXME: somehow this causes a valgrind error when run directly but not when
+" run as a test.
+func Test_diff_put_and_undo()
+  set diff
+  next 0
+  split 00
+  sil! norm o0gguudpo0ggJuudp
+
+  bwipe!
+  bwipe!
+  set nodiff
+endfunc
+
 
 " vim: shiftwidth=2 sts=2 expandtab
diff --git a/src/version.c b/src/version.c
index 9e682a5fd..1241e98b0 100644
--- a/src/version.c
+++ b/src/version.c
@@ -735,6 +735,8 @@ static char *(features[]) =
 
 static int included_patches[] =
 {   /* Add new patch number below this line */
+/**/
+    101,
 /**/
     100,
 /**/
