/**
 * @name linux-21b27b2baa27423286e9b8d3f0b194d587083d95-nf_queue_entry_get_refs
 * @id cpp/linux/21b27b2baa27423286e9b8d3f0b194d587083d95/nf-queue-entry-get-refs
 * @description linux-21b27b2baa27423286e9b8d3f0b194d587083d95-net/netfilter/nf_queue.c-nf_queue_entry_get_refs CVE-2022-48911
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vstate_85, IfStmt target_2, Function func) {
exists(IfStmt target_0 |
	exists(LogicalAndExpr obj_0 | obj_0=target_0.getCondition() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLeftOperand() |
			obj_1.getTarget().getName()="sk"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vstate_85
		)
		and exists(NotExpr obj_2 | obj_2=obj_0.getRightOperand() |
			exists(FunctionCall obj_3 | obj_3=obj_2.getOperand() |
				exists(AddressOfExpr obj_4 | obj_4=obj_3.getArgument(0) |
					exists(ValueFieldAccess obj_5 | obj_5=obj_4.getOperand() |
						obj_5.getTarget().getName()="skc_refcnt"
						and obj_5.getQualifier().(PointerFieldAccess).getTarget().getName()="__sk_common"
					)
				)
				and obj_3.getTarget().hasName("atomic_add_unless")
				and obj_3.getArgument(1).(Literal).getValue()="1"
				and obj_3.getArgument(2).(Literal).getValue()="0"
			)
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
)
}

predicate func_2(Variable vstate_85, IfStmt target_2) {
	exists(PointerFieldAccess obj_0 | obj_0=target_2.getCondition() |
		obj_0.getTarget().getName()="in"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vstate_85
	)
	and exists(ExprStmt obj_1 | obj_1=target_2.getThen() |
		exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
			exists(PointerFieldAccess obj_3 | obj_3=obj_2.getArgument(0) |
				obj_3.getTarget().getName()="in"
				and obj_3.getQualifier().(VariableAccess).getTarget()=vstate_85
			)
			and obj_2.getTarget().hasName("dev_hold")
		)
	)
}

from Function func, Variable vstate_85, IfStmt target_2
where
not func_0(vstate_85, target_2, func)
and func_2(vstate_85, target_2)
and vstate_85.getType().hasName("nf_hook_state *")
and vstate_85.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
