/**
 * @name linux-2b8a1fee3488c602aca8bea004a087e60806a5cf-ieee80211_amsdu_to_8023s
 * @id cpp/linux/2b8a1fee3488c602aca8bea004a087e60806a5cf/ieee80211-amsdu-to-8023s
 * @description linux-2b8a1fee3488c602aca8bea004a087e60806a5cf-net/wireless/util.c-ieee80211_amsdu_to_8023s CVE-2020-24588
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable veth_755, ExprStmt target_1, ValueFieldAccess target_2, ValueFieldAccess target_3) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("ether_addr_equal")
	and target_0.getCondition().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="h_dest"
	and target_0.getCondition().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=veth_755
	and target_0.getCondition().(FunctionCall).getArgument(1).(VariableAccess).getType().hasName("const unsigned char[6]")
	and target_0.getThen().(GotoStmt).getName() ="purge"
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(AssignAddExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getExpr().(AssignAddExpr).getRValue().(SizeofTypeOperator).getType() instanceof LongType
	and target_1.getExpr().(AssignAddExpr).getRValue().(SizeofTypeOperator).getValue()="14"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable veth_755, ValueFieldAccess target_2) {
	target_2.getTarget().getName()="h_proto"
	and target_2.getQualifier().(VariableAccess).getTarget()=veth_755
}

predicate func_3(Variable veth_755, ValueFieldAccess target_3) {
	target_3.getTarget().getName()="h_dest"
	and target_3.getQualifier().(VariableAccess).getTarget()=veth_755
}

from Function func, Variable veth_755, ExprStmt target_1, ValueFieldAccess target_2, ValueFieldAccess target_3
where
not func_0(veth_755, target_1, target_2, target_3)
and func_1(func, target_1)
and func_2(veth_755, target_2)
and func_3(veth_755, target_3)
and veth_755.getType().hasName("ethhdr")
and veth_755.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
