/**
 * @name linux-a0c69c492f4a8fad52f0a97565241c926160c9a4-ks8851_tx_work
 * @id cpp/linux/a0c69c492f4a8fad52f0a97565241c926160c9a4/ks8851-tx-work
 * @description linux-a0c69c492f4a8fad52f0a97565241c926160c9a4-drivers/net/ethernet/micrel/ks8851_spi.c-ks8851_tx_work CVE-2024-41036
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vks_313, FunctionCall target_0) {
	exists(AddressOfExpr obj_0 | obj_0=target_0.getArgument(0) |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().getName()="statelock"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vks_313
		)
	)
	and target_0.getTarget().hasName("spin_lock")
	and not target_0.getTarget().hasName("spin_lock_bh")
}

predicate func_1(Variable vks_313, FunctionCall target_1) {
	exists(AddressOfExpr obj_0 | obj_0=target_1.getArgument(0) |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().getName()="statelock"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vks_313
		)
	)
	and target_1.getTarget().hasName("spin_unlock")
	and not target_1.getTarget().hasName("spin_unlock_bh")
}

from Function func, Variable vks_313, FunctionCall target_0, FunctionCall target_1
where
func_0(vks_313, target_0)
and func_1(vks_313, target_1)
and vks_313.getType().hasName("ks8851_net *")
and vks_313.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
