commit c3111b3cf3889bfa7b73ebff83d7397db9b7e5e0
Author: Peter Wang <peter.wang@mediatek.com>
Date:   Fri Jun 28 15:00:30 2024 +0800

    scsi: ufs: core: Fix ufshcd_abort_one racing issue
    
    [ Upstream commit 74736103fb4123c71bf11fb7a6abe7c884c5269e ]
    
    When ufshcd_abort_one is racing with the completion ISR, the completed tag
    of the request's mq_hctx pointer will be set to NULL by ISR.  Return
    success when request is completed by ISR because ufshcd_abort_one does not
    need to do anything.
    
    The racing flow is:
    
    Thread A
    ufshcd_err_handler                                      step 1
            ...
            ufshcd_abort_one
                    ufshcd_try_to_abort_task
                            ufshcd_cmd_inflight(true)       step 3
                    ufshcd_mcq_req_to_hwq
                            blk_mq_unique_tag
                                    rq->mq_hctx->queue_num  step 5
    
    Thread B
    ufs_mtk_mcq_intr(cq complete ISR)                       step 2
            scsi_done
                    ...
                    __blk_mq_free_request
                            rq->mq_hctx = NULL;             step 4
    
    Below is KE back trace.
      ufshcd_try_to_abort_task: cmd at tag 41 not pending in the device.
      ufshcd_try_to_abort_task: cmd at tag=41 is cleared.
      Aborting tag 41 / CDB 0x28 succeeded
      Unable to handle kernel NULL pointer dereference at virtual address 0000000000000194
      pc : [0xffffffddd7a79bf8] blk_mq_unique_tag+0x8/0x14
      lr : [0xffffffddd6155b84] ufshcd_mcq_req_to_hwq+0x1c/0x40 [ufs_mediatek_mod_ise]
       do_mem_abort+0x58/0x118
       el1_abort+0x3c/0x5c
       el1h_64_sync_handler+0x54/0x90
       el1h_64_sync+0x68/0x6c
       blk_mq_unique_tag+0x8/0x14
       ufshcd_err_handler+0xae4/0xfa8 [ufs_mediatek_mod_ise]
       process_one_work+0x208/0x4fc
       worker_thread+0x228/0x438
       kthread+0x104/0x1d4
       ret_from_fork+0x10/0x20
    
    Fixes: 93e6c0e19d5b ("scsi: ufs: core: Clear cmd if abort succeeds in MCQ mode")
    Suggested-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Peter Wang <peter.wang@mediatek.com>
    Link: https://lore.kernel.org/r/20240628070030.30929-3-peter.wang@mediatek.com
    Reviewed-by: Bart Van Assche <bvanassche@acm.org>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/drivers/ufs/core/ufshcd.c b/drivers/ufs/core/ufshcd.c
index 7bb820bfd743..808979a09350 100644
--- a/drivers/ufs/core/ufshcd.c
+++ b/drivers/ufs/core/ufshcd.c
@@ -6363,6 +6363,8 @@ static bool ufshcd_abort_one(struct request *rq, void *priv)
 	/* Release cmd in MCQ mode if abort succeeds */
 	if (is_mcq_enabled(hba) && (*ret == 0)) {
 		hwq = ufshcd_mcq_req_to_hwq(hba, scsi_cmd_to_rq(lrbp->cmd));
+		if (!hwq)
+			return 0;
 		spin_lock_irqsave(&hwq->cq_lock, flags);
 		if (ufshcd_cmd_inflight(lrbp->cmd))
 			ufshcd_release_scsi_cmd(hba, lrbp);
