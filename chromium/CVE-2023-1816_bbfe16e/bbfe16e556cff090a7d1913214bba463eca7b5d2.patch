commit bbfe16e556cff090a7d1913214bba463eca7b5d2	bbfe16e556cff090a7d1913214bba463eca7b5d2
Author: Tommy Steimel <steimel@chromium.org>
Date:   Tue Mar 7 17:19:00 2023 +0000

    Extensions/PiP2: Respect `CanDuplicateTabAt` when duplicating a tab
    
    The `duplicate` method of the Tabs API for extensions does not check
    that the tab can be duplicated as determined in `CanDuplicateTabAt`.
    This causes an issue where picture-in-picture tabs can be duplicated by
    an extension. This CL fixes the `CanDuplicateTabAt` check (which wasn't
    taking is_picture_in_picture into account like other `CanDuplicate`
    checks) and also makes the Tabs API respect that check.
    
    Bug: 1413919
    Change-Id: Ie46517947d774ce0f8f07950db0dba50f8d57fb5
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4312190
    Reviewed-by: Reilly Grant <reillyg@chromium.org>
    Reviewed-by: Peter Bostr√∂m <pbos@chromium.org>
    Commit-Queue: Tommy Steimel <steimel@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1114002}

diff --git a/chrome/browser/extensions/api/tabs/tabs_api.cc b/chrome/browser/extensions/api/tabs/tabs_api.cc
index a13bfdb0b21cb..3ed1336aa181d 100644
--- a/chrome/browser/extensions/api/tabs/tabs_api.cc
+++ b/chrome/browser/extensions/api/tabs/tabs_api.cc
@@ -1319,6 +1319,11 @@ ExtensionFunction::ResponseAction TabsDuplicateFunction::Run() {
   if (!ExtensionTabUtil::IsTabStripEditable())
     return RespondNow(Error(tabs_constants::kTabStripNotEditableError));
 
+  if (!chrome::CanDuplicateTabAt(browser, tab_index)) {
+    return RespondNow(Error(ErrorUtils::FormatErrorMessage(
+        tabs_constants::kCannotDuplicateTab, base::NumberToString(tab_id))));
+  }
+
   WebContents* new_contents = chrome::DuplicateTabAt(browser, tab_index);
   if (!has_callback())
     return RespondNow(NoArguments());
diff --git a/chrome/browser/extensions/api/tabs/tabs_api_unittest.cc b/chrome/browser/extensions/api/tabs/tabs_api_unittest.cc
index 3bda7cae670eb..38ac4cdaff2c0 100644
--- a/chrome/browser/extensions/api/tabs/tabs_api_unittest.cc
+++ b/chrome/browser/extensions/api/tabs/tabs_api_unittest.cc
@@ -1258,4 +1258,37 @@ TEST_F(TabsApiUnitTest, ScreenshotDisabledInProfilePreferences) {
 }
 #endif  // BUILDFLAG(IS_CHROMEOS_ASH)
 
+TEST_F(TabsApiUnitTest, CannotDuplicatePictureInPictureWindows) {
+  // Create picture-in-picture browser.
+  auto pip_window = std::make_unique<TestBrowserWindow>();
+  Browser::CreateParams params(profile(), true);
+  params.type = Browser::TYPE_PICTURE_IN_PICTURE;
+  params.window = pip_window.get();
+  std::unique_ptr<Browser> pip_browser;
+  pip_browser.reset(Browser::Create(params));
+  std::unique_ptr<content::WebContents> contents(
+      content::WebContentsTester::CreateTestWebContents(profile(), nullptr));
+  CreateSessionServiceTabHelper(contents.get());
+  int pip_tab_id = sessions::SessionTabHelper::IdForTab(contents.get()).id();
+  pip_browser->tab_strip_model()->AppendWebContents(std::move(contents),
+                                                    /*foreground=*/true);
+
+  // Attempt to duplicate the picture-in-picture tab. This should fail as
+  // picture-in-picture tabs are not allowed to be duplicated.
+  auto function = base::MakeRefCounted<TabsDuplicateFunction>();
+  auto extension = CreateTabsExtension();
+  function->set_extension(extension);
+  std::string args = base::StringPrintf("[%d]", pip_tab_id);
+  std::string error = extension_function_test_utils::RunFunctionAndReturnError(
+      function.get(), args, pip_browser.get(), api_test_utils::NONE);
+  EXPECT_EQ(ErrorUtils::FormatErrorMessage(tabs_constants::kCannotDuplicateTab,
+                                           base::NumberToString(pip_tab_id)),
+            error);
+
+  // Tear down picture-in-picture browser.
+  pip_browser->tab_strip_model()->DetachAndDeleteWebContentsAt(0);
+  pip_browser.reset();
+  pip_window.reset();
+}
+
 }  // namespace extensions
diff --git a/chrome/browser/extensions/api/tabs/tabs_constants.cc b/chrome/browser/extensions/api/tabs/tabs_constants.cc
index 7089c33720d30..3c8378d7f009e 100644
--- a/chrome/browser/extensions/api/tabs/tabs_constants.cc
+++ b/chrome/browser/extensions/api/tabs/tabs_constants.cc
@@ -89,6 +89,7 @@ const char kTabIndexNotFoundError[] = "No tab at index: *.";
 const char kNotFoundNextPageError[] = "Cannot find a next page in history.";
 const char kTabNotFoundError[] = "No tab with id: *.";
 const char kCannotDiscardTab[] = "Cannot discard tab with id: *.";
+const char kCannotDuplicateTab[] = "Cannot duplicate tab with id: *.";
 const char kCannotFindTabToDiscard[] = "Cannot find a tab to discard.";
 const char kTabStripNotEditableError[] =
     "Tabs cannot be edited right now (user may be dragging a tab).";
diff --git a/chrome/browser/extensions/api/tabs/tabs_constants.h b/chrome/browser/extensions/api/tabs/tabs_constants.h
index c94823053ce01..fc1d59b431744 100644
--- a/chrome/browser/extensions/api/tabs/tabs_constants.h
+++ b/chrome/browser/extensions/api/tabs/tabs_constants.h
@@ -89,6 +89,7 @@ extern const char kTabIndexNotFoundError[];
 extern const char kNotFoundNextPageError[];
 extern const char kTabNotFoundError[];
 extern const char kCannotDiscardTab[];
+extern const char kCannotDuplicateTab[];
 extern const char kCannotFindTabToDiscard[];
 extern const char kTabStripNotEditableError[];
 extern const char kTabStripNotEditableQueryError[];
diff --git a/chrome/browser/ui/browser_commands.cc b/chrome/browser/ui/browser_commands.cc
index 8b4f8fabaa807..b6e80139471c1 100644
--- a/chrome/browser/ui/browser_commands.cc
+++ b/chrome/browser/ui/browser_commands.cc
@@ -908,8 +908,7 @@ void DuplicateTab(Browser* browser) {
 }
 
 bool CanDuplicateTab(const Browser* browser) {
-  return !browser->is_type_picture_in_picture() &&
-         CanDuplicateTabAt(browser, browser->tab_strip_model()->active_index());
+  return CanDuplicateTabAt(browser, browser->tab_strip_model()->active_index());
 }
 
 bool CanDuplicateKeyboardFocusedTab(const Browser* browser) {
@@ -1042,6 +1041,9 @@ WebContents* DuplicateTabAt(Browser* browser, int index) {
 }
 
 bool CanDuplicateTabAt(const Browser* browser, int index) {
+  if (browser->is_type_picture_in_picture()) {
+    return false;
+  }
   WebContents* contents = browser->tab_strip_model()->GetWebContentsAt(index);
   return contents;
 }
