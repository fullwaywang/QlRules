commit e250e8eb2bf9f423a42ebca5ad7a98fcd32ce37c	e250e8eb2bf9f423a42ebca5ad7a98fcd32ce37c
Author: Lei Zhang <thestig@chromium.org>
Date:   Tue Sep 19 20:13:28 2023 +0000

    PDF: Ensure page used in PDFiumRange are loaded
    
    Currently, calling PDFiumRange::GetScreenRects() can trigger a PDFium
    page load, which can have surprising side effects. Prevent this from
    happening by ensuring the page is loaded in the PDFiumRange ctor, and
    use the existing PDFiumPage::ScopedUnloadPreventer mechanism to prevent
    page unloads while PDFiumRange is alive.
    
    To make this work, update PDFiumPage::ScopedUnloadPreventer so it is
    public, and make it copyable. Add a unit test to make sure copying
    ScopedUnloadPreventer works as expected.
    
    Bug: 1483194
    Change-Id: I66b6050258b7f359982c9b73762f0dc0e64e0ed7
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4875506
    Code-Coverage: findit-for-me@appspot.gserviceaccount.com <findit-for-me@appspot.gserviceaccount.com>
    Reviewed-by: Tom Sepez <tsepez@chromium.org>
    Commit-Queue: Lei Zhang <thestig@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1198572}

diff --git a/pdf/pdfium/pdfium_engine.cc b/pdf/pdfium/pdfium_engine.cc
index 57509151478f3..4637d0a31d86b 100644
--- a/pdf/pdfium/pdfium_engine.cc
+++ b/pdf/pdfium/pdfium_engine.cc
@@ -559,6 +559,10 @@ PDFiumEngine::PDFiumEngine(PDFEngine::Client* client,
 }
 
 PDFiumEngine::~PDFiumEngine() {
+  // Clear all the containers that can prevent unloading.
+  find_results_.clear();
+  selection_.clear();
+
   for (auto& page : pages_)
     page->Unload();
 
diff --git a/pdf/pdfium/pdfium_page.cc b/pdf/pdfium/pdfium_page.cc
index 96b85c16d7ae4..18e0c520e7062 100644
--- a/pdf/pdfium/pdfium_page.cc
+++ b/pdf/pdfium/pdfium_page.cc
@@ -384,7 +384,8 @@ PDFiumPage::~PDFiumPage() {
 }
 
 void PDFiumPage::Unload() {
-  // Do not unload while in the middle of a load.
+  // Do not unload while in the middle of a load, or if some external source
+  // expects `this` to stay loaded.
   if (preventing_unload_count_)
     return;
 
@@ -1760,6 +1761,20 @@ PDFiumPage::ScopedUnloadPreventer::ScopedUnloadPreventer(PDFiumPage* page)
   page_->preventing_unload_count_++;
 }
 
+PDFiumPage::ScopedUnloadPreventer::ScopedUnloadPreventer(
+    const ScopedUnloadPreventer& that)
+    : ScopedUnloadPreventer(that.page_) {}
+
+PDFiumPage::ScopedUnloadPreventer& PDFiumPage::ScopedUnloadPreventer::operator=(
+    const ScopedUnloadPreventer& that) {
+  if (page_ != that.page_) {
+    page_->preventing_unload_count_--;
+    page_ = that.page_;
+    page_->preventing_unload_count_++;
+  }
+  return *this;
+}
+
 PDFiumPage::ScopedUnloadPreventer::~ScopedUnloadPreventer() {
   page_->preventing_unload_count_--;
 }
diff --git a/pdf/pdfium/pdfium_page.h b/pdf/pdfium/pdfium_page.h
index 05f348a749357..67fe82f13475d 100644
--- a/pdf/pdfium/pdfium_page.h
+++ b/pdf/pdfium/pdfium_page.h
@@ -43,6 +43,17 @@ struct AccessibilityTextRunInfo;
 // Wrapper around a page from the document.
 class PDFiumPage {
  public:
+  class ScopedUnloadPreventer {
+   public:
+    explicit ScopedUnloadPreventer(PDFiumPage* page);
+    ScopedUnloadPreventer(const ScopedUnloadPreventer& that);
+    ScopedUnloadPreventer& operator=(const ScopedUnloadPreventer& that);
+    ~ScopedUnloadPreventer();
+
+   private:
+    raw_ptr<PDFiumPage> page_;
+  };
+
   PDFiumPage(PDFiumEngine* engine, int i);
   PDFiumPage(const PDFiumPage&) = delete;
   PDFiumPage& operator=(const PDFiumPage&) = delete;
@@ -244,15 +255,6 @@ class PDFiumPage {
   FRIEND_TEST_ALL_PREFIXES(PDFiumPageOverlappingTest, CountPartialOverlaps);
   FRIEND_TEST_ALL_PREFIXES(PDFiumPageTextFieldTest, PopulateTextFields);
 
-  class ScopedUnloadPreventer {
-   public:
-    explicit ScopedUnloadPreventer(PDFiumPage* page);
-    ~ScopedUnloadPreventer();
-
-   private:
-    const raw_ptr<PDFiumPage> page_;
-  };
-
   struct Link {
     Link();
     Link(const Link& that);
diff --git a/pdf/pdfium/pdfium_page_unittest.cc b/pdf/pdfium/pdfium_page_unittest.cc
index 6c90911b56268..7ecf983a614b5 100644
--- a/pdf/pdfium/pdfium_page_unittest.cc
+++ b/pdf/pdfium/pdfium_page_unittest.cc
@@ -46,6 +46,21 @@ TEST(PDFiumPageHelperTest, ToPDFiumRotation) {
   EXPECT_EQ(ToPDFiumRotation(PageOrientation::kClockwise270), 3);
 }
 
+TEST(PDFiumPageHelperTest, ScopedUnloadPreventer) {
+  // Should not DCHECK in its dtor due to ScopedUnloadPreventer usage.
+  PDFiumPage page1(/*engine=*/nullptr, 1);
+  PDFiumPage page2(/*engine=*/nullptr, 2);
+  PDFiumPage::ScopedUnloadPreventer prevent_unload1(&page1);
+  PDFiumPage::ScopedUnloadPreventer prevent_unload2(&page2);
+  PDFiumPage::ScopedUnloadPreventer prevent_unload3(prevent_unload2);
+  PDFiumPage::ScopedUnloadPreventer prevent_unload4(&page2);
+  prevent_unload2 = prevent_unload1;
+  prevent_unload1 = prevent_unload2;
+  prevent_unload1 = prevent_unload4;
+  prevent_unload4 = prevent_unload1;
+  prevent_unload3 = prevent_unload4;
+}
+
 void CompareTextRuns(const AccessibilityTextRunInfo& expected_text_run,
                      const AccessibilityTextRunInfo& actual_text_run) {
   EXPECT_EQ(expected_text_run.len, actual_text_run.len);
diff --git a/pdf/pdfium/pdfium_range.cc b/pdf/pdfium/pdfium_range.cc
index 4e057ebd888fb..88f6371030be6 100644
--- a/pdf/pdfium/pdfium_range.cc
+++ b/pdf/pdfium/pdfium_range.cc
@@ -31,11 +31,18 @@ bool IsIgnorableCharacter(char16_t c) {
 }
 
 PDFiumRange::PDFiumRange(PDFiumPage* page, int char_index, int char_count)
-    : page_(page), char_index_(char_index), char_count_(char_count) {
+    : page_unload_preventer_(page),
+      page_(page),
+      char_index_(char_index),
+      char_count_(char_count) {
   DCHECK(page_);
+  // Ensure page load, while `page_unload_preventer_` prevents page unload.
+  // This prevents GetScreenRects() from triggering page loads, which can have
+  // surprising side effects, considering GetScreenRects() is const.
+  [[maybe_unused]] FPDF_TEXTPAGE text_page = page_->GetTextPage();
 #if DCHECK_IS_ON()
   AdjustForBackwardsRange(char_index, char_count);
-  DCHECK_LE(char_count, FPDFText_CountChars(page_->GetTextPage()));
+  DCHECK_LE(char_count, FPDFText_CountChars(text_page));
 #endif
 }
 
diff --git a/pdf/pdfium/pdfium_range.h b/pdf/pdfium/pdfium_range.h
index 5ce122a7d355f..6c877e51743a4 100644
--- a/pdf/pdfium/pdfium_range.h
+++ b/pdf/pdfium/pdfium_range.h
@@ -49,6 +49,8 @@ class PDFiumRange {
   std::u16string GetText() const;
 
  private:
+  PDFiumPage::ScopedUnloadPreventer page_unload_preventer_;
+
   // The page containing the range. Must outlive `this`.
   raw_ptr<PDFiumPage> page_;
   // Index of first character.
