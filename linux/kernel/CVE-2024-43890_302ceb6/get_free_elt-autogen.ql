/**
 * @name linux-302ceb625d7b990db205a15e371f9a71238de91c-get_free_elt
 * @id cpp/linux/302ceb625d7b990db205a15e371f9a71238de91c/get-free-elt
 * @description linux-302ceb625d7b990db205a15e371f9a71238de91c-kernel/trace/tracing_map.c-get_free_elt CVE-2024-43890
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vmap_452, FunctionCall target_0) {
	exists(AddressOfExpr obj_0 | obj_0=target_0.getArgument(1) |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().getName()="next_elt"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vmap_452
		)
	)
	and exists(AssignExpr obj_2 | obj_2=target_0.getParent() |
		obj_2.getRValue() = target_0
		and obj_2.getLValue().(VariableAccess).getTarget().getType().hasName("int")
	)
	and target_0.getTarget().hasName("atomic_add_return")
	and not target_0.getTarget().hasName("atomic_fetch_add_unless")
	and target_0.getArgument(0).(Literal).getValue()="1"
}

predicate func_1(Parameter vmap_452, AddressOfExpr target_2, RelationalOperation target_3) {
exists(PointerFieldAccess target_1 |
	target_1.getTarget().getName()="max_elts"
	and target_1.getQualifier().(VariableAccess).getTarget()=vmap_452
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getQualifier().(VariableAccess).getLocation())
	and target_1.getQualifier().(VariableAccess).getLocation().isBefore(target_3.getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_2(Parameter vmap_452, AddressOfExpr target_2) {
	exists(PointerFieldAccess obj_0 | obj_0=target_2.getOperand() |
		obj_0.getTarget().getName()="next_elt"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vmap_452
	)
}

predicate func_3(Parameter vmap_452, RelationalOperation target_3) {
	exists(PointerFieldAccess obj_0 | obj_0=target_3.getGreaterOperand() |
		obj_0.getTarget().getName()="max_elts"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vmap_452
	)
	and  (target_3 instanceof GTExpr or target_3 instanceof LTExpr)
	and target_3.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Parameter vmap_452, FunctionCall target_0, AddressOfExpr target_2, RelationalOperation target_3
where
func_0(vmap_452, target_0)
and not func_1(vmap_452, target_2, target_3)
and func_2(vmap_452, target_2)
and func_3(vmap_452, target_3)
and vmap_452.getType().hasName("tracing_map *")
and vmap_452.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
