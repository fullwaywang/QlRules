/**
 * @name linux-92117d8443bc5afacc8d5ba82e541946310f106e-bpf_map_get_with_uref
 * @id cpp/linux/92117d8443bc5afacc8d5ba82e541946310f106e/bpf-map-get-with-uref
 * @description linux-92117d8443bc5afacc8d5ba82e541946310f106e-kernel/bpf/syscall.c-bpf_map_get_with_uref CVE-2016-4558
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vmap_231, ReturnStmt target_2) {
exists(AssignExpr target_0 |
	target_0.getLValue().(VariableAccess).getTarget()=vmap_231
	and target_0.getRValue() instanceof FunctionCall
	and target_2.getExpr().(VariableAccess).getLocation().isBefore(target_0.getLValue().(VariableAccess).getLocation()))
}

predicate func_1(Variable vmap_231, FunctionCall target_1) {
	target_1.getTarget().hasName("bpf_map_inc")
	and target_1.getArgument(0).(VariableAccess).getTarget()=vmap_231
}

predicate func_2(Variable vmap_231, FunctionCall target_4, ReturnStmt target_2) {
	target_2.getExpr().(VariableAccess).getTarget()=vmap_231
	and target_2.getParent().(IfStmt).getCondition()=target_4
}

predicate func_4(Variable vmap_231, FunctionCall target_4) {
	target_4.getTarget().hasName("IS_ERR")
	and target_4.getArgument(0).(VariableAccess).getTarget()=vmap_231
}

from Function func, Variable vmap_231, FunctionCall target_1, ReturnStmt target_2, FunctionCall target_4
where
not func_0(vmap_231, target_2)
and func_1(vmap_231, target_1)
and func_2(vmap_231, target_4, target_2)
and func_4(vmap_231, target_4)
and vmap_231.getType().hasName("bpf_map *")
and vmap_231.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
