/**
 * @name linux-4b3b6c7efee69f077b86ef7f088fb96768e46e1f-ntb_netdev_rx_handler
 * @id cpp/linux/4b3b6c7efee69f077b86ef7f088fb96768e46e1f/ntb-netdev-rx-handler
 * @description linux-4b3b6c7efee69f077b86ef7f088fb96768e46e1f-drivers/net/ntb_netdev.c-ntb_netdev_rx_handler CVE-2024-42110
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vskb_103, BlockStmt target_1, FunctionCall target_0) {
	exists(EQExpr obj_0 | obj_0=target_0.getParent() |
		obj_0.getRightOperand().(Literal).getValue()="1"
		and obj_0.getParent().(IfStmt).getThen()=target_1
	)
	and target_0.getTarget().hasName("__netif_rx")
	and not target_0.getTarget().hasName("netif_rx")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vskb_103
}

predicate func_1(Function func, BlockStmt target_1) {
	exists(ExprStmt obj_0 | obj_0=target_1.getStmt(0) |
		exists(PostfixIncrExpr obj_1 | obj_1=obj_0.getExpr() |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				exists(ValueFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getQualifier() |
						obj_4.getTarget().getName()="stats"
						and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("net_device *")
					)
					and obj_3.getTarget().getName()="(unknown field)"
				)
				and obj_2.getTarget().getName()="rx_errors"
			)
		)
	)
	and exists(ExprStmt obj_5 | obj_5=target_1.getStmt(1) |
		exists(PostfixIncrExpr obj_6 | obj_6=obj_5.getExpr() |
			exists(ValueFieldAccess obj_7 | obj_7=obj_6.getOperand() |
				exists(ValueFieldAccess obj_8 | obj_8=obj_7.getQualifier() |
					exists(PointerFieldAccess obj_9 | obj_9=obj_8.getQualifier() |
						obj_9.getTarget().getName()="stats"
						and obj_9.getQualifier().(VariableAccess).getTarget().getType().hasName("net_device *")
					)
					and obj_8.getTarget().getName()="(unknown field)"
				)
				and obj_7.getTarget().getName()="rx_dropped"
			)
		)
	)
	and target_1.getEnclosingFunction() = func
}

from Function func, Variable vskb_103, FunctionCall target_0, BlockStmt target_1
where
func_0(vskb_103, target_1, target_0)
and func_1(func, target_1)
and vskb_103.getType().hasName("sk_buff *")
and vskb_103.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
