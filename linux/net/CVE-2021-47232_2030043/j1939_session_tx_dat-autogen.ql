/**
 * @name linux-2030043e616cab40f510299f09b636285e0a3678-j1939_session_tx_dat
 * @id cpp/linux/2030043e616cab40f510299f09b636285e0a3678/j1939-session-tx-dat
 * @description linux-2030043e616cab40f510299f09b636285e0a3678-net/can/j1939/transport.c-j1939_session_tx_dat CVE-2021-47232
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vse_skb_774, Parameter vsession_768, FunctionCall target_0) {
	target_0.getTarget().hasName("j1939_session_skb_find_by_offset")
	and not target_0.getTarget().hasName("j1939_session_skb_get_by_offset")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vsession_768
	and target_0.getArgument(1).(MulExpr).getLeftOperand().(ValueFieldAccess).getTarget().getName()="tx"
	and target_0.getArgument(1).(MulExpr).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="pkt"
	and target_0.getArgument(1).(MulExpr).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsession_768
	and target_0.getArgument(1).(MulExpr).getRightOperand().(Literal).getValue()="7"
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vse_skb_774
}

predicate func_1(Variable vret_776, RelationalOperation target_6, ExprStmt target_7) {
exists(ExprStmt target_1 |
	target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_776
	and target_1.getExpr().(AssignExpr).getRValue() instanceof UnaryMinusExpr
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
	and target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation()))
}

predicate func_2(RelationalOperation target_6, Function func) {
exists(GotoStmt target_2 |
	target_2.getName() ="out_free"
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_2
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
	and target_2.getEnclosingFunction() = func)
}

predicate func_3(Variable vse_skb_774, Variable vret_776, ExprStmt target_8, ExprStmt target_9, ReturnStmt target_10, Function func) {
exists(IfStmt target_3 |
	target_3.getCondition().(VariableAccess).getTarget()=vret_776
	and target_3.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("kfree_skb")
	and target_3.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vse_skb_774
	and target_3.getElse().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("consume_skb")
	and target_3.getElse().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vse_skb_774
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
	and target_3.getFollowingStmt() instanceof ReturnStmt
	and target_8.getExpr().(FunctionCall).getArgument(6).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_9.getExpr().(FunctionCall).getArgument(4).(VariableAccess).getLocation().isBefore(target_3.getCondition().(VariableAccess).getLocation())
	and target_3.getCondition().(VariableAccess).getLocation().isBefore(target_10.getExpr().(VariableAccess).getLocation()))
}

predicate func_4(Function func, UnaryMinusExpr target_4) {
	target_4.getValue()="-75"
	and target_4.getEnclosingFunction() = func
}

predicate func_5(RelationalOperation target_6, Function func, ReturnStmt target_5) {
	target_5.getExpr() instanceof UnaryMinusExpr
	and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable vse_skb_774, RelationalOperation target_6) {
	 (target_6 instanceof GTExpr or target_6 instanceof LTExpr)
	and target_6.getGreaterOperand().(AddExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_6.getGreaterOperand().(AddExpr).getRightOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_6.getLesserOperand().(PointerFieldAccess).getTarget().getName()="len"
	and target_6.getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vse_skb_774
}

predicate func_7(Variable vret_776, ExprStmt target_7) {
	target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_776
	and target_7.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

predicate func_8(Variable vse_skb_774, Parameter vsession_768, ExprStmt target_8) {
	target_8.getExpr().(FunctionCall).getTarget().hasName("netdev_printk")
	and target_8.getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="3"
	and target_8.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="ndev"
	and target_8.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("j1939_priv *")
	and target_8.getExpr().(FunctionCall).getArgument(2).(StringLiteral).getValue()="%s: 0x%p: requested data outside of queued buffer: offset %i, len %i, pkt.tx: %i\n"
	and target_8.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_8.getExpr().(FunctionCall).getArgument(4).(VariableAccess).getTarget()=vsession_768
	and target_8.getExpr().(FunctionCall).getArgument(5).(PointerFieldAccess).getTarget().getName()="offset"
	and target_8.getExpr().(FunctionCall).getArgument(5).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("j1939_sk_buff_cb *")
	and target_8.getExpr().(FunctionCall).getArgument(6).(PointerFieldAccess).getTarget().getName()="len"
	and target_8.getExpr().(FunctionCall).getArgument(6).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vse_skb_774
	and target_8.getExpr().(FunctionCall).getArgument(7).(ValueFieldAccess).getTarget().getName()="tx"
	and target_8.getExpr().(FunctionCall).getArgument(7).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="pkt"
	and target_8.getExpr().(FunctionCall).getArgument(7).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsession_768
}

predicate func_9(Variable vret_776, Parameter vsession_768, ExprStmt target_9) {
	target_9.getExpr().(FunctionCall).getTarget().hasName("netdev_alert")
	and target_9.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="ndev"
	and target_9.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("j1939_priv *")
	and target_9.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s: 0x%p: queue data error: %i\n"
	and target_9.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_9.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget()=vsession_768
	and target_9.getExpr().(FunctionCall).getArgument(4).(VariableAccess).getTarget()=vret_776
}

predicate func_10(Variable vret_776, ReturnStmt target_10) {
	target_10.getExpr().(VariableAccess).getTarget()=vret_776
}

from Function func, Variable vse_skb_774, Variable vret_776, Parameter vsession_768, FunctionCall target_0, UnaryMinusExpr target_4, ReturnStmt target_5, RelationalOperation target_6, ExprStmt target_7, ExprStmt target_8, ExprStmt target_9, ReturnStmt target_10
where
func_0(vse_skb_774, vsession_768, target_0)
and not func_1(vret_776, target_6, target_7)
and not func_2(target_6, func)
and not func_3(vse_skb_774, vret_776, target_8, target_9, target_10, func)
and func_4(func, target_4)
and func_5(target_6, func, target_5)
and func_6(vse_skb_774, target_6)
and func_7(vret_776, target_7)
and func_8(vse_skb_774, vsession_768, target_8)
and func_9(vret_776, vsession_768, target_9)
and func_10(vret_776, target_10)
and vse_skb_774.getType().hasName("sk_buff *")
and vret_776.getType().hasName("int")
and vsession_768.getType().hasName("j1939_session *")
and vse_skb_774.(LocalVariable).getFunction() = func
and vret_776.(LocalVariable).getFunction() = func
and vsession_768.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
