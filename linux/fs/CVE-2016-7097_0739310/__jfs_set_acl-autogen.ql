/**
 * @name linux-073931017b49d9458aa351605b43a7e34598caef-__jfs_set_acl
 * @id cpp/linux/073931017b49d9458aa351605b43a7e34598caef/--jfs-set-acl
 * @description linux-073931017b49d9458aa351605b43a7e34598caef-fs/jfs/acl.c-__jfs_set_acl CVE-2016-7097
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vinode_69, Parameter vacl_70, Variable vrc_73, FunctionCall target_0) {
	target_0.getTarget().hasName("posix_acl_equiv_mode")
	and not target_0.getTarget().hasName("posix_acl_update_mode")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vacl_70
	and target_0.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="i_mode"
	and target_0.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinode_69
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vrc_73
}

predicate func_2(Parameter vacl_70, IfStmt target_7) {
exists(AddressOfExpr target_2 |
	target_2.getOperand().(VariableAccess).getTarget()=vacl_70
	and target_2.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
	and target_2.getOperand().(VariableAccess).getLocation().isBefore(target_7.getCondition().(VariableAccess).getLocation()))
}

predicate func_3(Variable vrc_73, ReturnStmt target_8, RelationalOperation target_3) {
	 (target_3 instanceof GTExpr or target_3 instanceof LTExpr)
	and target_3.getLesserOperand().(VariableAccess).getTarget()=vrc_73
	and target_3.getGreaterOperand().(Literal).getValue()="0"
	and target_3.getParent().(IfStmt).getThen()=target_8
}

predicate func_4(Variable vrc_73, ExprStmt target_9, VariableAccess target_4) {
	target_4.getTarget()=vrc_73
	and target_4.getParent().(EQExpr).getRightOperand() instanceof Literal
	and target_4.getParent().(EQExpr).getParent().(IfStmt).getThen()=target_9
}

predicate func_5(Parameter vacl_70, VariableAccess target_5) {
	target_5.getTarget()=vacl_70
	and target_5.getParent().(AssignExpr).getLValue() = target_5
	and target_5.getParent().(AssignExpr).getRValue() instanceof Literal
}

predicate func_6(Parameter vacl_70, Variable vrc_73, VariableAccess target_10, IfStmt target_6) {
	target_6.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vrc_73
	and target_6.getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_6.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vacl_70
	and target_6.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10
}

predicate func_7(Parameter vacl_70, IfStmt target_7) {
	target_7.getCondition().(VariableAccess).getTarget()=vacl_70
	and target_7.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_7.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("posix_acl_xattr_size")
	and target_7.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="a_count"
	and target_7.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vacl_70
	and target_7.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("char *")
	and target_7.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("kmalloc")
	and target_7.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("int")
	and target_7.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(BitwiseOrExpr).getValue()="37748928"
}

predicate func_8(Variable vrc_73, RelationalOperation target_3, ReturnStmt target_8) {
	target_8.getExpr().(VariableAccess).getTarget()=vrc_73
	and target_8.getParent().(IfStmt).getCondition()=target_3
}

predicate func_9(Function func, ExprStmt target_9) {
	target_9.getExpr() instanceof AssignExpr
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Parameter vacl_70, BlockStmt target_11, VariableAccess target_10) {
	target_10.getTarget()=vacl_70
	and target_10.getParent().(IfStmt).getThen()=target_11
}

predicate func_11(Parameter vinode_69, Variable vrc_73, BlockStmt target_11) {
	target_11.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vrc_73
	and target_11.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue() instanceof FunctionCall
	and target_11.getStmt(1).(IfStmt).getCondition() instanceof RelationalOperation
	and target_11.getStmt(1).(IfStmt).getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=vrc_73
	and target_11.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="i_ctime"
	and target_11.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinode_69
	and target_11.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("current_kernel_time")
}

from Function func, Parameter vinode_69, Parameter vacl_70, Variable vrc_73, FunctionCall target_0, RelationalOperation target_3, VariableAccess target_4, VariableAccess target_5, IfStmt target_6, IfStmt target_7, ReturnStmt target_8, ExprStmt target_9, VariableAccess target_10, BlockStmt target_11
where
func_0(vinode_69, vacl_70, vrc_73, target_0)
and not func_2(vacl_70, target_7)
and func_3(vrc_73, target_8, target_3)
and func_4(vrc_73, target_9, target_4)
and func_5(vacl_70, target_5)
and func_6(vacl_70, vrc_73, target_10, target_6)
and func_7(vacl_70, target_7)
and func_8(vrc_73, target_3, target_8)
and func_9(func, target_9)
and func_10(vacl_70, target_11, target_10)
and func_11(vinode_69, vrc_73, target_11)
and vinode_69.getType().hasName("inode *")
and vacl_70.getType().hasName("posix_acl *")
and vrc_73.getType().hasName("int")
and vinode_69.getFunction() = func
and vacl_70.getFunction() = func
and vrc_73.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
