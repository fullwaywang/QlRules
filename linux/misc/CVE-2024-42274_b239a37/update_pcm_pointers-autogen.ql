/**
 * @name linux-b239a37d68e8bc59f9516444da222841e3b13ba9-update_pcm_pointers
 * @id cpp/linux/b239a37d68e8bc59f9516444da222841e3b13ba9/update-pcm-pointers
 * @description linux-b239a37d68e8bc59f9516444da222841e3b13ba9-sound/firewire/amdtp-stream.c-update_pcm_pointers CVE-2024-42274
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vs_598, ExprStmt target_4) {
exists(FunctionCall target_0 |
	exists(AddressOfExpr obj_0 | obj_0=target_0.getArgument(1) |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().getName()="period_work"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vs_598
		)
	)
	and target_0.getTarget().hasName("queue_work")
	and target_0.getArgument(0).(VariableAccess).getType().hasName("workqueue_struct *")
	and target_4.getExpr().(AssignSubExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Parameter vpcm_599, NotExpr target_5, IfStmt target_1) {
	exists(BitwiseAndExpr obj_0 | obj_0=target_1.getCondition() |
		obj_0.getLeftOperand().(FunctionCall).getTarget().hasName("preempt_count")
		and obj_0.getRightOperand().(BinaryBitwiseOperation).getValue()="65280"
	)
	and exists(BlockStmt obj_1 | obj_1=target_1.getThen() |
		exists(ExprStmt obj_2 | obj_2=obj_1.getStmt(0) |
			exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
				obj_3.getTarget().hasName("snd_pcm_period_elapsed")
				and obj_3.getArgument(0).(VariableAccess).getTarget()=vpcm_599
			)
		)
	)
	and exists(BlockStmt obj_4 | obj_4=target_1.getElse() |
		exists(ExprStmt obj_5 | obj_5=obj_4.getStmt(0) |
			exists(FunctionCall obj_6 | obj_6=obj_5.getExpr() |
				obj_6.getTarget().hasName("snd_pcm_period_elapsed_under_stream_lock")
				and obj_6.getArgument(0).(VariableAccess).getTarget()=vpcm_599
			)
		)
	)
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

/*predicate func_2(Parameter vpcm_599, FunctionCall target_2) {
	target_2.getTarget().hasName("snd_pcm_period_elapsed")
	and target_2.getArgument(0).(VariableAccess).getTarget()=vpcm_599
}

*/
/*predicate func_3(Parameter vpcm_599, BitwiseAndExpr target_6, ExprStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		obj_0.getTarget().hasName("snd_pcm_period_elapsed_under_stream_lock")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vpcm_599
	)
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

*/
predicate func_4(Parameter vs_598, Parameter vpcm_599, ExprStmt target_4) {
	exists(AssignSubExpr obj_0 | obj_0=target_4.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="pcm_period_pointer"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vs_598
		)
		and exists(PointerFieldAccess obj_2 | obj_2=obj_0.getRValue() |
			exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
				obj_3.getTarget().getName()="runtime"
				and obj_3.getQualifier().(VariableAccess).getTarget()=vpcm_599
			)
			and obj_2.getTarget().getName()="period_size"
		)
	)
}

predicate func_5(Parameter vpcm_599, NotExpr target_5) {
	exists(PointerFieldAccess obj_0 | obj_0=target_5.getOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getQualifier() |
			obj_1.getTarget().getName()="runtime"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vpcm_599
		)
		and obj_0.getTarget().getName()="no_period_wakeup"
	)
}

predicate func_6(Function func, BitwiseAndExpr target_6) {
	target_6.getLeftOperand() instanceof FunctionCall
	and target_6.getRightOperand() instanceof BinaryBitwiseOperation
	and target_6.getEnclosingFunction() = func
}

from Function func, Parameter vs_598, Parameter vpcm_599, IfStmt target_1, ExprStmt target_4, NotExpr target_5, BitwiseAndExpr target_6
where
not func_0(vs_598, target_4)
and func_1(vpcm_599, target_5, target_1)
and func_4(vs_598, vpcm_599, target_4)
and func_5(vpcm_599, target_5)
and func_6(func, target_6)
and vs_598.getType().hasName("amdtp_stream *")
and vpcm_599.getType().hasName("snd_pcm_substream *")
and vs_598.getFunction() = func
and vpcm_599.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
