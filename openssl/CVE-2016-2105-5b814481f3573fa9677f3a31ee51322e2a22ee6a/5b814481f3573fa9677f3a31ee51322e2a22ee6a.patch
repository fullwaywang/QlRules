commit 5b814481f3573fa9677f3a31ee51322e2a22ee6a
Author: Matt Caswell <matt@openssl.org>
Date:   Fri Mar 4 10:17:17 2016 +0000

    Avoid overflow in EVP_EncodeUpdate
    
    An overflow can occur in the EVP_EncodeUpdate function which is used for
    Base64 encoding of binary data. If an attacker is able to supply very large
    amounts of input data then a length check can overflow resulting in a heap
    corruption. Due to the very large amounts of data involved this will most
    likely result in a crash.
    
    Internally to OpenSSL the EVP_EncodeUpdate function is primarly used by the
    PEM_write_bio* family of functions. These are mainly used within the
    OpenSSL command line applications, so any application which processes
    data from an untrusted source and outputs it as a PEM file should be
    considered vulnerable to this issue.
    
    User applications that call these APIs directly with large amounts of
    untrusted data may also be vulnerable.
    
    Issue reported by Guido Vranken.
    
    CVE-2016-2105
    
    Reviewed-by: Richard Levitte <levitte@openssl.org>

diff --git a/crypto/evp/encode.c b/crypto/evp/encode.c
index c6abc4ae8e..a5d0c653cc 100644
--- a/crypto/evp/encode.c
+++ b/crypto/evp/encode.c
@@ -157,7 +157,7 @@ void EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
     if (inl <= 0)
         return;
     OPENSSL_assert(ctx->length <= (int)sizeof(ctx->enc_data));
-    if ((ctx->num + inl) < ctx->length) {
+    if (ctx->length - ctx->num > inl) {
         memcpy(&(ctx->enc_data[ctx->num]), in, inl);
         ctx->num += inl;
         return;
