/**
 * @name linux-9709674e68646cee5a24e3000b3558d25412203a-ip4_datagram_release_cb
 * @id cpp/linux/9709674e68646cee5a24e3000b3558d25412203a/ip4-datagram-release-cb
 * @description linux-9709674e68646cee5a24e3000b3558d25412203a-net/ipv4/datagram.c-ip4_datagram_release_cb CVE-2014-9914
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsk_89, FunctionCall target_0) {
		target_0.getTarget().hasName("__sk_dst_set")
		and not target_0.getTarget().hasName("sk_dst_set")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vsk_89
		and target_0.getArgument(1) instanceof AddressOfExpr
}

predicate func_1(Function func) {
	exists(AssignExpr target_1 |
		target_1.getLValue().(VariableAccess).getType().hasName("dst_entry *")
		and target_1.getRValue() instanceof FunctionCall
		and target_1.getEnclosingFunction() = func)
}

predicate func_2(Function func) {
	exists(LogicalOrExpr target_2 |
		target_2.getAnOperand().(NotExpr).getOperand().(VariableAccess).getType().hasName("dst_entry *")
		and target_2.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="obsolete"
		and target_2.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("dst_entry *")
		and target_2.getParent().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand() instanceof FunctionCall
		and target_2.getParent().(LogicalOrExpr).getAnOperand() instanceof FunctionCall
		and target_2.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen() instanceof ReturnStmt
		and target_2.getEnclosingFunction() = func)
}

predicate func_4(Function func) {
	exists(VariableCall target_4 |
		target_4.getExpr().(PointerFieldAccess).getTarget().getName()="check"
		and target_4.getExpr().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ops"
		and target_4.getExpr().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("dst_entry *")
		and target_4.getArgument(0).(VariableAccess).getType().hasName("dst_entry *")
		and target_4.getArgument(1) instanceof Literal
		and target_4.getEnclosingFunction() = func)
}

predicate func_5(Function func) {
	exists(ExprStmt target_5 |
		target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("dst_entry *")
		and target_5.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition() instanceof NotExpr
		and target_5.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getThen() instanceof AddressOfExpr
		and target_5.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getElse().(Literal).getValue()="0"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_5)
}

predicate func_6(Parameter vsk_89, FunctionCall target_20, Function func) {
	exists(ExprStmt target_6 |
		target_6.getExpr().(FunctionCall).getTarget().hasName("sk_dst_set")
		and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_89
		and target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getType().hasName("dst_entry *")
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_6
		and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_20.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_9(Function func, ExprStmt target_9) {
		target_9.getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_9
}

predicate func_10(Parameter vsk_89, FunctionCall target_10) {
		target_10.getTarget().hasName("__sk_dst_get")
		and target_10.getArgument(0).(VariableAccess).getTarget()=vsk_89
}

predicate func_11(Variable vrt_95, ExprStmt target_21, NotExpr target_11) {
		target_11.getOperand().(FunctionCall).getTarget().hasName("IS_ERR")
		and target_11.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrt_95
		and target_11.getParent().(IfStmt).getThen()=target_21
}

predicate func_12(Variable vrt_95, AddressOfExpr target_12) {
		target_12.getOperand().(PointerFieldAccess).getTarget().getName()="dst"
		and target_12.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vrt_95
		and target_12.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_13(Parameter vsk_89, VariableAccess target_13) {
		target_13.getTarget()=vsk_89
		and target_13.getParent().(FunctionCall).getParent().(LogicalOrExpr).getAnOperand() instanceof FunctionCall
}

predicate func_15(Function func, ReturnStmt target_15) {
		func.getEntryPoint().(BlockStmt).getAStmt()=target_15
}

predicate func_16(LogicalOrExpr target_22, Function func, ReturnStmt target_16) {
		target_16.getParent().(IfStmt).getCondition()=target_22
		and target_16.getEnclosingFunction() = func
}

predicate func_17(Parameter vsk_89, FunctionCall target_17) {
		target_17.getTarget().hasName("__sk_dst_check")
		and target_17.getArgument(0).(VariableAccess).getTarget()=vsk_89
		and target_17.getArgument(1) instanceof Literal
		and target_17.getParent().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand() instanceof FunctionCall
		and target_17.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen() instanceof ReturnStmt
}

predicate func_18(Function func, IfStmt target_18) {
		target_18.getCondition() instanceof NotExpr
		and target_18.getThen().(ExprStmt).getExpr() instanceof FunctionCall
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_18
}

predicate func_20(Parameter vsk_89, FunctionCall target_20) {
		target_20.getTarget().hasName("sock_net")
		and target_20.getArgument(0).(VariableAccess).getTarget()=vsk_89
}

predicate func_21(Function func, ExprStmt target_21) {
		target_21.getExpr() instanceof FunctionCall
		and target_21.getEnclosingFunction() = func
}

predicate func_22(Function func, LogicalOrExpr target_22) {
		target_22.getAnOperand().(NotExpr).getOperand() instanceof FunctionCall
		and target_22.getAnOperand() instanceof FunctionCall
		and target_22.getEnclosingFunction() = func
}

from Function func, Variable vrt_95, Parameter vsk_89, FunctionCall target_0, ExprStmt target_9, FunctionCall target_10, NotExpr target_11, AddressOfExpr target_12, VariableAccess target_13, ReturnStmt target_15, ReturnStmt target_16, FunctionCall target_17, IfStmt target_18, FunctionCall target_20, ExprStmt target_21, LogicalOrExpr target_22
where
func_0(vsk_89, target_0)
and not func_1(func)
and not func_2(func)
and not func_4(func)
and not func_5(func)
and not func_6(vsk_89, target_20, func)
and func_9(func, target_9)
and func_10(vsk_89, target_10)
and func_11(vrt_95, target_21, target_11)
and func_12(vrt_95, target_12)
and func_13(vsk_89, target_13)
and func_15(func, target_15)
and func_16(target_22, func, target_16)
and func_17(vsk_89, target_17)
and func_18(func, target_18)
and func_20(vsk_89, target_20)
and func_21(func, target_21)
and func_22(func, target_22)
and vrt_95.getType().hasName("rtable *")
and vsk_89.getType().hasName("sock *")
and vrt_95.(LocalVariable).getFunction() = func
and vsk_89.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
