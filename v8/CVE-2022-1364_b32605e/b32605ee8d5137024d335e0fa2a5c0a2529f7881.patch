commit b32605ee8d5137024d335e0fa2a5c0a2529f7881	b32605ee8d5137024d335e0fa2a5c0a2529f7881
Author: Tobias Tebbi <tebbi@chromium.org>
Date:   Thu Apr 14 07:57:08 2022 +0000

    [compiler] mark receiver and function as escaping, expanded to continuation frames
    
    Bug: chromium:1315901
    Change-Id: I99ed1562356676f54e69a832c8e862c1cf74fb07
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/3585948
    Reviewed-by: Samuel Gro√ü <saelo@chromium.org>
    Commit-Queue: Tobias Tebbi <tebbi@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#79984}

diff --git a/src/compiler/escape-analysis.cc b/src/compiler/escape-analysis.cc
index fe8126f9638..1ee9100ecd7 100644
--- a/src/compiler/escape-analysis.cc
+++ b/src/compiler/escape-analysis.cc
@@ -812,9 +812,14 @@ void ReduceNode(const Operator* op, EscapeAnalysisTracker::Scope* current,
       // We mark the receiver as escaping due to the non-standard `.getThis`
       // API.
       FrameState frame_state{current->CurrentNode()};
-      if (frame_state.frame_state_info().type() !=
-          FrameStateType::kUnoptimizedFunction)
+      FrameStateType type = frame_state.frame_state_info().type();
+      // This needs to be kept in sync with the frame types supported in
+      // `OptimizedFrame::Summarize`.
+      if (type != FrameStateType::kUnoptimizedFunction &&
+          type != FrameStateType::kJavaScriptBuiltinContinuation &&
+          type != FrameStateType::kJavaScriptBuiltinContinuationWithCatch) {
         break;
+      }
       StateValuesAccess::iterator it =
           StateValuesAccess(frame_state.parameters()).begin();
       if (!it.done()) {
