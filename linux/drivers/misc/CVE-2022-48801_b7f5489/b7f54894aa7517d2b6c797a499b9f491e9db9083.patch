commit b7f54894aa7517d2b6c797a499b9f491e9db9083
Author: Mathias Krause <minipli@grsecurity.net>
Date:   Mon Feb 7 16:01:19 2022 +0100

    iio: buffer: Fix file related error handling in IIO_BUFFER_GET_FD_IOCTL
    
    commit c72ea20503610a4a7ba26c769357d31602769c01 upstream.
    
    If we fail to copy the just created file descriptor to userland, we
    try to clean up by putting back 'fd' and freeing 'ib'. The code uses
    put_unused_fd() for the former which is wrong, as the file descriptor
    was already published by fd_install() which gets called internally by
    anon_inode_getfd().
    
    This makes the error handling code leaving a half cleaned up file
    descriptor table around and a partially destructed 'file' object,
    allowing userland to play use-after-free tricks on us, by abusing
    the still usable fd and making the code operate on a dangling
    'file->private_data' pointer.
    
    Instead of leaving the kernel in a partially corrupted state, don't
    attempt to explicitly clean up and leave this to the process exit
    path that'll release any still valid fds, including the one created
    by the previous call to anon_inode_getfd(). Simply return -EFAULT to
    indicate the error.
    
    Fixes: f73f7f4da581 ("iio: buffer: add ioctl() to support opening extra buffers for IIO device")
    Cc: stable@kernel.org
    Cc: Jonathan Cameron <jic23@kernel.org>
    Cc: Alexandru Ardelean <ardeleanalex@gmail.com>
    Cc: Lars-Peter Clausen <lars@metafoo.de>
    Cc: Nuno Sa <Nuno.Sa@analog.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Mathias Krause <minipli@grsecurity.net>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/iio/industrialio-buffer.c b/drivers/iio/industrialio-buffer.c
index 2f98ba70e3d7..c81dbd2f0972 100644
--- a/drivers/iio/industrialio-buffer.c
+++ b/drivers/iio/industrialio-buffer.c
@@ -1446,9 +1446,17 @@ static long iio_device_buffer_getfd(struct iio_dev *indio_dev, unsigned long arg
 	}
 
 	if (copy_to_user(ival, &fd, sizeof(fd))) {
-		put_unused_fd(fd);
-		ret = -EFAULT;
-		goto error_free_ib;
+		/*
+		 * "Leak" the fd, as there's not much we can do about this
+		 * anyway. 'fd' might have been closed already, as
+		 * anon_inode_getfd() called fd_install() on it, which made
+		 * it reachable by userland.
+		 *
+		 * Instead of allowing a malicious user to play tricks with
+		 * us, rely on the process exit path to do any necessary
+		 * cleanup, as in releasing the file, if still needed.
+		 */
+		return -EFAULT;
 	}
 
 	return 0;
