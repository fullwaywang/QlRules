/**
 * @name linux-0558f33c06bb910e2879e355192227a8e8f0219d-sas_resume_port
 * @id cpp/linux/0558f33c06bb910e2879e355192227a8e8f0219d/sas-resume-port
 * @description linux-0558f33c06bb910e2879e355192227a8e8f0219d-drivers/scsi/libsas/sas_port.c-sas_resume_port CVE-2017-18232
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Variable vport_45, VariableAccess target_2, ExprStmt target_3, ExprStmt target_4) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("sas_destruct_devices")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vport_45
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable vrc_64, VariableAccess target_2) {
	target_2.getTarget()=vrc_64
}

predicate func_3(Variable vport_45, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("sas_unregister_dev")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vport_45
	and target_3.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("domain_device *")
}

predicate func_4(Variable vport_45, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("sas_discover_event")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vport_45
	and target_4.getExpr().(FunctionCall).getArgument(1) instanceof EnumConstantAccess
}

from Function func, Variable vport_45, Variable vrc_64, VariableAccess target_2, ExprStmt target_3, ExprStmt target_4
where
not func_1(vport_45, target_2, target_3, target_4)
and func_2(vrc_64, target_2)
and func_3(vport_45, target_3)
and func_4(vport_45, target_4)
and vport_45.getType().hasName("asd_sas_port *")
and vrc_64.getType().hasName("int")
and vport_45.(LocalVariable).getFunction() = func
and vrc_64.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
