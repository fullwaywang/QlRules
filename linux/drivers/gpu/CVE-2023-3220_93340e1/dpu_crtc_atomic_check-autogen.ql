/**
 * @name linux-93340e10b9c5fc86730d149636e0aa8b47bb5a34-dpu_crtc_atomic_check
 * @id cpp/linux/93340e10b9c5fc86730d149636e0aa8b47bb5a34/dpu-crtc-atomic-check
 * @description linux-93340e10b9c5fc86730d149636e0aa8b47bb5a34-dpu_crtc_atomic_check CVE-2023-3220
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vpstates_1140, PointerDereferenceExpr target_1, ArrayExpr target_2, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vpstates_1140
		and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-12"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_1.getOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation())
		and target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation().isBefore(target_2.getArrayBase().(VariableAccess).getLocation()))
}

predicate func_1(Variable vpstates_1140, PointerDereferenceExpr target_1) {
		target_1.getOperand().(VariableAccess).getTarget()=vpstates_1140
}

predicate func_2(Variable vpstates_1140, ArrayExpr target_2) {
		target_2.getArrayBase().(VariableAccess).getTarget()=vpstates_1140
		and target_2.getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Variable vpstates_1140, PointerDereferenceExpr target_1, ArrayExpr target_2
where
not func_0(vpstates_1140, target_1, target_2, func)
and func_1(vpstates_1140, target_1)
and func_2(vpstates_1140, target_2)
and vpstates_1140.getType().hasName("plane_state *")
and vpstates_1140.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
