/**
 * @name linux-d5d39c707a4cf0bcc84680178677b97aa2cb2627-filemap_cachestat
 * @id cpp/linux/d5d39c707a4cf0bcc84680178677b97aa2cb2627/filemap-cachestat
 * @description linux-d5d39c707a4cf0bcc84680178677b97aa2cb2627-mm/filemap.c-filemap_cachestat CVE-2024-35797
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vswp_4198, FunctionCall target_2, ExprStmt target_4) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("non_swap_entry")
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vswp_4198
	and target_0.getThen().(GotoStmt).getName() ="resched"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vshadow_4190, FunctionCall target_2, ExprStmt target_4, FunctionCall target_5) {
exists(IfStmt target_1 |
	target_1.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vshadow_4190
	and target_1.getThen().(GotoStmt).getName() ="resched"
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(3)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_1.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation())
	and target_1.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation().isBefore(target_5.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Function func, FunctionCall target_2) {
	target_2.getTarget().hasName("shmem_mapping")
	and target_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("address_space *")
	and target_2.getEnclosingFunction() = func
}

predicate func_4(Variable vshadow_4190, Variable vswp_4198, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vshadow_4190
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("get_shadow_from_swap_cache")
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vswp_4198
}

predicate func_5(Variable vshadow_4190, FunctionCall target_5) {
	target_5.getTarget().hasName("workingset_test_recent")
	and target_5.getArgument(0).(VariableAccess).getTarget()=vshadow_4190
	and target_5.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("bool")
}

from Function func, Variable vshadow_4190, Variable vswp_4198, FunctionCall target_2, ExprStmt target_4, FunctionCall target_5
where
not func_0(vswp_4198, target_2, target_4)
and not func_1(vshadow_4190, target_2, target_4, target_5)
and func_2(func, target_2)
and func_4(vshadow_4190, vswp_4198, target_4)
and func_5(vshadow_4190, target_5)
and vshadow_4190.getType().hasName("void *")
and vswp_4198.getType().hasName("swp_entry_t")
and vshadow_4190.(LocalVariable).getFunction() = func
and vswp_4198.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
