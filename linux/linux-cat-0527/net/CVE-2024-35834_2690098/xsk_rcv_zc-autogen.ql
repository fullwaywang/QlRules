/**
 * @name linux-269009893146c495f41e9572dd9319e787c2eba9-xsk_rcv_zc
 * @id cpp/linux/269009893146c495f41e9572dd9319e787c2eba9/xsk-rcv-zc
 * @description linux-269009893146c495f41e9572dd9319e787c2eba9-net/xdp/xsk.c-xsk_rcv_zc CVE-2024-35834
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable verr_164, Function func, ReturnStmt target_0) {
	target_0.getExpr().(VariableAccess).getTarget()=verr_164
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
}

predicate func_1(ExprStmt target_11, Function func) {
exists(IfStmt target_1 |
	target_1.getCondition() instanceof FunctionCall
	and target_1.getThen().(ReturnStmt).getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_11.getLocation()))
}

predicate func_2(VariableAccess target_7, Function func) {
exists(GotoStmt target_2 |
	target_2.getName() ="err"
	and target_2.getParent().(IfStmt).getCondition()=target_7
	and target_2.getEnclosingFunction() = func)
}

predicate func_4(Parameter vxdp_157, FunctionCall target_12, Function func) {
exists(ExprStmt target_4 |
	target_4.getExpr().(FunctionCall).getTarget().hasName("xsk_buff_free")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vxdp_157
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
	and target_12.getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_5(Variable vfrags_160, Variable verr_164, FunctionCall target_5) {
	target_5.getTarget().hasName("__builtin_expect")
	and target_5.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vfrags_160
	and target_5.getArgument(1).(Literal).getValue()="1"
	and target_5.getParent().(LogicalOrExpr).getLeftOperand().(VariableAccess).getTarget()=verr_164
	and target_5.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_6(Variable verr_164, VariableAccess target_7, ReturnStmt target_6) {
	target_6.getExpr().(VariableAccess).getTarget()=verr_164
	and target_6.getParent().(IfStmt).getCondition()=target_7
}

predicate func_7(Variable verr_164, ReturnStmt target_6, VariableAccess target_7) {
	target_7.getTarget()=verr_164
	and target_7.getParent().(IfStmt).getThen()=target_6
}

/*predicate func_8(Variable vfrags_160, Variable verr_164, VariableAccess target_8) {
	target_8.getTarget()=verr_164
	and target_8.getParent().(LogicalOrExpr).getRightOperand().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_8.getParent().(LogicalOrExpr).getRightOperand().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vfrags_160
	and target_8.getParent().(LogicalOrExpr).getRightOperand().(FunctionCall).getArgument(1).(Literal).getValue()="1"
	and target_8.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen() instanceof GotoStmt
}

*/
predicate func_9(Variable verr_164, LogicalOrExpr target_9) {
	target_9.getLeftOperand().(VariableAccess).getTarget()=verr_164
	and target_9.getRightOperand() instanceof FunctionCall
	and target_9.getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_10(Variable verr_164, VariableAccess target_10) {
	target_10.getTarget()=verr_164
}

predicate func_11(Function func, ExprStmt target_11) {
	target_11.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("list_head *")
	and target_11.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="xskb_list"
	and target_11.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="pool"
	and target_11.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("xdp_buff_xsk *")
	and target_11.getEnclosingFunction() = func
}

predicate func_12(Parameter vxdp_157, FunctionCall target_12) {
	target_12.getTarget().hasName("xdp_buff_has_frags")
	and target_12.getArgument(0).(VariableAccess).getTarget()=vxdp_157
}

from Function func, Parameter vxdp_157, Variable vfrags_160, Variable verr_164, ReturnStmt target_0, FunctionCall target_5, ReturnStmt target_6, VariableAccess target_7, LogicalOrExpr target_9, VariableAccess target_10, ExprStmt target_11, FunctionCall target_12
where
func_0(verr_164, func, target_0)
and not func_1(target_11, func)
and not func_2(target_7, func)
and not func_4(vxdp_157, target_12, func)
and func_5(vfrags_160, verr_164, target_5)
and func_6(verr_164, target_7, target_6)
and func_7(verr_164, target_6, target_7)
and func_9(verr_164, target_9)
and func_10(verr_164, target_10)
and func_11(func, target_11)
and func_12(vxdp_157, target_12)
and vxdp_157.getType().hasName("xdp_buff *")
and vfrags_160.getType().hasName("u32")
and verr_164.getType().hasName("int")
and vxdp_157.getFunction() = func
and vfrags_160.(LocalVariable).getFunction() = func
and verr_164.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
