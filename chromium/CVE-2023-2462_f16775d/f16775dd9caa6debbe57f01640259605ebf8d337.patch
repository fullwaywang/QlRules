commit f16775dd9caa6debbe57f01640259605ebf8d337	f16775dd9caa6debbe57f01640259605ebf8d337
Author: Sina Firoozabadi <sinafirooz@google.com>
Date:   Mon Mar 6 23:08:43 2023 +0000

    Refactor the Web Bluetooth tests to pass in a `PendingReceiver` rather than having it owned by `TestRenderFrameHost`.
    
    Bug: 1375133
    Change-Id: I9267127714db681c6c6e41ad86e5a6273cf34846
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4214467
    Reviewed-by: Robert Kroeger <rjkroege@chromium.org>
    Reviewed-by: Reilly Grant <reillyg@chromium.org>
    Commit-Queue: Sina Firoozabadi <sinafirooz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1113641}

diff --git a/content/browser/bluetooth/frame_connected_bluetooth_devices_unittest.cc b/content/browser/bluetooth/frame_connected_bluetooth_devices_unittest.cc
index d3f1fa81e57b6..dc4d7e3760653 100644
--- a/content/browser/bluetooth/frame_connected_bluetooth_devices_unittest.cc
+++ b/content/browser/bluetooth/frame_connected_bluetooth_devices_unittest.cc
@@ -7,7 +7,6 @@
 #include <tuple>
 
 #include "base/memory/raw_ptr.h"
-#include "base/memory/ref_counted.h"
 #include "content/browser/bluetooth/web_bluetooth_service_impl.h"
 #include "content/test/test_render_view_host.h"
 #include "content/test/test_web_contents.h"
@@ -87,20 +86,22 @@ class FrameConnectedBluetoothDevicesTest
     subframe->InitializeRenderFrameIfNeeded();
 
     // Simulate two frames each connected to a bluetooth service.
-    service0_ = contents()
-                    ->GetPrimaryMainFrame()
-                    ->CreateWebBluetoothServiceForTesting();
-    map0_ = service0_->connected_devices_.get();
-
-    service1_ = subframe->CreateWebBluetoothServiceForTesting();
-    map1_ = service1_->connected_devices_.get();
+    service_ptr0_ =
+        contents()->GetPrimaryMainFrame()->CreateWebBluetoothServiceForTesting(
+            service0_.BindNewPipeAndPassReceiver());
+    map_ptr0_ = service_ptr0_->connected_devices_.get();
+
+    service_ptr1_ = subframe->CreateWebBluetoothServiceForTesting(
+        service1_.BindNewPipeAndPassReceiver());
+    map_ptr1_ = service_ptr1_->connected_devices_.get();
   }
 
   void TearDown() override {
-    map1_ = nullptr;
-    service1_ = nullptr;
-    map0_ = nullptr;
-    service0_ = nullptr;
+    service_ptr0_ = nullptr;
+    map_ptr0_ = nullptr;
+    service_ptr1_ = nullptr;
+    map_ptr1_ = nullptr;
+
     RenderViewHostImplTestHarness::TearDown();
   }
 
@@ -111,291 +112,302 @@ class FrameConnectedBluetoothDevicesTest
   }
 
   void ResetService0() {
-    std::exchange(service0_, nullptr)->ResetAndDeleteThis();
-    map0_ = nullptr;
+    std::exchange(service_ptr0_, nullptr)->ResetAndDeleteThis();
+    map_ptr0_ = nullptr;
   }
 
   void ResetService1() {
-    std::exchange(service1_, nullptr)->ResetAndDeleteThis();
-    map1_ = nullptr;
+    std::exchange(service_ptr1_, nullptr)->ResetAndDeleteThis();
+    map_ptr1_ = nullptr;
   }
 
  protected:
-  raw_ptr<FrameConnectedBluetoothDevices> map0_;
-  raw_ptr<WebBluetoothServiceImpl> service0_;
-
-  raw_ptr<FrameConnectedBluetoothDevices> map1_;
-  raw_ptr<WebBluetoothServiceImpl> service1_;
+  raw_ptr<FrameConnectedBluetoothDevices> map_ptr0_;
+  raw_ptr<FrameConnectedBluetoothDevices> map_ptr1_;
 
  private:
+  mojo::Remote<blink::mojom::WebBluetoothService> service0_;
+  raw_ptr<WebBluetoothServiceImpl> service_ptr0_;
+
+  mojo::Remote<blink::mojom::WebBluetoothService> service1_;
+  raw_ptr<WebBluetoothServiceImpl> service_ptr1_;
+
   scoped_refptr<NiceMockBluetoothAdapter> adapter_;
   NiceMockBluetoothDevice device0_;
   NiceMockBluetoothDevice device1_;
 };
 
 TEST_F(FrameConnectedBluetoothDevicesTest, Insert_Once) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest, Insert_Twice) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest, Insert_TwoDevices) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map0_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr0_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId1));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId1));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest, Insert_TwoMaps) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map1_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr1_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
-  EXPECT_TRUE(map1_->IsConnectedToDeviceWithId(kDeviceId1));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr1_->IsConnectedToDeviceWithId(kDeviceId1));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest,
        CloseConnectionId_OneDevice_AddOnce_RemoveOnce) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 
-  map0_->CloseConnectionToDeviceWithId(kDeviceId0);
+  map_ptr0_->CloseConnectionToDeviceWithId(kDeviceId0);
 
   EXPECT_FALSE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest,
        CloseConnectionId_OneDevice_AddOnce_RemoveTwice) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 
-  map0_->CloseConnectionToDeviceWithId(kDeviceId0);
-  map0_->CloseConnectionToDeviceWithId(kDeviceId0);
+  map_ptr0_->CloseConnectionToDeviceWithId(kDeviceId0);
+  map_ptr0_->CloseConnectionToDeviceWithId(kDeviceId0);
 
   EXPECT_FALSE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest,
        CloseConnectionId_OneDevice_AddTwice_RemoveOnce) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 
-  map0_->CloseConnectionToDeviceWithId(kDeviceId0);
+  map_ptr0_->CloseConnectionToDeviceWithId(kDeviceId0);
 
   EXPECT_FALSE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest,
        CloseConnectionId_OneDevice_AddTwice_RemoveTwice) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 
-  map0_->CloseConnectionToDeviceWithId(kDeviceId0);
-  map0_->CloseConnectionToDeviceWithId(kDeviceId0);
+  map_ptr0_->CloseConnectionToDeviceWithId(kDeviceId0);
+  map_ptr0_->CloseConnectionToDeviceWithId(kDeviceId0);
 
   EXPECT_FALSE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest, CloseConnectionId_TwoDevices) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map0_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr0_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId1));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId1));
 
-  map0_->CloseConnectionToDeviceWithId(kDeviceId0);
+  map_ptr0_->CloseConnectionToDeviceWithId(kDeviceId0);
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 
-  map0_->CloseConnectionToDeviceWithId(kDeviceId1);
+  map_ptr0_->CloseConnectionToDeviceWithId(kDeviceId1);
 
   EXPECT_FALSE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId1));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId1));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest, CloseConnectionId_TwoMaps) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map1_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr1_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
-  EXPECT_TRUE(map1_->IsConnectedToDeviceWithId(kDeviceId1));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr1_->IsConnectedToDeviceWithId(kDeviceId1));
 
-  map0_->CloseConnectionToDeviceWithId(kDeviceId0);
+  map_ptr0_->CloseConnectionToDeviceWithId(kDeviceId0);
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 
-  map1_->CloseConnectionToDeviceWithId(kDeviceId1);
+  map_ptr1_->CloseConnectionToDeviceWithId(kDeviceId1);
 
   EXPECT_FALSE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map1_->IsConnectedToDeviceWithId(kDeviceId1));
+  EXPECT_FALSE(map_ptr1_->IsConnectedToDeviceWithId(kDeviceId1));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest,
        CloseConnectionAddress_OneDevice_AddOnce_RemoveOnce) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 
-  EXPECT_EQ(map0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0).value(),
-            kDeviceId0);
+  EXPECT_EQ(
+      map_ptr0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0).value(),
+      kDeviceId0);
 
   EXPECT_FALSE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest,
        CloseConnectionAddress_OneDevice_AddOnce_RemoveTwice) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 
-  EXPECT_EQ(map0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0).value(),
-            kDeviceId0);
-  EXPECT_FALSE(map0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0));
+  EXPECT_EQ(
+      map_ptr0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0).value(),
+      kDeviceId0);
+  EXPECT_FALSE(map_ptr0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0));
 
   EXPECT_FALSE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest,
        CloseConnectionAddress_OneDevice_AddTwice_RemoveOnce) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 
-  EXPECT_EQ(map0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0).value(),
-            kDeviceId0);
+  EXPECT_EQ(
+      map_ptr0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0).value(),
+      kDeviceId0);
 
   EXPECT_FALSE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest,
        CloseConnectionAddress_OneDevice_AddTwice_RemoveTwice) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 
-  EXPECT_EQ(map0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0).value(),
-            kDeviceId0);
-  EXPECT_FALSE(map0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0));
+  EXPECT_EQ(
+      map_ptr0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0).value(),
+      kDeviceId0);
+  EXPECT_FALSE(map_ptr0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0));
 
   EXPECT_FALSE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest, CloseConnectionAddress_TwoDevices) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map0_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr0_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId1));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId1));
 
-  EXPECT_EQ(map0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0).value(),
-            kDeviceId0);
+  EXPECT_EQ(
+      map_ptr0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0).value(),
+      kDeviceId0);
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId1));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId1));
 
-  EXPECT_EQ(map0_->CloseConnectionToDeviceWithAddress(kDeviceAddress1).value(),
-            kDeviceId1);
+  EXPECT_EQ(
+      map_ptr0_->CloseConnectionToDeviceWithAddress(kDeviceAddress1).value(),
+      kDeviceId1);
 
   EXPECT_FALSE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId1));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId1));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest, CloseConnectionAddress_TwoMaps) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map1_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr1_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_TRUE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
-  EXPECT_TRUE(map1_->IsConnectedToDeviceWithId(kDeviceId1));
+  EXPECT_TRUE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr1_->IsConnectedToDeviceWithId(kDeviceId1));
 
-  EXPECT_EQ(map0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0).value(),
-            kDeviceId0);
+  EXPECT_EQ(
+      map_ptr0_->CloseConnectionToDeviceWithAddress(kDeviceAddress0).value(),
+      kDeviceId0);
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map0_->IsConnectedToDeviceWithId(kDeviceId0));
-  EXPECT_TRUE(map1_->IsConnectedToDeviceWithId(kDeviceId1));
+  EXPECT_FALSE(map_ptr0_->IsConnectedToDeviceWithId(kDeviceId0));
+  EXPECT_TRUE(map_ptr1_->IsConnectedToDeviceWithId(kDeviceId1));
 
-  EXPECT_EQ(map1_->CloseConnectionToDeviceWithAddress(kDeviceAddress1).value(),
-            kDeviceId1);
+  EXPECT_EQ(
+      map_ptr1_->CloseConnectionToDeviceWithAddress(kDeviceAddress1).value(),
+      kDeviceId1);
 
   EXPECT_FALSE(contents()->IsConnectedToBluetoothDevice());
-  EXPECT_FALSE(map1_->IsConnectedToDeviceWithId(kDeviceId1));
+  EXPECT_FALSE(map_ptr1_->IsConnectedToDeviceWithId(kDeviceId1));
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest, Destruction_MultipleDevices) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map0_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr0_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
 
@@ -405,21 +417,21 @@ TEST_F(FrameConnectedBluetoothDevicesTest, Destruction_MultipleDevices) {
 }
 
 TEST_F(FrameConnectedBluetoothDevicesTest, Destruction_MultipleMaps) {
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map0_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr0_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
+                    CreateServerClient());
 
-  map1_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
-  map1_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
-                CreateServerClient());
+  map_ptr1_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
+  map_ptr1_->Insert(kDeviceId1, GetConnection(kDeviceAddress1),
+                    CreateServerClient());
 
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
 
   ResetService0();
 
-  // WebContents should still be connected because of map1_.
+  // WebContents should still be connected because of map_ptr1_.
   EXPECT_TRUE(contents()->IsConnectedToBluetoothDevice());
 
   ResetService1();
@@ -432,8 +444,8 @@ TEST_F(FrameConnectedBluetoothDevicesTest,
   // Tests that we don't crash when FrameConnectedBluetoothDevices contains
   // at least one device, and it is destroyed while WebContentsImpl is being
   // destroyed.
-  map0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
-                CreateServerClient());
+  map_ptr0_->Insert(kDeviceId0, GetConnection(kDeviceAddress0),
+                    CreateServerClient());
   DeleteContents();
 }
 
diff --git a/content/browser/bluetooth/web_bluetooth_service_impl_unittest.cc b/content/browser/bluetooth/web_bluetooth_service_impl_unittest.cc
index e47d2a3a27d1c..95964d8d419dd 100644
--- a/content/browser/bluetooth/web_bluetooth_service_impl_unittest.cc
+++ b/content/browser/bluetooth/web_bluetooth_service_impl_unittest.cc
@@ -506,17 +506,19 @@ class WebBluetoothServiceImplTest : public RenderViewHostImplTestHarness,
                                                       GURL(kTestURL));
 
     // Simulate a frame connected to a bluetooth service.
-    service_ = contents()
-                   ->GetPrimaryMainFrame()
-                   ->CreateWebBluetoothServiceForTesting();
+    mojo::PendingReceiver<blink::mojom::WebBluetoothService> receiver =
+        service_.BindNewPipeAndPassReceiver();
+    service_ptr_ =
+        contents()->GetPrimaryMainFrame()->CreateWebBluetoothServiceForTesting(
+            std::move(receiver));
 
     // GetAvailability connects the Web Bluetooth service to the adapter. Call
     // it twice in parallel to exercise what happens when multiple requests to
     // acquire the BluetoothAdapter are in flight.
     TestFuture<bool> future_1;
     TestFuture<bool> future_2;
-    service_->GetAvailability(future_1.GetCallback());
-    service_->GetAvailability(future_2.GetCallback());
+    service_ptr_->GetAvailability(future_1.GetCallback());
+    service_ptr_->GetAvailability(future_2.GetCallback());
     // Use Wait() instead of Get() because we don't care about the result.
     EXPECT_TRUE(future_1.Wait());
     EXPECT_TRUE(future_2.Wait());
@@ -525,7 +527,7 @@ class WebBluetoothServiceImplTest : public RenderViewHostImplTestHarness,
   void TearDown() override {
     adapter_.reset();
     battery_object_bundle_.reset();
-    service_ = nullptr;
+    service_ptr_ = nullptr;
     SetBrowserClientForTesting(old_browser_client_);
     RenderViewHostImplTestHarness::TearDown();
   }
@@ -567,7 +569,7 @@ class WebBluetoothServiceImplTest : public RenderViewHostImplTestHarness,
     // returns.
     base::RunLoop callback_loop, request_loop;
     blink::mojom::WebBluetoothResult result;
-    service_->RequestScanningStart(
+    service_ptr_->RequestScanningStart(
         std::move(client), std::move(options),
         base::BindLambdaForTesting(
             [&callback_loop, &result](blink::mojom::WebBluetoothResult r) {
@@ -595,7 +597,7 @@ class WebBluetoothServiceImplTest : public RenderViewHostImplTestHarness,
     device_options->optional_services.push_back(
         test_bundle().service().GetUUID());
     const blink::WebBluetoothDeviceId& test_device_id =
-        service_->allowed_devices().AddDevice(
+        service_ptr_->allowed_devices().AddDevice(
             test_bundle().device().GetAddress(), device_options);
 
     auto& device = battery_object_bundle_->device();
@@ -606,7 +608,7 @@ class WebBluetoothServiceImplTest : public RenderViewHostImplTestHarness,
 
     {
       base::RunLoop run_loop;
-      service_->RemoteServerGetPrimaryServices(
+      service_ptr_->RemoteServerGetPrimaryServices(
           test_device_id, WebBluetoothGATTQueryQuantity::SINGLE,
           test_bundle().service().GetUUID(),
           base::BindLambdaForTesting(
@@ -622,7 +624,7 @@ class WebBluetoothServiceImplTest : public RenderViewHostImplTestHarness,
 
     {
       base::RunLoop run_loop;
-      service_->RemoteServiceGetCharacteristics(
+      service_ptr_->RemoteServiceGetCharacteristics(
           test_bundle().service().GetIdentifier(),
           WebBluetoothGATTQueryQuantity::SINGLE, test_characteristic.GetUUID(),
           base::BindLambdaForTesting(
@@ -643,7 +645,8 @@ class WebBluetoothServiceImplTest : public RenderViewHostImplTestHarness,
   }
 
   scoped_refptr<FakeBluetoothAdapter> adapter_;
-  raw_ptr<WebBluetoothServiceImpl> service_;
+  raw_ptr<WebBluetoothServiceImpl> service_ptr_;
+  mojo::Remote<blink::mojom::WebBluetoothService> service_;
   TestContentBrowserClient browser_client_;
   raw_ptr<ContentBrowserClient> old_browser_client_ = nullptr;
   std::unique_ptr<FakeBatteryObjectBundle> battery_object_bundle_;
@@ -656,10 +659,10 @@ TEST_F(WebBluetoothServiceImplTest, DestroyedDuringRequestDevice) {
 
   base::MockCallback<WebBluetoothServiceImpl::RequestDeviceCallback> callback;
   EXPECT_CALL(callback, Run).Times(0);
-  service_->RequestDevice(std::move(options), callback.Get());
+  service_ptr_->RequestDevice(std::move(options), callback.Get());
 
   base::RunLoop loop;
-  std::exchange(service_, nullptr)->ResetAndDeleteThis();
+  std::exchange(service_ptr_, nullptr)->ResetAndDeleteThis();
   loop.RunUntilIdle();
 }
 
@@ -668,7 +671,7 @@ TEST_F(WebBluetoothServiceImplTest, PermissionAllowed) {
   absl::optional<WebBluetoothServiceImpl::ScanFilters> filters;
   filters.emplace();
   filters->push_back(filter.Clone());
-  EXPECT_FALSE(service_->AreScanFiltersAllowed(filters));
+  EXPECT_FALSE(service_ptr_->AreScanFiltersAllowed(filters));
 
   FakeWebBluetoothAdvertisementClientImpl client_impl;
   blink::mojom::WebBluetoothResult result =
@@ -676,7 +679,7 @@ TEST_F(WebBluetoothServiceImplTest, PermissionAllowed) {
           *filter, &client_impl, BluetoothScanningPrompt::Event::kAllow);
   EXPECT_EQ(result, blink::mojom::WebBluetoothResult::SUCCESS);
   // |filters| should be allowed.
-  EXPECT_TRUE(service_->AreScanFiltersAllowed(filters));
+  EXPECT_TRUE(service_ptr_->AreScanFiltersAllowed(filters));
 }
 
 TEST_F(WebBluetoothServiceImplTest, DestroyedDuringRequestScanningStart) {
@@ -699,14 +702,14 @@ TEST_F(WebBluetoothServiceImplTest, DestroyedDuringRequestScanningStart) {
   base::MockCallback<WebBluetoothServiceImpl::RequestScanningStartCallback>
       callback;
   EXPECT_CALL(callback, Run).Times(1);
-  service_->RequestScanningStart(std::move(client), std::move(options),
-                                 callback.Get());
+  service_ptr_->RequestScanningStart(std::move(client), std::move(options),
+                                     callback.Get());
 
   // Post a task to delete the WebBluetoothService state during a call to
   // RequestScanningStart().
   base::SingleThreadTaskRunner::GetCurrentDefault()->PostTask(
       FROM_HERE, base::BindLambdaForTesting([this]() {
-        std::exchange(service_, nullptr)->ResetAndDeleteThis();
+        std::exchange(service_ptr_, nullptr)->ResetAndDeleteThis();
       }));
 
   loop.RunUntilIdle();
@@ -717,7 +720,7 @@ TEST_F(WebBluetoothServiceImplTest, PermissionPromptCanceled) {
   absl::optional<WebBluetoothServiceImpl::ScanFilters> filters;
   filters.emplace();
   filters->push_back(filter.Clone());
-  EXPECT_FALSE(service_->AreScanFiltersAllowed(filters));
+  EXPECT_FALSE(service_ptr_->AreScanFiltersAllowed(filters));
 
   FakeWebBluetoothAdvertisementClientImpl client_impl;
   blink::mojom::WebBluetoothResult result =
@@ -726,7 +729,7 @@ TEST_F(WebBluetoothServiceImplTest, PermissionPromptCanceled) {
 
   EXPECT_EQ(blink::mojom::WebBluetoothResult::PROMPT_CANCELED, result);
   // |filters| should still not be allowed.
-  EXPECT_FALSE(service_->AreScanFiltersAllowed(filters));
+  EXPECT_FALSE(service_ptr_->AreScanFiltersAllowed(filters));
 }
 
 TEST_F(WebBluetoothServiceImplTest,
@@ -740,12 +743,12 @@ TEST_F(WebBluetoothServiceImplTest,
       RequestScanningStartAndSimulatePromptEvent(
           *filter, &client_impl, BluetoothScanningPrompt::Event::kAllow);
   EXPECT_EQ(result, blink::mojom::WebBluetoothResult::SUCCESS);
-  EXPECT_TRUE(service_->AreScanFiltersAllowed(filters));
+  EXPECT_TRUE(service_ptr_->AreScanFiltersAllowed(filters));
 
   contents()->SetVisibilityAndNotifyObservers(Visibility::HIDDEN);
 
   // The previously granted Bluetooth scanning permission should be revoked.
-  EXPECT_FALSE(service_->AreScanFiltersAllowed(filters));
+  EXPECT_FALSE(service_ptr_->AreScanFiltersAllowed(filters));
 }
 
 TEST_F(WebBluetoothServiceImplTest,
@@ -757,12 +760,12 @@ TEST_F(WebBluetoothServiceImplTest,
   FakeWebBluetoothAdvertisementClientImpl client_impl;
   RequestScanningStartAndSimulatePromptEvent(
       *filter, &client_impl, BluetoothScanningPrompt::Event::kAllow);
-  EXPECT_TRUE(service_->AreScanFiltersAllowed(filters));
+  EXPECT_TRUE(service_ptr_->AreScanFiltersAllowed(filters));
 
   contents()->SetVisibilityAndNotifyObservers(Visibility::OCCLUDED);
 
   // The previously granted Bluetooth scanning permission should be revoked.
-  EXPECT_FALSE(service_->AreScanFiltersAllowed(filters));
+  EXPECT_FALSE(service_ptr_->AreScanFiltersAllowed(filters));
 }
 
 // TODO(https://crbug.com/1420032): Failing on iOS.
@@ -782,12 +785,12 @@ TEST_F(WebBluetoothServiceImplTest,
   FakeWebBluetoothAdvertisementClientImpl client_impl;
   RequestScanningStartAndSimulatePromptEvent(
       *filter, &client_impl, BluetoothScanningPrompt::Event::kAllow);
-  EXPECT_TRUE(service_->AreScanFiltersAllowed(filters));
+  EXPECT_TRUE(service_ptr_->AreScanFiltersAllowed(filters));
 
   main_test_rfh()->GetRenderWidgetHost()->LostFocus();
 
   // The previously granted Bluetooth scanning permission should be revoked.
-  EXPECT_FALSE(service_->AreScanFiltersAllowed(filters));
+  EXPECT_FALSE(service_ptr_->AreScanFiltersAllowed(filters));
 }
 
 TEST_F(WebBluetoothServiceImplTest,
@@ -802,7 +805,7 @@ TEST_F(WebBluetoothServiceImplTest,
       RequestScanningStartAndSimulatePromptEvent(
           *filter_1, &client_impl_1, BluetoothScanningPrompt::Event::kAllow);
   EXPECT_EQ(result_1, blink::mojom::WebBluetoothResult::SUCCESS);
-  EXPECT_TRUE(service_->AreScanFiltersAllowed(filters_1));
+  EXPECT_TRUE(service_ptr_->AreScanFiltersAllowed(filters_1));
   EXPECT_FALSE(client_impl_1.on_connection_error_called());
 
   blink::mojom::WebBluetoothLeScanFilterPtr filter_2 =
@@ -815,7 +818,7 @@ TEST_F(WebBluetoothServiceImplTest,
       RequestScanningStartAndSimulatePromptEvent(
           *filter_2, &client_impl_2, BluetoothScanningPrompt::Event::kAllow);
   EXPECT_EQ(result_2, blink::mojom::WebBluetoothResult::SUCCESS);
-  EXPECT_TRUE(service_->AreScanFiltersAllowed(filters_2));
+  EXPECT_TRUE(service_ptr_->AreScanFiltersAllowed(filters_2));
   EXPECT_FALSE(client_impl_2.on_connection_error_called());
 
   blink::mojom::WebBluetoothLeScanFilterPtr filter_3 =
@@ -828,11 +831,11 @@ TEST_F(WebBluetoothServiceImplTest,
       RequestScanningStartAndSimulatePromptEvent(
           *filter_3, &client_impl_3, BluetoothScanningPrompt::Event::kBlock);
   EXPECT_EQ(blink::mojom::WebBluetoothResult::SCANNING_BLOCKED, result_3);
-  EXPECT_FALSE(service_->AreScanFiltersAllowed(filters_3));
+  EXPECT_FALSE(service_ptr_->AreScanFiltersAllowed(filters_3));
 
   // The previously granted Bluetooth scanning permission should be revoked.
-  EXPECT_FALSE(service_->AreScanFiltersAllowed(filters_1));
-  EXPECT_FALSE(service_->AreScanFiltersAllowed(filters_2));
+  EXPECT_FALSE(service_ptr_->AreScanFiltersAllowed(filters_1));
+  EXPECT_FALSE(service_ptr_->AreScanFiltersAllowed(filters_2));
 
   base::RunLoop().RunUntilIdle();
 
@@ -854,7 +857,7 @@ TEST_F(WebBluetoothServiceImplTest,
   const std::vector<uint8_t> read_error_value = {1, 2, 3};
   bool callback_called = false;
   const std::string characteristic_instance_id = "fake-id";
-  service_->OnCharacteristicReadValue(
+  service_ptr_->OnCharacteristicReadValue(
       characteristic_instance_id,
       base::BindLambdaForTesting(
           [&callback_called](
@@ -886,12 +889,12 @@ TEST_F(WebBluetoothServiceImplTest, ReadCharacteristicValueNotAuthorized) {
 
   MockWebBluetoothPairingManager* pairing_manager =
       new MockWebBluetoothPairingManager();
-  service_->SetPairingManagerForTesting(
+  service_ptr_->SetPairingManagerForTesting(
       std::unique_ptr<WebBluetoothPairingManager>(pairing_manager));
 
   EXPECT_CALL(*pairing_manager, PairForCharacteristicReadValue(_, _)).Times(1);
 
-  service_->OnCharacteristicReadValue(
+  service_ptr_->OnCharacteristicReadValue(
       test_characteristic.GetIdentifier(),
       base::BindLambdaForTesting(
           [&read_value_callback_called](
@@ -923,12 +926,12 @@ TEST_F(WebBluetoothServiceImplTest, IncompletePairingOnShutdown) {
   // test ends.
   EXPECT_CALL(callback, Run(_, _)).Times(0);
 
-  service_->RemoteCharacteristicReadValue(
+  service_ptr_->RemoteCharacteristicReadValue(
       test_bundle().characteristic().GetIdentifier(), callback.Get());
 
   // Simulate the WebBluetoothServiceImpl being destroyed due to a navigation or
   // tab closure while the pairing request is in progress.
-  std::exchange(service_, nullptr)->ResetAndDeleteThis();
+  std::exchange(service_ptr_, nullptr)->ResetAndDeleteThis();
 }
 #endif  // PAIR_BLUETOOTH_ON_DEMAND()
 
@@ -951,11 +954,11 @@ TEST_F(WebBluetoothServiceImplTest, DeferredStartNotifySession) {
           if (--outstanding_callbacks == 0)
             run_loop.Quit();
         });
-    service_->RemoteCharacteristicStartNotifications(
+    service_ptr_->RemoteCharacteristicStartNotifications(
         test_characteristic.GetIdentifier(),
         BindCharacteristicClientAndPassRemote(), callback);
 
-    service_->RemoteCharacteristicStartNotifications(
+    service_ptr_->RemoteCharacteristicStartNotifications(
         test_characteristic.GetIdentifier(),
         BindCharacteristicClientAndPassRemote(), callback);
 
@@ -978,11 +981,11 @@ TEST_F(WebBluetoothServiceImplTest, DeferredStartNotifySession) {
           if (--outstanding_callbacks == 0)
             run_loop.Quit();
         });
-    service_->RemoteCharacteristicStartNotifications(
+    service_ptr_->RemoteCharacteristicStartNotifications(
         test_characteristic.GetIdentifier(),
         BindCharacteristicClientAndPassRemote(), callback);
 
-    service_->RemoteCharacteristicStartNotifications(
+    service_ptr_->RemoteCharacteristicStartNotifications(
         test_characteristic.GetIdentifier(),
         BindCharacteristicClientAndPassRemote(), callback);
 
@@ -998,8 +1001,8 @@ TEST_F(WebBluetoothServiceImplTest, DeviceGattServicesDiscoveryTimeout) {
   device_options->optional_services.push_back(
       test_bundle().service().GetUUID());
   const blink::WebBluetoothDeviceId& test_device_id =
-      service_->allowed_devices().AddDevice(test_bundle().device().GetAddress(),
-                                            device_options);
+      service_ptr_->allowed_devices().AddDevice(
+          test_bundle().device().GetAddress(), device_options);
 
   auto& device = battery_object_bundle_->device();
   device.SetGattServicesDiscoveryComplete(false);
@@ -1007,12 +1010,12 @@ TEST_F(WebBluetoothServiceImplTest, DeviceGattServicesDiscoveryTimeout) {
   TestFuture<WebBluetoothResult,
              absl::optional<std::vector<WebBluetoothRemoteGATTServicePtr>>>
       get_primary_services_future;
-  service_->RemoteServerGetPrimaryServices(
+  service_ptr_->RemoteServerGetPrimaryServices(
       test_device_id, WebBluetoothGATTQueryQuantity::SINGLE,
       test_bundle().service().GetUUID(),
       get_primary_services_future.GetCallback());
   device.SetConnected(false);
-  service_->DeviceChanged(device.GetAdapter(), &device);
+  service_ptr_->DeviceChanged(device.GetAdapter(), &device);
   EXPECT_EQ(get_primary_services_future.Get<0>(),
             blink::mojom::WebBluetoothResult::NO_SERVICES_FOUND);
 }
@@ -1023,8 +1026,8 @@ TEST_F(WebBluetoothServiceImplTest, DeviceDisconnected) {
   device_options->optional_services.push_back(
       test_bundle().service().GetUUID());
   const blink::WebBluetoothDeviceId& test_device_id =
-      service_->allowed_devices().AddDevice(test_bundle().device().GetAddress(),
-                                            device_options);
+      service_ptr_->allowed_devices().AddDevice(
+          test_bundle().device().GetAddress(), device_options);
 
   auto& device = battery_object_bundle_->device();
   device.SetConnected(false);
@@ -1032,7 +1035,7 @@ TEST_F(WebBluetoothServiceImplTest, DeviceDisconnected) {
   TestFuture<WebBluetoothResult,
              absl::optional<std::vector<WebBluetoothRemoteGATTServicePtr>>>
       get_primary_services_future;
-  service_->RemoteServerGetPrimaryServices(
+  service_ptr_->RemoteServerGetPrimaryServices(
       test_device_id, WebBluetoothGATTQueryQuantity::SINGLE,
       test_bundle().service().GetUUID(),
       get_primary_services_future.GetCallback());
diff --git a/content/test/test_render_frame_host.cc b/content/test/test_render_frame_host.cc
index 3cdfea02faeae..c02787b900253 100644
--- a/content/test/test_render_frame_host.cc
+++ b/content/test/test_render_frame_host.cc
@@ -577,9 +577,9 @@ void TestRenderFrameHost::SimulateCommitProcessed(
 }
 
 WebBluetoothServiceImpl*
-TestRenderFrameHost::CreateWebBluetoothServiceForTesting() {
-  RenderFrameHostImpl::CreateWebBluetoothService(
-      dummy_web_bluetooth_service_remote_.InitWithNewPipeAndPassReceiver());
+TestRenderFrameHost::CreateWebBluetoothServiceForTesting(
+    mojo::PendingReceiver<blink::mojom::WebBluetoothService> receiver) {
+  RenderFrameHostImpl::CreateWebBluetoothService(std::move(receiver));
   return RenderFrameHostImpl::GetWebBluetoothServiceForTesting();
 }
 
diff --git a/content/test/test_render_frame_host.h b/content/test/test_render_frame_host.h
index 92b2d3d1d28ef..7441545f6ec69 100644
--- a/content/test/test_render_frame_host.h
+++ b/content/test/test_render_frame_host.h
@@ -204,7 +204,8 @@ class TestRenderFrameHost : public RenderFrameHostImpl,
       bool same_document);
 
   // Creates a WebBluetooth Service with a dummy InterfaceRequest.
-  WebBluetoothServiceImpl* CreateWebBluetoothServiceForTesting();
+  WebBluetoothServiceImpl* CreateWebBluetoothServiceForTesting(
+      mojo::PendingReceiver<blink::mojom::WebBluetoothService> receiver);
 
   // Returns a pending Frame remote that represents a connection to a non-
   // existent renderer, where all messages will go into the void.
@@ -350,9 +351,6 @@ class TestRenderFrameHost : public RenderFrameHostImpl,
   std::map<NavigationRequest*,
            mojom::NavigationClient::CommitFailedNavigationCallback>
       commit_failed_callback_;
-
-  mojo::PendingRemote<blink::mojom::WebBluetoothService>
-      dummy_web_bluetooth_service_remote_;
 };
 
 }  // namespace content
