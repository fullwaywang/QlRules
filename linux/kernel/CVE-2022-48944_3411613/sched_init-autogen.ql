/**
 * @name linux-3411613611a5cddf7e80908010dc87cb527dd13b-sched_init
 * @id cpp/linux/3411613611a5cddf7e80908010dc87cb527dd13b/sched-init
 * @description linux-3411613611a5cddf7e80908010dc87cb527dd13b-kernel/sched/core.c-sched_init CVE-2022-48944
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
	target_0.getValue()="1836"
	and not target_0.getValue()="1835"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, Literal target_1) {
	target_1.getValue()="1837"
	and not target_1.getValue()="1836"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(FunctionCall target_5, Function func) {
exists(DoStmt target_2 |
	exists(BlockStmt obj_0 | obj_0=target_2.getStmt() |
		exists(DoStmt obj_1 | obj_1=obj_0.getStmt(1) |
			exists(BlockStmt obj_2 | obj_2=obj_1.getStmt() |
				exists(AsmStmt obj_3 | obj_3=obj_2.getStmt(0) |
					exists(SizeofTypeOperator obj_4 | obj_4=obj_3.getChild(3) |
						obj_4.getType() instanceof LongType
						and obj_4.getValue()="12"
					)
					and obj_3.getChild(0) instanceof StringLiteral
					and obj_3.getChild(1) instanceof Literal
					and obj_3.getChild(2) instanceof Literal
				)
			)
			and obj_1.getCondition() instanceof Literal
		)
		and obj_0.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(AsmStmt).getChild(0).(Literal).getValue()="1835"
		and obj_0.getStmt(2) instanceof ExprStmt
	)
	and target_2.getCondition() instanceof Literal
	and target_2.getParent().(IfStmt).getCondition()=target_5
	and target_2.getEnclosingFunction() = func
)
}

predicate func_4(Function func, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("__builtin_unreachable")
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Function func, FunctionCall target_5) {
	target_5.getTarget().hasName("__builtin_expect")
	and target_5.getValue()="1"
	and target_5.getEnclosingFunction() = func
}

from Function func, Literal target_0, Literal target_1, ExprStmt target_4, FunctionCall target_5
where
func_0(func, target_0)
and func_1(func, target_1)
and not func_2(target_5, func)
and func_4(func, target_4)
and func_5(func, target_5)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
