/**
 * @name linux-87c48fa3b4630905f98268dde838ee43626a060c-inet_getid
 * @id cpp/linux/87c48fa3b4630905f98268dde838ee43626a060c/inet-getid
 * @description linux-87c48fa3b4630905f98268dde838ee43626a060c-include/net/inetpeer.h-inet_getid CVE-2011-2699
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vp_109, Parameter vmore_109, FunctionCall target_0) {
		target_0.getTarget().hasName("atomic_add_return")
		and not target_0.getTarget().hasName("atomic_cmpxchg")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vmore_109
		and target_0.getArgument(1).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="ip_id_count"
		and target_0.getArgument(1).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
		and target_0.getArgument(1).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
		and target_0.getArgument(1).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vp_109
}

predicate func_1(Parameter vmore_109, SubExpr target_5, Function func) {
	exists(DoStmt target_1 |
		target_1.getCondition().(EqualityOperation).getAnOperand().(FunctionCall).getTarget().hasName("atomic_cmpxchg")
		and target_1.getCondition().(EqualityOperation).getAnOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="ip_id_count"
		and target_1.getCondition().(EqualityOperation).getAnOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
		and target_1.getCondition().(EqualityOperation).getAnOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
		and target_1.getCondition().(EqualityOperation).getAnOperand().(FunctionCall).getArgument(1).(VariableAccess).getType().hasName("int")
		and target_1.getCondition().(EqualityOperation).getAnOperand().(FunctionCall).getArgument(2).(VariableAccess).getType().hasName("int")
		and target_1.getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getType().hasName("int")
		and target_1.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
		and target_1.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("atomic_read")
		and target_1.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="ip_id_count"
		and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
		and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(AddExpr).getAnOperand().(VariableAccess).getType().hasName("int")
		and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(AddExpr).getAnOperand().(VariableAccess).getTarget()=vmore_109
		and target_1.getStmt().(BlockStmt).getStmt(2).(IfStmt).getCondition().(NotExpr).getOperand().(VariableAccess).getType().hasName("int")
		and target_1.getStmt().(BlockStmt).getStmt(2).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
		and target_1.getStmt().(BlockStmt).getStmt(2).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="1"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
		and target_5.getRightOperand().(VariableAccess).getLocation().isBefore(target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(AddExpr).getAnOperand().(VariableAccess).getLocation()))
}

predicate func_4(Parameter vmore_109, VariableAccess target_4) {
		target_4.getTarget()=vmore_109
}

predicate func_5(Parameter vmore_109, SubExpr target_5) {
		target_5.getLeftOperand() instanceof FunctionCall
		and target_5.getRightOperand().(VariableAccess).getTarget()=vmore_109
}

from Function func, Parameter vp_109, Parameter vmore_109, FunctionCall target_0, VariableAccess target_4, SubExpr target_5
where
func_0(vp_109, vmore_109, target_0)
and not func_1(vmore_109, target_5, func)
and func_4(vmore_109, target_4)
and func_5(vmore_109, target_5)
and vp_109.getType().hasName("inet_peer *")
and vmore_109.getType().hasName("int")
and vp_109.getFunction() = func
and vmore_109.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
