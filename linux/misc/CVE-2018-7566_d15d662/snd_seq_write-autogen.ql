/**
 * @name linux-d15d662e89fc667b90cd294b0eb45694e33144da-snd_seq_write
 * @id cpp/linux/d15d662e89fc667b90cd294b0eb45694e33144da/snd-seq-write
 * @description linux-d15d662e89fc667b90cd294b0eb45694e33144da-sound/core/seq/seq_clientmgr.c-snd_seq_write CVE-2018-7566
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vclient_1004, LogicalAndExpr target_8) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="ioctl_mutex"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vclient_1004
	and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8)
}

predicate func_1(Variable verr_1006, LogicalAndExpr target_8) {
exists(ExprStmt target_1 |
	target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1006
	and target_1.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8)
}

predicate func_2(Variable vclient_1004, LogicalAndExpr target_8) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="ioctl_mutex"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vclient_1004
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_2
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8)
}

predicate func_4(Variable verr_1006, WhileStmt target_11, Function func) {
exists(ExprStmt target_4 |
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1006
	and target_4.getExpr().(AssignExpr).getRValue() instanceof UnaryMinusExpr
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
	and target_4.getLocation().isBefore(target_11.getLocation()))
}

predicate func_5(Function func, UnaryMinusExpr target_5) {
	target_5.getValue()="-22"
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable vclient_1004, ReturnStmt target_12, FunctionCall target_6) {
	target_6.getTarget().hasName("snd_seq_pool_init")
	and target_6.getArgument(0).(PointerFieldAccess).getTarget().getName()="pool"
	and target_6.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vclient_1004
	and target_6.getParent().(LTExpr).getGreaterOperand().(Literal).getValue()="0"
	and target_6.getParent().(LTExpr).getParent().(IfStmt).getThen()=target_12
}

predicate func_7(Function func, Initializer target_7) {
	target_7.getExpr() instanceof UnaryMinusExpr
	and target_7.getExpr().getEnclosingFunction() = func
}

predicate func_8(Variable vclient_1004, LogicalAndExpr target_8) {
	target_8.getLeftOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getTarget().getName()="size"
	and target_8.getLeftOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="pool"
	and target_8.getLeftOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vclient_1004
	and target_8.getLeftOperand().(RelationalOperation).getLesserOperand().(Literal).getValue()="0"
	and target_8.getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("snd_seq_write_pool_allocated")
	and target_8.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vclient_1004
}

predicate func_11(Variable verr_1006, WhileStmt target_11) {
	target_11.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget().getType().hasName("size_t")
	and target_11.getCondition().(RelationalOperation).getLesserOperand().(SizeofTypeOperator).getType() instanceof LongType
	and target_11.getCondition().(RelationalOperation).getLesserOperand().(SizeofTypeOperator).getValue()="28"
	and target_11.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_11.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(SizeofExprOperator).getValue()="28"
	and target_11.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("copy_from_user")
	and target_11.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("snd_seq_event")
	and target_11.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("const char *")
	and target_11.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("int")
	and target_11.getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1006
}

predicate func_12(Function func, ReturnStmt target_12) {
	target_12.getExpr().(UnaryMinusExpr).getValue()="-12"
	and target_12.getEnclosingFunction() = func
}

from Function func, Variable vclient_1004, Variable verr_1006, UnaryMinusExpr target_5, FunctionCall target_6, Initializer target_7, LogicalAndExpr target_8, WhileStmt target_11, ReturnStmt target_12
where
not func_0(vclient_1004, target_8)
and not func_1(verr_1006, target_8)
and not func_2(vclient_1004, target_8)
and not func_4(verr_1006, target_11, func)
and func_5(func, target_5)
and func_6(vclient_1004, target_12, target_6)
and func_7(func, target_7)
and func_8(vclient_1004, target_8)
and func_11(verr_1006, target_11)
and func_12(func, target_12)
and vclient_1004.getType().hasName("snd_seq_client *")
and verr_1006.getType().hasName("int")
and vclient_1004.(LocalVariable).getFunction() = func
and verr_1006.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
