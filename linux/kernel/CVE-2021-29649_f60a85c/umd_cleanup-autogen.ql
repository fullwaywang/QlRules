/**
 * @name linux-f60a85cad677c4f9bb4cadd764f1d106c38c7cf8-umd_cleanup
 * @id cpp/linux/f60a85cad677c4f9bb4cadd764f1d106c38c7cf8/umd-cleanup
 * @description linux-f60a85cad677c4f9bb4cadd764f1d106c38c7cf8-kernel/usermode_driver.c-umd_cleanup CVE-2021-29649
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vumd_info_139, FunctionCall target_0) {
	target_0.getTarget().hasName("fput")
	and not target_0.getTarget().hasName("umd_cleanup_helper")
	and target_0.getArgument(0).(PointerFieldAccess).getTarget().getName()="pipe_to_umh"
	and target_0.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vumd_info_139
}

predicate func_1(Variable vumd_info_139, VariableAccess target_1) {
	target_1.getTarget()=vumd_info_139
	and target_1.getParent().(PointerFieldAccess).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_2(Variable vumd_info_139, PointerFieldAccess target_5, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("fput")
	and target_2.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="pipe_from_umh"
	and target_2.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vumd_info_139
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_3(Variable vumd_info_139, PointerFieldAccess target_5, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("put_pid")
	and target_3.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="tgid"
	and target_3.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vumd_info_139
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_4(Variable vumd_info_139, PointerFieldAccess target_5, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="tgid"
	and target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vumd_info_139
	and target_4.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_5(Function func, PointerFieldAccess target_5) {
	target_5.getTarget().getName()="retval"
	and target_5.getQualifier().(VariableAccess).getTarget().getType().hasName("subprocess_info *")
	and target_5.getEnclosingFunction() = func
}

from Function func, Variable vumd_info_139, FunctionCall target_0, VariableAccess target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, PointerFieldAccess target_5
where
func_0(vumd_info_139, target_0)
and func_1(vumd_info_139, target_1)
and func_2(vumd_info_139, target_5, target_2)
and func_3(vumd_info_139, target_5, target_3)
and func_4(vumd_info_139, target_5, target_4)
and func_5(func, target_5)
and vumd_info_139.getType().hasName("umd_info *")
and vumd_info_139.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
