/**
 * @name linux-a3c54931199565930d6d84f4c3456f6440aefd41-audit_filter_syscall
 * @id cpp/linux/a3c54931199565930d6d84f4c3456f6440aefd41/audit-filter-syscall
 * @description linux-a3c54931199565930d6d84f4c3456f6440aefd41-kernel/auditsc.c-audit_filter_syscall CVE-2014-3917
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable ve_740, Parameter vctx_737, BlockStmt target_6, AddressOfExpr target_7) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("audit_in_mask")
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="rule"
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_740
	and target_0.getArgument(1).(PointerFieldAccess).getTarget().getName()="major"
	and target_0.getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_737
	and target_0.getParent().(LogicalAndExpr).getLeftOperand() instanceof EqualityOperation
	and target_0.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getTarget().hasName("audit_filter_rules")
	and target_0.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("task_struct *")
	and target_0.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="rule"
	and target_0.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_740
	and target_0.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vctx_737
	and target_0.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(3).(Literal).getValue()="0"
	and target_0.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(4).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("audit_state")
	and target_0.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_6
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_7.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vctx_737, PointerFieldAccess target_1) {
	target_1.getTarget().getName()="major"
	and target_1.getQualifier().(VariableAccess).getTarget()=vctx_737
}

predicate func_2(Variable ve_740, PointerFieldAccess target_2) {
	target_2.getTarget().getName()="rule"
	and target_2.getQualifier().(VariableAccess).getTarget()=ve_740
}

predicate func_3(NotExpr target_9, Function func, DeclStmt target_3) {
	target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
	and target_3.getEnclosingFunction() = func
}

predicate func_4(NotExpr target_9, Function func, DeclStmt target_4) {
	target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable ve_740, Variable vword_748, Variable vbit_749, Parameter vctx_737, BlockStmt target_6, EqualityOperation target_5) {
	target_5.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(ArrayExpr).getArrayBase().(ValueFieldAccess).getTarget().getName()="mask"
	and target_5.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(ArrayExpr).getArrayBase().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="rule"
	and target_5.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(ArrayExpr).getArrayBase().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_740
	and target_5.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vword_748
	and target_5.getLeftOperand().(BitwiseAndExpr).getRightOperand().(VariableAccess).getTarget()=vbit_749
	and target_5.getRightOperand().(VariableAccess).getTarget()=vbit_749
	and target_5.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getTarget().hasName("audit_filter_rules")
	and target_5.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("task_struct *")
	and target_5.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="rule"
	and target_5.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_740
	and target_5.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vctx_737
	and target_5.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(3).(Literal).getValue()="0"
	and target_5.getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(4).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("audit_state")
	and target_5.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_6
}

predicate func_6(Parameter vctx_737, BlockStmt target_6) {
	target_6.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
	and target_6.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="current_state"
	and target_6.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_737
	and target_6.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("audit_state")
	and target_6.getStmt(2).(ReturnStmt).getExpr().(VariableAccess).getTarget().getType().hasName("audit_state")
}

predicate func_7(Variable ve_740, AddressOfExpr target_7) {
	target_7.getOperand().(PointerFieldAccess).getTarget().getName()="rule"
	and target_7.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_740
}

predicate func_9(Function func, NotExpr target_9) {
	target_9.getOperand().(FunctionCall).getTarget().hasName("list_empty")
	and target_9.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("list_head *")
	and target_9.getEnclosingFunction() = func
}

from Function func, Variable ve_740, Variable vword_748, Variable vbit_749, Parameter vctx_737, PointerFieldAccess target_1, PointerFieldAccess target_2, DeclStmt target_3, DeclStmt target_4, EqualityOperation target_5, BlockStmt target_6, AddressOfExpr target_7, NotExpr target_9
where
not func_0(ve_740, vctx_737, target_6, target_7)
and func_1(vctx_737, target_1)
and func_2(ve_740, target_2)
and func_3(target_9, func, target_3)
and func_4(target_9, func, target_4)
and func_5(ve_740, vword_748, vbit_749, vctx_737, target_6, target_5)
and func_6(vctx_737, target_6)
and func_7(ve_740, target_7)
and func_9(func, target_9)
and ve_740.getType().hasName("audit_entry *")
and vword_748.getType().hasName("int")
and vbit_749.getType().hasName("int")
and vctx_737.getType().hasName("audit_context *")
and ve_740.(LocalVariable).getFunction() = func
and vword_748.(LocalVariable).getFunction() = func
and vbit_749.(LocalVariable).getFunction() = func
and vctx_737.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
