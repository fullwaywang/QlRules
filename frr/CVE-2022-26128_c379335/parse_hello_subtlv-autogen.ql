/**
 * @name frr-c3793352a8d76d2eee1edc38a9a16c1c8a6573f4-parse_hello_subtlv
 * @id cpp/frr/c3793352a8d76d2eee1edc38a9a16c1c8a6573f4/parse-hello-subtlv
 * @description frr-c3793352a8d76d2eee1edc38a9a16c1c8a6573f4-babeld/message.c-parse_hello_subtlv CVE-2022-26128
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
		target_0.getValue()="0"
		and not target_0.getValue()="2"
		and target_0.getParent().(ArrayExpr).getParent().(AssignExpr).getRValue().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("const unsigned char *")
		and target_0.getEnclosingFunction() = func
}

predicate func_2(Parameter valen_179, BlockStmt target_9, RelationalOperation target_10, RelationalOperation target_8) {
	exists(RelationalOperation target_2 |
		 (target_2 instanceof GEExpr or target_2 instanceof LEExpr)
		and target_2.getGreaterOperand() instanceof AddExpr
		and target_2.getLesserOperand().(VariableAccess).getTarget()=valen_179
		and target_2.getParent().(IfStmt).getThen()=target_9
		and target_10.getGreaterOperand().(VariableAccess).getLocation().isBefore(target_2.getLesserOperand().(VariableAccess).getLocation())
		and target_2.getLesserOperand().(VariableAccess).getLocation().isBefore(target_8.getLesserOperand().(VariableAccess).getLocation()))
}

predicate func_3(Parameter valen_179, BlockStmt target_9) {
	exists(AddExpr target_3 |
		target_3.getAnOperand() instanceof AddExpr
		and target_3.getAnOperand().(Literal).getValue()="2"
		and target_3.getParent().(GTExpr).getGreaterOperand() instanceof AddExpr
		and target_3.getParent().(GTExpr).getLesserOperand().(VariableAccess).getTarget()=valen_179
		and target_3.getParent().(GTExpr).getParent().(IfStmt).getThen()=target_9)
}

predicate func_4(Parameter valen_179, Variable vi_182, BlockStmt target_9, AddExpr target_4) {
		target_4.getAnOperand().(VariableAccess).getTarget()=vi_182
		and target_4.getAnOperand().(Literal).getValue()="1"
		and target_4.getParent().(GTExpr).getLesserOperand().(VariableAccess).getTarget()=valen_179
		and target_4.getParent().(GTExpr).getParent().(IfStmt).getThen()=target_9
}

predicate func_5(Parameter valen_179, Variable vlen_182, Variable vi_182, BlockStmt target_11, AddExpr target_5) {
		target_5.getAnOperand().(VariableAccess).getTarget()=vi_182
		and target_5.getAnOperand().(VariableAccess).getTarget()=vlen_182
		and target_5.getParent().(GTExpr).getLesserOperand().(VariableAccess).getTarget()=valen_179
		and target_5.getParent().(GTExpr).getParent().(IfStmt).getThen()=target_11
}

/*predicate func_6(Parameter valen_179, BlockStmt target_9, VariableAccess target_6) {
		target_6.getTarget()=valen_179
		and target_6.getParent().(GTExpr).getParent().(IfStmt).getThen()=target_9
}

*/
/*predicate func_7(Parameter valen_179, Variable vlen_182, Variable vi_182, BlockStmt target_11, VariableAccess target_7) {
		target_7.getTarget()=valen_179
		and target_7.getParent().(GTExpr).getGreaterOperand().(AddExpr).getAnOperand().(VariableAccess).getTarget()=vi_182
		and target_7.getParent().(GTExpr).getGreaterOperand().(AddExpr).getAnOperand().(VariableAccess).getTarget()=vlen_182
		and target_7.getParent().(GTExpr).getParent().(IfStmt).getThen()=target_11
}

*/
predicate func_8(Parameter valen_179, BlockStmt target_11, RelationalOperation target_8) {
		 (target_8 instanceof GTExpr or target_8 instanceof LTExpr)
		and target_8.getGreaterOperand() instanceof AddExpr
		and target_8.getLesserOperand().(VariableAccess).getTarget()=valen_179
		and target_8.getParent().(IfStmt).getThen()=target_11
}

predicate func_9(Function func, BlockStmt target_9) {
		target_9.getStmt(0).(DoStmt).getCondition().(Literal).getValue()="0"
		and target_9.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("zlog_ref")
		and target_9.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("const xref_logmsg")
		and target_9.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="Received truncated sub-TLV on Hello message."
		and target_9.getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-1"
		and target_9.getEnclosingFunction() = func
}

predicate func_10(Parameter valen_179, Variable vi_182, RelationalOperation target_10) {
		 (target_10 instanceof GTExpr or target_10 instanceof LTExpr)
		and target_10.getLesserOperand().(VariableAccess).getTarget()=vi_182
		and target_10.getGreaterOperand().(VariableAccess).getTarget()=valen_179
}

predicate func_11(Function func, BlockStmt target_11) {
		target_11.getStmt(0).(DoStmt).getCondition().(Literal).getValue()="0"
		and target_11.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("zlog_ref")
		and target_11.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("const xref_logmsg")
		and target_11.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="Received truncated sub-TLV on Hello message."
		and target_11.getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-1"
		and target_11.getEnclosingFunction() = func
}

from Function func, Parameter valen_179, Variable vlen_182, Variable vi_182, Literal target_0, AddExpr target_4, AddExpr target_5, RelationalOperation target_8, BlockStmt target_9, RelationalOperation target_10, BlockStmt target_11
where
func_0(func, target_0)
and not func_2(valen_179, target_9, target_10, target_8)
and not func_3(valen_179, target_9)
and func_4(valen_179, vi_182, target_9, target_4)
and func_5(valen_179, vlen_182, vi_182, target_11, target_5)
and func_8(valen_179, target_11, target_8)
and func_9(func, target_9)
and func_10(valen_179, vi_182, target_10)
and func_11(func, target_11)
and valen_179.getType().hasName("int")
and vlen_182.getType().hasName("int")
and vi_182.getType().hasName("int")
and valen_179.getFunction() = func
and vlen_182.(LocalVariable).getFunction() = func
and vi_182.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
