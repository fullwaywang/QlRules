/**
 * @name linux-d3bd7413e0ca40b60cf60d4003246d067cafdeda-sanitize_ptr_alu
 * @id cpp/linux/d3bd7413e0ca40b60cf60d4003246d067cafdeda/sanitize-ptr-alu
 * @description linux-d3bd7413e0ca40b60cf60d4003246d067cafdeda-kernel/bpf/verifier.c-sanitize_ptr_alu CVE-2019-7308
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter venv_3106, Parameter vinsn_3107, ReturnStmt target_11, ExprStmt target_12) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("can_skip_alu_sanitation")
	and target_0.getArgument(0).(VariableAccess).getTarget()=venv_3106
	and target_0.getArgument(1).(VariableAccess).getTarget()=vinsn_3107
	and target_0.getParent().(IfStmt).getThen()=target_11
	and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_12.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vaux_3113, Variable valu_state_3116, Variable valu_limit_3116, ReturnStmt target_13, LogicalAndExpr target_8, ExprStmt target_9, ExprStmt target_10) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("update_alu_sanitation_state")
	and target_1.getArgument(0).(VariableAccess).getTarget()=vaux_3113
	and target_1.getArgument(1).(VariableAccess).getTarget()=valu_state_3116
	and target_1.getArgument(2).(VariableAccess).getTarget()=valu_limit_3116
	and target_1.getParent().(IfStmt).getThen()=target_13
	and target_1.getArgument(0).(VariableAccess).getLocation().isBefore(target_8.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_1.getArgument(1).(VariableAccess).getLocation().isBefore(target_9.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation())
	and target_1.getArgument(2).(VariableAccess).getLocation().isBefore(target_10.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation()))
}

predicate func_2(Parameter venv_3106, VariableAccess target_2) {
	target_2.getTarget()=venv_3106
}

predicate func_3(Parameter vinsn_3107, VariableAccess target_3) {
	target_3.getTarget()=vinsn_3107
}

predicate func_4(Variable vaux_3113, VariableAccess target_4) {
	target_4.getTarget()=vaux_3113
}

predicate func_5(Variable valu_state_3116, VariableAccess target_5) {
	target_5.getTarget()=valu_state_3116
}

predicate func_6(Variable valu_limit_3116, VariableAccess target_6) {
	target_6.getTarget()=valu_limit_3116
}

predicate func_7(Parameter venv_3106, Parameter vinsn_3107, ReturnStmt target_11, LogicalOrExpr target_7) {
	target_7.getLeftOperand().(PointerFieldAccess).getTarget().getName()="allow_ptr_leaks"
	and target_7.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=venv_3106
	and target_7.getRightOperand().(EqualityOperation).getLeftOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="code"
	and target_7.getRightOperand().(EqualityOperation).getLeftOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_3107
	and target_7.getRightOperand().(EqualityOperation).getLeftOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="8"
	and target_7.getRightOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_7.getParent().(IfStmt).getThen()=target_11
}

predicate func_8(Variable vaux_3113, Variable valu_state_3116, Variable valu_limit_3116, ReturnStmt target_13, LogicalAndExpr target_8) {
	target_8.getLeftOperand().(PointerFieldAccess).getTarget().getName()="alu_state"
	and target_8.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vaux_3113
	and target_8.getRightOperand().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="alu_state"
	and target_8.getRightOperand().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vaux_3113
	and target_8.getRightOperand().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getRightOperand().(VariableAccess).getTarget()=valu_state_3116
	and target_8.getRightOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getTarget().getName()="alu_limit"
	and target_8.getRightOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_8.getRightOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vaux_3113
	and target_8.getRightOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getRightOperand().(VariableAccess).getTarget()=valu_limit_3116
	and target_8.getParent().(IfStmt).getThen()=target_13
}

predicate func_9(Variable vaux_3113, Variable valu_state_3116, Function func, ExprStmt target_9) {
	target_9.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="alu_state"
	and target_9.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vaux_3113
	and target_9.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=valu_state_3116
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_9
}

predicate func_10(Variable vaux_3113, Variable valu_limit_3116, Function func, ExprStmt target_10) {
	target_10.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="alu_limit"
	and target_10.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_10.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vaux_3113
	and target_10.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=valu_limit_3116
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_10
}

predicate func_11(LogicalOrExpr target_7, Function func, ReturnStmt target_11) {
	target_11.getExpr().(Literal).getValue()="0"
	and target_11.getParent().(IfStmt).getCondition()=target_7
	and target_11.getEnclosingFunction() = func
}

predicate func_12(Parameter venv_3106, ExprStmt target_12) {
	target_12.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("bool")
	and target_12.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("push_stack")
	and target_12.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_3106
	and target_12.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="insn_idx"
	and target_12.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=venv_3106
	and target_12.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddExpr).getRightOperand().(Literal).getValue()="1"
	and target_12.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="insn_idx"
	and target_12.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=venv_3106
}

predicate func_13(Function func, ReturnStmt target_13) {
	target_13.getExpr().(UnaryMinusExpr).getValue()="-13"
	and target_13.getEnclosingFunction() = func
}

from Function func, Parameter venv_3106, Parameter vinsn_3107, Variable vaux_3113, Variable valu_state_3116, Variable valu_limit_3116, VariableAccess target_2, VariableAccess target_3, VariableAccess target_4, VariableAccess target_5, VariableAccess target_6, LogicalOrExpr target_7, LogicalAndExpr target_8, ExprStmt target_9, ExprStmt target_10, ReturnStmt target_11, ExprStmt target_12, ReturnStmt target_13
where
not func_0(venv_3106, vinsn_3107, target_11, target_12)
and not func_1(vaux_3113, valu_state_3116, valu_limit_3116, target_13, target_8, target_9, target_10)
and func_2(venv_3106, target_2)
and func_3(vinsn_3107, target_3)
and func_4(vaux_3113, target_4)
and func_5(valu_state_3116, target_5)
and func_6(valu_limit_3116, target_6)
and func_7(venv_3106, vinsn_3107, target_11, target_7)
and func_8(vaux_3113, valu_state_3116, valu_limit_3116, target_13, target_8)
and func_9(vaux_3113, valu_state_3116, func, target_9)
and func_10(vaux_3113, valu_limit_3116, func, target_10)
and func_11(target_7, func, target_11)
and func_12(venv_3106, target_12)
and func_13(func, target_13)
and venv_3106.getType().hasName("bpf_verifier_env *")
and vinsn_3107.getType().hasName("bpf_insn *")
and vaux_3113.getType().hasName("bpf_insn_aux_data *")
and valu_state_3116.getType().hasName("u32")
and valu_limit_3116.getType().hasName("u32")
and venv_3106.getFunction() = func
and vinsn_3107.getFunction() = func
and vaux_3113.(LocalVariable).getFunction() = func
and valu_state_3116.(LocalVariable).getFunction() = func
and valu_limit_3116.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
