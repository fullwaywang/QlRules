commit 9562dbe5cdbb16ac887d27ef6f179980bb99193c
Author: Nathan Chancellor <nathan@kernel.org>
Date:   Thu Apr 25 09:55:52 2024 -0700

    clk: bcm: rpi: Assign ->num before accessing ->hws
    
    commit 6dc445c1905096b2ed4db1a84570375b4e00cc0f upstream.
    
    Commit f316cdff8d67 ("clk: Annotate struct clk_hw_onecell_data with
    __counted_by") annotated the hws member of 'struct clk_hw_onecell_data'
    with __counted_by, which informs the bounds sanitizer about the number
    of elements in hws, so that it can warn when hws is accessed out of
    bounds. As noted in that change, the __counted_by member must be
    initialized with the number of elements before the first array access
    happens, otherwise there will be a warning from each access prior to the
    initialization because the number of elements is zero. This occurs in
    raspberrypi_discover_clocks() due to ->num being assigned after ->hws
    has been accessed:
    
      UBSAN: array-index-out-of-bounds in drivers/clk/bcm/clk-raspberrypi.c:374:4
      index 3 is out of range for type 'struct clk_hw *[] __counted_by(num)' (aka 'struct clk_hw *[]')
    
    Move the ->num initialization to before the first access of ->hws, which
    clears up the warning.
    
    Cc: stable@vger.kernel.org
    Fixes: f316cdff8d67 ("clk: Annotate struct clk_hw_onecell_data with __counted_by")
    Signed-off-by: Nathan Chancellor <nathan@kernel.org>
    Link: https://lore.kernel.org/r/20240425-cbl-bcm-assign-counted-by-val-before-access-v1-2-e2db3b82d5ef@kernel.org
    Reviewed-by: Kees Cook <keescook@chromium.org>
    Reviewed-by: Florian Fainelli <florian.fainelli@broadcom.com>
    Signed-off-by: Stephen Boyd <sboyd@kernel.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/clk/bcm/clk-raspberrypi.c b/drivers/clk/bcm/clk-raspberrypi.c
index 829406dc44a2..4d411408e4af 100644
--- a/drivers/clk/bcm/clk-raspberrypi.c
+++ b/drivers/clk/bcm/clk-raspberrypi.c
@@ -371,8 +371,8 @@ static int raspberrypi_discover_clocks(struct raspberrypi_clk *rpi,
 			if (IS_ERR(hw))
 				return PTR_ERR(hw);
 
-			data->hws[clks->id] = hw;
 			data->num = clks->id + 1;
+			data->hws[clks->id] = hw;
 		}
 
 		clks++;
