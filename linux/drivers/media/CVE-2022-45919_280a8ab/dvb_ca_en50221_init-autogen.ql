/**
 * @name linux-280a8ab81733da8bc442253c700a52c4c0886ffd-dvb_ca_en50221_init
 * @id cpp/linux/280a8ab81733da8bc442253c700a52c4c0886ffd/dvb-ca-en50221-init
 * @description linux-280a8ab81733da8bc442253c700a52c4c0886ffd-drivers/media/dvb-core/dvb_ca_en50221.c-dvb_ca_en50221_init CVE-2022-45919
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, SizeofExprOperator target_0) {
	target_0.getValue()="320"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vca_1848, IfStmt target_2, AddressOfExpr target_3, ExprStmt target_4, Function func) {
exists(DoStmt target_1 |
	target_1.getCondition().(Literal).getValue()="0"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__mutex_init")
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="remove_mutex"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vca_1848
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="&ca->remove_mutex"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("lock_class_key")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_2.getLocation())
	and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Function func, IfStmt target_2) {
	target_2.getCondition().(FunctionCall).getTarget().hasName("signal_pending")
	and target_2.getCondition().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("get_current")
	and target_2.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-4"
	and target_2.getThen().(BlockStmt).getStmt(1).(GotoStmt).getName() ="unregister_device"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vca_1848, AddressOfExpr target_3) {
	target_3.getOperand().(PointerFieldAccess).getTarget().getName()="ioctl_mutex"
	and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vca_1848
}

predicate func_4(Variable vca_1848, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="thread"
	and target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vca_1848
	and target_4.getExpr().(AssignExpr).getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("IS_ERR")
	and target_4.getExpr().(AssignExpr).getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("wake_up_process")
	and target_4.getExpr().(AssignExpr).getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(VariableAccess).getTarget().getType().hasName("task_struct *")
}

from Function func, Variable vca_1848, SizeofExprOperator target_0, IfStmt target_2, AddressOfExpr target_3, ExprStmt target_4
where
func_0(func, target_0)
and not func_1(vca_1848, target_2, target_3, target_4, func)
and func_2(func, target_2)
and func_3(vca_1848, target_3)
and func_4(vca_1848, target_4)
and vca_1848.getType().hasName("dvb_ca_private *")
and vca_1848.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
