/**
 * @name linux-d6fefa1105dacc8a742cdcf2f4bfb501c9e61349-process_dynptr_func
 * @id cpp/linux/d6fefa1105dacc8a742cdcf2f4bfb501c9e61349/process-dynptr-func
 * @description linux-d6fefa1105dacc8a742cdcf2f4bfb501c9e61349-kernel/bpf/verifier.c-process_dynptr_func CVE-2023-39191
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vreg_5932, Parameter venv_5929, BitwiseAndExpr target_2, NotExpr target_3, ExprStmt target_4) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("mark_dynptr_read")
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_5929
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vreg_5932
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(4)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_3.getOperand().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(BitwiseAndExpr target_2, Function func) {
exists(IfStmt target_1 |
	target_1.getCondition().(VariableAccess).getType().hasName("int")
	and target_1.getThen().(ReturnStmt).getExpr().(VariableAccess).getType().hasName("int")
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(5)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_1.getEnclosingFunction() = func)
}

predicate func_2(Function func, BitwiseAndExpr target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget().getType().hasName("bpf_arg_type")
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vreg_5932, Parameter venv_5929, NotExpr target_3) {
	target_3.getOperand().(FunctionCall).getTarget().hasName("is_dynptr_type_expected")
	and target_3.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_5929
	and target_3.getOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vreg_5932
	and target_3.getOperand().(FunctionCall).getArgument(2).(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("bpf_arg_type")
	and target_3.getOperand().(FunctionCall).getArgument(2).(BitwiseAndExpr).getRightOperand().(ComplementExpr).getValue()="4294966783"
}

predicate func_4(Parameter venv_5929, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_5929
	and target_4.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="Expected a dynptr of type %s as arg #%d\n"
	and target_4.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("const char *")
	and target_4.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Variable vreg_5932, Parameter venv_5929, BitwiseAndExpr target_2, NotExpr target_3, ExprStmt target_4
where
not func_0(vreg_5932, venv_5929, target_2, target_3, target_4)
and not func_1(target_2, func)
and func_2(func, target_2)
and func_3(vreg_5932, venv_5929, target_3)
and func_4(venv_5929, target_4)
and vreg_5932.getType().hasName("bpf_reg_state *")
and venv_5929.getType().hasName("bpf_verifier_env *")
and vreg_5932.(LocalVariable).getFunction() = func
and venv_5929.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
