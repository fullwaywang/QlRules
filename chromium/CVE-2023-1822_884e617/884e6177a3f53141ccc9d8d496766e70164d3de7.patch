commit 884e6177a3f53141ccc9d8d496766e70164d3de7	884e6177a3f53141ccc9d8d496766e70164d3de7
Author: Michael Thiessen <mthiesse@chromium.org>
Date:   Mon Feb 13 17:50:31 2023 +0000

    Block external navigation for re-navigated windows.
    
    If a page opens a window to a URL, the re-navigates that window, we
    should block external navigation to avoid it looking like the URL in
    the window triggered the external navigation.
    
    Bug: 1066555
    Change-Id: Iafbc7e4e9ebb30b4edcfec9acdd9e0310ace97c5
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4219042
    Commit-Queue: Michael Thiessen <mthiesse@chromium.org>
    Code-Coverage: Findit <findit-for-me@appspot.gserviceaccount.com>
    Reviewed-by: Bo Liu <boliu@chromium.org>
    Reviewed-by: Yaron Friedman <yfriedman@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1104547}

diff --git a/android_webview/java/src/org/chromium/android_webview/AwContents.java b/android_webview/java/src/org/chromium/android_webview/AwContents.java
index e6d6f6bf3c55d..78076fe76795f 100644
--- a/android_webview/java/src/org/chromium/android_webview/AwContents.java
+++ b/android_webview/java/src/org/chromium/android_webview/AwContents.java
@@ -683,7 +683,8 @@ public class AwContents implements SmartClipProvider {
     //
     private class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate {
         @Override
-        public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle, GURL escapedUrl) {
+        public boolean shouldIgnoreNavigation(
+                NavigationHandle navigationHandle, GURL escapedUrl, boolean crossFrame) {
             // The shouldOverrideUrlLoading call might have resulted in posting messages to the
             // UI thread. Using sendMessage here (instead of calling onPageStarted directly)
             // will allow those to run in order.
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/OverlayPanelContent.java b/chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/OverlayPanelContent.java
index 88cf09df4e52d..a5e495dcff453 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/OverlayPanelContent.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/OverlayPanelContent.java
@@ -163,7 +163,8 @@ public class OverlayPanelContent {
         }
 
         @Override
-        public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle, GURL escapedUrl) {
+        public boolean shouldIgnoreNavigation(
+                NavigationHandle navigationHandle, GURL escapedUrl, boolean crossFrame) {
             // If either of the required params for the delegate are null, do not call the
             // delegate and ignore the navigation.
             if (mExternalNavHandler == null || navigationHandle == null) return true;
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/dom_distiller/ReaderModeManager.java b/chrome/android/java/src/org/chromium/chrome/browser/dom_distiller/ReaderModeManager.java
index 732d0f01d8b37..51ddc00f8f861 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/dom_distiller/ReaderModeManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/dom_distiller/ReaderModeManager.java
@@ -229,7 +229,7 @@ public class ReaderModeManager extends EmptyTabObserver implements UserData {
         mCustomTabNavigationDelegate = new InterceptNavigationDelegate() {
             @Override
             public boolean shouldIgnoreNavigation(
-                    NavigationHandle navigationHandle, GURL escapedUrl) {
+                    NavigationHandle navigationHandle, GURL escapedUrl, boolean crossFrame) {
                 if (DomDistillerUrlUtils.isDistilledPage(navigationHandle.getUrl())
                         || navigationHandle.isExternalProtocol()) {
                     return false;
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/contextualsearch/ContextualSearchManagerTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/contextualsearch/ContextualSearchManagerTest.java
index 135ac06b2d10f..3b1a9a96fdeb0 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/contextualsearch/ContextualSearchManagerTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/contextualsearch/ContextualSearchManagerTest.java
@@ -339,15 +339,17 @@ public class ContextualSearchManagerTest extends ContextualSearchInstrumentation
         InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() {
             @Override
             public void run() {
-                Assert.assertFalse(mPanel.getOverlayPanelContent()
-                                           .getInterceptNavigationDelegateForTesting()
-                                           .shouldIgnoreNavigation(navigationHandle, initialUrl));
+                Assert.assertFalse(
+                        mPanel.getOverlayPanelContent()
+                                .getInterceptNavigationDelegateForTesting()
+                                .shouldIgnoreNavigation(navigationHandle, initialUrl, false));
                 Assert.assertEquals(0, mActivityMonitor.getHits());
 
                 navigationHandle.didRedirect(redirectUrl, true);
-                Assert.assertTrue(mPanel.getOverlayPanelContent()
-                                          .getInterceptNavigationDelegateForTesting()
-                                          .shouldIgnoreNavigation(navigationHandle, redirectUrl));
+                Assert.assertTrue(
+                        mPanel.getOverlayPanelContent()
+                                .getInterceptNavigationDelegateForTesting()
+                                .shouldIgnoreNavigation(navigationHandle, redirectUrl, false));
                 Assert.assertEquals(1, mActivityMonitor.getHits());
             }
         });
@@ -386,7 +388,7 @@ public class ContextualSearchManagerTest extends ContextualSearchInstrumentation
             public void run() {
                 Assert.assertTrue(mPanel.getOverlayPanelContent()
                                           .getInterceptNavigationDelegateForTesting()
-                                          .shouldIgnoreNavigation(navigationHandle, url));
+                                          .shouldIgnoreNavigation(navigationHandle, url, false));
             }
         });
         Assert.assertEquals(hasGesture ? 1 : 0, mActivityMonitor.getHits());
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
index 02d643fe09a88..b18164efa7405 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
@@ -187,6 +187,8 @@ public class UrlOverridingTest {
             BASE_PATH + "subframe_navigation_parent.html";
     private static final String SUBFRAME_NAVIGATION_CHILD =
             BASE_PATH + "subframe_navigation_child.html";
+    private static final String NAVIGATION_FROM_RENAVIGATE_FRAME =
+            BASE_PATH + "renavigate_frame.html";
 
     private static final String OTHER_BROWSER_PACKAGE = "com.other.browser";
     // Needs to be a real package on the device so we can get an icon from it. It will not be
@@ -387,20 +389,20 @@ public class UrlOverridingTest {
             boolean shouldLaunchExternalIntent, String expectedFinalUrl,
             @PageTransition int transition) {
         return loadUrlAndWaitForIntentUrl(url, false, false, shouldLaunchExternalIntent,
-                expectedFinalUrl, true, null, transition);
+                expectedFinalUrl, true, null, transition, false);
     }
 
     private OverrideUrlLoadingResult loadUrlAndWaitForIntentUrl(final String url, boolean needClick,
             boolean createsNewTab, final boolean shouldLaunchExternalIntent,
             final String expectedFinalUrl, final boolean shouldFailNavigation) {
         return loadUrlAndWaitForIntentUrl(url, needClick, createsNewTab, shouldLaunchExternalIntent,
-                expectedFinalUrl, shouldFailNavigation, null, PageTransition.LINK);
+                expectedFinalUrl, shouldFailNavigation, null, PageTransition.LINK, false);
     }
 
     private OverrideUrlLoadingResult loadUrlAndWaitForIntentUrl(final String url, boolean needClick,
             boolean createsNewTab, final boolean shouldLaunchExternalIntent,
             final String expectedFinalUrl, final boolean shouldFailNavigation, String clickTargetId,
-            @PageTransition int transition) {
+            @PageTransition int transition, final boolean willNavigateTwice) {
         final CallbackHelper finishCallback = new CallbackHelper();
         final CallbackHelper failCallback = new CallbackHelper();
         final CallbackHelper destroyedCallback = new CallbackHelper();
@@ -483,6 +485,15 @@ public class UrlOverridingTest {
             }
         }
 
+        if (willNavigateTwice && finishCallback.getCallCount() < 2) {
+            try {
+                finishCallback.waitForCallback(1, 1, 20, TimeUnit.SECONDS);
+            } catch (TimeoutException ex) {
+                Assert.fail();
+                return OverrideUrlLoadingResult.forNoOverride();
+            }
+        }
+
         if (shouldFailNavigation) {
             try {
                 failCallback.waitForCallback(0, 1, 20, TimeUnit.SECONDS);
@@ -770,7 +781,7 @@ public class UrlOverridingTest {
     public void testOpenWindowFromLinkUserGesture() {
         mActivityTestRule.startMainActivityOnBlankPage();
         loadUrlAndWaitForIntentUrl(mTestServer.getURL(OPEN_WINDOW_FROM_LINK_USER_GESTURE_PAGE),
-                true, true, true, null, true, "link", PageTransition.LINK);
+                true, true, true, null, true, "link", PageTransition.LINK, false);
     }
 
     @Test
@@ -778,7 +789,7 @@ public class UrlOverridingTest {
     public void testOpenWindowFromSvgUserGesture() {
         mActivityTestRule.startMainActivityOnBlankPage();
         loadUrlAndWaitForIntentUrl(mTestServer.getURL(OPEN_WINDOW_FROM_SVG_USER_GESTURE_PAGE), true,
-                true, true, null, true, "link", PageTransition.LINK);
+                true, true, null, true, "link", PageTransition.LINK, false);
     }
 
     @Test
@@ -874,8 +885,8 @@ public class UrlOverridingTest {
     public void testIntentURIWithFileSchemeDoesNothing() throws TimeoutException {
         mActivityTestRule.startMainActivityOnBlankPage();
         String originalUrl = mTestServer.getURL(NAVIGATION_TO_FILE_SCHEME_FROM_INTENT_URI);
-        loadUrlAndWaitForIntentUrl(
-                originalUrl, true, true, false, null, true, "scheme_file", PageTransition.LINK);
+        loadUrlAndWaitForIntentUrl(originalUrl, true, true, false, null, true, "scheme_file",
+                PageTransition.LINK, false);
     }
 
     @Test
@@ -884,7 +895,7 @@ public class UrlOverridingTest {
         mActivityTestRule.startMainActivityOnBlankPage();
         String originalUrl = mTestServer.getURL(NAVIGATION_TO_FILE_SCHEME_FROM_INTENT_URI);
         loadUrlAndWaitForIntentUrl(originalUrl, true, true, false, null, true,
-                "scheme_mixed_case_file", PageTransition.LINK);
+                "scheme_mixed_case_file", PageTransition.LINK, false);
     }
 
     @Test
@@ -892,8 +903,8 @@ public class UrlOverridingTest {
     public void testIntentURIWithNoSchemeDoesNothing() throws TimeoutException {
         mActivityTestRule.startMainActivityOnBlankPage();
         String originalUrl = mTestServer.getURL(NAVIGATION_TO_FILE_SCHEME_FROM_INTENT_URI);
-        loadUrlAndWaitForIntentUrl(
-                originalUrl, true, true, false, null, true, "null_scheme", PageTransition.LINK);
+        loadUrlAndWaitForIntentUrl(originalUrl, true, true, false, null, true, "null_scheme",
+                PageTransition.LINK, false);
     }
 
     @Test
@@ -901,8 +912,8 @@ public class UrlOverridingTest {
     public void testIntentURIWithEmptySchemeDoesNothing() throws TimeoutException {
         mActivityTestRule.startMainActivityOnBlankPage();
         String originalUrl = mTestServer.getURL(NAVIGATION_TO_FILE_SCHEME_FROM_INTENT_URI);
-        loadUrlAndWaitForIntentUrl(
-                originalUrl, true, true, false, null, true, "empty_scheme", PageTransition.LINK);
+        loadUrlAndWaitForIntentUrl(originalUrl, true, true, false, null, true, "empty_scheme",
+                PageTransition.LINK, false);
     }
 
     @Test
@@ -1510,4 +1521,17 @@ public class UrlOverridingTest {
 
         assertMessagePresent();
     }
+
+    @Test
+    @SmallTest
+    @Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_FRAME_RENAVIGATIONS_NAME})
+    public void testWindowRenavigation() throws Exception {
+        String finalUrl = mTestServer.getURL(HELLO_PAGE);
+        mActivityTestRule.startMainActivityOnBlankPage();
+        OverrideUrlLoadingResult result =
+                loadUrlAndWaitForIntentUrl(mTestServer.getURL(NAVIGATION_FROM_RENAVIGATE_FRAME),
+                        true, true, false, finalUrl, true, null, PageTransition.LINK, true);
+        Assert.assertEquals(OverrideUrlLoadingResultType.NO_OVERRIDE, result.getResultType());
+        Assert.assertNull(getCurrentExternalNavigationMessage());
+    }
 }
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java
index 56aba3733da4e..55291ab695fe4 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java
@@ -119,9 +119,9 @@ public class InterceptNavigationDelegateTest {
             InterceptNavigationDelegateImpl delegate = new InterceptNavigationDelegateImpl(client) {
                 @Override
                 public boolean shouldIgnoreNavigation(
-                        NavigationHandle navigationHandle, GURL escapedUrl) {
+                        NavigationHandle navigationHandle, GURL escapedUrl, boolean crossFrame) {
                     mNavParamHistory.add(navigationHandle);
-                    return super.shouldIgnoreNavigation(navigationHandle, escapedUrl);
+                    return super.shouldIgnoreNavigation(navigationHandle, escapedUrl, crossFrame);
                 }
 
                 @Override
diff --git a/chrome/test/data/android/url_overriding/renavigate_frame.html b/chrome/test/data/android/url_overriding/renavigate_frame.html
new file mode 100644
index 0000000000000..8b3f56c6e2f68
--- /dev/null
+++ b/chrome/test/data/android/url_overriding/renavigate_frame.html
@@ -0,0 +1,22 @@
+<!DOCTYPE html>
+<html>
+<head>
+  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+  <script>
+    function openWindow() {
+      var x = window.open("hello.html");
+      var interval = setInterval(function () {
+        if (!x.document.URL.includes("hello.html")) return;
+        if (x.document.readyState !== "complete") return;
+        x.location.href = "intent://test/#Intent;scheme=externalappscheme;end";
+        clearInterval(interval);
+      }, 10);
+    };
+  </script>
+</head>
+
+<body style='height:10000px;' onclick='openWindow();'>
+  Click page to open App!!
+</body>
+
+</html>
diff --git a/components/external_intents/android/external_intents_features.cc b/components/external_intents/android/external_intents_features.cc
index 3f7596b011b2b..8d968f4ac6b12 100644
--- a/components/external_intents/android/external_intents_features.cc
+++ b/components/external_intents/android/external_intents_features.cc
@@ -19,7 +19,7 @@ namespace {
 // Array of features exposed through the Java ExternalIntentsFeatures API.
 const base::Feature* kFeaturesExposedToJava[] = {
     &kExternalNavigationDebugLogs, &kExternalNavigationSubframeRedirects,
-    &kBlockSubframeIntentToSelf};
+    &kBlockSubframeIntentToSelf, &kBlockFrameRenavigations};
 
 }  // namespace
 
@@ -37,6 +37,10 @@ BASE_FEATURE(kBlockSubframeIntentToSelf,
              "BlockSubframeIntentToSelf",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
+BASE_FEATURE(kBlockFrameRenavigations,
+             "BlockFrameRenavigations",
+             base::FEATURE_ENABLED_BY_DEFAULT);
+
 static jlong JNI_ExternalIntentsFeatures_GetFeature(JNIEnv* env, jint ordinal) {
   return reinterpret_cast<jlong>(kFeaturesExposedToJava[ordinal]);
 }
diff --git a/components/external_intents/android/external_intents_features.h b/components/external_intents/android/external_intents_features.h
index 2c2987dabe6a3..88e99bd4e7a5a 100644
--- a/components/external_intents/android/external_intents_features.h
+++ b/components/external_intents/android/external_intents_features.h
@@ -13,6 +13,7 @@ namespace external_intents {
 BASE_DECLARE_FEATURE(kExternalNavigationDebugLogs);
 BASE_DECLARE_FEATURE(kExternalNavigationSubframeRedirects);
 BASE_DECLARE_FEATURE(kBlockSubframeIntentToSelf);
+BASE_DECLARE_FEATURE(kBlockFrameRenavigations);
 }  // namespace external_intents
 
 #endif  // COMPONENTS_EXTERNAL_INTENTS_ANDROID_EXTERNAL_INTENTS_FEATURES_H_
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
index 58b6b654ec1e0..e6b546daca25c 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
@@ -21,6 +21,7 @@ public class ExternalIntentsFeatures extends Features {
     public static final String EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS_NAME =
             "ExternalNavigationSubframeRedirects";
     public static final String BLOCK_SUBFRAME_INTENT_TO_SELF_NAME = "BlockSubframeIntentToSelf";
+    public static final String BLOCK_FRAME_RENAVIGATIONS_NAME = "BlockFrameRenavigations";
 
     public static final ExternalIntentsFeatures EXTERNAL_NAVIGATION_DEBUG_LOGS =
             new ExternalIntentsFeatures(0, EXTERNAL_NAVIGATION_DEBUG_LOGS_NAME);
@@ -31,6 +32,9 @@ public class ExternalIntentsFeatures extends Features {
     public static final ExternalIntentsFeatures BLOCK_SUBFRAME_INTENT_TO_SELF =
             new ExternalIntentsFeatures(2, BLOCK_SUBFRAME_INTENT_TO_SELF_NAME);
 
+    public static final ExternalIntentsFeatures BLOCK_FRAME_RENAVIGATIONS =
+            new ExternalIntentsFeatures(3, BLOCK_FRAME_RENAVIGATIONS_NAME);
+
     private final int mOrdinal;
 
     private ExternalIntentsFeatures(int ordinal, String name) {
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
index dccd3de98f6c2..33c282d72f304 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
@@ -986,7 +986,7 @@ public class ExternalNavigationHandler {
 
         // Ensure the navigation was started with a user gesture so that inactive pages can't launch
         // apps unexpectedly, unless we trust the calling app for a CCT/TWA.
-        if (initialState.isRendererInitiated && !initialState.hasUserGesture) {
+        if (initialState.isRendererInitiated && !initialState.hasUserGesture()) {
             if (isExternalProtocol) handler.maybeLogExternalRedirectBlockedWithMissingGesture();
             if (debug()) Log.i(TAG, "Navigation chain started without a gesture.");
             return true;
@@ -1226,6 +1226,17 @@ public class ExternalNavigationHandler {
         return false;
     }
 
+    /**
+     * https://crbug.com/1066555. A re-navigation can make it look like the current tab is
+     * performing a navigation when it's actually a background tab doing the navigation.
+     */
+    private boolean isCrossFrameRenavigation(ExternalNavigationParams params) {
+        if (!ExternalIntentsFeatures.BLOCK_FRAME_RENAVIGATIONS.isEnabled()) return false;
+        if (params.isInitialNavigationInFrame() || !params.isCrossFrameNavigation()) return false;
+        if (debug()) Log.i(TAG, "Cross-frame re-navigation.");
+        return true;
+    }
+
     /**
      * Prepare the intent to be sent. This function does not change the filtering for the intent,
      * so the list if resolveInfos for the intent will be the same before and after this function.
@@ -1522,6 +1533,8 @@ public class ExternalNavigationHandler {
             return OverrideUrlLoadingResult.forNoOverride();
         }
 
+        if (isCrossFrameRenavigation(params)) return OverrideUrlLoadingResult.forNoOverride();
+
         QueryIntentActivitiesSupplier resolvingInfos =
                 new QueryIntentActivitiesSupplier(targetIntent);
 
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationParams.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationParams.java
index 69f835e3ed98b..63c6f3e582dba 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationParams.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationParams.java
@@ -91,6 +91,8 @@ public class ExternalNavigationParams {
     private final boolean mIsMainFrame;
     private final String mNativeClientPackageName;
     private final boolean mHasUserGesture;
+    private final boolean mIsInitialNavigationInFrame;
+    private final boolean mIsCrossFrameNavigation;
     private final Callback<AsyncActionTakenParams> mAsyncActionTakenCallback;
     private boolean mIsRendererInitiated;
     private Origin mInitiatorOrigin;
@@ -104,7 +106,8 @@ public class ExternalNavigationParams {
             boolean isBackgroundTabNavigation, boolean intentLaunchesAllowedInBackgroundTabs,
             boolean isMainFrame, String nativeClientPackageName, boolean hasUserGesture,
             Callback<AsyncActionTakenParams> asyncActionTakenCallback, boolean isRendererInitiated,
-            @Nullable Origin initiatorOrigin) {
+            @Nullable Origin initiatorOrigin, boolean isInitialNavigationInFrame,
+            boolean isCrossFrameNavigation) {
         mUrl = url;
         mIsIncognito = isIncognito;
         mPageTransition = pageTransition;
@@ -121,6 +124,8 @@ public class ExternalNavigationParams {
         mAsyncActionTakenCallback = asyncActionTakenCallback;
         mIsRendererInitiated = isRendererInitiated;
         mInitiatorOrigin = initiatorOrigin;
+        mIsInitialNavigationInFrame = isInitialNavigationInFrame;
+        mIsCrossFrameNavigation = isCrossFrameNavigation;
     }
 
     public void onAsyncActionStarted() {
@@ -229,6 +234,20 @@ public class ExternalNavigationParams {
         return (mPageTransition & PageTransition.FROM_API) != 0;
     }
 
+    /**
+     * @return Whether the navigation is the initial navigation in the frame.
+     */
+    public boolean isInitialNavigationInFrame() {
+        return mIsInitialNavigationInFrame;
+    }
+
+    /**
+     * @return Whether the navigation is a cross-frame (non-browser-initiated) navigation.
+     */
+    public boolean isCrossFrameNavigation() {
+        return mIsCrossFrameNavigation;
+    }
+
     /** The builder for {@link ExternalNavigationParams} objects. */
     public static class Builder {
         private GURL mUrl;
@@ -247,6 +266,8 @@ public class ExternalNavigationParams {
         private Callback<AsyncActionTakenParams> mAsyncActionTakenCallback;
         private boolean mIsRendererInitiated;
         private Origin mInitiatorOrigin;
+        private boolean mIsInitialNavigationInFrame;
+        private boolean mIsCrossFrameNavigation;
 
         public Builder(GURL url, boolean isIncognito) {
             mUrl = url;
@@ -334,13 +355,30 @@ public class ExternalNavigationParams {
             return this;
         }
 
+        /**
+         * Sets whether the navigation is the initial navigation in the frame.
+         */
+        public Builder setIsInitialNavigationInFrame(boolean v) {
+            mIsInitialNavigationInFrame = v;
+            return this;
+        }
+
+        /**
+         * Sets whether the navigation is a cross-frame (non-browser-initiated) navigation.
+         */
+        public Builder setIsCrossFrameNavigation(boolean v) {
+            mIsCrossFrameNavigation = v;
+            return this;
+        }
+
         /** @return A fully constructed {@link ExternalNavigationParams} object. */
         public ExternalNavigationParams build() {
             return new ExternalNavigationParams(mUrl, mIsIncognito, mReferrerUrl, mPageTransition,
                     mIsRedirect, mApplicationMustBeInForeground, mRedirectHandler, mOpenInNewTab,
                     mIsBackgroundTabNavigation, mIntentLaunchesAllowedInBackgroundTabs,
                     mIsMainFrame, mNativeClientPackageName, mHasUserGesture,
-                    mAsyncActionTakenCallback, mIsRendererInitiated, mInitiatorOrigin);
+                    mAsyncActionTakenCallback, mIsRendererInitiated, mInitiatorOrigin,
+                    mIsInitialNavigationInFrame, mIsCrossFrameNavigation);
         }
     }
 }
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
index 403f8e9c7dc31..c68f4a1aac934 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
@@ -128,20 +128,25 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
     }
 
     @Override
-    public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle, GURL escapedUrl) {
+    public boolean shouldIgnoreNavigation(
+            NavigationHandle navigationHandle, GURL escapedUrl, boolean crossFrame) {
         // We should never get here for non-main-frame navigations.
         if (!navigationHandle.isInPrimaryMainFrame()) throw new RuntimeException();
 
         mClient.onNavigationStarted(navigationHandle);
 
         RedirectHandler redirectHandler = mClient.getOrCreateRedirectHandler();
+        if (crossFrame && ExternalIntentsFeatures.BLOCK_FRAME_RENAVIGATIONS.isEnabled()) {
+            redirectHandler.clearUserGesture();
+        }
+
         OverrideUrlLoadingResult result = shouldOverrideUrlLoading(redirectHandler, escapedUrl,
                 navigationHandle.pageTransition(), navigationHandle.isRedirect(),
                 navigationHandle.hasUserGesture(), navigationHandle.isRendererInitiated(),
                 navigationHandle.getReferrerUrl(), navigationHandle.isInPrimaryMainFrame(),
                 navigationHandle.getInitiatorOrigin(), navigationHandle.isExternalProtocol(),
                 mClient.areIntentLaunchesAllowedInHiddenTabsForNavigation(navigationHandle),
-                this::onDidAsyncActionInMainFrame);
+                this::onDidAsyncActionInMainFrame, crossFrame);
 
         mClient.onDecisionReachedForNavigation(navigationHandle, result);
 
@@ -184,7 +189,7 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
                 GURL.emptyGURL() /* referrerUrl */, false /* isInPrimaryMainFrame */,
                 initiatorOrigin, true /* isExternalProtocol */,
                 false /* areIntentLaunchesAllowedInHiddenTabsForNavigation */,
-                this::onDidAsyncActionInSubFrame);
+                this::onDidAsyncActionInSubFrame, false /* crossframe */);
 
         switch (result.getResultType()) {
             case OverrideUrlLoadingResultType.OVERRIDE_WITH_EXTERNAL_INTENT:
@@ -211,10 +216,11 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
             boolean hasUserGesture, boolean isRendererInitiated, GURL referrerUrl,
             boolean isInPrimaryMainFrame, Origin initiatorOrigin, boolean isExternalProtocol,
             boolean areIntentLaunchesAllowedInHiddenTabsForNavigation,
-            Callback<AsyncActionTakenParams> asyncActionTakenCallback) {
+            Callback<AsyncActionTakenParams> asyncActionTakenCallback, boolean crossFrame) {
+        boolean initialNavigation = isInitialNavigation();
         redirectHandler.updateNewUrlLoading(pageTransition, isRedirect, hasUserGesture,
                 mClient.getLastUserInteractionTime(), getLastCommittedEntryIndex(),
-                isInitialNavigation(), isRendererInitiated);
+                initialNavigation, isRendererInitiated);
 
         // http://crbug.com/448977: If this is on the initial navigation chain we set the parameter
         // to open any outgoing intents that come back to Chrome in a new tab as the existing one
@@ -237,6 +243,8 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
                         .setIsRendererInitiated(isRendererInitiated)
                         .setInitiatorOrigin(initiatorOrigin)
                         .setAsyncActionTakenCallback(asyncActionTakenCallback)
+                        .setIsInitialNavigationInFrame(initialNavigation)
+                        .setIsCrossFrameNavigation(crossFrame)
                         .build();
 
         OverrideUrlLoadingResult result = mExternalNavHandler.shouldOverrideUrlLoading(params);
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/RedirectHandler.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/RedirectHandler.java
index 4ad326559317f..79588d627be87 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/RedirectHandler.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/RedirectHandler.java
@@ -66,22 +66,30 @@ public class RedirectHandler {
      */
     public class InitialNavigationState {
         public final boolean isRendererInitiated;
-        public final boolean hasUserGesture;
         public final boolean isFromReload;
         public final boolean isFromTyping;
         public final boolean isFromFormSubmit;
         public final boolean isFromIntent;
+        private boolean mHasUserGesture;
 
         public InitialNavigationState(boolean isRendererInitiated, boolean hasUserGesture,
                 boolean isFromReload, boolean isFromTyping, boolean isFromFormSubmit,
                 boolean isFromIntent) {
             this.isRendererInitiated = isRendererInitiated;
-            this.hasUserGesture = hasUserGesture;
+            mHasUserGesture = hasUserGesture;
             this.isFromReload = isFromReload;
             this.isFromTyping = isFromTyping;
             this.isFromFormSubmit = isFromFormSubmit;
             this.isFromIntent = isFromIntent;
         }
+
+        public boolean hasUserGesture() {
+            return mHasUserGesture;
+        }
+
+        private void clearUserGesture() {
+            mHasUserGesture = false;
+        }
     }
 
     private class NavigationChainState {
@@ -165,6 +173,14 @@ public class RedirectHandler {
         mIsPrefetchLoadForIntent = false;
     }
 
+    /**
+     * Clears the user gesture bit for the current Navigation Chain.
+     */
+    public void clearUserGesture() {
+        if (mNavigationChainState == null) return;
+        mNavigationChainState.mInitialNavigationState.clearUserGesture();
+    }
+
     /**
      * Will cause shouldNotOverrideUrlLoading() to return true until a new user-initiated navigation
      * occurs.
@@ -381,7 +397,7 @@ public class RedirectHandler {
 
     public void maybeLogExternalRedirectBlockedWithMissingGesture() {
         if (!mNavigationChainState.mInitialNavigationState.isRendererInitiated
-                || mNavigationChainState.mInitialNavigationState.hasUserGesture) {
+                || mNavigationChainState.mInitialNavigationState.hasUserGesture()) {
             return;
         }
 
diff --git a/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java b/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java
index 6e2924970bd3d..c3b64a44d84ac 100644
--- a/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java
+++ b/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java
@@ -75,7 +75,8 @@ import java.util.regex.Pattern;
 @RunWith(BaseJUnit4ClassRunner.class)
 @Batch(Batch.UNIT_TESTS)
 @Features.DisableFeatures(ExternalIntentsFeatures.EXTERNAL_NAVIGATION_DEBUG_LOGS_NAME)
-@Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_SUBFRAME_INTENT_TO_SELF_NAME})
+@Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_SUBFRAME_INTENT_TO_SELF_NAME,
+        ExternalIntentsFeatures.BLOCK_FRAME_RENAVIGATIONS_NAME})
 public class ExternalNavigationHandlerTest {
     // Expectations
     private static final int IGNORE = 0x0;
@@ -2604,6 +2605,17 @@ public class ExternalNavigationHandlerTest {
         doTestSubframeIntentTargetsSelf(false);
     }
 
+    @Test
+    @SmallTest
+    public void testBlockCrossFrameReNavigation() {
+        mDelegate.add(new IntentActivity(YOUTUBE_URL, YOUTUBE_PACKAGE_NAME));
+
+        checkUrl(YOUTUBE_URL, redirectHandlerForLinkClick())
+                .withIsInitialNavigationInFrame(false)
+                .withIsCrossFrame(true)
+                .expecting(OverrideUrlLoadingResultType.NO_OVERRIDE, IGNORE);
+    }
+
     private static List<ResolveInfo> makeResolveInfos(ResolveInfo... infos) {
         return Arrays.asList(infos);
     }
@@ -3068,6 +3080,8 @@ public class ExternalNavigationHandlerTest {
         private RedirectHandler mRedirectHandler;
         private boolean mIsRendererInitiated = true;
         private boolean mIsMainFrame = true;
+        private boolean mIsInitialNavigationInFrame;
+        private boolean mIsCrossFrame;
 
         private ExternalNavigationTestParams(String url, RedirectHandler handler) {
             mUrl = url;
@@ -3127,6 +3141,17 @@ public class ExternalNavigationHandlerTest {
             return this;
         }
 
+        public ExternalNavigationTestParams withIsInitialNavigationInFrame(
+                boolean isInitialNavigationInFrame) {
+            mIsInitialNavigationInFrame = isInitialNavigationInFrame;
+            return this;
+        }
+
+        public ExternalNavigationTestParams withIsCrossFrame(boolean isCrossFrame) {
+            mIsCrossFrame = isCrossFrame;
+            return this;
+        }
+
         public void expecting(
                 @OverrideUrlLoadingResultType int expectedOverrideResult, int otherExpectation) {
             expecting(expectedOverrideResult, OverrideUrlLoadingAsyncActionType.NO_ASYNC_ACTION,
@@ -3172,6 +3197,8 @@ public class ExternalNavigationHandlerTest {
                             .setHasUserGesture(mHasUserGesture)
                             .setIsRendererInitiated(mIsRendererInitiated)
                             .setAsyncActionTakenCallback(callback)
+                            .setIsInitialNavigationInFrame(mIsInitialNavigationInFrame)
+                            .setIsCrossFrameNavigation(mIsCrossFrame)
                             .build();
             OverrideUrlLoadingResult result = mUrlHandler.shouldOverrideUrlLoading(params);
 
diff --git a/components/navigation_interception/android/java/src/org/chromium/components/navigation_interception/InterceptNavigationDelegate.java b/components/navigation_interception/android/java/src/org/chromium/components/navigation_interception/InterceptNavigationDelegate.java
index 88fc51eed3804..2a3b35aaecdb8 100644
--- a/components/navigation_interception/android/java/src/org/chromium/components/navigation_interception/InterceptNavigationDelegate.java
+++ b/components/navigation_interception/android/java/src/org/chromium/components/navigation_interception/InterceptNavigationDelegate.java
@@ -19,11 +19,12 @@ public abstract class InterceptNavigationDelegate {
      * @param navigationHandle parameters describing the navigation.
      * @param escapedUrl The url from the NavigationHandle, properly escaped for external
      *         navigation.
+     * @param crossFrame whether the navigation has been initiated by another frame.
      * @return true if the navigation should be ignored.
      */
     @CalledByNative
     public abstract boolean shouldIgnoreNavigation(
-            NavigationHandle navigationHandle, GURL escapedUrl);
+            NavigationHandle navigationHandle, GURL escapedUrl, boolean crossFrame);
 
     /**
      * This method is called for navigations to external protocols in subframes, which on Android
diff --git a/components/navigation_interception/intercept_navigation_delegate.cc b/components/navigation_interception/intercept_navigation_delegate.cc
index f7e99d80819ba..e849b9a6f8070 100644
--- a/components/navigation_interception/intercept_navigation_delegate.cc
+++ b/components/navigation_interception/intercept_navigation_delegate.cc
@@ -188,9 +188,17 @@ bool InterceptNavigationDelegate::ShouldIgnoreNavigation(
   if (jdelegate.is_null())
     return false;
 
+  // Only main frame navigations use this path, so we only need to check if the
+  // navigation is cross-frame to the main frame.
+  bool cross_frame = navigation_handle->GetInitiatorFrameToken() &&
+                     navigation_handle->GetInitiatorFrameToken() !=
+                         navigation_handle->GetWebContents()
+                             ->GetPrimaryMainFrame()
+                             ->GetFrameToken();
+
   return Java_InterceptNavigationDelegate_shouldIgnoreNavigation(
       env, jdelegate, navigation_handle->GetJavaNavigationHandle(),
-      url::GURLAndroid::FromNativeGURL(env, escaped_url));
+      url::GURLAndroid::FromNativeGURL(env, escaped_url), cross_frame);
 }
 
 void InterceptNavigationDelegate::HandleSubframeExternalProtocol(
