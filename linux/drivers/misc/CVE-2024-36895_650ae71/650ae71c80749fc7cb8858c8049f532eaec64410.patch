commit 650ae71c80749fc7cb8858c8049f532eaec64410
Author: Ivan Avdeev <me@provod.works>
Date:   Sat Apr 13 11:01:24 2024 -0400

    usb: gadget: uvc: use correct buffer size when parsing configfs lists
    
    This commit fixes uvc gadget support on 32-bit platforms.
    
    Commit 0df28607c5cb ("usb: gadget: uvc: Generalise helper functions for
    reuse") introduced a helper function __uvcg_iter_item_entries() to aid
    with parsing lists of items on configfs attributes stores. This function
    is a generalization of another very similar function, which used a
    stack-allocated temporary buffer of fixed size for each item in the list
    and used the sizeof() operator to check for potential buffer overruns.
    The new function was changed to allocate the now variably sized temp
    buffer on heap, but wasn't properly updated to also check for max buffer
    size using the computed size instead of sizeof() operator.
    
    As a result, the maximum item size was 7 (plus null terminator) on
    64-bit platforms, and 3 on 32-bit ones. While 7 is accidentally just
    barely enough, 3 is definitely too small for some of UVC configfs
    attributes. For example, dwFrameInteval, specified in 100ns units,
    usually has 6-digit item values, e.g. 166666 for 60fps.
    
    Cc: stable@vger.kernel.org
    Fixes: 0df28607c5cb ("usb: gadget: uvc: Generalise helper functions for reuse")
    Signed-off-by: Ivan Avdeev <me@provod.works>
    Link: https://lore.kernel.org/r/20240413150124.1062026-1-me@provod.works
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/usb/gadget/function/uvc_configfs.c b/drivers/usb/gadget/function/uvc_configfs.c
index 7e704b2bcfd1..a4377df612f5 100644
--- a/drivers/usb/gadget/function/uvc_configfs.c
+++ b/drivers/usb/gadget/function/uvc_configfs.c
@@ -92,10 +92,10 @@ static int __uvcg_iter_item_entries(const char *page, size_t len,
 
 	while (pg - page < len) {
 		i = 0;
-		while (i < sizeof(buf) && (pg - page < len) &&
+		while (i < bufsize && (pg - page < len) &&
 		       *pg != '\0' && *pg != '\n')
 			buf[i++] = *pg++;
-		if (i == sizeof(buf)) {
+		if (i == bufsize) {
 			ret = -EINVAL;
 			goto out_free_buf;
 		}
