/**
 * @name linux-8f4f68e788c3a7a696546291258bfa5fdb215523-pcrypt_aead_decrypt
 * @id cpp/linux/8f4f68e788c3a7a696546291258bfa5fdb215523/pcrypt-aead-decrypt
 * @description linux-8f4f68e788c3a7a696546291258bfa5fdb215523-crypto/pcrypt.c-pcrypt_aead_decrypt CVE-2023-52813
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable verr_141, NotExpr target_1, ReturnStmt target_2, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=verr_141
	and target_0.getCondition().(EqualityOperation).getRightOperand().(UnaryMinusExpr).getValue()="-16"
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-11"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getFollowingStmt() instanceof ReturnStmt
	and target_1.getOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_2.getExpr().(VariableAccess).getLocation()))
}

predicate func_1(Variable verr_141, NotExpr target_1) {
	target_1.getOperand().(VariableAccess).getTarget()=verr_141
}

predicate func_2(Variable verr_141, ReturnStmt target_2) {
	target_2.getExpr().(VariableAccess).getTarget()=verr_141
}

from Function func, Variable verr_141, NotExpr target_1, ReturnStmt target_2
where
not func_0(verr_141, target_1, target_2, func)
and func_1(verr_141, target_1)
and func_2(verr_141, target_2)
and verr_141.getType().hasName("int")
and verr_141.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
