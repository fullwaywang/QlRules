/**
 * @name linux-d740269867021faf4ce38a449353d2b986c34a67-search_binary_handler
 * @id cpp/linux/d740269867021faf4ce38a449353d2b986c34a67/search-binary-handler
 * @description linux-d740269867021faf4ce38a449353d2b986c34a67-fs/exec.c-search_binary_handler CVE-2012-4530
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdepth_1354, ExprStmt target_2, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vdepth_1354
	and target_0.getCondition().(RelationalOperation).getLesserOperand().(Literal).getValue()="5"
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-40"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation()))
}

predicate func_1(Variable vdepth_1354, Parameter vbprm_1352, ExprStmt target_4, ExprStmt target_5, ExprStmt target_6) {
exists(ExprStmt target_1 |
	target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="recursion_depth"
	and target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbprm_1352
	and target_1.getExpr().(AssignExpr).getRValue().(AddExpr).getLeftOperand().(VariableAccess).getTarget()=vdepth_1354
	and target_1.getExpr().(AssignExpr).getRValue().(AddExpr).getRightOperand().(Literal).getValue()="1"
	and target_1.getLocation().isBefore(target_4.getLocation())
	and target_1.getExpr().(AssignExpr).getRValue().(AddExpr).getLeftOperand().(VariableAccess).getLocation().isBefore(target_5.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation())
	and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Parameter vbprm_1352, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("security_bprm_check")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbprm_1352
}

predicate func_4(Parameter vbprm_1352, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_4.getExpr().(AssignExpr).getRValue().(VariableCall).getExpr().(VariableAccess).getTarget().getType().hasName("..(*)(..)")
	and target_4.getExpr().(AssignExpr).getRValue().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vbprm_1352
}

predicate func_5(Variable vdepth_1354, Parameter vbprm_1352, ExprStmt target_5) {
	target_5.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="recursion_depth"
	and target_5.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbprm_1352
	and target_5.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vdepth_1354
}

predicate func_6(Parameter vbprm_1352, ExprStmt target_6) {
	target_6.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("audit_bprm")
	and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbprm_1352
}

from Function func, Variable vdepth_1354, Parameter vbprm_1352, ExprStmt target_2, ExprStmt target_4, ExprStmt target_5, ExprStmt target_6
where
not func_0(vdepth_1354, target_2, func)
and not func_1(vdepth_1354, vbprm_1352, target_4, target_5, target_6)
and func_2(vbprm_1352, target_2)
and func_4(vbprm_1352, target_4)
and func_5(vdepth_1354, vbprm_1352, target_5)
and func_6(vbprm_1352, target_6)
and vdepth_1354.getType().hasName("unsigned int")
and vbprm_1352.getType().hasName("linux_binprm *")
and vdepth_1354.(LocalVariable).getFunction() = func
and vbprm_1352.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
