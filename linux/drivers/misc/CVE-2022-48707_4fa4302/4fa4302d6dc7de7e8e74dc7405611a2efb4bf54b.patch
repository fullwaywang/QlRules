commit 4fa4302d6dc7de7e8e74dc7405611a2efb4bf54b
Author: Fan Ni <fan.ni@samsung.com>
Date:   Thu Dec 15 17:09:14 2022 +0000

    cxl/region: Fix null pointer dereference for resetting decoder
    
    Not all decoders have a reset callback.
    
    The CXL specification allows a host bridge with a single root port to
    have no explicit HDM decoders. Currently the region driver assumes there
    are none.  As such the CXL core creates a special pass through decoder
    instance without a commit/reset callback.
    
    Prior to this patch, the ->reset() callback was called unconditionally when
    calling cxl_region_decode_reset. Thus a configuration with 1 Host Bridge,
    1 Root Port, and one directly attached CXL type 3 device or multiple CXL
    type 3 devices attached to downstream ports of a switch can cause a null
    pointer dereference.
    
    Before the fix, a kernel crash was observed when we destroy the region, and
    a pass through decoder is reset.
    
    The issue can be reproduced as below,
        1) create a region with a CXL setup which includes a HB with a
        single root port under which a memdev is attached directly.
        2) destroy the region with cxl destroy-region regionX -f.
    
    Fixes: 176baefb2eb5 ("cxl/hdm: Commit decoder state to hardware")
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Fan Ni <fan.ni@samsung.com>
    Reviewed-by: Davidlohr Bueso <dave@stgolabs.net>
    Reviewed-by: Dave Jiang <dave.jiang@intel.com>
    Reviewed-by: Jonathan Cameron <Jonathan.Cameron@huawei.com>
    Tested-by: Gregory Price <gregory.price@memverge.com>
    Reviewed-by: Gregory Price <gregory.price@memverge.com>
    Link: https://lore.kernel.org/r/20221215170909.2650271-1-fan.ni@samsung.com
    Signed-off-by: Dan Williams <dan.j.williams@intel.com>

diff --git a/drivers/cxl/core/region.c b/drivers/cxl/core/region.c
index 02f28da519e3..02275e6b621b 100644
--- a/drivers/cxl/core/region.c
+++ b/drivers/cxl/core/region.c
@@ -131,7 +131,7 @@ static int cxl_region_decode_reset(struct cxl_region *cxlr, int count)
 		struct cxl_memdev *cxlmd = cxled_to_memdev(cxled);
 		struct cxl_port *iter = cxled_to_port(cxled);
 		struct cxl_ep *ep;
-		int rc;
+		int rc = 0;
 
 		while (!is_cxl_root(to_cxl_port(iter->dev.parent)))
 			iter = to_cxl_port(iter->dev.parent);
@@ -143,7 +143,8 @@ static int cxl_region_decode_reset(struct cxl_region *cxlr, int count)
 
 			cxl_rr = cxl_rr_load(iter, cxlr);
 			cxld = cxl_rr->decoder;
-			rc = cxld->reset(cxld);
+			if (cxld->reset)
+				rc = cxld->reset(cxld);
 			if (rc)
 				return rc;
 		}
@@ -186,7 +187,8 @@ static int cxl_region_decode_commit(struct cxl_region *cxlr)
 			     iter = ep->next, ep = cxl_ep_load(iter, cxlmd)) {
 				cxl_rr = cxl_rr_load(iter, cxlr);
 				cxld = cxl_rr->decoder;
-				cxld->reset(cxld);
+				if (cxld->reset)
+					cxld->reset(cxld);
 			}
 
 			cxled->cxld.reset(&cxled->cxld);
