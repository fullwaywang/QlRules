/**
 * @name linux-c25b2ae136039ffa820c26138ed4a5e5f3ab3841-check_reg_type
 * @id cpp/linux/c25b2ae136039ffa820c26138ed4a5e5f3ab3841/check-reg-type
 * @description linux-c25b2ae136039ffa820c26138ed4a5e5f3ab3841-kernel/bpf/verifier.c-check_reg_type CVE-2022-23222
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Variable vtype_5181, Parameter venv_5176, EqualityOperation target_13) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("reg_type_str")
	and target_1.getArgument(0).(VariableAccess).getTarget()=venv_5176
	and target_1.getArgument(1).(VariableAccess).getTarget()=vtype_5181
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_5176
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="R%d type=%s expected="
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("u32")
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3) instanceof ArrayExpr
	and target_1.getArgument(1).(VariableAccess).getLocation().isBefore(target_13.getLeftOperand().(VariableAccess).getLocation()))
}

predicate func_2(Parameter venv_5176, ExprStmt target_14) {
exists(FunctionCall target_2 |
	target_2.getTarget().hasName("reg_type_str")
	and target_2.getArgument(0).(VariableAccess).getTarget()=venv_5176
	and target_2.getArgument(1) instanceof ArrayExpr
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_5176
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s, "
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
	and target_14.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_2.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_4(Parameter venv_5176, ExprStmt target_15, ExprStmt target_16) {
exists(FunctionCall target_4 |
	target_4.getTarget().hasName("reg_type_str")
	and target_4.getArgument(0).(VariableAccess).getTarget()=venv_5176
	and target_4.getArgument(1) instanceof ArrayExpr
	and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_5176
	and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s\n"
	and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
	and target_15.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getArgument(0).(VariableAccess).getLocation())
	and target_4.getArgument(0).(VariableAccess).getLocation().isBefore(target_16.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_5(Variable vcompatible_5182, Variable vj_5183, Variable vreg_type_str, ArrayExpr target_5) {
	target_5.getArrayBase().(PointerFieldAccess).getTarget().getName()="types"
	and target_5.getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vcompatible_5182
	and target_5.getArrayOffset().(VariableAccess).getTarget()=vj_5183
	and target_5.getParent().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vreg_type_str
}

predicate func_6(Variable vcompatible_5182, Variable vj_5183, Variable vreg_type_str, ArrayExpr target_6) {
	target_6.getArrayBase().(PointerFieldAccess).getTarget().getName()="types"
	and target_6.getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vcompatible_5182
	and target_6.getArrayOffset().(VariableAccess).getTarget()=vj_5183
	and target_6.getParent().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vreg_type_str
}

predicate func_7(Parameter venv_5176, VariableAccess target_7) {
	target_7.getTarget()=venv_5176
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s, "
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
}

predicate func_8(Parameter venv_5176, VariableAccess target_8) {
	target_8.getTarget()=venv_5176
	and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s\n"
	and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
}

predicate func_9(Variable vtype_5181, Variable vreg_type_str, VariableAccess target_9) {
	target_9.getTarget()=vtype_5181
	and target_9.getParent().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vreg_type_str
}

predicate func_10(Variable vtype_5181, Variable vreg_type_str, Parameter venv_5176, ArrayExpr target_10) {
	target_10.getArrayBase().(VariableAccess).getTarget()=vreg_type_str
	and target_10.getArrayOffset().(VariableAccess).getTarget()=vtype_5181
	and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_5176
	and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="R%d type=%s expected="
	and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("u32")
}

predicate func_11(Variable vreg_type_str, Parameter venv_5176, ArrayExpr target_10, ArrayExpr target_12, ArrayExpr target_11) {
	target_11.getArrayBase().(VariableAccess).getTarget()=vreg_type_str
	and target_11.getArrayOffset() instanceof ArrayExpr
	and target_11.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_11.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_5176
	and target_11.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s, "
	and target_10.getArrayBase().(VariableAccess).getLocation().isBefore(target_11.getArrayBase().(VariableAccess).getLocation())
	and target_11.getArrayBase().(VariableAccess).getLocation().isBefore(target_12.getArrayBase().(VariableAccess).getLocation())
}

predicate func_12(Variable vreg_type_str, Parameter venv_5176, ArrayExpr target_11, ArrayExpr target_12) {
	target_12.getArrayBase().(VariableAccess).getTarget()=vreg_type_str
	and target_12.getArrayOffset() instanceof ArrayExpr
	and target_12.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_12.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_5176
	and target_12.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s\n"
	and target_11.getArrayBase().(VariableAccess).getLocation().isBefore(target_12.getArrayBase().(VariableAccess).getLocation())
}

predicate func_13(Variable vtype_5181, EqualityOperation target_13) {
	target_13.getLeftOperand().(VariableAccess).getTarget()=vtype_5181
	and target_13.getRightOperand() instanceof EnumConstantAccess
}

predicate func_14(Parameter venv_5176, ExprStmt target_14) {
	target_14.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_14.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_5176
	and target_14.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s, "
	and target_14.getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
}

predicate func_15(Parameter venv_5176, ExprStmt target_15) {
	target_15.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_15.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_5176
	and target_15.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s\n"
	and target_15.getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
}

predicate func_16(Parameter venv_5176, ExprStmt target_16) {
	target_16.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_16.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_5176
	and target_16.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="verifier internal error: missing arg compatible BTF ID\n"
}

from Function func, Variable vtype_5181, Variable vcompatible_5182, Variable vj_5183, Variable vreg_type_str, Parameter venv_5176, ArrayExpr target_5, ArrayExpr target_6, VariableAccess target_7, VariableAccess target_8, VariableAccess target_9, ArrayExpr target_10, ArrayExpr target_11, ArrayExpr target_12, EqualityOperation target_13, ExprStmt target_14, ExprStmt target_15, ExprStmt target_16
where
not func_1(vtype_5181, venv_5176, target_13)
and not func_2(venv_5176, target_14)
and not func_4(venv_5176, target_15, target_16)
and func_5(vcompatible_5182, vj_5183, vreg_type_str, target_5)
and func_6(vcompatible_5182, vj_5183, vreg_type_str, target_6)
and func_7(venv_5176, target_7)
and func_8(venv_5176, target_8)
and func_9(vtype_5181, vreg_type_str, target_9)
and func_10(vtype_5181, vreg_type_str, venv_5176, target_10)
and func_11(vreg_type_str, venv_5176, target_10, target_12, target_11)
and func_12(vreg_type_str, venv_5176, target_11, target_12)
and func_13(vtype_5181, target_13)
and func_14(venv_5176, target_14)
and func_15(venv_5176, target_15)
and func_16(venv_5176, target_16)
and vtype_5181.getType().hasName("bpf_reg_type")
and vcompatible_5182.getType().hasName("const bpf_reg_types *")
and vj_5183.getType().hasName("int")
and vreg_type_str.getType() instanceof ArrayType
and venv_5176.getType().hasName("bpf_verifier_env *")
and vtype_5181.(LocalVariable).getFunction() = func
and vcompatible_5182.(LocalVariable).getFunction() = func
and vj_5183.(LocalVariable).getFunction() = func
and not vreg_type_str.getParentScope+() = func
and venv_5176.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
