/**
 * @name linux-bdf533de6968-check_entry_size_and_hooks
 * @id cpp/linux/bdf533de6968/check-entry-size-and-hooks
 * @description linux-bdf533de6968-net/ipv4/netfilter/arp_tables.c-check_entry_size_and_hooks CVE-2016-4998
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter ve_570, RelationalOperation target_2, EqualityOperation target_3, Function func) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("check_entry")
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ve_570
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_2.getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getAnOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation()))
}

predicate func_1(Function func) {
	exists(IfStmt target_1 |
		target_1.getCondition().(VariableAccess).getType().hasName("int")
		and target_1.getThen().(ReturnStmt).getExpr().(VariableAccess).getType().hasName("int")
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_1)
}

predicate func_2(Parameter ve_570, RelationalOperation target_2) {
		 (target_2 instanceof GTExpr or target_2 instanceof LTExpr)
		and target_2.getLesserOperand().(PointerFieldAccess).getTarget().getName()="next_offset"
		and target_2.getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_570
		and target_2.getGreaterOperand().(AddExpr).getValue()="224"
}

predicate func_3(Parameter ve_570, EqualityOperation target_3) {
		target_3.getAnOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=ve_570
		and target_3.getAnOperand().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getTarget().getType().hasName("const unsigned char *")
		and target_3.getAnOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("const unsigned int *")
		and target_3.getAnOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("unsigned int")
}

from Function func, Parameter ve_570, RelationalOperation target_2, EqualityOperation target_3
where
not func_0(ve_570, target_2, target_3, func)
and not func_1(func)
and func_2(ve_570, target_2)
and func_3(ve_570, target_3)
and ve_570.getType().hasName("arpt_entry *")
and ve_570.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
