/**
 * @name linux-801ea33ae82d6a9d954074fbcf8ea9d18f1543a7-nl80211_set_coalesce
 * @id cpp/linux/801ea33ae82d6a9d954074fbcf8ea9d18f1543a7/nl80211-set-coalesce
 * @description linux-801ea33ae82d6a9d954074fbcf8ea9d18f1543a7-net/wireless/nl80211.c-nl80211_set_coalesce CVE-2024-36941
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vtmp_rule_13982, ForStmt target_1, ExprStmt target_2, RelationalOperation target_3) {
exists(IfStmt target_0 |
	target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vtmp_rule_13982
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation().isBefore(target_3.getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vtmp_rule_13982, ForStmt target_1) {
	target_1.getInitialization().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getInitialization().(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_1.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getTarget().getName()="n_patterns"
	and target_1.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vtmp_rule_13982
	and target_1.getUpdate().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getStmt().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("kfree")
	and target_1.getStmt().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="mask"
	and target_1.getStmt().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="patterns"
	and target_1.getStmt().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vtmp_rule_13982
	and target_1.getStmt().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_2(Variable vtmp_rule_13982, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vtmp_rule_13982
	and target_2.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(ValueFieldAccess).getTarget().getName()="rules"
	and target_2.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("cfg80211_coalesce")
	and target_2.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_3(Variable vtmp_rule_13982, RelationalOperation target_3) {
	 (target_3 instanceof GTExpr or target_3 instanceof LTExpr)
	and target_3.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getGreaterOperand().(PointerFieldAccess).getTarget().getName()="n_patterns"
	and target_3.getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vtmp_rule_13982
}

from Function func, Variable vtmp_rule_13982, ForStmt target_1, ExprStmt target_2, RelationalOperation target_3
where
not func_0(vtmp_rule_13982, target_1, target_2, target_3)
and func_1(vtmp_rule_13982, target_1)
and func_2(vtmp_rule_13982, target_2)
and func_3(vtmp_rule_13982, target_3)
and vtmp_rule_13982.getType().hasName("cfg80211_coalesce_rules *")
and vtmp_rule_13982.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
