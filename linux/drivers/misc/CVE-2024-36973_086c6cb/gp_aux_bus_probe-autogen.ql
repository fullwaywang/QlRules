/**
 * @name linux-086c6cbcc563c81d55257f9b27e14faf1d0963d3-gp_aux_bus_probe
 * @id cpp/linux/086c6cbcc563c81d55257f9b27e14faf1d0963d3/gp-aux-bus-probe
 * @description linux-086c6cbcc563c81d55257f9b27e14faf1d0963d3-drivers/misc/mchp_pci1xxxx/mchp_pci1xxxx_gp.c-gp_aux_bus_probe CVE-2024-36973
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_2, Function func) {
exists(GotoStmt target_0 |
	func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
)
}

predicate func_1(ExprStmt target_3, Function func) {
exists(GotoStmt target_1 |
	func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_3.getLocation())
)
}

predicate func_2(Function func, ExprStmt target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getArgument(1) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				exists(ArrayExpr obj_3 | obj_3=obj_2.getQualifier() |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getArrayBase() |
						obj_4.getTarget().getName()="aux_device_wrapper"
						and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("aux_bus_device *")
					)
					and obj_3.getArrayOffset().(Literal).getValue()="1"
				)
				and obj_2.getTarget().getName()="aux_dev"
			)
			and obj_1.getTarget().getName()="id"
		)
		and obj_0.getTarget().hasName("ida_free")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("ida")
	)
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, ExprStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getArgument(1) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				exists(ArrayExpr obj_3 | obj_3=obj_2.getQualifier() |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getArrayBase() |
						obj_4.getTarget().getName()="aux_device_wrapper"
						and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("aux_bus_device *")
					)
					and obj_3.getArrayOffset().(Literal).getValue()="0"
				)
				and obj_2.getTarget().getName()="aux_dev"
			)
			and obj_1.getTarget().getName()="id"
		)
		and obj_0.getTarget().hasName("ida_free")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("ida")
	)
	and target_3.getEnclosingFunction() = func
}

from Function func, ExprStmt target_2, ExprStmt target_3
where
not func_0(target_2, func)
and not func_1(target_3, func)
and func_2(func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
