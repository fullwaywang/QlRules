/**
 * @name linux-c90af1cced2f669a7b2304584be4ada495eaa0e5-__fib6_drop_pcpu_from
 * @id cpp/linux/c90af1cced2f669a7b2304584be4ada495eaa0e5/--fib6-drop-pcpu-from
 * @description linux-c90af1cced2f669a7b2304584be4ada495eaa0e5-net/ipv6/ip6_fib.c-__fib6_drop_pcpu_from CVE-2024-40905
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ForStmt target_5, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("rcu_read_lock")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_5.getLocation())
)
}

predicate func_1(Variable vppcpu_rt_914, ExprStmt target_6) {
exists(StmtExpr target_1 |
	exists(BlockStmt obj_0 | obj_0=target_1.getStmt() |
		exists(IfStmt obj_1 | obj_1=obj_0.getStmt(1) |
			exists(ExprStmt obj_2 | obj_2=obj_1.getThen() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
					exists(ValueFieldAccess obj_4 | obj_4=obj_3.getArgument(1) |
						obj_4.getTarget().getName()="__c"
						and obj_4.getQualifier().(VariableAccess).getType().hasName("(unnamed class/struct/union)")
					)
					and obj_3.getTarget().hasName("__read_once_size")
					and obj_3.getArgument(0).(VariableAccess).getTarget()=vppcpu_rt_914
					and obj_3.getArgument(2).(SizeofExprOperator).getValue()="8"
				)
			)
			and exists(ExprStmt obj_5 | obj_5=obj_1.getElse() |
				exists(FunctionCall obj_6 | obj_6=obj_5.getExpr() |
					exists(ValueFieldAccess obj_7 | obj_7=obj_6.getArgument(1) |
						obj_7.getTarget().getName()="__c"
						and obj_7.getQualifier().(VariableAccess).getType().hasName("(unnamed class/struct/union)")
					)
					and obj_6.getTarget().hasName("__read_once_size_nocheck")
					and obj_6.getArgument(0).(VariableAccess).getTarget()=vppcpu_rt_914
					and obj_6.getArgument(2).(SizeofExprOperator).getValue()="8"
				)
			)
			and obj_1.getCondition().(Literal).getValue()="1"
		)
		and exists(ExprStmt obj_8 | obj_8=obj_0.getStmt(3) |
			exists(ValueFieldAccess obj_9 | obj_9=obj_8.getExpr() |
				obj_9.getTarget().getName()="__val"
				and obj_9.getQualifier().(VariableAccess).getType().hasName("(unnamed class/struct/union)")
			)
		)
		and obj_0.getStmt(2).(DoStmt).getCondition().(Literal).getValue()="0"
	)
	and exists(AssignExpr obj_10 | obj_10=target_1.getParent() |
		obj_10.getRValue() = target_1
		and obj_10.getLValue().(VariableAccess).getTarget().getType().hasName("rt6_info *")
	)
	and target_6.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_1.getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_2(Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getFollowingStmt() instanceof ReturnStmt
)
}

predicate func_3(Variable vppcpu_rt_914, VariableAccess target_3) {
	target_3.getTarget()=vppcpu_rt_914
}

predicate func_4(Variable vppcpu_rt_914, PointerDereferenceExpr target_4) {
	exists(AssignExpr obj_0 | obj_0=target_4.getParent() |
		obj_0.getRValue() = target_4
		and obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("rt6_info *")
	)
	and target_4.getOperand().(VariableAccess).getTarget()=vppcpu_rt_914
}

predicate func_5(Variable vppcpu_rt_914, ForStmt target_5) {
	exists(ExprStmt obj_0 | obj_0=target_5.getInitialization() |
		exists(AssignExpr obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getLValue().(VariableAccess).getTarget().getType().hasName("int")
			and obj_1.getRValue().(UnaryMinusExpr).getValue()="-1"
		)
	)
	and exists(CommaExpr obj_2 | obj_2=target_5.getCondition() |
		exists(AssignExpr obj_3 | obj_3=obj_2.getLeftOperand() |
			exists(FunctionCall obj_4 | obj_4=obj_3.getRValue() |
				obj_4.getTarget().hasName("cpumask_next")
				and obj_4.getArgument(0).(VariableAccess).getTarget().getType().hasName("int")
				and obj_4.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("cpumask")
			)
			and obj_3.getLValue().(VariableAccess).getTarget().getType().hasName("int")
		)
		and exists(RelationalOperation obj_5 | obj_5=obj_2.getRightOperand() |
			obj_5.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
			and obj_5.getGreaterOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
		)
	)
	and exists(BlockStmt obj_6 | obj_6=target_5.getStmt() |
		exists(ExprStmt obj_7 | obj_7=obj_6.getStmt(3) |
			exists(AssignExpr obj_8 | obj_8=obj_7.getExpr() |
				obj_8.getLValue().(VariableAccess).getTarget().getType().hasName("rt6_info *")
				and obj_8.getRValue() instanceof PointerDereferenceExpr
			)
		)
		and exists(IfStmt obj_9 | obj_9=obj_6.getStmt(4) |
			exists(LogicalAndExpr obj_10 | obj_10=obj_9.getCondition() |
				obj_10.getLeftOperand().(VariableAccess).getTarget().getType().hasName("rt6_info *")
				and obj_10.getRightOperand().(EqualityOperation).getRightOperand().(VariableAccess).getTarget().getType().hasName("const fib6_info *")
			)
			and exists(BlockStmt obj_11 | obj_11=obj_9.getThen() |
				exists(ExprStmt obj_12 | obj_12=obj_11.getStmt(2) |
					exists(FunctionCall obj_13 | obj_13=obj_12.getExpr() |
						obj_13.getTarget().hasName("fib6_info_release")
						and obj_13.getArgument(0).(VariableAccess).getTarget().getType().hasName("fib6_info *")
					)
				)
				and obj_11.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("fib6_info *")
			)
		)
		and obj_6.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vppcpu_rt_914
	)
}

predicate func_6(Variable vppcpu_rt_914, ExprStmt target_6) {
	exists(AssignExpr obj_0 | obj_0=target_6.getExpr() |
		obj_0.getLValue().(VariableAccess).getTarget()=vppcpu_rt_914
		and obj_0.getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(DoStmt).getCondition().(Literal).getValue()="0"
	)
}

from Function func, Variable vppcpu_rt_914, VariableAccess target_3, PointerDereferenceExpr target_4, ForStmt target_5, ExprStmt target_6
where
not func_0(target_5, func)
and not func_1(vppcpu_rt_914, target_6)
and not func_2(func)
and func_3(vppcpu_rt_914, target_3)
and func_4(vppcpu_rt_914, target_4)
and func_5(vppcpu_rt_914, target_5)
and func_6(vppcpu_rt_914, target_6)
and vppcpu_rt_914.getType().hasName("rt6_info **")
and vppcpu_rt_914.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
