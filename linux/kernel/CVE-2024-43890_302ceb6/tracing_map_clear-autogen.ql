/**
 * @name linux-302ceb625d7b990db205a15e371f9a71238de91c-tracing_map_clear
 * @id cpp/linux/302ceb625d7b990db205a15e371f9a71238de91c/tracing-map-clear
 * @description linux-302ceb625d7b990db205a15e371f9a71238de91c-kernel/trace/tracing_map.c-tracing_map_clear CVE-2024-43890
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
	target_0.getValue()="1"
	and not target_0.getValue()="0"
	and target_0.getParent().(UnaryMinusExpr).getParent().(FunctionCall).getArgument(1) instanceof UnaryMinusExpr
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, UnaryMinusExpr target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getParent() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				exists(AddressOfExpr obj_3 | obj_3=obj_2.getArgument(0) |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getOperand() |
						obj_4.getTarget().getName()="next_elt"
						and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("tracing_map *")
					)
				)
				and obj_2.getTarget().hasName("atomic_set")
			)
		)
	)
	and target_1.getValue()="-1"
	and target_1.getEnclosingFunction() = func
}

from Function func, Literal target_0, UnaryMinusExpr target_1
where
func_0(func, target_0)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
