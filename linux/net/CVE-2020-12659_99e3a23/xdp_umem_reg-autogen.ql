/**
 * @name linux-99e3a236dd43d06c65af0a2ef9cb44306aef6e02-xdp_umem_reg
 * @id cpp/linux/99e3a236dd43d06c65af0a2ef9cb44306aef6e02/xdp-umem-reg
 * @description linux-99e3a236dd43d06c65af0a2ef9cb44306aef6e02-net/xdp/xdp_umem.c-xdp_umem_reg CVE-2020-12659
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vchunk_size_343, Variable vheadroom_343, ReturnStmt target_7, ExprStmt target_8, ExprStmt target_9) {
exists(RelationalOperation target_0 |
	 (target_0 instanceof GEExpr or target_0 instanceof LEExpr)
	and target_0.getGreaterOperand().(VariableAccess).getTarget()=vheadroom_343
	and target_0.getLesserOperand().(SubExpr).getLeftOperand().(VariableAccess).getTarget()=vchunk_size_343
	and target_0.getLesserOperand().(SubExpr).getRightOperand().(Literal).getValue()="256"
	and target_0.getParent().(IfStmt).getThen()=target_7
	and target_0.getLesserOperand().(SubExpr).getLeftOperand().(VariableAccess).getLocation().isBefore(target_8.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getElse().(ComplementExpr).getOperand().(SubExpr).getLeftOperand().(VariableAccess).getLocation())
	and target_0.getGreaterOperand().(VariableAccess).getLocation().isBefore(target_9.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation()))
}

predicate func_1(Variable vchunk_size_343, VariableAccess target_1) {
	target_1.getTarget()=vchunk_size_343
}

predicate func_2(Variable vheadroom_343, VariableAccess target_2) {
	target_2.getTarget()=vheadroom_343
}

predicate func_4(Variable vchunk_size_343, Variable vheadroom_343, Variable vsize_chk_346, Function func, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsize_chk_346
	and target_4.getExpr().(AssignExpr).getRValue().(SubExpr).getLeftOperand().(SubExpr).getLeftOperand().(VariableAccess).getTarget()=vchunk_size_343
	and target_4.getExpr().(AssignExpr).getRValue().(SubExpr).getLeftOperand().(SubExpr).getRightOperand().(VariableAccess).getTarget()=vheadroom_343
	and target_4.getExpr().(AssignExpr).getRValue().(SubExpr).getRightOperand().(Literal).getValue()="256"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
}

/*predicate func_5(Variable vchunk_size_343, Variable vheadroom_343, ExprStmt target_8, ExprStmt target_9, SubExpr target_5) {
	target_5.getLeftOperand().(VariableAccess).getTarget()=vchunk_size_343
	and target_5.getRightOperand().(VariableAccess).getTarget()=vheadroom_343
	and target_5.getLeftOperand().(VariableAccess).getLocation().isBefore(target_8.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getElse().(ComplementExpr).getOperand().(SubExpr).getLeftOperand().(VariableAccess).getLocation())
	and target_5.getRightOperand().(VariableAccess).getLocation().isBefore(target_9.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation())
}

*/
predicate func_6(Variable vsize_chk_346, ReturnStmt target_7, RelationalOperation target_6) {
	 (target_6 instanceof GTExpr or target_6 instanceof LTExpr)
	and target_6.getLesserOperand().(VariableAccess).getTarget()=vsize_chk_346
	and target_6.getGreaterOperand().(Literal).getValue()="0"
	and target_6.getParent().(IfStmt).getThen()=target_7
}

predicate func_7(RelationalOperation target_6, Function func, ReturnStmt target_7) {
	target_7.getExpr().(UnaryMinusExpr).getValue()="-22"
	and target_7.getParent().(IfStmt).getCondition()=target_6
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Variable vchunk_size_343, ExprStmt target_8) {
	target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="chunk_mask"
	and target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("xdp_umem *")
	and target_8.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(VariableAccess).getTarget().getType().hasName("bool")
	and target_8.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getThen().(SubExpr).getValue()="281474976710655"
	and target_8.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getElse().(ComplementExpr).getOperand().(SubExpr).getLeftOperand().(VariableAccess).getTarget()=vchunk_size_343
	and target_8.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getElse().(ComplementExpr).getOperand().(SubExpr).getRightOperand().(Literal).getValue()="1"
}

predicate func_9(Variable vheadroom_343, ExprStmt target_9) {
	target_9.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="headroom"
	and target_9.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("xdp_umem *")
	and target_9.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vheadroom_343
}

from Function func, Variable vchunk_size_343, Variable vheadroom_343, Variable vsize_chk_346, VariableAccess target_1, VariableAccess target_2, ExprStmt target_4, RelationalOperation target_6, ReturnStmt target_7, ExprStmt target_8, ExprStmt target_9
where
not func_0(vchunk_size_343, vheadroom_343, target_7, target_8, target_9)
and func_1(vchunk_size_343, target_1)
and func_2(vheadroom_343, target_2)
and func_4(vchunk_size_343, vheadroom_343, vsize_chk_346, func, target_4)
and func_6(vsize_chk_346, target_7, target_6)
and func_7(target_6, func, target_7)
and func_8(vchunk_size_343, target_8)
and func_9(vheadroom_343, target_9)
and vchunk_size_343.getType().hasName("u32")
and vheadroom_343.getType().hasName("u32")
and vsize_chk_346.getType().hasName("int")
and vchunk_size_343.(LocalVariable).getFunction() = func
and vheadroom_343.(LocalVariable).getFunction() = func
and vsize_chk_346.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
