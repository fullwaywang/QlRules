/**
 * @name linux-0d8a2d287c8a394c0d4653f0c6c7be4c688e5a74-tcf_idr_check_alloc
 * @id cpp/linux/0d8a2d287c8a394c0d4653f0c6c7be4c688e5a74/tcf-idr-check-alloc
 * @description linux-0d8a2d287c8a394c0d4653f0c6c7be4c688e5a74-net/sched/act_api.c-tcf_idr_check_alloc CVE-2024-40995
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(FunctionCall target_2, Function func) {
exists(ReturnStmt target_0 |
	exists(BlockStmt obj_0 | obj_0=target_0.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(1)=target_0
			and obj_1.getCondition()=target_2
		)
	)
	and target_0.getExpr().(UnaryMinusExpr).getValue()="-11"
	and target_0.getEnclosingFunction() = func
)
}

predicate func_1(FunctionCall target_2, Function func, GotoStmt target_1) {
	target_1.getName() ="again"
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, FunctionCall target_2) {
	target_2.getTarget().hasName("IS_ERR")
	and target_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("tc_action *")
	and target_2.getEnclosingFunction() = func
}

from Function func, GotoStmt target_1, FunctionCall target_2
where
not func_0(target_2, func)
and func_1(target_2, func, target_1)
and func_2(func, target_2)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
