/**
 * @name linux-88c795491bf45a8c08a0f94c9ca4f13722e51013-__nft_release_table
 * @id cpp/linux/88c795491bf45a8c08a0f94c9ca4f13722e51013/--nft-release-table
 * @description linux-88c795491bf45a8c08a0f94c9ca4f13722e51013-net/netfilter/nf_tables_api.c-__nft_release_table CVE-2022-48935
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vnet_7850, Parameter vtable_7850, Variable vflowtable_7852, ExprStmt target_1, ExprStmt target_2, Function func) {
exists(ForStmt target_0 |
	exists(ExprStmt obj_0 | obj_0=target_0.getInitialization() |
		exists(AssignExpr obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getLValue().(VariableAccess).getTarget()=vflowtable_7852
			and obj_1.getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(DoStmt).getCondition().(Literal).getValue()="0"
		)
	)
	and exists(NotExpr obj_2 | obj_2=target_0.getCondition() |
		exists(EqualityOperation obj_3 | obj_3=obj_2.getOperand() |
			exists(AddressOfExpr obj_4 | obj_4=obj_3.getLeftOperand() |
				exists(PointerFieldAccess obj_5 | obj_5=obj_4.getOperand() |
					obj_5.getTarget().getName()="list"
					and obj_5.getQualifier().(VariableAccess).getTarget()=vflowtable_7852
				)
			)
			and exists(AddressOfExpr obj_6 | obj_6=obj_3.getRightOperand() |
				exists(PointerFieldAccess obj_7 | obj_7=obj_6.getOperand() |
					obj_7.getTarget().getName()="flowtables"
					and obj_7.getQualifier().(VariableAccess).getTarget()=vtable_7850
				)
			)
		)
	)
	and exists(AssignExpr obj_8 | obj_8=target_0.getUpdate() |
		exists(StmtExpr obj_9 | obj_9=obj_8.getRValue() |
			exists(BlockStmt obj_10 | obj_10=obj_9.getStmt() |
				obj_10.getStmt(1).(DoStmt).getCondition().(Literal).getValue()="0"
				and obj_10.getStmt(2).(ExprStmt).getExpr().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getType().hasName("void *")
			)
		)
		and obj_8.getLValue().(VariableAccess).getTarget()=vflowtable_7852
	)
	and exists(ExprStmt obj_11 | obj_11=target_0.getStmt() |
		exists(FunctionCall obj_12 | obj_12=obj_11.getExpr() |
			obj_12.getTarget().hasName("nft_unregister_flowtable_net_hooks")
			and obj_12.getArgument(0).(VariableAccess).getTarget()=vnet_7850
			and obj_12.getArgument(1).(VariableAccess).getTarget()=vflowtable_7852
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getStmt().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_1(Parameter vtable_7850, ExprStmt target_1) {
	exists(AssignExpr obj_0 | obj_0=target_1.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="table"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("nft_ctx")
		)
		and obj_0.getRValue().(VariableAccess).getTarget()=vtable_7850
	)
}

predicate func_2(Parameter vnet_7850, Parameter vtable_7850, ExprStmt target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		obj_0.getTarget().hasName("nf_tables_unregister_hook")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vnet_7850
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vtable_7850
		and obj_0.getArgument(2).(VariableAccess).getTarget().getType().hasName("nft_chain *")
	)
}

from Function func, Parameter vnet_7850, Parameter vtable_7850, Variable vflowtable_7852, ExprStmt target_1, ExprStmt target_2
where
not func_0(vnet_7850, vtable_7850, vflowtable_7852, target_1, target_2, func)
and func_1(vtable_7850, target_1)
and func_2(vnet_7850, vtable_7850, target_2)
and vnet_7850.getType().hasName("net *")
and vtable_7850.getType().hasName("nft_table *")
and vflowtable_7852.getType().hasName("nft_flowtable *")
and vnet_7850.getFunction() = func
and vtable_7850.getFunction() = func
and vflowtable_7852.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
