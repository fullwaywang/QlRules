/**
 * @name linux-71993e62a47dabddf10302807d6aa260455503f4-vmsplice_to_pipe
 * @id cpp/linux/71993e62a47dabddf10302807d6aa260455503f4/vmsplice-to-pipe
 * @description linux-71993e62a47dabddf10302807d6aa260455503f4-fs/splice.c-vmsplice_to_pipe CVE-2010-4256
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
		target_0.getTarget().hasName("pipe_info")
		and not target_0.getTarget().hasName("get_pipe_info")
		and target_0.getArgument(0).(PointerFieldAccess).getTarget().getName()="d_inode"
		and target_0.getArgument(0).(PointerFieldAccess).getQualifier() instanceof ValueFieldAccess
		and target_0.getParent().(AssignExpr).getRValue() = target_0
		and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("pipe_inode_info *")
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Parameter vfile_1630, VariableAccess target_1) {
		target_1.getTarget()=vfile_1630
		and target_1.getParent().(PointerFieldAccess).getParent().(ValueFieldAccess).getParent().(PointerFieldAccess).getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_2(Parameter vfile_1630, ValueFieldAccess target_2) {
		target_2.getTarget().getName()="dentry"
		and target_2.getQualifier().(PointerFieldAccess).getTarget().getName()="f_path"
		and target_2.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vfile_1630
		and target_2.getParent().(PointerFieldAccess).getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

from Function func, Parameter vfile_1630, FunctionCall target_0, VariableAccess target_1, ValueFieldAccess target_2
where
func_0(func, target_0)
and func_1(vfile_1630, target_1)
and func_2(vfile_1630, target_2)
and vfile_1630.getType().hasName("file *")
and vfile_1630.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
