/**
 * @name linux-eda60520cfe3aba9f088c68ebd5bcbca9fc6ac3c-dfx_regs_uninit
 * @id cpp/linux/eda60520cfe3aba9f088c68ebd5bcbca9fc6ac3c/dfx-regs-uninit
 * @description linux-eda60520cfe3aba9f088c68ebd5bcbca9fc6ac3c-drivers/crypto/hisilicon/debugfs.c-dfx_regs_uninit CVE-2024-42147
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vdregs_743, ForStmt target_2, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vdregs_743
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
)
}

predicate func_1(Parameter vdregs_743, Variable vi_745, ExprStmt target_3, ValueFieldAccess target_4, PostfixIncrExpr target_5) {
exists(IfStmt target_1 |
	exists(NotExpr obj_0 | obj_0=target_1.getCondition() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			exists(ArrayExpr obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getArrayBase().(VariableAccess).getTarget()=vdregs_743
				and obj_2.getArrayOffset().(VariableAccess).getTarget()=vi_745
			)
			and obj_1.getTarget().getName()="regs"
		)
	)
	and target_1.getLocation().isBefore(target_3.getLocation())
	and target_1.getCondition().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getLocation().isBefore(target_4.getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getLocation())
	and target_5.getOperand().(VariableAccess).getLocation().isBefore(target_1.getCondition().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation())
)
}

predicate func_2(Parameter vdregs_743, Variable vi_745, ForStmt target_2) {
	exists(ExprStmt obj_0 | obj_0=target_2.getInitialization() |
		exists(AssignExpr obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getLValue().(VariableAccess).getTarget()=vi_745
			and obj_1.getRValue().(Literal).getValue()="0"
		)
	)
	and exists(RelationalOperation obj_2 | obj_2=target_2.getCondition() |
		obj_2.getLesserOperand().(VariableAccess).getTarget()=vi_745
		and obj_2.getGreaterOperand().(VariableAccess).getTarget().getType().hasName("int")
	)
	and exists(BlockStmt obj_3 | obj_3=target_2.getStmt() |
		exists(ExprStmt obj_4 | obj_4=obj_3.getStmt(0) |
			exists(FunctionCall obj_5 | obj_5=obj_4.getExpr() |
				exists(ValueFieldAccess obj_6 | obj_6=obj_5.getArgument(0) |
					exists(ArrayExpr obj_7 | obj_7=obj_6.getQualifier() |
						obj_7.getArrayBase().(VariableAccess).getTarget()=vdregs_743
						and obj_7.getArrayOffset().(VariableAccess).getTarget()=vi_745
					)
					and obj_6.getTarget().getName()="regs"
				)
				and obj_5.getTarget().hasName("kfree")
			)
		)
		and exists(ExprStmt obj_8 | obj_8=obj_3.getStmt(1) |
			exists(AssignExpr obj_9 | obj_9=obj_8.getExpr() |
				exists(ValueFieldAccess obj_10 | obj_10=obj_9.getLValue() |
					exists(ArrayExpr obj_11 | obj_11=obj_10.getQualifier() |
						obj_11.getArrayBase().(VariableAccess).getTarget()=vdregs_743
						and obj_11.getArrayOffset().(VariableAccess).getTarget()=vi_745
					)
					and obj_10.getTarget().getName()="regs"
				)
				and obj_9.getRValue().(Literal).getValue()="0"
			)
		)
	)
	and target_2.getUpdate().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget()=vi_745
}

predicate func_3(Parameter vdregs_743, Variable vi_745, ExprStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			exists(ArrayExpr obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getArrayBase().(VariableAccess).getTarget()=vdregs_743
				and obj_2.getArrayOffset().(VariableAccess).getTarget()=vi_745
			)
			and obj_1.getTarget().getName()="regs"
		)
		and obj_0.getTarget().hasName("kfree")
	)
}

predicate func_4(Parameter vdregs_743, Variable vi_745, ValueFieldAccess target_4) {
	exists(ArrayExpr obj_0 | obj_0=target_4.getQualifier() |
		obj_0.getArrayBase().(VariableAccess).getTarget()=vdregs_743
		and obj_0.getArrayOffset().(VariableAccess).getTarget()=vi_745
	)
	and target_4.getTarget().getName()="regs"
}

predicate func_5(Variable vi_745, PostfixIncrExpr target_5) {
	target_5.getOperand().(VariableAccess).getTarget()=vi_745
}

from Function func, Parameter vdregs_743, Variable vi_745, ForStmt target_2, ExprStmt target_3, ValueFieldAccess target_4, PostfixIncrExpr target_5
where
not func_0(vdregs_743, target_2, func)
and not func_1(vdregs_743, vi_745, target_3, target_4, target_5)
and func_2(vdregs_743, vi_745, target_2)
and func_3(vdregs_743, vi_745, target_3)
and func_4(vdregs_743, vi_745, target_4)
and func_5(vi_745, target_5)
and vdregs_743.getType().hasName("dfx_diff_registers *")
and vi_745.getType().hasName("int")
and vdregs_743.getFunction() = func
and vi_745.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
