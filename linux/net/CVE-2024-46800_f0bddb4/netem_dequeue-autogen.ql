/**
 * @name linux-f0bddb4de043399f16d1969dad5ee5b984a64e7b-netem_dequeue
 * @id cpp/linux/f0bddb4de043399f16d1969dad5ee5b984a64e7b/netem-dequeue
 * @description linux-f0bddb4de043399f16d1969dad5ee5b984a64e7b-net/sched/sch_netem.c-netem_dequeue CVE-2024-46800
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(LogicalAndExpr target_4, Function func) {
exists(IfStmt target_0 |
	exists(BlockStmt obj_0 | obj_0=target_0.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(0)=target_0
			and obj_1.getCondition()=target_4
		)
	)
	and target_0.getCondition() instanceof ConditionalExpr
	and target_0.getThen() instanceof ExprStmt
	and target_0.getEnclosingFunction() = func
)
}

predicate func_1(Variable verr_696, BlockStmt target_5, EqualityOperation target_1) {
	exists(LogicalAndExpr obj_0 | obj_0=target_1.getParent() |
		exists(ConditionalExpr obj_1 | obj_1=obj_0.getRightOperand() |
			obj_1.getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=verr_696
			and obj_1.getThen().(Literal).getValue()="0"
			and obj_1.getElse().(Literal).getValue()="1"
		)
		and obj_0.getParent().(IfStmt).getThen()=target_5
	)
	and target_1.getLeftOperand().(VariableAccess).getTarget()=verr_696
	and target_1.getRightOperand().(Literal).getValue()="0"
}

/*predicate func_2(Variable verr_696, BlockStmt target_5, ConditionalExpr target_2) {
	exists(LogicalAndExpr obj_0 | obj_0=target_2.getParent() |
		exists(EqualityOperation obj_1 | obj_1=obj_0.getLeftOperand() |
			obj_1.getLeftOperand().(VariableAccess).getTarget()=verr_696
			and obj_1.getRightOperand().(Literal).getValue()="0"
		)
		and obj_0.getParent().(IfStmt).getThen()=target_5
	)
	and target_2.getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=verr_696
	and target_2.getThen().(Literal).getValue()="0"
	and target_2.getElse().(Literal).getValue()="1"
}

*/
predicate func_3(Parameter vsch_639, LogicalAndExpr target_4, ExprStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		obj_0.getTarget().hasName("qdisc_qstats_drop")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vsch_639
	)
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_4(BlockStmt target_5, Function func, LogicalAndExpr target_4) {
	target_4.getLeftOperand() instanceof EqualityOperation
	and target_4.getRightOperand() instanceof ConditionalExpr
	and target_4.getParent().(IfStmt).getThen()=target_5
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Parameter vsch_639, BlockStmt target_5) {
	exists(ExprStmt obj_0 | obj_0=target_5.getStmt(1) |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("qdisc_tree_reduce_backlog")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vsch_639
			and obj_1.getArgument(1).(Literal).getValue()="1"
			and obj_1.getArgument(2).(VariableAccess).getTarget().getType().hasName("unsigned int")
		)
	)
	and target_5.getStmt(0) instanceof ExprStmt
}

from Function func, Variable verr_696, Parameter vsch_639, EqualityOperation target_1, ExprStmt target_3, LogicalAndExpr target_4, BlockStmt target_5
where
not func_0(target_4, func)
and func_1(verr_696, target_5, target_1)
and func_3(vsch_639, target_4, target_3)
and func_4(target_5, func, target_4)
and func_5(vsch_639, target_5)
and verr_696.getType().hasName("int")
and vsch_639.getType().hasName("Qdisc *")
and verr_696.(LocalVariable).getFunction() = func
and vsch_639.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
