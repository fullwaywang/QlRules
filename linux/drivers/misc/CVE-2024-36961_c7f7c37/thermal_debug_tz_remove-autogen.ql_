/**
 * @name linux-c7f7c37271787a7f77d7eedc132b0b419a76b4c8-thermal_debug_tz_remove
 * @id cpp/linux/c7f7c37271787a7f77d7eedc132b0b419a76b4c8/thermal-debug-tz-remove
 * @description linux-c7f7c37271787a7f77d7eedc132b0b419a76b4c8-drivers/thermal/thermal_debugfs.c-thermal_debug_tz_remove CVE-2024-36961
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vtz_826, ForStmt target_8, ExprStmt target_0) {
	exists(AssignExpr obj_0 | obj_0=target_0.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="debugfs"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vtz_826
		)
		and obj_0.getRValue().(Literal).getValue()="0"
	)
	and target_8.getLocation().isBefore(target_0.getLocation())
}

predicate func_1(Parameter vtz_826, IfStmt target_9, Function func) {
exists(ExprStmt target_1 |
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="lock"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vtz_826
			)
		)
		and obj_0.getTarget().hasName("mutex_lock_nested")
		and obj_0.getArgument(1).(Literal).getValue()="0"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_9.getLocation())
)
}

predicate func_2(Variable vthermal_dbg_828, Parameter vtz_826, IfStmt target_9, NotExpr target_11, Function func) {
exists(ExprStmt target_2 |
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().getName()="debugfs"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vtz_826
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vthermal_dbg_828
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_9.getLocation())
	and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_11.getOperand().(VariableAccess).getLocation())
)
}

predicate func_3(Parameter vtz_826, NotExpr target_11) {
exists(ExprStmt target_3 |
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="lock"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vtz_826
			)
		)
		and obj_0.getTarget().hasName("mutex_unlock")
	)
	and exists(BlockStmt obj_3 | obj_3=target_3.getParent() |
		exists(IfStmt obj_4 | obj_4=obj_3.getParent() |
			obj_4.getThen().(BlockStmt).getStmt(0)=target_3
			and obj_4.getCondition()=target_11
		)
	)
)
}

predicate func_4(Parameter vtz_826, ExprStmt target_12, ExprStmt target_0, Function func) {
exists(ExprStmt target_4 |
	exists(FunctionCall obj_0 | obj_0=target_4.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="lock"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vtz_826
			)
		)
		and obj_0.getTarget().hasName("mutex_unlock")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
	and target_4.getLocation().isBefore(target_12.getLocation())
	and target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_5(Parameter vtz_826, PointerFieldAccess target_5) {
	target_5.getTarget().getName()="debugfs"
	and target_5.getQualifier().(VariableAccess).getTarget()=vtz_826
}

predicate func_6(NotExpr target_11, Function func, ReturnStmt target_6) {
	target_6.getParent().(IfStmt).getCondition()=target_11
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Parameter vtz_826, Initializer target_7) {
	exists(PointerFieldAccess obj_0 | obj_0=target_7.getExpr() |
		obj_0.getTarget().getName()="debugfs"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vtz_826
	)
}

predicate func_8(Function func, ForStmt target_8) {
	exists(ExprStmt obj_0 | obj_0=target_8.getInitialization() |
		exists(CommaExpr obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getLeftOperand().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("tz_episode *")
			and obj_1.getRightOperand().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("tz_episode *")
		)
	)
	and exists(NotExpr obj_2 | obj_2=target_8.getCondition() |
		exists(FunctionCall obj_3 | obj_3=obj_2.getOperand() |
			exists(AddressOfExpr obj_4 | obj_4=obj_3.getArgument(0) |
				exists(PointerFieldAccess obj_5 | obj_5=obj_4.getOperand() |
					obj_5.getTarget().getName()="node"
					and obj_5.getQualifier().(VariableAccess).getTarget().getType().hasName("tz_episode *")
				)
			)
			and exists(AddressOfExpr obj_6 | obj_6=obj_3.getArgument(1) |
				exists(PointerFieldAccess obj_7 | obj_7=obj_6.getOperand() |
					obj_7.getTarget().getName()="tz_episodes"
					and obj_7.getQualifier().(VariableAccess).getTarget().getType().hasName("tz_debugfs *")
				)
			)
			and obj_3.getTarget().hasName("list_is_head")
		)
	)
	and exists(CommaExpr obj_8 | obj_8=target_8.getUpdate() |
		exists(AssignExpr obj_9 | obj_9=obj_8.getLeftOperand() |
			obj_9.getLValue().(VariableAccess).getTarget().getType().hasName("tz_episode *")
			and obj_9.getRValue().(VariableAccess).getTarget().getType().hasName("tz_episode *")
		)
		and obj_8.getRightOperand().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("tz_episode *")
	)
	and exists(BlockStmt obj_10 | obj_10=target_8.getStmt() |
		exists(ExprStmt obj_11 | obj_11=obj_10.getStmt(0) |
			exists(FunctionCall obj_12 | obj_12=obj_11.getExpr() |
				exists(AddressOfExpr obj_13 | obj_13=obj_12.getArgument(0) |
					exists(PointerFieldAccess obj_14 | obj_14=obj_13.getOperand() |
						obj_14.getTarget().getName()="node"
						and obj_14.getQualifier().(VariableAccess).getTarget().getType().hasName("tz_episode *")
					)
				)
				and obj_12.getTarget().hasName("list_del")
			)
		)
		and exists(ExprStmt obj_15 | obj_15=obj_10.getStmt(1) |
			exists(FunctionCall obj_16 | obj_16=obj_15.getExpr() |
				obj_16.getTarget().hasName("kfree")
				and obj_16.getArgument(0).(VariableAccess).getTarget().getType().hasName("tz_episode *")
			)
		)
	)
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Variable vthermal_dbg_828, IfStmt target_9) {
	target_9.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vthermal_dbg_828
	and target_9.getThen() instanceof ReturnStmt
}

predicate func_11(Variable vthermal_dbg_828, NotExpr target_11) {
	target_11.getOperand().(VariableAccess).getTarget()=vthermal_dbg_828
}

predicate func_12(Variable vthermal_dbg_828, ExprStmt target_12) {
	exists(FunctionCall obj_0 | obj_0=target_12.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="lock"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vthermal_dbg_828
			)
		)
		and obj_0.getTarget().hasName("mutex_lock_nested")
		and obj_0.getArgument(1).(Literal).getValue()="0"
	)
}

from Function func, Variable vthermal_dbg_828, Parameter vtz_826, ExprStmt target_0, PointerFieldAccess target_5, ReturnStmt target_6, Initializer target_7, ForStmt target_8, IfStmt target_9, NotExpr target_11, ExprStmt target_12
where
func_0(vtz_826, target_8, target_0)
and not func_1(vtz_826, target_9, func)
and not func_2(vthermal_dbg_828, vtz_826, target_9, target_11, func)
and not func_3(vtz_826, target_11)
and not func_4(vtz_826, target_12, target_0, func)
and func_5(vtz_826, target_5)
and func_6(target_11, func, target_6)
and func_7(vtz_826, target_7)
and func_8(func, target_8)
and func_9(vthermal_dbg_828, target_9)
and func_11(vthermal_dbg_828, target_11)
and func_12(vthermal_dbg_828, target_12)
and vthermal_dbg_828.getType().hasName("thermal_debugfs *")
and vtz_826.getType().hasName("thermal_zone_device *")
and vthermal_dbg_828.(LocalVariable).getFunction() = func
and vtz_826.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
