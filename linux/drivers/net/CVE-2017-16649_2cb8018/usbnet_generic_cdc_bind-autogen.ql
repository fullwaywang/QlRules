/**
 * @name linux-2cb80187ba065d7decad7c6614e35e07aec8a974-usbnet_generic_cdc_bind
 * @id cpp/linux/2cb80187ba065d7decad7c6614e35e07aec8a974/usbnet-generic-cdc-bind
 * @description linux-2cb80187ba065d7decad7c6614e35e07aec8a974-drivers/net/usb/cdc_ether.c-usbnet_generic_cdc_bind CVE-2017-16649
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vinfo_118, BlockStmt target_2, PointerFieldAccess target_3, ExprStmt target_4) {
	exists(LogicalAndExpr target_0 |
		target_0.getAnOperand() instanceof ValueFieldAccess
		and target_0.getAnOperand().(PointerFieldAccess).getTarget().getName()="wMaxSegmentSize"
		and target_0.getAnOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ether"
		and target_0.getAnOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinfo_118
		and target_0.getParent().(IfStmt).getThen()=target_2
		and target_3.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getAnOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_0.getAnOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vheader_123, ValueFieldAccess target_1) {
		target_1.getTarget().getName()="usb_cdc_ether_desc"
		and target_1.getQualifier().(VariableAccess).getTarget()=vheader_123
}

predicate func_2(Variable vinfo_118, BlockStmt target_2) {
		target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="hard_mtu"
		and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("usbnet *")
		and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="wMaxSegmentSize"
		and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ether"
		and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinfo_118
}

predicate func_3(Variable vinfo_118, PointerFieldAccess target_3) {
		target_3.getTarget().getName()="cur_altsetting"
		and target_3.getQualifier().(PointerFieldAccess).getTarget().getName()="data"
		and target_3.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinfo_118
}

predicate func_4(Variable vinfo_118, ExprStmt target_4) {
		target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="hard_mtu"
		and target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("usbnet *")
		and target_4.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="wMaxSegmentSize"
		and target_4.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ether"
		and target_4.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinfo_118
}

from Function func, Variable vinfo_118, Variable vheader_123, ValueFieldAccess target_1, BlockStmt target_2, PointerFieldAccess target_3, ExprStmt target_4
where
not func_0(vinfo_118, target_2, target_3, target_4)
and func_1(vheader_123, target_1)
and func_2(vinfo_118, target_2)
and func_3(vinfo_118, target_3)
and func_4(vinfo_118, target_4)
and vinfo_118.getType().hasName("cdc_state *")
and vheader_123.getType().hasName("usb_cdc_parsed_header")
and vinfo_118.(LocalVariable).getFunction() = func
and vheader_123.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
