/**
 * @name linux-b4b814fec1a5a849383f7b3886b654a13abbda7d-alloc_sgtable
 * @id cpp/linux/b4b814fec1a5a849383f7b3886b654a13abbda7d/alloc-sgtable
 * @description linux-b4b814fec1a5a849383f7b3886b654a13abbda7d-drivers/net/wireless/intel/iwlwifi/fw/dbg.c-alloc_sgtable CVE-2019-19058
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vtable_631, NotExpr target_1, RelationalOperation target_2, ReturnStmt target_3) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("kfree")
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vtable_631
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_2.getGreaterOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(VariableAccess).getLocation()))
}

predicate func_1(Function func, NotExpr target_1) {
		target_1.getOperand().(VariableAccess).getTarget().getType().hasName("page *")
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vtable_631, BlockStmt target_4, RelationalOperation target_2) {
		 (target_2 instanceof GTExpr or target_2 instanceof LTExpr)
		and target_2.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getGreaterOperand().(FunctionCall).getTarget().hasName("sg_nents")
		and target_2.getGreaterOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vtable_631
		and target_2.getParent().(ForStmt).getStmt()=target_4
}

predicate func_3(Variable vtable_631, ReturnStmt target_3) {
		target_3.getExpr().(VariableAccess).getTarget()=vtable_631
}

predicate func_4(Function func, BlockStmt target_4) {
		target_4.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("page *")
		and target_4.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("sg_page")
		and target_4.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("scatterlist *")
		and target_4.getStmt(1).(IfStmt).getCondition().(VariableAccess).getTarget().getType().hasName("page *")
		and target_4.getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__free_pages")
		and target_4.getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("page *")
		and target_4.getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_4.getEnclosingFunction() = func
}

from Function func, Variable vtable_631, NotExpr target_1, RelationalOperation target_2, ReturnStmt target_3, BlockStmt target_4
where
not func_0(vtable_631, target_1, target_2, target_3)
and func_1(func, target_1)
and func_2(vtable_631, target_4, target_2)
and func_3(vtable_631, target_3)
and func_4(func, target_4)
and vtable_631.getType().hasName("scatterlist *")
and vtable_631.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
