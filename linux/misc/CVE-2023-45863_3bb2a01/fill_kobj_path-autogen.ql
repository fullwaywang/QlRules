/**
 * @name linux-3bb2a01caa813d3a1845d378bbe4169ef280d394-fill_kobj_path
 * @id cpp/linux/3bb2a01caa813d3a1845d378bbe4169ef280d394/fill-kobj-path
 * @description linux-3bb2a01caa813d3a1845d378bbe4169ef280d394-fill_kobj_path CVE-2023-45863
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, StringLiteral target_0) {
		target_0.getValue()="field \"path + length\" at lib/kobject.c:124"
		and not target_0.getValue()="field \"path + length\" at lib/kobject.c:126"
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Parameter vlength_115, ExprStmt target_3, PointerArithmeticOperation target_4) {
	exists(IfStmt target_1 |
		target_1.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vlength_115
		and target_1.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
		and target_1.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-22"
		and target_3.getExpr().(AssignSubExpr).getLValue().(VariableAccess).getLocation().isBefore(target_1.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation())
		and target_1.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_4.getAnOperand().(VariableAccess).getLocation()))
}

predicate func_3(Parameter vlength_115, ExprStmt target_3) {
		target_3.getExpr().(AssignSubExpr).getLValue().(VariableAccess).getTarget()=vlength_115
		and target_3.getExpr().(AssignSubExpr).getRValue().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_4(Parameter vlength_115, PointerArithmeticOperation target_4) {
		target_4.getAnOperand().(VariableAccess).getTarget().getType().hasName("char *")
		and target_4.getAnOperand().(VariableAccess).getTarget()=vlength_115
		and target_4.getParent().(FunctionCall).getParent().(Initializer).getExpr().(FunctionCall).getTarget().hasName("__builtin_object_size")
		and target_4.getParent().(FunctionCall).getParent().(Initializer).getExpr().(FunctionCall).getArgument(1) instanceof Literal
}

from Function func, Parameter vlength_115, StringLiteral target_0, ExprStmt target_3, PointerArithmeticOperation target_4
where
func_0(func, target_0)
and not func_1(vlength_115, target_3, target_4)
and func_3(vlength_115, target_3)
and func_4(vlength_115, target_4)
and vlength_115.getType().hasName("int")
and vlength_115.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
