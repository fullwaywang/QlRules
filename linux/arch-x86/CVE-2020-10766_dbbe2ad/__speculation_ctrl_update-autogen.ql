/**
 * @name linux-dbbe2ad02e9df26e372f38cc3e70dab9222c832e-__speculation_ctrl_update
 * @id cpp/linux/dbbe2ad02e9df26e372f38cc3e70dab9222c832e/--speculation-ctrl-update
 * @description linux-dbbe2ad02e9df26e372f38cc3e70dab9222c832e-arch/x86/kernel/process.c-__speculation_ctrl_update CVE-2020-10766
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vtif_diff_542, ConditionalExpr target_8, BitwiseAndExpr target_2) {
exists(IfStmt target_0 |
	target_0.getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vtif_diff_542
	and target_0.getCondition().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="32"
	and target_0.getThen() instanceof ExprStmt
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8
	and target_2.getLeftOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vtif_diff_542, Variable vupdmsr_544, ExprStmt target_9) {
exists(AssignOrExpr target_1 |
	target_1.getLValue().(VariableAccess).getTarget()=vupdmsr_544
	and target_1.getRValue().(NotExpr).getOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vtif_diff_542
	and target_1.getRValue().(NotExpr).getOperand().(NotExpr).getOperand().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="32"
	and target_1.getRValue().(NotExpr).getOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getLocation().isBefore(target_9.getExpr().(AssignOrExpr).getRValue().(NotExpr).getOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getLocation()))
}

predicate func_2(Variable vtif_diff_542, BlockStmt target_10, BitwiseAndExpr target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget()=vtif_diff_542
	and target_2.getRightOperand().(BinaryBitwiseOperation).getValue()="32"
	and target_2.getParent().(IfStmt).getThen()=target_10
}

predicate func_3(Variable vboot_cpu_data, BlockStmt target_11, ConditionalExpr target_3) {
	target_3.getCondition().(FunctionCall).getTarget().hasName("__builtin_constant_p")
	and target_3.getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_3.getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_3.getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("test_bit")
	and target_3.getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="441"
	and target_3.getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
	and target_3.getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_3.getThen().(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_3.getThen().(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_3.getThen().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("test_bit")
	and target_3.getThen().(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="441"
	and target_3.getThen().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
	and target_3.getThen().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_3.getThen().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vboot_cpu_data
	and target_3.getElse().(FunctionCall).getTarget().hasName("_static_cpu_has")
	and target_3.getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="441"
	and target_3.getParent().(IfStmt).getThen()=target_11
}

predicate func_4(Parameter vtifn_540, ConditionalExpr target_3, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("amd_set_ssb_virt_state")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vtifn_540
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
}

predicate func_5(Parameter vtifn_540, ConditionalExpr target_8, ExprStmt target_5) {
	target_5.getExpr().(FunctionCall).getTarget().hasName("amd_set_core_ssb_state")
	and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vtifn_540
	and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8
}

predicate func_6(Variable vupdmsr_544, VariableAccess target_6) {
	target_6.getTarget()=vupdmsr_544
	and target_6.getParent().(AssignExpr).getLValue() = target_6
	and target_6.getParent().(AssignExpr).getRValue() instanceof EnumConstantAccess
}

predicate func_7(Variable vupdmsr_544, AssignExpr target_7) {
	target_7.getLValue().(VariableAccess).getTarget()=vupdmsr_544
}

predicate func_8(Variable vboot_cpu_data, ConditionalExpr target_8) {
	target_8.getCondition().(FunctionCall).getTarget().hasName("__builtin_constant_p")
	and target_8.getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_8.getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_8.getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("test_bit")
	and target_8.getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="248"
	and target_8.getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
	and target_8.getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_8.getThen().(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_8.getThen().(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_8.getThen().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("test_bit")
	and target_8.getThen().(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="248"
	and target_8.getThen().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
	and target_8.getThen().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_8.getThen().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vboot_cpu_data
	and target_8.getElse().(FunctionCall).getTarget().hasName("_static_cpu_has")
	and target_8.getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="248"
}

predicate func_9(Variable vtif_diff_542, Variable vupdmsr_544, ExprStmt target_9) {
	target_9.getExpr().(AssignOrExpr).getLValue().(VariableAccess).getTarget()=vupdmsr_544
	and target_9.getExpr().(AssignOrExpr).getRValue().(NotExpr).getOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vtif_diff_542
	and target_9.getExpr().(AssignOrExpr).getRValue().(NotExpr).getOperand().(NotExpr).getOperand().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="512"
}

predicate func_10(Function func, BlockStmt target_10) {
	target_10.getStmt(0).(IfStmt).getCondition() instanceof ConditionalExpr
	and target_10.getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0) instanceof ExprStmt
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getCondition().(ConditionalExpr).getCondition().(FunctionCall).getTarget().hasName("__builtin_constant_p")
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getCondition().(ConditionalExpr).getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getCondition().(ConditionalExpr).getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("test_bit")
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("test_bit")
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getCondition().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("_static_cpu_has")
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getCondition().(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="248"
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getThen().(BlockStmt).getStmt(0) instanceof ExprStmt
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getElse().(IfStmt).getCondition().(LogicalOrExpr).getLeftOperand().(ConditionalExpr).getCondition().(FunctionCall).getTarget().hasName("__builtin_constant_p")
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getElse().(IfStmt).getCondition().(LogicalOrExpr).getLeftOperand().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("_static_cpu_has")
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getElse().(IfStmt).getCondition().(LogicalOrExpr).getRightOperand().(ConditionalExpr).getCondition().(FunctionCall).getTarget().hasName("__builtin_constant_p")
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getElse().(IfStmt).getCondition().(LogicalOrExpr).getRightOperand().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("_static_cpu_has")
	and target_10.getStmt(0).(IfStmt).getElse().(IfStmt).getElse().(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr() instanceof AssignExpr
	and target_10.getEnclosingFunction() = func
}

predicate func_11(Function func, BlockStmt target_11) {
	target_11.getStmt(0) instanceof ExprStmt
	and target_11.getEnclosingFunction() = func
}

from Function func, Parameter vtifn_540, Variable vtif_diff_542, Variable vupdmsr_544, Variable vboot_cpu_data, BitwiseAndExpr target_2, ConditionalExpr target_3, ExprStmt target_4, ExprStmt target_5, VariableAccess target_6, AssignExpr target_7, ConditionalExpr target_8, ExprStmt target_9, BlockStmt target_10, BlockStmt target_11
where
not func_0(vtif_diff_542, target_8, target_2)
and not func_1(vtif_diff_542, vupdmsr_544, target_9)
and func_2(vtif_diff_542, target_10, target_2)
and func_3(vboot_cpu_data, target_11, target_3)
and func_4(vtifn_540, target_3, target_4)
and func_5(vtifn_540, target_8, target_5)
and func_6(vupdmsr_544, target_6)
and func_7(vupdmsr_544, target_7)
and func_8(vboot_cpu_data, target_8)
and func_9(vtif_diff_542, vupdmsr_544, target_9)
and func_10(func, target_10)
and func_11(func, target_11)
and vtifn_540.getType().hasName("unsigned long")
and vtif_diff_542.getType().hasName("unsigned long")
and vupdmsr_544.getType().hasName("bool")
and vboot_cpu_data.getType().hasName("cpuinfo_x86")
and vtifn_540.getFunction() = func
and vtif_diff_542.(LocalVariable).getFunction() = func
and vupdmsr_544.(LocalVariable).getFunction() = func
and not vboot_cpu_data.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
