/**
 * @name linux-7094a5fd20ab66028f1da7f06e0f2692d70346f9-inet_diag_get_exact_compat
 * @id cpp/linux/7094a5fd20ab66028f1da7f06e0f2692d70346f9/inet-diag-get-exact-compat
 * @description linux-7094a5fd20ab66028f1da7f06e0f2692d70346f9-net/ipv4/inet_diag.c-inet_diag_get_exact_compat CVE-2024-42106
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vreq_1113, ExprStmt target_1, ExprStmt target_2, Function func) {
exists(ExprStmt target_0 |
	exists(AssignExpr obj_0 | obj_0=target_0.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="pad"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vreq_1113
		)
		and obj_0.getRValue().(Literal).getValue()="0"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vreq_1113, ExprStmt target_1) {
	exists(AssignExpr obj_0 | obj_0=target_1.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="idiag_states"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vreq_1113
		)
		and exists(PointerFieldAccess obj_2 | obj_2=obj_0.getRValue() |
			obj_2.getTarget().getName()="idiag_states"
			and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("inet_diag_req *")
		)
	)
}

predicate func_2(Variable vreq_1113, ExprStmt target_2) {
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="idiag_ext"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vreq_1113
		)
		and exists(PointerFieldAccess obj_2 | obj_2=obj_0.getRValue() |
			obj_2.getTarget().getName()="idiag_ext"
			and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("inet_diag_req *")
		)
	)
}

from Function func, Variable vreq_1113, ExprStmt target_1, ExprStmt target_2
where
not func_0(vreq_1113, target_1, target_2, func)
and func_1(vreq_1113, target_1)
and func_2(vreq_1113, target_2)
and vreq_1113.getType().hasName("inet_diag_req_v2")
and vreq_1113.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
