/**
 * @name linux-75961ffb5cb3e5196f19cae7683f35cc88b50800-rmem_swiotlb_device_init
 * @id cpp/linux/75961ffb5cb3e5196f19cae7683f35cc88b50800/rmem-swiotlb-device-init
 * @description linux-75961ffb5cb3e5196f19cae7683f35cc88b50800-kernel/dma/swiotlb.c-rmem_swiotlb_device_init CVE-2024-36925
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vmem_1755, NotExpr target_1, AddressOfExpr target_2, ExprStmt target_3) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("INIT_LIST_HEAD_RCU")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="pools"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmem_1755
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(13)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vmem_1755, BlockStmt target_4, NotExpr target_1) {
	target_1.getOperand().(VariableAccess).getTarget()=vmem_1755
	and target_1.getParent().(IfStmt).getThen()=target_4
}

predicate func_2(Variable vmem_1755, AddressOfExpr target_2) {
	target_2.getOperand().(PointerFieldAccess).getTarget().getName()="lock"
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmem_1755
}

predicate func_3(Variable vmem_1755, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("add_mem_pool")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmem_1755
	and target_3.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("io_tlb_pool *")
}

predicate func_4(Variable vmem_1755, BlockStmt target_4) {
	target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vmem_1755
	and target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("kzalloc")
	and target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(SizeofExprOperator).getValue()="328"
	and target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(BitwiseOrExpr).getValue()="3264"
	and target_4.getStmt(2).(IfStmt).getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vmem_1755
	and target_4.getStmt(2).(IfStmt).getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-12"
}

from Function func, Variable vmem_1755, NotExpr target_1, AddressOfExpr target_2, ExprStmt target_3, BlockStmt target_4
where
not func_0(vmem_1755, target_1, target_2, target_3)
and func_1(vmem_1755, target_4, target_1)
and func_2(vmem_1755, target_2)
and func_3(vmem_1755, target_3)
and func_4(vmem_1755, target_4)
and vmem_1755.getType().hasName("io_tlb_mem *")
and vmem_1755.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
