/**
 * @name linux-06ce521af9558814b8606c0476c54497cf83a653-nested_vmx_check_vmptr
 * @id cpp/linux/06ce521af9558814b8606c0476c54497cf83a653/nested-vmx-check-vmptr
 * @description linux-06ce521af9558814b8606c0476c54497cf83a653-arch/x86/kvm/vmx.c-nested_vmx_check_vmptr CVE-2017-2596
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvcpu_6961, Variable vpage_6967, VariableAccess target_6, FunctionCall target_7, ExprStmt target_8, ExprStmt target_4, ExprStmt target_9) {
exists(IfStmt target_0 |
	target_0.getCondition() instanceof EqualityOperation
	and target_0.getThen().(BlockStmt).getStmt(0) instanceof ExprStmt
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("nested_release_page_clean")
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_6967
	and target_0.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("nested_vmx_failInvalid")
	and target_0.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_6961
	and target_0.getThen().(BlockStmt).getStmt(3).(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("kvm_skip_emulated_instruction")
	and target_0.getThen().(BlockStmt).getStmt(3).(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_6961
	and target_0.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_6
	and target_7.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_8.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vpage_6967, VariableAccess target_6, ExprStmt target_9) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("nested_release_page_clean")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_6967
	and target_1.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_6
	and target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable vpage_6967, BlockStmt target_10, EqualityOperation target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget()=vpage_6967
	and target_2.getRightOperand().(Literal).getValue()="0"
	and target_2.getParent().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(PointerDereferenceExpr).getOperand().(FunctionCall).getTarget().hasName("kmap")
	and target_2.getParent().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(PointerDereferenceExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_6967
	and target_2.getParent().(LogicalOrExpr).getRightOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="300252880"
	and target_2.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen()=target_10
}

/*predicate func_3(Variable vpage_6967, BlockStmt target_10, EqualityOperation target_3) {
	target_3.getLeftOperand().(PointerDereferenceExpr).getOperand().(FunctionCall).getTarget().hasName("kmap")
	and target_3.getLeftOperand().(PointerDereferenceExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_6967
	and target_3.getRightOperand().(Literal).getValue()="300252880"
	and target_3.getParent().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vpage_6967
	and target_3.getParent().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_3.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen()=target_10
}

*/
predicate func_4(Variable vpage_6967, LogicalOrExpr target_5, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("kunmap")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_6967
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_5(BlockStmt target_10, Function func, LogicalOrExpr target_5) {
	target_5.getLeftOperand() instanceof EqualityOperation
	and target_5.getRightOperand() instanceof EqualityOperation
	and target_5.getParent().(IfStmt).getThen()=target_10
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Parameter vexit_reason_6961, VariableAccess target_6) {
	target_6.getTarget()=vexit_reason_6961
}

predicate func_7(Parameter vvcpu_6961, FunctionCall target_7) {
	target_7.getTarget().hasName("kvm_skip_emulated_instruction")
	and target_7.getArgument(0).(VariableAccess).getTarget()=vvcpu_6961
}

predicate func_8(Parameter vvcpu_6961, ExprStmt target_8) {
	target_8.getExpr().(FunctionCall).getTarget().hasName("nested_vmx_failValid")
	and target_8.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_6961
}

predicate func_9(Variable vpage_6967, ExprStmt target_9) {
	target_9.getExpr().(FunctionCall).getTarget().hasName("kunmap")
	and target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_6967
}

predicate func_10(Parameter vvcpu_6961, BlockStmt target_10) {
	target_10.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("nested_vmx_failInvalid")
	and target_10.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_6961
	and target_10.getStmt(1) instanceof ExprStmt
	and target_10.getStmt(2).(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("kvm_skip_emulated_instruction")
	and target_10.getStmt(2).(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_6961
}

from Function func, Parameter vvcpu_6961, Parameter vexit_reason_6961, Variable vpage_6967, EqualityOperation target_2, ExprStmt target_4, LogicalOrExpr target_5, VariableAccess target_6, FunctionCall target_7, ExprStmt target_8, ExprStmt target_9, BlockStmt target_10
where
not func_0(vvcpu_6961, vpage_6967, target_6, target_7, target_8, target_4, target_9)
and not func_1(vpage_6967, target_6, target_9)
and func_2(vpage_6967, target_10, target_2)
and func_4(vpage_6967, target_5, target_4)
and func_5(target_10, func, target_5)
and func_6(vexit_reason_6961, target_6)
and func_7(vvcpu_6961, target_7)
and func_8(vvcpu_6961, target_8)
and func_9(vpage_6967, target_9)
and func_10(vvcpu_6961, target_10)
and vvcpu_6961.getType().hasName("kvm_vcpu *")
and vexit_reason_6961.getType().hasName("int")
and vpage_6967.getType().hasName("page *")
and vvcpu_6961.getFunction() = func
and vexit_reason_6961.getFunction() = func
and vpage_6967.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
