/**
 * @name linux-e158ed266fc1adfa456880fb6dabce2e5623843b-snd_acp_resume
 * @id cpp/linux/e158ed266fc1adfa456880fb6dabce2e5623843b/snd-acp-resume
 * @description linux-e158ed266fc1adfa456880fb6dabce2e5623843b-sound/soc/amd/acp/acp-pci.c-snd_acp_resume CVE-2024-42074
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vchip_179, ExprStmt target_1, ExprStmt target_4, Function func) {
exists(IfStmt target_0 |
	exists(PointerFieldAccess obj_0 | obj_0=target_0.getCondition() |
		obj_0.getTarget().getName()="chip_pdev"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vchip_179
	)
	and exists(BlockStmt obj_1 | obj_1=target_0.getThen() |
		obj_1.getStmt(0) instanceof ExprStmt
		and obj_1.getStmt(1) instanceof ExprStmt
		and obj_1.getStmt(2) instanceof IfStmt
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vchip_179, Variable vchild_181, Function func, ExprStmt target_1) {
	exists(AssignExpr obj_0 | obj_0=target_1.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getRValue() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="chip_pdev"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vchip_179
			)
			and obj_1.getTarget().getName()="dev"
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vchild_181
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

predicate func_2(Variable vadata_180, Variable vchild_181, Function func, ExprStmt target_2) {
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("dev_get_drvdata")
			and obj_1.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vchild_181
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vadata_180
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
}

predicate func_3(Variable vadata_180, Function func, IfStmt target_3) {
	exists(ExprStmt obj_0 | obj_0=target_3.getThen() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("acp_enable_interrupts")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vadata_180
		)
	)
	and target_3.getCondition().(VariableAccess).getTarget()=vadata_180
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
}

predicate func_4(Variable vchip_179, ExprStmt target_4) {
	exists(AssignExpr obj_0 | obj_0=target_4.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("acp_init")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vchip_179
		)
		and obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("int")
	)
}

from Function func, Variable vchip_179, Variable vadata_180, Variable vchild_181, ExprStmt target_1, ExprStmt target_2, IfStmt target_3, ExprStmt target_4
where
not func_0(vchip_179, target_1, target_4, func)
and func_1(vchip_179, vchild_181, func, target_1)
and func_2(vadata_180, vchild_181, func, target_2)
and func_3(vadata_180, func, target_3)
and func_4(vchip_179, target_4)
and vchip_179.getType().hasName("acp_chip_info *")
and vadata_180.getType().hasName("acp_dev_data *")
and vchild_181.getType().hasName("device")
and vchip_179.(LocalVariable).getFunction() = func
and vadata_180.(LocalVariable).getFunction() = func
and vchild_181.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
