/**
 * @name linux-f123dc86388cb669c3d6322702dc441abc35c31e-get_block
 * @id cpp/linux/f123dc86388cb669c3d6322702dc441abc35c31e/get-block
 * @description linux-f123dc86388cb669c3d6322702dc441abc35c31e-fs/sysv/itree.c-get_block CVE-2023-52699
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vpointers_lock, Function func, ExprStmt target_0) {
	target_0.getExpr().(FunctionCall).getTarget().hasName("_raw_read_lock")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vpointers_lock
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
}

predicate func_1(Variable vpointers_lock, Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("_raw_read_unlock")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vpointers_lock
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

from Function func, Variable vpointers_lock, ExprStmt target_0, ExprStmt target_1
where
func_0(vpointers_lock, func, target_0)
and func_1(vpointers_lock, func, target_1)
and vpointers_lock.getType().hasName("rwlock_t")
and not vpointers_lock.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
