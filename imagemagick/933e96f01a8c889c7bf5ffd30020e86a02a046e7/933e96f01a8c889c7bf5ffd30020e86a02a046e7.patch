commit 933e96f01a8c889c7bf5ffd30020e86a02a046e7
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Fri Jun 3 20:10:45 2016 -0400

    https://github.com/ImageMagick/ImageMagick/issues/196

diff --git a/MagickWand/magick-cli.c b/MagickWand/magick-cli.c
index b4ad33bde..c28dd7169 100644
--- a/MagickWand/magick-cli.c
+++ b/MagickWand/magick-cli.c
@@ -636,12 +636,15 @@ static void MagickUsage(MagickBooleanType verbose)
    however the last argument provides the output filename.
 */
 static MagickBooleanType ConcatenateImages(int argc,char **argv,
-     ExceptionInfo *exception )
+  ExceptionInfo *exception )
 {
   FILE
     *input,
     *output;
 
+  MagickBooleanType
+    status;
+
   int
     c;
 
@@ -650,29 +653,31 @@ static MagickBooleanType ConcatenateImages(int argc,char **argv,
 
   if (ExpandFilenames(&argc,&argv) == MagickFalse)
     ThrowFileException(exception,ResourceLimitError,"MemoryAllocationFailed",
-         GetExceptionMessage(errno));
-
+      GetExceptionMessage(errno));
   output=fopen_utf8(argv[argc-1],"wb");
-  if (output == (FILE *) NULL) {
-    ThrowFileException(exception,FileOpenError,"UnableToOpenFile",argv[argc-1]);
-    return(MagickFalse);
-  }
-  for (i=2; i < (ssize_t) (argc-1); i++) {
-#if 0
-    fprintf(stderr, "DEBUG: Concatenate Image: \"%s\"\n", argv[i]);
-#endif
+  if (output == (FILE *) NULL)
+    {
+      ThrowFileException(exception,FileOpenError,"UnableToOpenFile",
+        argv[argc-1]);
+      return(MagickFalse);
+    }
+  status=MagickTrue;
+  for (i=2; i < (ssize_t) (argc-1); i++)
+  {
     input=fopen_utf8(argv[i],"rb");
-    if (input == (FILE *) NULL) {
+    if (input == (FILE *) NULL)
+      {
         ThrowFileException(exception,FileOpenError,"UnableToOpenFile",argv[i]);
         continue;
       }
     for (c=fgetc(input); c != EOF; c=fgetc(input))
-      (void) fputc((char) c,output);
+      if (fputc((char) c,output) != c)
+        status=MagickFalse;
     (void) fclose(input);
     (void) remove_utf8(argv[i]);
   }
   (void) fclose(output);
-  return(MagickTrue);
+  return(status);
 }
 
 WandExport MagickBooleanType MagickImageCommand(ImageInfo *image_info,int argc,
