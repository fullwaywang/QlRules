/**
 * @name linux-743edc8547a92b6192aa1f1b6bb78233fa21dc9b-mlxsw_sp_acl_tcam_vchunk_migrate_one
 * @id cpp/linux/743edc8547a92b6192aa1f1b6bb78233fa21dc9b/mlxsw-sp-acl-tcam-vchunk-migrate-one
 * @description linux-743edc8547a92b6192aa1f1b6bb78233fa21dc9b-drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c-mlxsw_sp_acl_tcam_vchunk_migrate_one CVE-2024-36007
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(BlockStmt target_1, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getArgument(1) instanceof Literal
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(DoStmt).getCondition() instanceof Literal
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(1) instanceof Literal
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation()))
}

predicate func_1(Function func, BlockStmt target_1) {
	target_1.getStmt(0).(ForStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("list_is_head")
	and target_1.getStmt(0).(ForStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="list"
	and target_1.getStmt(0).(ForStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("mlxsw_sp_acl_tcam_ventry *")
	and target_1.getStmt(0).(ForStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="ventry_list"
	and target_1.getStmt(0).(ForStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("mlxsw_sp_acl_tcam_vchunk *")
	and target_1.getStmt(0).(ForStmt).getUpdate().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("mlxsw_sp_acl_tcam_ventry *")
	and target_1.getStmt(0).(ForStmt).getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("mlxsw_sp_acl_tcam_ventry *")
	and target_1.getStmt(0).(ForStmt).getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(EqualityOperation).getRightOperand().(PointerFieldAccess).getTarget().getName()="stop_ventry"
	and target_1.getStmt(0).(ForStmt).getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(EqualityOperation).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("mlxsw_sp_acl_tcam_rehash_ctx *")
	and target_1.getStmt(0).(ForStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getStmt(0).(ForStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("mlxsw_sp_acl_tcam_ventry_migrate")
	and target_1.getStmt(0).(ForStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("mlxsw_sp *")
	and target_1.getStmt(0).(ForStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("mlxsw_sp_acl_tcam_ventry *")
	and target_1.getStmt(0).(ForStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="chunk"
	and target_1.getStmt(0).(ForStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("int *")
	and target_1.getEnclosingFunction() = func
}

from Function func, BlockStmt target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
