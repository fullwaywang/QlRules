/**
 * @name linux-b799207e1e1816b09e7a5920fbb2d5fcf6edd681-adjust_scalar_min_max_vals
 * @id cpp/linux/b799207e1e1816b09e7a5920fbb2d5fcf6edd681/adjust-scalar-min-max-vals
 * @description linux-b799207e1e1816b09e7a5920fbb2d5fcf6edd681-kernel/bpf/verifier.c-adjust_scalar_min_max_vals CVE-2018-18445
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vdst_reg_2889, Parameter vsrc_reg_2890, Variable vinsn_bitness_2897, ExprStmt target_2, ExprStmt target_3, ValueFieldAccess target_4, RelationalOperation target_6, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vinsn_bitness_2897
	and target_0.getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="32"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("coerce_reg_to_size")
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdst_reg_2889
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="4"
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("coerce_reg_to_size")
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vsrc_reg_2890
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="4"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_4.getQualifier().(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_6.getLesserOperand().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vdst_reg_2889, EqualityOperation target_7, ExprStmt target_8, ExprStmt target_9) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("coerce_reg_to_size")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdst_reg_2889
	and target_1.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="4"
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
	and target_8.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Parameter vsrc_reg_2890, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("s64")
	and target_2.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getTarget().getName()="smin_value"
	and target_2.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrc_reg_2890
}

predicate func_3(Parameter vdst_reg_2889, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("__reg_deduce_bounds")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdst_reg_2889
}

predicate func_4(Parameter vsrc_reg_2890, ValueFieldAccess target_4) {
	target_4.getTarget().getName()="var_off"
	and target_4.getQualifier().(VariableAccess).getTarget()=vsrc_reg_2890
}

predicate func_6(Variable vinsn_bitness_2897, BlockStmt target_10, RelationalOperation target_6) {
	 (target_6 instanceof GEExpr or target_6 instanceof LEExpr)
	and target_6.getGreaterOperand().(VariableAccess).getTarget().getType().hasName("u64")
	and target_6.getLesserOperand().(VariableAccess).getTarget()=vinsn_bitness_2897
	and target_6.getParent().(IfStmt).getThen()=target_10
}

predicate func_7(Function func, EqualityOperation target_7) {
	target_7.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="code"
	and target_7.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_insn *")
	and target_7.getLeftOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="7"
	and target_7.getRightOperand().(Literal).getValue()="7"
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Parameter vdst_reg_2889, VariableAccess target_11, ExprStmt target_8) {
	target_8.getExpr().(FunctionCall).getTarget().hasName("__update_reg_bounds")
	and target_8.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdst_reg_2889
	and target_8.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_11
}

predicate func_9(Parameter vdst_reg_2889, ExprStmt target_9) {
	target_9.getExpr().(FunctionCall).getTarget().hasName("coerce_reg_to_size")
	and target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdst_reg_2889
	and target_9.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="4"
}

predicate func_10(RelationalOperation target_6, Function func, BlockStmt target_10) {
	target_10.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mark_reg_unknown")
	and target_10.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("bpf_verifier_env *")
	and target_10.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("bpf_reg_state *")
	and target_10.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_10.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_insn *")
	and target_10.getParent().(IfStmt).getCondition()=target_6
	and target_10.getEnclosingFunction() = func
}

predicate func_11(Variable vopcode_2893, VariableAccess target_11) {
	target_11.getTarget()=vopcode_2893
}

from Function func, Parameter vdst_reg_2889, Parameter vsrc_reg_2890, Variable vopcode_2893, Variable vinsn_bitness_2897, ExprStmt target_2, ExprStmt target_3, ValueFieldAccess target_4, RelationalOperation target_6, EqualityOperation target_7, ExprStmt target_8, ExprStmt target_9, BlockStmt target_10, VariableAccess target_11
where
not func_0(vdst_reg_2889, vsrc_reg_2890, vinsn_bitness_2897, target_2, target_3, target_4, target_6, func)
and not func_1(vdst_reg_2889, target_7, target_8, target_9)
and func_2(vsrc_reg_2890, target_2)
and func_3(vdst_reg_2889, target_3)
and func_4(vsrc_reg_2890, target_4)
and func_6(vinsn_bitness_2897, target_10, target_6)
and func_7(func, target_7)
and func_8(vdst_reg_2889, target_11, target_8)
and func_9(vdst_reg_2889, target_9)
and func_10(target_6, func, target_10)
and func_11(vopcode_2893, target_11)
and vdst_reg_2889.getType().hasName("bpf_reg_state *")
and vsrc_reg_2890.getType().hasName("bpf_reg_state")
and vopcode_2893.getType().hasName("u8")
and vinsn_bitness_2897.getType().hasName("u64")
and vdst_reg_2889.getFunction() = func
and vsrc_reg_2890.getFunction() = func
and vopcode_2893.(LocalVariable).getFunction() = func
and vinsn_bitness_2897.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
