/**
 * @name linux-7b53d2204ce79b27a878074a77d64f40ec21dbca-isotp_init
 * @id cpp/linux/7b53d2204ce79b27a878074a77d64f40ec21dbca/isotp-init
 * @description linux-7b53d2204ce79b27a878074a77d64f40ec21dbca-net/can/isotp.c-isotp_init CVE-2022-48830
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_1, Function func) {
exists(DoStmt target_0 |
	exists(BlockStmt obj_0 | obj_0=target_0.getStmt() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(1) |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getArgument(0) |
					obj_3.getTarget().hasName("spinlock_check")
					and obj_3.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="rx_lock"
				)
				and obj_2.getTarget().hasName("__raw_spin_lock_init")
				and obj_2.getArgument(1).(StringLiteral).getValue()="&so->rx_lock"
				and obj_2.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("lock_class_key")
			)
		)
	)
	and target_0.getCondition().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
)
}

predicate func_1(Function func, ExprStmt target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		obj_0.getTarget().hasName("spin_lock")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("spinlock_t")
	)
	and target_1.getEnclosingFunction() = func
}

from Function func, ExprStmt target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
