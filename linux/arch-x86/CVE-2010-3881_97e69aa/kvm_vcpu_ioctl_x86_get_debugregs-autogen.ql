/**
 * @name linux-97e69aa62f8b5d338d6cff49be09e37cc1262838-kvm_vcpu_ioctl_x86_get_debugregs
 * @id cpp/linux/97e69aa62f8b5d338d6cff49be09e37cc1262838/kvm-vcpu-ioctl-x86-get-debugregs
 * @description linux-97e69aa62f8b5d338d6cff49be09e37cc1262838-arch/x86/kvm/x86.c-kvm_vcpu_ioctl_x86_get_debugregs CVE-2010-3881
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vdbgregs_2620, ExprStmt target_1, Function func) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("memset")
		and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="reserved"
		and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdbgregs_2620
		and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_0.getExpr().(FunctionCall).getArgument(2).(SizeofExprOperator).getValue()="72"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vdbgregs_2620, ExprStmt target_1) {
		target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="flags"
		and target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdbgregs_2620
		and target_1.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

from Function func, Parameter vdbgregs_2620, ExprStmt target_1
where
not func_0(vdbgregs_2620, target_1, func)
and func_1(vdbgregs_2620, target_1)
and vdbgregs_2620.getType().hasName("kvm_debugregs *")
and vdbgregs_2620.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
