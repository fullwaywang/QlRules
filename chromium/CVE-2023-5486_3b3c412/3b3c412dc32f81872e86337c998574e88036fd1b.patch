commit 3b3c412dc32f81872e86337c998574e88036fd1b	3b3c412dc32f81872e86337c998574e88036fd1b
Author: Mike Wasserman <msw@chromium.org>
Date:   Fri Aug 11 16:54:59 2023 +0000

    Fix custom cursor scaling logic for viewport checks
    
    Fix some cases where custom cursor images escape the viewport.
    - Apply display scale factor to fix High-DPI on all desktop OSes
    - Use the ui::Cursor hotspot clamped to custom image dimensions
    - Apply macOS's accessibility cursor scale factor, plus plumbing
      (other OS cursor scaling doesn't affect custom images for now)
      (note: we can skip plumbing if stale startup values suffice)
    
    Update and expand the relevant Blink unit test.
    
    Fixed: 1357442, 1455005
    Change-Id: Id4f0d617210cdabdd616627217e661cc462f2291
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4730733
    Commit-Queue: Mike Wasserman <msw@chromium.org>
    Reviewed-by: Robert Sesek <rsesek@chromium.org>
    Reviewed-by: Jeremy Roman <jbroman@chromium.org>
    Reviewed-by: Henrique Ferreiro <hferreiro@igalia.com>
    Reviewed-by: Ken Buchanan <kenrb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1182635}

diff --git a/content/browser/renderer_host/render_widget_host_impl.cc b/content/browser/renderer_host/render_widget_host_impl.cc
index 55364bf0f6313..2212b6575e885 100644
--- a/content/browser/renderer_host/render_widget_host_impl.cc
+++ b/content/browser/renderer_host/render_widget_host_impl.cc
@@ -152,6 +152,7 @@
 #include "content/browser/renderer_host/input/fling_scheduler_mac.h"
 #include "services/device/public/mojom/wake_lock_provider.mojom.h"
 #include "ui/accelerated_widget_mac/window_resize_helper_mac.h"
+#include "ui/base/cocoa/cursor_utils.h"
 #endif
 
 using blink::DragOperationsMask;
@@ -1093,6 +1094,12 @@ blink::VisualProperties RenderWidgetHostImpl::GetVisualProperties() {
   visual_properties.compositing_scale_factor =
       properties_from_parent_local_root_.compositing_scale_factor;
 
+#if BUILDFLAG(IS_MAC)
+  // Only macOS cursor scaling affects CSS custom cursor images for now.
+  visual_properties.cursor_accessibility_scale_factor =
+      ui::GetCursorAccessibilityScaleFactor();
+#endif
+
   // The |visible_viewport_size| is affected by auto-resize which is magical and
   // tricky.
   //
@@ -2772,6 +2779,8 @@ bool RenderWidgetHostImpl::StoredVisualPropertiesNeedsUpdate(
              new_visual_properties.page_scale_factor ||
          old_visual_properties->compositing_scale_factor !=
              new_visual_properties.compositing_scale_factor ||
+         old_visual_properties->cursor_accessibility_scale_factor !=
+             new_visual_properties.cursor_accessibility_scale_factor ||
          old_visual_properties->is_pinch_gesture_active !=
              new_visual_properties.is_pinch_gesture_active ||
          old_visual_properties->root_widget_window_segments !=
diff --git a/content/browser/renderer_host/render_widget_host_view_mac.h b/content/browser/renderer_host/render_widget_host_view_mac.h
index dda8547bc3be5..286881d3a0d36 100644
--- a/content/browser/renderer_host/render_widget_host_view_mac.h
+++ b/content/browser/renderer_host/render_widget_host_view_mac.h
@@ -51,6 +51,7 @@ class ScopedPasswordInputEnabler;
 
 @class NSAccessibilityRemoteUIElement;
 @class RenderWidgetHostViewCocoa;
+@class CursorAccessibilityScaleFactorObserver;
 
 namespace content {
 
@@ -616,6 +617,9 @@ class CONTENT_EXPORT RenderWidgetHostViewMac
 
   std::unique_ptr<CursorManager> cursor_manager_;
 
+  // Observes macOS's accessibility pointer size user preference changes.
+  CursorAccessibilityScaleFactorObserver* __strong cursor_scale_observer_;
+
   // Used to track active password input sessions.
   std::unique_ptr<ui::ScopedPasswordInputEnabler> password_input_enabler_;
 
diff --git a/content/browser/renderer_host/render_widget_host_view_mac.mm b/content/browser/renderer_host/render_widget_host_view_mac.mm
index 86994840865e9..92d7ea84f8664 100644
--- a/content/browser/renderer_host/render_widget_host_view_mac.mm
+++ b/content/browser/renderer_host/render_widget_host_view_mac.mm
@@ -60,6 +60,8 @@
 #import "ui/base/clipboard/clipboard_util_mac.h"
 #include "ui/base/cocoa/animation_utils.h"
 #include "ui/base/cocoa/cocoa_base_utils.h"
+#include "ui/base/cocoa/cursor_accessibility_scale_factor_observer.h"
+#include "ui/base/cocoa/cursor_utils.h"
 #include "ui/base/cocoa/remote_accessibility_api.h"
 #import "ui/base/cocoa/secure_password_input.h"
 #include "ui/base/cocoa/text_services_context_menu.h"
@@ -240,6 +242,14 @@ RenderWidgetHostViewMac::RenderWidgetHostViewMac(RenderWidgetHost* widget)
   }
 
   cursor_manager_ = std::make_unique<CursorManager>(this);
+  // Start observing changes to the system's cursor accessibility scale factor.
+  __block auto render_widget_host_view_mac = this;
+  cursor_scale_observer_ =
+      [[CursorAccessibilityScaleFactorObserver alloc] initWithHandler:^{
+        ui::GetCursorAccessibilityScaleFactor(/*force_update=*/true);
+        // Notify renderers of the new system cursor accessibility scale factor.
+        render_widget_host_view_mac->host()->SynchronizeVisualProperties();
+      }];
 
   if (GetTextInputManager())
     GetTextInputManager()->AddObserver(this);
diff --git a/third_party/blink/common/frame/frame_visual_properties_mojom_traits.cc b/third_party/blink/common/frame/frame_visual_properties_mojom_traits.cc
index 131de1d3a6551..5e87b39d69956 100644
--- a/third_party/blink/common/frame/frame_visual_properties_mojom_traits.cc
+++ b/third_party/blink/common/frame/frame_visual_properties_mojom_traits.cc
@@ -23,13 +23,17 @@ bool StructTraits<blink::mojom::FrameVisualPropertiesDataView,
       !data.ReadLocalFrameSize(&out->local_frame_size) ||
       !data.ReadRootWidgetWindowSegments(&out->root_widget_window_segments) ||
       !data.ReadLocalSurfaceId(&out->local_surface_id) ||
-      data.page_scale_factor() <= 0 || data.compositing_scale_factor() <= 0)
+      data.page_scale_factor() <= 0 || data.compositing_scale_factor() <= 0 ||
+      data.cursor_accessibility_scale_factor() < 1.f) {
     return false;
+  }
   out->auto_resize_enabled = data.auto_resize_enabled();
   out->capture_sequence_number = data.capture_sequence_number();
   out->zoom_level = data.zoom_level();
   out->page_scale_factor = data.page_scale_factor();
   out->compositing_scale_factor = data.compositing_scale_factor();
+  out->cursor_accessibility_scale_factor =
+      data.cursor_accessibility_scale_factor();
   out->is_pinch_gesture_active = data.is_pinch_gesture_active();
   return true;
 }
diff --git a/third_party/blink/common/widget/visual_properties.cc b/third_party/blink/common/widget/visual_properties.cc
index 72c4b487d5c5a..0d39e2cc73a3e 100644
--- a/third_party/blink/common/widget/visual_properties.cc
+++ b/third_party/blink/common/widget/visual_properties.cc
@@ -32,6 +32,8 @@ bool VisualProperties::operator==(const VisualProperties& other) const {
          zoom_level == other.zoom_level &&
          page_scale_factor == other.page_scale_factor &&
          compositing_scale_factor == other.compositing_scale_factor &&
+         cursor_accessibility_scale_factor ==
+             other.cursor_accessibility_scale_factor &&
          root_widget_window_segments == other.root_widget_window_segments &&
          is_pinch_gesture_active == other.is_pinch_gesture_active &&
          window_controls_overlay_rect == other.window_controls_overlay_rect;
diff --git a/third_party/blink/common/widget/visual_properties_mojom_traits.cc b/third_party/blink/common/widget/visual_properties_mojom_traits.cc
index 4bb2ef76be8bd..7a80bce0402d8 100644
--- a/third_party/blink/common/widget/visual_properties_mojom_traits.cc
+++ b/third_party/blink/common/widget/visual_properties_mojom_traits.cc
@@ -25,8 +25,10 @@ bool StructTraits<
       !data.ReadLocalSurfaceId(&out->local_surface_id) ||
       !data.ReadRootWidgetWindowSegments(&out->root_widget_window_segments) ||
       !data.ReadWindowControlsOverlayRect(&out->window_controls_overlay_rect) ||
-      data.page_scale_factor() <= 0 || data.compositing_scale_factor() <= 0)
+      data.page_scale_factor() <= 0 || data.compositing_scale_factor() <= 0 ||
+      data.cursor_accessibility_scale_factor() < 1) {
     return false;
+  }
   out->auto_resize_enabled = data.auto_resize_enabled();
   out->scroll_focused_node_into_view = data.scroll_focused_node_into_view();
   out->is_fullscreen_granted = data.is_fullscreen_granted();
@@ -35,6 +37,8 @@ bool StructTraits<
   out->zoom_level = data.zoom_level();
   out->page_scale_factor = data.page_scale_factor();
   out->compositing_scale_factor = data.compositing_scale_factor();
+  out->cursor_accessibility_scale_factor =
+      data.cursor_accessibility_scale_factor();
   out->is_pinch_gesture_active = data.is_pinch_gesture_active();
   out->virtual_keyboard_resize_height_physical_px =
       data.virtual_keyboard_resize_height_physical_px();
diff --git a/third_party/blink/public/common/frame/frame_visual_properties.h b/third_party/blink/public/common/frame/frame_visual_properties.h
index 53fe255744f15..5c026bdfca5be 100644
--- a/third_party/blink/public/common/frame/frame_visual_properties.h
+++ b/third_party/blink/public/common/frame/frame_visual_properties.h
@@ -34,6 +34,7 @@ struct BLINK_COMMON_EXPORT FrameVisualProperties {
   double zoom_level = 0;
   float page_scale_factor = 1.f;
   float compositing_scale_factor = 1.f;
+  float cursor_accessibility_scale_factor = 1.f;
   gfx::Size visible_viewport_size;
   gfx::Size min_size_for_auto_resize;
   gfx::Size max_size_for_auto_resize;
diff --git a/third_party/blink/public/common/frame/frame_visual_properties_mojom_traits.h b/third_party/blink/public/common/frame/frame_visual_properties_mojom_traits.h
index b6166ed988d08..d040bb32333c9 100644
--- a/third_party/blink/public/common/frame/frame_visual_properties_mojom_traits.h
+++ b/third_party/blink/public/common/frame/frame_visual_properties_mojom_traits.h
@@ -50,6 +50,12 @@ struct BLINK_COMMON_EXPORT
     return r.compositing_scale_factor;
   }
 
+  static float cursor_accessibility_scale_factor(
+      const blink::FrameVisualProperties& r) {
+    DCHECK_GE(r.cursor_accessibility_scale_factor, 1.f);
+    return r.cursor_accessibility_scale_factor;
+  }
+
   static const gfx::Size& visible_viewport_size(
       const blink::FrameVisualProperties& r) {
     return r.visible_viewport_size;
diff --git a/third_party/blink/public/common/widget/visual_properties.h b/third_party/blink/public/common/widget/visual_properties.h
index 3976640fe1a61..e9b0df8ce722d 100644
--- a/third_party/blink/public/common/widget/visual_properties.h
+++ b/third_party/blink/public/common/widget/visual_properties.h
@@ -123,6 +123,9 @@ struct BLINK_COMMON_EXPORT VisualProperties {
   // account the transform from child frame space to main frame space.
   float compositing_scale_factor = 1.f;
 
+  // The OS cursor accessibility scale factor.
+  float cursor_accessibility_scale_factor = 1.f;
+
   // The logical segments of the root widget, in widget-relative DIPs. This
   // property is set by the root RenderWidget in the renderer process, then
   // propagated to child local frame roots via RenderFrameProxy/
diff --git a/third_party/blink/public/common/widget/visual_properties_mojom_traits.h b/third_party/blink/public/common/widget/visual_properties_mojom_traits.h
index 0ee9e774e2303..1b21c6d91ba5e 100644
--- a/third_party/blink/public/common/widget/visual_properties_mojom_traits.h
+++ b/third_party/blink/public/common/widget/visual_properties_mojom_traits.h
@@ -95,6 +95,12 @@ struct BLINK_COMMON_EXPORT StructTraits<blink::mojom::VisualPropertiesDataView,
     return r.compositing_scale_factor;
   }
 
+  static float cursor_accessibility_scale_factor(
+      const blink::VisualProperties& r) {
+    DCHECK_GE(r.cursor_accessibility_scale_factor, 1.f);
+    return r.cursor_accessibility_scale_factor;
+  }
+
   static const std::vector<gfx::Rect>& root_widget_window_segments(
       const blink::VisualProperties& r) {
     return r.root_widget_window_segments;
diff --git a/third_party/blink/public/mojom/frame/frame_visual_properties.mojom b/third_party/blink/public/mojom/frame/frame_visual_properties.mojom
index 8d9f059be37f4..17b48b8db2b66 100644
--- a/third_party/blink/public/mojom/frame/frame_visual_properties.mojom
+++ b/third_party/blink/public/mojom/frame/frame_visual_properties.mojom
@@ -39,6 +39,9 @@ struct FrameVisualProperties {
   // account the transform from child frame space to main frame space.
   float compositing_scale_factor = 1;
 
+  // The OS cursor accessibility scale factor.
+  float cursor_accessibility_scale_factor = 1;
+
   // The size of the area of the widget that is visible to the user, in DIPs.
   // The visible area may be empty if the visible area does not intersect with
   // the widget, for example in the case of a child frame that is entirely
diff --git a/third_party/blink/public/mojom/widget/visual_properties.mojom b/third_party/blink/public/mojom/widget/visual_properties.mojom
index 3c106344f2679..91b15e43c5b13 100644
--- a/third_party/blink/public/mojom/widget/visual_properties.mojom
+++ b/third_party/blink/public/mojom/widget/visual_properties.mojom
@@ -83,6 +83,9 @@ struct VisualProperties {
   // account the transform from child frame space to main frame space.
   float compositing_scale_factor = 1;
 
+  // The OS cursor accessibility scale factor.
+  float cursor_accessibility_scale_factor = 1;
+
   // The logical segments of the root widget, in widget-relative DIPs. This
   // property is set by the root RenderWidget in the renderer process, then
   // propagated to child local frame roots via RenderFrameProxy/
diff --git a/third_party/blink/renderer/core/frame/remote_frame.cc b/third_party/blink/renderer/core/frame/remote_frame.cc
index d90939b3752cb..e5d0e24fa1cbf 100644
--- a/third_party/blink/renderer/core/frame/remote_frame.cc
+++ b/third_party/blink/renderer/core/frame/remote_frame.cc
@@ -955,6 +955,8 @@ bool RemoteFrame::SynchronizeVisualProperties(bool propagate) {
           pending_visual_properties_.page_scale_factor ||
       sent_visual_properties_->compositing_scale_factor !=
           pending_visual_properties_.compositing_scale_factor ||
+      sent_visual_properties_->cursor_accessibility_scale_factor !=
+          pending_visual_properties_.cursor_accessibility_scale_factor ||
       sent_visual_properties_->is_pinch_gesture_active !=
           pending_visual_properties_.is_pinch_gesture_active ||
       sent_visual_properties_->visible_viewport_size !=
@@ -1075,6 +1077,11 @@ void RemoteFrame::UpdateCaptureSequenceNumber(
   SynchronizeVisualProperties();
 }
 
+void RemoteFrame::CursorAccessibilityScaleFactorChanged(float scale_factor) {
+  pending_visual_properties_.cursor_accessibility_scale_factor = scale_factor;
+  SynchronizeVisualProperties();
+}
+
 void RemoteFrame::EnableAutoResize(const gfx::Size& min_size,
                                    const gfx::Size& max_size) {
   pending_visual_properties_.auto_resize_enabled = true;
diff --git a/third_party/blink/renderer/core/frame/remote_frame.h b/third_party/blink/renderer/core/frame/remote_frame.h
index 912d94da1f9d5..9585ac3d50210 100644
--- a/third_party/blink/renderer/core/frame/remote_frame.h
+++ b/third_party/blink/renderer/core/frame/remote_frame.h
@@ -149,6 +149,8 @@ class CORE_EXPORT RemoteFrame final : public Frame,
   void DidChangeVisibleViewportSize(const gfx::Size& visible_viewport_size);
   // Called when the local root's capture sequence number has changed.
   void UpdateCaptureSequenceNumber(uint32_t sequence_number);
+  // Called when the cursor accessibility scale factor changed.
+  void CursorAccessibilityScaleFactorChanged(float scale_factor);
 
   const String& UniqueName() const { return unique_name_; }
   const FrameVisualProperties& GetPendingVisualPropertiesForTesting() const {
diff --git a/third_party/blink/renderer/core/frame/web_frame_widget_impl.cc b/third_party/blink/renderer/core/frame/web_frame_widget_impl.cc
index ac0f2c1d83238..5d9645502f163 100644
--- a/third_party/blink/renderer/core/frame/web_frame_widget_impl.cc
+++ b/third_party/blink/renderer/core/frame/web_frame_widget_impl.cc
@@ -1717,6 +1717,24 @@ void WebFrameWidgetImpl::UpdateVisualProperties(
         /*is_pinch_gesture_active=*/false);
   }
 
+  EventHandler& event_handler = local_root_->GetFrame()->GetEventHandler();
+  if (event_handler.cursor_accessibility_scale_factor() !=
+      visual_properties.cursor_accessibility_scale_factor) {
+    ForEachLocalFrameControlledByWidget(
+        local_root_->GetFrame(), [&](WebLocalFrameImpl* local_frame) {
+          local_frame->GetFrame()
+              ->GetEventHandler()
+              .set_cursor_accessibility_scale_factor(
+                  visual_properties.cursor_accessibility_scale_factor);
+        });
+    // Propagate changes down to any child RemoteFrames.
+    ForEachRemoteFrameControlledByWidget(
+        [scale_factor = visual_properties.cursor_accessibility_scale_factor](
+            RemoteFrame* remote_frame) {
+          remote_frame->CursorAccessibilityScaleFactorChanged(scale_factor);
+        });
+  }
+
   // TODO(crbug.com/939118): This code path where scroll_focused_node_into_view
   // is set is used only for WebView, crbug 939118 tracks fixing webviews to
   // not use scroll_focused_node_into_view.
diff --git a/third_party/blink/renderer/core/input/event_handler.cc b/third_party/blink/renderer/core/input/event_handler.cc
index 6bf7ed1215342..5c1ad740745c3 100644
--- a/third_party/blink/renderer/core/input/event_handler.cc
+++ b/third_party/blink/renderer/core/input/event_handler.cc
@@ -70,6 +70,7 @@
 #include "third_party/blink/renderer/core/input/event_handling_util.h"
 #include "third_party/blink/renderer/core/input/input_device_capabilities.h"
 #include "third_party/blink/renderer/core/input_type_names.h"
+#include "third_party/blink/renderer/core/layout/geometry/physical_offset.h"
 #include "third_party/blink/renderer/core/layout/hit_test_request.h"
 #include "third_party/blink/renderer/core/layout/hit_test_result.h"
 #include "third_party/blink/renderer/core/layout/layout_embedded_content.h"
@@ -107,9 +108,11 @@
 #include "ui/gfx/geometry/point_conversions.h"
 #include "ui/gfx/geometry/point_f.h"
 #include "ui/gfx/geometry/rect.h"
+#include "ui/gfx/geometry/rect_conversions.h"
 #include "ui/gfx/geometry/size.h"
 #include "ui/gfx/geometry/size_conversions.h"
 #include "ui/gfx/geometry/size_f.h"
+
 namespace blink {
 
 namespace {
@@ -575,43 +578,14 @@ absl::optional<ui::Cursor> EventHandler::SelectCursor(
         continue;
       }
 
-      gfx::Point hot_spot = cursor.HotSpot();
-      // For large cursors below the max size, limit their ability to cover UI
-      // elements by removing them when they are not fully contained by the
-      // visual viewport. Careful, we need to make sure to translate coordinate
-      // spaces if we are in an OOPIF.
-      //
-      // TODO(csharrison): Consider sending a fallback cursor in the IPC to the
-      // browser process so we can do that calculation there instead, this would
-      // ensure even a compromised renderer could not obscure browser UI with a
-      // large cursor. Also, consider augmenting the intervention to drop the
-      // cursor for iframes if the cursor image obscures content in the parent
-      // frame.
-      if (size.width() > kMaximumCursorSizeWithoutFallback ||
-          size.height() > kMaximumCursorSizeWithoutFallback) {
-        PhysicalOffset cursor_offset =
-            frame_->ContentLayoutObject()->LocalToAncestorPoint(
-                location.Point(),
-                nullptr,  // no ancestor maps all the way up the hierarchy
-                kTraverseDocumentBoundaries | kApplyRemoteMainFrameTransform) -
-            PhysicalOffset(hot_spot);
-        PhysicalRect cursor_rect(cursor_offset,
-                                 PhysicalSize::FromSizeFFloor(size));
-        PhysicalRect frame_rect(page->GetVisualViewport().VisibleContentRect());
-        frame_->ContentLayoutObject()->MapToVisualRectInAncestorSpace(
-            nullptr, frame_rect);
-        if (!frame_rect.Contains(cursor_rect)) {
-          continue;
-        }
-      }
+      const float device_scale_factor =
+          page->GetChromeClient().GetScreenInfo(*frame_).device_scale_factor;
 
       // If the image is an SVG, then adjust the scale to reflect the device
       // scale factor so that the SVG can be rasterized in the native
       // resolution and scaled down to the correct size for the cursor.
       scoped_refptr<Image> svg_image_holder;
       if (auto* svg_image = DynamicTo<SVGImage>(image)) {
-        const float device_scale_factor =
-            page->GetChromeClient().GetScreenInfo(*frame_).device_scale_factor;
         scale *= device_scale_factor;
         // Re-scale back from DIP to device pixels.
         size.Scale(scale);
@@ -626,12 +600,59 @@ absl::optional<ui::Cursor> EventHandler::SelectCursor(
       }
 
       // Convert from DIP to physical pixels.
-      hot_spot = gfx::ScaleToRoundedPoint(hot_spot, scale);
+      gfx::Point hot_spot = gfx::ScaleToRoundedPoint(cursor.HotSpot(), scale);
 
       const bool hot_spot_specified = cursor.HotSpotSpecified();
-      return ui::Cursor::NewCustom(
+      ui::Cursor custom_cursor = ui::Cursor::NewCustom(
           image->AsSkBitmapForCurrentFrame(kRespectImageOrientation),
           DetermineHotSpot(*image, hot_spot_specified, hot_spot), scale);
+
+      // For large cursors below the max size, limit their ability to cover UI
+      // elements by removing them when they are not fully contained by the
+      // visual viewport. Careful, we need to make sure to translate coordinate
+      // spaces if we are in an OOPIF.
+      //
+      // TODO(csharrison): Consider sending a fallback cursor in the IPC to the
+      // browser process so we can do that calculation there instead, this would
+      // ensure even a compromised renderer could not obscure browser UI with a
+      // large cursor. Also, consider augmenting the intervention to drop the
+      // cursor for iframes if the cursor image obscures content in the parent
+      // frame.
+      gfx::SizeF custom_bitmap_size(custom_cursor.custom_bitmap().width(),
+                                    custom_cursor.custom_bitmap().height());
+      custom_bitmap_size.Scale(1.f / custom_cursor.image_scale_factor());
+      if (custom_bitmap_size.width() > kMaximumCursorSizeWithoutFallback ||
+          custom_bitmap_size.height() > kMaximumCursorSizeWithoutFallback) {
+        PhysicalOffset ancestor_location =
+            frame_->ContentLayoutObject()->LocalToAncestorPoint(
+                location.Point(),
+                nullptr,  // no ancestor maps all the way up the hierarchy
+                kTraverseDocumentBoundaries | kApplyRemoteMainFrameTransform);
+
+        // Check the cursor rect with device and accessibility scaling applied.
+        const float scale_factor =
+            cursor_accessibility_scale_factor_ *
+            (image->IsSVGImage() ? 1.f : device_scale_factor);
+        gfx::SizeF scaled_size(custom_bitmap_size);
+        scaled_size.Scale(scale_factor);
+        gfx::PointF scaled_hot_spot(custom_cursor.custom_hotspot());
+        scaled_hot_spot.Scale(scale_factor /
+                              custom_cursor.image_scale_factor());
+        PhysicalRect cursor_rect(
+            ancestor_location -
+                PhysicalOffset::FromPointFFloor(scaled_hot_spot),
+            PhysicalSize::FromSizeFFloor(scaled_size));
+
+        PhysicalRect frame_rect(page->GetVisualViewport().VisibleContentRect());
+        frame_->ContentLayoutObject()->MapToVisualRectInAncestorSpace(
+            nullptr, frame_rect);
+
+        if (!frame_rect.Contains(cursor_rect)) {
+          continue;
+        }
+      }
+
+      return custom_cursor;
     }
   }
 
diff --git a/third_party/blink/renderer/core/input/event_handler.h b/third_party/blink/renderer/core/input/event_handler.h
index c29de17bcc525..541355868f241 100644
--- a/third_party/blink/renderer/core/input/event_handler.h
+++ b/third_party/blink/renderer/core/input/event_handler.h
@@ -270,6 +270,13 @@ class CORE_EXPORT EventHandler final : public GarbageCollected<EventHandler> {
 
   void UpdateCursor();
 
+  float cursor_accessibility_scale_factor() const {
+    return cursor_accessibility_scale_factor_;
+  }
+  void set_cursor_accessibility_scale_factor(float scale) {
+    cursor_accessibility_scale_factor_ = scale;
+  }
+
   Element* GetElementUnderMouse();
 
   Element* CurrentTouchDownElement();
@@ -419,6 +426,8 @@ class CORE_EXPORT EventHandler final : public GarbageCollected<EventHandler> {
 
   double max_mouse_moved_duration_;
 
+  float cursor_accessibility_scale_factor_ = 1.f;
+
   HeapTaskRunnerTimer<EventHandler> active_interval_timer_;
 
   // last_show_press_timestamp_ prevents the active state rewrited by
diff --git a/third_party/blink/renderer/core/input/event_handler_test.cc b/third_party/blink/renderer/core/input/event_handler_test.cc
index b71af80835b6b..d47fc19c28e2b 100644
--- a/third_party/blink/renderer/core/input/event_handler_test.cc
+++ b/third_party/blink/renderer/core/input/event_handler_test.cc
@@ -2275,14 +2275,13 @@ TEST_F(EventHandlerSimTest, LargeCustomCursorIntersectsViewport) {
         <!DOCTYPE html>
         <style>
         div {
-          width: 300px;
-          height: 100px;
-          cursor: url('100x100.png') 100 100, auto;
+          width: 100vw;
+          height: 100vh;
+          cursor: url('100x100.png') 50 50, auto;
         }
         </style>
         <div>foo</div>
       )HTML");
-
   GetDocument().UpdateStyleAndLayoutTree();
 
   scoped_refptr<SharedBuffer> img =
@@ -2291,33 +2290,55 @@ TEST_F(EventHandlerSimTest, LargeCustomCursorIntersectsViewport) {
 
   Compositor().BeginFrame();
 
-  // Move the cursor so no part of it intersects the viewport.
-  {
-    WebMouseEvent mouse_move_event(
-        WebMouseEvent::Type::kMouseMove, gfx::PointF(101, 101),
-        gfx::PointF(101, 101), WebPointerProperties::Button::kNoButton, 0, 0,
-        WebInputEvent::GetStaticTimeStampForTests());
-    GetDocument().GetFrame()->GetEventHandler().HandleMouseMoveEvent(
-        mouse_move_event, Vector<WebMouseEvent>(), Vector<WebMouseEvent>());
-
-    const ui::Cursor& cursor =
-        GetDocument().GetFrame()->GetChromeClient().LastSetCursorForTesting();
-    EXPECT_EQ(ui::mojom::blink::CursorType::kCustom, cursor.type());
-  }
-
-  // Now, move the cursor so that it intersects the visual viewport. The cursor
-  // should be removed.
-  {
+  EventHandler& event_handler = GetDocument().GetFrame()->GetEventHandler();
+
+  struct TestCase {
+    gfx::PointF point;
+    bool custom_expected;
+    float cursor_accessibility_scale_factor = 1.f;
+    float device_scale_factor = 1.f;
+    std::string ToString() const {
+      return base::StringPrintf(
+          "point: (%s), cursor-scale: %g, device-scale: %g, custom?: %d",
+          point.ToString().c_str(), cursor_accessibility_scale_factor,
+          device_scale_factor, custom_expected);
+    }
+  } test_cases[] = {
+      // Test top left and bottom right, within viewport.
+      {gfx::PointF(60, 60), true},
+      {gfx::PointF(740, 540), true},
+      // Test top left and bottom right, beyond viewport.
+      {gfx::PointF(40, 40), false},
+      {gfx::PointF(760, 560), false},
+      // Test a larger cursor accessibility scale factor. crbug.com/1455005
+      {gfx::PointF(110, 110), true, 2.f},
+      {gfx::PointF(690, 490), true, 2.f},
+      {gfx::PointF(90, 90), false, 2.f},
+      {gfx::PointF(710, 510), false, 2.f},
+      // Test a larger display device scale factor. crbug.com/1357442
+      {gfx::PointF(110, 110), true, 1.f, 2.f},
+      {gfx::PointF(690, 490), true, 1.f, 2.f},
+      {gfx::PointF(90, 90), false, 1.f, 2.f},
+      {gfx::PointF(710, 510), false, 1.f, 2.f},
+  };
+  for (const TestCase& test_case : test_cases) {
+    SCOPED_TRACE(test_case.ToString());
+    DeviceEmulationParams params;
+    params.device_scale_factor = test_case.device_scale_factor;
+    WebView().EnableDeviceEmulation(params);
+    event_handler.set_cursor_accessibility_scale_factor(
+        test_case.cursor_accessibility_scale_factor);
     WebMouseEvent mouse_move_event(
-        WebMouseEvent::Type::kMouseMove, gfx::PointF(99, 99),
-        gfx::PointF(99, 99), WebPointerProperties::Button::kNoButton, 0, 0,
+        WebMouseEvent::Type::kMouseMove, test_case.point, test_case.point,
+        WebPointerProperties::Button::kNoButton, 0, 0,
         WebInputEvent::GetStaticTimeStampForTests());
-    GetDocument().GetFrame()->GetEventHandler().HandleMouseMoveEvent(
-        mouse_move_event, Vector<WebMouseEvent>(), Vector<WebMouseEvent>());
-
+    event_handler.HandleMouseMoveEvent(mouse_move_event, {}, {});
     const ui::Cursor& cursor =
         GetDocument().GetFrame()->GetChromeClient().LastSetCursorForTesting();
-    EXPECT_EQ(ui::mojom::blink::CursorType::kPointer, cursor.type());
+    const ui::mojom::blink::CursorType expected_type =
+        test_case.custom_expected ? ui::mojom::blink::CursorType::kCustom
+                                  : ui::mojom::blink::CursorType::kPointer;
+    EXPECT_EQ(expected_type, cursor.type());
   }
 }
 
diff --git a/ui/base/BUILD.gn b/ui/base/BUILD.gn
index 121d879857123..cda1666e0e360 100644
--- a/ui/base/BUILD.gn
+++ b/ui/base/BUILD.gn
@@ -316,6 +316,8 @@ component("base") {
       "cocoa/command_dispatcher.mm",
       "cocoa/constrained_window/constrained_window_animation.h",
       "cocoa/constrained_window/constrained_window_animation.mm",
+      "cocoa/cursor_accessibility_scale_factor_observer.h",
+      "cocoa/cursor_accessibility_scale_factor_observer.mm",
       "cocoa/cursor_utils.h",
       "cocoa/cursor_utils.mm",
       "cocoa/defaults_utils.h",
diff --git a/ui/base/cocoa/cursor_accessibility_scale_factor_observer.h b/ui/base/cocoa/cursor_accessibility_scale_factor_observer.h
new file mode 100644
index 0000000000000..5b72ebee61e15
--- /dev/null
+++ b/ui/base/cocoa/cursor_accessibility_scale_factor_observer.h
@@ -0,0 +1,19 @@
+// Copyright 2023 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_BASE_COCOA_CURSOR_ACCESSIBILITY_SCALE_FACTOR_OBSERVER_H_
+#define UI_BASE_COCOA_CURSOR_ACCESSIBILITY_SCALE_FACTOR_OBSERVER_H_
+
+#import <Foundation/Foundation.h>
+
+#include "base/component_export.h"
+
+// An observer for macOS's accessibility pointer size user preference.
+COMPONENT_EXPORT(UI_BASE)
+@interface CursorAccessibilityScaleFactorObserver : NSObject
+// `handler` is invoked when the user preference changes.
+- (instancetype)initWithHandler:(void (^)())handler;
+@end
+
+#endif  // UI_BASE_COCOA_CURSOR_ACCESSIBILITY_SCALE_FACTOR_OBSERVER_H_
diff --git a/ui/base/cocoa/cursor_accessibility_scale_factor_observer.mm b/ui/base/cocoa/cursor_accessibility_scale_factor_observer.mm
new file mode 100644
index 0000000000000..dbf50ef92b43b
--- /dev/null
+++ b/ui/base/cocoa/cursor_accessibility_scale_factor_observer.mm
@@ -0,0 +1,36 @@
+// Copyright 2023 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/base/cocoa/cursor_accessibility_scale_factor_observer.h"
+
+@implementation CursorAccessibilityScaleFactorObserver {
+  void (^_handler)() __strong;
+  NSUserDefaults* __strong _defaults;
+}
+
+- (instancetype)initWithHandler:(void (^)())handler {
+  self = [super init];
+  if (self) {
+    _handler = handler;
+    _defaults =
+        [[NSUserDefaults alloc] initWithSuiteName:@"com.apple.universalaccess"];
+    [_defaults addObserver:self
+                forKeyPath:@"mouseDriverCursorSize"
+                   options:0
+                   context:nullptr];
+  }
+  return self;
+}
+
+- (void)dealloc {
+  [_defaults removeObserver:self forKeyPath:@"mouseDriverCursorSize"];
+}
+
+- (void)observeValueForKeyPath:(NSString*)keyPath
+                      ofObject:(id)object
+                        change:(NSDictionary*)change
+                       context:(void*)context {
+  _handler();
+}
+@end
diff --git a/ui/base/cocoa/cursor_utils.h b/ui/base/cocoa/cursor_utils.h
index eabafcf6c337f..f241f108b0011 100644
--- a/ui/base/cocoa/cursor_utils.h
+++ b/ui/base/cocoa/cursor_utils.h
@@ -5,16 +5,27 @@
 #ifndef UI_BASE_COCOA_CURSOR_UTILS_H_
 #define UI_BASE_COCOA_CURSOR_UTILS_H_
 
-#import <AppKit/AppKit.h>
-
 #include "base/component_export.h"
 
+#ifdef __OBJC__
+@class NSCursor;
+#endif  // __OBJC__
+
 namespace ui {
 
 class Cursor;
 
+#ifdef __OBJC__
 COMPONENT_EXPORT(UI_BASE)
 NSCursor* GetNativeCursor(const ui::Cursor& cursor);
+#endif  // __OBJC__
+
+// Returns macOS's accessibility pointer size user preference. The OS renders
+// larger Chrome and web content cursors using this scale factor (1.0 - 4.0).
+// Note: Renderers and other sandboxed processes get stale NSDefault values.
+// This returns a cached value unless `force_update` is true.
+COMPONENT_EXPORT(UI_BASE)
+float GetCursorAccessibilityScaleFactor(bool force_update = false);
 
 }  // namespace ui
 
diff --git a/ui/base/cocoa/cursor_utils.mm b/ui/base/cocoa/cursor_utils.mm
index 9fb639d4375f7..1c2d8c262df83 100644
--- a/ui/base/cocoa/cursor_utils.mm
+++ b/ui/base/cocoa/cursor_utils.mm
@@ -7,6 +7,8 @@
 #import <AppKit/AppKit.h>
 #include <stdint.h>
 
+#include <algorithm>
+
 #include "base/check.h"
 #include "base/mac/mac_util.h"
 #include "base/mac/scoped_cftyperef.h"
@@ -271,4 +273,16 @@ NSCursor* GetNativeCursor(const ui::Cursor& cursor) {
   return nil;
 }
 
+float GetCursorAccessibilityScaleFactor(bool force_update) {
+  static absl::optional<float> scale;
+  if (!scale.has_value() || force_update) {
+    NSUserDefaults* defaults =
+        [[NSUserDefaults alloc] initWithSuiteName:@"com.apple.universalaccess"];
+    // This may be 0 in tests, but the expected production range is [1.0, 4.0].
+    scale =
+        std::clamp([defaults floatForKey:@"mouseDriverCursorSize"], 1.f, 4.f);
+  }
+  return scale.value();
+}
+
 }  // namespace ui
