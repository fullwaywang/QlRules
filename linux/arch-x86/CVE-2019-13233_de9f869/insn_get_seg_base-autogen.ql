/**
 * @name linux-de9f869616dd95e95c00bdd6b0fcd3421e8a4323-insn_get_seg_base
 * @id cpp/linux/de9f869616dd95e95c00bdd6b0fcd3421e8a4323/insn-get-seg-base
 * @description linux-de9f869616dd95e95c00bdd6b0fcd3421e8a4323-arch/x86/lib/insn-eval.c-insn_get_seg_base CVE-2019-13233
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Variable vdesc_631, Variable vsel_632, ReturnStmt target_7, ExprStmt target_4, NotExpr target_8, NotExpr target_9) {
	exists(FunctionCall target_1 |
		target_1.getTarget().hasName("get_desc")
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vdesc_631
		and target_1.getArgument(1).(VariableAccess).getTarget()=vsel_632
		and target_1.getParent().(NotExpr).getOperand().(VariableAccess).getTarget()=vdesc_631
		and target_1.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_7
		and target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_1.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_8.getOperand().(VariableAccess).getLocation())
		and target_9.getOperand().(VariableAccess).getLocation().isBefore(target_1.getArgument(1).(VariableAccess).getLocation()))
}

predicate func_2(Variable vdesc_631, NotExpr target_8, FunctionCall target_10) {
	exists(AddressOfExpr target_2 |
		target_2.getOperand().(VariableAccess).getTarget()=vdesc_631
		and target_2.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("get_desc_base")
		and target_2.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdesc_631
		and target_8.getOperand().(VariableAccess).getLocation().isBefore(target_2.getOperand().(VariableAccess).getLocation())
		and target_2.getOperand().(VariableAccess).getLocation().isBefore(target_10.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Variable vsel_632, VariableAccess target_3) {
		target_3.getTarget()=vsel_632
		and target_3.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_4(Variable vdesc_631, Variable vsel_632, Function func, ExprStmt target_4) {
		target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vdesc_631
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("get_desc")
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsel_632
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
}

predicate func_5(Variable vdesc_631, ReturnStmt target_7, VariableAccess target_5) {
		target_5.getTarget()=vdesc_631
		and target_5.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_7
}

predicate func_6(Variable vdesc_631, VariableAccess target_6) {
		target_6.getTarget()=vdesc_631
		and target_6.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("get_desc_base")
}

predicate func_7(NotExpr target_8, Function func, ReturnStmt target_7) {
		target_7.getExpr().(UnaryMinusExpr).getValue()="18446744073709551615"
		and target_7.getParent().(IfStmt).getCondition()=target_8
		and target_7.getEnclosingFunction() = func
}

predicate func_8(Variable vdesc_631, NotExpr target_8) {
		target_8.getOperand().(VariableAccess).getTarget()=vdesc_631
}

predicate func_9(Variable vsel_632, NotExpr target_9) {
		target_9.getOperand().(VariableAccess).getTarget()=vsel_632
}

predicate func_10(Variable vdesc_631, FunctionCall target_10) {
		target_10.getTarget().hasName("get_desc_base")
		and target_10.getArgument(0).(VariableAccess).getTarget()=vdesc_631
}

from Function func, Variable vdesc_631, Variable vsel_632, VariableAccess target_3, ExprStmt target_4, VariableAccess target_5, VariableAccess target_6, ReturnStmt target_7, NotExpr target_8, NotExpr target_9, FunctionCall target_10
where
not func_1(vdesc_631, vsel_632, target_7, target_4, target_8, target_9)
and not func_2(vdesc_631, target_8, target_10)
and func_3(vsel_632, target_3)
and func_4(vdesc_631, vsel_632, func, target_4)
and func_5(vdesc_631, target_7, target_5)
and func_6(vdesc_631, target_6)
and func_7(target_8, func, target_7)
and func_8(vdesc_631, target_8)
and func_9(vsel_632, target_9)
and func_10(vdesc_631, target_10)
and vdesc_631.getType().hasName("desc_struct *")
and vsel_632.getType().hasName("short")
and vdesc_631.(LocalVariable).getFunction() = func
and vsel_632.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
