/**
 * @name linux-5dc6416414fb3ec6e2825fd4d20c8bf1d7fe0395-btrfs_ioctl_clone
 * @id cpp/linux/5dc6416414fb3ec6e2825fd4d20c8bf1d7fe0395/btrfs-ioctl-clone
 * @description linux-5dc6416414fb3ec6e2825fd4d20c8bf1d7fe0395-fs/btrfs/ioctl.c-btrfs_ioctl_clone CVE-2010-1636
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsrc_file_1446, ValueFieldAccess target_1, ExprStmt target_2, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="f_mode"
		and target_0.getCondition().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrc_file_1446
		and target_0.getCondition().(NotExpr).getOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="1"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_1.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_0.getCondition().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vsrc_file_1446, ValueFieldAccess target_1) {
		target_1.getTarget().getName()="dentry"
		and target_1.getQualifier().(PointerFieldAccess).getTarget().getName()="f_path"
		and target_1.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrc_file_1446
}

predicate func_2(Variable vsrc_file_1446, ExprStmt target_2) {
		target_2.getExpr().(FunctionCall).getTarget().hasName("fput")
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsrc_file_1446
}

from Function func, Variable vsrc_file_1446, ValueFieldAccess target_1, ExprStmt target_2
where
not func_0(vsrc_file_1446, target_1, target_2, func)
and func_1(vsrc_file_1446, target_1)
and func_2(vsrc_file_1446, target_2)
and vsrc_file_1446.getType().hasName("file *")
and vsrc_file_1446.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
