/**
 * @name linux-bce9332220bd677d83b19d21502776ad555a0e73-__do_proc_doulongvec_minmax
 * @id cpp/linux/bce9332220bd677d83b19d21502776ad555a0e73/--do-proc-doulongvec-minmax
 * @description linux-bce9332220bd677d83b19d21502776ad555a0e73-__do_proc_doulongvec_minmax CVE-2022-4378
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vleft_1048, LogicalAndExpr target_8, NotExpr target_9) {
	exists(FunctionCall target_0 |
		target_0.getTarget().hasName("proc_skip_spaces")
		and target_0.getArgument(0) instanceof AddressOfExpr
		and target_0.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vleft_1048
		and target_8.getAnOperand().(VariableAccess).getLocation().isBefore(target_0.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
		and target_0.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_9.getOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vleft_1048, AddressOfExpr target_10, ExprStmt target_11) {
	exists(FunctionCall target_1 |
		target_1.getTarget().hasName("proc_skip_spaces")
		and target_1.getArgument(0) instanceof AddressOfExpr
		and target_1.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vleft_1048
		and target_10.getOperand().(VariableAccess).getLocation().isBefore(target_1.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
		and target_1.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_11.getExpr().(AssignSubExpr).getRValue().(VariableAccess).getLocation()))
}

predicate func_2(Variable vp_1049, AddressOfExpr target_2) {
		target_2.getOperand().(VariableAccess).getTarget()=vp_1049
		and target_2.getParent().(FunctionCall).getParent().(AssignSubExpr).getRValue() instanceof FunctionCall
}

predicate func_3(Variable vp_1049, AddressOfExpr target_3) {
		target_3.getOperand().(VariableAccess).getTarget()=vp_1049
		and target_3.getParent().(FunctionCall).getParent().(AssignSubExpr).getRValue() instanceof FunctionCall
}

predicate func_4(Variable vleft_1048, VariableAccess target_4) {
		target_4.getTarget()=vleft_1048
		and target_4.getParent().(AssignSubExpr).getLValue() = target_4
		and target_4.getParent().(AssignSubExpr).getRValue() instanceof FunctionCall
}

predicate func_5(Variable vleft_1048, VariableAccess target_5) {
		target_5.getTarget()=vleft_1048
		and target_5.getParent().(AssignSubExpr).getLValue() = target_5
		and target_5.getParent().(AssignSubExpr).getRValue() instanceof FunctionCall
}

predicate func_6(Variable vleft_1048, LogicalAndExpr target_8, NotExpr target_9, AssignSubExpr target_6) {
		target_6.getLValue().(VariableAccess).getTarget()=vleft_1048
		and target_6.getRValue().(FunctionCall).getTarget().hasName("proc_skip_spaces")
		and target_6.getRValue().(FunctionCall).getArgument(0) instanceof AddressOfExpr
		and target_8.getAnOperand().(VariableAccess).getLocation().isBefore(target_6.getLValue().(VariableAccess).getLocation())
		and target_6.getLValue().(VariableAccess).getLocation().isBefore(target_9.getOperand().(VariableAccess).getLocation())
}

predicate func_7(Variable vleft_1048, AddressOfExpr target_10, ExprStmt target_11, AssignSubExpr target_7) {
		target_7.getLValue().(VariableAccess).getTarget()=vleft_1048
		and target_7.getRValue().(FunctionCall).getTarget().hasName("proc_skip_spaces")
		and target_7.getRValue().(FunctionCall).getArgument(0) instanceof AddressOfExpr
		and target_10.getOperand().(VariableAccess).getLocation().isBefore(target_7.getLValue().(VariableAccess).getLocation())
		and target_7.getLValue().(VariableAccess).getLocation().isBefore(target_11.getExpr().(AssignSubExpr).getRValue().(VariableAccess).getLocation())
}

predicate func_8(Variable vleft_1048, LogicalAndExpr target_8) {
		target_8.getAnOperand().(VariableAccess).getTarget()=vleft_1048
		and target_8.getAnOperand().(PostfixDecrExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_9(Variable vleft_1048, NotExpr target_9) {
		target_9.getOperand().(VariableAccess).getTarget()=vleft_1048
}

predicate func_10(Variable vleft_1048, AddressOfExpr target_10) {
		target_10.getOperand().(VariableAccess).getTarget()=vleft_1048
		and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("proc_put_char")
		and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("void *")
		and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(CharLiteral).getValue()="10"
}

predicate func_11(Variable vleft_1048, ExprStmt target_11) {
		target_11.getExpr().(AssignSubExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget().getType().hasName("size_t *")
		and target_11.getExpr().(AssignSubExpr).getRValue().(VariableAccess).getTarget()=vleft_1048
}

from Function func, Variable vleft_1048, Variable vp_1049, AddressOfExpr target_2, AddressOfExpr target_3, VariableAccess target_4, VariableAccess target_5, AssignSubExpr target_6, AssignSubExpr target_7, LogicalAndExpr target_8, NotExpr target_9, AddressOfExpr target_10, ExprStmt target_11
where
not func_0(vleft_1048, target_8, target_9)
and not func_1(vleft_1048, target_10, target_11)
and func_2(vp_1049, target_2)
and func_3(vp_1049, target_3)
and func_4(vleft_1048, target_4)
and func_5(vleft_1048, target_5)
and func_6(vleft_1048, target_8, target_9, target_6)
and func_7(vleft_1048, target_10, target_11, target_7)
and func_8(vleft_1048, target_8)
and func_9(vleft_1048, target_9)
and func_10(vleft_1048, target_10)
and func_11(vleft_1048, target_11)
and vleft_1048.getType().hasName("size_t")
and vp_1049.getType().hasName("char *")
and vleft_1048.(LocalVariable).getFunction() = func
and vp_1049.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
