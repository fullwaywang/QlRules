/**
 * @name linux-71171ac8eb34ce7fe6b3267dce27c313ab3cb3ac-ax25_kill_by_device
 * @id cpp/linux/71171ac8eb34ce7fe6b3267dce27c313ab3cb3ac/ax25-kill-by-device
 * @description linux-71171ac8eb34ce7fe6b3267dce27c313ab3cb3ac-net/ax25/af_ax25.c-ax25_kill_by_device CVE-2022-1199
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vs_79, Variable vsk_80, Variable vax25_list_lock, EqualityOperation target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, AddressOfExpr target_5, AddressOfExpr target_6) {
exists(IfStmt target_0 |
	target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vsk_80
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock_bh")
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vax25_list_lock
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="ax25_dev"
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vs_79
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_0.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("ax25_disconnect")
	and target_0.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vs_79
	and target_0.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="101"
	and target_0.getThen().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_lock_bh")
	and target_0.getThen().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vax25_list_lock
	and target_0.getThen().(BlockStmt).getStmt(4).(GotoStmt).getName() ="again"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_2.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_5.getOperand().(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_6.getOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vs_79, EqualityOperation target_1) {
	target_1.getLeftOperand().(PointerFieldAccess).getTarget().getName()="ax25_dev"
	and target_1.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vs_79
	and target_1.getRightOperand().(VariableAccess).getTarget().getType().hasName("ax25_dev *")
}

predicate func_2(Variable vs_79, Variable vsk_80, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsk_80
	and target_2.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="sk"
	and target_2.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vs_79
}

predicate func_3(Variable vs_79, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="ax25_dev"
	and target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vs_79
	and target_3.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

predicate func_4(Variable vsk_80, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("sock_hold")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_80
}

predicate func_5(Variable vax25_list_lock, AddressOfExpr target_5) {
	target_5.getOperand().(VariableAccess).getTarget()=vax25_list_lock
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_lock_bh")
}

predicate func_6(Variable vax25_list_lock, AddressOfExpr target_6) {
	target_6.getOperand().(VariableAccess).getTarget()=vax25_list_lock
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock_bh")
}

from Function func, Variable vs_79, Variable vsk_80, Variable vax25_list_lock, EqualityOperation target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, AddressOfExpr target_5, AddressOfExpr target_6
where
not func_0(vs_79, vsk_80, vax25_list_lock, target_1, target_2, target_3, target_4, target_5, target_6)
and func_1(vs_79, target_1)
and func_2(vs_79, vsk_80, target_2)
and func_3(vs_79, target_3)
and func_4(vsk_80, target_4)
and func_5(vax25_list_lock, target_5)
and func_6(vax25_list_lock, target_6)
and vs_79.getType().hasName("ax25_cb *")
and vsk_80.getType().hasName("sock *")
and vax25_list_lock.getType().hasName("spinlock_t")
and vs_79.(LocalVariable).getFunction() = func
and vsk_80.(LocalVariable).getFunction() = func
and not vax25_list_lock.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
