/**
 * @name linux-b166a20b07382b8bc1dcee2a448715c9c2c81b5b-sctp_close
 * @id cpp/linux/b166a20b07382b8bc1dcee2a448715c9c2c81b5b/sctp-close
 * @description linux-b166a20b07382b8bc1dcee2a448715c9c2c81b5b-net/sctp/socket.c-sctp_close CVE-2021-23133
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("spin_lock_bh")
	and not target_0.getTarget().hasName("local_bh_disable")
	and target_0.getArgument(0).(AddressOfExpr).getOperand() instanceof ValueFieldAccess
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, FunctionCall target_1) {
	target_1.getTarget().hasName("_raw_spin_lock_nested")
	and not target_1.getTarget().hasName("spin_lock")
	and target_1.getArgument(0).(FunctionCall).getTarget().hasName("spinlock_check")
	and target_1.getArgument(0).(FunctionCall).getArgument(0) instanceof AddressOfExpr
	and target_1.getArgument(1).(Literal).getValue()="1"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, FunctionCall target_2) {
	target_2.getTarget().hasName("spin_unlock_bh")
	and not target_2.getTarget().hasName("local_bh_enable")
	and target_2.getArgument(0).(AddressOfExpr).getOperand() instanceof ValueFieldAccess
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Parameter vsk_1466, AddressOfExpr target_3) {
	target_3.getOperand().(ValueFieldAccess).getTarget().getName()="slock"
	and target_3.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
	and target_3.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_1466
	and target_3.getParent().(FunctionCall).getParent().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("spinlock_check")
}

predicate func_4(Variable vnet_1468, ExprStmt target_7, ValueFieldAccess target_4) {
	target_4.getTarget().getName()="addr_wq_lock"
	and target_4.getQualifier().(PointerFieldAccess).getTarget().getName()="sctp"
	and target_4.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnet_1468
	and target_4.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
	and target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_5(Function func, DoStmt target_5) {
	target_5.getCondition().(Literal).getValue()="0"
	and target_5.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr() instanceof FunctionCall
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

predicate func_6(Variable vnet_1468, ValueFieldAccess target_6) {
	target_6.getTarget().getName()="addr_wq_lock"
	and target_6.getQualifier().(PointerFieldAccess).getTarget().getName()="sctp"
	and target_6.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnet_1468
	and target_6.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_7(Variable vnet_1468, ExprStmt target_7) {
	target_7.getExpr().(FunctionCall).getTarget().hasName("sctp_primitive_SHUTDOWN")
	and target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vnet_1468
	and target_7.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("sctp_association *")
	and target_7.getExpr().(FunctionCall).getArgument(2).(Literal).getValue()="0"
}

from Function func, Variable vnet_1468, Parameter vsk_1466, FunctionCall target_0, FunctionCall target_1, FunctionCall target_2, AddressOfExpr target_3, ValueFieldAccess target_4, DoStmt target_5, ValueFieldAccess target_6, ExprStmt target_7
where
func_0(func, target_0)
and func_1(func, target_1)
and func_2(func, target_2)
and func_3(vsk_1466, target_3)
and func_4(vnet_1468, target_7, target_4)
and func_5(func, target_5)
and func_6(vnet_1468, target_6)
and func_7(vnet_1468, target_7)
and vnet_1468.getType().hasName("net *")
and vsk_1466.getType().hasName("sock *")
and vnet_1468.(LocalVariable).getFunction() = func
and vsk_1466.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
