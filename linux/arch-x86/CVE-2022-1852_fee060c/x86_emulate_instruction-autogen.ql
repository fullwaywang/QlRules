/**
 * @name linux-fee060cd52d69c114b62d1a2948ea9648b5131f9-x86_emulate_instruction
 * @id cpp/linux/fee060cd52d69c114b62d1a2948ea9648b5131f9/x86-emulate-instruction
 * @description linux-fee060cd52d69c114b62d1a2948ea9648b5131f9-x86_emulate_instruction CVE-2022-1852
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvcpu_8396, Parameter vemulation_type_8397, Variable vr_8399, NotExpr target_1, ExprStmt target_2, ExprStmt target_3) {
	exists(IfStmt target_0 |
		target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vemulation_type_8397
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="4"
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getTarget().hasName("kvm_vcpu_check_code_breakpoint")
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_8396
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vr_8399
		and target_0.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=vr_8399
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vemulation_type_8397, NotExpr target_1) {
		target_1.getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vemulation_type_8397
		and target_1.getOperand().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="1"
}

predicate func_2(Parameter vvcpu_8396, ExprStmt target_2) {
		target_2.getExpr().(FunctionCall).getTarget().hasName("kvm_clear_exception_queue")
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_8396
}

predicate func_3(Parameter vvcpu_8396, Parameter vemulation_type_8397, Variable vr_8399, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vr_8399
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("x86_decode_emulated_instruction")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_8396
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vemulation_type_8397
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("void *")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Parameter vvcpu_8396, Parameter vemulation_type_8397, Variable vr_8399, NotExpr target_1, ExprStmt target_2, ExprStmt target_3
where
not func_0(vvcpu_8396, vemulation_type_8397, vr_8399, target_1, target_2, target_3)
and func_1(vemulation_type_8397, target_1)
and func_2(vvcpu_8396, target_2)
and func_3(vvcpu_8396, vemulation_type_8397, vr_8399, target_3)
and vvcpu_8396.getType().hasName("kvm_vcpu *")
and vemulation_type_8397.getType().hasName("int")
and vr_8399.getType().hasName("int")
and vvcpu_8396.getFunction() = func
and vemulation_type_8397.getFunction() = func
and vr_8399.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
