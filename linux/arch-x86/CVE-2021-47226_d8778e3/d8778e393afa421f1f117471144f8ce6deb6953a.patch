commit d8778e393afa421f1f117471144f8ce6deb6953a
Author: Andy Lutomirski <luto@kernel.org>
Date:   Tue Jun 8 16:36:19 2021 +0200

    x86/fpu: Invalidate FPU state after a failed XRSTOR from a user buffer
    
    Both Intel and AMD consider it to be architecturally valid for XRSTOR to
    fail with #PF but nonetheless change the register state.  The actual
    conditions under which this might occur are unclear [1], but it seems
    plausible that this might be triggered if one sibling thread unmaps a page
    and invalidates the shared TLB while another sibling thread is executing
    XRSTOR on the page in question.
    
    __fpu__restore_sig() can execute XRSTOR while the hardware registers
    are preserved on behalf of a different victim task (using the
    fpu_fpregs_owner_ctx mechanism), and, in theory, XRSTOR could fail but
    modify the registers.
    
    If this happens, then there is a window in which __fpu__restore_sig()
    could schedule out and the victim task could schedule back in without
    reloading its own FPU registers. This would result in part of the FPU
    state that __fpu__restore_sig() was attempting to load leaking into the
    victim task's user-visible state.
    
    Invalidate preserved FPU registers on XRSTOR failure to prevent this
    situation from corrupting any state.
    
    [1] Frequent readers of the errata lists might imagine "complex
        microarchitectural conditions".
    
    Fixes: 1d731e731c4c ("x86/fpu: Add a fastpath to __fpu__restore_sig()")
    Signed-off-by: Andy Lutomirski <luto@kernel.org>
    Signed-off-by: Thomas Gleixner <tglx@linutronix.de>
    Signed-off-by: Borislav Petkov <bp@suse.de>
    Acked-by: Dave Hansen <dave.hansen@linux.intel.com>
    Acked-by: Rik van Riel <riel@surriel.com>
    Cc: stable@vger.kernel.org
    Link: https://lkml.kernel.org/r/20210608144345.758116583@linutronix.de

diff --git a/arch/x86/kernel/fpu/signal.c b/arch/x86/kernel/fpu/signal.c
index d5bc96a536c2..4ab9aeb9a963 100644
--- a/arch/x86/kernel/fpu/signal.c
+++ b/arch/x86/kernel/fpu/signal.c
@@ -369,6 +369,25 @@ static int __fpu__restore_sig(void __user *buf, void __user *buf_fx, int size)
 			fpregs_unlock();
 			return 0;
 		}
+
+		/*
+		 * The above did an FPU restore operation, restricted to
+		 * the user portion of the registers, and failed, but the
+		 * microcode might have modified the FPU registers
+		 * nevertheless.
+		 *
+		 * If the FPU registers do not belong to current, then
+		 * invalidate the FPU register state otherwise the task might
+		 * preempt current and return to user space with corrupted
+		 * FPU registers.
+		 *
+		 * In case current owns the FPU registers then no further
+		 * action is required. The fixup below will handle it
+		 * correctly.
+		 */
+		if (test_thread_flag(TIF_NEED_FPU_LOAD))
+			__cpu_invalidate_fpregs_state();
+
 		fpregs_unlock();
 	} else {
 		/*
