/**
 * @name linux-3a50597de8635cd05133bd12c95681c82fe7b878-join_session_keyring
 * @id cpp/linux/3a50597de8635cd05133bd12c95681c82fe7b878/join-session-keyring
 * @description linux-3a50597de8635cd05133bd12c95681c82fe7b878-security/keys/process_keys.c-join_session_keyring CVE-2016-0728
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
		target_0.getValue()="31"
		and not target_0.getValue()="0"
		and target_0.getParent().(UnaryMinusExpr).getParent().(ReturnStmt).getExpr() instanceof UnaryMinusExpr
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vnew_765, Variable vkeyring_766, ReturnStmt target_6) {
	exists(EqualityOperation target_1 |
		target_1.getAnOperand().(VariableAccess).getTarget()=vkeyring_766
		and target_1.getAnOperand().(PointerFieldAccess).getTarget().getName()="session_keyring"
		and target_1.getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnew_765
		and target_1.getParent().(IfStmt).getThen()=target_6)
}

predicate func_2(Variable vret_767, NotExpr target_5) {
	exists(ExprStmt target_2 |
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_767
		and target_2.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_2
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5)
}

predicate func_3(NotExpr target_5, Function func) {
	exists(GotoStmt target_3 |
		target_3.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_3
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
		and target_3.getEnclosingFunction() = func)
}

predicate func_4(Variable vnew_765, VariableAccess target_4) {
		target_4.getTarget()=vnew_765
}

predicate func_5(ReturnStmt target_6, Function func, NotExpr target_5) {
		target_5.getOperand().(FunctionCall).getTarget().hasName("current_is_single_threaded")
		and target_5.getParent().(IfStmt).getThen()=target_6
		and target_5.getEnclosingFunction() = func
}

predicate func_6(NotExpr target_5, Function func, ReturnStmt target_6) {
		target_6.getExpr().(UnaryMinusExpr).getValue()="-31"
		and target_6.getParent().(IfStmt).getCondition()=target_5
		and target_6.getEnclosingFunction() = func
}

predicate func_7(Variable vnew_765, PointerFieldAccess target_7) {
		target_7.getTarget().getName()="tgcred"
		and target_7.getQualifier().(VariableAccess).getTarget()=vnew_765
}

from Function func, Variable vnew_765, Variable vkeyring_766, Variable vret_767, Literal target_0, VariableAccess target_4, NotExpr target_5, ReturnStmt target_6, PointerFieldAccess target_7
where
func_0(func, target_0)
and not func_1(vnew_765, vkeyring_766, target_6)
and not func_2(vret_767, target_5)
and not func_3(target_5, func)
and func_4(vnew_765, target_4)
and func_5(target_6, func, target_5)
and func_6(target_5, func, target_6)
and func_7(vnew_765, target_7)
and vnew_765.getType().hasName("cred *")
and vkeyring_766.getType().hasName("key *")
and vret_767.getType().hasName("long")
and vnew_765.(LocalVariable).getFunction() = func
and vkeyring_766.(LocalVariable).getFunction() = func
and vret_767.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
