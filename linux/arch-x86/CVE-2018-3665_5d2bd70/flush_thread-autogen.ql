/**
 * @name linux-5d2bd7009f306c82afddd1ca4d9763ad8473c216-flush_thread
 * @id cpp/linux/5d2bd7009f306c82afddd1ca4d9763ad8473c216/flush-thread
 * @description linux-5d2bd7009f306c82afddd1ca4d9763ad8473c216-arch/x86/kernel/process.c-flush_thread CVE-2018-3665
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_1, Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("use_xsave")
	and not target_0.getTarget().hasName("use_eager_fpu")
	and target_0.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_1
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("free_thread_xstate")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("task_struct *")
	and target_1.getEnclosingFunction() = func
}

from Function func, FunctionCall target_0, ExprStmt target_1
where
func_0(target_1, func, target_0)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
