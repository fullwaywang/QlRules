commit 63530bf3e5b5592eaa64d55c8e21a3492ba00a7e	63530bf3e5b5592eaa64d55c8e21a3492ba00a7e
Author: Jack Hsieh <chengweih@chromium.org>
Date:   Fri Mar 3 00:35:32 2023 +0000

    Add top level frame security origin in GlobalWorkerScope
    
    Add a new field of top level frame security origin in GlobalWorkerScope,
    so that worker thread on the renderer side can use it to check if it has
    the right permission for some operations according to top level frameâ€™s
    security origin. For example, a worker can use it to check if the top
    level frame has an opaque origin hence blocking access to WebUSB API.
    
    Bug: 1375133
    Change-Id: I0bcbdcee583daf75823fd87bbea866130984b46e
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4251485
    Reviewed-by: Hiroki Nakagawa <nhiroki@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1112560}

diff --git a/third_party/blink/renderer/core/loader/empty_clients.h b/third_party/blink/renderer/core/loader/empty_clients.h
index 9e34e8024ad65..06f0a9215bd63 100644
--- a/third_party/blink/renderer/core/loader/empty_clients.h
+++ b/third_party/blink/renderer/core/loader/empty_clients.h
@@ -253,6 +253,34 @@ class CORE_EXPORT EmptyChromeClient : public ChromeClient {
   const display::ScreenInfos empty_screen_infos_{display::ScreenInfo()};
 };
 
+class EmptyWebWorkerFetchContext : public WebWorkerFetchContext {
+ public:
+  void SetTerminateSyncLoadEvent(base::WaitableEvent*) override {}
+  void InitializeOnWorkerThread(AcceptLanguagesWatcher*) override {}
+  URLLoaderFactory* GetURLLoaderFactory() override { return nullptr; }
+  std::unique_ptr<URLLoaderFactory> WrapURLLoaderFactory(
+      CrossVariantMojoRemote<network::mojom::URLLoaderFactoryInterfaceBase>
+          url_loader_factory) override {
+    return nullptr;
+  }
+  void WillSendRequest(WebURLRequest&) override {}
+  blink::mojom::ControllerServiceWorkerMode GetControllerServiceWorkerMode()
+      const override {
+    return mojom::ControllerServiceWorkerMode::kNoController;
+  }
+  net::SiteForCookies SiteForCookies() const override {
+    return net::SiteForCookies();
+  }
+  absl::optional<WebSecurityOrigin> TopFrameOrigin() const override {
+    return absl::nullopt;
+  }
+  blink::WebString GetAcceptLanguages() const override { return ""; }
+  void SetIsOfflineMode(bool is_offline_mode) override {}
+  bool IsDedicatedWorkerOrSharedWorkerFetchContext() const override {
+    return true;
+  }
+};
+
 class CORE_EXPORT EmptyLocalFrameClient : public LocalFrameClient {
  public:
   EmptyLocalFrameClient() = default;
@@ -425,6 +453,10 @@ class CORE_EXPORT EmptyLocalFrameClient : public LocalFrameClient {
 
   Frame* FindFrame(const AtomicString& name) const override;
 
+  scoped_refptr<WebWorkerFetchContext> CreateWorkerFetchContext() override {
+    return base::MakeRefCounted<EmptyWebWorkerFetchContext>();
+  }
+
  protected:
   // Not owned
   WebTextCheckClient* text_check_client_;
diff --git a/third_party/blink/renderer/core/workers/dedicated_worker.cc b/third_party/blink/renderer/core/workers/dedicated_worker.cc
index dc7fec50240c8..429e4a57dff86 100644
--- a/third_party/blink/renderer/core/workers/dedicated_worker.cc
+++ b/third_party/blink/renderer/core/workers/dedicated_worker.cc
@@ -56,6 +56,7 @@
 #include "third_party/blink/renderer/platform/loader/fetch/resource_fetcher.h"
 #include "third_party/blink/renderer/platform/loader/fetch/resource_fetcher_properties.h"
 #include "third_party/blink/renderer/platform/loader/fetch/url_loader/dedicated_or_shared_worker_fetch_context_impl.h"
+#include "third_party/blink/renderer/platform/weborigin/security_origin.h"
 #include "third_party/blink/renderer/platform/weborigin/security_policy.h"
 #include "third_party/blink/renderer/platform/wtf/casting.h"
 
@@ -431,10 +432,9 @@ BeginFrameProviderParams CreateBeginFrameProviderParams(
   // itself later.
   BeginFrameProviderParams begin_frame_provider_params;
   if (auto* window = DynamicTo<LocalDOMWindow>(execution_context)) {
-    LocalFrame* frame = window->GetFrame();
-    if (frame) {
-      WebFrameWidgetImpl* widget =
-          WebLocalFrameImpl::FromFrame(frame)->LocalRootFrameWidget();
+    auto* web_local_frame = WebLocalFrameImpl::FromFrame(window->GetFrame());
+    if (web_local_frame) {
+      WebFrameWidgetImpl* widget = web_local_frame->LocalRootFrameWidget();
       begin_frame_provider_params.parent_frame_sink_id =
           widget->GetFrameSinkId();
     }
@@ -457,6 +457,7 @@ DedicatedWorker::CreateGlobalScopeCreationParams(
   ExecutionContext* execution_context = GetExecutionContext();
   scoped_refptr<base::SingleThreadTaskRunner>
       agent_group_scheduler_compositor_task_runner;
+  const SecurityOrigin* top_level_frame_security_origin;
 
   if (auto* window = DynamicTo<LocalDOMWindow>(execution_context)) {
     // When the main thread creates a new DedicatedWorker.
@@ -468,6 +469,8 @@ DedicatedWorker::CreateGlobalScopeCreationParams(
             ->ToFrameScheduler()
             ->GetAgentGroupScheduler()
             ->CompositorTaskRunner();
+    top_level_frame_security_origin =
+        window->GetFrame()->Top()->GetSecurityContext()->GetSecurityOrigin();
   } else {
     // When a DedicatedWorker creates another DedicatedWorker (nested worker).
     WorkerGlobalScope* worker_global_scope =
@@ -477,8 +480,11 @@ DedicatedWorker::CreateGlobalScopeCreationParams(
     settings = WorkerSettings::Copy(worker_global_scope->GetWorkerSettings());
     agent_group_scheduler_compositor_task_runner =
         worker_global_scope->GetAgentGroupSchedulerCompositorTaskRunner();
+    top_level_frame_security_origin =
+        worker_global_scope->top_level_frame_security_origin();
   }
   DCHECK(agent_group_scheduler_compositor_task_runner);
+  DCHECK(top_level_frame_security_origin);
 
   mojom::blink::ScriptType script_type =
       (options_->type() == script_type_names::kClassic)
@@ -508,7 +514,8 @@ DedicatedWorker::CreateGlobalScopeCreationParams(
       execution_context->CrossOriginIsolatedCapability(),
       execution_context->IsIsolatedContext(),
       /*interface_registry=*/nullptr,
-      std::move(agent_group_scheduler_compositor_task_runner));
+      std::move(agent_group_scheduler_compositor_task_runner),
+      top_level_frame_security_origin);
 }
 
 scoped_refptr<WebWorkerFetchContext>
diff --git a/third_party/blink/renderer/core/workers/dedicated_worker.h b/third_party/blink/renderer/core/workers/dedicated_worker.h
index 2d8f68b4bf832..630e796b3a8af 100644
--- a/third_party/blink/renderer/core/workers/dedicated_worker.h
+++ b/third_party/blink/renderer/core/workers/dedicated_worker.h
@@ -124,6 +124,8 @@ class CORE_EXPORT DedicatedWorker final
   void Trace(Visitor*) const override;
 
  private:
+  FRIEND_TEST_ALL_PREFIXES(DedicatedWorkerTest, TopLevelFrameSecurityOrigin);
+
   // Starts the worker.
   void Start();
   void ContinueStart(
diff --git a/third_party/blink/renderer/core/workers/dedicated_worker_test.cc b/third_party/blink/renderer/core/workers/dedicated_worker_test.cc
index 93f48f465fa79..ea7151797df79 100644
--- a/third_party/blink/renderer/core/workers/dedicated_worker_test.cc
+++ b/third_party/blink/renderer/core/workers/dedicated_worker_test.cc
@@ -5,6 +5,7 @@
 #include "third_party/blink/renderer/core/workers/dedicated_worker_test.h"
 
 #include <bitset>
+#include <cstddef>
 #include <memory>
 
 #include "base/task/single_thread_task_runner.h"
@@ -37,6 +38,7 @@
 #include "third_party/blink/renderer/core/workers/worker_thread_test_helper.h"
 #include "third_party/blink/renderer/platform/scheduler/public/post_cross_thread_task.h"
 #include "third_party/blink/renderer/platform/testing/unit_test_helpers.h"
+#include "third_party/blink/renderer/platform/weborigin/security_origin.h"
 #include "third_party/blink/renderer/platform/weborigin/security_policy.h"
 #include "third_party/blink/renderer/platform/wtf/cross_thread_functional.h"
 #include "third_party/blink/renderer/platform/wtf/functional.h"
@@ -148,25 +150,28 @@ class DedicatedWorkerMessagingProxyForTest
 
   ~DedicatedWorkerMessagingProxyForTest() override = default;
 
-  void StartWorker() {
+  void StartWorker(
+      std::unique_ptr<GlobalScopeCreationParams> params = nullptr) {
     scoped_refptr<const SecurityOrigin> security_origin =
         SecurityOrigin::Create(script_url_);
     auto worker_settings = std::make_unique<WorkerSettings>(
         To<LocalDOMWindow>(GetExecutionContext())->GetFrame()->GetSettings());
-    auto params = std::make_unique<GlobalScopeCreationParams>(
-        script_url_, mojom::blink::ScriptType::kClassic,
-        "fake global scope name", "fake user agent", UserAgentMetadata(),
-        nullptr /* web_worker_fetch_context */,
-        Vector<network::mojom::blink::ContentSecurityPolicyPtr>(),
-        Vector<network::mojom::blink::ContentSecurityPolicyPtr>(),
-        network::mojom::ReferrerPolicy::kDefault, security_origin.get(),
-        false /* starter_secure_context */,
-        CalculateHttpsState(security_origin.get()),
-        nullptr /* worker_clients */, nullptr /* content_settings_client */,
-        nullptr /* inherited_trial_features */,
-        base::UnguessableToken::Create(), std::move(worker_settings),
-        mojom::blink::V8CacheOptions::kDefault,
-        nullptr /* worklet_module_responses_map */);
+    if (!params) {
+      params = std::make_unique<GlobalScopeCreationParams>(
+          script_url_, mojom::blink::ScriptType::kClassic,
+          "fake global scope name", "fake user agent", UserAgentMetadata(),
+          nullptr /* web_worker_fetch_context */,
+          Vector<network::mojom::blink::ContentSecurityPolicyPtr>(),
+          Vector<network::mojom::blink::ContentSecurityPolicyPtr>(),
+          network::mojom::ReferrerPolicy::kDefault, security_origin.get(),
+          false /* starter_secure_context */,
+          CalculateHttpsState(security_origin.get()),
+          nullptr /* worker_clients */, nullptr /* content_settings_client */,
+          nullptr /* inherited_trial_features */,
+          base::UnguessableToken::Create(), std::move(worker_settings),
+          mojom::blink::V8CacheOptions::kDefault,
+          nullptr /* worklet_module_responses_map */);
+    }
     params->parent_context_token =
         GetExecutionContext()->GetExecutionContextToken();
     InitializeWorkerThread(
@@ -200,6 +205,8 @@ class DedicatedWorkerMessagingProxyForTest
     DedicatedWorkerMessagingProxy::Trace(visitor);
   }
 
+  const KURL& script_url() const { return script_url_; }
+
  private:
   std::unique_ptr<WorkerThread> CreateWorkerThread() override {
     return std::make_unique<DedicatedWorkerThreadForTest>(GetExecutionContext(),
@@ -209,6 +216,39 @@ class DedicatedWorkerMessagingProxyForTest
   KURL script_url_;
 };
 
+class FakeWebDedicatedWorkerHostFactoryClient
+    : public WebDedicatedWorkerHostFactoryClient {
+ public:
+  // Implements WebDedicatedWorkerHostFactoryClient.
+  void CreateWorkerHostDeprecated(
+      const DedicatedWorkerToken& dedicated_worker_token,
+      const WebURL& script_url,
+      CreateWorkerHostCallback callback) override {}
+  void CreateWorkerHost(
+      const DedicatedWorkerToken& dedicated_worker_token,
+      const WebURL& script_url,
+      network::mojom::CredentialsMode credentials_mode,
+      const WebFetchClientSettingsObject& fetch_client_settings_object,
+      CrossVariantMojoRemote<blink::mojom::BlobURLTokenInterfaceBase>
+          blob_url_token) override {}
+  scoped_refptr<blink::WebWorkerFetchContext> CloneWorkerFetchContext(
+      WebWorkerFetchContext* web_worker_fetch_context,
+      scoped_refptr<base::SingleThreadTaskRunner> task_runner) override {
+    return nullptr;
+  }
+};
+
+class FakeWebDedicatedWorkerHostFactoryClientPlatformSupport
+    : public TestingPlatformSupport {
+ public:
+  std::unique_ptr<blink::WebDedicatedWorkerHostFactoryClient>
+  CreateDedicatedWorkerHostFactoryClient(
+      WebDedicatedWorker* worker,
+      const BrowserInterfaceBrokerProxy& interface_broker) override {
+    return std::make_unique<FakeWebDedicatedWorkerHostFactoryClient>();
+  }
+};
+
 void DedicatedWorkerTest::SetUp() {
   PageTestBase::SetUp(gfx::Size());
   LocalDOMWindow* window = GetFrame().DomWindow();
@@ -239,8 +279,9 @@ DedicatedWorkerThreadForTest* DedicatedWorkerTest::GetWorkerThread() {
   return worker_messaging_proxy_->GetDedicatedWorkerThread();
 }
 
-void DedicatedWorkerTest::StartWorker() {
-  WorkerMessagingProxy()->StartWorker();
+void DedicatedWorkerTest::StartWorker(
+    std::unique_ptr<GlobalScopeCreationParams> params) {
+  WorkerMessagingProxy()->StartWorker(std::move(params));
 }
 
 void DedicatedWorkerTest::EvaluateClassicScript(const String& source_code) {
@@ -437,6 +478,65 @@ TEST_F(DedicatedWorkerTest, DispatchMessageEventOnWorkerGlobalScope) {
   EXPECT_EQ(event_type, event_type_names::kMessage);
 }
 
+TEST_F(DedicatedWorkerTest, TopLevelFrameSecurityOrigin) {
+  ScopedTestingPlatformSupport<
+      FakeWebDedicatedWorkerHostFactoryClientPlatformSupport>
+      platform;
+  const auto& script_url = WorkerMessagingProxy()->script_url();
+  scoped_refptr<SecurityOrigin> security_origin =
+      SecurityOrigin::Create(script_url);
+  WorkerObject()
+      ->GetExecutionContext()
+      ->GetSecurityContext()
+      .SetSecurityOriginForTesting(security_origin);
+  StartWorker(WorkerObject()->CreateGlobalScopeCreationParams(
+      script_url, network::mojom::ReferrerPolicy::kDefault,
+      Vector<network::mojom::blink::ContentSecurityPolicyPtr>()));
+  base::RunLoop run_loop;
+
+  PostCrossThreadTask(
+      *GetWorkerThread()->GetTaskRunner(TaskType::kInternalTest), FROM_HERE,
+      CrossThreadBindOnce(
+          [](DedicatedWorkerThreadForTest* worker_thread,
+             WTF::CrossThreadOnceClosure quit,
+             const SecurityOrigin* security_origin, const KURL& script_url) {
+            // Check the worker's top level frame security origin.
+            auto* worker_global_scope =
+                static_cast<WorkerGlobalScope*>(worker_thread->GlobalScope());
+            ASSERT_TRUE(worker_global_scope->top_level_frame_security_origin());
+            EXPECT_TRUE(worker_global_scope->top_level_frame_security_origin()
+                            ->IsSameOriginDomainWith(security_origin));
+
+            // Create a nested worker and check the top level frame security
+            // origin of the GlobalScopeCreationParams.
+            {
+              auto* nested_worker_object =
+                  MakeGarbageCollected<DedicatedWorker>(
+                      worker_global_scope, script_url, WorkerOptions::Create());
+              nested_worker_object->UpdateStateIfNeeded();
+
+              auto nested_worker_params =
+                  nested_worker_object->CreateGlobalScopeCreationParams(
+                      script_url, network::mojom::ReferrerPolicy::kDefault,
+                      Vector<
+                          network::mojom::blink::ContentSecurityPolicyPtr>());
+              ASSERT_TRUE(
+                  nested_worker_params->top_level_frame_security_origin);
+              EXPECT_TRUE(nested_worker_params->top_level_frame_security_origin
+                              ->IsSameOriginDomainWith(security_origin));
+            }
+            std::move(quit).Run();
+          },
+          CrossThreadUnretained(GetWorkerThread()),
+          WTF::CrossThreadOnceClosure(run_loop.QuitClosure()),
+          CrossThreadUnretained(WorkerObject()
+                                    ->GetExecutionContext()
+                                    ->GetSecurityContext()
+                                    .GetSecurityOrigin()),
+          script_url));
+  run_loop.Run();
+}
+
 TEST_F(DedicatedWorkerTest,
        DispatchMessageEventOnWorkerGlobalScope_CannotDeserialize) {
   // Script must run for the worker global scope to dispatch messages.
diff --git a/third_party/blink/renderer/core/workers/dedicated_worker_test.h b/third_party/blink/renderer/core/workers/dedicated_worker_test.h
index 5066b973cfba2..1b92a6129aa46 100644
--- a/third_party/blink/renderer/core/workers/dedicated_worker_test.h
+++ b/third_party/blink/renderer/core/workers/dedicated_worker_test.h
@@ -6,6 +6,7 @@
 #define THIRD_PARTY_BLINK_RENDERER_CORE_WORKERS_DEDICATED_WORKER_TEST_H_
 
 #include "third_party/blink/renderer/core/testing/page_test_base.h"
+#include "third_party/blink/renderer/core/workers/global_scope_creation_params.h"
 #include "third_party/blink/renderer/platform/heap/persistent.h"
 
 namespace blink {
@@ -25,7 +26,7 @@ class DedicatedWorkerTest : public PageTestBase {
   DedicatedWorkerMessagingProxyForTest* WorkerMessagingProxy();
   DedicatedWorkerThreadForTest* GetWorkerThread();
 
-  void StartWorker();
+  void StartWorker(std::unique_ptr<GlobalScopeCreationParams> params = nullptr);
   void EvaluateClassicScript(const String& source_code);
   void WaitUntilWorkerIsRunning();
 
diff --git a/third_party/blink/renderer/core/workers/global_scope_creation_params.cc b/third_party/blink/renderer/core/workers/global_scope_creation_params.cc
index 9127750f01a10..932c97f3479d5 100644
--- a/third_party/blink/renderer/core/workers/global_scope_creation_params.cc
+++ b/third_party/blink/renderer/core/workers/global_scope_creation_params.cc
@@ -49,7 +49,8 @@ GlobalScopeCreationParams::GlobalScopeCreationParams(
     bool parent_is_isolated_context,
     InterfaceRegistry* interface_registry,
     scoped_refptr<base::SingleThreadTaskRunner>
-        agent_group_scheduler_compositor_task_runner)
+        agent_group_scheduler_compositor_task_runner,
+    const SecurityOrigin* top_level_frame_security_origin)
     : script_url(script_url),
       script_type(script_type),
       global_scope_name(global_scope_name),
@@ -88,7 +89,11 @@ GlobalScopeCreationParams::GlobalScopeCreationParams(
       parent_is_isolated_context(parent_is_isolated_context),
       interface_registry(interface_registry),
       agent_group_scheduler_compositor_task_runner(
-          std::move(agent_group_scheduler_compositor_task_runner)) {
+          std::move(agent_group_scheduler_compositor_task_runner)),
+      top_level_frame_security_origin(
+          top_level_frame_security_origin
+              ? top_level_frame_security_origin->IsolatedCopy()
+              : nullptr) {
   this->inherited_trial_features =
       std::make_unique<Vector<OriginTrialFeature>>();
   if (inherited_trial_features) {
diff --git a/third_party/blink/renderer/core/workers/global_scope_creation_params.h b/third_party/blink/renderer/core/workers/global_scope_creation_params.h
index 2432761962af5..273b09af048cc 100644
--- a/third_party/blink/renderer/core/workers/global_scope_creation_params.h
+++ b/third_party/blink/renderer/core/workers/global_scope_creation_params.h
@@ -82,7 +82,8 @@ struct CORE_EXPORT GlobalScopeCreationParams final {
       bool parent_is_isolated_context = false,
       InterfaceRegistry* interface_registry = nullptr,
       scoped_refptr<base::SingleThreadTaskRunner>
-          agent_group_scheduler_compositor_task_runner = nullptr);
+          agent_group_scheduler_compositor_task_runner = nullptr,
+      const SecurityOrigin* top_level_frame_security_origin = nullptr);
   GlobalScopeCreationParams(const GlobalScopeCreationParams&) = delete;
   GlobalScopeCreationParams& operator=(const GlobalScopeCreationParams&) =
       delete;
@@ -214,6 +215,11 @@ struct CORE_EXPORT GlobalScopeCreationParams final {
   // worker belongs to.
   scoped_refptr<base::SingleThreadTaskRunner>
       agent_group_scheduler_compositor_task_runner;
+
+  // The security origin of the top level frame associated with the worker. This
+  // can be used, for instance, to check if the top level frame has an opaque
+  // origin.
+  scoped_refptr<const SecurityOrigin> top_level_frame_security_origin;
 };
 
 }  // namespace blink
diff --git a/third_party/blink/renderer/core/workers/worker_global_scope.cc b/third_party/blink/renderer/core/workers/worker_global_scope.cc
index 7d7804e5f139d..c9a142b5daca5 100644
--- a/third_party/blink/renderer/core/workers/worker_global_scope.cc
+++ b/third_party/blink/renderer/core/workers/worker_global_scope.cc
@@ -620,7 +620,9 @@ WorkerGlobalScope::WorkerGlobalScope(
       time_origin_(time_origin),
       font_selector_(MakeGarbageCollected<OffscreenFontSelector>(this)),
       script_eval_state_(ScriptEvalState::kPauseAfterFetch),
-      ukm_source_id_(creation_params->ukm_source_id) {
+      ukm_source_id_(creation_params->ukm_source_id),
+      top_level_frame_security_origin_(
+          std::move(creation_params->top_level_frame_security_origin)) {
   InstanceCounters::IncrementCounter(
       InstanceCounters::kWorkerGlobalScopeCounter);
 
diff --git a/third_party/blink/renderer/core/workers/worker_global_scope.h b/third_party/blink/renderer/core/workers/worker_global_scope.h
index cb5d99ec41da3..3f34da163d86a 100644
--- a/third_party/blink/renderer/core/workers/worker_global_scope.h
+++ b/third_party/blink/renderer/core/workers/worker_global_scope.h
@@ -51,6 +51,7 @@
 #include "third_party/blink/renderer/platform/heap/garbage_collected.h"
 #include "third_party/blink/renderer/platform/loader/fetch/code_cache_host.h"
 #include "third_party/blink/renderer/platform/loader/fetch/url_loader/cached_metadata_handler.h"
+#include "third_party/blink/renderer/platform/weborigin/security_origin.h"
 #include "third_party/blink/renderer/platform/wtf/casting.h"
 #include "third_party/blink/renderer/platform/wtf/gc_plugin.h"
 #include "v8/include/v8-inspector.h"
@@ -254,6 +255,10 @@ class CORE_EXPORT WorkerGlobalScope
     return main_resource_identifier_;
   }
 
+  const SecurityOrigin* top_level_frame_security_origin() const {
+    return top_level_frame_security_origin_.get();
+  }
+
  protected:
   WorkerGlobalScope(std::unique_ptr<GlobalScopeCreationParams>,
                     WorkerThread*,
@@ -377,6 +382,11 @@ class CORE_EXPORT WorkerGlobalScope
   // script has completed loading. This is so that VT does not run while script
   // is being loaded.
   WebScopedVirtualTimePauser loading_virtual_time_pauser_;
+
+  // The security origin of the top level frame associated with the worker. This
+  // can be used, for instance, to check if the top level frame has an opaque
+  // origin.
+  scoped_refptr<const SecurityOrigin> top_level_frame_security_origin_;
 };
 
 template <>
