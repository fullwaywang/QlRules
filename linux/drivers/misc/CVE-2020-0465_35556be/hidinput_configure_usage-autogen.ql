/**
 * @name linux-35556bed836f8dc07ac55f69c8d17dce3e7f0e25-hidinput_configure_usage
 * @id cpp/linux/35556bed836f8dc07ac55f69c8d17dce3e7f0e25/hidinput-configure-usage
 * @description linux-35556bed836f8dc07ac55f69c8d17dce3e7f0e25-hidinput_configure_usage CVE-2020-0465
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vbit_565, AddressOfExpr target_1, AddressOfExpr target_2, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vbit_565
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_1.getOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation())
		and target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation().isBefore(target_2.getOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vbit_565, AddressOfExpr target_1) {
		target_1.getOperand().(VariableAccess).getTarget()=vbit_565
		and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("hid_map_usage")
		and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("hid_input *")
		and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("hid_usage *")
		and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(4).(Literal).getValue()="3"
		and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(5).(Literal).getValue()="40"
}

predicate func_2(Variable vbit_565, AddressOfExpr target_2) {
		target_2.getOperand().(VariableAccess).getTarget()=vbit_565
		and target_2.getParent().(VariableCall).getParent().(LTExpr).getLesserOperand().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="input_mapped"
		and target_2.getParent().(VariableCall).getParent().(LTExpr).getLesserOperand().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="driver"
		and target_2.getParent().(VariableCall).getParent().(LTExpr).getLesserOperand().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("hid_device *")
		and target_2.getParent().(VariableCall).getParent().(LTExpr).getLesserOperand().(VariableCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("hid_device *")
		and target_2.getParent().(VariableCall).getParent().(LTExpr).getLesserOperand().(VariableCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("hid_input *")
		and target_2.getParent().(VariableCall).getParent().(LTExpr).getLesserOperand().(VariableCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("hid_field *")
		and target_2.getParent().(VariableCall).getParent().(LTExpr).getLesserOperand().(VariableCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("hid_usage *")
		and target_2.getParent().(VariableCall).getParent().(LTExpr).getLesserOperand().(VariableCall).getArgument(5).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Variable vbit_565, AddressOfExpr target_1, AddressOfExpr target_2
where
not func_0(vbit_565, target_1, target_2, func)
and func_1(vbit_565, target_1)
and func_2(vbit_565, target_2)
and vbit_565.getType().hasName("unsigned long *")
and vbit_565.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
