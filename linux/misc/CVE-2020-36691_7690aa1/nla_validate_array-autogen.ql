/**
 * @name linux-7690aa1cdf7c4565ad6b013b324c28b685505e24-nla_validate_array
 * @id cpp/linux/7690aa1cdf7c4565ad6b013b324c28b685505e24/nla-validate-array
 * @description linux-7690aa1cdf7c4565ad6b013b324c28b685505e24-lib/nlattr.c-nla_validate_array CVE-2020-36691
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vmaxtype_70, Parameter vpolicy_71, Parameter vextack_72, Parameter vvalidate_73, Variable ventry_75, FunctionCall target_0) {
	target_0.getTarget().hasName("__nla_validate")
	and not target_0.getTarget().hasName("__nla_validate_parse")
	and target_0.getArgument(0).(FunctionCall).getTarget().hasName("nla_data")
	and target_0.getArgument(0).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ventry_75
	and target_0.getArgument(1).(FunctionCall).getTarget().hasName("nla_len")
	and target_0.getArgument(1).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ventry_75
	and target_0.getArgument(2).(VariableAccess).getTarget()=vmaxtype_70
	and target_0.getArgument(3).(VariableAccess).getTarget()=vpolicy_71
	and target_0.getArgument(4).(VariableAccess).getTarget()=vvalidate_73
	and target_0.getArgument(5).(VariableAccess).getTarget()=vextack_72
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_2(Function func) {
exists(AddExpr target_2 |
	target_2.getLeftOperand().(VariableAccess).getType().hasName("unsigned int")
	and target_2.getRightOperand().(Literal).getValue()="1"
	and target_2.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
	and target_2.getEnclosingFunction() = func)
}

from Function func, Parameter vmaxtype_70, Parameter vpolicy_71, Parameter vextack_72, Parameter vvalidate_73, Variable ventry_75, FunctionCall target_0
where
func_0(vmaxtype_70, vpolicy_71, vextack_72, vvalidate_73, ventry_75, target_0)
and not func_2(func)
and vmaxtype_70.getType().hasName("int")
and vpolicy_71.getType().hasName("const nla_policy *")
and vextack_72.getType().hasName("netlink_ext_ack *")
and vvalidate_73.getType().hasName("unsigned int")
and ventry_75.getType().hasName("const nlattr *")
and vmaxtype_70.getFunction() = func
and vpolicy_71.getFunction() = func
and vextack_72.getFunction() = func
and vvalidate_73.getFunction() = func
and ventry_75.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
