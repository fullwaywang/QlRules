/**
 * @name linux-45f6fad84cc305103b28d73482b344d7f5b76f39-ipv6_renew_options
 * @id cpp/linux/45f6fad84cc305103b28d73482b344d7f5b76f39/ipv6-renew-options
 * @description linux-45f6fad84cc305103b28d73482b344d7f5b76f39-net/ipv6/exthdrs.c-ipv6_renew_options CVE-2016-3841
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, SizeofExprOperator target_0) {
	target_0.getValue()="40"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vopt2_767, ExprStmt target_2, ExprStmt target_3, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("atomic_set")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="refcnt"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vopt2_767
	and target_1.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="1"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_2.getLocation())
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vopt2_767, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="tot_len"
	and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vopt2_767
	and target_2.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_3(Variable vopt2_767, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("__memset")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vopt2_767
	and target_3.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_3.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Variable vopt2_767, SizeofExprOperator target_0, ExprStmt target_2, ExprStmt target_3
where
func_0(func, target_0)
and not func_1(vopt2_767, target_2, target_3, func)
and func_2(vopt2_767, target_2)
and func_3(vopt2_767, target_3)
and vopt2_767.getType().hasName("ipv6_txoptions *")
and vopt2_767.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
