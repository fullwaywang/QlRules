/**
 * @name curl-3c9e021f86872baae412a427e807fbfa2f3e8-conn_is_conn
 * @id cpp/curl/3c9e021f86872baae412a427e807fbfa2f3e8/conn-is-conn
 * @description curl-3c9e021f86872baae412a427e807fbfa2f3e8-lib/connect.c-conn_is_conn CVE-2020-8231
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vconn_1370) {
	exists(PointerFieldAccess target_0 |
		target_0.getTarget().getName()="connection_id"
		and target_0.getQualifier().(VariableAccess).getTarget()=vconn_1370)
}

predicate func_1(Variable vf_1372) {
	exists(PointerFieldAccess target_1 |
		target_1.getTarget().getName()="id_tofind"
		and target_1.getQualifier().(VariableAccess).getTarget()=vf_1372)
}

predicate func_2(Parameter vconn_1370, Variable vf_1372, EqualityOperation target_10) {
	exists(AssignExpr target_2 |
		target_2.getLValue().(PointerFieldAccess).getTarget().getName()="found"
		and target_2.getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vf_1372
		and target_2.getRValue().(VariableAccess).getTarget()=vconn_1370
		and target_10.getAnOperand().(VariableAccess).getLocation().isBefore(target_2.getRValue().(VariableAccess).getLocation()))
}

predicate func_3(Variable vf_1372, PointerFieldAccess target_3) {
		target_3.getTarget().getName()="found"
		and target_3.getQualifier().(VariableAccess).getTarget()=vf_1372
		and target_3.getParent().(AssignExpr).getLValue() = target_3
		and target_3.getParent().(AssignExpr).getRValue() instanceof Literal
}

/*predicate func_4(Variable vf_1372, VariableAccess target_4) {
		target_4.getTarget()=vf_1372
}

*/
predicate func_5(Parameter vconn_1370, Variable vf_1372, BlockStmt target_11, VariableAccess target_5) {
		target_5.getTarget()=vconn_1370
		and target_5.getParent().(EQExpr).getAnOperand().(PointerFieldAccess).getTarget().getName()="tofind"
		and target_5.getParent().(EQExpr).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vf_1372
		and target_5.getParent().(EQExpr).getParent().(IfStmt).getThen()=target_11
}

predicate func_6(Variable vf_1372, PointerFieldAccess target_6) {
		target_6.getTarget().getName()="tofind"
		and target_6.getQualifier().(VariableAccess).getTarget()=vf_1372
}

predicate func_7(Variable vf_1372, AssignExpr target_7) {
		target_7.getLValue().(PointerFieldAccess).getTarget().getName()="found"
		and target_7.getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vf_1372
		and target_7.getRValue().(Literal).getValue()="1"
}

predicate func_10(Parameter vconn_1370, Variable vf_1372, EqualityOperation target_10) {
		target_10.getAnOperand().(VariableAccess).getTarget()=vconn_1370
		and target_10.getAnOperand().(PointerFieldAccess).getTarget().getName()="tofind"
		and target_10.getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vf_1372
}

predicate func_11(BlockStmt target_11) {
		target_11.getStmt(0).(ExprStmt).getExpr() instanceof AssignExpr
		and target_11.getStmt(1).(ReturnStmt).getExpr().(Literal).getValue()="1"
}

from Function func, Parameter vconn_1370, Variable vf_1372, PointerFieldAccess target_3, VariableAccess target_5, PointerFieldAccess target_6, AssignExpr target_7, EqualityOperation target_10, BlockStmt target_11
where
not func_0(vconn_1370)
and not func_1(vf_1372)
and not func_2(vconn_1370, vf_1372, target_10)
and func_3(vf_1372, target_3)
and func_5(vconn_1370, vf_1372, target_11, target_5)
and func_6(vf_1372, target_6)
and func_7(vf_1372, target_7)
and func_10(vconn_1370, vf_1372, target_10)
and func_11(target_11)
and vconn_1370.getType().hasName("connectdata *")
and vf_1372.getType().hasName("connfind *")
and vconn_1370.getFunction() = func
and vf_1372.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
