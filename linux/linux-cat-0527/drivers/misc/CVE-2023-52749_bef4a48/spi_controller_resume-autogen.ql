/**
 * @name linux-bef4a48f4ef798c4feddf045d49e53c8a97d5e37-spi_controller_resume
 * @id cpp/linux/bef4a48f4ef798c4feddf045d49e53c8a97d5e37/spi-controller-resume
 * @description linux-bef4a48f4ef798c4feddf045d49e53c8a97d5e37-drivers/spi/spi.c-spi_controller_resume CVE-2023-52749
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func) {
exists(Initializer target_0 |
	target_0.getExpr() instanceof Literal
	and target_0.getExpr().getEnclosingFunction() = func)
}

predicate func_1(Parameter vctlr_3336, IfStmt target_7, NotExpr target_5, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("__spi_mark_resumed")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vctlr_3336
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_7.getLocation())
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vret_3338, Parameter vctlr_3336, Function func, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_3338
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("spi_start_queue")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vctlr_3336
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
}

predicate func_3(Parameter vctlr_3336, ReturnStmt target_6, PointerFieldAccess target_3) {
	target_3.getTarget().getName()="queued"
	and target_3.getQualifier().(VariableAccess).getTarget()=vctlr_3336
	and target_3.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_6
}

predicate func_5(Parameter vctlr_3336, ReturnStmt target_6, NotExpr target_5) {
	target_5.getOperand().(PointerFieldAccess).getTarget().getName()="queued"
	and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctlr_3336
	and target_5.getParent().(IfStmt).getThen()=target_6
}

predicate func_6(NotExpr target_5, Function func, ReturnStmt target_6) {
	target_6.getExpr() instanceof Literal
	and target_6.getParent().(IfStmt).getCondition()=target_5
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Function func, IfStmt target_7) {
	target_7.getCondition() instanceof NotExpr
	and target_7.getThen() instanceof ReturnStmt
	and target_7.getEnclosingFunction() = func
}

from Function func, Variable vret_3338, Parameter vctlr_3336, ExprStmt target_2, PointerFieldAccess target_3, NotExpr target_5, ReturnStmt target_6, IfStmt target_7
where
not func_0(func)
and not func_1(vctlr_3336, target_7, target_5, func)
and func_2(vret_3338, vctlr_3336, func, target_2)
and func_3(vctlr_3336, target_6, target_3)
and func_5(vctlr_3336, target_6, target_5)
and func_6(target_5, func, target_6)
and func_7(func, target_7)
and vret_3338.getType().hasName("int")
and vctlr_3336.getType().hasName("spi_controller *")
and vret_3338.(LocalVariable).getFunction() = func
and vctlr_3336.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
