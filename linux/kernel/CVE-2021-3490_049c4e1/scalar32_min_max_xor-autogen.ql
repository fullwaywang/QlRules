/**
 * @name linux-049c4e13714ecbca567b4d5f6d563f05d431c80e-scalar32_min_max_xor
 * @id cpp/linux/049c4e13714ecbca567b4d5f6d563f05d431c80e/scalar32-min-max-xor
 * @description linux-049c4e13714ecbca567b4d5f6d563f05d431c80e-kernel/bpf/verifier.c-scalar32_min_max_xor CVE-2021-3490
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vdst_reg_7219, Variable vvar32_off_7224, LogicalAndExpr target_2, FunctionCall target_3, ExprStmt target_4) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("__mark_reg32_known")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdst_reg_7219
	and target_0.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="value"
	and target_0.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vvar32_off_7224
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_3.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(LogicalAndExpr target_2, Function func, ReturnStmt target_1) {
	target_1.getParent().(IfStmt).getCondition()=target_2
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, LogicalAndExpr target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget().getType().hasName("bool")
	and target_2.getRightOperand().(VariableAccess).getTarget().getType().hasName("bool")
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Parameter vdst_reg_7219, FunctionCall target_3) {
	target_3.getTarget().hasName("tnum_subreg")
	and target_3.getArgument(0).(PointerFieldAccess).getTarget().getName()="var_off"
	and target_3.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_reg_7219
}

predicate func_4(Parameter vdst_reg_7219, Variable vvar32_off_7224, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="u32_min_value"
	and target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_reg_7219
	and target_4.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getTarget().getName()="value"
	and target_4.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vvar32_off_7224
}

from Function func, Parameter vdst_reg_7219, Variable vvar32_off_7224, ReturnStmt target_1, LogicalAndExpr target_2, FunctionCall target_3, ExprStmt target_4
where
not func_0(vdst_reg_7219, vvar32_off_7224, target_2, target_3, target_4)
and func_1(target_2, func, target_1)
and func_2(func, target_2)
and func_3(vdst_reg_7219, target_3)
and func_4(vdst_reg_7219, vvar32_off_7224, target_4)
and vdst_reg_7219.getType().hasName("bpf_reg_state *")
and vvar32_off_7224.getType().hasName("tnum")
and vdst_reg_7219.getFunction() = func
and vvar32_off_7224.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
