/**
 * @name linux-44efc269db7929f6275a1fa927ef082e533ecde0-adu_disconnect
 * @id cpp/linux/44efc269db7929f6275a1fa927ef082e533ecde0/adu-disconnect
 * @description linux-44efc269db7929f6275a1fa927ef082e533ecde0-drivers/usb/misc/adutux.c-adu_disconnect CVE-2019-19523
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vinterface_759, Variable vadu_class, ExprStmt target_3, ExprStmt target_0) {
	target_0.getExpr().(FunctionCall).getTarget().hasName("usb_deregister_dev")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vinterface_759
	and target_0.getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vadu_class
	and target_3.getLocation().isBefore(target_0.getLocation())
}

predicate func_1(Variable vadutux_mutex, ExprStmt target_4, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vadutux_mutex
	and target_1.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_4.getLocation().isBefore(target_1.getLocation())
}

predicate func_2(Parameter vinterface_759, ExprStmt target_4, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("usb_set_intfdata")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vinterface_759
	and target_2.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_4.getLocation().isBefore(target_2.getLocation())
}

predicate func_3(Function func, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="udev"
	and target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("adu_device *")
	and target_3.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Function func, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="mtx"
	and target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("adu_device *")
	and target_4.getEnclosingFunction() = func
}

from Function func, Parameter vinterface_759, Variable vadu_class, Variable vadutux_mutex, ExprStmt target_0, ExprStmt target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4
where
func_0(vinterface_759, vadu_class, target_3, target_0)
and func_1(vadutux_mutex, target_4, target_1)
and func_2(vinterface_759, target_4, target_2)
and func_3(func, target_3)
and func_4(func, target_4)
and vinterface_759.getType().hasName("usb_interface *")
and vadu_class.getType().hasName("usb_class_driver")
and vadutux_mutex.getType().hasName("mutex")
and vinterface_759.getFunction() = func
and not vadu_class.getParentScope+() = func
and not vadutux_mutex.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
