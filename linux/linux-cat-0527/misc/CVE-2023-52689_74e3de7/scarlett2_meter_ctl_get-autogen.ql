/**
 * @name linux-74e3de7cdcc31ce75ab42350ae0946eff62a2da2-scarlett2_meter_ctl_get
 * @id cpp/linux/74e3de7cdcc31ce75ab42350ae0946eff62a2da2/scarlett2-meter-ctl-get
 * @description linux-74e3de7cdcc31ce75ab42350ae0946eff62a2da2-sound/usb/mixer_scarlett2.c-scarlett2_meter_ctl_get CVE-2023-52689
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vprivate_3878, ExprStmt target_6, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="data_mutex"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vprivate_3878
	and target_0.getExpr().(FunctionCall).getArgument(1) instanceof Literal
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_6.getLocation()))
}

predicate func_1(RelationalOperation target_7, Function func) {
exists(GotoStmt target_1 |
	target_1.getName() ="unlock"
	and target_1.getParent().(IfStmt).getCondition()=target_7
	and target_1.getEnclosingFunction() = func)
}

predicate func_2(Variable vprivate_3878, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="data_mutex"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vprivate_3878
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getFollowingStmt() instanceof ReturnStmt)
}

predicate func_3(Variable verr_3881, RelationalOperation target_7, ReturnStmt target_3) {
	target_3.getExpr().(VariableAccess).getTarget()=verr_3881
	and target_3.getParent().(IfStmt).getCondition()=target_7
}

predicate func_5(Function func, ReturnStmt target_5) {
	target_5.getExpr() instanceof Literal
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

predicate func_6(Variable verr_3881, ExprStmt target_6) {
	target_6.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_3881
	and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("scarlett2_usb_get_meter_levels")
	and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="mixer"
	and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="head"
	and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("usb_mixer_elem_info *")
	and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="channels"
	and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("usb_mixer_elem_info *")
	and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("u16[65]")
}

predicate func_7(Variable verr_3881, RelationalOperation target_7) {
	 (target_7 instanceof GTExpr or target_7 instanceof LTExpr)
	and target_7.getLesserOperand().(VariableAccess).getTarget()=verr_3881
	and target_7.getGreaterOperand().(Literal).getValue()="0"
}

from Function func, Variable vprivate_3878, Variable verr_3881, ReturnStmt target_3, ReturnStmt target_5, ExprStmt target_6, RelationalOperation target_7
where
not func_0(vprivate_3878, target_6, func)
and not func_1(target_7, func)
and not func_2(vprivate_3878, func)
and func_3(verr_3881, target_7, target_3)
and func_5(func, target_5)
and func_6(verr_3881, target_6)
and func_7(verr_3881, target_7)
and vprivate_3878.getType().hasName("scarlett2_data *")
and verr_3881.getType().hasName("int")
and vprivate_3878.(LocalVariable).getFunction() = func
and verr_3881.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
