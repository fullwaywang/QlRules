/**
 * @name linux-6d19628f539fccf899298ff02ee4c73e4bf6df3f-smp_cmd_public_key
 * @id cpp/linux/6d19628f539fccf899298ff02ee4c73e4bf6df3f/smp-cmd-public-key
 * @description linux-6d19628f539fccf899298ff02ee4c73e4bf6df3f-smp_cmd_public_key CVE-2021-0129
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vkey_2721, Variable vsmp_2724, Variable vhdev_2725, PointerDereferenceExpr target_1, ExprStmt target_2, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("test_bit")
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="flags"
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsmp_2724
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("crypto_memneq")
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vkey_2721
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="local_pk"
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsmp_2724
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(2).(Literal).getValue()="64"
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("bt_err")
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="%s: Remote and local public keys are identical\n"
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="name"
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vhdev_2725
		and target_0.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(Literal).getValue()="8"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_1.getOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_2.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation()))
}

predicate func_1(Variable vkey_2721, PointerDereferenceExpr target_1) {
		target_1.getOperand().(VariableAccess).getTarget()=vkey_2721
}

predicate func_2(Variable vkey_2721, Variable vsmp_2724, ExprStmt target_2) {
		target_2.getExpr().(FunctionCall).getTarget().hasName("__memcpy")
		and target_2.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="remote_pk"
		and target_2.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsmp_2724
		and target_2.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vkey_2721
		and target_2.getExpr().(FunctionCall).getArgument(2).(Literal).getValue()="64"
}

from Function func, Variable vkey_2721, Variable vsmp_2724, Variable vhdev_2725, PointerDereferenceExpr target_1, ExprStmt target_2
where
not func_0(vkey_2721, vsmp_2724, vhdev_2725, target_1, target_2, func)
and func_1(vkey_2721, target_1)
and func_2(vkey_2721, vsmp_2724, target_2)
and vkey_2721.getType().hasName("smp_cmd_public_key *")
and vsmp_2724.getType().hasName("smp_chan *")
and vhdev_2725.getType().hasName("hci_dev *")
and vkey_2721.(LocalVariable).getFunction() = func
and vsmp_2724.(LocalVariable).getFunction() = func
and vhdev_2725.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
