/**
 * @name linux-530ca2c9bd6949c72c9b5cfc330cb3dbccaa3f5b-blk_mq_queue_tag_busy_iter
 * @id cpp/linux/530ca2c9bd6949c72c9b5cfc330cb3dbccaa3f5b/blk-mq-queue-tag-busy-iter
 * @description linux-530ca2c9bd6949c72c9b5cfc330cb3dbccaa3f5b-block/blk-mq-tag.c-blk_mq_queue_tag_busy_iter CVE-2020-0433
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vq_317, BlockStmt target_8, FunctionCall target_0) {
		target_0.getTarget().hasName("percpu_ref_is_zero")
		and not target_0.getTarget().hasName("percpu_ref_tryget")
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="q_usage_counter"
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vq_317
		and target_0.getParent().(IfStmt).getThen()=target_8
}

predicate func_1(Function func, FunctionCall target_1) {
		target_1.getTarget().hasName("rcu_read_lock")
		and not target_1.getTarget().hasName("blk_queue_exit")
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Parameter vq_317, BlockStmt target_8, LogicalAndExpr target_9) {
	exists(NotExpr target_2 |
		target_2.getOperand().(FunctionCall).getTarget().hasName("percpu_ref_tryget")
		and target_2.getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="q_usage_counter"
		and target_2.getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vq_317
		and target_2.getParent().(IfStmt).getThen()=target_8
		and target_2.getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_9.getAnOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_4(FunctionCall target_0, Function func, ReturnStmt target_4) {
		target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_0
		and target_4.getEnclosingFunction() = func
}

predicate func_5(Function func, ExprStmt target_5) {
		target_5.getExpr() instanceof FunctionCall
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

predicate func_6(Function func, FunctionCall target_6) {
		target_6.getTarget().hasName("rcu_read_unlock")
		and target_6.getEnclosingFunction() = func
}

predicate func_7(Function func, ExprStmt target_7) {
		target_7.getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_7
}

predicate func_8(Function func, BlockStmt target_8) {
		target_8.getStmt(0).(ExprStmt).getExpr() instanceof FunctionCall
		and target_8.getStmt(1) instanceof ReturnStmt
		and target_8.getEnclosingFunction() = func
}

predicate func_9(Parameter vq_317, LogicalAndExpr target_9) {
		target_9.getAnOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_9.getAnOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getTarget().getName()="nr_hw_queues"
		and target_9.getAnOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vq_317
		and target_9.getAnOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("blk_mq_hw_ctx *")
		and target_9.getAnOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="queue_hw_ctx"
		and target_9.getAnOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
		and target_9.getAnOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(Literal).getValue()="1"
}

from Function func, Parameter vq_317, FunctionCall target_0, FunctionCall target_1, ReturnStmt target_4, ExprStmt target_5, FunctionCall target_6, ExprStmt target_7, BlockStmt target_8, LogicalAndExpr target_9
where
func_0(vq_317, target_8, target_0)
and func_1(func, target_1)
and not func_2(vq_317, target_8, target_9)
and func_4(target_0, func, target_4)
and func_5(func, target_5)
and func_6(func, target_6)
and func_7(func, target_7)
and func_8(func, target_8)
and func_9(vq_317, target_9)
and vq_317.getType().hasName("request_queue *")
and vq_317.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
