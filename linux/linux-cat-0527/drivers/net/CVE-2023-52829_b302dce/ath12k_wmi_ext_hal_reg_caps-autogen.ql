/**
 * @name linux-b302dce3d9edea5b93d1902a541684a967f3c63c-ath12k_wmi_ext_hal_reg_caps
 * @id cpp/linux/b302dce3d9edea5b93d1902a541684a967f3c63c/ath12k-wmi-ext-hal-reg-caps
 * @description linux-b302dce3d9edea5b93d1902a541684a967f3c63c-drivers/net/wireless/ath/ath12k/wmi.c-ath12k_wmi_ext_hal_reg_caps CVE-2023-52829
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vreg_cap_3856, Parameter vsoc_3851, ExprStmt target_1, AddressOfExpr target_2, ExprStmt target_3) {
exists(IfStmt target_0 |
	target_0.getCondition().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getTarget().getName()="phy_id"
	and target_0.getCondition().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_cap_3856
	and target_0.getCondition().(RelationalOperation).getLesserOperand().(Literal).getValue()="3"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("ath12k_warn")
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsoc_3851
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="unexpected phy id %u\n"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(ValueFieldAccess).getTarget().getName()="phy_id"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_cap_3856
	and target_0.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-22"
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vreg_cap_3856, Parameter vsoc_3851, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="hal_reg_cap"
	and target_1.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsoc_3851
	and target_1.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(ValueFieldAccess).getTarget().getName()="phy_id"
	and target_1.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_cap_3856
	and target_1.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vreg_cap_3856
}

predicate func_2(Variable vreg_cap_3856, AddressOfExpr target_2) {
	target_2.getOperand().(VariableAccess).getTarget()=vreg_cap_3856
}

predicate func_3(Parameter vsoc_3851, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("ath12k_warn")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsoc_3851
	and target_3.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="failed to extract reg cap %d\n"
	and target_3.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("u32")
}

from Function func, Variable vreg_cap_3856, Parameter vsoc_3851, ExprStmt target_1, AddressOfExpr target_2, ExprStmt target_3
where
not func_0(vreg_cap_3856, vsoc_3851, target_1, target_2, target_3)
and func_1(vreg_cap_3856, vsoc_3851, target_1)
and func_2(vreg_cap_3856, target_2)
and func_3(vsoc_3851, target_3)
and vreg_cap_3856.getType().hasName("ath12k_wmi_hal_reg_capabilities_ext_arg")
and vsoc_3851.getType().hasName("ath12k_base *")
and vreg_cap_3856.(LocalVariable).getFunction() = func
and vsoc_3851.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
