/**
 * @name linux-8cb861e9e3c9a55099ad3d08e1a3b653d29c33ca-vmx_vcpu_enter_exit
 * @id cpp/linux/8cb861e9e3c9a55099ad3d08e1a3b653d29c33ca/vmx-vcpu-enter-exit
 * @description linux-8cb861e9e3c9a55099ad3d08e1a3b653d29c33ca-arch/x86/kvm/vmx/vmx.c-vmx_vcpu_enter_exit CVE-2022-21123
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvcpu_6766, StmtExpr target_1, ExprStmt target_2, EqualityOperation target_3) {
exists(IfStmt target_0 |
	target_0.getCondition().(LogicalAndExpr).getLeftOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(BuiltInOperation).getValue()="0"
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(FunctionCall).getTarget().hasName("kvm_arch_has_assigned_device")
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="kvm"
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_6766
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mds_clear_cpu_buffers")
	and target_0.getParent().(IfStmt).getParent().(IfStmt).getElse().(IfStmt).getElse()=target_0
	and target_0.getParent().(IfStmt).getParent().(IfStmt).getCondition()=target_1
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Function func, StmtExpr target_1) {
	target_1.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(BuiltInOperation).getValue()="0"
	and target_1.getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("bool")
	and target_1.getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("arch_static_branch_jump")
	and target_1.getStmt().(BlockStmt).getStmt(1).(IfStmt).getElse().(IfStmt).getCondition().(BuiltInOperation).getValue()="1"
	and target_1.getStmt().(BlockStmt).getStmt(1).(IfStmt).getElse().(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("bool")
	and target_1.getStmt().(BlockStmt).getStmt(1).(IfStmt).getElse().(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("arch_static_branch")
	and target_1.getStmt().(BlockStmt).getStmt(1).(IfStmt).getElse().(IfStmt).getElse().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("bool")
	and target_1.getStmt().(BlockStmt).getStmt(1).(IfStmt).getElse().(IfStmt).getElse().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("____wrong_branch_error")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Parameter vvcpu_6766, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("vmx_l1d_flush")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_6766
}

predicate func_3(Parameter vvcpu_6766, EqualityOperation target_3) {
	target_3.getLeftOperand().(ValueFieldAccess).getTarget().getName()="cr2"
	and target_3.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="arch"
	and target_3.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_6766
	and target_3.getRightOperand().(FunctionCall).getTarget().hasName("native_read_cr2")
}

from Function func, Parameter vvcpu_6766, StmtExpr target_1, ExprStmt target_2, EqualityOperation target_3
where
not func_0(vvcpu_6766, target_1, target_2, target_3)
and func_1(func, target_1)
and func_2(vvcpu_6766, target_2)
and func_3(vvcpu_6766, target_3)
and vvcpu_6766.getType().hasName("kvm_vcpu *")
and vvcpu_6766.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
