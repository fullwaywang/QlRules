/**
 * @name linux-37a060b64ae83b76600d187d76591ce488ab836b-mem_cgroup_alloc
 * @id cpp/linux/37a060b64ae83b76600d187d76591ce488ab836b/mem-cgroup-alloc
 * @description linux-37a060b64ae83b76600d187d76591ce488ab836b-mm/memcontrol.c-mem_cgroup_alloc CVE-2024-43892
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vmem_cgroup_idr, FunctionCall target_0) {
	exists(AssignExpr obj_0 | obj_0=target_0.getParent() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="id"
				and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("mem_cgroup *")
			)
			and obj_1.getTarget().getName()="id"
		)
		and obj_0.getRValue() = target_0
	)
	and target_0.getTarget().hasName("idr_alloc")
	and not target_0.getTarget().hasName("mem_cgroup_alloc_id")
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vmem_cgroup_idr
	and target_0.getArgument(1).(Literal).getValue()="0"
	and target_0.getArgument(2).(Literal).getValue()="1"
	and target_0.getArgument(3).(AddExpr).getValue()="65536"
	and target_0.getArgument(4).(BitwiseOrExpr).getValue()="3264"
}

predicate func_1(Function func, BitwiseOrExpr target_1) {
	target_1.getValue()="3136"
	and target_1.getParent().(BitwiseOrExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vmem_cgroup_idr, VariableAccess target_2) {
	target_2.getTarget()=vmem_cgroup_idr
	and target_2.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_3(Function func, SubExpr target_3) {
	target_3.getValue()="65535"
	and target_3.getParent().(AddExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
	and target_3.getEnclosingFunction() = func
}

from Function func, Variable vmem_cgroup_idr, FunctionCall target_0, BitwiseOrExpr target_1, VariableAccess target_2, SubExpr target_3
where
func_0(vmem_cgroup_idr, target_0)
and func_1(func, target_1)
and func_2(vmem_cgroup_idr, target_2)
and func_3(func, target_3)
and vmem_cgroup_idr.getType().hasName("idr")
and not vmem_cgroup_idr.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
