/**
 * @name linux-acff81ec2c79492b180fade3c2894425cd35a545-ovl_setattr
 * @id cpp/linux/acff81ec2c79492b180fade3c2894425cd35a545/ovl-setattr
 * @description linux-acff81ec2c79492b180fade3c2894425cd35a545-fs/overlayfs/inode.c-ovl_setattr CVE-2015-8660
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vattr_43, Variable verr_45, Parameter vdentry_43, FunctionCall target_0) {
	target_0.getTarget().hasName("ovl_copy_up_last")
	and not target_0.getTarget().hasName("ovl_copy_up")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vdentry_43
	and target_0.getArgument(1).(VariableAccess).getTarget()=vattr_43
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_45
}

predicate func_1(Variable verr_45, BlockStmt target_4, IfStmt target_5) {
exists(NotExpr target_1 |
	target_1.getOperand().(VariableAccess).getTarget()=verr_45
	and target_1.getParent().(IfStmt).getThen()=target_4
	and target_5.getCondition().(VariableAccess).getLocation().isBefore(target_1.getOperand().(VariableAccess).getLocation()))
}

predicate func_2(Variable vupperdentry_46, Parameter vdentry_43, Function func, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vupperdentry_46
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("ovl_dentry_upper")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdentry_43
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
}

predicate func_3(Variable vupperdentry_46, BlockStmt target_4, ExprStmt target_2, AddressOfExpr target_6, VariableAccess target_3) {
	target_3.getTarget()=vupperdentry_46
	and target_3.getParent().(IfStmt).getThen()=target_4
	and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_3.getLocation())
	and target_3.getLocation().isBefore(target_6.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_4(Variable vupperdentry_46, BlockStmt target_4) {
	target_4.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_4.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="i_mutex"
	and target_4.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="d_inode"
	and target_4.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vupperdentry_46
	and target_4.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
}

predicate func_5(Variable verr_45, IfStmt target_5) {
	target_5.getCondition().(VariableAccess).getTarget()=verr_45
	and target_5.getThen().(GotoStmt).getName() ="out"
}

predicate func_6(Variable vupperdentry_46, AddressOfExpr target_6) {
	target_6.getOperand().(PointerFieldAccess).getTarget().getName()="i_mutex"
	and target_6.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="d_inode"
	and target_6.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vupperdentry_46
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
}

from Function func, Parameter vattr_43, Variable verr_45, Variable vupperdentry_46, Parameter vdentry_43, FunctionCall target_0, ExprStmt target_2, VariableAccess target_3, BlockStmt target_4, IfStmt target_5, AddressOfExpr target_6
where
func_0(vattr_43, verr_45, vdentry_43, target_0)
and not func_1(verr_45, target_4, target_5)
and func_2(vupperdentry_46, vdentry_43, func, target_2)
and func_3(vupperdentry_46, target_4, target_2, target_6, target_3)
and func_4(vupperdentry_46, target_4)
and func_5(verr_45, target_5)
and func_6(vupperdentry_46, target_6)
and vattr_43.getType().hasName("iattr *")
and verr_45.getType().hasName("int")
and vupperdentry_46.getType().hasName("dentry *")
and vdentry_43.getType().hasName("dentry *")
and vattr_43.getFunction() = func
and verr_45.(LocalVariable).getFunction() = func
and vupperdentry_46.(LocalVariable).getFunction() = func
and vdentry_43.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
