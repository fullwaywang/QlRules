/**
 * @name linux-353050be4c19e102178ccc05988101887c25ae53-bpf_map_mmap_open
 * @id cpp/linux/353050be4c19e102178ccc05988101887c25ae53/bpf-map-mmap-open
 * @description linux-353050be4c19e102178ccc05988101887c25ae53-bpf_map_mmap_open CVE-2021-4001
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vmap_602, FunctionCall target_0) {
		target_0.getTarget().hasName("mutex_lock_nested")
		and not target_0.getTarget().hasName("bpf_map_write_active_inc")
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="freeze_mutex"
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmap_602
		and target_0.getArgument(1).(Literal).getValue()="0"
}

predicate func_1(Variable vmap_602, VariableAccess target_1) {
		target_1.getTarget()=vmap_602
		and target_1.getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_2(Variable vmap_602, ExprStmt target_3, PointerFieldAccess target_2) {
		target_2.getTarget().getName()="freeze_mutex"
		and target_2.getQualifier().(VariableAccess).getTarget()=vmap_602
		and target_2.getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(PostfixIncrExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_3(Variable vmap_602, BitwiseAndExpr target_6, ExprStmt target_3) {
		target_3.getExpr().(PostfixIncrExpr).getOperand().(PointerFieldAccess).getTarget().getName()="writecnt"
		and target_3.getExpr().(PostfixIncrExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmap_602
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_4(Variable vmap_602, BitwiseAndExpr target_6, ExprStmt target_4) {
		target_4.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
		and target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="freeze_mutex"
		and target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmap_602
		and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_6(Function func, BitwiseAndExpr target_6) {
		target_6.getLeftOperand().(PointerFieldAccess).getTarget().getName()="vm_flags"
		and target_6.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("vm_area_struct *")
		and target_6.getRightOperand().(Literal).getValue()="32"
		and target_6.getEnclosingFunction() = func
}

from Function func, Variable vmap_602, FunctionCall target_0, VariableAccess target_1, PointerFieldAccess target_2, ExprStmt target_3, ExprStmt target_4, BitwiseAndExpr target_6
where
func_0(vmap_602, target_0)
and func_1(vmap_602, target_1)
and func_2(vmap_602, target_3, target_2)
and func_3(vmap_602, target_6, target_3)
and func_4(vmap_602, target_6, target_4)
and func_6(func, target_6)
and vmap_602.getType().hasName("bpf_map *")
and vmap_602.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
