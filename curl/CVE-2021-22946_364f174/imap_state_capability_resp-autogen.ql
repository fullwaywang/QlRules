/**
 * @name curl-364f174724ef115-imap_state_capability_resp
 * @id cpp/curl/364f174724ef115/imap-state-capability-resp
 * @description curl-364f174724ef115-lib/imap.c-imap_state_capability_resp CVE-2021-22946
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, StringLiteral target_0) {
		target_0.getValue()="STARTTLS not supported."
		and not target_0.getValue()="STARTTLS not available."
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vimapc_880, BlockStmt target_13, IfStmt target_10) {
	exists(LogicalAndExpr target_1 |
		target_1.getAnOperand().(LogicalAndExpr).getAnOperand() instanceof EqualityOperation
		and target_1.getAnOperand().(LogicalAndExpr).getAnOperand().(PointerFieldAccess).getTarget().getName()="tls_supported"
		and target_1.getAnOperand().(LogicalAndExpr).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vimapc_880
		and target_1.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="preauth"
		and target_1.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vimapc_880
		and target_1.getParent().(IfStmt).getThen()=target_13
		and target_1.getAnOperand().(LogicalAndExpr).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_10.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(ExprStmt target_14, Function func) {
	exists(RelationalOperation target_2 |
		 (target_2 instanceof GEExpr or target_2 instanceof LEExpr)
		and target_2.getLesserOperand() instanceof ValueFieldAccess
		and target_2.getGreaterOperand() instanceof EnumConstantAccess
		and target_2.getParent().(IfStmt).getThen()=target_14
		and target_2.getEnclosingFunction() = func)
}

predicate func_3(Parameter vdata_874, ValueFieldAccess target_3) {
		target_3.getTarget().getName()="use_ssl"
		and target_3.getQualifier().(PointerFieldAccess).getTarget().getName()="set"
		and target_3.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdata_874
}

predicate func_4(Variable vresult_878, Variable vconn_879, Parameter vdata_874, AssignExpr target_4) {
		target_4.getLValue().(VariableAccess).getTarget()=vresult_878
		and target_4.getRValue().(FunctionCall).getTarget().hasName("imap_perform_authentication")
		and target_4.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdata_874
		and target_4.getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vconn_879
}

predicate func_5(Parameter vimapcode_875, BlockStmt target_15, EqualityOperation target_5) {
		target_5.getAnOperand().(VariableAccess).getTarget()=vimapcode_875
		and target_5.getAnOperand().(Literal).getValue()="1"
		and target_5.getParent().(IfStmt).getThen()=target_15
}

predicate func_6(Variable vconn_879, Parameter vdata_874, BlockStmt target_13, LogicalAndExpr target_6) {
		target_6.getAnOperand().(ValueFieldAccess).getTarget().getName()="use_ssl"
		and target_6.getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="set"
		and target_6.getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdata_874
		and target_6.getAnOperand().(NotExpr).getOperand().(ValueFieldAccess).getTarget().getName()="use"
		and target_6.getAnOperand().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="ssl"
		and target_6.getAnOperand().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vconn_879
		and target_6.getAnOperand().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(Literal).getValue()="0"
		and target_6.getParent().(IfStmt).getThen()=target_13
}

predicate func_7(Variable vimapc_880, ExprStmt target_8, PointerFieldAccess target_7) {
		target_7.getTarget().getName()="tls_supported"
		and target_7.getQualifier().(VariableAccess).getTarget()=vimapc_880
		and target_7.getParent().(IfStmt).getThen()=target_8
}

predicate func_8(Variable vresult_878, Variable vconn_879, Parameter vdata_874, PointerFieldAccess target_7, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vresult_878
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("imap_perform_starttls")
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdata_874
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vconn_879
		and target_8.getParent().(IfStmt).getCondition()=target_7
}

predicate func_10(Variable vresult_878, Variable vconn_879, Variable vimapc_880, Parameter vdata_874, LogicalAndExpr target_6, IfStmt target_10) {
		target_10.getCondition().(PointerFieldAccess).getTarget().getName()="tls_supported"
		and target_10.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vimapc_880
		and target_10.getThen() instanceof ExprStmt
		and target_10.getElse().(IfStmt).getCondition().(EqualityOperation).getAnOperand() instanceof ValueFieldAccess
		and target_10.getElse().(IfStmt).getCondition().(EqualityOperation).getAnOperand() instanceof EnumConstantAccess
		and target_10.getElse().(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vresult_878
		and target_10.getElse().(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("imap_perform_authentication")
		and target_10.getElse().(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdata_874
		and target_10.getElse().(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vconn_879
		and target_10.getElse().(IfStmt).getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("Curl_failf")
		and target_10.getElse().(IfStmt).getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdata_874
		and target_10.getElse().(IfStmt).getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1) instanceof StringLiteral
		and target_10.getElse().(IfStmt).getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vresult_878
		and target_10.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

/*predicate func_11(ExprStmt target_14, Function func, EqualityOperation target_11) {
		target_11.getAnOperand() instanceof ValueFieldAccess
		and target_11.getAnOperand() instanceof EnumConstantAccess
		and target_11.getParent().(IfStmt).getThen()=target_14
		and target_11.getEnclosingFunction() = func
}

*/
predicate func_12(LogicalAndExpr target_6, Function func, ExprStmt target_12) {
		target_12.getExpr() instanceof AssignExpr
		and target_12.getParent().(IfStmt).getCondition()=target_6
		and target_12.getEnclosingFunction() = func
}

predicate func_13(BlockStmt target_13) {
		target_13.getStmt(0) instanceof IfStmt
}

predicate func_14(Variable vresult_878, Variable vconn_879, Parameter vdata_874, ExprStmt target_14) {
		target_14.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vresult_878
		and target_14.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("imap_perform_authentication")
		and target_14.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdata_874
		and target_14.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vconn_879
}

predicate func_15(BlockStmt target_15) {
		target_15.getStmt(0).(IfStmt).getCondition() instanceof LogicalAndExpr
		and target_15.getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0) instanceof IfStmt
		and target_15.getStmt(0).(IfStmt).getElse() instanceof ExprStmt
}

from Function func, Parameter vimapcode_875, Variable vresult_878, Variable vconn_879, Variable vimapc_880, Parameter vdata_874, StringLiteral target_0, ValueFieldAccess target_3, AssignExpr target_4, EqualityOperation target_5, LogicalAndExpr target_6, PointerFieldAccess target_7, ExprStmt target_8, IfStmt target_10, ExprStmt target_12, BlockStmt target_13, ExprStmt target_14, BlockStmt target_15
where
func_0(func, target_0)
and not func_1(vimapc_880, target_13, target_10)
and not func_2(target_14, func)
and func_3(vdata_874, target_3)
and func_4(vresult_878, vconn_879, vdata_874, target_4)
and func_5(vimapcode_875, target_15, target_5)
and func_6(vconn_879, vdata_874, target_13, target_6)
and func_7(vimapc_880, target_8, target_7)
and func_8(vresult_878, vconn_879, vdata_874, target_7, target_8)
and func_10(vresult_878, vconn_879, vimapc_880, vdata_874, target_6, target_10)
and func_12(target_6, func, target_12)
and func_13(target_13)
and func_14(vresult_878, vconn_879, vdata_874, target_14)
and func_15(target_15)
and vimapcode_875.getType().hasName("int")
and vresult_878.getType().hasName("CURLcode")
and vconn_879.getType().hasName("connectdata *")
and vimapc_880.getType().hasName("imap_conn *")
and vdata_874.getType().hasName("Curl_easy *")
and vimapcode_875.getFunction() = func
and vresult_878.(LocalVariable).getFunction() = func
and vconn_879.(LocalVariable).getFunction() = func
and vimapc_880.(LocalVariable).getFunction() = func
and vdata_874.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
