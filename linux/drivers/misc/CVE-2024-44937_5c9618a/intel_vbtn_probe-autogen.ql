/**
 * @name linux-5c9618a3b6ea94cf7bdff7702aca8bf2d777d97b-intel_vbtn_probe
 * @id cpp/linux/5c9618a3b6ea94cf7bdff7702aca8bf2d777d97b/intel-vbtn-probe
 * @description linux-5c9618a3b6ea94cf7bdff7702aca8bf2d777d97b-drivers/platform/x86/intel/vbtn.c-intel_vbtn_probe CVE-2024-44937
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, SizeofExprOperator target_0) {
	target_0.getValue()="24"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable verr_277, ExprStmt target_3, Function func) {
exists(ExprStmt target_1 |
	exists(AssignExpr obj_0 | obj_0=target_1.getExpr() |
		exists(StmtExpr obj_1 | obj_1=obj_0.getRValue() |
			exists(BlockStmt obj_2 | obj_2=obj_1.getStmt() |
				exists(ExprStmt obj_3 | obj_3=obj_2.getStmt(2) |
					exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getTarget().hasName("__devm_mutex_init")
						and obj_4.getArgument(1).(VariableAccess).getType().hasName("mutex *")
					)
				)
				and obj_2.getStmt(1).(DoStmt).getCondition().(Literal).getValue()="0"
			)
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=verr_277
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_3.getLocation())
)
}

predicate func_2(Variable verr_277, ExprStmt target_3, Function func) {
exists(IfStmt target_2 |
	target_2.getCondition().(VariableAccess).getTarget()=verr_277
	and target_2.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=verr_277
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_3.getLocation())
)
}

predicate func_3(Function func, ExprStmt target_3) {
	exists(AssignExpr obj_0 | obj_0=target_3.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="dual_accel"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("intel_vbtn_priv *")
		)
		and obj_0.getRValue().(VariableAccess).getTarget().getType().hasName("bool")
	)
	and target_3.getEnclosingFunction() = func
}

from Function func, Variable verr_277, SizeofExprOperator target_0, ExprStmt target_3
where
func_0(func, target_0)
and not func_1(verr_277, target_3, func)
and not func_2(verr_277, target_3, func)
and func_3(func, target_3)
and verr_277.getType().hasName("int")
and verr_277.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
