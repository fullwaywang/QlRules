/**
 * @name linux-6b598069164ac1bb60996d6ff94e7f9169dbd2d3-bond_ipsec_add_sa
 * @id cpp/linux/6b598069164ac1bb60996d6ff94e7f9169dbd2d3/bond-ipsec-add-sa
 * @description linux-6b598069164ac1bb60996d6ff94e7f9169dbd2d3-drivers/net/bonding/bond_main.c-bond_ipsec_add_sa CVE-2024-46678
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("rcu_read_unlock")
	and not target_0.getTarget().hasName("netdev_hold")
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, FunctionCall target_1) {
	target_1.getTarget().hasName("rcu_read_unlock")
	and not target_1.getTarget().hasName("mutex_lock_nested")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, FunctionCall target_2) {
	target_2.getTarget().hasName("spin_lock_bh")
	and not target_2.getTarget().hasName("mutex_unlock")
	and target_2.getArgument(0) instanceof AddressOfExpr
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, FunctionCall target_3) {
	target_3.getTarget().hasName("spin_unlock_bh")
	and not target_3.getTarget().hasName("netdev_put")
	and target_3.getArgument(0) instanceof AddressOfExpr
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vslave_433, ExprStmt target_39, IfStmt target_4) {
	exists(BlockStmt obj_0 | obj_0=target_4.getThen() |
		obj_0.getStmt(0) instanceof ExprStmt
		and obj_0.getStmt(1) instanceof ReturnStmt
	)
	and target_4.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vslave_433
	and target_4.getLocation().isBefore(target_39.getLocation())
}

predicate func_5(Variable v__msg_451, Variable v__extack_451, ExprStmt target_40, IfStmt target_5) {
	exists(BlockStmt obj_0 | obj_0=target_5.getThen() |
		exists(DoStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(BlockStmt obj_2 | obj_2=obj_1.getStmt() |
				exists(ExprStmt obj_3 | obj_3=obj_2.getStmt(2) |
					exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getTarget().hasName("do_trace_netlink_extack")
						and obj_4.getArgument(0).(VariableAccess).getTarget()=v__msg_451
					)
				)
				and obj_2.getStmt(3).(IfStmt).getCondition().(VariableAccess).getTarget()=v__extack_451
			)
			and obj_1.getCondition().(Literal).getValue()="0"
		)
		and obj_0.getStmt(1).(ExprStmt).getExpr() instanceof FunctionCall
		and obj_0.getStmt(2) instanceof ReturnStmt
	)
	and target_5.getCondition() instanceof LogicalOrExpr
	and target_5.getLocation().isBefore(target_40.getLocation())
}

predicate func_6(Parameter vxs_426, Variable vipsec_431, Variable vbond_432, ExprStmt target_41, IfStmt target_6) {
	exists(BlockStmt obj_0 | obj_0=target_6.getThen() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(AssignExpr obj_2 | obj_2=obj_1.getExpr() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getLValue() |
					obj_3.getTarget().getName()="xs"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vipsec_431
				)
				and obj_2.getRValue().(VariableAccess).getTarget()=vxs_426
			)
		)
		and exists(ExprStmt obj_4 | obj_4=obj_0.getStmt(1) |
			exists(FunctionCall obj_5 | obj_5=obj_4.getExpr() |
				exists(AddressOfExpr obj_6 | obj_6=obj_5.getArgument(0) |
					exists(PointerFieldAccess obj_7 | obj_7=obj_6.getOperand() |
						obj_7.getTarget().getName()="list"
						and obj_7.getQualifier().(VariableAccess).getTarget()=vipsec_431
					)
				)
				and obj_5.getTarget().hasName("INIT_LIST_HEAD")
			)
		)
		and exists(ExprStmt obj_8 | obj_8=obj_0.getStmt(3) |
			exists(FunctionCall obj_9 | obj_9=obj_8.getExpr() |
				exists(AddressOfExpr obj_10 | obj_10=obj_9.getArgument(0) |
					exists(PointerFieldAccess obj_11 | obj_11=obj_10.getOperand() |
						obj_11.getTarget().getName()="list"
						and obj_11.getQualifier().(VariableAccess).getTarget()=vipsec_431
					)
				)
				and exists(AddressOfExpr obj_12 | obj_12=obj_9.getArgument(1) |
					exists(PointerFieldAccess obj_13 | obj_13=obj_12.getOperand() |
						obj_13.getTarget().getName()="ipsec_list"
						and obj_13.getQualifier().(VariableAccess).getTarget()=vbond_432
					)
				)
				and obj_9.getTarget().hasName("list_add")
			)
		)
		and obj_0.getStmt(2).(ExprStmt).getExpr() instanceof FunctionCall
		and obj_0.getStmt(4).(ExprStmt).getExpr() instanceof FunctionCall
	)
	and target_6.getCondition() instanceof NotExpr
	and target_6.getElse() instanceof BlockStmt
	and target_6.getLocation().isBefore(target_41.getLocation())
}

predicate func_7(Variable vreal_dev_430, Variable vslave_433) {
exists(ConditionalExpr target_7 |
	exists(PointerFieldAccess obj_0 | obj_0=target_7.getThen() |
		obj_0.getTarget().getName()="dev"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vslave_433
	)
	and exists(AssignExpr obj_1 | obj_1=target_7.getParent() |
		obj_1.getRValue() = target_7
		and obj_1.getLValue().(VariableAccess).getTarget()=vreal_dev_430
	)
	and target_7.getCondition().(VariableAccess).getTarget()=vslave_433
	and target_7.getElse().(Literal).getValue()="0"
)
}

predicate func_9(Function func) {
exists(AddressOfExpr target_9 |
	target_9.getOperand().(VariableAccess).getType().hasName("netdevice_tracker")
	and target_9.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
	and target_9.getEnclosingFunction() = func
)
}

predicate func_11(Variable verr_434) {
exists(AssignExpr target_11 |
	target_11.getLValue().(VariableAccess).getTarget()=verr_434
	and target_11.getRValue() instanceof UnaryMinusExpr
)
}

predicate func_12(NotExpr target_42, Function func) {
exists(GotoStmt target_12 |
	exists(BlockStmt obj_0 | obj_0=target_12.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(1)=target_12
			and obj_1.getCondition()=target_42
		)
	)
	and target_12.getName() ="out"
	and target_12.getEnclosingFunction() = func
)
}

predicate func_13(Variable verr_434) {
exists(AssignExpr target_13 |
	target_13.getLValue().(VariableAccess).getTarget()=verr_434
	and target_13.getRValue() instanceof UnaryMinusExpr
)
}

predicate func_14(LogicalOrExpr target_27, Function func) {
exists(GotoStmt target_14 |
	exists(BlockStmt obj_0 | obj_0=target_14.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(2)=target_14
			and obj_1.getCondition()=target_27
		)
	)
	and target_14.getName() ="out"
	and target_14.getEnclosingFunction() = func
)
}

predicate func_15(Variable vipsec_431, ExprStmt target_44, Function func) {
exists(ExprStmt target_15 |
	exists(AssignExpr obj_0 | obj_0=target_15.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("kmalloc")
			and obj_1.getArgument(0).(SizeofExprOperator).getValue()="24"
			and obj_1.getArgument(1).(BitwiseOrExpr).getValue()="3264"
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vipsec_431
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_15
	and target_15.getLocation().isBefore(target_44.getLocation())
)
}

/*predicate func_16(Function func) {
exists(BitwiseOrExpr target_16 |
	exists(FunctionCall obj_0 | obj_0=target_16.getParent() |
		exists(AssignExpr obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getRValue() |
				obj_2.getTarget().hasName("kmalloc")
				and obj_2.getArgument(0).(SizeofExprOperator).getValue()="24"
				and obj_2.getArgument(1) instanceof BitwiseOrExpr
			)
		)
	)
	and target_16.getValue()="3264"
	and target_16.getEnclosingFunction() = func
)
}

*/
predicate func_17(Variable verr_434, NotExpr target_22) {
exists(ExprStmt target_17 |
	exists(AssignExpr obj_0 | obj_0=target_17.getExpr() |
		obj_0.getLValue().(VariableAccess).getTarget()=verr_434
		and obj_0.getRValue() instanceof UnaryMinusExpr
	)
	and exists(BlockStmt obj_1 | obj_1=target_17.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getThen().(BlockStmt).getStmt(0)=target_17
			and obj_2.getCondition()=target_22
		)
	)
)
}

predicate func_18(NotExpr target_22, Function func) {
exists(GotoStmt target_18 |
	exists(BlockStmt obj_0 | obj_0=target_18.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(1)=target_18
			and obj_1.getCondition()=target_22
		)
	)
	and target_18.getName() ="out"
	and target_18.getEnclosingFunction() = func
)
}

predicate func_21(Function func) {
exists(AddressOfExpr target_21 |
	target_21.getOperand().(VariableAccess).getType().hasName("netdevice_tracker")
	and target_21.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
	and target_21.getEnclosingFunction() = func
)
}

predicate func_22(Variable vipsec_431, BlockStmt target_46, NotExpr target_22) {
	target_22.getOperand().(VariableAccess).getTarget()=vipsec_431
	and target_22.getParent().(IfStmt).getThen()=target_46
}

predicate func_23(Variable verr_434, BlockStmt target_47, NotExpr target_23) {
	target_23.getOperand().(VariableAccess).getTarget()=verr_434
	and target_23.getParent().(IfStmt).getThen()=target_47
}

predicate func_24(NotExpr target_42, Function func, ExprStmt target_24) {
	target_24.getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
	and target_24.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_42
	and target_24.getEnclosingFunction() = func
}

predicate func_25(Function func, UnaryMinusExpr target_25) {
	target_25.getValue()="-19"
	and target_25.getEnclosingFunction() = func
}

predicate func_26(Variable vreal_dev_430, Variable vslave_433, PointerFieldAccess target_26) {
	exists(AssignExpr obj_0 | obj_0=target_26.getParent() |
		obj_0.getRValue() = target_26
		and obj_0.getLValue().(VariableAccess).getTarget()=vreal_dev_430
	)
	and target_26.getTarget().getName()="dev"
	and target_26.getQualifier().(VariableAccess).getTarget()=vslave_433
}

predicate func_27(Variable vreal_dev_430, BlockStmt target_48, LogicalOrExpr target_27) {
	exists(LogicalOrExpr obj_0 | obj_0=target_27.getLeftOperand() |
		exists(NotExpr obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="xfrmdev_ops"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vreal_dev_430
			)
		)
		and exists(NotExpr obj_3 | obj_3=obj_0.getRightOperand() |
			exists(PointerFieldAccess obj_4 | obj_4=obj_3.getOperand() |
				exists(PointerFieldAccess obj_5 | obj_5=obj_4.getQualifier() |
					obj_5.getTarget().getName()="xfrmdev_ops"
					and obj_5.getQualifier().(VariableAccess).getTarget()=vreal_dev_430
				)
				and obj_4.getTarget().getName()="xdo_dev_state_add"
			)
		)
	)
	and exists(FunctionCall obj_6 | obj_6=target_27.getRightOperand() |
		obj_6.getTarget().hasName("netif_is_bond_master")
		and obj_6.getArgument(0).(VariableAccess).getTarget()=vreal_dev_430
	)
	and target_27.getParent().(IfStmt).getThen()=target_48
}

predicate func_28(Function func, UnaryMinusExpr target_28) {
	target_28.getValue()="-22"
	and target_28.getEnclosingFunction() = func
}

predicate func_29(Function func, BitwiseOrExpr target_29) {
	exists(FunctionCall obj_0 | obj_0=target_29.getParent() |
		exists(AssignExpr obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getRValue() |
				obj_2.getTarget().hasName("kmalloc")
				and obj_2.getArgument(0).(SizeofExprOperator).getValue()="24"
			)
		)
	)
	and target_29.getValue()="2080"
	and target_29.getEnclosingFunction() = func
}

predicate func_30(Function func, UnaryMinusExpr target_30) {
	target_30.getValue()="-12"
	and target_30.getEnclosingFunction() = func
}

predicate func_31(Variable vipsec_431, NotExpr target_23, BlockStmt target_31) {
	exists(ExprStmt obj_0 | obj_0=target_31.getStmt(0) |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("kfree")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vipsec_431
		)
	)
	and target_31.getParent().(IfStmt).getCondition()=target_23
}

predicate func_32(Variable vbond_432, AddressOfExpr target_32) {
	exists(PointerFieldAccess obj_0 | obj_0=target_32.getOperand() |
		obj_0.getTarget().getName()="ipsec_lock"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vbond_432
	)
	and target_32.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_33(Variable vbond_432, AddressOfExpr target_33) {
	exists(PointerFieldAccess obj_0 | obj_0=target_33.getOperand() |
		obj_0.getTarget().getName()="ipsec_lock"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vbond_432
	)
	and target_33.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_34(Variable vslave_433, BlockStmt target_49, VariableAccess target_34) {
	target_34.getTarget()=vslave_433
	and target_34.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_49
}

predicate func_35(NotExpr target_42, Function func, ReturnStmt target_35) {
	target_35.getExpr() instanceof UnaryMinusExpr
	and target_35.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_42
	and target_35.getEnclosingFunction() = func
}

predicate func_36(LogicalOrExpr target_27, Function func, ReturnStmt target_36) {
	target_36.getExpr() instanceof UnaryMinusExpr
	and target_36.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_27
	and target_36.getEnclosingFunction() = func
}

predicate func_37(NotExpr target_22, Function func, ReturnStmt target_37) {
	target_37.getExpr() instanceof UnaryMinusExpr
	and target_37.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_22
	and target_37.getEnclosingFunction() = func
}

predicate func_38(Function func, FunctionCall target_38) {
	target_38.getTarget().hasName("rcu_read_unlock")
	and target_38.getEnclosingFunction() = func
}

predicate func_39(Variable vreal_dev_430, Variable vslave_433, ExprStmt target_39) {
	exists(AssignExpr obj_0 | obj_0=target_39.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().getName()="dev"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vslave_433
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vreal_dev_430
	)
}

predicate func_40(Variable vipsec_431, ExprStmt target_40) {
	exists(AssignExpr obj_0 | obj_0=target_40.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("kmalloc")
			and obj_1.getArgument(0).(SizeofExprOperator).getValue()="24"
			and obj_1.getArgument(1) instanceof BitwiseOrExpr
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vipsec_431
	)
}

predicate func_41(Function func, ExprStmt target_41) {
	target_41.getExpr() instanceof FunctionCall
	and target_41.getEnclosingFunction() = func
}

predicate func_42(Variable vslave_433, NotExpr target_42) {
	target_42.getOperand().(VariableAccess).getTarget()=vslave_433
}

predicate func_44(Parameter vxs_426, Variable vreal_dev_430, ExprStmt target_44) {
	exists(AssignExpr obj_0 | obj_0=target_44.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="xso"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vxs_426
			)
			and obj_1.getTarget().getName()="real_dev"
		)
		and obj_0.getRValue().(VariableAccess).getTarget()=vreal_dev_430
	)
}

predicate func_46(Function func, BlockStmt target_46) {
	target_46.getStmt(0).(ExprStmt).getExpr() instanceof FunctionCall
	and target_46.getStmt(1) instanceof ReturnStmt
	and target_46.getEnclosingFunction() = func
}

predicate func_47(Parameter vxs_426, Variable vipsec_431, BlockStmt target_47) {
	exists(ExprStmt obj_0 | obj_0=target_47.getStmt(0) |
		exists(AssignExpr obj_1 | obj_1=obj_0.getExpr() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getLValue() |
				obj_2.getTarget().getName()="xs"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vipsec_431
			)
			and obj_1.getRValue().(VariableAccess).getTarget()=vxs_426
		)
	)
	and exists(ExprStmt obj_3 | obj_3=target_47.getStmt(1) |
		exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
			exists(AddressOfExpr obj_5 | obj_5=obj_4.getArgument(0) |
				exists(PointerFieldAccess obj_6 | obj_6=obj_5.getOperand() |
					obj_6.getTarget().getName()="list"
					and obj_6.getQualifier().(VariableAccess).getTarget()=vipsec_431
				)
			)
			and obj_4.getTarget().hasName("INIT_LIST_HEAD")
		)
	)
}

predicate func_48(Variable v__msg_451, Variable v__extack_451, BlockStmt target_48) {
	exists(DoStmt obj_0 | obj_0=target_48.getStmt(0) |
		exists(BlockStmt obj_1 | obj_1=obj_0.getStmt() |
			exists(ExprStmt obj_2 | obj_2=obj_1.getStmt(2) |
				exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
					obj_3.getTarget().hasName("do_trace_netlink_extack")
					and obj_3.getArgument(0).(VariableAccess).getTarget()=v__msg_451
				)
			)
			and exists(IfStmt obj_4 | obj_4=obj_1.getStmt(3) |
				exists(ExprStmt obj_5 | obj_5=obj_4.getThen() |
					exists(AssignExpr obj_6 | obj_6=obj_5.getExpr() |
						obj_6.getLValue().(PointerFieldAccess).getTarget().getName()="_msg"
						and obj_6.getRValue().(VariableAccess).getTarget()=v__msg_451
					)
				)
				and obj_4.getCondition().(VariableAccess).getTarget()=v__extack_451
			)
		)
		and obj_0.getCondition().(Literal).getValue()="0"
	)
}

predicate func_49(Function func, BlockStmt target_49) {
	target_49.getStmt(0) instanceof ExprStmt
	and target_49.getStmt(1) instanceof ReturnStmt
	and target_49.getEnclosingFunction() = func
}

from Function func, Parameter vxs_426, Variable vreal_dev_430, Variable vipsec_431, Variable vbond_432, Variable vslave_433, Variable verr_434, Variable v__msg_451, Variable v__extack_451, FunctionCall target_0, FunctionCall target_1, FunctionCall target_2, FunctionCall target_3, IfStmt target_4, IfStmt target_5, IfStmt target_6, NotExpr target_22, NotExpr target_23, ExprStmt target_24, UnaryMinusExpr target_25, PointerFieldAccess target_26, LogicalOrExpr target_27, UnaryMinusExpr target_28, BitwiseOrExpr target_29, UnaryMinusExpr target_30, BlockStmt target_31, AddressOfExpr target_32, AddressOfExpr target_33, VariableAccess target_34, ReturnStmt target_35, ReturnStmt target_36, ReturnStmt target_37, FunctionCall target_38, ExprStmt target_39, ExprStmt target_40, ExprStmt target_41, NotExpr target_42, ExprStmt target_44, BlockStmt target_46, BlockStmt target_47, BlockStmt target_48, BlockStmt target_49
where
func_0(func, target_0)
and func_1(func, target_1)
and func_2(func, target_2)
and func_3(func, target_3)
and func_4(vslave_433, target_39, target_4)
and func_5(v__msg_451, v__extack_451, target_40, target_5)
and func_6(vxs_426, vipsec_431, vbond_432, target_41, target_6)
and not func_7(vreal_dev_430, vslave_433)
and not func_9(func)
and not func_11(verr_434)
and not func_12(target_42, func)
and not func_13(verr_434)
and not func_14(target_27, func)
and not func_15(vipsec_431, target_44, func)
and not func_17(verr_434, target_22)
and not func_18(target_22, func)
and not func_21(func)
and func_22(vipsec_431, target_46, target_22)
and func_23(verr_434, target_47, target_23)
and func_24(target_42, func, target_24)
and func_25(func, target_25)
and func_26(vreal_dev_430, vslave_433, target_26)
and func_27(vreal_dev_430, target_48, target_27)
and func_28(func, target_28)
and func_29(func, target_29)
and func_30(func, target_30)
and func_31(vipsec_431, target_23, target_31)
and func_32(vbond_432, target_32)
and func_33(vbond_432, target_33)
and func_34(vslave_433, target_49, target_34)
and func_35(target_42, func, target_35)
and func_36(target_27, func, target_36)
and func_37(target_22, func, target_37)
and func_38(func, target_38)
and func_39(vreal_dev_430, vslave_433, target_39)
and func_40(vipsec_431, target_40)
and func_41(func, target_41)
and func_42(vslave_433, target_42)
and func_44(vxs_426, vreal_dev_430, target_44)
and func_46(func, target_46)
and func_47(vxs_426, vipsec_431, target_47)
and func_48(v__msg_451, v__extack_451, target_48)
and func_49(func, target_49)
and vxs_426.getType().hasName("xfrm_state *")
and vreal_dev_430.getType().hasName("net_device *")
and vipsec_431.getType().hasName("bond_ipsec *")
and vbond_432.getType().hasName("bonding *")
and vslave_433.getType().hasName("slave *")
and verr_434.getType().hasName("int")
and v__msg_451.getType().hasName("const char[]")
and v__extack_451.getType().hasName("netlink_ext_ack *")
and vxs_426.getFunction() = func
and vreal_dev_430.(LocalVariable).getFunction() = func
and vipsec_431.(LocalVariable).getFunction() = func
and vbond_432.(LocalVariable).getFunction() = func
and vslave_433.(LocalVariable).getFunction() = func
and verr_434.(LocalVariable).getFunction() = func
and v__msg_451.(LocalVariable).getFunction() = func
and v__extack_451.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
