/**
 * @name linux-1c811d403afd73f04bde82b83b24c754011bd0e8-sme_enable
 * @id cpp/linux/1c811d403afd73f04bde82b83b24c754011bd0e8/sme-enable
 * @description linux-1c811d403afd73f04bde82b83b24c754011bd0e8-arch/x86/mm/mem_encrypt_identity.c-sme_enable CVE-2024-35802
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsev_status, ExprStmt target_23, LogicalAndExpr target_24, VariableAccess target_0) {
	target_0.getTarget()=vsev_status
	and target_0.getParent().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="1"
	and target_23.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getLocation())
	and target_0.getLocation().isBefore(target_24.getRightOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getLocation())
}

predicate func_1(Variable vsev_status, ExprStmt target_25, VariableAccess target_1) {
	target_1.getTarget()=vsev_status
	and target_25.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getLocation().isBefore(target_1.getLocation())
}

predicate func_2(Variable vsme_me_mask, Variable vme_mask_509, ExprStmt target_26, IfStmt target_20, VariableAccess target_2) {
	target_2.getTarget()=vsme_me_mask
	and target_2.getParent().(AssignExpr).getLValue() = target_2
	and target_2.getParent().(AssignExpr).getRValue().(VariableAccess).getTarget()=vme_mask_509
	and target_26.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_2.getLocation())
	and target_2.getLocation().isBefore(target_20.getCondition().(VariableAccess).getLocation())
}

predicate func_3(Function func) {
exists(PointerDereferenceExpr target_3 |
	target_3.getOperand().(FunctionCall).getTarget().hasName("rip_rel_ptr")
	and target_3.getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("u64")
	and target_3.getParent().(AssignExpr).getLValue() = target_3
	and target_3.getParent().(AssignExpr).getRValue() instanceof FunctionCall
	and target_3.getEnclosingFunction() = func)
}

predicate func_4(Variable vsev_status) {
exists(AssignExpr target_4 |
	target_4.getLValue().(VariableAccess).getType().hasName("u64")
	and target_4.getRValue() instanceof FunctionCall
	and target_4.getParent().(AssignExpr).getRValue() = target_4
	and target_4.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsev_status)
}

predicate func_5(Function func) {
exists(LogicalOrExpr target_5 |
	target_5.getLeftOperand() instanceof RelationalOperation
	and target_5.getRightOperand() instanceof FunctionCall
	and target_5.getParent().(IfStmt).getThen() instanceof GotoStmt
	and target_5.getEnclosingFunction() = func)
}

predicate func_6(Variable vme_mask_509) {
exists(PointerDereferenceExpr target_6 |
	target_6.getOperand().(FunctionCall).getTarget().hasName("rip_rel_ptr")
	and target_6.getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("u64")
	and target_6.getParent().(AssignExpr).getLValue() = target_6
	and target_6.getParent().(AssignExpr).getRValue().(VariableAccess).getTarget()=vme_mask_509)
}

predicate func_7(Variable vme_mask_509) {
exists(ComplementExpr target_7 |
	target_7.getOperand().(VariableAccess).getTarget()=vme_mask_509)
}

predicate func_10(Variable vsev_status, FunctionCall target_10) {
	target_10.getTarget().hasName("__rdmsr")
	and target_10.getArgument(0).(Literal).getValue()="3221291313"
	and target_10.getParent().(AssignExpr).getRValue() = target_10
	and target_10.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsev_status
}

predicate func_11(Variable vbuffer_510, Variable vcmdline_ptr_506, Variable vcmdline_arg_506, RelationalOperation target_11) {
	 (target_11 instanceof GTExpr or target_11 instanceof LTExpr)
	and target_11.getLesserOperand().(FunctionCall).getTarget().hasName("cmdline_find_option")
	and target_11.getLesserOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vcmdline_ptr_506
	and target_11.getLesserOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcmdline_arg_506
	and target_11.getLesserOperand().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vbuffer_510
	and target_11.getLesserOperand().(FunctionCall).getArgument(3).(SizeofExprOperator).getValue()="16"
	and target_11.getGreaterOperand().(Literal).getValue()="0"
	and target_11.getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_12(Variable vbuffer_510, Variable vcmdline_on_506, ExprStmt target_27, FunctionCall target_12) {
	target_12.getTarget().hasName("strncmp")
	and target_12.getArgument(0).(VariableAccess).getTarget()=vbuffer_510
	and target_12.getArgument(1).(VariableAccess).getTarget()=vcmdline_on_506
	and target_12.getArgument(2).(SizeofExprOperator).getValue()="16"
	and target_12.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_27
}

predicate func_13(Variable vcc_vendor, VariableAccess target_28, ExprStmt target_13) {
	target_13.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vcc_vendor
	and target_13.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_28
}

/*predicate func_14(Variable vsev_status, VariableAccess target_14) {
	target_14.getTarget()=vsev_status
	and target_14.getParent().(AssignExpr).getLValue() = target_14
	and target_14.getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("__rdmsr")
	and target_14.getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(Literal).getValue()="3221291313"
}

*/
predicate func_15(Variable vsme_me_mask, Variable vme_mask_509, VariableAccess target_15) {
	target_15.getTarget()=vsme_me_mask
	and target_15.getParent().(AssignExpr).getLValue() = target_15
	and target_15.getParent().(AssignExpr).getRValue().(VariableAccess).getTarget()=vme_mask_509
}

predicate func_16(Variable vsme_me_mask, Variable vme_mask_509, VariableAccess target_16) {
	target_16.getTarget()=vme_mask_509
	and target_16.getParent().(AssignExpr).getRValue() = target_16
	and target_16.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsme_me_mask
}

predicate func_17(Function func, ReturnStmt target_17) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_17
}

predicate func_18(RelationalOperation target_11, Function func, GotoStmt target_18) {
	target_18.getName() ="out"
	and target_18.getParent().(IfStmt).getCondition()=target_11
	and target_18.getEnclosingFunction() = func
}

predicate func_19(Variable vsme_me_mask, Variable vme_mask_509, Function func, IfStmt target_19) {
	target_19.getCondition().(NotExpr).getOperand() instanceof FunctionCall
	and target_19.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsme_me_mask
	and target_19.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vme_mask_509
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_19
}

predicate func_20(Variable vsme_me_mask, Variable vphysical_mask, Function func, IfStmt target_20) {
	target_20.getCondition().(VariableAccess).getTarget()=vsme_me_mask
	and target_20.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignAndExpr).getLValue().(VariableAccess).getTarget()=vphysical_mask
	and target_20.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignAndExpr).getRValue().(ComplementExpr).getOperand().(VariableAccess).getTarget()=vsme_me_mask
	and target_20.getThen().(BlockStmt).getStmt(1) instanceof ExprStmt
	and target_20.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("cc_set_mask")
	and target_20.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsme_me_mask
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_20
}

/*predicate func_21(Variable vsme_me_mask, ComplementExpr target_21) {
	target_21.getOperand().(VariableAccess).getTarget()=vsme_me_mask
}

*/
/*predicate func_22(Variable vsme_me_mask, VariableAccess target_22) {
	target_22.getTarget()=vsme_me_mask
	and target_22.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("cc_set_mask")
}

*/
predicate func_23(Variable vsev_status, ExprStmt target_23) {
	target_23.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsev_status
	and target_23.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_24(Variable vsev_status, LogicalAndExpr target_24) {
	target_24.getLeftOperand().(VariableAccess).getTarget().getType().hasName("bool")
	and target_24.getRightOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vsev_status
	and target_24.getRightOperand().(NotExpr).getOperand().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="4"
}

predicate func_25(Variable vsev_status, ExprStmt target_25) {
	target_25.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_25.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vsev_status
	and target_25.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="1"
	and target_25.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getThen().(BinaryBitwiseOperation).getValue()="2"
	and target_25.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getElse().(BinaryBitwiseOperation).getValue()="1"
}

predicate func_26(Variable vsme_me_mask, Variable vme_mask_509, ExprStmt target_26) {
	target_26.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsme_me_mask
	and target_26.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vme_mask_509
}

predicate func_27(Function func, ExprStmt target_27) {
	target_27.getExpr() instanceof AssignExpr
	and target_27.getEnclosingFunction() = func
}

predicate func_28(Variable vsme_me_mask, BlockStmt target_30, VariableAccess target_28) {
	target_28.getTarget()=vsme_me_mask
	and target_28.getParent().(IfStmt).getThen()=target_30
}

predicate func_30(Variable vsme_me_mask, Variable vphysical_mask, BlockStmt target_30) {
	target_30.getStmt(0).(ExprStmt).getExpr().(AssignAndExpr).getLValue().(VariableAccess).getTarget()=vphysical_mask
	and target_30.getStmt(0).(ExprStmt).getExpr().(AssignAndExpr).getRValue() instanceof ComplementExpr
	and target_30.getStmt(1) instanceof ExprStmt
	and target_30.getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("cc_set_mask")
	and target_30.getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsme_me_mask
}

from Function func, Variable vbuffer_510, Variable vsev_status, Variable vsme_me_mask, Variable vphysical_mask, Variable vcc_vendor, Variable vcmdline_ptr_506, Variable vcmdline_arg_506, Variable vcmdline_on_506, Variable vme_mask_509, VariableAccess target_0, VariableAccess target_1, VariableAccess target_2, FunctionCall target_10, RelationalOperation target_11, FunctionCall target_12, ExprStmt target_13, VariableAccess target_15, VariableAccess target_16, ReturnStmt target_17, GotoStmt target_18, IfStmt target_19, IfStmt target_20, ExprStmt target_23, LogicalAndExpr target_24, ExprStmt target_25, ExprStmt target_26, ExprStmt target_27, VariableAccess target_28, BlockStmt target_30
where
func_0(vsev_status, target_23, target_24, target_0)
and func_1(vsev_status, target_25, target_1)
and func_2(vsme_me_mask, vme_mask_509, target_26, target_20, target_2)
and not func_3(func)
and not func_4(vsev_status)
and not func_5(func)
and not func_6(vme_mask_509)
and not func_7(vme_mask_509)
and func_10(vsev_status, target_10)
and func_11(vbuffer_510, vcmdline_ptr_506, vcmdline_arg_506, target_11)
and func_12(vbuffer_510, vcmdline_on_506, target_27, target_12)
and func_13(vcc_vendor, target_28, target_13)
and func_15(vsme_me_mask, vme_mask_509, target_15)
and func_16(vsme_me_mask, vme_mask_509, target_16)
and func_17(func, target_17)
and func_18(target_11, func, target_18)
and func_19(vsme_me_mask, vme_mask_509, func, target_19)
and func_20(vsme_me_mask, vphysical_mask, func, target_20)
and func_23(vsev_status, target_23)
and func_24(vsev_status, target_24)
and func_25(vsev_status, target_25)
and func_26(vsme_me_mask, vme_mask_509, target_26)
and func_27(func, target_27)
and func_28(vsme_me_mask, target_30, target_28)
and func_30(vsme_me_mask, vphysical_mask, target_30)
and vbuffer_510.getType().hasName("char[16]")
and vsev_status.getType().hasName("u64")
and vsme_me_mask.getType().hasName("u64")
and vphysical_mask.getType().hasName("phys_addr_t")
and vcc_vendor.getType().hasName("cc_vendor")
and vcmdline_ptr_506.getType().hasName("const char *")
and vcmdline_arg_506.getType().hasName("const char *")
and vcmdline_on_506.getType().hasName("const char *")
and vme_mask_509.getType().hasName("unsigned long")
and vbuffer_510.(LocalVariable).getFunction() = func
and not vsev_status.getParentScope+() = func
and not vsme_me_mask.getParentScope+() = func
and not vphysical_mask.getParentScope+() = func
and not vcc_vendor.getParentScope+() = func
and vcmdline_ptr_506.(LocalVariable).getFunction() = func
and vcmdline_arg_506.(LocalVariable).getFunction() = func
and vcmdline_on_506.(LocalVariable).getFunction() = func
and vme_mask_509.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
