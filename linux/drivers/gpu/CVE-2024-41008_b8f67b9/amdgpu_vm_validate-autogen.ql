/**
 * @name linux-b8f67b9ddf4f8fe6dd536590712b5912ad78f99c-amdgpu_vm_validate
 * @id cpp/linux/b8f67b9ddf4f8fe6dd536590712b5912ad78f99c/amdgpu-vm-validate
 * @description linux-b8f67b9ddf4f8fe6dd536590712b5912ad78f99c-drivers/gpu/drm/amd/amdgpu/amdgpu_vm.c-amdgpu_vm_validate CVE-2024-41008
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, StringLiteral target_0) {
	target_0.getValue()="4amdgpu: Evicted user BO is not reserved in pid %d\n"
	and not target_0.getValue()="4amdgpu: Evicted user BO is not reserved\n"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, StringLiteral target_1) {
	target_1.getValue()="4amdgpu: Evicted user BO is not reserved in pid %d\n"
	and not target_1.getValue()="4amdgpu: Evicted user BO is not reserved\n"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(EqualityOperation target_5, Function func) {
exists(IfStmt target_2 |
	exists(BlockStmt obj_0 | obj_0=target_2.getThen() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(1) |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				obj_2.getTarget().hasName("amdgpu_vm_put_task_info")
				and obj_2.getArgument(0).(VariableAccess).getType().hasName("amdgpu_task_info *")
			)
		)
		and obj_0.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("___ratelimit")
	)
	and exists(BlockStmt obj_3 | obj_3=target_2.getParent() |
		exists(IfStmt obj_4 | obj_4=obj_3.getParent() |
			obj_4.getThen().(BlockStmt).getStmt(2)=target_2
			and obj_4.getCondition()=target_5
		)
	)
	and target_2.getCondition().(VariableAccess).getType().hasName("amdgpu_task_info *")
	and target_2.getEnclosingFunction() = func
)
}

predicate func_3(Parameter vvm_461, VariableAccess target_3) {
	exists(PointerFieldAccess obj_0 | obj_0=target_3.getParent() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getParent() |
				exists(ExprStmt obj_3 | obj_3=obj_2.getParent() |
					exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getTarget().hasName("_printk")
						and obj_4.getArgument(0) instanceof StringLiteral
						and obj_4.getArgument(1) instanceof ValueFieldAccess
					)
				)
			)
		)
	)
	and target_3.getTarget()=vvm_461
}

predicate func_4(Parameter vvm_461, ValueFieldAccess target_4) {
	exists(PointerFieldAccess obj_0 | obj_0=target_4.getQualifier() |
		obj_0.getTarget().getName()="task_info"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vvm_461
	)
	and exists(FunctionCall obj_1 | obj_1=target_4.getParent() |
		exists(ExprStmt obj_2 | obj_2=obj_1.getParent() |
			exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
				obj_3.getTarget().hasName("_printk")
				and obj_3.getArgument(0) instanceof StringLiteral
			)
		)
	)
	and target_4.getTarget().getName()="pid"
}

predicate func_5(Function func, EqualityOperation target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getLeftOperand() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="tbo"
					and obj_3.getQualifier().(VariableAccess).getTarget().getType().hasName("amdgpu_bo *")
				)
				and obj_2.getTarget().getName()="base"
			)
			and obj_1.getTarget().getName()="resv"
		)
		and obj_0.getTarget().hasName("dma_resv_locking_ctx")
	)
	and target_5.getRightOperand().(VariableAccess).getTarget().getType().hasName("ww_acquire_ctx *")
	and target_5.getEnclosingFunction() = func
}

from Function func, Parameter vvm_461, StringLiteral target_0, StringLiteral target_1, VariableAccess target_3, ValueFieldAccess target_4, EqualityOperation target_5
where
func_0(func, target_0)
and func_1(func, target_1)
and not func_2(target_5, func)
and func_3(vvm_461, target_3)
and func_4(vvm_461, target_4)
and func_5(func, target_5)
and vvm_461.getType().hasName("amdgpu_vm *")
and vvm_461.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
