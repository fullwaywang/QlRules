commit 9c66680b649045a5e59d9bac785025639c3f53ed	9c66680b649045a5e59d9bac785025639c3f53ed
Author: Sina Firoozabadi <sinafirooz@google.com>
Date:   Wed Mar 8 00:20:01 2023 +0000

    Reject HidService interface requests from opaque origins
    
    The Web HID API tracks permissions using the origin of the top-level document in the frame tree. If a document has an opaque origin then the requests to access Web HID get rejected on renderer side.
    
    To add a second layer of security in case of the renderer process being compromised, responding to the Web HID mojoms from such renderer process should be avoided.
    
    Bug: 1375133
    Change-Id: I76dcccae558ef583787d646746671086d8199940
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4112672
    Commit-Queue: Sina Firoozabadi <sinafirooz@chromium.org>
    Reviewed-by: Reilly Grant <reillyg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1114294}

diff --git a/content/browser/hid/hid_service.cc b/content/browser/hid/hid_service.cc
index 501d47f5eb380..eccc87016db93 100644
--- a/content/browser/hid/hid_service.cc
+++ b/content/browser/hid/hid_service.cc
@@ -188,6 +188,13 @@ void HidService::Create(
     return;
   }
 
+  if (render_frame_host->GetOutermostMainFrame()
+          ->GetLastCommittedOrigin()
+          .opaque()) {
+    mojo::ReportBadMessage("WebHID is not allowed from an opaque origin.");
+    return;
+  }
+
   // DocumentHelper observes the lifetime of the document connected to
   // `render_frame_host` and destroys the HidService when the Mojo connection is
   // disconnected, RenderFrameHost is deleted, or the RenderFrameHost commits a
@@ -203,6 +210,13 @@ void HidService::Create(
     mojo::PendingReceiver<blink::mojom::HidService> receiver) {
   DCHECK(service_worker_context);
 
+  if (origin.opaque()) {
+    // Service worker should not be available to a window/worker client which
+    // origin is opaque according to Service Worker specification.
+    mojo::ReportBadMessage("WebHID is blocked in an opaque origin.");
+    return;
+  }
+
   // Avoid creating the HidService if there is no HID delegate to provide
   // the implementation.
   if (!GetContentClient()->browser()->GetHidDelegate())
diff --git a/content/browser/hid/hid_service_unittest.cc b/content/browser/hid/hid_service_unittest.cc
index 57f7bede90d35..5efc6e4391e09 100644
--- a/content/browser/hid/hid_service_unittest.cc
+++ b/content/browser/hid/hid_service_unittest.cc
@@ -21,6 +21,7 @@
 #include "content/public/browser/hid_delegate.h"
 #include "content/public/common/content_client.h"
 #include "content/public/test/back_forward_cache_util.h"
+#include "content/public/test/navigation_simulator.h"
 #include "content/public/test/test_browser_context.h"
 #include "content/public/test/test_utils.h"
 #include "content/public/test/test_web_contents_factory.h"
@@ -29,6 +30,8 @@
 #include "mojo/public/cpp/bindings/pending_receiver.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/receiver.h"
+#include "mojo/public/cpp/test_support/fake_message_dispatch_context.h"
+#include "mojo/public/cpp/test_support/test_utils.h"
 #include "services/device/public/cpp/test/fake_hid_manager.h"
 #include "services/device/public/cpp/test/hid_test_util.h"
 #include "services/device/public/cpp/test/test_report_descriptors.h"
@@ -1295,4 +1298,29 @@ TEST_F(HidServiceServiceWorkerBrowserContextDestroyedTest, Forget) {
   run_loop.Run();
 }
 
+TEST_F(HidServiceServiceWorkerBrowserContextDestroyedTest, RejectOpaqueOrigin) {
+  // Create a fake dispatch context to trigger a bad message in.
+  mojo::FakeMessageDispatchContext fake_dispatch_context;
+  mojo::test::BadMessageObserver bad_message_observer;
+
+  auto response_headers =
+      base::MakeRefCounted<net::HttpResponseHeaders>(std::string());
+  response_headers->SetHeader("Content-Security-Policy",
+                              "sandbox allow-scripts");
+  auto* web_contents = static_cast<TestWebContents*>(
+      web_contents_factory_.CreateWebContents(&browser_context_));
+  auto navigation_simulator = NavigationSimulator::CreateRendererInitiated(
+      GURL("http://whatever.com"), web_contents->GetPrimaryMainFrame());
+  navigation_simulator->SetResponseHeaders(response_headers);
+  navigation_simulator->Start();
+  navigation_simulator->Commit();
+
+  mojo::Remote<blink::mojom::HidService> service;
+  web_contents->GetPrimaryMainFrame()->GetHidService(
+      service.BindNewPipeAndPassReceiver());
+
+  EXPECT_EQ(bad_message_observer.WaitForBadMessage(),
+            "WebHID is not allowed from an opaque origin.");
+}
+
 }  // namespace content
