commit fda4495a539531af4d31c041f58e5ded13285e68	fda4495a539531af4d31c041f58e5ded13285e68
Author: Guido Urdaneta <guidou@chromium.org>
Date:   Mon Nov 6 09:31:51 2023 +0000

    [BreakoutBox] Check validity of context before enqueuing frames.
    
    Now that frames are enqueued in a separate task, it is possible that
    the execution context is invalid by the time the task runs.
    Drop the frame if the context is invalid to avoid entering an incorrect state hitting CHECK/DCHECK or accessing poisoned memory.
    
    Bug: 1497984
    Change-Id: I709a519186490052d8b22d6cfe9569602835f414
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4997039
    Auto-Submit: Guido Urdaneta <guidou@chromium.org>
    Reviewed-by: Tony Herre <toprice@chromium.org>
    Commit-Queue: Guido Urdaneta <guidou@chromium.org>
    Commit-Queue: Tony Herre <toprice@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1220151}

diff --git a/third_party/blink/renderer/modules/breakout_box/frame_queue_underlying_source.cc b/third_party/blink/renderer/modules/breakout_box/frame_queue_underlying_source.cc
index c6d3f7223ddbc..43a322ca7071e 100644
--- a/third_party/blink/renderer/modules/breakout_box/frame_queue_underlying_source.cc
+++ b/third_party/blink/renderer/modules/breakout_box/frame_queue_underlying_source.cc
@@ -322,11 +322,8 @@ void FrameQueueUnderlyingSource<
       realm_task_runner_->PostTask(
           FROM_HERE,
           WTF::BindOnce(
-              [](ReadableStreamDefaultControllerWithScriptScope* controller,
-                 ScriptWrappable* blink_frame) {
-                controller->Enqueue(blink_frame);
-              },
-              WrapPersistent(Controller()),
+              &FrameQueueUnderlyingSource::EnqueueBlinkFrame,
+              WrapPersistent(this),
               WrapPersistent(MakeBlinkFrame(std::move(media_frame.value())))));
     } else {
       Controller()->Enqueue(MakeBlinkFrame(std::move(media_frame.value())));
@@ -342,6 +339,15 @@ void FrameQueueUnderlyingSource<
   }
 }
 
+template <typename NativeFrameType>
+void FrameQueueUnderlyingSource<NativeFrameType>::EnqueueBlinkFrame(
+    ScriptWrappable* blink_frame) const {
+  DCHECK(realm_task_runner_->RunsTasksInCurrentSequence());
+  if (GetExecutionContext() && !GetExecutionContext()->IsContextDestroyed()) {
+    Controller()->Enqueue(blink_frame);
+  }
+}
+
 template <typename NativeFrameType>
 bool FrameQueueUnderlyingSource<NativeFrameType>::MustUseMonitor() const {
   return !device_id_.empty();
diff --git a/third_party/blink/renderer/modules/breakout_box/frame_queue_underlying_source.h b/third_party/blink/renderer/modules/breakout_box/frame_queue_underlying_source.h
index 7e7fc4756da4d..b0876289f38e3 100644
--- a/third_party/blink/renderer/modules/breakout_box/frame_queue_underlying_source.h
+++ b/third_party/blink/renderer/modules/breakout_box/frame_queue_underlying_source.h
@@ -120,6 +120,8 @@ class FrameQueueUnderlyingSource : public UnderlyingSourceBase {
   // Must be called on |realm_task_runner_|.
   ScriptWrappable* MakeBlinkFrame(NativeFrameType media_frame);
 
+  void EnqueueBlinkFrame(ScriptWrappable* blink_frame) const;
+
   bool is_closed_ = false;
 
   // Main task runner for the window or worker context this source runs on.
