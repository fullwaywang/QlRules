/**
 * @name linux-54d83fc74aa9ec72794373cb47432c5f7fb1a309-mark_source_chains
 * @id cpp/linux/54d83fc74aa9ec72794373cb47432c5f7fb1a309/mark-source-chains
 * @description linux-54d83fc74aa9ec72794373cb47432c5f7fb1a309-net/ipv4/netfilter/arp_tables.c-mark_source_chains CVE-2016-3134
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vt_392, EqualityOperation target_0) {
	target_0.getLeftOperand().(FunctionCall).getTarget().hasName("strcmp")
	and target_0.getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="name"
	and target_0.getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="user"
	and target_0.getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="u"
	and target_0.getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="target"
	and target_0.getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vt_392
	and target_0.getLeftOperand().(FunctionCall).getArgument(1).(StringLiteral).getValue()=""
	and target_0.getRightOperand().(Literal).getValue()="0"
}

predicate func_1(Variable vt_392, RelationalOperation target_1) {
	 (target_1 instanceof GTExpr or target_1 instanceof LTExpr)
	and target_1.getLesserOperand().(PointerFieldAccess).getTarget().getName()="verdict"
	and target_1.getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vt_392
	and target_1.getGreaterOperand().(Literal).getValue()="0"
}

predicate func_2(Variable ve_382, VariableAccess target_2) {
	target_2.getTarget()=ve_382
}

predicate func_3(Variable ve_382, LogicalAndExpr target_3) {
	target_3.getLeftOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="target_offset"
	and target_3.getLeftOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_382
	and target_3.getLeftOperand().(EqualityOperation).getRightOperand().(SizeofTypeOperator).getType() instanceof LongType
	and target_3.getLeftOperand().(EqualityOperation).getRightOperand().(SizeofTypeOperator).getValue()="192"
	and target_3.getRightOperand() instanceof EqualityOperation
}

predicate func_4(Variable ve_382, AddressOfExpr target_4) {
	target_4.getOperand().(PointerFieldAccess).getTarget().getName()="arp"
	and target_4.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_382
	and target_4.getParent().(FunctionCall).getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getTarget().hasName("unconditional")
}

from Function func, Variable ve_382, Variable vt_392, EqualityOperation target_0, RelationalOperation target_1, VariableAccess target_2, LogicalAndExpr target_3, AddressOfExpr target_4
where
func_0(vt_392, target_0)
and func_1(vt_392, target_1)
and func_2(ve_382, target_2)
and func_3(ve_382, target_3)
and func_4(ve_382, target_4)
and ve_382.getType().hasName("arpt_entry *")
and vt_392.getType().hasName("const xt_standard_target *")
and ve_382.(LocalVariable).getFunction() = func
and vt_392.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
