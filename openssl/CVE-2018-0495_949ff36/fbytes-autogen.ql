/**
 * @name openssl-949ff36623eafc3523a9f91784992965018ffb05-fbytes
 * @id cpp/openssl/949ff36623eafc3523a9f91784992965018ffb05/fbytes
 * @description openssl-949ff36623eafc3523a9f91784992965018ffb05-crypto/ecdsa/ecdsatest.c-fbytes CVE-2018-0495
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vnum_156, Parameter vbuf_156, LogicalOrExpr target_2, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getType().hasName("int")
		and target_0.getCondition().(EqualityOperation).getAnOperand().(Literal).getValue()="0"
		and target_0.getThen().(ReturnStmt).getExpr().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="bytes"
		and target_0.getThen().(ReturnStmt).getExpr().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("const RAND_METHOD *")
		and target_0.getThen().(ReturnStmt).getExpr().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vbuf_156
		and target_0.getThen().(ReturnStmt).getExpr().(VariableCall).getArgument(1).(VariableAccess).getTarget()=vnum_156
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_0.getThen().(ReturnStmt).getExpr().(VariableCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_2.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getLocation()))
}

predicate func_1(Function func) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
		and target_1.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_1)
}

predicate func_2(Parameter vnum_156, Parameter vbuf_156, LogicalOrExpr target_2) {
		target_2.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getTarget()=vnum_156
		and target_2.getAnOperand().(EqualityOperation).getAnOperand().(DivExpr).getLeftOperand().(AddExpr).getAnOperand().(FunctionCall).getTarget().hasName("BN_num_bits")
		and target_2.getAnOperand().(EqualityOperation).getAnOperand().(DivExpr).getLeftOperand().(AddExpr).getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("BIGNUM *")
		and target_2.getAnOperand().(EqualityOperation).getAnOperand().(DivExpr).getLeftOperand().(AddExpr).getAnOperand().(Literal).getValue()="7"
		and target_2.getAnOperand().(EqualityOperation).getAnOperand().(DivExpr).getRightOperand().(Literal).getValue()="8"
		and target_2.getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("BN_bn2bin")
		and target_2.getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("BIGNUM *")
		and target_2.getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vbuf_156
}

from Function func, Parameter vnum_156, Parameter vbuf_156, LogicalOrExpr target_2
where
not func_0(vnum_156, vbuf_156, target_2, func)
and not func_1(func)
and func_2(vnum_156, vbuf_156, target_2)
and vnum_156.getType().hasName("int")
and vbuf_156.getType().hasName("unsigned char *")
and vnum_156.getFunction() = func
and vbuf_156.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
