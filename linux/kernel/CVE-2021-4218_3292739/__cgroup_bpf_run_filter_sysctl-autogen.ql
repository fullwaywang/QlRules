/**
 * @name linux-32927393dc1ccd60fb2bdc05b9e8e88753761469-__cgroup_bpf_run_filter_sysctl
 * @id cpp/linux/32927393dc1ccd60fb2bdc05b9e8e88753761469/--cgroup-bpf-run-filter-sysctl
 * @description linux-32927393dc1ccd60fb2bdc05b9e8e88753761469-kernel/bpf/cgroup.c-__cgroup_bpf_run_filter_sysctl CVE-2021-4218
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vctx_1164, ValueFieldAccess target_0) {
	target_0.getTarget().getName()="cur_len"
	and target_0.getQualifier().(VariableAccess).getTarget()=vctx_1164
}

predicate func_1(Variable vctx_1164, ValueFieldAccess target_13, ValueFieldAccess target_1) {
	target_1.getTarget().getName()="new_val"
	and target_1.getQualifier().(VariableAccess).getTarget()=vctx_1164
	and target_1.getQualifier().(VariableAccess).getLocation().isBefore(target_13.getQualifier().(VariableAccess).getLocation())
}

predicate func_2(Parameter vnew_buf_1161, VariableAccess target_2) {
	target_2.getTarget()=vnew_buf_1161
	and vnew_buf_1161.getIndex() = 6
}

predicate func_3(Function func, FunctionCall target_3) {
	target_3.getTarget().hasName("set_fs")
	and not target_3.getTarget().hasName("kfree")
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Parameter vbuf_1160, LogicalAndExpr target_23) {
exists(PointerDereferenceExpr target_4 |
	target_4.getOperand().(VariableAccess).getTarget()=vbuf_1160
	and target_4.getOperand().(VariableAccess).getLocation().isBefore(target_23.getLeftOperand().(LogicalAndExpr).getRightOperand().(VariableAccess).getLocation()))
}

predicate func_5(Parameter vbuf_1160) {
exists(FunctionCall target_5 |
	target_5.getTarget().hasName("__memcpy")
	and target_5.getArgument(0) instanceof ValueFieldAccess
	and target_5.getArgument(1).(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vbuf_1160
	and target_5.getArgument(2) instanceof ValueFieldAccess)
}

predicate func_6(Parameter vbuf_1160) {
exists(PointerDereferenceExpr target_6 |
	target_6.getOperand().(VariableAccess).getTarget()=vbuf_1160
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall)
}

predicate func_7(Variable vctx_1164, LogicalAndExpr target_23, ExprStmt target_7) {
	target_7.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="new_val"
	and target_7.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_1164
	and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("__kmalloc_track_caller")
	and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(BinaryBitwiseOperation).getValue()="4096"
	and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(BitwiseOrExpr).getValue()="3264"
	and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(FunctionCall).getTarget().hasName("__builtin_return_address")
	and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(FunctionCall).getArgument(0).(Literal).getValue()="0"
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_23
}

predicate func_8(Parameter vpcount_1160, Variable vctx_1164, LogicalAndExpr target_23, ExprStmt target_8) {
	target_8.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="new_len"
	and target_8.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_1164
	and target_8.getExpr().(AssignExpr).getRValue().(BuiltInChooseExpr).getChild(0).(LogicalAndExpr).getValue()="0"
	and target_8.getExpr().(AssignExpr).getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getCondition().(RelationalOperation).getLesserOperand().(BinaryBitwiseOperation).getValue()="4096"
	and target_8.getExpr().(AssignExpr).getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getCondition().(RelationalOperation).getGreaterOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vpcount_1160
	and target_8.getExpr().(AssignExpr).getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getThen().(BinaryBitwiseOperation).getValue()="4096"
	and target_8.getExpr().(AssignExpr).getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getElse().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vpcount_1160
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_23
}

predicate func_9(Variable vctx_1164, ValueFieldAccess target_9) {
	target_9.getTarget().getName()="cur_val"
	and target_9.getQualifier().(VariableAccess).getTarget()=vctx_1164
}

predicate func_10(ValueFieldAccess target_9, Function func, DeclStmt target_10) {
	target_10.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
	and target_10.getEnclosingFunction() = func
}

predicate func_11(Parameter vtable_1159, Variable vctx_1164, Variable vpos_1181, VariableCall target_11) {
	target_11.getExpr().(PointerFieldAccess).getTarget().getName()="proc_handler"
	and target_11.getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vtable_1159
	and target_11.getArgument(0).(VariableAccess).getTarget()=vtable_1159
	and target_11.getArgument(1).(Literal).getValue()="0"
	and target_11.getArgument(2).(ValueFieldAccess).getTarget().getName()="cur_val"
	and target_11.getArgument(2).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_1164
	and target_11.getArgument(3).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="cur_len"
	and target_11.getArgument(3).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_1164
	and target_11.getArgument(4).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vpos_1181
}

/*predicate func_12(Variable vctx_1164, ValueFieldAccess target_12) {
	target_12.getTarget().getName()="new_val"
	and target_12.getQualifier().(VariableAccess).getTarget()=vctx_1164
}

*/
predicate func_13(Variable vctx_1164, ValueFieldAccess target_13) {
	target_13.getTarget().getName()="new_val"
	and target_13.getQualifier().(VariableAccess).getTarget()=vctx_1164
}

predicate func_14(Variable vctx_1164, ValueFieldAccess target_14) {
	target_14.getTarget().getName()="new_len"
	and target_14.getQualifier().(VariableAccess).getTarget()=vctx_1164
}

predicate func_15(Variable vctx_1164, LogicalOrExpr target_24, ExprStmt target_15) {
	target_15.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="new_len"
	and target_15.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_1164
	and target_15.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_15.getParent().(IfStmt).getCondition()=target_24
}

predicate func_16(ValueFieldAccess target_9, Function func, DeclStmt target_16) {
	target_16.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
	and target_16.getEnclosingFunction() = func
}

predicate func_17(Variable vold_fs_1180, AssignExpr target_17) {
	target_17.getLValue().(VariableAccess).getTarget()=vold_fs_1180
	and target_17.getRValue().(ValueFieldAccess).getTarget().getName()="addr_limit"
	and target_17.getRValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="thread"
	and target_17.getRValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("get_current")
}

predicate func_18(Function func, UnaryMinusExpr target_18) {
	target_18.getParent().(ClassAggregateLiteral).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
	and target_18.getEnclosingFunction() = func
}

predicate func_19(Variable vctx_1164, ValueFieldAccess target_9, IfStmt target_19) {
	target_19.getCondition() instanceof VariableCall
	and target_19.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="cur_len"
	and target_19.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_1164
	and target_19.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_19.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
}

predicate func_20(Variable vold_fs_1180, ValueFieldAccess target_9, ExprStmt target_20) {
	target_20.getExpr().(FunctionCall).getTarget().hasName("set_fs")
	and target_20.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vold_fs_1180
	and target_20.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
}

predicate func_21(Parameter vbuf_1160, LogicalOrExpr target_24, VariableAccess target_21) {
	target_21.getTarget()=vbuf_1160
}

predicate func_22(Parameter vbuf_1160, ExprStmt target_15, FunctionCall target_22) {
	target_22.getTarget().hasName("copy_from_user")
	and target_22.getArgument(0) instanceof ValueFieldAccess
	and target_22.getArgument(1).(VariableAccess).getTarget()=vbuf_1160
	and target_22.getArgument(2) instanceof ValueFieldAccess
	and target_22.getParent().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand() instanceof ValueFieldAccess
	and target_22.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen()=target_15
}

predicate func_23(Parameter vbuf_1160, Parameter vpcount_1160, LogicalAndExpr target_23) {
	target_23.getLeftOperand().(LogicalAndExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_23.getLeftOperand().(LogicalAndExpr).getRightOperand().(VariableAccess).getTarget()=vbuf_1160
	and target_23.getRightOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vpcount_1160
}

predicate func_24(Function func, LogicalOrExpr target_24) {
	target_24.getLeftOperand().(NotExpr).getOperand() instanceof ValueFieldAccess
	and target_24.getRightOperand() instanceof FunctionCall
	and target_24.getEnclosingFunction() = func
}

from Function func, Parameter vtable_1159, Parameter vbuf_1160, Parameter vpcount_1160, Parameter vnew_buf_1161, Variable vctx_1164, Variable vold_fs_1180, Variable vpos_1181, ValueFieldAccess target_0, ValueFieldAccess target_1, VariableAccess target_2, FunctionCall target_3, ExprStmt target_7, ExprStmt target_8, ValueFieldAccess target_9, DeclStmt target_10, VariableCall target_11, ValueFieldAccess target_13, ValueFieldAccess target_14, ExprStmt target_15, DeclStmt target_16, AssignExpr target_17, UnaryMinusExpr target_18, IfStmt target_19, ExprStmt target_20, VariableAccess target_21, FunctionCall target_22, LogicalAndExpr target_23, LogicalOrExpr target_24
where
func_0(vctx_1164, target_0)
and func_1(vctx_1164, target_13, target_1)
and func_2(vnew_buf_1161, target_2)
and func_3(func, target_3)
and not func_4(vbuf_1160, target_23)
and not func_5(vbuf_1160)
and not func_6(vbuf_1160)
and func_7(vctx_1164, target_23, target_7)
and func_8(vpcount_1160, vctx_1164, target_23, target_8)
and func_9(vctx_1164, target_9)
and func_10(target_9, func, target_10)
and func_11(vtable_1159, vctx_1164, vpos_1181, target_11)
and func_13(vctx_1164, target_13)
and func_14(vctx_1164, target_14)
and func_15(vctx_1164, target_24, target_15)
and func_16(target_9, func, target_16)
and func_17(vold_fs_1180, target_17)
and func_18(func, target_18)
and func_19(vctx_1164, target_9, target_19)
and func_20(vold_fs_1180, target_9, target_20)
and func_21(vbuf_1160, target_24, target_21)
and func_22(vbuf_1160, target_15, target_22)
and func_23(vbuf_1160, vpcount_1160, target_23)
and func_24(func, target_24)
and vtable_1159.getType().hasName("ctl_table *")
and vbuf_1160.getType().hasName("void *")
and vpcount_1160.getType().hasName("size_t *")
and vnew_buf_1161.getType().hasName("void **")
and vctx_1164.getType().hasName("bpf_sysctl_kern")
and vold_fs_1180.getType().hasName("mm_segment_t")
and vpos_1181.getType().hasName("loff_t")
and vtable_1159.getFunction() = func
and vbuf_1160.getFunction() = func
and vpcount_1160.getFunction() = func
and vnew_buf_1161.getFunction() = func
and vctx_1164.(LocalVariable).getFunction() = func
and vold_fs_1180.(LocalVariable).getFunction() = func
and vpos_1181.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
