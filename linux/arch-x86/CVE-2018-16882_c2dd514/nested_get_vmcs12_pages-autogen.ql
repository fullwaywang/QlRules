/**
 * @name linux-c2dd5146e9fe1f22c77c1b011adf84eea0245806-nested_get_vmcs12_pages
 * @id cpp/linux/c2dd5146e9fe1f22c77c1b011adf84eea0245806/nested-get-vmcs12-pages
 * @description linux-c2dd5146e9fe1f22c77c1b011adf84eea0245806-arch/x86/kvm/vmx.c-nested_get_vmcs12_pages CVE-2018-16882
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vvmx_11924, ValueFieldAccess target_2, ExprStmt target_3, ExprStmt target_4) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="pi_desc"
	and target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="nested"
	and target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvmx_11924
	and target_0.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(3)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_3.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(ValueFieldAccess target_2, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("vmcs_write64")
	and target_1.getExpr().(FunctionCall).getArgument(1).(UnaryMinusExpr).getValue()="18446744073709551615"
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(4)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_1.getEnclosingFunction() = func)
}

predicate func_2(Variable vvmx_11924, ValueFieldAccess target_2) {
	target_2.getTarget().getName()="pi_desc_page"
	and target_2.getQualifier().(PointerFieldAccess).getTarget().getName()="nested"
	and target_2.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvmx_11924
}

predicate func_3(Variable vvmx_11924, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="pi_desc_page"
	and target_3.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="nested"
	and target_3.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvmx_11924
	and target_3.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

predicate func_4(Variable vvmx_11924, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="pi_desc_page"
	and target_4.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="nested"
	and target_4.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvmx_11924
	and target_4.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("page *")
}

from Function func, Variable vvmx_11924, ValueFieldAccess target_2, ExprStmt target_3, ExprStmt target_4
where
not func_0(vvmx_11924, target_2, target_3, target_4)
and not func_1(target_2, func)
and func_2(vvmx_11924, target_2)
and func_3(vvmx_11924, target_3)
and func_4(vvmx_11924, target_4)
and vvmx_11924.getType().hasName("vcpu_vmx *")
and vvmx_11924.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
