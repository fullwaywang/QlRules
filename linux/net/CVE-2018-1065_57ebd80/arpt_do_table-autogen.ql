/**
 * @name linux-57ebd808a97d7c5b1e1afb937c2db22beba3c1f8-arpt_do_table
 * @id cpp/linux/57ebd808a97d7c5b1e1afb937c2db22beba3c1f8/arpt-do-table
 * @description linux-57ebd808a97d7c5b1e1afb937c2db22beba3c1f8-net/ipv4/netfilter/arp_tables.c-arpt_do_table CVE-2018-1065
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vverdict_187, Variable vstackidx_192, Variable vprivate_193, EqualityOperation target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, ArrayExpr target_5) {
	exists(IfStmt target_0 |
		target_0.getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
		and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vstackidx_192
		and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getTarget().getName()="stacksize"
		and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vprivate_193
		and target_0.getCondition().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vverdict_187
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation())
		and target_3.getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayOffset().(PrefixDecrExpr).getOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation())
		and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(PostfixIncrExpr).getOperand().(VariableAccess).getLocation())
		and target_5.getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Function func, EqualityOperation target_1) {
		target_1.getAnOperand().(PointerArithmeticOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("const void *")
		and target_1.getAnOperand().(PointerArithmeticOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_1.getAnOperand().(FunctionCall).getTarget().hasName("arpt_next_entry")
		and target_1.getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("arpt_entry *")
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vverdict_187, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vverdict_187
		and target_2.getExpr().(AssignExpr).getRValue().(SubExpr).getLeftOperand().(UnaryMinusExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getExpr().(AssignExpr).getRValue().(SubExpr).getRightOperand().(Literal).getValue()="1"
}

predicate func_3(Variable vstackidx_192, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("arpt_entry *")
		and target_3.getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("arpt_entry **")
		and target_3.getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayOffset().(PrefixDecrExpr).getOperand().(VariableAccess).getTarget()=vstackidx_192
}

predicate func_4(Variable vstackidx_192, ExprStmt target_4) {
		target_4.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("arpt_entry **")
		and target_4.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget()=vstackidx_192
		and target_4.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("arpt_entry *")
}

predicate func_5(Variable vprivate_193, ArrayExpr target_5) {
		target_5.getArrayBase().(PointerFieldAccess).getTarget().getName()="underflow"
		and target_5.getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vprivate_193
		and target_5.getArrayOffset().(VariableAccess).getTarget().getType().hasName("unsigned int")
}

from Function func, Variable vverdict_187, Variable vstackidx_192, Variable vprivate_193, EqualityOperation target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, ArrayExpr target_5
where
not func_0(vverdict_187, vstackidx_192, vprivate_193, target_1, target_2, target_3, target_4, target_5)
and func_1(func, target_1)
and func_2(vverdict_187, target_2)
and func_3(vstackidx_192, target_3)
and func_4(vstackidx_192, target_4)
and func_5(vprivate_193, target_5)
and vverdict_187.getType().hasName("unsigned int")
and vstackidx_192.getType().hasName("unsigned int")
and vprivate_193.getType().hasName("const xt_table_info *")
and vverdict_187.(LocalVariable).getFunction() = func
and vstackidx_192.(LocalVariable).getFunction() = func
and vprivate_193.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
