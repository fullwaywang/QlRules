/**
 * @name linux-2d45a02d0166caf2627fe91897c6ffc3b19514c4-sctp_setsockopt_auto_asconf
 * @id cpp/linux/2d45a02d0166caf2627fe91897c6ffc3b19514c4/sctp-setsockopt-auto-asconf
 * @description linux-2d45a02d0166caf2627fe91897c6ffc3b19514c4-net/sctp/socket.c-sctp_setsockopt_auto_asconf CVE-2015-3212
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsk_3568, IfStmt target_2, LogicalAndExpr target_3, AddressOfExpr target_4, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("spin_lock_bh")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="addr_wq_lock"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sctp"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("sock_net")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_3568
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
	and target_3.getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vsk_3568, AddressOfExpr target_4, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("spin_unlock_bh")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="addr_wq_lock"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sctp"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("sock_net")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_3568
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getFollowingStmt() instanceof ReturnStmt
	and target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Function func, IfStmt target_2) {
	target_2.getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(PointerFieldAccess).getTarget().getName()="do_auto_asconf"
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("sctp_sock *")
	and target_2.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("list_del")
	and target_2.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="auto_asconf_list"
	and target_2.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("sctp_sock *")
	and target_2.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="do_auto_asconf"
	and target_2.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("sctp_sock *")
	and target_2.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_2.getElse().(IfStmt).getCondition().(LogicalAndExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getElse().(IfStmt).getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="do_auto_asconf"
	and target_2.getElse().(IfStmt).getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("sctp_sock *")
	and target_2.getElse().(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("list_add_tail")
	and target_2.getElse().(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="auto_asconf_list"
	and target_2.getElse().(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="auto_asconf_splist"
	and target_2.getElse().(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="do_auto_asconf"
	and target_2.getElse().(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("sctp_sock *")
	and target_2.getElse().(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="1"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Parameter vsk_3568, LogicalAndExpr target_3) {
	target_3.getLeftOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("sctp_is_ep_boundall")
	and target_3.getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_3568
	and target_3.getRightOperand().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_4(Parameter vsk_3568, AddressOfExpr target_4) {
	target_4.getOperand().(ValueFieldAccess).getTarget().getName()="auto_asconf_splist"
	and target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sctp"
	and target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("sock_net")
	and target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_3568
}

from Function func, Parameter vsk_3568, IfStmt target_2, LogicalAndExpr target_3, AddressOfExpr target_4
where
not func_0(vsk_3568, target_2, target_3, target_4, func)
and not func_1(vsk_3568, target_4, func)
and func_2(func, target_2)
and func_3(vsk_3568, target_3)
and func_4(vsk_3568, target_4)
and vsk_3568.getType().hasName("sock *")
and vsk_3568.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
