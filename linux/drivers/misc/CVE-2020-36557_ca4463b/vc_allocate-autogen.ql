/**
 * @name linux-ca4463bf8438b403596edd0ec961ca0d4fbe0220-vc_allocate
 * @id cpp/linux/ca4463bf8438b403596edd0ec961ca0d4fbe0220/vc-allocate
 * @description linux-ca4463bf8438b403596edd0ec961ca0d4fbe0220-drivers/tty/vt/vt.c-vc_allocate CVE-2020-36557
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vvc_1081, DoStmt target_1, AddressOfExpr target_2, ExprStmt target_3, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="ops"
	and target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="port"
	and target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvc_1081
	and target_0.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("const tty_port_operations")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Function func, DoStmt target_1) {
	target_1.getCondition().(Literal).getValue()="0"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__init_work")
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="SAK_work"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_1.getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="data"
	and target_1.getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="SAK_work"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vvc_1081, AddressOfExpr target_2) {
	target_2.getOperand().(PointerFieldAccess).getTarget().getName()="port"
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvc_1081
}

predicate func_3(Variable vvc_1081, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("visual_init")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvc_1081
	and target_3.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_3.getExpr().(FunctionCall).getArgument(2).(Literal).getValue()="1"
}

from Function func, Variable vvc_1081, DoStmt target_1, AddressOfExpr target_2, ExprStmt target_3
where
not func_0(vvc_1081, target_1, target_2, target_3, func)
and func_1(func, target_1)
and func_2(vvc_1081, target_2)
and func_3(vvc_1081, target_3)
and vvc_1081.getType().hasName("vc_data *")
and vvc_1081.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
