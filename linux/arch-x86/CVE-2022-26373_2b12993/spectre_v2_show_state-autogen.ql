/**
 * @name linux-2b1299322016731d56807aa49254a5ea3080b6b3-spectre_v2_show_state
 * @id cpp/linux/2b1299322016731d56807aa49254a5ea3080b6b3/spectre-v2-show-state
 * @description linux-2b1299322016731d56807aa49254a5ea3080b6b3-arch/x86/kernel/cpu/bugs.c-spectre_v2_show_state CVE-2022-26373
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, StringLiteral target_0) {
	target_0.getValue()="%s%s%s%s%s%s\n"
	and not target_0.getValue()="%s%s%s%s%s%s%s\n"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("pbrsb_eibrs_state")
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("sprintf")
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("char *")
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(1) instanceof StringLiteral
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(2).(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(2).(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("spectre_v2_mitigation")
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(3).(FunctionCall).getTarget().hasName("ibpb_state")
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(4).(ConditionalExpr).getCondition().(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(4).(ConditionalExpr).getCondition().(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(4).(ConditionalExpr).getCondition().(ConditionalExpr).getElse().(ConditionalExpr).getCondition().(Literal).getValue()="1"
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(4).(ConditionalExpr).getCondition().(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getTarget().hasName("constant_test_bit")
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(4).(ConditionalExpr).getCondition().(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(4).(ConditionalExpr).getCondition().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("variable_test_bit")
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(4).(ConditionalExpr).getCondition().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(4).(ConditionalExpr).getThen().(StringLiteral).getValue()=", IBRS_FW"
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(4).(ConditionalExpr).getElse().(StringLiteral).getValue()=""
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(5).(FunctionCall).getTarget().hasName("stibp_state")
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getCondition().(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getCondition().(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getCondition().(ConditionalExpr).getElse().(ConditionalExpr).getCondition().(Literal).getValue()="1"
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getCondition().(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getTarget().hasName("constant_test_bit")
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getCondition().(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getCondition().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("variable_test_bit")
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getCondition().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getThen().(StringLiteral).getValue()=", RSB filling"
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getElse().(StringLiteral).getValue()=""
	and target_1.getParent().(FunctionCall).getParent().(ReturnStmt).getExpr().(FunctionCall).getArgument(7).(FunctionCall).getTarget().hasName("spectre_v2_module_string")
	and target_1.getEnclosingFunction() = func)
}

from Function func, StringLiteral target_0
where
func_0(func, target_0)
and not func_1(func)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
