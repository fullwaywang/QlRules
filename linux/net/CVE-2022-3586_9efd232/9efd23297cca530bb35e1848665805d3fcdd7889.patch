commit 9efd23297cca530bb35e1848665805d3fcdd7889
Author: Toke Høiland-Jørgensen <toke@toke.dk>
Date:   Wed Aug 31 23:52:18 2022 +0200

    sch_sfb: Don't assume the skb is still around after enqueueing to child
    
    The sch_sfb enqueue() routine assumes the skb is still alive after it has
    been enqueued into a child qdisc, using the data in the skb cb field in the
    increment_qlen() routine after enqueue. However, the skb may in fact have
    been freed, causing a use-after-free in this case. In particular, this
    happens if sch_cake is used as a child of sfb, and the GSO splitting mode
    of CAKE is enabled (in which case the skb will be split into segments and
    the original skb freed).
    
    Fix this by copying the sfb cb data to the stack before enqueueing the skb,
    and using this stack copy in increment_qlen() instead of the skb pointer
    itself.
    
    Reported-by: zdi-disclosures@trendmicro.com # ZDI-CAN-18231
    Fixes: e13e02a3c68d ("net_sched: SFB flow scheduler")
    Signed-off-by: Toke Høiland-Jørgensen <toke@toke.dk>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/sched/sch_sfb.c b/net/sched/sch_sfb.c
index 3d061a13d7ed..0d761f454ae8 100644
--- a/net/sched/sch_sfb.c
+++ b/net/sched/sch_sfb.c
@@ -135,15 +135,15 @@ static void increment_one_qlen(u32 sfbhash, u32 slot, struct sfb_sched_data *q)
 	}
 }
 
-static void increment_qlen(const struct sk_buff *skb, struct sfb_sched_data *q)
+static void increment_qlen(const struct sfb_skb_cb *cb, struct sfb_sched_data *q)
 {
 	u32 sfbhash;
 
-	sfbhash = sfb_hash(skb, 0);
+	sfbhash = cb->hashes[0];
 	if (sfbhash)
 		increment_one_qlen(sfbhash, 0, q);
 
-	sfbhash = sfb_hash(skb, 1);
+	sfbhash = cb->hashes[1];
 	if (sfbhash)
 		increment_one_qlen(sfbhash, 1, q);
 }
@@ -283,6 +283,7 @@ static int sfb_enqueue(struct sk_buff *skb, struct Qdisc *sch,
 	struct sfb_sched_data *q = qdisc_priv(sch);
 	struct Qdisc *child = q->qdisc;
 	struct tcf_proto *fl;
+	struct sfb_skb_cb cb;
 	int i;
 	u32 p_min = ~0;
 	u32 minqlen = ~0;
@@ -399,11 +400,12 @@ static int sfb_enqueue(struct sk_buff *skb, struct Qdisc *sch,
 	}
 
 enqueue:
+	memcpy(&cb, sfb_skb_cb(skb), sizeof(cb));
 	ret = qdisc_enqueue(skb, child, to_free);
 	if (likely(ret == NET_XMIT_SUCCESS)) {
 		qdisc_qstats_backlog_inc(sch, skb);
 		sch->q.qlen++;
-		increment_qlen(skb, q);
+		increment_qlen(&cb, q);
 	} else if (net_xmit_drop_count(ret)) {
 		q->stats.childdrop++;
 		qdisc_qstats_drop(sch);
