/**
 * @name linux-8e24beb3c2b08a4763f920399a9cc577ed440a1a-amdgpu_umc_handle_bad_pages
 * @id cpp/linux/8e24beb3c2b08a4763f920399a9cc577ed440a1a/amdgpu-umc-handle-bad-pages
 * @description linux-8e24beb3c2b08a4763f920399a9cc577ed440a1a-drivers/gpu/drm/amd/amdgpu/amdgpu_umc.c-amdgpu_umc_handle_bad_pages CVE-2024-42123
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable verr_data_92, ExprStmt target_1, ExprStmt target_2, Function func) {
exists(ExprStmt target_0 |
	exists(AssignExpr obj_0 | obj_0=target_0.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="err_addr"
			and obj_1.getQualifier().(VariableAccess).getTarget()=verr_data_92
		)
		and obj_0.getRValue().(Literal).getValue()="0"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Function func, ExprStmt target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="page_retirement_lock"
				and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("amdgpu_ras *")
			)
		)
		and obj_0.getTarget().hasName("mutex_unlock")
	)
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable verr_data_92, ExprStmt target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().getName()="err_addr"
			and obj_1.getQualifier().(VariableAccess).getTarget()=verr_data_92
		)
		and obj_0.getTarget().hasName("kfree")
	)
}

from Function func, Variable verr_data_92, ExprStmt target_1, ExprStmt target_2
where
not func_0(verr_data_92, target_1, target_2, func)
and func_1(func, target_1)
and func_2(verr_data_92, target_2)
and verr_data_92.getType().hasName("ras_err_data *")
and verr_data_92.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
