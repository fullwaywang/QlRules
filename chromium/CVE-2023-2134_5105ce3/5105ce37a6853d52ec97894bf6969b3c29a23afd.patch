commit 5105ce37a6853d52ec97894bf6969b3c29a23afd	5105ce37a6853d52ec97894bf6969b3c29a23afd
Author: Yoshisato Yanagisawa <yyanagisawa@chromium.org>
Date:   Wed Apr 5 11:47:04 2023 +0000

    Stop supporting { handleEvent }.
    
    Make the code aligned with the following specification update:
    https://github.com/w3c/ServiceWorker/pull/1676
    
    With the previous specification and code, event listener vector
    can be modified during the GetEffectiveFunction execution, which may
    bring unexpected vector state.
    
    Change-Id: I732c4c9ab2caebc49a7f4ef52640df7b8476d838
    Bug: 1429201
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4394402
    Commit-Queue: Yoshisato Yanagisawa <yyanagisawa@chromium.org>
    Reviewed-by: Kouhei Ueno <kouhei@chromium.org>
    Reviewed-by: Domenic Denicola <domenic@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1126483}

diff --git a/content/browser/service_worker/service_worker_version_browsertest.cc b/content/browser/service_worker/service_worker_version_browsertest.cc
index cc824078d908e..48d232bd03017 100644
--- a/content/browser/service_worker/service_worker_version_browsertest.cc
+++ b/content/browser/service_worker/service_worker_version_browsertest.cc
@@ -987,6 +987,17 @@ IN_PROC_BROWSER_TEST_F(ServiceWorkerVersionBrowserTest,
             version_->fetch_handler_type());
 }
 
+IN_PROC_BROWSER_TEST_F(ServiceWorkerVersionBrowserTest,
+                       RemoveFetchEventListenersInGet) {
+  StartServerAndNavigateToSetup();
+  ASSERT_EQ(Install("/service_worker/fetch_event_object_removing_itself.js"),
+            blink::ServiceWorkerStatusCode::kOk);
+  EXPECT_EQ(ServiceWorkerVersion::FetchHandlerExistence::EXISTS,
+            version_->fetch_handler_existence());
+  EXPECT_EQ(ServiceWorkerVersion::FetchHandlerType::kNotSkippable,
+            version_->fetch_handler_type());
+}
+
 // Check that fetch event handler added in the install event should result in a
 // service worker that doesn't count as having a fetch event handler.
 IN_PROC_BROWSER_TEST_F(ServiceWorkerVersionBrowserTest,
diff --git a/content/test/content_unittests_bundle_data.filelist b/content/test/content_unittests_bundle_data.filelist
index 8200ec32a2c02..32c8395cffad2 100644
--- a/content/test/content_unittests_bundle_data.filelist
+++ b/content/test/content_unittests_bundle_data.filelist
@@ -1476,6 +1476,7 @@ data/service_worker/fetch_event.js
 data/service_worker/fetch_event.js.mock-http-headers
 data/service_worker/fetch_event_blob.js
 data/service_worker/fetch_event_blob.js.mock-http-headers
+data/service_worker/fetch_event_object_removing_itself.js
 data/service_worker/fetch_event_pass_through.js
 data/service_worker/fetch_event_pass_through.js.mock-http-headers
 data/service_worker/fetch_event_rejected.js
diff --git a/content/test/data/service_worker/fetch_event_object_removing_itself.js b/content/test/data/service_worker/fetch_event_object_removing_itself.js
new file mode 100644
index 0000000000000..110bc4821fae3
--- /dev/null
+++ b/content/test/data/service_worker/fetch_event_object_removing_itself.js
@@ -0,0 +1,19 @@
+// Copyright 2023 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+let obj = {};
+function victim() {}
+
+Object.defineProperty(obj, 'handleEvent', {
+  get: () => {
+    // Remove the victim function from the listener vector to break the loop.
+    self.removeEventListener('fetch', victim);
+    return () => {};
+  },
+  configurable: true,
+  enumerable: true,
+});
+
+self.addEventListener('fetch', obj);
+self.addEventListener('fetch', victim);
diff --git a/third_party/blink/renderer/modules/service_worker/service_worker_global_scope.cc b/third_party/blink/renderer/modules/service_worker/service_worker_global_scope.cc
index 742b22677865a..ad93bcb934600 100644
--- a/third_party/blink/renderer/modules/service_worker/service_worker_global_scope.cc
+++ b/third_party/blink/renderer/modules/service_worker/service_worker_global_scope.cc
@@ -2628,7 +2628,7 @@ ServiceWorkerGlobalScope::FetchHandlerType() {
   }
 
   ScriptState* script_state = ScriptController()->GetScriptState();
-  // Do not remove this, |scope| is needed by `GetEffectiveFunction`.
+  // Do not remove this, |scope| is needed by `GetListenerObject`.
   ScriptState::Scope scope(script_state);
 
   // TODO(crbug.com/1349613): revisit the way to implement this.
@@ -2636,8 +2636,8 @@ ServiceWorkerGlobalScope::FetchHandlerType() {
   for (RegisteredEventListener& e : *elv) {
     EventTarget* et = EventTarget::Create(script_state);
     v8::Local<v8::Value> v =
-        To<JSBasedEventListener>(e.Callback())->GetEffectiveFunction(*et);
-    if (!v->IsFunction() ||
+        To<JSBasedEventListener>(e.Callback())->GetListenerObject(*et);
+    if (v.IsEmpty() || !v->IsFunction() ||
         !v.As<v8::Function>()->Experimental_IsNopFunction()) {
       return mojom::blink::ServiceWorkerFetchHandlerType::kNotSkippable;
     }
