/**
 * @name linux-5610bcfe8693c02e2e4c8b31427f1bdbdecc839c-ufx_usb_disconnect
 * @id cpp/linux/5610bcfe8693c02e2e4c8b31427f1bdbdecc839c/ufx-usb-disconnect
 * @description linux-5610bcfe8693c02e2e4c8b31427f1bdbdecc839c-drivers/video/fbdev/smscufx.c-ufx_usb_disconnect CVE-2022-41849
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_2, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
	and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation()))
}

predicate func_1(Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getFollowingStmt() instanceof ReturnStmt)
}

predicate func_2(Function func, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("ufx_data *")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("usb_get_intfdata")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("usb_interface *")
	and target_2.getEnclosingFunction() = func
}

from Function func, ExprStmt target_2
where
not func_0(target_2, func)
and not func_1(func)
and func_2(func, target_2)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
