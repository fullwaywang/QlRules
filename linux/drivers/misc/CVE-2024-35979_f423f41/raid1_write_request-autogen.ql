/**
 * @name linux-f423f41b7679c09abb26d2bd54be5cbef23c9446-raid1_write_request
 * @id cpp/linux/f423f41b7679c09abb26d2bd54be5cbef23c9446/raid1-write-request
 * @description linux-f423f41b7679c09abb26d2bd54be5cbef23c9446-drivers/md/raid1.c-raid1_write_request CVE-2024-35979
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vr1_bio_1342, FunctionCall target_0) {
	target_0.getTarget().hasName("free_r1bio")
	and not target_0.getTarget().hasName("mempool_free")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vr1_bio_1342
}

predicate func_1(Variable vconf_1341, ValueFieldAccess target_2, ExprStmt target_3) {
exists(AddressOfExpr target_1 |
	target_1.getOperand().(PointerFieldAccess).getTarget().getName()="r1bio_pool"
	and target_1.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vconf_1341
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
	and target_2.getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_1.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable vconf_1341, ValueFieldAccess target_2) {
	target_2.getTarget().getName()="rdev"
	and target_2.getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="mirrors"
	and target_2.getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vconf_1341
	and target_2.getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_3(Variable vconf_1341, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("allow_barrier")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vconf_1341
	and target_3.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="bi_sector"
	and target_3.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="bi_iter"
	and target_3.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bio *")
}

from Function func, Variable vconf_1341, Variable vr1_bio_1342, FunctionCall target_0, ValueFieldAccess target_2, ExprStmt target_3
where
func_0(vr1_bio_1342, target_0)
and not func_1(vconf_1341, target_2, target_3)
and func_2(vconf_1341, target_2)
and func_3(vconf_1341, target_3)
and vconf_1341.getType().hasName("r1conf *")
and vr1_bio_1342.getType().hasName("r1bio *")
and vconf_1341.(LocalVariable).getFunction() = func
and vr1_bio_1342.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
