/**
 * @name linux-26896f01467a28651f7a536143fe5ac8449d4041-rawsock_create
 * @id cpp/linux/26896f01467a28651f7a536143fe5ac8449d4041/rawsock-create
 * @description linux-26896f01467a28651f7a536143fe5ac8449d4041-net/nfc/rawsock.c-rawsock_create CVE-2020-26088
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(EqualityOperation target_3, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("capable")
	and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(Literal).getValue()="13"
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-1"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
	and target_0.getEnclosingFunction() = func)
}

predicate func_1(Parameter vsock_321, Variable vrawsock_raw_ops, EqualityOperation target_3, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="ops"
	and target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsock_321
	and target_1.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vrawsock_raw_ops
	and target_1.getParent().(IfStmt).getCondition()=target_3
}

predicate func_2(Parameter vsock_321, Variable vrawsock_ops, EqualityOperation target_3, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="ops"
	and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsock_321
	and target_2.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vrawsock_ops
	and target_2.getParent().(IfStmt).getCondition()=target_3
}

predicate func_3(Parameter vsock_321, ExprStmt target_1, EqualityOperation target_3) {
	target_3.getLeftOperand().(PointerFieldAccess).getTarget().getName()="type"
	and target_3.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsock_321
	and target_3.getParent().(IfStmt).getThen()=target_1
}

from Function func, Parameter vsock_321, Variable vrawsock_raw_ops, Variable vrawsock_ops, ExprStmt target_1, ExprStmt target_2, EqualityOperation target_3
where
not func_0(target_3, func)
and func_1(vsock_321, vrawsock_raw_ops, target_3, target_1)
and func_2(vsock_321, vrawsock_ops, target_3, target_2)
and func_3(vsock_321, target_1, target_3)
and vsock_321.getType().hasName("socket *")
and vrawsock_raw_ops.getType().hasName("const proto_ops")
and vrawsock_ops.getType().hasName("const proto_ops")
and vsock_321.getFunction() = func
and not vrawsock_raw_ops.getParentScope+() = func
and not vrawsock_ops.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
