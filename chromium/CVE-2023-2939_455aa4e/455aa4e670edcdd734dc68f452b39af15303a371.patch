commit 455aa4e670edcdd734dc68f452b39af15303a371	455aa4e670edcdd734dc68f452b39af15303a371
Author: S. Ganesh <ganesh@chromium.org>
Date:   Thu Mar 30 01:50:49 2023 +0000

    Fix Chrome Crashpad arbitrary file create
    
    This CL uses a path `%systemroot%\SystemTemp`, if available, else uses a
    path under `%programfiles%` for the Crashpad directory.
    
    Both paths are only accessible to admin and system processes, and are
    therefore secure.
    
    Bug: 1427431
    Change-Id: Ic61cda0ff8bc3f0ef5b0d38afe7e27c28d07bedb
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4380263
    Reviewed-by: Will Harris <wfh@chromium.org>
    Auto-Submit: S Ganesh <ganesh@chromium.org>
    Commit-Queue: S Ganesh <ganesh@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1123994}

diff --git a/chrome/installer/setup/installer_crash_reporting.cc b/chrome/installer/setup/installer_crash_reporting.cc
index dc52df5ad1d07..db3ee1fe9b14d 100644
--- a/chrome/installer/setup/installer_crash_reporting.cc
+++ b/chrome/installer/setup/installer_crash_reporting.cc
@@ -11,6 +11,7 @@
 #include "base/command_line.h"
 #include "base/debug/leak_annotations.h"
 #include "base/files/file_path.h"
+#include "base/files/file_util.h"
 #include "base/notreached.h"
 #include "base/path_service.h"
 #include "base/strings/utf_string_conversions.h"
@@ -20,6 +21,7 @@
 #include "chrome/install_static/install_details.h"
 #include "chrome/installer/setup/installer_crash_reporter_client.h"
 #include "chrome/installer/setup/installer_state.h"
+#include "chrome/installer/setup/setup_util.h"
 #include "chrome/installer/util/google_update_settings.h"
 #include "components/crash/core/app/crashpad.h"
 #include "components/crash/core/common/crash_key.h"
@@ -43,9 +45,14 @@ const char* OperationToString(InstallerState::Operation operation) {
   return "";
 }
 
-// Retrieve the SYSTEM version of TEMP. We do this instead of GetTempPath so
-// that both elevated and SYSTEM runs share the same directory.
+// Returns the path returned by `installer::GetSecureSystemTemp` if available.
+// Otherwise, retrieves the SYSTEM version of TEMP. We do this instead of
+// GetTempPath so that both elevated and SYSTEM runs share the same directory.
 bool GetSystemTemp(base::FilePath* temp) {
+  if (GetSecureSystemTemp(temp)) {
+    return true;
+  }
+
   base::win::RegKey reg_key(
       HKEY_LOCAL_MACHINE,
       L"SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment",
diff --git a/chrome/installer/setup/setup_util.cc b/chrome/installer/setup/setup_util.cc
index 285c1e39be037..a34087b3e4dbe 100644
--- a/chrome/installer/setup/setup_util.cc
+++ b/chrome/installer/setup/setup_util.cc
@@ -32,6 +32,7 @@
 #include "base/metrics/histogram_functions.h"
 #include "base/metrics/histogram_macros.h"
 #include "base/numerics/safe_conversions.h"
+#include "base/path_service.h"
 #include "base/ranges/algorithm.h"
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
@@ -834,4 +835,26 @@ void AddUpdateDowngradeVersionItem(HKEY root,
   }
 }
 
+bool GetSecureSystemTemp(base::FilePath* temp) {
+  for (const auto key : {base::DIR_WINDOWS, base::DIR_PROGRAM_FILES}) {
+    base::FilePath secure_system_temp;
+    if (!base::PathService::Get(key, &secure_system_temp)) {
+      continue;
+    }
+
+    if (key == base::DIR_WINDOWS) {
+      secure_system_temp = secure_system_temp.AppendASCII("SystemTemp");
+    }
+
+    const bool success = base::PathExists(secure_system_temp) &&
+                         base::PathIsWritable(secure_system_temp);
+    if (success) {
+      *temp = secure_system_temp;
+      return success;
+    }
+  }
+
+  return false;
+}
+
 }  // namespace installer
diff --git a/chrome/installer/setup/setup_util.h b/chrome/installer/setup/setup_util.h
index 442632a4fd46f..967aea8a62dc8 100644
--- a/chrome/installer/setup/setup_util.h
+++ b/chrome/installer/setup/setup_util.h
@@ -176,6 +176,15 @@ void AddUpdateDowngradeVersionItem(HKEY root,
                                    const base::Version& new_version,
                                    WorkItemList* list);
 
+// Retrieves the path `%systemroot%\SystemTemp`, if available, else retrieves
+// `%programfiles%`.
+// Returns the path in `temp` and `true` if the path is writable by the caller,
+// which is usually only when the caller is running as admin or system.
+// Returns `false` otherwise.
+// Both paths are only accessible to admin and system processes, and are
+// therefore secure.
+bool GetSecureSystemTemp(base::FilePath* temp);
+
 }  // namespace installer
 
 #endif  // CHROME_INSTALLER_SETUP_SETUP_UTIL_H_
diff --git a/chrome/installer/setup/setup_util_unittest.cc b/chrome/installer/setup/setup_util_unittest.cc
index f2cc7b5ae7675..de05f88562a7b 100644
--- a/chrome/installer/setup/setup_util_unittest.cc
+++ b/chrome/installer/setup/setup_util_unittest.cc
@@ -15,9 +15,11 @@
 #include "base/base64.h"
 #include "base/command_line.h"
 #include "base/containers/contains.h"
+#include "base/files/file_path.h"
 #include "base/files/file_util.h"
 #include "base/files/scoped_temp_dir.h"
 #include "base/logging.h"
+#include "base/path_service.h"
 #include "base/process/kill.h"
 #include "base/process/launch.h"
 #include "base/process/process_handle.h"
@@ -735,6 +737,24 @@ TEST(SetupUtilTest, WerHelperRegPath) {
   ASSERT_FALSE(installer::GetWerHelperRegistryPath().empty());
 }
 
+TEST(SetupUtilTest, GetSecureSystemTemp) {
+  base::FilePath secure_system_temp;
+  ASSERT_EQ(installer::GetSecureSystemTemp(&secure_system_temp),
+            !!::IsUserAnAdmin());
+  if (!::IsUserAnAdmin()) {
+    return;
+  }
+
+  base::FilePath dir_windows;
+  ASSERT_TRUE(base::PathService::Get(base::DIR_WINDOWS, &dir_windows));
+  base::FilePath dir_program_files;
+  ASSERT_TRUE(
+      base::PathService::Get(base::DIR_PROGRAM_FILES, &dir_program_files));
+
+  ASSERT_TRUE((dir_windows.AppendASCII("SystemTemp") == secure_system_temp) ||
+              (dir_program_files == secure_system_temp));
+}
+
 namespace installer {
 
 class DeleteRegistryKeyPartialTest : public ::testing::Test {
