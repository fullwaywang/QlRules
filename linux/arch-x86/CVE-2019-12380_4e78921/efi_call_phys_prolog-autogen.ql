/**
 * @name linux-4e78921ba4dd0aca1cc89168f45039add4183f8e-efi_call_phys_prolog
 * @id cpp/linux/4e78921ba4dd0aca1cc89168f45039add4183f8e/efi-call-phys-prolog
 * @description linux-4e78921ba4dd0aca1cc89168f45039add4183f8e-arch/x86/platform/efi/efi_64.c-efi_call_phys_prolog CVE-2019-12380
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vefi_mm, NotExpr target_5, AddressOfExpr target_6) {
exists(ReturnStmt target_0 |
	target_0.getExpr().(ValueFieldAccess).getTarget().getName()="pgd"
	and target_0.getExpr().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
	and target_0.getExpr().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vefi_mm
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_6.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vsave_pgd_78, ForStmt target_7, ExprStmt target_9, Function func) {
exists(IfStmt target_1 |
	target_1.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vsave_pgd_78
	and target_1.getThen() instanceof ReturnStmt
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_7.getLocation())
	and target_1.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation().isBefore(target_9.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(VariableAccess).getLocation()))
}

predicate func_2(Variable vsave_pgd_78, ReturnStmt target_10, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("efi_call_phys_epilog")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsave_pgd_78
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_10.getExpr().(VariableAccess).getLocation().isBefore(target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Function func) {
exists(ReturnStmt target_3 |
	target_3.getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3)
}

predicate func_4(NotExpr target_5, Function func, ReturnStmt target_4) {
	target_4.getExpr().(Literal).getValue()="0"
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Function func, NotExpr target_5) {
	target_5.getOperand().(FunctionCall).getTarget().hasName("efi_enabled")
	and target_5.getOperand().(FunctionCall).getArgument(0).(Literal).getValue()="7"
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable vefi_mm, AddressOfExpr target_6) {
	target_6.getOperand().(VariableAccess).getTarget()=vefi_mm
}

predicate func_7(Function func, ForStmt target_7) {
	target_7.getInitialization().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_7.getInitialization().(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_7.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_7.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_7.getUpdate().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_7.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_7.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(MulExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_7.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(MulExpr).getRightOperand().(BinaryBitwiseOperation).getLeftOperand().(Literal).getValue()="1"
	and target_7.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(MulExpr).getRightOperand().(BinaryBitwiseOperation).getRightOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_7.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_7.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(AddExpr).getLeftOperand().(MulExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_7.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(AddExpr).getRightOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_7.getEnclosingFunction() = func
}

predicate func_9(Variable vsave_pgd_78, ExprStmt target_9) {
	target_9.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vsave_pgd_78
	and target_9.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
	and target_9.getExpr().(AssignExpr).getRValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget().getType().hasName("pgd_t *")
}

predicate func_10(Variable vsave_pgd_78, ReturnStmt target_10) {
	target_10.getExpr().(VariableAccess).getTarget()=vsave_pgd_78
}

from Function func, Variable vsave_pgd_78, Variable vefi_mm, ReturnStmt target_4, NotExpr target_5, AddressOfExpr target_6, ForStmt target_7, ExprStmt target_9, ReturnStmt target_10
where
not func_0(vefi_mm, target_5, target_6)
and not func_1(vsave_pgd_78, target_7, target_9, func)
and not func_2(vsave_pgd_78, target_10, func)
and not func_3(func)
and func_4(target_5, func, target_4)
and func_5(func, target_5)
and func_6(vefi_mm, target_6)
and func_7(func, target_7)
and func_9(vsave_pgd_78, target_9)
and func_10(vsave_pgd_78, target_10)
and vsave_pgd_78.getType().hasName("pgd_t *")
and vefi_mm.getType().hasName("mm_struct")
and vsave_pgd_78.(LocalVariable).getFunction() = func
and not vefi_mm.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
