/**
 * @name linux-8f34f1eac3820fc2722e5159acceb22545b30b0d-copy_nonpresent_pte
 * @id cpp/linux/8f34f1eac3820fc2722e5159acceb22545b30b0d/copy-nonpresent-pte
 * @description linux-8f34f1eac3820fc2722e5159acceb22545b30b0d-mm/memory.c-copy_nonpresent_pte CVE-2023-4732
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvma_710, VariableAccess target_0) {
	target_0.getTarget()=vvma_710
	and vvma_710.getIndex() = 4
}

predicate func_1(Variable vpte_714, ExprStmt target_2, ExprStmt target_3, Function func) {
exists(IfStmt target_1 |
	target_1.getCondition().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("userfaultfd_wp")
	and target_1.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("vm_area_struct *")
	and target_1.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vpte_714
	and target_1.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("pte_swp_clear_uffd_wp")
	and target_1.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpte_714
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_2.getLocation())
	and target_3.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getLocation().isBefore(target_1.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation()))
}

predicate func_2(Variable vpte_714, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("set_pte_at")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("mm_struct *")
	and target_2.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_2.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("pte_t *")
	and target_2.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget()=vpte_714
}

predicate func_3(Variable vpte_714, LogicalAndExpr target_4, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("set_pte_at")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("mm_struct *")
	and target_3.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_3.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("pte_t *")
	and target_3.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget()=vpte_714
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_4(Function func, LogicalAndExpr target_4) {
	target_4.getLeftOperand().(FunctionCall).getTarget().hasName("is_write_device_private_entry")
	and target_4.getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("swp_entry_t")
	and target_4.getRightOperand().(FunctionCall).getTarget().hasName("is_cow_mapping")
	and target_4.getRightOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_4.getEnclosingFunction() = func
}

from Function func, Parameter vvma_710, Variable vpte_714, VariableAccess target_0, ExprStmt target_2, ExprStmt target_3, LogicalAndExpr target_4
where
func_0(vvma_710, target_0)
and not func_1(vpte_714, target_2, target_3, func)
and func_2(vpte_714, target_2)
and func_3(vpte_714, target_4, target_3)
and func_4(func, target_4)
and vvma_710.getType().hasName("vm_area_struct *")
and vpte_714.getType().hasName("pte_t")
and vvma_710.getFunction() = func
and vpte_714.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
