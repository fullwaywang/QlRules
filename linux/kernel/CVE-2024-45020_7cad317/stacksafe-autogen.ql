/**
 * @name linux-7cad3174cc79519bf5f6c4441780264416822c08-stacksafe
 * @id cpp/linux/7cad3174cc79519bf5f6c4441780264416822c08/stacksafe
 * @description linux-7cad3174cc79519bf5f6c4441780264416822c08-kernel/bpf/verifier.c-stacksafe CVE-2024-45020
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vcur_16113, Variable vi_16115, ReturnStmt target_2, ExprStmt target_4) {
exists(LogicalOrExpr target_0 |
	exists(RelationalOperation obj_0 | obj_0=target_0.getLeftOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLesserOperand() |
			obj_1.getTarget().getName()="allocated_stack"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vcur_16113
		)
		and obj_0.getGreaterOperand().(VariableAccess).getTarget()=vi_16115
	)
	and exists(LogicalAndExpr obj_2 | obj_2=target_0.getParent() |
		obj_2.getLeftOperand().(VariableAccess).getTarget().getType().hasName("bool")
		and obj_2.getRightOperand() instanceof EqualityOperation
		and obj_2.getParent().(IfStmt).getThen()=target_2
	)
	and target_0.getRightOperand() instanceof EqualityOperation
	and target_4.getExpr().(AssignExpr).getRValue().(DivExpr).getLeftOperand().(VariableAccess).getLocation().isBefore(target_0.getLeftOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation())
)
}

predicate func_1(Parameter vold_16112, Parameter vcur_16113, Variable vi_16115, Variable vspi_16115, ReturnStmt target_2, EqualityOperation target_1) {
	exists(ArrayExpr obj_0 | obj_0=target_1.getLeftOperand() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getArrayBase() |
			exists(ArrayExpr obj_2 | obj_2=obj_1.getQualifier() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getArrayBase() |
					obj_3.getTarget().getName()="stack"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vold_16112
				)
				and obj_2.getArrayOffset().(VariableAccess).getTarget()=vspi_16115
			)
			and obj_1.getTarget().getName()="slot_type"
		)
		and exists(RemExpr obj_4 | obj_4=obj_0.getArrayOffset() |
			obj_4.getLeftOperand().(VariableAccess).getTarget()=vi_16115
			and obj_4.getRightOperand().(Literal).getValue()="8"
		)
	)
	and exists(ArrayExpr obj_5 | obj_5=target_1.getRightOperand() |
		exists(ValueFieldAccess obj_6 | obj_6=obj_5.getArrayBase() |
			exists(ArrayExpr obj_7 | obj_7=obj_6.getQualifier() |
				exists(PointerFieldAccess obj_8 | obj_8=obj_7.getArrayBase() |
					obj_8.getTarget().getName()="stack"
					and obj_8.getQualifier().(VariableAccess).getTarget()=vcur_16113
				)
				and obj_7.getArrayOffset().(VariableAccess).getTarget()=vspi_16115
			)
			and obj_6.getTarget().getName()="slot_type"
		)
		and exists(RemExpr obj_9 | obj_9=obj_5.getArrayOffset() |
			obj_9.getLeftOperand().(VariableAccess).getTarget()=vi_16115
			and obj_9.getRightOperand().(Literal).getValue()="8"
		)
	)
	and exists(LogicalAndExpr obj_10 | obj_10=target_1.getParent() |
		obj_10.getLeftOperand().(VariableAccess).getTarget().getType().hasName("bool")
		and obj_10.getParent().(IfStmt).getThen()=target_2
	)
}

predicate func_2(LogicalAndExpr target_6, Function func, ReturnStmt target_2) {
	target_2.getParent().(IfStmt).getCondition()=target_6
	and target_2.getEnclosingFunction() = func
}

predicate func_4(Variable vi_16115, Variable vspi_16115, ExprStmt target_4) {
	exists(AssignExpr obj_0 | obj_0=target_4.getExpr() |
		exists(DivExpr obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getLeftOperand().(VariableAccess).getTarget()=vi_16115
			and obj_1.getRightOperand().(Literal).getValue()="8"
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vspi_16115
	)
}

predicate func_6(Function func, LogicalAndExpr target_6) {
	target_6.getLeftOperand().(VariableAccess).getTarget().getType().hasName("bool")
	and target_6.getRightOperand() instanceof EqualityOperation
	and target_6.getEnclosingFunction() = func
}

from Function func, Parameter vold_16112, Parameter vcur_16113, Variable vi_16115, Variable vspi_16115, EqualityOperation target_1, ReturnStmt target_2, ExprStmt target_4, LogicalAndExpr target_6
where
not func_0(vcur_16113, vi_16115, target_2, target_4)
and func_1(vold_16112, vcur_16113, vi_16115, vspi_16115, target_2, target_1)
and func_2(target_6, func, target_2)
and func_4(vi_16115, vspi_16115, target_4)
and func_6(func, target_6)
and vold_16112.getType().hasName("bpf_func_state *")
and vcur_16113.getType().hasName("bpf_func_state *")
and vi_16115.getType().hasName("int")
and vspi_16115.getType().hasName("int")
and vold_16112.getFunction() = func
and vcur_16113.getFunction() = func
and vi_16115.(LocalVariable).getFunction() = func
and vspi_16115.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
