/**
 * @name linux-a0e44c64b6061dda7e00b7c458e4523e2331b739-binder_inc_ref_for_node
 * @id cpp/linux/a0e44c64b6061dda7e00b7c458e4523e2331b739/binder-inc-ref-for-node
 * @description linux-a0e44c64b6061dda7e00b7c458e4523e2331b739-binder_inc_ref_for_node CVE-2022-20421
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vref_1372, Variable vnew_ref_1373, Variable vret_1374, ExprStmt target_1, LogicalAndExpr target_2, ExprStmt target_3, ExprStmt target_4, ReturnStmt target_5, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(LogicalAndExpr).getAnOperand().(VariableAccess).getTarget()=vret_1374
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getTarget()=vref_1372
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getTarget()=vnew_ref_1373
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("binder_cleanup_ref_olocked")
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vnew_ref_1373
		and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vref_1372
		and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_1.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getLocation())
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getLocation().isBefore(target_2.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getLocation())
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getLocation())
		and target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getAnOperand().(VariableAccess).getLocation())
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(VariableAccess).getLocation().isBefore(target_5.getExpr().(VariableAccess).getLocation()))
}

predicate func_1(Variable vref_1372, ExprStmt target_1) {
		target_1.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget().getType().hasName("binder_ref_data *")
		and target_1.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="data"
		and target_1.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vref_1372
}

predicate func_2(Variable vref_1372, Variable vnew_ref_1373, LogicalAndExpr target_2) {
		target_2.getAnOperand().(VariableAccess).getTarget()=vnew_ref_1373
		and target_2.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getTarget()=vref_1372
		and target_2.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getTarget()=vnew_ref_1373
}

predicate func_3(Variable vref_1372, Variable vnew_ref_1373, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vref_1372
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("binder_get_ref_for_node_olocked")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("binder_proc *")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("binder_node *")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vnew_ref_1373
}

predicate func_4(Variable vref_1372, Variable vret_1374, ExprStmt target_4) {
		target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_1374
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("binder_inc_ref_olocked")
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vref_1372
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("bool")
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("list_head *")
}

predicate func_5(Variable vret_1374, ReturnStmt target_5) {
		target_5.getExpr().(VariableAccess).getTarget()=vret_1374
}

from Function func, Variable vref_1372, Variable vnew_ref_1373, Variable vret_1374, ExprStmt target_1, LogicalAndExpr target_2, ExprStmt target_3, ExprStmt target_4, ReturnStmt target_5
where
not func_0(vref_1372, vnew_ref_1373, vret_1374, target_1, target_2, target_3, target_4, target_5, func)
and func_1(vref_1372, target_1)
and func_2(vref_1372, vnew_ref_1373, target_2)
and func_3(vref_1372, vnew_ref_1373, target_3)
and func_4(vref_1372, vret_1374, target_4)
and func_5(vret_1374, target_5)
and vref_1372.getType().hasName("binder_ref *")
and vnew_ref_1373.getType().hasName("binder_ref *")
and vret_1374.getType().hasName("int")
and vref_1372.(LocalVariable).getFunction() = func
and vnew_ref_1373.(LocalVariable).getFunction() = func
and vret_1374.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
