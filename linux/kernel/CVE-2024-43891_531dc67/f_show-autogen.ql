/**
 * @name linux-531dc6780d94245af037c25c2371c8caf652f0f9-f_show
 * @id cpp/linux/531dc6780d94245af037c25c2371c8caf652f0f9/f-show
 * @description linux-531dc6780d94245af037c25c2371c8caf652f0f9-kernel/trace/trace_events.c-f_show CVE-2024-43891
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vm_1573, Initializer target_0) {
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().getName()="private"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vm_1573
		)
		and obj_0.getTarget().hasName("event_file_data")
	)
}

predicate func_2(Function func) {
exists(Initializer target_2 |
	exists(PointerFieldAccess obj_0 | obj_0=target_2.getExpr() |
		obj_0.getTarget().getName()="event_call"
		and obj_0.getQualifier().(VariableAccess).getType().hasName("trace_event_file *")
	)
	and target_2.getExpr().getEnclosingFunction() = func
)
}

from Function func, Parameter vm_1573, Initializer target_0
where
func_0(vm_1573, target_0)
and not func_2(func)
and vm_1573.getType().hasName("seq_file *")
and vm_1573.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
