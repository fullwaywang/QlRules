/**
 * @name linux-0926f91083f34d047abc74f1ca4fa6a9c161f7db-mlx4_register_vlan
 * @id cpp/linux/0926f91083f34d047abc74f1ca4fa6a9c161f7db/mlx4-register-vlan
 * @description linux-0926f91083f34d047abc74f1ca4fa6a9c161f7db-drivers/net/mlx4/port.c-mlx4_register_vlan CVE-2010-5332
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable verr_188, Variable vfree_189, IfStmt target_1, ExprStmt target_3, ExprStmt target_4, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vfree_189
	and target_0.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_188
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-12"
	and target_0.getThen().(BlockStmt).getStmt(1).(GotoStmt).getName() ="out"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation()))
}

predicate func_1(Variable verr_188, IfStmt target_1) {
	target_1.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="total"
	and target_1.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("mlx4_vlan_table *")
	and target_1.getCondition().(EqualityOperation).getRightOperand().(PointerFieldAccess).getTarget().getName()="max"
	and target_1.getCondition().(EqualityOperation).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("mlx4_vlan_table *")
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_188
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-28"
	and target_1.getThen().(BlockStmt).getStmt(1).(GotoStmt).getName() ="out"
}

predicate func_3(Variable vfree_189, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vfree_189
	and target_3.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_4(Variable vfree_189, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="refs"
	and target_4.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("mlx4_vlan_table *")
	and target_4.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vfree_189
	and target_4.getExpr().(AssignExpr).getRValue().(Literal).getValue()="1"
}

from Function func, Variable verr_188, Variable vfree_189, IfStmt target_1, ExprStmt target_3, ExprStmt target_4
where
not func_0(verr_188, vfree_189, target_1, target_3, target_4, func)
and func_1(verr_188, target_1)
and func_3(vfree_189, target_3)
and func_4(vfree_189, target_4)
and verr_188.getType().hasName("int")
and vfree_189.getType().hasName("int")
and verr_188.(LocalVariable).getFunction() = func
and vfree_189.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
