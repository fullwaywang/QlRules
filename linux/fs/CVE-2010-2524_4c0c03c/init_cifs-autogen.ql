/**
 * @name linux-4c0c03ca54f72fdd5912516ad0a23ec5cf01bda7-init_cifs
 * @id cpp/linux/4c0c03ca54f72fdd5912516ad0a23ec5cf01bda7/init-cifs
 * @description linux-4c0c03ca54f72fdd5912516ad0a23ec5cf01bda7-fs/cifs/cifsfs.c-init_cifs CVE-2010-2524
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vkey_type_dns_resolver, FunctionCall target_0) {
		target_0.getTarget().hasName("register_key_type")
		and not target_0.getTarget().hasName("cifs_init_dns_resolver")
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vkey_type_dns_resolver
		and target_0.getParent().(AssignExpr).getRValue() = target_0
		and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_1(Variable vkey_type_dns_resolver, FunctionCall target_1) {
		target_1.getTarget().hasName("unregister_key_type")
		and not target_1.getTarget().hasName("cifs_exit_dns_resolver")
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vkey_type_dns_resolver
}

predicate func_2(Variable vkey_type_dns_resolver, AddressOfExpr target_4, VariableAccess target_2) {
		target_2.getTarget()=vkey_type_dns_resolver
		and target_2.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
		and target_2.getLocation().isBefore(target_4.getOperand().(VariableAccess).getLocation())
}

predicate func_3(Variable vkey_type_dns_resolver, AddressOfExpr target_5, VariableAccess target_3) {
		target_3.getTarget()=vkey_type_dns_resolver
		and target_3.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
		and target_5.getOperand().(VariableAccess).getLocation().isBefore(target_3.getLocation())
}

predicate func_4(Variable vkey_type_dns_resolver, AddressOfExpr target_4) {
		target_4.getOperand().(VariableAccess).getTarget()=vkey_type_dns_resolver
		and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_5(Variable vkey_type_dns_resolver, AddressOfExpr target_5) {
		target_5.getOperand().(VariableAccess).getTarget()=vkey_type_dns_resolver
		and target_5.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

from Function func, Variable vkey_type_dns_resolver, FunctionCall target_0, FunctionCall target_1, VariableAccess target_2, VariableAccess target_3, AddressOfExpr target_4, AddressOfExpr target_5
where
func_0(vkey_type_dns_resolver, target_0)
and func_1(vkey_type_dns_resolver, target_1)
and func_2(vkey_type_dns_resolver, target_4, target_2)
and func_3(vkey_type_dns_resolver, target_5, target_3)
and func_4(vkey_type_dns_resolver, target_4)
and func_5(vkey_type_dns_resolver, target_5)
and vkey_type_dns_resolver.getType().hasName("key_type")
and not vkey_type_dns_resolver.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
