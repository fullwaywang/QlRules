/**
 * @name linux-4a491b1ab11ca0556d2fda1ff1301e862a2d44c4-sas_smp_get_phy_events
 * @id cpp/linux/4a491b1ab11ca0556d2fda1ff1301e862a2d44c4/sas-smp-get-phy-events
 * @description linux-4a491b1ab11ca0556d2fda1ff1301e862a2d44c4-drivers/scsi/libsas/sas_expander.c-sas_smp_get_phy_events CVE-2018-7757
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vreq_668, ExprStmt target_1, Function func) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("kfree")
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vreq_668
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vreq_668, ExprStmt target_1) {
		target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("smp_execute_task")
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("domain_device *")
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vreq_668
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(Literal).getValue()="16"
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("u8 *")
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(Literal).getValue()="32"
}

from Function func, Variable vreq_668, ExprStmt target_1
where
not func_0(vreq_668, target_1, func)
and func_1(vreq_668, target_1)
and vreq_668.getType().hasName("u8 *")
and vreq_668.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
