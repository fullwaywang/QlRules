/**
 * @name linux-9399f0c51489ae8c16d6559b82a452fdc1895e91-skcipher_recvmsg
 * @id cpp/linux/9399f0c51489ae8c16d6559b82a452fdc1895e91/skcipher-recvmsg
 * @description linux-9399f0c51489ae8c16d6559b82a452fdc1895e91-crypto/algif_skcipher.c-skcipher_recvmsg CVE-2023-3108
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vctx_424, BlockStmt target_6, AddressOfExpr target_7) {
	exists(NotExpr target_0 |
		target_0.getOperand().(PointerFieldAccess).getTarget().getName()="used"
		and target_0.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_424
		and target_0.getParent().(IfStmt).getThen()=target_6
		and target_7.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vctx_424, ExprStmt target_8, AddressOfExpr target_9) {
	exists(PointerFieldAccess target_1 |
		target_1.getTarget().getName()="used"
		and target_1.getQualifier().(VariableAccess).getTarget()=vctx_424
		and target_8.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getQualifier().(VariableAccess).getLocation())
		and target_1.getQualifier().(VariableAccess).getLocation().isBefore(target_9.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vused_430, BlockStmt target_6, NotExpr target_2) {
		target_2.getOperand().(VariableAccess).getTarget()=vused_430
		and target_2.getParent().(IfStmt).getThen()=target_6
}

predicate func_3(Variable vctx_424, Variable vused_430, PointerFieldAccess target_3) {
		target_3.getTarget().getName()="used"
		and target_3.getQualifier().(VariableAccess).getTarget()=vctx_424
		and target_3.getParent().(AssignExpr).getRValue() = target_3
		and target_3.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vused_430
}

predicate func_4(Variable vused_430, Variable v__min1_449, Variable v__min2_449, ExprStmt target_4) {
		target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vused_430
		and target_4.getExpr().(AssignExpr).getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(ConditionalExpr).getThen().(VariableAccess).getTarget()=v__min1_449
		and target_4.getExpr().(AssignExpr).getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(ConditionalExpr).getElse().(VariableAccess).getTarget()=v__min2_449
}

predicate func_5(Variable vused_430, VariableAccess target_5) {
		target_5.getTarget()=vused_430
}

predicate func_6(Function func, BlockStmt target_6) {
		target_6.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_6.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("skcipher_wait_for_data")
		and target_6.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("sock *")
		and target_6.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("int")
		and target_6.getStmt(1).(IfStmt).getCondition().(VariableAccess).getTarget().getType().hasName("int")
		and target_6.getEnclosingFunction() = func
}

predicate func_7(Variable vctx_424, AddressOfExpr target_7) {
		target_7.getOperand().(PointerFieldAccess).getTarget().getName()="tsgl"
		and target_7.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_424
}

predicate func_8(Variable vctx_424, Variable vused_430, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vused_430
		and target_8.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="used"
		and target_8.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_424
}

predicate func_9(Variable vctx_424, Variable vused_430, AddressOfExpr target_9) {
		target_9.getOperand().(PointerFieldAccess).getTarget().getName()="rsgl"
		and target_9.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_424
		and target_9.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("af_alg_make_sg")
		and target_9.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="msg_iter"
		and target_9.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("msghdr *")
		and target_9.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vused_430
}

from Function func, Variable vctx_424, Variable vused_430, Variable v__min1_449, Variable v__min2_449, NotExpr target_2, PointerFieldAccess target_3, ExprStmt target_4, VariableAccess target_5, BlockStmt target_6, AddressOfExpr target_7, ExprStmt target_8, AddressOfExpr target_9
where
not func_0(vctx_424, target_6, target_7)
and not func_1(vctx_424, target_8, target_9)
and func_2(vused_430, target_6, target_2)
and func_3(vctx_424, vused_430, target_3)
and func_4(vused_430, v__min1_449, v__min2_449, target_4)
and func_5(vused_430, target_5)
and func_6(func, target_6)
and func_7(vctx_424, target_7)
and func_8(vctx_424, vused_430, target_8)
and func_9(vctx_424, vused_430, target_9)
and vctx_424.getType().hasName("skcipher_ctx *")
and vused_430.getType().hasName("int")
and v__min1_449.getType().hasName("unsigned long")
and v__min2_449.getType().hasName("unsigned long")
and vctx_424.(LocalVariable).getFunction() = func
and vused_430.(LocalVariable).getFunction() = func
and v__min1_449.(LocalVariable).getFunction() = func
and v__min2_449.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
