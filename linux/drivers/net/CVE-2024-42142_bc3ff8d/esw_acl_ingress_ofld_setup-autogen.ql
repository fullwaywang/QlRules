/**
 * @name linux-bc3ff8d3c05044de57865ebbb78cca8f7da3e595-esw_acl_ingress_ofld_setup
 * @id cpp/linux/bc3ff8d3c05044de57865ebbb78cca8f7da3e595/esw-acl-ingress-ofld-setup
 * @description linux-bc3ff8d3c05044de57865ebbb78cca8f7da3e595-drivers/net/ethernet/mellanox/mlx5/core/esw/acl/ingress_ofld.c-esw_acl_ingress_ofld_setup CVE-2024-42142
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvport_303, Variable verr_306, Parameter vesw_302, FunctionCall target_0) {
	exists(AssignExpr obj_0 | obj_0=target_0.getParent() |
		obj_0.getRValue() = target_0
		and obj_0.getLValue().(VariableAccess).getTarget()=verr_306
	)
	and target_0.getTarget().hasName("esw_acl_ingress_ofld_groups_create")
	and not target_0.getTarget().hasName("acl_ingress_ofld_setup")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vesw_302
	and target_0.getArgument(1).(VariableAccess).getTarget()=vvport_303
}

predicate func_1(Function func, DeclStmt target_1) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

predicate func_2(Function func, DeclStmt target_2) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_2
}

predicate func_3(Parameter vvport_303, Function func, ExprStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		obj_0.getTarget().hasName("esw_acl_ingress_allow_rule_destroy")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vvport_303
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
}

predicate func_4(Variable vnum_ftes_305, Parameter vesw_302, Function func, IfStmt target_4) {
	exists(FunctionCall obj_0 | obj_0=target_4.getCondition() |
		obj_0.getTarget().hasName("mlx5_eswitch_vport_match_metadata_enabled")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vesw_302
	)
	and target_4.getThen().(ExprStmt).getExpr().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget()=vnum_ftes_305
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
}

predicate func_5(Parameter vvport_303, Variable vnum_ftes_305, Function func, IfStmt target_5) {
	exists(EqualityOperation obj_0 | obj_0=target_5.getCondition() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLeftOperand() |
			obj_1.getTarget().getName()="vport"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vvport_303
		)
	)
	and target_5.getThen().(ExprStmt).getExpr().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget()=vnum_ftes_305
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

predicate func_6(Parameter vvport_303, Variable vnum_ftes_305, Parameter vesw_302, Function func, IfStmt target_6) {
	exists(FunctionCall obj_0 | obj_0=target_6.getCondition() |
		obj_0.getTarget().hasName("esw_acl_ingress_prio_tag_enabled")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vesw_302
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vvport_303
	)
	and target_6.getThen().(ExprStmt).getExpr().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget()=vnum_ftes_305
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_6
}

predicate func_7(Parameter vvport_303, Variable vnum_ftes_305, Parameter vesw_302, Function func, ExprStmt target_7) {
	exists(AssignExpr obj_0 | obj_0=target_7.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="ingress"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vvport_303
			)
			and obj_1.getTarget().getName()="acl"
		)
		and exists(FunctionCall obj_3 | obj_3=obj_0.getRValue() |
			obj_3.getTarget().hasName("esw_acl_table_create")
			and obj_3.getArgument(0).(VariableAccess).getTarget()=vesw_302
			and obj_3.getArgument(1).(VariableAccess).getTarget()=vvport_303
			and obj_3.getArgument(3).(VariableAccess).getTarget()=vnum_ftes_305
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_7
}

predicate func_8(Parameter vvport_303, Variable verr_306, Function func, IfStmt target_8) {
	exists(FunctionCall obj_0 | obj_0=target_8.getCondition() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="ingress"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vvport_303
			)
			and obj_1.getTarget().getName()="acl"
		)
		and obj_0.getTarget().hasName("IS_ERR")
	)
	and exists(BlockStmt obj_3 | obj_3=target_8.getThen() |
		exists(ExprStmt obj_4 | obj_4=obj_3.getStmt(0) |
			exists(AssignExpr obj_5 | obj_5=obj_4.getExpr() |
				exists(FunctionCall obj_6 | obj_6=obj_5.getRValue() |
					exists(ValueFieldAccess obj_7 | obj_7=obj_6.getArgument(0) |
						obj_7.getTarget().getName()="acl"
						and obj_7.getQualifier().(PointerFieldAccess).getTarget().getName()="ingress"
					)
					and obj_6.getTarget().hasName("PTR_ERR")
				)
				and obj_5.getLValue().(VariableAccess).getTarget()=verr_306
			)
		)
		and exists(ExprStmt obj_8 | obj_8=obj_3.getStmt(1) |
			exists(AssignExpr obj_9 | obj_9=obj_8.getExpr() |
				exists(ValueFieldAccess obj_10 | obj_10=obj_9.getLValue() |
					exists(PointerFieldAccess obj_11 | obj_11=obj_10.getQualifier() |
						obj_11.getTarget().getName()="ingress"
						and obj_11.getQualifier().(VariableAccess).getTarget()=vvport_303
					)
					and obj_10.getTarget().getName()="acl"
				)
				and obj_9.getRValue().(Literal).getValue()="0"
			)
		)
		and obj_3.getStmt(2).(ReturnStmt).getExpr().(VariableAccess).getTarget()=verr_306
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_8
}

predicate func_9(Parameter vvport_303, Variable verr_306, FunctionCall target_30, ExprStmt target_9) {
	exists(AssignExpr obj_0 | obj_0=target_9.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getArgument(0) |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="ingress"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vvport_303
				)
				and obj_2.getTarget().getName()="acl"
			)
			and obj_1.getTarget().hasName("PTR_ERR")
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=verr_306
	)
	and target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_30
}

/*predicate func_10(Parameter vvport_303, FunctionCall target_30, ExprStmt target_10) {
	exists(AssignExpr obj_0 | obj_0=target_10.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="ingress"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vvport_303
			)
			and obj_1.getTarget().getName()="acl"
		)
		and obj_0.getRValue().(Literal).getValue()="0"
	)
	and target_10.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_30
}

*/
/*predicate func_11(Variable verr_306, ExprStmt target_9, VariableAccess target_11) {
	target_11.getTarget()=verr_306
	and target_9.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_11.getLocation())
}

*/
predicate func_12(Variable verr_306, Function func, ExprStmt target_12) {
	exists(AssignExpr obj_0 | obj_0=target_12.getExpr() |
		obj_0.getLValue().(VariableAccess).getTarget()=verr_306
		and obj_0.getRValue() instanceof FunctionCall
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_12
}

predicate func_13(Variable verr_306, Function func, IfStmt target_13) {
	target_13.getCondition().(VariableAccess).getTarget()=verr_306
	and target_13.getThen().(GotoStmt).getName() ="group_err"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_13
}

predicate func_14(Variable vmlx5_core_debug_mask, Function func, DoStmt target_14) {
	exists(BlockStmt obj_0 | obj_0=target_14.getStmt() |
		exists(IfStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(BitwiseAndExpr obj_2 | obj_2=obj_1.getCondition() |
				obj_2.getLeftOperand().(BinaryBitwiseOperation).getValue()="8"
				and obj_2.getRightOperand().(VariableAccess).getTarget()=vmlx5_core_debug_mask
			)
			and exists(DoStmt obj_3 | obj_3=obj_1.getThen() |
				obj_3.getCondition() instanceof Literal
				and obj_3.getStmt().(BlockStmt).getStmt(1).(DoStmt).getCondition() instanceof Literal
			)
		)
	)
	and target_14.getCondition() instanceof Literal
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_14
}

/*predicate func_15(Variable vmlx5_core_debug_mask, Variable v__func__, IfStmt target_15) {
	exists(BitwiseAndExpr obj_0 | obj_0=target_15.getCondition() |
		obj_0.getLeftOperand().(BinaryBitwiseOperation).getValue()="8"
		and obj_0.getRightOperand().(VariableAccess).getTarget()=vmlx5_core_debug_mask
	)
	and exists(DoStmt obj_1 | obj_1=target_15.getThen() |
		exists(BlockStmt obj_2 | obj_2=obj_1.getStmt() |
			exists(IfStmt obj_3 | obj_3=obj_2.getStmt(2) |
				exists(ExprStmt obj_4 | obj_4=obj_3.getThen() |
					exists(FunctionCall obj_5 | obj_5=obj_4.getExpr() |
						obj_5.getTarget().hasName("__dynamic_dev_dbg")
						and obj_5.getArgument(1).(PointerFieldAccess).getTarget().getName()="device"
						and obj_5.getArgument(2).(StringLiteral).getValue()="%s:%d:(pid %d): vport[%d] configure ingress rules\n"
						and obj_5.getArgument(3).(VariableAccess).getTarget()=v__func__
						and obj_5.getArgument(4) instanceof Literal
						and obj_5.getArgument(5).(PointerFieldAccess).getTarget().getName()="pid"
						and obj_5.getArgument(6).(PointerFieldAccess).getTarget().getName()="vport"
					)
				)
			)
			and obj_2.getStmt(1).(DoStmt).getCondition() instanceof Literal
		)
		and obj_1.getCondition() instanceof Literal
	)
}

*/
/*predicate func_17(Function func, DoStmt target_17) {
	target_17.getCondition() instanceof Literal
	and target_17.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(NotExpr).getValue()="0"
	and target_17.getEnclosingFunction() = func
}

*/
/*predicate func_19(Function func, IfStmt target_19) {
	target_19.getCondition().(NotExpr).getValue()="0"
	and target_19.getEnclosingFunction() = func
}

*/
/*predicate func_20(Parameter vvport_303, Variable v__UNIQUE_ID_ddebug1486_334, Variable v__func__, Variable vbranch_334, Parameter vesw_302, IfStmt target_20) {
	exists(StmtExpr obj_0 | obj_0=target_20.getCondition() |
		exists(BlockStmt obj_1 | obj_1=obj_0.getStmt() |
			exists(IfStmt obj_2 | obj_2=obj_1.getStmt(1) |
				exists(ExprStmt obj_3 | obj_3=obj_2.getThen() |
					exists(AssignExpr obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getLValue().(VariableAccess).getTarget()=vbranch_334
						and obj_4.getRValue().(FunctionCall).getTarget().hasName("arch_static_branch_jump")
					)
				)
				and obj_2.getCondition().(BuiltInOperation).getValue()="0"
				and obj_2.getElse().(IfStmt).getCondition().(BuiltInOperation).getValue()="1"
			)
			and exists(ExprStmt obj_5 | obj_5=obj_1.getStmt(2) |
				exists(FunctionCall obj_6 | obj_6=obj_5.getExpr() |
					obj_6.getTarget().hasName("__builtin_expect")
					and obj_6.getArgument(1) instanceof Literal
				)
			)
		)
	)
	and exists(ExprStmt obj_7 | obj_7=target_20.getThen() |
		exists(FunctionCall obj_8 | obj_8=obj_7.getExpr() |
			exists(PointerFieldAccess obj_9 | obj_9=obj_8.getArgument(1) |
				exists(PointerFieldAccess obj_10 | obj_10=obj_9.getQualifier() |
					obj_10.getTarget().getName()="dev"
					and obj_10.getQualifier().(VariableAccess).getTarget()=vesw_302
				)
				and obj_9.getTarget().getName()="device"
			)
			and exists(PointerFieldAccess obj_11 | obj_11=obj_8.getArgument(5) |
				obj_11.getTarget().getName()="pid"
				and obj_11.getQualifier().(FunctionCall).getTarget().hasName("get_current")
			)
			and exists(PointerFieldAccess obj_12 | obj_12=obj_8.getArgument(6) |
				obj_12.getTarget().getName()="vport"
				and obj_12.getQualifier().(VariableAccess).getTarget()=vvport_303
			)
			and obj_8.getTarget().hasName("__dynamic_dev_dbg")
			and obj_8.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=v__UNIQUE_ID_ddebug1486_334
			and obj_8.getArgument(2).(StringLiteral).getValue()="%s:%d:(pid %d): vport[%d] configure ingress rules\n"
			and obj_8.getArgument(3).(VariableAccess).getTarget()=v__func__
			and obj_8.getArgument(4) instanceof Literal
		)
	)
}

*/
/*predicate func_22(Variable vbranch_334, IfStmt target_22) {
	exists(ExprStmt obj_0 | obj_0=target_22.getThen() |
		exists(AssignExpr obj_1 | obj_1=obj_0.getExpr() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getRValue() |
				obj_2.getTarget().hasName("arch_static_branch_jump")
				and obj_2.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="key"
			)
			and obj_1.getLValue().(VariableAccess).getTarget()=vbranch_334
		)
	)
	and exists(IfStmt obj_3 | obj_3=target_22.getElse() |
		exists(ExprStmt obj_4 | obj_4=obj_3.getThen() |
			exists(AssignExpr obj_5 | obj_5=obj_4.getExpr() |
				exists(FunctionCall obj_6 | obj_6=obj_5.getRValue() |
					obj_6.getTarget().hasName("arch_static_branch")
					and obj_6.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="key"
				)
				and obj_5.getLValue().(VariableAccess).getTarget()=vbranch_334
			)
		)
		and exists(ExprStmt obj_7 | obj_7=obj_3.getElse() |
			exists(AssignExpr obj_8 | obj_8=obj_7.getExpr() |
				obj_8.getLValue().(VariableAccess).getTarget()=vbranch_334
				and obj_8.getRValue().(FunctionCall).getTarget().hasName("____wrong_branch_error")
			)
		)
		and obj_3.getCondition().(BuiltInOperation).getValue()="1"
	)
	and target_22.getCondition().(BuiltInOperation).getValue()="0"
}

*/
/*predicate func_23(Variable vbranch_334, ExprStmt target_23) {
	exists(FunctionCall obj_0 | obj_0=target_23.getExpr() |
		obj_0.getTarget().hasName("__builtin_expect")
		and obj_0.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vbranch_334
		and obj_0.getArgument(1) instanceof Literal
	)
}

*/
predicate func_24(Parameter vvport_303, Variable verr_306, Parameter vesw_302, Function func, ExprStmt target_24) {
	exists(AssignExpr obj_0 | obj_0=target_24.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("esw_acl_ingress_ofld_rules_create")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vesw_302
			and obj_1.getArgument(1).(VariableAccess).getTarget()=vvport_303
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=verr_306
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_24
}

predicate func_25(Variable verr_306, Function func, IfStmt target_25) {
	target_25.getCondition().(VariableAccess).getTarget()=verr_306
	and target_25.getThen().(GotoStmt).getName() ="rules_err"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_25
}

predicate func_26(Function func, ReturnStmt target_26) {
	target_26.getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_26
}

predicate func_27(Parameter vvport_303, Function func, ExprStmt target_27) {
	exists(FunctionCall obj_0 | obj_0=target_27.getExpr() |
		obj_0.getTarget().hasName("esw_acl_ingress_ofld_groups_destroy")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vvport_303
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_27
}

predicate func_28(Parameter vvport_303, Function func, ExprStmt target_28) {
	exists(FunctionCall obj_0 | obj_0=target_28.getExpr() |
		obj_0.getTarget().hasName("esw_acl_ingress_table_destroy")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vvport_303
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_28
}

predicate func_29(Variable verr_306, IfStmt target_25, Function func, ReturnStmt target_29) {
	target_29.getExpr().(VariableAccess).getTarget()=verr_306
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_29
	and target_25.getCondition().(VariableAccess).getLocation().isBefore(target_29.getExpr().(VariableAccess).getLocation())
}

predicate func_30(Function func, FunctionCall target_30) {
	target_30.getTarget().hasName("IS_ERR")
	and target_30.getArgument(0) instanceof ValueFieldAccess
	and target_30.getEnclosingFunction() = func
}

from Function func, Parameter vvport_303, Variable vnum_ftes_305, Variable verr_306, Variable vmlx5_core_debug_mask, Variable v__UNIQUE_ID_ddebug1486_334, Variable v__func__, Variable vbranch_334, Parameter vesw_302, FunctionCall target_0, DeclStmt target_1, DeclStmt target_2, ExprStmt target_3, IfStmt target_4, IfStmt target_5, IfStmt target_6, ExprStmt target_7, IfStmt target_8, ExprStmt target_9, ExprStmt target_12, IfStmt target_13, DoStmt target_14, ExprStmt target_24, IfStmt target_25, ReturnStmt target_26, ExprStmt target_27, ExprStmt target_28, ReturnStmt target_29, FunctionCall target_30
where
func_0(vvport_303, verr_306, vesw_302, target_0)
and func_1(func, target_1)
and func_2(func, target_2)
and func_3(vvport_303, func, target_3)
and func_4(vnum_ftes_305, vesw_302, func, target_4)
and func_5(vvport_303, vnum_ftes_305, func, target_5)
and func_6(vvport_303, vnum_ftes_305, vesw_302, func, target_6)
and func_7(vvport_303, vnum_ftes_305, vesw_302, func, target_7)
and func_8(vvport_303, verr_306, func, target_8)
and func_9(vvport_303, verr_306, target_30, target_9)
and func_12(verr_306, func, target_12)
and func_13(verr_306, func, target_13)
and func_14(vmlx5_core_debug_mask, func, target_14)
and func_24(vvport_303, verr_306, vesw_302, func, target_24)
and func_25(verr_306, func, target_25)
and func_26(func, target_26)
and func_27(vvport_303, func, target_27)
and func_28(vvport_303, func, target_28)
and func_29(verr_306, target_25, func, target_29)
and func_30(func, target_30)
and vvport_303.getType().hasName("mlx5_vport *")
and vnum_ftes_305.getType().hasName("int")
and verr_306.getType().hasName("int")
and vmlx5_core_debug_mask.getType().hasName("uint")
and v__UNIQUE_ID_ddebug1486_334.getType().hasName("_ddebug")
and v__func__.getType() instanceof ArrayType
and vbranch_334.getType().hasName("bool")
and vesw_302.getType().hasName("mlx5_eswitch *")
and vvport_303.getFunction() = func
and vnum_ftes_305.(LocalVariable).getFunction() = func
and verr_306.(LocalVariable).getFunction() = func
and not vmlx5_core_debug_mask.getParentScope+() = func
and v__UNIQUE_ID_ddebug1486_334.(LocalVariable).getFunction() = func
and not v__func__.getParentScope+() = func
and vbranch_334.(LocalVariable).getFunction() = func
and vesw_302.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
