/**
 * @name linux-be0726d33cb8f411945884664924bed3cb8c70ee-ext2_xattr_set
 * @id cpp/linux/be0726d33cb8f411945884664924bed3cb8c70ee/ext2-xattr-set
 * @description linux-be0726d33cb8f411945884664924bed3cb8c70ee-fs/ext2/xattr.h-ext2_xattr_set CVE-2015-8952
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vce_486, FunctionCall target_0) {
	target_0.getTarget().hasName("mb_cache_entry_free")
	and not target_0.getTarget().hasName("mb2_cache_entry_delete_block")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vce_486
}

predicate func_2(Variable vsb_363, LogicalOrExpr target_9, ExprStmt target_10) {
exists(PointerFieldAccess target_2 |
	target_2.getTarget().getName()="s_mb_cache"
	and target_2.getQualifier().(FunctionCall).getTarget().hasName("EXT2_SB")
	and target_2.getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsb_363
	and target_9.getLeftOperand().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_2.getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_4(Variable vbh_364, PointerFieldAccess target_4) {
	target_4.getTarget().getName()="b_blocknr"
	and target_4.getQualifier().(VariableAccess).getTarget()=vbh_364
	and target_4.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_6(Variable vbh_364, Variable vce_486, Variable vext2_xattr_cache, AssignExpr target_6) {
	target_6.getLValue().(VariableAccess).getTarget()=vce_486
	and target_6.getRValue().(FunctionCall).getTarget().hasName("mb_cache_entry_get")
	and target_6.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vext2_xattr_cache
	and target_6.getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="b_bdev"
	and target_6.getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbh_364
	and target_6.getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="b_blocknr"
	and target_6.getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbh_364
}

predicate func_7(Variable vce_486, EqualityOperation target_11, IfStmt target_7) {
	target_7.getCondition().(VariableAccess).getTarget()=vce_486
	and target_7.getThen().(ExprStmt).getExpr() instanceof FunctionCall
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_11
}

predicate func_8(Variable vce_486, EqualityOperation target_11, IfStmt target_8) {
	target_8.getCondition().(VariableAccess).getTarget()=vce_486
	and target_8.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mb_cache_entry_release")
	and target_8.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vce_486
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_11
}

predicate func_9(Variable vsb_363, LogicalOrExpr target_9) {
	target_9.getLeftOperand().(RelationalOperation).getGreaterOperand().(AddExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="e_value_offs"
	and target_9.getLeftOperand().(RelationalOperation).getGreaterOperand().(AddExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("ext2_xattr_entry *")
	and target_9.getLeftOperand().(RelationalOperation).getGreaterOperand().(AddExpr).getRightOperand().(VariableAccess).getTarget().getType().hasName("size_t")
	and target_9.getLeftOperand().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getTarget().getName()="s_blocksize"
	and target_9.getLeftOperand().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsb_363
	and target_9.getRightOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget().getType().hasName("size_t")
	and target_9.getRightOperand().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getTarget().getName()="s_blocksize"
	and target_9.getRightOperand().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsb_363
}

predicate func_10(Variable vsb_363, ExprStmt target_10) {
	target_10.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("ext2_xattr_header *")
	and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("kzalloc")
	and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="s_blocksize"
	and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsb_363
	and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(BitwiseOrExpr).getValue()="37748928"
}

predicate func_11(Function func, EqualityOperation target_11) {
	target_11.getLeftOperand().(PointerFieldAccess).getTarget().getName()="h_refcount"
	and target_11.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("ext2_xattr_header *")
	and target_11.getRightOperand().(Literal).getValue()="1"
	and target_11.getEnclosingFunction() = func
}

from Function func, Variable vsb_363, Variable vbh_364, Variable vce_486, Variable vext2_xattr_cache, FunctionCall target_0, PointerFieldAccess target_4, AssignExpr target_6, IfStmt target_7, IfStmt target_8, LogicalOrExpr target_9, ExprStmt target_10, EqualityOperation target_11
where
func_0(vce_486, target_0)
and not func_2(vsb_363, target_9, target_10)
and func_4(vbh_364, target_4)
and func_6(vbh_364, vce_486, vext2_xattr_cache, target_6)
and func_7(vce_486, target_11, target_7)
and func_8(vce_486, target_11, target_8)
and func_9(vsb_363, target_9)
and func_10(vsb_363, target_10)
and func_11(func, target_11)
and vsb_363.getType().hasName("super_block *")
and vbh_364.getType().hasName("buffer_head *")
and vce_486.getType().hasName("mb_cache_entry *")
and vext2_xattr_cache.getType().hasName("mb_cache *")
and vsb_363.(LocalVariable).getFunction() = func
and vbh_364.(LocalVariable).getFunction() = func
and vce_486.(LocalVariable).getFunction() = func
and not vext2_xattr_cache.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
