commit 41821c987bf153f7de60baaaf2320c228762faae	41821c987bf153f7de60baaaf2320c228762faae
Author: Michael Thiessen <mthiesse@chromium.org>
Date:   Mon Aug 14 21:45:54 2023 +0000

    Fix and re-enable BlockFrameRenavigations
    
    The previous attempt to land this mitigation failed to account for
    subframes navigating top frames to external protocols (common in ad
    frames).
    
    This reland now restricts this to the case where the initiator frame is
    not visible, which is the case when a new window is opened and then
    re-navigated by the background tab. This should be safer to land as
    there should be no legitimate reason for a tab that isn't visible to
    launch an app.
    
    Bug: 1066555, b/294371191
    Change-Id: I9c1f5603e3c67242ab94a1ec826e7d85842f712e
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4770997
    Code-Coverage: findit-for-me@appspot.gserviceaccount.com <findit-for-me@appspot.gserviceaccount.com>
    Reviewed-by: Yaron Friedman <yfriedman@chromium.org>
    Reviewed-by: Richard Coles <torne@chromium.org>
    Commit-Queue: Michael Thiessen <mthiesse@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1183352}

diff --git a/android_webview/java/src/org/chromium/android_webview/AwContents.java b/android_webview/java/src/org/chromium/android_webview/AwContents.java
index f59280b75a178..1078532f7bd18 100644
--- a/android_webview/java/src/org/chromium/android_webview/AwContents.java
+++ b/android_webview/java/src/org/chromium/android_webview/AwContents.java
@@ -715,7 +715,7 @@ public class AwContents implements SmartClipProvider {
     private class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate {
         @Override
         public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle, GURL escapedUrl,
-                boolean crossFrame, boolean isSandboxedFrame) {
+                boolean hiddenCrossFrame, boolean isSandboxedFrame) {
             // The shouldOverrideUrlLoading call might have resulted in posting messages to the
             // UI thread. Using sendMessage here (instead of calling onPageStarted directly)
             // will allow those to run in order.
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/OverlayPanelContent.java b/chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/OverlayPanelContent.java
index 2410ed6a720cf..76c7879e95fca 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/OverlayPanelContent.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/OverlayPanelContent.java
@@ -164,7 +164,7 @@ public class OverlayPanelContent {
 
         @Override
         public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle, GURL escapedUrl,
-                boolean crossFrame, boolean isSandboxedFrame) {
+                boolean hiddenCrossFrame, boolean isSandboxedFrame) {
             // If either of the required params for the delegate are null, do not call the
             // delegate and ignore the navigation.
             if (mExternalNavHandler == null || navigationHandle == null) return true;
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/dom_distiller/ReaderModeManager.java b/chrome/android/java/src/org/chromium/chrome/browser/dom_distiller/ReaderModeManager.java
index 6645d433f1bb0..aa619343b13c6 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/dom_distiller/ReaderModeManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/dom_distiller/ReaderModeManager.java
@@ -229,7 +229,7 @@ public class ReaderModeManager extends EmptyTabObserver implements UserData {
         mCustomTabNavigationDelegate = new InterceptNavigationDelegate() {
             @Override
             public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle,
-                    GURL escapedUrl, boolean crossFrame, boolean isSandboxedFrame) {
+                    GURL escapedUrl, boolean hiddenCrossFrame, boolean isSandboxedFrame) {
                 if (DomDistillerUrlUtils.isDistilledPage(navigationHandle.getUrl())
                         || navigationHandle.isExternalProtocol()) {
                     return false;
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
index cd140b1ae230e..155eea7f74a47 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
@@ -29,6 +29,7 @@ import android.util.Base64;
 import android.util.Pair;
 import android.widget.TextView;
 
+import androidx.annotation.IntDef;
 import androidx.browser.customtabs.CustomTabsSessionToken;
 import androidx.test.core.app.ApplicationProvider;
 import androidx.test.espresso.Espresso;
@@ -120,6 +121,8 @@ import org.chromium.ui.mojom.WindowOpenDisposition;
 import org.chromium.url.GURL;
 import org.chromium.url.Origin;
 
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
 import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
@@ -210,6 +213,14 @@ public class UrlOverridingTest {
 
     private static final String EXTERNAL_APP_SCHEME = "externalappscheme";
 
+    @IntDef({NavigationType.SELF, NavigationType.BLANK, NavigationType.TOP})
+    @Retention(RetentionPolicy.SOURCE)
+    public @interface NavigationType {
+        int SELF = 0;
+        int BLANK = 1;
+        int TOP = 2;
+    }
+
     @Mock
     private RedirectHandler mRedirectHandler;
 
@@ -628,7 +639,7 @@ public class UrlOverridingTest {
     }
 
     private String getSubframeNavigationUrl(
-            String subframeTargetUrl, boolean openInNewTab, boolean sandbox) {
+            String subframeTargetUrl, @NavigationType int navigationType, boolean sandbox) {
         // The replace_text parameters for SUBFRAME_NAVIGATION_CHILD, which is loaded in
         // the iframe in SUBFRAME_NAVIGATION_PARENT, have to go through the
         // embedded test server twice and, as such, have to be base64-encoded twice.
@@ -639,18 +650,25 @@ public class UrlOverridingTest {
         byte[] base64SubframeUrl = Base64.encode(
                 ApiCompatibilityUtils.getBytesUtf8(subframeTargetUrl), Base64.URL_SAFE);
 
-        byte[] paramBlank = ApiCompatibilityUtils.getBytesUtf8("PARAM_BLANK");
+        byte[] paramNavType = ApiCompatibilityUtils.getBytesUtf8("PARAM_BLANK");
         byte[] valBlank = ApiCompatibilityUtils.getBytesUtf8("_blank");
+        byte[] valTop = ApiCompatibilityUtils.getBytesUtf8("_top");
 
         String url = sandbox ? SUBFRAME_NAVIGATION_PARENT_SANDBOX : SUBFRAME_NAVIGATION_PARENT;
 
+        String navType = "";
+        if (navigationType == NavigationType.BLANK) {
+            navType = Base64.encodeToString(valBlank, Base64.URL_SAFE);
+        } else if (navigationType == NavigationType.TOP) {
+            navType = Base64.encodeToString(valTop, Base64.URL_SAFE);
+        }
+
         return mTestServer.getURL(url
                 + "?replace_text=" + Base64.encodeToString(paramBase64Name, Base64.URL_SAFE) + ":"
                 + Base64.encodeToString(base64ParamSubframeUrl, Base64.URL_SAFE)
                 + "&replace_text=" + Base64.encodeToString(paramBase64Value, Base64.URL_SAFE) + ":"
-                + Base64.encodeToString(base64SubframeUrl, Base64.URL_SAFE)
-                + "&replace_text=" + Base64.encodeToString(paramBlank, Base64.URL_SAFE) + ":"
-                + (openInNewTab ? Base64.encodeToString(valBlank, Base64.URL_SAFE) : ""));
+                + Base64.encodeToString(base64SubframeUrl, Base64.URL_SAFE) + "&replace_text="
+                + Base64.encodeToString(paramNavType, Base64.URL_SAFE) + ":" + navType);
     }
 
     private String getOpenWindowFromLinkUserGestureUrl(String targetUrl) {
@@ -776,7 +794,7 @@ public class UrlOverridingTest {
         String fallbackUrl = mTestServer.getURL(FALLBACK_LANDING_PATH);
         String subframeUrl = "intent://test/#Intent;scheme=badscheme;S.browser_fallback_url="
                 + fallbackUrl + ";end";
-        String originalUrl = getSubframeNavigationUrl(subframeUrl, false, false);
+        String originalUrl = getSubframeNavigationUrl(subframeUrl, NavigationType.SELF, false);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
@@ -1502,7 +1520,7 @@ public class UrlOverridingTest {
                 + "https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.android.chrome"
                 + ";end";
 
-        String originalUrl = getSubframeNavigationUrl(subframeTarget, false, false);
+        String originalUrl = getSubframeNavigationUrl(subframeTarget, NavigationType.SELF, false);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
@@ -1543,7 +1561,7 @@ public class UrlOverridingTest {
         String subframeUrl =
                 "intent://test/#Intent;scheme=externalappscheme;S.browser_fallback_url="
                 + fallbackUrl + ";end";
-        String originalUrl = getSubframeNavigationUrl(subframeUrl, false, false);
+        String originalUrl = getSubframeNavigationUrl(subframeUrl, NavigationType.SELF, false);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
@@ -1649,6 +1667,17 @@ public class UrlOverridingTest {
                 mTestServer.getURL(NAVIGATION_FROM_WINDOW_REDIRECT), true, true, true, null, true);
     }
 
+    @Test
+    @LargeTest
+    public void testNavigateTopFrame() throws Exception {
+        mActivityTestRule.startMainActivityOnBlankPage();
+
+        String subframeUrl = "intent://test/#Intent;scheme=externalappscheme;end";
+        String originalUrl = getSubframeNavigationUrl(subframeUrl, NavigationType.TOP, false);
+
+        loadUrlAndWaitForIntentUrl(originalUrl, true, false, true, null, true);
+    }
+
     @Test
     @LargeTest
     @Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_INTENTS_TO_SELF_NAME})
@@ -1686,7 +1715,7 @@ public class UrlOverridingTest {
                 + "https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.android.chrome"
                 + ";end";
 
-        String originalUrl = getSubframeNavigationUrl(subframeTarget, true, false);
+        String originalUrl = getSubframeNavigationUrl(subframeTarget, NavigationType.BLANK, false);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
@@ -1733,7 +1762,7 @@ public class UrlOverridingTest {
                 + "https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.android.chrome"
                 + ";end";
 
-        String originalUrl = getSubframeNavigationUrl(subframeTarget, true, true);
+        String originalUrl = getSubframeNavigationUrl(subframeTarget, NavigationType.BLANK, true);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java
index e607704ca5581..a0c7dbe9d04ba 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java
@@ -115,10 +115,10 @@ public class InterceptNavigationDelegateTest {
             InterceptNavigationDelegateImpl delegate = new InterceptNavigationDelegateImpl(client) {
                 @Override
                 public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle,
-                        GURL escapedUrl, boolean crossFrame, boolean isSandboxedFrame) {
+                        GURL escapedUrl, boolean hiddenCrossFrame, boolean isSandboxedFrame) {
                     mNavParamHistory.add(navigationHandle);
                     return super.shouldIgnoreNavigation(
-                            navigationHandle, escapedUrl, crossFrame, isSandboxedFrame);
+                            navigationHandle, escapedUrl, hiddenCrossFrame, isSandboxedFrame);
                 }
 
                 @Override
diff --git a/chrome/test/data/android/url_overriding/subframe_navigation_child_top.html b/chrome/test/data/android/url_overriding/subframe_navigation_child_top.html
new file mode 100644
index 0000000000000..f86779ecf94ed
--- /dev/null
+++ b/chrome/test/data/android/url_overriding/subframe_navigation_child_top.html
@@ -0,0 +1,10 @@
+<head>
+  <meta name="viewport"
+    content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+</head>
+<body>
+  <a href='PARAM_SUBFRAME_URL' target='_top'>
+    <div style='height:10000px; width:100%;'></div>
+  </a>
+  Click page to open App!!
+</body>
diff --git a/components/external_intents/android/external_intents_features.cc b/components/external_intents/android/external_intents_features.cc
index fc9ba45544245..0086aaaa4855a 100644
--- a/components/external_intents/android/external_intents_features.cc
+++ b/components/external_intents/android/external_intents_features.cc
@@ -30,8 +30,8 @@ BASE_FEATURE(kExternalNavigationDebugLogs,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kBlockFrameRenavigations,
-             "BlockFrameRenavigations2",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "BlockFrameRenavigations3",
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kBlockIntentsToSelf,
              "BlockIntentsToSelf",
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
index 347d43b250a42..71431d3e0fddd 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
@@ -18,7 +18,7 @@ import org.chromium.base.annotations.NativeMethods;
 @JNINamespace("external_intents")
 public class ExternalIntentsFeatures extends Features {
     public static final String EXTERNAL_NAVIGATION_DEBUG_LOGS_NAME = "ExternalNavigationDebugLogs";
-    public static final String BLOCK_FRAME_RENAVIGATIONS_NAME = "BlockFrameRenavigations2";
+    public static final String BLOCK_FRAME_RENAVIGATIONS_NAME = "BlockFrameRenavigations3";
     public static final String BLOCK_INTENTS_TO_SELF_NAME = "BlockIntentsToSelf";
     public static final String TRUSTED_CLIENT_GESTURE_BYPASS_NAME = "TrustedClientGestureBypass";
 
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
index 724744ead77d3..8a963dc46f443 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
@@ -1358,21 +1358,24 @@ public class ExternalNavigationHandler {
      * https://crbug.com/1066555. A re-navigation can make it look like the current tab is
      * performing a navigation when it's actually a background tab doing the navigation.
      */
-    private boolean isCrossFrameRenavigation(ExternalNavigationParams params) {
+    private boolean isHiddenCrossFrameRenavigation(ExternalNavigationParams params) {
         if (!ExternalIntentsFeatures.BLOCK_FRAME_RENAVIGATIONS.isEnabled()) return false;
 
-        if (params.getRedirectHandler().navigationChainPerformedCrossFrameNavigation()) {
+        if (params.getRedirectHandler().navigationChainPerformedHiddenCrossFrameNavigation()) {
             if (debug()) Log.i(TAG, "Navigation chain used cross-frame re-navigation.");
             return true;
         }
 
-        if (params.isInitialNavigationInFrame() || !params.isCrossFrameNavigation()) return false;
+        if (params.isInitialNavigationInFrame() || !params.isHiddenCrossFrameNavigation()) {
+            return false;
+        }
+
         // Server redirects can be seen as cross frame to the initial navigation in the frame, but
         // are still controlled by the site in the frame.
         if (params.isRedirect()) return false;
 
         if (debug()) Log.i(TAG, "Cross-frame re-navigation.");
-        params.getRedirectHandler().setPerformedCrossFrameNavigation();
+        params.getRedirectHandler().setPerformedHiddenCrossFrameNavigation();
         return true;
     }
 
@@ -1595,7 +1598,7 @@ public class ExternalNavigationHandler {
 
         // Needs to be checked first as a failure for this reason is persisted through the
         // navigation chain, and other failures should not cause this check to be skipped.
-        if (isCrossFrameRenavigation(params)) return OverrideUrlLoadingResult.forNoOverride();
+        if (isHiddenCrossFrameRenavigation(params)) return OverrideUrlLoadingResult.forNoOverride();
 
         if (shouldBlockAllExternalAppLaunches(params, incomingIntentRedirect)) {
             return OverrideUrlLoadingResult.forNoOverride();
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationParams.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationParams.java
index 46a7373def982..53a8f8c935684 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationParams.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationParams.java
@@ -92,7 +92,7 @@ public class ExternalNavigationParams {
     private final String mNativeClientPackageName;
     private final boolean mHasUserGesture;
     private final boolean mIsInitialNavigationInFrame;
-    private final boolean mIsCrossFrameNavigation;
+    private final boolean mIsHiddenCrossFrameNavigation;
     private final boolean mIsSandboxedMainFrame;
     private final Callback<AsyncActionTakenParams> mAsyncActionTakenCallback;
     private boolean mIsRendererInitiated;
@@ -108,7 +108,7 @@ public class ExternalNavigationParams {
             boolean isMainFrame, String nativeClientPackageName, boolean hasUserGesture,
             Callback<AsyncActionTakenParams> asyncActionTakenCallback, boolean isRendererInitiated,
             @Nullable Origin initiatorOrigin, boolean isInitialNavigationInFrame,
-            boolean isCrossFrameNavigation, boolean isSandboxedMainFrame) {
+            boolean isHiddenCrossFrameNavigation, boolean isSandboxedMainFrame) {
         mUrl = url;
         mIsIncognito = isIncognito;
         mPageTransition = pageTransition;
@@ -126,7 +126,7 @@ public class ExternalNavigationParams {
         mIsRendererInitiated = isRendererInitiated;
         mInitiatorOrigin = initiatorOrigin;
         mIsInitialNavigationInFrame = isInitialNavigationInFrame;
-        mIsCrossFrameNavigation = isCrossFrameNavigation;
+        mIsHiddenCrossFrameNavigation = isHiddenCrossFrameNavigation;
         mIsSandboxedMainFrame = isSandboxedMainFrame;
     }
 
@@ -246,8 +246,8 @@ public class ExternalNavigationParams {
     /**
      * @return Whether the navigation is a cross-frame (non-browser-initiated) navigation.
      */
-    public boolean isCrossFrameNavigation() {
-        return mIsCrossFrameNavigation;
+    public boolean isHiddenCrossFrameNavigation() {
+        return mIsHiddenCrossFrameNavigation;
     }
 
     /**
@@ -276,7 +276,7 @@ public class ExternalNavigationParams {
         private boolean mIsRendererInitiated;
         private Origin mInitiatorOrigin;
         private boolean mIsInitialNavigationInFrame;
-        private boolean mIsCrossFrameNavigation;
+        private boolean mIsHiddenCrossFrameNavigation;
         private boolean mIsSandboxedMainFrame;
 
         public Builder(GURL url, boolean isIncognito) {
@@ -376,8 +376,8 @@ public class ExternalNavigationParams {
         /**
          * Sets whether the navigation is a cross-frame (non-browser-initiated) navigation.
          */
-        public Builder setIsCrossFrameNavigation(boolean v) {
-            mIsCrossFrameNavigation = v;
+        public Builder setIsHiddenCrossFrameNavigation(boolean v) {
+            mIsHiddenCrossFrameNavigation = v;
             return this;
         }
 
@@ -396,7 +396,8 @@ public class ExternalNavigationParams {
                     mIsBackgroundTabNavigation, mIntentLaunchesAllowedInBackgroundTabs,
                     mIsMainFrame, mNativeClientPackageName, mHasUserGesture,
                     mAsyncActionTakenCallback, mIsRendererInitiated, mInitiatorOrigin,
-                    mIsInitialNavigationInFrame, mIsCrossFrameNavigation, mIsSandboxedMainFrame);
+                    mIsInitialNavigationInFrame, mIsHiddenCrossFrameNavigation,
+                    mIsSandboxedMainFrame);
         }
     }
 }
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
index 0eb280e1d7afd..9fcfbe870c692 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
@@ -150,7 +150,7 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
 
     @Override
     public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle, GURL escapedUrl,
-            boolean crossFrame, boolean isSandboxedFrame) {
+            boolean hiddenCrossFrame, boolean isSandboxedFrame) {
         // We should never get here for non-main-frame navigations.
         if (!navigationHandle.isInPrimaryMainFrame()) throw new RuntimeException();
 
@@ -164,7 +164,7 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
                 navigationHandle.getReferrerUrl(), navigationHandle.isInPrimaryMainFrame(),
                 navigationHandle.getInitiatorOrigin(), navigationHandle.isExternalProtocol(),
                 mClient.areIntentLaunchesAllowedInHiddenTabsForNavigation(navigationHandle),
-                this::onDidAsyncActionInMainFrame, crossFrame, isSandboxedFrame);
+                this::onDidAsyncActionInMainFrame, hiddenCrossFrame, isSandboxedFrame);
 
         mClient.onDecisionReachedForNavigation(navigationHandle, result);
 
@@ -207,7 +207,7 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
                 GURL.emptyGURL() /* referrerUrl */, false /* isInPrimaryMainFrame */,
                 initiatorOrigin, true /* isExternalProtocol */,
                 false /* areIntentLaunchesAllowedInHiddenTabsForNavigation */,
-                this::onDidAsyncActionInSubFrame, false /* crossframe */,
+                this::onDidAsyncActionInSubFrame, false /* hiddenCrossFrame */,
                 false /* isSandboxedMainFrame */);
 
         switch (result.getResultType()) {
@@ -231,7 +231,7 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
             boolean hasUserGesture, boolean isRendererInitiated, GURL referrerUrl,
             boolean isInPrimaryMainFrame, Origin initiatorOrigin, boolean isExternalProtocol,
             boolean areIntentLaunchesAllowedInHiddenTabsForNavigation,
-            Callback<AsyncActionTakenParams> asyncActionTakenCallback, boolean crossFrame,
+            Callback<AsyncActionTakenParams> asyncActionTakenCallback, boolean hiddenCrossFrame,
             boolean isSandboxedMainFrame) {
         boolean initialNavigation = isInitialNavigation();
         redirectHandler.updateNewUrlLoading(pageTransition, isRedirect, hasUserGesture,
@@ -260,7 +260,7 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
                         .setInitiatorOrigin(initiatorOrigin)
                         .setAsyncActionTakenCallback(asyncActionTakenCallback)
                         .setIsInitialNavigationInFrame(initialNavigation)
-                        .setIsCrossFrameNavigation(crossFrame)
+                        .setIsHiddenCrossFrameNavigation(hiddenCrossFrame)
                         .setIsSandboxedMainFrame(isSandboxedMainFrame)
                         .build();
 
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/RedirectHandler.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/RedirectHandler.java
index 3a63ac1641f2d..c4abec85692fc 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/RedirectHandler.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/RedirectHandler.java
@@ -92,7 +92,7 @@ public class RedirectHandler {
         // TODO(https://crbug.com/1286053): Plumb through the user activation time from blink.
         final long mNavigationChainStartTime = currentRealtime();
         boolean mUsedBackOrForward;
-        boolean mPerformedCrossFrameNavigation;
+        boolean mPerformedHiddenCrossFrameNavigation;
         final InitialNavigationState mInitialNavigationState;
 
         NavigationChainState(boolean hasUserStartedNonInitialNavigation,
@@ -395,12 +395,12 @@ public class RedirectHandler {
                 "Android.Intent.BlockedExternalNavLastGestureTime", millisSinceLastGesture);
     }
 
-    public void setPerformedCrossFrameNavigation() {
-        mNavigationChainState.mPerformedCrossFrameNavigation = true;
+    public void setPerformedHiddenCrossFrameNavigation() {
+        mNavigationChainState.mPerformedHiddenCrossFrameNavigation = true;
     }
 
-    public boolean navigationChainPerformedCrossFrameNavigation() {
-        return mNavigationChainState.mPerformedCrossFrameNavigation;
+    public boolean navigationChainPerformedHiddenCrossFrameNavigation() {
+        return mNavigationChainState.mPerformedHiddenCrossFrameNavigation;
     }
 
     // Facilitates simulated waiting in tests.
diff --git a/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java b/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java
index a62c80f64845b..1a801e870915c 100644
--- a/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java
+++ b/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java
@@ -2615,12 +2615,12 @@ public class ExternalNavigationHandlerTest {
 
     @Test
     @SmallTest
-    public void testBlockCrossFrameReNavigation() {
+    public void testBlockHiddenCrossFrameReNavigation() {
         mDelegate.add(new IntentActivity(YOUTUBE_URL, YOUTUBE_PACKAGE_NAME));
 
         checkUrl(YOUTUBE_URL, redirectHandlerForLinkClick())
                 .withIsInitialNavigationInFrame(false)
-                .withIsCrossFrame(true)
+                .withIsHiddenCrossFrame(true)
                 .expecting(OverrideUrlLoadingResultType.NO_OVERRIDE, IGNORE);
     }
 
@@ -3117,7 +3117,7 @@ public class ExternalNavigationHandlerTest {
         private boolean mIsRendererInitiated = true;
         private boolean mIsMainFrame = true;
         private boolean mIsInitialNavigationInFrame;
-        private boolean mIsCrossFrame;
+        private boolean mIsHiddenCrossFrame;
 
         private ExternalNavigationTestParams(String url, RedirectHandler handler) {
             mUrl = url;
@@ -3183,8 +3183,8 @@ public class ExternalNavigationHandlerTest {
             return this;
         }
 
-        public ExternalNavigationTestParams withIsCrossFrame(boolean isCrossFrame) {
-            mIsCrossFrame = isCrossFrame;
+        public ExternalNavigationTestParams withIsHiddenCrossFrame(boolean isHiddenCrossFrame) {
+            mIsHiddenCrossFrame = isHiddenCrossFrame;
             return this;
         }
 
@@ -3234,7 +3234,7 @@ public class ExternalNavigationHandlerTest {
                             .setIsRendererInitiated(mIsRendererInitiated)
                             .setAsyncActionTakenCallback(callback)
                             .setIsInitialNavigationInFrame(mIsInitialNavigationInFrame)
-                            .setIsCrossFrameNavigation(mIsCrossFrame)
+                            .setIsHiddenCrossFrameNavigation(mIsHiddenCrossFrame)
                             .build();
             OverrideUrlLoadingResult result = mUrlHandler.shouldOverrideUrlLoading(params);
 
diff --git a/components/navigation_interception/android/java/src/org/chromium/components/navigation_interception/InterceptNavigationDelegate.java b/components/navigation_interception/android/java/src/org/chromium/components/navigation_interception/InterceptNavigationDelegate.java
index 83fe5b9ca1db5..0d37b120d4cbd 100644
--- a/components/navigation_interception/android/java/src/org/chromium/components/navigation_interception/InterceptNavigationDelegate.java
+++ b/components/navigation_interception/android/java/src/org/chromium/components/navigation_interception/InterceptNavigationDelegate.java
@@ -19,13 +19,13 @@ public abstract class InterceptNavigationDelegate {
      * @param navigationHandle parameters describing the navigation.
      * @param escapedUrl The url from the NavigationHandle, properly escaped for external
      *         navigation.
-     * @param crossFrame whether the navigation has been initiated by another frame.
+     * @param hiddenCrossFrame whether the navigation has been initiated by another (hidden) frame.
      * @param isSandboxedFrame whether the navigation was initiated by a sandboxed frame.
      * @return true if the navigation should be ignored.
      */
     @CalledByNative
     public abstract boolean shouldIgnoreNavigation(NavigationHandle navigationHandle,
-            GURL escapedUrl, boolean crossFrame, boolean isSandboxedFrame);
+            GURL escapedUrl, boolean hiddenCrossFrame, boolean isSandboxedFrame);
 
     /**
      * This method is called for navigations to external protocols in subframes, which on Android
diff --git a/components/navigation_interception/intercept_navigation_delegate.cc b/components/navigation_interception/intercept_navigation_delegate.cc
index 913cda39d0ecf..ab21af3f7e149 100644
--- a/components/navigation_interception/intercept_navigation_delegate.cc
+++ b/components/navigation_interception/intercept_navigation_delegate.cc
@@ -18,6 +18,7 @@
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/render_view_host.h"
 #include "content/public/browser/web_contents.h"
+#include "content/public/common/page_visibility_state.h"
 #include "mojo/public/cpp/bindings/self_owned_receiver.h"
 #include "net/http/http_status_code.h"
 #include "net/http/http_util.h"
@@ -188,13 +189,23 @@ bool InterceptNavigationDelegate::ShouldIgnoreNavigation(
   if (jdelegate.is_null())
     return false;
 
+  bool hidden_cross_frame = false;
   // Only main frame navigations use this path, so we only need to check if the
   // navigation is cross-frame to the main frame.
-  bool cross_frame = navigation_handle->GetInitiatorFrameToken() &&
-                     navigation_handle->GetInitiatorFrameToken() !=
-                         navigation_handle->GetWebContents()
-                             ->GetPrimaryMainFrame()
-                             ->GetFrameToken();
+  if (navigation_handle->GetInitiatorFrameToken() &&
+      navigation_handle->GetInitiatorFrameToken() !=
+          navigation_handle->GetWebContents()
+              ->GetPrimaryMainFrame()
+              ->GetFrameToken()) {
+    content::RenderFrameHost* initiator_frame_host =
+        content::RenderFrameHost::FromFrameToken(
+            navigation_handle->GetInitiatorProcessId(),
+            navigation_handle->GetInitiatorFrameToken().value());
+    // If the initiator is gone treat it as not visible.
+    hidden_cross_frame =
+        !initiator_frame_host || initiator_frame_host->GetVisibilityState() !=
+                                     content::PageVisibilityState::kVisible;
+  }
 
   // We don't care which sandbox flags are present, only that any sandbox flags
   // are present, as we don't support persisting sandbox flags through fallback
@@ -204,7 +215,7 @@ bool InterceptNavigationDelegate::ShouldIgnoreNavigation(
 
   return Java_InterceptNavigationDelegate_shouldIgnoreNavigation(
       env, jdelegate, navigation_handle->GetJavaNavigationHandle(),
-      url::GURLAndroid::FromNativeGURL(env, escaped_url), cross_frame,
+      url::GURLAndroid::FromNativeGURL(env, escaped_url), hidden_cross_frame,
       is_sandboxed);
 }
 
