commit 29b2b78e9a513fd68d5b9f74033be0222135bc7f	29b2b78e9a513fd68d5b9f74033be0222135bc7f
Author: Michael Thiessen <mthiesse@chromium.org>
Date:   Thu Jan 26 03:31:25 2023 +0000

    Load subfame Intents to Chrome in the subframe
    
    If a subframe navigates to an external protocol (like intent:) that
    Chrome can handle, and that intent doesn't resolve to another Activity,
    we should just handle that URL by loading it in the subframe to
    maintain sandbox attributes.
    
    Some tests were abusing the fact that subframes could previously send
    intents to Chrome, so I modified the test code to return a fake
    ResolveInfo for the Settings activity (so that the Message code can
    still find an app to draw an icon for).
    
    Bug: 1365100
    Change-Id: I7772d04bf7375a867fd639bbec796142fa43f771
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4174394
    Reviewed-by: Yaron Friedman <yfriedman@chromium.org>
    Commit-Queue: Michael Thiessen <mthiesse@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1097223}

diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
index 58f64e334ab68..7e50932118372 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
@@ -178,9 +178,17 @@ public class UrlOverridingTest {
             BASE_PATH + "navigation_from_long_timeout.html";
     private static final String NAVIGATION_FROM_PAGE_SHOW =
             BASE_PATH + "navigation_from_page_show.html";
+    private static final String NAVIGATION_TO_SELF_PARENT_FRAME_PAGE =
+            BASE_PATH + "navigation_to_self_with_fallback_parent.html";
+    private static final String NAVIGATION_TO_SELF_PAGE =
+            BASE_PATH + "navigation_to_self_with_fallback.html";
 
     private static final String OTHER_BROWSER_PACKAGE = "com.other.browser";
-    private static final String NON_BROWSER_PACKAGE = "not.a.browser";
+    // Needs to be a real package on the device so we can get an icon from it. It will not be
+    // launched.
+    private static final String NON_BROWSER_PACKAGE = "com.android.settings";
+
+    private static final String EXTERNAL_APP_SCHEME = "externalappscheme";
 
     @Mock
     private RedirectHandler mRedirectHandler;
@@ -224,7 +232,9 @@ public class UrlOverridingTest {
     private static class TestContext extends ContextWrapper {
         private boolean mResolveToNonBrowserPackage;
         private String mHostToMatch;
+        private String mSchemeToMatch;
         private IntentFilter mFilterForHostMatch;
+        private IntentFilter mFilterForSchemeMatch;
 
         public TestContext(Context baseContext) {
             super(baseContext);
@@ -248,6 +258,11 @@ public class UrlOverridingTest {
             mFilterForHostMatch = filter;
         }
 
+        private void setIntentFilterForScheme(String scheme, IntentFilter filter) {
+            mSchemeToMatch = scheme;
+            mFilterForSchemeMatch = filter;
+        }
+
         @Override
         public PackageManager getPackageManager() {
             return new PackageManagerWrapper(super.getPackageManager()) {
@@ -270,6 +285,13 @@ public class UrlOverridingTest {
                         return Arrays.asList(info);
                     }
 
+                    if (mSchemeToMatch != null && intent.getScheme() != null
+                            && intent.getScheme().equals(mSchemeToMatch)) {
+                        ResolveInfo info = newResolveInfo(NON_BROWSER_PACKAGE);
+                        info.filter = mFilterForSchemeMatch;
+                        return Arrays.asList(info);
+                    }
+
                     return TestContext.super.getPackageManager().queryIntentActivities(
                             intent, flags);
                 }
@@ -284,6 +306,13 @@ public class UrlOverridingTest {
                         return newResolveInfo(OTHER_BROWSER_PACKAGE);
                     }
 
+                    if (mSchemeToMatch != null && intent.getScheme() != null
+                            && intent.getScheme().equals(mSchemeToMatch)) {
+                        ResolveInfo info = newResolveInfo(NON_BROWSER_PACKAGE);
+                        info.filter = mFilterForSchemeMatch;
+                        return info;
+                    }
+
                     // Behave as though play store is not installed - this matches bot emulator
                     // images.
                     if (targetsPlay(intent)) return null;
@@ -307,10 +336,11 @@ public class UrlOverridingTest {
         ContextUtils.initApplicationContextForTests(mTestContext);
         IntentFilter filter = new IntentFilter(Intent.ACTION_VIEW);
         filter.addCategory(Intent.CATEGORY_BROWSABLE);
-        filter.addDataScheme("externalappscheme");
+        filter.addDataScheme(EXTERNAL_APP_SCHEME);
         mActivityMonitor = InstrumentationRegistry.getInstrumentation().addMonitor(
                 filter, new Instrumentation.ActivityResult(Activity.RESULT_OK, null), true);
         mTestServer = mActivityTestRule.getTestServer();
+        mTestContext.setIntentFilterForScheme(EXTERNAL_APP_SCHEME, filter);
     }
 
     @After
@@ -537,15 +567,15 @@ public class UrlOverridingTest {
 
     private void assertMessagePresent() throws Exception {
         PackageManager pm = ContextUtils.getApplicationContext().getPackageManager();
-        ApplicationInfo selfInfo = ContextUtils.getApplicationContext().getApplicationInfo();
-        CharSequence selfLabel = pm.getApplicationLabel(selfInfo);
+        ApplicationInfo applicationInfo = pm.getApplicationInfo(NON_BROWSER_PACKAGE, 0);
+        CharSequence label = pm.getApplicationLabel(applicationInfo);
 
         PropertyModel message = getCurrentExternalNavigationMessage();
         Assert.assertNotNull(message);
         Assert.assertThat(message.get(MessageBannerProperties.TITLE),
-                Matchers.containsString(selfLabel.toString()));
+                Matchers.containsString(label.toString()));
         Assert.assertThat(message.get(MessageBannerProperties.DESCRIPTION).toString(),
-                Matchers.containsString(selfLabel.toString()));
+                Matchers.containsString(label.toString()));
         Assert.assertNotNull(message.get(MessageBannerProperties.ICON));
     }
 
@@ -1171,7 +1201,8 @@ public class UrlOverridingTest {
     @LargeTest
     public void testServerRedirectionFromIntent() throws Exception {
         TestWebServer webServer = TestWebServer.start();
-        final String redirectTargetUrl = "intent://test/#Intent;scheme=externalappscheme;end";
+        final String redirectTargetUrl =
+                "intent://test/#Intent;scheme=" + EXTERNAL_APP_SCHEME + ";end";
         final String redirectUrl = webServer.setRedirect("/302.html", redirectTargetUrl);
 
         Context context = ContextUtils.getApplicationContext();
@@ -1347,4 +1378,64 @@ public class UrlOverridingTest {
             Criteria.checkThat(mActivityMonitor.getHits(), Matchers.is(1));
         }, 10000L, CriteriaHelper.DEFAULT_POLLING_INTERVAL);
     }
+
+    @Test
+    @SmallTest
+    @Features.EnableFeatures({ExternalIntentsFeatures.EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS_NAME,
+            ExternalIntentsFeatures.BLOCK_SUBFRAME_INTENT_TO_SELF_NAME})
+    public void
+    testSubframeNavigationToSelf() throws Exception {
+        mActivityTestRule.startMainActivityOnBlankPage();
+
+        String targetUrl = mTestServer.getURL(HELLO_PAGE);
+        // Strip off the https: from the URL.
+        String strippedTargetUrl = targetUrl.substring(6);
+        String subframeTarget = "intent:" + strippedTargetUrl + "#Intent;scheme=https;package="
+                + ContextUtils.getApplicationContext().getPackageName() + ";S.browser_fallback_url="
+                + "https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.android.chrome"
+                + ";end";
+
+        // The replace_text parameters for NAVIGATION_TO_SELF_PAGE, which is loaded in
+        // the iframe in NAVIGATION_TO_SELF_PARENT_FRAME_PAGE, have to go through the
+        // embedded test server twice and, as such, have to be base64-encoded twice.
+        byte[] paramBase64Name = ApiCompatibilityUtils.getBytesUtf8("PARAM_BASE64_NAME");
+        byte[] base64ParamTargetUrl = Base64.encode(
+                ApiCompatibilityUtils.getBytesUtf8("PARAM_SELF_URL"), Base64.URL_SAFE);
+        byte[] paramBase64Value = ApiCompatibilityUtils.getBytesUtf8("PARAM_BASE64_VALUE");
+        byte[] base64TargetUrl =
+                Base64.encode(ApiCompatibilityUtils.getBytesUtf8(subframeTarget), Base64.URL_SAFE);
+
+        String originalUrl = mTestServer.getURL(NAVIGATION_TO_SELF_PARENT_FRAME_PAGE
+                + "?replace_text=" + Base64.encodeToString(paramBase64Name, Base64.URL_SAFE) + ":"
+                + Base64.encodeToString(base64ParamTargetUrl, Base64.URL_SAFE)
+                + "&replace_text=" + Base64.encodeToString(paramBase64Value, Base64.URL_SAFE) + ":"
+                + Base64.encodeToString(base64TargetUrl, Base64.URL_SAFE));
+
+        final Tab tab = mActivityTestRule.getActivity().getActivityTab();
+
+        final CallbackHelper subframeRedirect = new CallbackHelper();
+        EmptyTabObserver observer = new EmptyTabObserver() {
+            @Override
+            public void onDidStartNavigationInPrimaryMainFrame(
+                    Tab tab, NavigationHandle navigation) {
+                Assert.assertEquals(originalUrl, navigation.getUrl().getSpec());
+            }
+
+            @Override
+            public void onDidRedirectNavigation(Tab tab, NavigationHandle navigation) {
+                Assert.assertFalse(navigation.isInPrimaryMainFrame());
+                if (targetUrl.equals(navigation.getUrl().getSpec())) {
+                    subframeRedirect.notifyCalled();
+                }
+            }
+        };
+        TestThreadUtils.runOnUiThreadBlocking(() -> { tab.addObserver(observer); });
+
+        // Fallback URL from a subframe will not trigger main navigation.
+        OverrideUrlLoadingResult result =
+                loadUrlAndWaitForIntentUrl(originalUrl, true, false, false, originalUrl, false);
+        Assert.assertEquals(
+                OverrideUrlLoadingResultType.OVERRIDE_WITH_NAVIGATE_TAB, result.getResultType());
+        subframeRedirect.waitForFirst();
+    }
 }
diff --git a/chrome/test/data/android/url_overriding/navigation_to_self_with_fallback.html b/chrome/test/data/android/url_overriding/navigation_to_self_with_fallback.html
new file mode 100644
index 0000000000000..389b1929e4b11
--- /dev/null
+++ b/chrome/test/data/android/url_overriding/navigation_to_self_with_fallback.html
@@ -0,0 +1,12 @@
+<head>
+  <meta name="viewport"
+    content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+  <script>
+    function openApp() {
+      location.href = 'PARAM_SELF_URL';
+    };
+  </script>
+</head>
+<body style='height:10000px;' onclick='openApp();'>
+  Click page to open App!!
+</body>
diff --git a/chrome/test/data/android/url_overriding/navigation_to_self_with_fallback_parent.html b/chrome/test/data/android/url_overriding/navigation_to_self_with_fallback_parent.html
new file mode 100644
index 0000000000000..bb7d53e1892df
--- /dev/null
+++ b/chrome/test/data/android/url_overriding/navigation_to_self_with_fallback_parent.html
@@ -0,0 +1,8 @@
+<!DOCTYPE html>
+<meta name="viewport"
+    content="width=device-width, initial-scale=1.0, maximum-scale=1.0"/>
+<body style='height:10000px'>
+<p>Hello World</p>
+<iframe src="navigation_to_self_with_fallback.html?replace_text=PARAM_BASE64_NAME:PARAM_BASE64_VALUE"
+    width="100%" height="99%"></iframe>
+</body>
diff --git a/components/external_intents/android/external_intents_features.cc b/components/external_intents/android/external_intents_features.cc
index 8f695d60ff1df..a2e5fe285dc6c 100644
--- a/components/external_intents/android/external_intents_features.cc
+++ b/components/external_intents/android/external_intents_features.cc
@@ -19,7 +19,7 @@ namespace {
 // Array of features exposed through the Java ExternalIntentsFeatures API.
 const base::Feature* kFeaturesExposedToJava[] = {
     &kBlockExternalFormSubmitWithoutGesture, &kExternalNavigationDebugLogs,
-    &kExternalNavigationSubframeRedirects};
+    &kExternalNavigationSubframeRedirects, &kBlockSubframeIntentToSelf};
 
 }  // namespace
 
@@ -39,6 +39,10 @@ BASE_FEATURE(kExternalNavigationSubframeRedirects,
              "ExternalNavigationSubframeRedirects",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
+BASE_FEATURE(kBlockSubframeIntentToSelf,
+             "BlockSubframeIntentToSelf",
+             base::FEATURE_ENABLED_BY_DEFAULT);
+
 static jlong JNI_ExternalIntentsFeatures_GetFeature(JNIEnv* env, jint ordinal) {
   return reinterpret_cast<jlong>(kFeaturesExposedToJava[ordinal]);
 }
diff --git a/components/external_intents/android/external_intents_features.h b/components/external_intents/android/external_intents_features.h
index bab62ff97f151..1308e55574108 100644
--- a/components/external_intents/android/external_intents_features.h
+++ b/components/external_intents/android/external_intents_features.h
@@ -13,7 +13,7 @@ namespace external_intents {
 BASE_DECLARE_FEATURE(kBlockExternalFormSubmitWithoutGesture);
 BASE_DECLARE_FEATURE(kExternalNavigationDebugLogs);
 BASE_DECLARE_FEATURE(kExternalNavigationSubframeRedirects);
-
+BASE_DECLARE_FEATURE(kBlockSubframeIntentToSelf);
 }  // namespace external_intents
 
 #endif  // COMPONENTS_EXTERNAL_INTENTS_ANDROID_EXTERNAL_INTENTS_FEATURES_H_
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
index fddd0dd09557a..b52ed57e6f2cf 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
@@ -22,6 +22,7 @@ public class ExternalIntentsFeatures extends Features {
     public static final String EXTERNAL_NAVIGATION_DEBUG_LOGS_NAME = "ExternalNavigationDebugLogs";
     public static final String EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS_NAME =
             "ExternalNavigationSubframeRedirects";
+    public static final String BLOCK_SUBFRAME_INTENT_TO_SELF_NAME = "BlockSubframeIntentToSelf";
 
     public static final ExternalIntentsFeatures BLOCK_EXTERNAL_FORM_SUBMIT_WITHOUT_GESTURE =
             new ExternalIntentsFeatures(0, BLOCK_EXTERNAL_FORM_SUBMIT_WITHOUT_GESTURE_NAME);
@@ -32,6 +33,9 @@ public class ExternalIntentsFeatures extends Features {
     public static final ExternalIntentsFeatures EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS =
             new ExternalIntentsFeatures(2, EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS_NAME);
 
+    public static final ExternalIntentsFeatures BLOCK_SUBFRAME_INTENT_TO_SELF =
+            new ExternalIntentsFeatures(3, BLOCK_SUBFRAME_INTENT_TO_SELF_NAME);
+
     private final int mOrdinal;
 
     private ExternalIntentsFeatures(int ordinal, String name) {
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
index 60b4043914fef..c100cea2ec364 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
@@ -74,7 +74,6 @@ import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
@@ -1107,6 +1106,28 @@ public class ExternalNavigationHandler {
         return OverrideUrlLoadingResult.forNoOverride();
     }
 
+    private boolean isSubframeNavigationToSelf(ExternalNavigationParams params,
+            QueryIntentActivitiesSupplier resolvingInfos, ResolveActivitySupplier resolveActivity) {
+        if (!ExternalIntentsFeatures.BLOCK_SUBFRAME_INTENT_TO_SELF.isEnabled()) return false;
+        if (params.isMainFrame()) return false;
+        if (!resolveInfoContainsSelf(resolvingInfos.get())) return false;
+        if (resolveActivity.get() == null) return false;
+
+        ActivityInfo info = resolveActivity.get().activityInfo;
+        if (info != null && mDelegate.getContext().getPackageName().equals(info.packageName)) {
+            if (debug()) Log.i(TAG, "Subframe navigation to self.");
+            return true;
+        }
+
+        // We don't want the user seeing the chooser and choosing the browser, but resolving to
+        // another app is fine.
+        if (resolvesToChooser(resolveActivity.get(), resolvingInfos)) {
+            if (debug()) Log.i(TAG, "Subframe navigation to chooser including self.");
+            return true;
+        }
+        return false;
+    }
+
     /**
      * Returns true if the intent is an insecure intent targeting browsers or browser-like apps
      * (excluding the embedding app).
@@ -1529,6 +1550,11 @@ public class ExternalNavigationHandler {
             return OverrideUrlLoadingResult.forNoOverride();
         }
 
+        ResolveActivitySupplier resolveActivity = new ResolveActivitySupplier(targetIntent);
+        if (isSubframeNavigationToSelf(params, resolvingInfos, resolveActivity)) {
+            return OverrideUrlLoadingResult.forNavigateTab(intentDataUrl, params);
+        }
+
         boolean hasSpecializedHandler = countSpecializedHandlers(resolvingInfos.get()) > 0;
         if (!isExternalProtocol && !hasSpecializedHandler && !intentMatchesNonDefaultWebApk) {
             return fallBackToHandlingInApp();
@@ -1560,7 +1586,6 @@ public class ExternalNavigationHandler {
             return OverrideUrlLoadingResult.forExternalIntent();
         }
 
-        ResolveActivitySupplier resolveActivity = new ResolveActivitySupplier(targetIntent);
         boolean requiresIntentChooser = false;
         if (!mDelegate.maybeSetTargetPackage(targetIntent, resolvingInfos)) {
             requiresIntentChooser = isInsecureIntentToOtherBrowser(targetIntent, resolvingInfos,
@@ -1608,13 +1633,7 @@ public class ExternalNavigationHandler {
 
         if (resolveActivity == null) return true;
 
-        List<ResolveInfo> possibleHandlingActivities = resolvingInfosSupplier.get();
-
-        // If resolveActivity is contained in possibleHandlingActivities, that means the Intent
-        // would launch a specialized Activity. If not, that means the Intent will launch the
-        // Android disambiguation prompt.
-        boolean result = !resolversSubsetOf(
-                Collections.singletonList(resolveActivity), possibleHandlingActivities);
+        boolean result = resolvesToChooser(resolveActivity, resolvingInfosSupplier);
         if (debug() && result) Log.i(TAG, "Avoiding disambiguation dialog.");
         return result;
     }
@@ -1973,6 +1992,13 @@ public class ExternalNavigationHandler {
         return OverrideUrlLoadingResult.forExternalIntent();
     }
 
+    // If the |resolvingInfos| from queryIntentActivities don't contain the result of
+    // resolveActivity, it means the intent is resolving to the ResolverActivity.
+    private boolean resolvesToChooser(
+            @NonNull ResolveInfo resolveActivity, QueryIntentActivitiesSupplier resolvingInfos) {
+        return !resolversSubsetOf(Arrays.asList(resolveActivity), resolvingInfos.get());
+    }
+
     // looking up resources from other apps requires the use of getIdentifier()
     @SuppressWarnings({"UseCompatLoadingForDrawables", "DiscouragedApi"})
     private OverrideUrlLoadingResult startActivityWithChooser(final Intent intent,
@@ -1984,12 +2010,11 @@ public class ExternalNavigationHandler {
         // non-default filters, so just drop it.
         if (intentResolveInfo == null) return OverrideUrlLoadingResult.forNoOverride();
 
-        // If the |resolvingInfos| from queryIntentActivities don't contain the result of
-        // resolveActivity, it means the intent is resolving to the ResolverActivity, so the user
-        // will already get the option to choose the target app (as there will be multiple options)
-        // and we don't need to do anything. Otherwise we have to make a fake option in the chooser
-        // dialog that loads the URL in the embedding app.
-        if (!resolversSubsetOf(Arrays.asList(intentResolveInfo), resolvingInfos.get())) {
+        // If we resolve to the Chooser Activity, the user will already get the option to choose the
+        // target app (as there will be multiple options) and we don't need to do anything.
+        // Otherwise we have to make a fake option in the chooser dialog that loads the URL in the
+        // embedding app.
+        if (resolvesToChooser(intentResolveInfo, resolvingInfos)) {
             return doStartActivity(intent, context);
         }
 
@@ -2103,7 +2128,7 @@ public class ExternalNavigationHandler {
         // when the external navigation was otherwise blocked. In this case, we should just continue
         // to block the navigation, and sites hoping to prompt the user when navigation fails should
         // make sure to correctly target their app.
-        if (!resolversSubsetOf(Arrays.asList(intentResolveInfo), resolvingInfos.get())) {
+        if (resolvesToChooser(intentResolveInfo, resolvingInfos)) {
             if (debug()) Log.i(TAG, "Message resolves to multiple apps.");
             return OverrideUrlLoadingResult.forNoOverride();
         }
diff --git a/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java b/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java
index 3fee8928cb44a..051b6cf51a995 100644
--- a/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java
+++ b/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java
@@ -73,12 +73,11 @@ import java.util.regex.Pattern;
  * Instrumentation tests for {@link ExternalNavigationHandler}.
  */
 @RunWith(BaseJUnit4ClassRunner.class)
-// clang-format off
 @Batch(Batch.UNIT_TESTS)
 @Features.DisableFeatures(ExternalIntentsFeatures.EXTERNAL_NAVIGATION_DEBUG_LOGS_NAME)
-@Features.EnableFeatures(ExternalIntentsFeatures.BLOCK_EXTERNAL_FORM_SUBMIT_WITHOUT_GESTURE_NAME)
+@Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_EXTERNAL_FORM_SUBMIT_WITHOUT_GESTURE_NAME,
+        ExternalIntentsFeatures.BLOCK_SUBFRAME_INTENT_TO_SELF_NAME})
 public class ExternalNavigationHandlerTest {
-    // clang-format on
     // Expectations
     private static final int IGNORE = 0x0;
     private static final int START_INCOGNITO = 0x1;
@@ -2591,6 +2590,40 @@ public class ExternalNavigationHandlerTest {
                 2, redirectHandler.getLastCommittedEntryIndexBeforeStartingNavigation());
     }
 
+    private void doTestSubframeIntentTargetsSelf(boolean targetsPackage) {
+        mUrlHandler.mResolveInfoContainsSelf = true;
+        if (!targetsPackage) {
+            mDelegate.setWillResolveToDisambiguationDialog(true);
+        }
+        String url = "intent://www.example.com/#Intent;scheme=https;"
+                + "action=android.intent.action.VIEW;package=" + SELF_PACKAGE_NAME
+                + ";S.browser_fallback_url=https://bad.com;end";
+
+        RedirectHandler redirectHandler = RedirectHandler.create();
+        redirectHandler.updateNewUrlLoading(
+                PageTransition.AUTO_SUBFRAME, false, true, 0, 0, false, true);
+
+        checkUrl(url)
+                .withIsMainFrame(false)
+                .withHasUserGesture(true)
+                .withRedirectHandler(redirectHandler)
+                .withPageTransition(PageTransition.AUTO_SUBFRAME)
+                .expecting(OverrideUrlLoadingResultType.OVERRIDE_WITH_NAVIGATE_TAB, IGNORE);
+        Assert.assertEquals("https://www.example.com/", mUrlHandler.mNewUrlAfterClobbering);
+    }
+
+    @Test
+    @SmallTest
+    public void testSubframeIntentTargetsSelf_Package() {
+        doTestSubframeIntentTargetsSelf(true);
+    }
+
+    @Test
+    @SmallTest
+    public void testSubframeIntentTargetsSelf_Chooser() {
+        doTestSubframeIntentTargetsSelf(false);
+    }
+
     private static List<ResolveInfo> makeResolveInfos(ResolveInfo... infos) {
         return Arrays.asList(infos);
     }
@@ -2772,7 +2805,7 @@ public class ExternalNavigationHandlerTest {
             String dataString = intent.getDataString();
             if (intent.getScheme() != null) {
                 if (dataString.startsWith("http://") || dataString.startsWith("https://")) {
-                    list.add(newResolveInfo("chrome"));
+                    list.add(newResolveInfo(SELF_PACKAGE_NAME));
                 }
                 for (IntentActivity intentActivity : mIntentActivities) {
                     if (dataString.startsWith(intentActivity.urlPrefix())) {
