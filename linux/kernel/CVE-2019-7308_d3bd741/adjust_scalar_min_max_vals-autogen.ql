/**
 * @name linux-d3bd7413e0ca40b60cf60d4003246d067cafdeda-adjust_scalar_min_max_vals
 * @id cpp/linux/d3bd7413e0ca40b60cf60d4003246d067cafdeda/adjust-scalar-min-max-vals
 * @description linux-d3bd7413e0ca40b60cf60d4003246d067cafdeda-kernel/bpf/verifier.c-adjust_scalar_min_max_vals CVE-2019-7308
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter venv_3410, Parameter vinsn_3411, VariableAccess target_4, FunctionCall target_5) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("sanitize_val_alu")
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_3410
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vinsn_3411
	and target_0.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_4
	and target_5.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Parameter venv_3410, VariableAccess target_4) {
exists(IfStmt target_1 |
	target_1.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getType().hasName("int")
	and target_1.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_3410
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="R%d tried to add from different pointers or scalars\n"
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getType().hasName("u32")
	and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(VariableAccess).getType().hasName("int")
	and target_1.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_4)
}

predicate func_2(Parameter venv_3410, Parameter vinsn_3411, VariableAccess target_4, ExprStmt target_6) {
exists(ExprStmt target_2 |
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("sanitize_val_alu")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_3410
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vinsn_3411
	and target_2.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_4
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_6.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_3(Parameter venv_3410, VariableAccess target_4, ExprStmt target_6) {
exists(IfStmt target_3 |
	target_3.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getType().hasName("int")
	and target_3.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_3410
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="R%d tried to sub from different pointers or scalars\n"
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getType().hasName("u32")
	and target_3.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(VariableAccess).getType().hasName("int")
	and target_3.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_4
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_4(Variable vopcode_3416, VariableAccess target_4) {
	target_4.getTarget()=vopcode_3416
}

predicate func_5(Parameter venv_3410, FunctionCall target_5) {
	target_5.getTarget().hasName("cur_regs")
	and target_5.getArgument(0).(VariableAccess).getTarget()=venv_3410
}

predicate func_6(Parameter venv_3410, Parameter vinsn_3411, RelationalOperation target_7, ExprStmt target_6) {
	target_6.getExpr().(FunctionCall).getTarget().hasName("mark_reg_unknown")
	and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_3410
	and target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("bpf_reg_state *")
	and target_6.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_6.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_3411
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
}

predicate func_7(BlockStmt target_8, Function func, RelationalOperation target_7) {
	 (target_7 instanceof GEExpr or target_7 instanceof LEExpr)
	and target_7.getGreaterOperand().(VariableAccess).getTarget().getType().hasName("u64")
	and target_7.getLesserOperand().(VariableAccess).getTarget().getType().hasName("u64")
	and target_7.getParent().(IfStmt).getThen()=target_8
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Parameter venv_3410, Parameter vinsn_3411, RelationalOperation target_7, BlockStmt target_8) {
	target_8.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mark_reg_unknown")
	and target_8.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_3410
	and target_8.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("bpf_reg_state *")
	and target_8.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_8.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_3411
	and target_8.getParent().(IfStmt).getCondition()=target_7
}

from Function func, Parameter venv_3410, Parameter vinsn_3411, Variable vopcode_3416, VariableAccess target_4, FunctionCall target_5, ExprStmt target_6, RelationalOperation target_7, BlockStmt target_8
where
not func_0(venv_3410, vinsn_3411, target_4, target_5)
and not func_1(venv_3410, target_4)
and not func_2(venv_3410, vinsn_3411, target_4, target_6)
and not func_3(venv_3410, target_4, target_6)
and func_4(vopcode_3416, target_4)
and func_5(venv_3410, target_5)
and func_6(venv_3410, vinsn_3411, target_7, target_6)
and func_7(target_8, func, target_7)
and func_8(venv_3410, vinsn_3411, target_7, target_8)
and venv_3410.getType().hasName("bpf_verifier_env *")
and vinsn_3411.getType().hasName("bpf_insn *")
and vopcode_3416.getType().hasName("u8")
and venv_3410.getFunction() = func
and vinsn_3411.getFunction() = func
and vopcode_3416.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
