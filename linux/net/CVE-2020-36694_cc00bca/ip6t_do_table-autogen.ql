/**
 * @name linux-cc00bcaa589914096edef7fb87ca5cee4a166b5c-ip6t_do_table
 * @id cpp/linux/cc00bcaa589914096edef7fb87ca5cee4a166b5c/ip6t-do-table
 * @description linux-cc00bcaa589914096edef7fb87ca5cee4a166b5c-net/ipv6/netfilter/ip6_tables.c-ip6t_do_table CVE-2020-36694
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func) {
exists(StmtExpr target_0 |
	target_0.getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(VariableAccess).getType().hasName("xt_table_info *")
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("const xt_table_info *")
	and target_0.getEnclosingFunction() = func)
}

/*predicate func_2(Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(VariableAccess).getType().hasName("xt_table_info *")
	and target_2.getEnclosingFunction() = func)
}

*/
predicate func_3(Parameter vtable_252, StmtExpr target_3) {
	target_3.getStmt().(BlockStmt).getStmt(0).(DoStmt).getCondition().(Literal).getValue()="0"
	and target_3.getStmt().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(NotExpr).getValue()="0"
	and target_3.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(PointerDereferenceExpr).getOperand().(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="private"
	and target_3.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(PointerDereferenceExpr).getOperand().(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vtable_252
	and target_3.getParent().(AssignExpr).getRValue() = target_3
	and target_3.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("const xt_table_info *")
}

from Function func, Parameter vtable_252, StmtExpr target_3
where
not func_0(func)
and func_3(vtable_252, target_3)
and vtable_252.getType().hasName("xt_table *")
and vtable_252.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
