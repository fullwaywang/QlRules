/**
 * @name linux-abe067dc3a662eef7d5cddbbc41ed50a0b68b0af-vhost_task_create
 * @id cpp/linux/abe067dc3a662eef7d5cddbbc41ed50a0b68b0af/vhost-task-create
 * @description linux-abe067dc3a662eef7d5cddbbc41ed50a0b68b0af-kernel/vhost_task.c-vhost_task_create CVE-2024-42135
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, SizeofExprOperator target_0) {
	target_0.getValue()="128"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vvtsk_118, ExprStmt target_3, AddressOfExpr target_4, Function func) {
exists(DoStmt target_1 |
	exists(BlockStmt obj_0 | obj_0=target_1.getStmt() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(1) |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				exists(AddressOfExpr obj_3 | obj_3=obj_2.getArgument(0) |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getOperand() |
						obj_4.getTarget().getName()="exit_mutex"
						and obj_4.getQualifier().(VariableAccess).getTarget()=vvtsk_118
					)
				)
				and obj_2.getTarget().hasName("__mutex_init")
				and obj_2.getArgument(1).(StringLiteral).getValue()="&vtsk->exit_mutex"
				and obj_2.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("lock_class_key")
			)
		)
	)
	and target_1.getCondition().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_3.getLocation())
	and target_4.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_2(Variable vvtsk_118, ExprStmt target_5, ExprStmt target_6, Function func) {
exists(ExprStmt target_2 |
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="handle_sigkill"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vvtsk_118
		)
		and obj_0.getRValue().(VariableAccess).getType().hasName("..(*)(..)")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_5.getLocation())
	and target_6.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_3(Variable vvtsk_118, ExprStmt target_3) {
	exists(AssignExpr obj_0 | obj_0=target_3.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="data"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vvtsk_118
		)
		and obj_0.getRValue().(VariableAccess).getTarget().getType().hasName("void *")
	)
}

predicate func_4(Variable vvtsk_118, AddressOfExpr target_4) {
	exists(PointerFieldAccess obj_0 | obj_0=target_4.getOperand() |
		obj_0.getTarget().getName()="exited"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vvtsk_118
	)
}

predicate func_5(Variable vvtsk_118, ExprStmt target_5) {
	exists(AssignExpr obj_0 | obj_0=target_5.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="fn_arg"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("kernel_clone_args")
		)
		and obj_0.getRValue().(VariableAccess).getTarget()=vvtsk_118
	)
}

predicate func_6(Variable vvtsk_118, ExprStmt target_6) {
	exists(AssignExpr obj_0 | obj_0=target_6.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="fn"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vvtsk_118
		)
		and obj_0.getRValue().(VariableAccess).getTarget().getType().hasName("..(*)(..)")
	)
}

from Function func, Variable vvtsk_118, SizeofExprOperator target_0, ExprStmt target_3, AddressOfExpr target_4, ExprStmt target_5, ExprStmt target_6
where
func_0(func, target_0)
and not func_1(vvtsk_118, target_3, target_4, func)
and not func_2(vvtsk_118, target_5, target_6, func)
and func_3(vvtsk_118, target_3)
and func_4(vvtsk_118, target_4)
and func_5(vvtsk_118, target_5)
and func_6(vvtsk_118, target_6)
and vvtsk_118.getType().hasName("vhost_task *")
and vvtsk_118.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
