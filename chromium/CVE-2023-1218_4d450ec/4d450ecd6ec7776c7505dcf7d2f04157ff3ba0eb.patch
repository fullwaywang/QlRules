commit 4d450ecd6ec7776c7505dcf7d2f04157ff3ba0eb	4d450ecd6ec7776c7505dcf7d2f04157ff3ba0eb
Author: Henrik Boström <hbos@chromium.org>
Date:   Wed Feb 15 15:21:56 2023 +0000

    Shutdown RtpContributingSourceCache in Dispose().
    
    The cache is an off-heap object, but it is owned by an on-heap object
    (RTCPeerConnection). Dispoing the owning object poisons memory owned by
    it, but the cache may have in-flight tasks (cache doing ClearCache in a
    delayed microtask). This CL adds a Shutdown() method to ensure the
    cache isn't doing anything in the next microtask after disposal.
    
    No reliable way to repro this has been found but the change should be
    safe so hoping we can land without tests.
    
    Bug: 1413628
    Change-Id: I479aace9859f4c10cd75d4aa5a34808b4726299d
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4247023
    Reviewed-by: Evan Shrubsole <eshr@google.com>
    Commit-Queue: Henrik Boström <hbos@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1105653}

diff --git a/third_party/blink/renderer/modules/peerconnection/rtc_peer_connection.cc b/third_party/blink/renderer/modules/peerconnection/rtc_peer_connection.cc
index 54ea6f229f110..ef2bf73fac5e6 100644
--- a/third_party/blink/renderer/modules/peerconnection/rtc_peer_connection.cc
+++ b/third_party/blink/renderer/modules/peerconnection/rtc_peer_connection.cc
@@ -666,12 +666,18 @@ RTCPeerConnection::~RTCPeerConnection() {
 }
 
 void RTCPeerConnection::Dispose() {
-  // Promptly clears the handler
-  // so that content/ doesn't access it in a lazy sweeping phase.
-  // Other references to the handler use a weak pointer, preventing access.
+  // Promptly clears the handler so that content doesn't access it in a lazy
+  // sweeping phase. Other references to the handler use a weak pointer,
+  // preventing access.
   if (peer_handler_) {
     peer_handler_.reset();
   }
+  // Memory owned by RTCPeerConnection must not be touched after Dispose().
+  // Shut down the cache to cancel any in-flight tasks that may otherwise have
+  // used the cache.
+  if (rtp_contributing_source_cache_.has_value()) {
+    rtp_contributing_source_cache_.value().Shutdown();
+  }
 }
 
 ScriptPromise RTCPeerConnection::createOffer(ScriptState* script_state,
diff --git a/third_party/blink/renderer/modules/peerconnection/rtp_contributing_source_cache.cc b/third_party/blink/renderer/modules/peerconnection/rtp_contributing_source_cache.cc
index 1707280e448b1..58be511195ef2 100644
--- a/third_party/blink/renderer/modules/peerconnection/rtp_contributing_source_cache.cc
+++ b/third_party/blink/renderer/modules/peerconnection/rtp_contributing_source_cache.cc
@@ -103,6 +103,10 @@ RtpContributingSourceCache::RtpContributingSourceCache(
   DCHECK(worker_thread_runner_);
 }
 
+void RtpContributingSourceCache::Shutdown() {
+  weak_factory_.InvalidateWeakPtrs();
+}
+
 HeapVector<Member<RTCRtpSynchronizationSource>>
 RtpContributingSourceCache::getSynchronizationSources(
     ScriptState* script_state,
diff --git a/third_party/blink/renderer/modules/peerconnection/rtp_contributing_source_cache.h b/third_party/blink/renderer/modules/peerconnection/rtp_contributing_source_cache.h
index 0d0ef9d1c5932..3a42751ab02f5 100644
--- a/third_party/blink/renderer/modules/peerconnection/rtp_contributing_source_cache.h
+++ b/third_party/blink/renderer/modules/peerconnection/rtp_contributing_source_cache.h
@@ -43,6 +43,10 @@ class RtpContributingSourceCache {
       RTCPeerConnection* pc,
       scoped_refptr<base::SingleThreadTaskRunner> worker_thread_runner);
 
+  // When the owner of this object is Disposed(), this method must be called to
+  // cancel any in-flight tasks.
+  void Shutdown();
+
   HeapVector<Member<RTCRtpSynchronizationSource>> getSynchronizationSources(
       ScriptState* script_state,
       ExceptionState& exception_state,
