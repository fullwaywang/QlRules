/**
 * @name linux-53eecb1be5ae499d399d2923933937a9ea1a284f-dispatch
 * @id cpp/linux/53eecb1be5ae499d399d2923933937a9ea1a284f/dispatch
 * @description linux-53eecb1be5ae499d399d2923933937a9ea1a284f-net/tipc/socket.c-dispatch CVE-2010-4251
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsk_1311, Variable vres_1312, Parameter vbuf_1309, NotExpr target_6, ExprStmt target_7, AddressOfExpr target_8) {
	exists(IfStmt target_0 |
		target_0.getCondition().(FunctionCall).getTarget().hasName("sk_add_backlog_limited")
		and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_1311
		and target_0.getCondition().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vbuf_1309
		and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vres_1312
		and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="4"
		and target_0.getElse() instanceof ExprStmt
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(0)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
		and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_8.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

/*predicate func_1(Variable vres_1312, ExprStmt target_7) {
	exists(AssignExpr target_1 |
		target_1.getLValue().(VariableAccess).getTarget()=vres_1312
		and target_1.getRValue().(Literal).getValue()="4"
		and target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_1.getLValue().(VariableAccess).getLocation()))
}

*/
predicate func_2(Variable vres_1312, NotExpr target_6, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vres_1312
		and target_2.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_3(Variable vsk_1311, VariableAccess target_3) {
		target_3.getTarget()=vsk_1311
		and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_4(Parameter vbuf_1309, VariableAccess target_4) {
		target_4.getTarget()=vbuf_1309
		and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_5(Variable vsk_1311, Parameter vbuf_1309, FunctionCall target_5) {
		target_5.getTarget().hasName("sk_add_backlog")
		and target_5.getArgument(0).(VariableAccess).getTarget()=vsk_1311
		and target_5.getArgument(1).(VariableAccess).getTarget()=vbuf_1309
}

predicate func_6(Variable vsk_1311, NotExpr target_6) {
		target_6.getOperand().(ValueFieldAccess).getTarget().getName()="owned"
		and target_6.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
		and target_6.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_1311
}

predicate func_7(Variable vsk_1311, Variable vres_1312, Parameter vbuf_1309, ExprStmt target_7) {
		target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vres_1312
		and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("filter_rcv")
		and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_1311
		and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vbuf_1309
}

predicate func_8(Variable vsk_1311, AddressOfExpr target_8) {
		target_8.getOperand().(ValueFieldAccess).getTarget().getName()="slock"
		and target_8.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
		and target_8.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_1311
		and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
}

from Function func, Variable vsk_1311, Variable vres_1312, Parameter vbuf_1309, ExprStmt target_2, VariableAccess target_3, VariableAccess target_4, FunctionCall target_5, NotExpr target_6, ExprStmt target_7, AddressOfExpr target_8
where
not func_0(vsk_1311, vres_1312, vbuf_1309, target_6, target_7, target_8)
and func_2(vres_1312, target_6, target_2)
and func_3(vsk_1311, target_3)
and func_4(vbuf_1309, target_4)
and func_5(vsk_1311, vbuf_1309, target_5)
and func_6(vsk_1311, target_6)
and func_7(vsk_1311, vres_1312, vbuf_1309, target_7)
and func_8(vsk_1311, target_8)
and vsk_1311.getType().hasName("sock *")
and vres_1312.getType().hasName("u32")
and vbuf_1309.getType().hasName("sk_buff *")
and vsk_1311.(LocalVariable).getFunction() = func
and vres_1312.(LocalVariable).getFunction() = func
and vbuf_1309.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
