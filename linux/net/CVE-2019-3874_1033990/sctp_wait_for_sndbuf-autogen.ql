/**
 * @name linux-1033990ac5b2ab6cee93734cb6d301aa3a35bcaa-sctp_wait_for_sndbuf
 * @id cpp/linux/1033990ac5b2ab6cee93734cb6d301aa3a35bcaa/sctp-wait-for-sndbuf
 * @description linux-1033990ac5b2ab6cee93734cb6d301aa3a35bcaa-net/sctp/socket.c-sctp_wait_for_sndbuf CVE-2019-3874
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsk_8910, LogicalOrExpr target_4) {
	exists(FunctionCall target_0 |
		target_0.getTarget().hasName("sk_under_memory_pressure")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vsk_8910
		and target_0.getParent().(IfStmt).getThen() instanceof BreakStmt
		and target_4.getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vsk_8910, RelationalOperation target_3) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(FunctionCall).getTarget().hasName("sk_mem_reclaim")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_8910
		and target_1.getParent().(IfStmt).getCondition()=target_3)
}

predicate func_2(Parameter vmsg_len_8908, Variable vsk_8910, RelationalOperation target_3, ExprStmt target_5) {
	exists(IfStmt target_2 |
		target_2.getCondition().(LogicalAndExpr).getAnOperand() instanceof RelationalOperation
		and target_2.getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getTarget().hasName("sk_wmem_schedule")
		and target_2.getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_8910
		and target_2.getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vmsg_len_8908
		and target_3.getLesserOperand().(VariableAccess).getLocation().isBefore(target_2.getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
		and target_2.getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Parameter vmsg_len_8908, Parameter vasoc_8907, RelationalOperation target_3) {
		 (target_3 instanceof GEExpr or target_3 instanceof LEExpr)
		and target_3.getLesserOperand().(VariableAccess).getTarget()=vmsg_len_8908
		and target_3.getGreaterOperand().(FunctionCall).getTarget().hasName("sctp_wspace")
		and target_3.getGreaterOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vasoc_8907
		and target_3.getParent().(IfStmt).getThen() instanceof BreakStmt
}

predicate func_4(Variable vsk_8910, Parameter vasoc_8907, LogicalOrExpr target_4) {
		target_4.getAnOperand().(PointerFieldAccess).getTarget().getName()="sk_err"
		and target_4.getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_8910
		and target_4.getAnOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getTarget().getName()="state"
		and target_4.getAnOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vasoc_8907
}

predicate func_5(Variable vsk_8910, ExprStmt target_5) {
		target_5.getExpr().(FunctionCall).getTarget().hasName("release_sock")
		and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_8910
}

from Function func, Parameter vmsg_len_8908, Variable vsk_8910, Parameter vasoc_8907, RelationalOperation target_3, LogicalOrExpr target_4, ExprStmt target_5
where
not func_0(vsk_8910, target_4)
and not func_1(vsk_8910, target_3)
and not func_2(vmsg_len_8908, vsk_8910, target_3, target_5)
and func_3(vmsg_len_8908, vasoc_8907, target_3)
and func_4(vsk_8910, vasoc_8907, target_4)
and func_5(vsk_8910, target_5)
and vmsg_len_8908.getType().hasName("size_t")
and vsk_8910.getType().hasName("sock *")
and vasoc_8907.getType().hasName("sctp_association *")
and vmsg_len_8908.getFunction() = func
and vsk_8910.(LocalVariable).getFunction() = func
and vasoc_8907.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
