/**
 * @name linux-363bee27e258-aio_poll_complete_work
 * @id cpp/linux/363bee27e258/aio-poll-complete-work
 * @description linux-363bee27e258-aio_poll_complete_work CVE-2021-39698
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vreq_1624, PointerFieldAccess target_0) {
		target_0.getTarget().getName()="done"
		and target_0.getQualifier().(VariableAccess).getTarget()=vreq_1624
}

predicate func_2(Variable vreq_1624, FunctionCall target_2) {
		target_2.getTarget().hasName("add_wait_queue")
		and not target_2.getTarget().hasName("spin_lock")
		and target_2.getArgument(0).(PointerFieldAccess).getTarget().getName()="head"
		and target_2.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
		and target_2.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="wait"
		and target_2.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
}

predicate func_3(Variable vreq_1624, Function func) {
	exists(ExprStmt target_3 |
		target_3.getExpr().(FunctionCall).getTarget().hasName("spin_lock")
		and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="lock"
		and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="head"
		and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_3)
}

/*predicate func_4(Variable vreq_1624) {
	exists(AddressOfExpr target_4 |
		target_4.getOperand().(PointerFieldAccess).getTarget().getName()="lock"
		and target_4.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="head"
		and target_4.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
		and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall)
}

*/
predicate func_5(Variable vreq_1624, LogicalAndExpr target_12, ExprStmt target_13) {
	exists(IfStmt target_5 |
		target_5.getCondition().(PointerFieldAccess).getTarget().getName()="work_need_resched"
		and target_5.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
		and target_5.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("schedule_work")
		and target_5.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="work"
		and target_5.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
		and target_5.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="work_need_resched"
		and target_5.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
		and target_5.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="work_scheduled"
		and target_5.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
		and target_5.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_5
		and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12
		and target_13.getExpr().(PointerDereferenceExpr).getOperand().(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_5.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

/*predicate func_6(Variable vreq_1624) {
	exists(FunctionCall target_6 |
		target_6.getTarget().hasName("schedule_work")
		and target_6.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="work"
		and target_6.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624)
}

*/
predicate func_7(Variable vreq_1624, LogicalAndExpr target_12) {
	exists(ExprStmt target_7 |
		target_7.getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
		and target_7.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="lock"
		and target_7.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="head"
		and target_7.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
		and target_7.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_7
		and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12)
}

predicate func_8(Variable vreq_1624, Function func) {
	exists(ExprStmt target_8 |
		target_8.getExpr().(FunctionCall).getTarget().hasName("list_del_init")
		and target_8.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="entry"
		and target_8.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="wait"
		and target_8.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_8)
}

predicate func_9(Variable vreq_1624, AddressOfExpr target_16, ExprStmt target_17, Function func) {
	exists(ExprStmt target_9 |
		target_9.getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
		and target_9.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="lock"
		and target_9.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="head"
		and target_9.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_9
		and target_16.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_9.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_9.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_17.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_10(Variable vreq_1624, PointerFieldAccess target_10) {
		target_10.getTarget().getName()="head"
		and target_10.getQualifier().(VariableAccess).getTarget()=vreq_1624
		and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_11(Variable vreq_1624, PointerFieldAccess target_11) {
		target_11.getTarget().getName()="wait"
		and target_11.getQualifier().(VariableAccess).getTarget()=vreq_1624
		and target_11.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_12(Function func, LogicalAndExpr target_12) {
		target_12.getAnOperand().(NotExpr).getOperand().(VariableAccess).getTarget().getType().hasName("__poll_t")
		and target_12.getAnOperand().(NotExpr).getOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(DoStmt).getCondition().(Literal).getValue()="0"
		and target_12.getEnclosingFunction() = func
}

predicate func_13(Variable vreq_1624, ExprStmt target_13) {
		target_13.getExpr().(PointerDereferenceExpr).getOperand().(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="cancelled"
		and target_13.getExpr().(PointerDereferenceExpr).getOperand().(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
}

predicate func_16(Variable vreq_1624, AddressOfExpr target_16) {
		target_16.getOperand().(PointerFieldAccess).getTarget().getName()="wait"
		and target_16.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
}

predicate func_17(Variable vreq_1624, ExprStmt target_17) {
		target_17.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="done"
		and target_17.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1624
		and target_17.getExpr().(AssignExpr).getRValue() instanceof EnumConstantAccess
}

from Function func, Variable vreq_1624, PointerFieldAccess target_0, FunctionCall target_2, PointerFieldAccess target_10, PointerFieldAccess target_11, LogicalAndExpr target_12, ExprStmt target_13, AddressOfExpr target_16, ExprStmt target_17
where
func_0(vreq_1624, target_0)
and func_2(vreq_1624, target_2)
and not func_3(vreq_1624, func)
and not func_5(vreq_1624, target_12, target_13)
and not func_7(vreq_1624, target_12)
and not func_8(vreq_1624, func)
and not func_9(vreq_1624, target_16, target_17, func)
and func_10(vreq_1624, target_10)
and func_11(vreq_1624, target_11)
and func_12(func, target_12)
and func_13(vreq_1624, target_13)
and func_16(vreq_1624, target_16)
and func_17(vreq_1624, target_17)
and vreq_1624.getType().hasName("poll_iocb *")
and vreq_1624.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
