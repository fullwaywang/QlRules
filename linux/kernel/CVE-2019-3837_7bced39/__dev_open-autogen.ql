/**
 * @name linux-7bced397510a-__dev_open
 * @id cpp/linux/7bced397510a/--dev-open
 * @description linux-7bced397510a-net/core/dev.c-__dev_open CVE-2019-3837
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(VariableAccess target_1, Function func, ExprStmt target_0) {
		target_0.getExpr().(FunctionCall).getTarget().hasName("net_dmaengine_get")
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vret_1237, ExprStmt target_2, VariableAccess target_1) {
		target_1.getTarget()=vret_1237
		and target_1.getParent().(IfStmt).getThen()=target_2
}

predicate func_2(Function func, ExprStmt target_2) {
		target_2.getExpr().(FunctionCall).getTarget().hasName("clear_bit")
		and target_2.getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="state"
		and target_2.getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("net_device *")
		and target_2.getEnclosingFunction() = func
}

from Function func, Variable vret_1237, ExprStmt target_0, VariableAccess target_1, ExprStmt target_2
where
func_0(target_1, func, target_0)
and func_1(vret_1237, target_2, target_1)
and func_2(func, target_2)
and vret_1237.getType().hasName("int")
and vret_1237.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
