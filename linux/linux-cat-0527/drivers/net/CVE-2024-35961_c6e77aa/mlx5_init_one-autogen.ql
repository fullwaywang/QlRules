/**
 * @name linux-c6e77aa9dd82bc18a89bf49418f8f7e961cfccc8-mlx5_init_one
 * @id cpp/linux/c6e77aa9dd82bc18a89bf49418f8f7e961cfccc8/mlx5-init-one
 * @description linux-c6e77aa9dd82bc18a89bf49418f8f7e961cfccc8-drivers/net/ethernet/mellanox/mlx5/core/main.c-mlx5_init_one CVE-2024-35961
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdevlink_1504, ExprStmt target_2, ExprStmt target_3, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("devl_register")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdevlink_1504
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable verr_1505, Variable vdevlink_1504, ExprStmt target_4, ExprStmt target_2, ReturnStmt target_5, Function func) {
exists(IfStmt target_1 |
	target_1.getCondition().(VariableAccess).getTarget()=verr_1505
	and target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("devl_unregister")
	and target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdevlink_1504
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_4.getLocation())
	and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_1.getCondition().(VariableAccess).getLocation())
	and target_1.getCondition().(VariableAccess).getLocation().isBefore(target_5.getExpr().(VariableAccess).getLocation()))
}

predicate func_2(Variable verr_1505, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1505
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("mlx5_init_one_devl_locked")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("mlx5_core_dev *")
}

predicate func_3(Variable vdevlink_1504, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("devl_lock")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdevlink_1504
}

predicate func_4(Variable vdevlink_1504, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("devl_unlock")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdevlink_1504
}

predicate func_5(Variable verr_1505, ReturnStmt target_5) {
	target_5.getExpr().(VariableAccess).getTarget()=verr_1505
}

from Function func, Variable verr_1505, Variable vdevlink_1504, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, ReturnStmt target_5
where
not func_0(vdevlink_1504, target_2, target_3, func)
and not func_1(verr_1505, vdevlink_1504, target_4, target_2, target_5, func)
and func_2(verr_1505, target_2)
and func_3(vdevlink_1504, target_3)
and func_4(vdevlink_1504, target_4)
and func_5(verr_1505, target_5)
and verr_1505.getType().hasName("int")
and vdevlink_1504.getType().hasName("devlink *")
and verr_1505.(LocalVariable).getFunction() = func
and vdevlink_1504.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
