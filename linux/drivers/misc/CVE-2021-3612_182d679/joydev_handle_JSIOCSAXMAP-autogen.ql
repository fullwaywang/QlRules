/**
 * @name linux-182d679b2298d62bf42bb14b12a8067b8e17b617-joydev_handle_JSIOCSAXMAP
 * @id cpp/linux/182d679b2298d62bf42bb14b12a8067b8e17b617/joydev-handle-jsiocsaxmap
 * @description linux-182d679b2298d62bf42bb14b12a8067b8e17b617-drivers/input/joydev.c-joydev_handle_JSIOCSAXMAP CVE-2021-3612
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vlen_446, Variable vi_449, Parameter vjoydev_445, BlockStmt target_2, ExprStmt target_3, ExprStmt target_4, ExprStmt target_5, RelationalOperation target_1) {
exists(LogicalAndExpr target_0 |
	target_0.getLeftOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vi_449
	and target_0.getLeftOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vlen_446
	and target_0.getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vi_449
	and target_0.getRightOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getTarget().getName()="nabs"
	and target_0.getRightOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vjoydev_445
	and target_0.getParent().(ForStmt).getStmt()=target_2
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_0.getLeftOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation())
	and target_0.getLeftOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation())
	and target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getLeftOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation())
	and target_0.getLeftOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_1.getLesserOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vi_449, Parameter vjoydev_445, BlockStmt target_2, RelationalOperation target_1) {
	 (target_1 instanceof GTExpr or target_1 instanceof LTExpr)
	and target_1.getLesserOperand().(VariableAccess).getTarget()=vi_449
	and target_1.getGreaterOperand().(PointerFieldAccess).getTarget().getName()="nabs"
	and target_1.getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vjoydev_445
	and target_1.getParent().(ForStmt).getStmt()=target_2
}

predicate func_2(Variable vi_449, BlockStmt target_2) {
	target_2.getStmt(0).(IfStmt).getCondition().(RelationalOperation).getGreaterOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("__u8 *")
	and target_2.getStmt(0).(IfStmt).getCondition().(RelationalOperation).getGreaterOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_449
	and target_2.getStmt(0).(IfStmt).getCondition().(RelationalOperation).getLesserOperand().(Literal).getValue()="63"
	and target_2.getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-22"
	and target_2.getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(1).(GotoStmt).getName() ="out"
}

predicate func_3(Parameter vlen_446, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("__u8 *")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("memdup_user")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("void *")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vlen_446
}

predicate func_4(Parameter vlen_446, Parameter vjoydev_445, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("__memcpy")
	and target_4.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="abspam"
	and target_4.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vjoydev_445
	and target_4.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("__u8 *")
	and target_4.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vlen_446
}

predicate func_5(Variable vi_449, ExprStmt target_5) {
	target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vi_449
	and target_5.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

from Function func, Parameter vlen_446, Variable vi_449, Parameter vjoydev_445, RelationalOperation target_1, BlockStmt target_2, ExprStmt target_3, ExprStmt target_4, ExprStmt target_5
where
not func_0(vlen_446, vi_449, vjoydev_445, target_2, target_3, target_4, target_5, target_1)
and func_1(vi_449, vjoydev_445, target_2, target_1)
and func_2(vi_449, target_2)
and func_3(vlen_446, target_3)
and func_4(vlen_446, vjoydev_445, target_4)
and func_5(vi_449, target_5)
and vlen_446.getType().hasName("size_t")
and vi_449.getType().hasName("int")
and vjoydev_445.getType().hasName("joydev *")
and vlen_446.getFunction() = func
and vi_449.(LocalVariable).getFunction() = func
and vjoydev_445.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
