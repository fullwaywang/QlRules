/**
 * @name linux-ca22da2fbd69-tcf_mirred_forward
 * @id cpp/linux/ca22da2fbd69/tcf-mirred-forward
 * @description linux-ca22da2fbd69-tcf_mirred_forward CVE-2022-4269
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vskb_209, Variable verr_211, NotExpr target_2, ExprStmt target_3, ExprStmt target_1) {
	exists(IfStmt target_0 |
		target_0.getCondition().(FunctionCall).getTarget().hasName("is_mirred_nested")
		and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_211
		and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("netif_rx")
		and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskb_209
		and target_0.getElse() instanceof ExprStmt
		and target_0.getParent().(IfStmt).getCondition()=target_2
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vskb_209, Variable verr_211, NotExpr target_2, ExprStmt target_1) {
		target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_211
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("netif_receive_skb")
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskb_209
		and target_1.getParent().(IfStmt).getCondition()=target_2
}

predicate func_2(Function func, NotExpr target_2) {
		target_2.getOperand().(VariableAccess).getTarget().getType().hasName("bool")
		and target_2.getEnclosingFunction() = func
}

predicate func_3(Parameter vskb_209, Variable verr_211, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_211
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("tcf_dev_queue_xmit")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskb_209
}

from Function func, Parameter vskb_209, Variable verr_211, ExprStmt target_1, NotExpr target_2, ExprStmt target_3
where
not func_0(vskb_209, verr_211, target_2, target_3, target_1)
and func_1(vskb_209, verr_211, target_2, target_1)
and func_2(func, target_2)
and func_3(vskb_209, verr_211, target_3)
and vskb_209.getType().hasName("sk_buff *")
and verr_211.getType().hasName("int")
and vskb_209.getFunction() = func
and verr_211.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
