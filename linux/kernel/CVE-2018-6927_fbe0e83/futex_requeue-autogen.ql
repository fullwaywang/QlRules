/**
 * @name linux-fbe0e839d1e22d88810f3ee3e2f1479be4c0aa4a-futex_requeue
 * @id cpp/linux/fbe0e839d1e22d88810f3ee3e2f1479be4c0aa4a/futex-requeue
 * @description linux-fbe0e839d1e22d88810f3ee3e2f1479be4c0aa4a-kernel/futex.c-futex_requeue CVE-2018-6927
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vnr_wake_1871, Parameter vnr_requeue_1871, IfStmt target_1, EqualityOperation target_2, LogicalAndExpr target_3, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(LogicalOrExpr).getLeftOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vnr_wake_1871
	and target_0.getCondition().(LogicalOrExpr).getLeftOperand().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_0.getCondition().(LogicalOrExpr).getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vnr_requeue_1871
	and target_0.getCondition().(LogicalOrExpr).getRightOperand().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-22"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_0.getCondition().(LogicalOrExpr).getLeftOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_2.getLeftOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(LogicalOrExpr).getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_3.getRightOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation()))
}

predicate func_1(Function func, IfStmt target_1) {
	target_1.getCondition().(LogicalAndExpr).getLeftOperand().(NotExpr).getValue()="0"
	and target_1.getCondition().(LogicalAndExpr).getRightOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-38"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Parameter vnr_wake_1871, EqualityOperation target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget()=vnr_wake_1871
	and target_2.getRightOperand().(Literal).getValue()="1"
}

predicate func_3(Parameter vnr_wake_1871, Parameter vnr_requeue_1871, LogicalAndExpr target_3) {
	target_3.getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getRightOperand().(RelationalOperation).getLesserOperand().(SubExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getRightOperand().(RelationalOperation).getLesserOperand().(SubExpr).getRightOperand().(VariableAccess).getTarget()=vnr_wake_1871
	and target_3.getRightOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vnr_requeue_1871
}

from Function func, Parameter vnr_wake_1871, Parameter vnr_requeue_1871, IfStmt target_1, EqualityOperation target_2, LogicalAndExpr target_3
where
not func_0(vnr_wake_1871, vnr_requeue_1871, target_1, target_2, target_3, func)
and func_1(func, target_1)
and func_2(vnr_wake_1871, target_2)
and func_3(vnr_wake_1871, vnr_requeue_1871, target_3)
and vnr_wake_1871.getType().hasName("int")
and vnr_requeue_1871.getType().hasName("int")
and vnr_wake_1871.getFunction() = func
and vnr_requeue_1871.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
