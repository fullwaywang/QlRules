/**
 * @name linux-308b4fc2403b335894592ee9dc212a5e58bb309f-offset_readdir
 * @id cpp/linux/308b4fc2403b335894592ee9dc212a5e58bb309f/offset-readdir
 * @description linux-308b4fc2403b335894592ee9dc212a5e58bb309f-fs/libfs.c-offset_readdir CVE-2024-46701
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vctx_552) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("offset_iterate_dir")
	and target_0.getArgument(0) instanceof FunctionCall
	and target_0.getArgument(1).(VariableAccess).getTarget()=vctx_552
	and target_0.getArgument(2).(VariableAccess).getType().hasName("long")
)
}

predicate func_1(Variable vdir_554, FunctionCall target_1) {
	target_1.getTarget().hasName("d_inode")
	and target_1.getArgument(0).(VariableAccess).getTarget()=vdir_554
	and target_1.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_2(Parameter vfile_552, ReturnStmt target_3, PointerFieldAccess target_2) {
	exists(EQExpr obj_0 | obj_0=target_2.getParent() |
		obj_0.getRightOperand() instanceof FunctionCall
		and obj_0.getParent().(IfStmt).getThen()=target_3
	)
	and target_2.getTarget().getName()="private_data"
	and target_2.getQualifier().(VariableAccess).getTarget()=vfile_552
}

predicate func_3(EqualityOperation target_8, Function func, ReturnStmt target_3) {
	target_3.getExpr().(Literal).getValue()="0"
	and target_3.getParent().(IfStmt).getParent().(IfStmt).getCondition()=target_8
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Parameter vctx_552, VariableAccess target_4) {
	target_4.getTarget()=vctx_552
	and target_4.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_5(Parameter vfile_552, Parameter vctx_552, Function func, IfStmt target_5) {
	exists(EqualityOperation obj_0 | obj_0=target_5.getCondition() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLeftOperand() |
			obj_1.getTarget().getName()="pos"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vctx_552
		)
	)
	and exists(ExprStmt obj_2 | obj_2=target_5.getThen() |
		exists(AssignExpr obj_3 | obj_3=obj_2.getExpr() |
			exists(PointerFieldAccess obj_4 | obj_4=obj_3.getLValue() |
				obj_4.getTarget().getName()="private_data"
				and obj_4.getQualifier().(VariableAccess).getTarget()=vfile_552
			)
			and obj_3.getRValue().(Literal).getValue()="0"
		)
	)
	and exists(IfStmt obj_5 | obj_5=target_5.getElse() |
		exists(EqualityOperation obj_6 | obj_6=obj_5.getCondition() |
			exists(PointerFieldAccess obj_7 | obj_7=obj_6.getLeftOperand() |
				obj_7.getTarget().getName()="private_data"
				and obj_7.getQualifier().(VariableAccess).getTarget()=vfile_552
			)
			and exists(FunctionCall obj_8 | obj_8=obj_6.getRightOperand() |
				obj_8.getTarget().hasName("ERR_PTR")
				and obj_8.getArgument(0).(UnaryMinusExpr).getValue()="-2"
			)
		)
		and obj_5.getThen() instanceof ReturnStmt
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

predicate func_6(Parameter vfile_552, Parameter vctx_552, AssignExpr target_6) {
	exists(PointerFieldAccess obj_0 | obj_0=target_6.getLValue() |
		obj_0.getTarget().getName()="private_data"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vfile_552
	)
	and exists(FunctionCall obj_1 | obj_1=target_6.getRValue() |
		obj_1.getTarget().hasName("offset_iterate_dir")
		and obj_1.getArgument(0) instanceof FunctionCall
		and obj_1.getArgument(1).(VariableAccess).getTarget()=vctx_552
	)
}

predicate func_7(Function func, ReturnStmt target_7) {
	target_7.getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_7
}

predicate func_8(Parameter vctx_552, EqualityOperation target_8) {
	exists(PointerFieldAccess obj_0 | obj_0=target_8.getLeftOperand() |
		obj_0.getTarget().getName()="pos"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vctx_552
	)
	and target_8.getRightOperand() instanceof EnumConstantAccess
}

from Function func, Parameter vfile_552, Parameter vctx_552, Variable vdir_554, FunctionCall target_1, PointerFieldAccess target_2, ReturnStmt target_3, VariableAccess target_4, IfStmt target_5, AssignExpr target_6, ReturnStmt target_7, EqualityOperation target_8
where
not func_0(vctx_552)
and func_1(vdir_554, target_1)
and func_2(vfile_552, target_3, target_2)
and func_3(target_8, func, target_3)
and func_4(vctx_552, target_4)
and func_5(vfile_552, vctx_552, func, target_5)
and func_6(vfile_552, vctx_552, target_6)
and func_7(func, target_7)
and func_8(vctx_552, target_8)
and vfile_552.getType().hasName("file *")
and vctx_552.getType().hasName("dir_context *")
and vdir_554.getType().hasName("dentry *")
and vfile_552.getFunction() = func
and vctx_552.getFunction() = func
and vdir_554.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
