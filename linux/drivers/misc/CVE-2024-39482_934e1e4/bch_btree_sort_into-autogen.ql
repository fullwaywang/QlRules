/**
 * @name linux-934e1e4331859183a861f396d7dfaf33cb5afb02-bch_btree_sort_into
 * @id cpp/linux/934e1e4331859183a861f396d7dfaf33cb5afb02/bch-btree-sort-into
 * @description linux-934e1e4331859183a861f396d7dfaf33cb5afb02-drivers/md/bcache/bset.c-bch_btree_sort_into CVE-2024-39482
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Variable viter_1326, Parameter vb_1322, FunctionCall target_1) {
	target_1.getTarget().hasName("bch_btree_iter_init")
	and not target_1.getTarget().hasName("bch_btree_iter_stack_init")
	and target_1.getArgument(0).(VariableAccess).getTarget()=vb_1322
	and target_1.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=viter_1326
	and target_1.getArgument(2).(Literal).getValue()="0"
}

predicate func_2(Variable viter_1326, AddressOfExpr target_4, AddressOfExpr target_5) {
exists(ValueFieldAccess target_2 |
	target_2.getTarget().getName()="iter"
	and target_2.getQualifier().(VariableAccess).getTarget()=viter_1326
	and target_4.getOperand().(VariableAccess).getLocation().isBefore(target_2.getQualifier().(VariableAccess).getLocation())
	and target_2.getQualifier().(VariableAccess).getLocation().isBefore(target_5.getOperand().(VariableAccess).getLocation())
)
}

predicate func_3(Variable viter_1326, Parameter vb_1322, VariableAccess target_3) {
	exists(AddressOfExpr obj_0 | obj_0=target_3.getParent() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getParent() |
			exists(ExprStmt obj_2 | obj_2=obj_1.getParent() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getArgument(1) |
						exists(PointerFieldAccess obj_5 | obj_5=obj_4.getQualifier() |
							obj_5.getTarget().getName()="set"
							and obj_5.getQualifier().(VariableAccess).getTarget().getType().hasName("btree_keys *")
						)
						and obj_4.getTarget().getName()="data"
					)
					and obj_3.getTarget().hasName("btree_mergesort")
					and obj_3.getArgument(0).(VariableAccess).getTarget()=vb_1322
				)
			)
		)
	)
	and target_3.getTarget()=viter_1326
}

predicate func_4(Variable viter_1326, AddressOfExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget()=viter_1326
}

predicate func_5(Variable viter_1326, AddressOfExpr target_5) {
	target_5.getOperand().(VariableAccess).getTarget()=viter_1326
}

from Function func, Variable viter_1326, Parameter vb_1322, FunctionCall target_1, VariableAccess target_3, AddressOfExpr target_4, AddressOfExpr target_5
where
func_1(viter_1326, vb_1322, target_1)
and not func_2(viter_1326, target_4, target_5)
and func_3(viter_1326, vb_1322, target_3)
and func_4(viter_1326, target_4)
and func_5(viter_1326, target_5)
and viter_1326.getType().hasName("btree_iter")
and vb_1322.getType().hasName("btree_keys *")
and viter_1326.(LocalVariable).getFunction() = func
and vb_1322.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
