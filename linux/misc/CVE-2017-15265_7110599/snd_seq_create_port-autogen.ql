/**
 * @name linux-71105998845fb012937332fe2e806d443c09e026-snd_seq_create_port
 * @id cpp/linux/71105998845fb012937332fe2e806d443c09e026/snd-seq-create-port
 * @description linux-71105998845fb012937332fe2e806d443c09e026-sound/core/seq/seq_ports.c-snd_seq_create_port CVE-2017-15265
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vnew_port_130, Variable vnum_131, ExprStmt target_2, ExprStmt target_0) {
	target_0.getExpr().(FunctionCall).getTarget().hasName("sprintf")
	and target_0.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="name"
	and target_0.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnew_port_130
	and target_0.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="port-%d"
	and target_0.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vnum_131
	and target_2.getLocation().isBefore(target_0.getLocation())
}

predicate func_1(Variable vnew_port_130, ExprStmt target_3, AddressOfExpr target_4, AddressOfExpr target_5, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("atomic_inc")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="use_lock"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnew_port_130
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_3.getLocation())
	and target_4.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Function func, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="ports_mutex"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("snd_seq_client *")
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vnum_131, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vnum_131
	and target_3.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(RelationalOperation).getLesserOperand().(Literal).getValue()="0"
	and target_3.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getThen().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getElse().(Literal).getValue()="0"
}

predicate func_4(Variable vnew_port_130, AddressOfExpr target_4) {
	target_4.getOperand().(PointerFieldAccess).getTarget().getName()="c_dest"
	and target_4.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnew_port_130
}

predicate func_5(Variable vnew_port_130, AddressOfExpr target_5) {
	target_5.getOperand().(PointerFieldAccess).getTarget().getName()="list"
	and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnew_port_130
}

from Function func, Variable vnew_port_130, Variable vnum_131, ExprStmt target_0, ExprStmt target_2, ExprStmt target_3, AddressOfExpr target_4, AddressOfExpr target_5
where
func_0(vnew_port_130, vnum_131, target_2, target_0)
and not func_1(vnew_port_130, target_3, target_4, target_5, func)
and func_2(func, target_2)
and func_3(vnum_131, target_3)
and func_4(vnew_port_130, target_4)
and func_5(vnew_port_130, target_5)
and vnew_port_130.getType().hasName("snd_seq_client_port *")
and vnum_131.getType().hasName("int")
and vnew_port_130.(LocalVariable).getFunction() = func
and vnum_131.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
