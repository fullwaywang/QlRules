/**
 * @name linux-6c21e066f9256ea1df6f88768f6ae1080b7cf509-do_mbind
 * @id cpp/linux/6c21e066f9256ea1df6f88768f6ae1080b7cf509/do-mbind
 * @description linux-6c21e066f9256ea1df6f88768f6ae1080b7cf509-mm/mempolicy.c-do_mbind CVE-2023-4611
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vstart_1248, Variable vmm_1252, Variable vvmi_1254, ExprStmt target_2, AddExpr target_3, ExprStmt target_4, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("vma_iter_init")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vvmi_1254
	and target_0.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vmm_1252
	and target_0.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vstart_1248
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
	and target_3.getLeftOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation())
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation()))
}

predicate func_1(Variable vvma_1253, Variable vvmi_1254, Variable vend_1256, ExprStmt target_2, AddressOfExpr target_7, EqualityOperation target_8, Function func) {
exists(WhileStmt target_1 |
	target_1.getCondition().(EqualityOperation).getLeftOperand().(AssignExpr).getLValue().(VariableAccess).getTarget()=vvma_1253
	and target_1.getCondition().(EqualityOperation).getLeftOperand().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("vma_find")
	and target_1.getCondition().(EqualityOperation).getLeftOperand().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vvmi_1254
	and target_1.getCondition().(EqualityOperation).getLeftOperand().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vend_1256
	and target_1.getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_1.getStmt().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("vma_start_write")
	and target_1.getStmt().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvma_1253
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_2.getLocation())
	and target_1.getCondition().(EqualityOperation).getLeftOperand().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_7.getOperand().(VariableAccess).getLocation())
	and target_8.getLeftOperand().(VariableAccess).getLocation().isBefore(target_1.getCondition().(EqualityOperation).getLeftOperand().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation()))
}

predicate func_2(Parameter vstart_1248, Variable vmm_1252, Variable vend_1256, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("queue_pages_range")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmm_1252
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vstart_1248
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vend_1256
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("nodemask_t *")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(BitwiseOrExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(BitwiseOrExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="32"
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(5).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("list_head")
}

predicate func_3(Parameter vstart_1248, AddExpr target_3) {
	target_3.getLeftOperand().(VariableAccess).getTarget()=vstart_1248
	and target_3.getRightOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__dynamic_pr_debug")
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("_ddebug")
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="mempolicy: mbind %lx-%lx mode:%d flags:%d nodes:%lx\n"
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vstart_1248
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("unsigned short")
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(5).(VariableAccess).getTarget().getType().hasName("unsigned short")
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getCondition().(VariableAccess).getTarget().getType().hasName("nodemask_t *")
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getThen().(ArrayExpr).getArrayBase().(ValueFieldAccess).getTarget().getName()="bits"
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getThen().(ArrayExpr).getArrayBase().(ValueFieldAccess).getQualifier().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget().getType().hasName("nodemask_t *")
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getThen().(ArrayExpr).getArrayOffset() instanceof Literal
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(6).(ConditionalExpr).getElse().(UnaryMinusExpr).getValue()="-1"
}

predicate func_4(Variable vmm_1252, VariableAccess target_9, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("mmap_write_unlock")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmm_1252
	and target_4.getParent().(IfStmt).getCondition()=target_9
}

predicate func_7(Parameter vstart_1248, Variable vmm_1252, Variable vvmi_1254, AddressOfExpr target_7) {
	target_7.getOperand().(VariableAccess).getTarget()=vvmi_1254
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("vma_iter_init")
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vmm_1252
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vstart_1248
}

predicate func_8(Parameter vstart_1248, Variable vend_1256, EqualityOperation target_8) {
	target_8.getLeftOperand().(VariableAccess).getTarget()=vend_1256
	and target_8.getRightOperand().(VariableAccess).getTarget()=vstart_1248
}

predicate func_9(Variable verr_1257, ExprStmt target_4, VariableAccess target_9) {
	target_9.getTarget()=verr_1257
	and target_9.getParent().(IfStmt).getThen()=target_4
}

from Function func, Parameter vstart_1248, Variable vmm_1252, Variable vvma_1253, Variable vvmi_1254, Variable vend_1256, Variable verr_1257, ExprStmt target_2, AddExpr target_3, ExprStmt target_4, AddressOfExpr target_7, EqualityOperation target_8, VariableAccess target_9
where
not func_0(vstart_1248, vmm_1252, vvmi_1254, target_2, target_3, target_4, func)
and not func_1(vvma_1253, vvmi_1254, vend_1256, target_2, target_7, target_8, func)
and func_2(vstart_1248, vmm_1252, vend_1256, target_2)
and func_3(vstart_1248, target_3)
and func_4(vmm_1252, target_9, target_4)
and func_7(vstart_1248, vmm_1252, vvmi_1254, target_7)
and func_8(vstart_1248, vend_1256, target_8)
and func_9(verr_1257, target_4, target_9)
and vstart_1248.getType().hasName("unsigned long")
and vmm_1252.getType().hasName("mm_struct *")
and vvma_1253.getType().hasName("vm_area_struct *")
and vvmi_1254.getType().hasName("vma_iterator")
and vend_1256.getType().hasName("unsigned long")
and verr_1257.getType().hasName("int")
and vstart_1248.getFunction() = func
and vmm_1252.(LocalVariable).getFunction() = func
and vvma_1253.(LocalVariable).getFunction() = func
and vvmi_1254.(LocalVariable).getFunction() = func
and vend_1256.(LocalVariable).getFunction() = func
and verr_1257.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
