/**
 * @name linux-7d267278a9ece963d77eefec61630223fce08c6c-unix_release_sock
 * @id cpp/linux/7d267278a9ece963d77eefec61630223fce08c6c/unix-release-sock
 * @description linux-7d267278a9ece963d77eefec61630223fce08c6c-net/unix/af_unix.c-unix_release_sock CVE-2013-7446
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsk_398, Variable vskpair_402, EqualityOperation target_1, AddressOfExpr target_2, ExprStmt target_3, ExprStmt target_4, ExprStmt target_5) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("unix_dgram_peer_wake_disconnect")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_398
	and target_0.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vskpair_402
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vskpair_402, EqualityOperation target_1) {
	target_1.getLeftOperand().(VariableAccess).getTarget()=vskpair_402
	and target_1.getRightOperand().(Literal).getValue()="0"
}

predicate func_2(Parameter vsk_398, AddressOfExpr target_2) {
	target_2.getOperand().(PointerFieldAccess).getTarget().getName()="sk_receive_queue"
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_398
	and target_2.getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("skb_queue_empty")
}

predicate func_3(Parameter vsk_398, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="peer"
	and target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("unix_sk")
	and target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_398
	and target_3.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

predicate func_4(Variable vskpair_402, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("sk_wake_async")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskpair_402
	and target_4.getExpr().(FunctionCall).getArgument(2).(BitwiseOrExpr).getValue()="131078"
}

predicate func_5(Variable vskpair_402, ExprStmt target_5) {
	target_5.getExpr().(FunctionCall).getTarget().hasName("sock_put")
	and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskpair_402
}

from Function func, Parameter vsk_398, Variable vskpair_402, EqualityOperation target_1, AddressOfExpr target_2, ExprStmt target_3, ExprStmt target_4, ExprStmt target_5
where
not func_0(vsk_398, vskpair_402, target_1, target_2, target_3, target_4, target_5)
and func_1(vskpair_402, target_1)
and func_2(vsk_398, target_2)
and func_3(vsk_398, target_3)
and func_4(vskpair_402, target_4)
and func_5(vskpair_402, target_5)
and vsk_398.getType().hasName("sock *")
and vskpair_402.getType().hasName("sock *")
and vsk_398.getFunction() = func
and vskpair_402.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
