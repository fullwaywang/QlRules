/**
 * @name linux-7b439aaa62fee474a0d84d67a25f4984467e7b95-qcom_pmic_get
 * @id cpp/linux/7b439aaa62fee474a0d84d67a25f4984467e7b95/qcom-pmic-get
 * @description linux-7b439aaa62fee474a0d84d67a25f4984467e7b95-drivers/mfd/qcom-spmi-pmic.c-qcom_pmic_get CVE-2023-52765
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsdev_204, Parameter vdev_202, FunctionCall target_0) {
	target_0.getTarget().hasName("qcom_pmic_get_base_usid")
	and not target_0.getTarget().hasName("to_spmi_device")
	and target_0.getArgument(0).(PointerFieldAccess).getTarget().getName()="parent"
	and target_0.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_202
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsdev_204
}

predicate func_1(Variable vsdev_204, Function func, IfStmt target_1) {
	target_1.getCondition().(FunctionCall).getTarget().hasName("IS_ERR")
	and target_1.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsdev_204
	and target_1.getThen().(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("ERR_CAST")
	and target_1.getThen().(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsdev_204
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

from Function func, Variable vsdev_204, Parameter vdev_202, FunctionCall target_0, IfStmt target_1
where
func_0(vsdev_204, vdev_202, target_0)
and func_1(vsdev_204, func, target_1)
and vsdev_204.getType().hasName("spmi_device *")
and vdev_202.getType().hasName("device *")
and vsdev_204.(LocalVariable).getFunction() = func
and vdev_202.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
