/**
 * @name linux-353050be4c19e102178ccc05988101887c25ae53-bpf_map_mmap
 * @id cpp/linux/353050be4c19e102178ccc05988101887c25ae53/bpf-map-mmap
 * @description linux-353050be4c19e102178ccc05988101887c25ae53-kernel/bpf/syscall.c-bpf_map_mmap CVE-2021-4001
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vmap_630, AddressOfExpr target_3) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("bpf_map_write_active_inc")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vmap_630
	and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vmap_630, VariableAccess target_1) {
	target_1.getTarget()=vmap_630
}

predicate func_2(Variable vmap_630, PostfixIncrExpr target_2) {
	target_2.getOperand().(PointerFieldAccess).getTarget().getName()="writecnt"
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmap_630
}

predicate func_3(Variable vmap_630, AddressOfExpr target_3) {
	target_3.getOperand().(PointerFieldAccess).getTarget().getName()="freeze_mutex"
	and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmap_630
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
}

from Function func, Variable vmap_630, VariableAccess target_1, PostfixIncrExpr target_2, AddressOfExpr target_3
where
not func_0(vmap_630, target_3)
and func_1(vmap_630, target_1)
and func_2(vmap_630, target_2)
and func_3(vmap_630, target_3)
and vmap_630.getType().hasName("bpf_map *")
and vmap_630.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
