/**
 * @name linux-3bcd6c7eaa53b56c3f584da46a1f7652e759d0e5-rxrpc_add_conn_to_bundle
 * @id cpp/linux/3bcd6c7eaa53b56c3f584da46a1f7652e759d0e5/rxrpc-add-conn-to-bundle
 * @description linux-3bcd6c7eaa53b56c3f584da46a1f7652e759d0e5-net/rxrpc/conn_client.c-rxrpc_add_conn_to_bundle CVE-2023-2006
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vbundle_397, NotExpr target_1, ExprStmt target_2, ExprStmt target_3) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("atomic_inc")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="active"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbundle_397
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_2.getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Function func, NotExpr target_1) {
	target_1.getOperand().(FunctionCall).getTarget().hasName("rxrpc_may_reuse_conn")
	and target_1.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("rxrpc_connection *")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Parameter vbundle_397, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("rxrpc_connection *")
	and target_2.getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="conns"
	and target_2.getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbundle_397
	and target_2.getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_3(Parameter vbundle_397, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="conns"
	and target_3.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbundle_397
	and target_3.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("rxrpc_connection *")
}

from Function func, Parameter vbundle_397, NotExpr target_1, ExprStmt target_2, ExprStmt target_3
where
not func_0(vbundle_397, target_1, target_2, target_3)
and func_1(func, target_1)
and func_2(vbundle_397, target_2)
and func_3(vbundle_397, target_3)
and vbundle_397.getType().hasName("rxrpc_bundle *")
and vbundle_397.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
