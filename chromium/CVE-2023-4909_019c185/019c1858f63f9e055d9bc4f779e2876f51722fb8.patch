commit 019c1858f63f9e055d9bc4f779e2876f51722fb8	019c1858f63f9e055d9bc4f779e2876f51722fb8
Author: Haxatron Sec <haxatron1@gmail.com>
Date:   Mon Jul 17 20:40:55 2023 +0000

    Add clickjacking delay to interstitial proceed buttons.
    
    This patch adds a 500ms delay before interstitial proceed button accepts "click" input events. This also handles edge cases where the interstitial page is loaded but is not currently in focus to the user.
    
    Bug: 1463293
    Change-Id: Ib709193db6671bf21d050cf527f4532d09026a72
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4678707
    Reviewed-by: Carlos IL <carlosil@chromium.org>
    Commit-Queue: Carlos IL <carlosil@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1171359}

diff --git a/AUTHORS b/AUTHORS
index d7f489e02a084..30a2847b85e05 100644
--- a/AUTHORS
+++ b/AUTHORS
@@ -161,6 +161,7 @@ Ashutosh  <codingtosh@gmail.com>
 Asish Singh <asish.singh@samsung.com>
 Attila Dusnoki <dati91@gmail.com>
 Avinaash Doreswamy <avi.nitk@samsung.com>
+Axel Chong <haxatron1@gmail.com>
 Ayush Dubey <dubeyaayush07@gmail.com>
 Ayush Khandelwal <k.ayush@samsung.com>
 Azhar Shaikh <azhar.shaikh@intel.com>
diff --git a/chrome/browser/ssl/https_only_mode_browsertest.cc b/chrome/browser/ssl/https_only_mode_browsertest.cc
index 4c636ebfb4eba..7e794901f49e0 100644
--- a/chrome/browser/ssl/https_only_mode_browsertest.cc
+++ b/chrome/browser/ssl/https_only_mode_browsertest.cc
@@ -1259,3 +1259,52 @@ IN_PROC_BROWSER_TEST_F(HttpsOnlyModeTestSubresourceNotifications,
       tab->GetPrimaryMainFrame()->GetStoragePartition()));
   EXPECT_FALSE(tab->GetSendSubresourceNotification());
 }
+
+// Tests the clickjacking delay for proceed buttons on HTTPS-Only interstitials.
+// This tests specifically for a failed click that occured before the delay passed.
+IN_PROC_BROWSER_TEST_F(HttpsOnlyModeBrowserTest,
+                       InterstitialClickjacking_FailedClick) {
+  GURL http_url = http_server()->GetURL("bad-https.test", "/simple.html");
+
+  auto* tab = browser()->tab_strip_model()->GetActiveWebContents();
+  EXPECT_FALSE(content::NavigateToURL(tab, http_url));
+  EXPECT_TRUE(chrome_browser_interstitials::IsShowingHttpsFirstModeInterstitial(
+      tab));
+
+  std::string SIMULATED_CLICK_EVENT = "document.getElementById('proceed-button').click();";
+
+  // Send a simulated 'click' event to the proceed button on the interstitial.
+  // The interstitial page should still be loaded as the click occured before the delay
+  // has passed.
+  EXPECT_EQ(true, content::ExecJs(tab, SIMULATED_CLICK_EVENT));
+  EXPECT_TRUE(chrome_browser_interstitials::IsShowingHttpsFirstModeInterstitial(
+      tab));
+}
+
+// Tests the clickjacking delay for proceed buttons on HTTPS-Only interstitials.
+// This tests specifically for a successful click that passed the delay.
+IN_PROC_BROWSER_TEST_F(HttpsOnlyModeBrowserTest,
+                       InterstitialClickjacking_SuccessfulClick) {
+  GURL http_url = http_server()->GetURL("bad-https.test", "/simple.html");
+
+  auto* tab = browser()->tab_strip_model()->GetActiveWebContents();
+  EXPECT_FALSE(content::NavigateToURL(tab, http_url));
+  EXPECT_TRUE(chrome_browser_interstitials::IsShowingHttpsFirstModeInterstitial(
+      tab));
+
+  std::string SIMULATED_CLICK_EVENT = "document.getElementById('proceed-button').click();";
+
+  // Send a delayed simulated 'click' event to the proceed button on the interstitial.
+  // The interstitial page should successfully proceed.
+  content::TestNavigationObserver nav_observer(tab, 1);
+  // Use setInterval instead of setTimeout so that test can retry the click
+  // and prevent flakiness if test runner loses focus.
+  EXPECT_EQ(true, content::ExecJs(tab,
+      "setInterval(() => {" +
+      SIMULATED_CLICK_EVENT +
+      "}, 550);"));
+  nav_observer.Wait();
+  EXPECT_EQ(http_url, tab->GetLastCommittedURL());
+}
+
+
diff --git a/components/security_interstitials/core/browser/resources/interstitial_large.js b/components/security_interstitials/core/browser/resources/interstitial_large.js
index b82ad90a188fd..9eb8876dd0ef0 100644
--- a/components/security_interstitials/core/browser/resources/interstitial_large.js
+++ b/components/security_interstitials/core/browser/resources/interstitial_large.js
@@ -8,6 +8,25 @@
 let expandedDetails = false;
 let keyPressState = 0;
 
+// Only begin clickjacking delay tracking when the DOM contents have
+// fully loaded.
+let timePageLastFocused = null;
+
+// The amount of delay (in ms) before the proceed button accepts
+// a "click" event.
+const PROCEED_CLICKJACKING_DELAY = 500;
+
+/**
+ * This checks whether the clickjacking delay has been passed
+ * since page was first loaded or last focused.
+ * @return {boolean} Whether the clickjacking delay has passed or not.
+ */
+function clickjackingDelayHasPassed() {
+  return (timePageLastFocused != null &&
+      (window.performance.now() - timePageLastFocused >=
+      PROCEED_CLICKJACKING_DELAY));
+}
+
 /**
  * This allows errors to be skippped by typing a secret phrase into the page.
  * @param {string} e The key that was just pressed.
@@ -157,7 +176,9 @@ function setupEvents() {
     proceedButton.classList.remove(HIDDEN_CLASS);
     proceedButton.textContent = loadTimeData.getString('proceedButtonText');
     proceedButton.addEventListener('click', function(event) {
-      sendCommand(SecurityInterstitialCommandId.CMD_PROCEED);
+      if (clickjackingDelayHasPassed()) {
+        sendCommand(SecurityInterstitialCommandId.CMD_PROCEED);
+      }
     });
   }
   if (lookalike) {
@@ -177,7 +198,9 @@ function setupEvents() {
         document.querySelector(billing ? '#proceed-button' : '#proceed-link');
     // Captive portal page isn't overridable.
     overrideElement.addEventListener('click', function(event) {
-      sendCommand(SecurityInterstitialCommandId.CMD_PROCEED);
+      if (!billing || clickjackingDelayHasPassed()) {
+        sendCommand(SecurityInterstitialCommandId.CMD_PROCEED);
+      }
     });
 
     if (ssl) {
@@ -263,6 +286,11 @@ function setupEvents() {
   setupEnhancedProtectionMessage();
   setupSSLDebuggingInfo();
   document.addEventListener('keypress', handleKeypress);
+
+  // Begin tracking for the clickjacking delay.
+  timePageLastFocused = window.performance.now();
+  window.addEventListener('focus', () =>
+      timePageLastFocused = window.performance.now());
 }
 
 document.addEventListener('DOMContentLoaded', setupEvents);
