/**
 * @name linux-db3f3636e4aed2cba3e4e7897a053323f7a62249-pte_to_pagemap_entry
 * @id cpp/linux/db3f3636e4aed2cba3e4e7897a053323f7a62249/pte-to-pagemap-entry
 * @description linux-db3f3636e4aed2cba3e4e7897a053323f7a62249-fs/proc/task_mmu.c-pte_to_pagemap_entry CVE-2022-48802
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(FunctionCall target_4, Function func) {
exists(ExprStmt target_0 |
	exists(BlockStmt obj_0 | obj_0=target_0.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(0)=target_0
			and obj_1.getCondition()=target_4
		)
	)
	and target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("bool")
	and target_0.getEnclosingFunction() = func
)
}

predicate func_1(Variable vpage_1368, ExprStmt target_5) {
exists(LogicalAndExpr target_1 |
	exists(LogicalAndExpr obj_0 | obj_0=target_1.getParent() |
		exists(EqualityOperation obj_1 | obj_1=obj_0.getRightOperand() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getLeftOperand() |
				obj_2.getTarget().hasName("page_mapcount")
				and obj_2.getArgument(0).(VariableAccess).getTarget()=vpage_1368
			)
			and obj_1.getRightOperand().(Literal).getValue()="1"
		)
		and obj_0.getLeftOperand().(VariableAccess).getTarget()=vpage_1368
		and obj_0.getParent().(IfStmt).getThen()=target_5
	)
	and target_1.getLeftOperand().(VariableAccess).getTarget()=vpage_1368
	and target_1.getRightOperand().(NotExpr).getOperand().(VariableAccess).getType().hasName("bool")
)
}

predicate func_2(Variable vpage_1368, Variable ventry_1378, FunctionCall target_4, ExprStmt target_2) {
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("migration_entry_to_page")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=ventry_1378
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vpage_1368
	)
	and target_2.getParent().(IfStmt).getCondition()=target_4
}

predicate func_3(Variable vpage_1368, ExprStmt target_5, VariableAccess target_3) {
	exists(LogicalAndExpr obj_0 | obj_0=target_3.getParent() |
		exists(EqualityOperation obj_1 | obj_1=obj_0.getRightOperand() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getLeftOperand() |
				obj_2.getTarget().hasName("page_mapcount")
				and obj_2.getArgument(0).(VariableAccess).getTarget()=vpage_1368
			)
			and obj_1.getRightOperand().(Literal).getValue()="1"
		)
		and obj_0.getParent().(IfStmt).getThen()=target_5
	)
	and target_3.getTarget()=vpage_1368
}

predicate func_4(Variable ventry_1378, FunctionCall target_4) {
	target_4.getTarget().hasName("is_migration_entry")
	and target_4.getArgument(0).(VariableAccess).getTarget()=ventry_1378
}

predicate func_5(Function func, ExprStmt target_5) {
	exists(AssignOrExpr obj_0 | obj_0=target_5.getExpr() |
		obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("u64")
		and obj_0.getRValue().(BinaryBitwiseOperation).getValue()="72057594037927936"
	)
	and target_5.getEnclosingFunction() = func
}

from Function func, Variable vpage_1368, Variable ventry_1378, ExprStmt target_2, VariableAccess target_3, FunctionCall target_4, ExprStmt target_5
where
not func_0(target_4, func)
and not func_1(vpage_1368, target_5)
and func_2(vpage_1368, ventry_1378, target_4, target_2)
and func_3(vpage_1368, target_5, target_3)
and func_4(ventry_1378, target_4)
and func_5(func, target_5)
and vpage_1368.getType().hasName("page *")
and ventry_1378.getType().hasName("swp_entry_t")
and vpage_1368.(LocalVariable).getFunction() = func
and ventry_1378.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
