/**
 * @name chromium-bb36f739e7e0a3722beeb2744744195c22fd6143-device__usb__DeviceImpl__IsochronousTransferIn
 * @id cpp/chromium/bb36f739e7e0a3722beeb2744744195c22fd6143/deviceusbdeviceimplisochronoustransferin
 * @description chromium-bb36f739e7e0a3722beeb2744744195c22fd6143-services/device/usb/mojo/device_impl.cc-device__usb__DeviceImpl__IsochronousTransferIn CVE-2023-5482
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vpacket_lengths_390, Parameter vcallback_392, ExprStmt target_1, FunctionCall target_2, FunctionCall target_3, Function func) {
exists(IfStmt target_0 |
	exists(NotExpr obj_0 | obj_0=target_0.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().hasName("has_value")
			and obj_1.getQualifier().(VariableAccess).getType().hasName("optional<unsigned int>")
		)
	)
	and exists(BlockStmt obj_2 | obj_2=target_0.getThen() |
		exists(ExprStmt obj_3 | obj_3=obj_2.getStmt(0) |
			exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
				obj_4.getTarget().hasName("ReportBadMessage")
				and obj_4.getArgument(0).(ConstructorCall).getArgument(0).(StringLiteral).getValue()="Invalid isochronous packet lengths."
			)
		)
		and exists(ExprStmt obj_5 | obj_5=obj_2.getStmt(1) |
			exists(FunctionCall obj_6 | obj_6=obj_5.getExpr() |
				exists(FunctionCall obj_7 | obj_7=obj_6.getQualifier() |
					obj_7.getTarget().hasName("move")
					and obj_7.getArgument(0).(VariableAccess).getTarget()=vcallback_392
				)
				and exists(FunctionCall obj_8 | obj_8=obj_6.getArgument(1) |
					obj_8.getTarget().hasName("BuildIsochronousPacketArray")
					and obj_8.getArgument(0).(VariableAccess).getTarget()=vpacket_lengths_390
				)
				and obj_6.getTarget().hasName("Run")
				and obj_6.getArgument(0).(ConstructorCall).getType() instanceof VoidType
			)
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getFollowingStmt() instanceof DeclStmt
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
	and target_2.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_1(Parameter vpacket_lengths_390, Parameter vcallback_392, ExprStmt target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getQualifier() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="device_handle_"
				and obj_2.getQualifier().(ThisExpr).getType() instanceof PointerType
			)
		)
		and exists(FunctionCall obj_3 | obj_3=obj_0.getArgument(3) |
			exists(FunctionCall obj_4 | obj_4=obj_3.getArgument(1) |
				obj_4.getTarget().hasName("move")
				and obj_4.getArgument(0).(VariableAccess).getTarget()=vcallback_392
			)
			and obj_3.getTarget().hasName("BindOnce")
		)
		and obj_0.getTarget().hasName("IsochronousTransferIn")
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("uint8_t")
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vpacket_lengths_390
		and obj_0.getArgument(2).(VariableAccess).getTarget().getType().hasName("uint32_t")
	)
}

predicate func_2(Parameter vcallback_392, FunctionCall target_2) {
	target_2.getTarget().hasName("move")
	and target_2.getArgument(0).(VariableAccess).getTarget()=vcallback_392
}

predicate func_3(Parameter vcallback_392, FunctionCall target_3) {
	target_3.getTarget().hasName("move")
	and target_3.getArgument(0).(VariableAccess).getTarget()=vcallback_392
	and target_3.getParent().(FunctionCall).getParent().(FunctionCall).getArgument(3).(FunctionCall).getTarget().hasName("BindOnce")
}

from Function func, Parameter vpacket_lengths_390, Parameter vcallback_392, ExprStmt target_1, FunctionCall target_2, FunctionCall target_3
where
not func_0(vpacket_lengths_390, vcallback_392, target_1, target_2, target_3, func)
and func_1(vpacket_lengths_390, vcallback_392, target_1)
and func_2(vcallback_392, target_2)
and func_3(vcallback_392, target_3)
and vpacket_lengths_390.getType().hasName("const vector<unsigned int, allocator<unsigned int>> &")
and vcallback_392.getType().hasName("IsochronousTransferInCallback")
and vpacket_lengths_390.getFunction() = func
and vcallback_392.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
