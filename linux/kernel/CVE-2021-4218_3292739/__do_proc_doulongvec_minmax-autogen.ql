/**
 * @name linux-32927393dc1ccd60fb2bdc05b9e8e88753761469-__do_proc_doulongvec_minmax
 * @id cpp/linux/32927393dc1ccd60fb2bdc05b9e8e88753761469/--do-proc-doulongvec-minmax
 * @description linux-32927393dc1ccd60fb2bdc05b9e8e88753761469-kernel/sysctl.c-__do_proc_doulongvec_minmax CVE-2021-4218
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vwrite_1099, Variable vfirst_1106, BlockStmt target_17) {
exists(LogicalAndExpr target_0 |
	target_0.getLeftOperand().(VariableAccess).getTarget()=vwrite_1099
	and target_0.getRightOperand().(VariableAccess).getTarget()=vfirst_1106
	and target_0.getParent().(IfStmt).getThen()=target_17)
}

predicate func_1(Parameter vbuffer_1100, Variable verr_1106, Variable vleft_1107, FunctionCall target_1) {
	target_1.getTarget().hasName("proc_put_char")
	and target_1.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vbuffer_1100
	and target_1.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vleft_1107
	and target_1.getArgument(2).(CharLiteral).getValue()="9"
	and target_1.getParent().(AssignExpr).getRValue() = target_1
	and target_1.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1106
}

predicate func_2(Parameter vbuffer_1100, Variable verr_1106, Variable vleft_1107, Variable vval_1133, FunctionCall target_2) {
	target_2.getTarget().hasName("proc_put_long")
	and target_2.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vbuffer_1100
	and target_2.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vleft_1107
	and target_2.getArgument(2).(VariableAccess).getTarget()=vval_1133
	and target_2.getParent().(AssignExpr).getRValue() = target_2
	and target_2.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1106
}

predicate func_3(Parameter vbuffer_1100, Variable verr_1106, Variable vleft_1107, FunctionCall target_3) {
	target_3.getTarget().hasName("proc_put_char")
	and target_3.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vbuffer_1100
	and target_3.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vleft_1107
	and target_3.getArgument(2).(CharLiteral).getValue()="10"
	and target_3.getParent().(AssignExpr).getRValue() = target_3
	and target_3.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1106
}

predicate func_4(Parameter vbuffer_1100, VariableAccess target_4) {
	target_4.getTarget()=vbuffer_1100
	and target_4.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_5(Parameter vwrite_1099, BlockStmt target_17, VariableAccess target_5) {
	target_5.getTarget()=vwrite_1099
	and target_5.getParent().(IfStmt).getThen()=target_17
}

predicate func_6(Variable vfirst_1106, ReturnStmt target_18, VariableAccess target_6) {
	target_6.getTarget()=vfirst_1106
	and target_6.getParent().(IfStmt).getThen()=target_18
}

predicate func_8(Parameter vbuffer_1100, Variable vleft_1107, Variable vkbuf_1108, AssignExpr target_8) {
	target_8.getLValue().(VariableAccess).getTarget()=vkbuf_1108
	and target_8.getRValue().(FunctionCall).getTarget().hasName("memdup_user_nul")
	and target_8.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbuffer_1100
	and target_8.getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vleft_1107
	and target_8.getParent().(AssignExpr).getRValue() = target_8
	and target_8.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("char *")
}

predicate func_9(Variable vkbuf_1108, VariableAccess target_19, IfStmt target_9) {
	target_9.getCondition().(FunctionCall).getTarget().hasName("IS_ERR")
	and target_9.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vkbuf_1108
	and target_9.getThen().(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("PTR_ERR")
	and target_9.getThen().(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vkbuf_1108
	and target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_19
}

predicate func_10(Variable verr_1106, AssignExpr target_10) {
	target_10.getLValue().(VariableAccess).getTarget()=verr_1106
	and target_10.getRValue() instanceof FunctionCall
}

predicate func_11(Variable verr_1106, NotExpr target_20, IfStmt target_11) {
	target_11.getCondition().(VariableAccess).getTarget()=verr_1106
	and target_11.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_20
}

predicate func_12(Variable verr_1106, AssignExpr target_12) {
	target_12.getLValue().(VariableAccess).getTarget()=verr_1106
	and target_12.getRValue() instanceof FunctionCall
}

predicate func_13(Variable verr_1106, VariableAccess target_22, LogicalAndExpr target_24, IfStmt target_13) {
	target_13.getCondition().(VariableAccess).getTarget()=verr_1106
	and target_13.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_22
	and target_13.getCondition().(VariableAccess).getLocation().isBefore(target_24.getRightOperand().(NotExpr).getOperand().(VariableAccess).getLocation())
}

predicate func_14(Variable verr_1106, AssignExpr target_14) {
	target_14.getLValue().(VariableAccess).getTarget()=verr_1106
	and target_14.getRValue() instanceof FunctionCall
}

predicate func_15(Variable vkbuf_1108, VariableAccess target_5, ExprStmt target_15) {
	target_15.getExpr().(FunctionCall).getTarget().hasName("kfree")
	and target_15.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vkbuf_1108
	and target_15.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_16(Variable vfirst_1106, Variable verr_1106, VariableAccess target_5, IfStmt target_16) {
	target_16.getCondition().(VariableAccess).getTarget()=vfirst_1106
	and target_16.getThen().(ReturnStmt).getExpr().(ConditionalExpr).getCondition().(VariableAccess).getTarget()=verr_1106
	and target_16.getThen().(ReturnStmt).getExpr().(ConditionalExpr).getElse().(UnaryMinusExpr).getValue()="-22"
	and target_16.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_17(Function func, BlockStmt target_17) {
	target_17.getStmt(0) instanceof ExprStmt
	and target_17.getStmt(1) instanceof IfStmt
	and target_17.getEnclosingFunction() = func
}

predicate func_18(Variable verr_1106, ReturnStmt target_18) {
	target_18.getExpr().(ConditionalExpr).getCondition().(VariableAccess).getTarget()=verr_1106
	and target_18.getExpr().(ConditionalExpr).getElse().(UnaryMinusExpr).getValue()="-22"
}

predicate func_19(Parameter vwrite_1099, BlockStmt target_25, VariableAccess target_19) {
	target_19.getTarget()=vwrite_1099
	and target_19.getParent().(IfStmt).getThen()=target_25
}

predicate func_20(Variable vfirst_1106, BlockStmt target_26, NotExpr target_20) {
	target_20.getOperand().(VariableAccess).getTarget()=vfirst_1106
	and target_20.getParent().(IfStmt).getThen()=target_26
}

predicate func_22(Parameter vwrite_1099, BlockStmt target_27, VariableAccess target_22) {
	target_22.getTarget()=vwrite_1099
	and target_22.getParent().(IfStmt).getThen()=target_27
}

predicate func_24(Parameter vwrite_1099, Variable vfirst_1106, Variable verr_1106, Variable vleft_1107, LogicalAndExpr target_24) {
	target_24.getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vwrite_1099
	and target_24.getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vfirst_1106
	and target_24.getLeftOperand().(LogicalAndExpr).getRightOperand().(VariableAccess).getTarget()=vleft_1107
	and target_24.getRightOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=verr_1106
}

predicate func_25(Variable vleft_1107, BlockStmt target_25) {
	target_25.getStmt(0).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("proc_first_pos_non_zero_ignore")
	and target_25.getStmt(0).(IfStmt).getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("loff_t *")
	and target_25.getStmt(0).(IfStmt).getCondition().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("ctl_table *")
	and target_25.getStmt(0).(IfStmt).getThen().(GotoStmt).getName() ="out"
	and target_25.getStmt(1).(IfStmt).getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vleft_1107
	and target_25.getStmt(1).(IfStmt).getCondition().(RelationalOperation).getLesserOperand().(SubExpr).getValue()="4095"
	and target_25.getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vleft_1107
	and target_25.getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(SubExpr).getValue()="4095"
}

predicate func_26(Function func, BlockStmt target_26) {
	target_26.getStmt(0).(ExprStmt).getExpr() instanceof AssignExpr
	and target_26.getStmt(1) instanceof IfStmt
	and target_26.getEnclosingFunction() = func
}

predicate func_27(Variable verr_1106, Variable vleft_1107, Variable vval_1133, BlockStmt target_27) {
	target_27.getStmt(1).(ExprStmt).getExpr().(AssignSubExpr).getLValue().(VariableAccess).getTarget()=vleft_1107
	and target_27.getStmt(1).(ExprStmt).getExpr().(AssignSubExpr).getRValue().(FunctionCall).getTarget().hasName("proc_skip_spaces")
	and target_27.getStmt(1).(ExprStmt).getExpr().(AssignSubExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("char *")
	and target_27.getStmt(2).(IfStmt).getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vleft_1107
	and target_27.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1106
	and target_27.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("proc_get_long")
	and target_27.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("char *")
	and target_27.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vleft_1107
	and target_27.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vval_1133
	and target_27.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("bool")
	and target_27.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_27.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(5).(SizeofExprOperator).getValue()="3"
	and target_27.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(6).(Literal).getValue()="0"
}

from Function func, Parameter vwrite_1099, Parameter vbuffer_1100, Variable vfirst_1106, Variable verr_1106, Variable vleft_1107, Variable vkbuf_1108, Variable vval_1133, FunctionCall target_1, FunctionCall target_2, FunctionCall target_3, VariableAccess target_4, VariableAccess target_5, VariableAccess target_6, AssignExpr target_8, IfStmt target_9, AssignExpr target_10, IfStmt target_11, AssignExpr target_12, IfStmt target_13, AssignExpr target_14, ExprStmt target_15, IfStmt target_16, BlockStmt target_17, ReturnStmt target_18, VariableAccess target_19, NotExpr target_20, VariableAccess target_22, LogicalAndExpr target_24, BlockStmt target_25, BlockStmt target_26, BlockStmt target_27
where
not func_0(vwrite_1099, vfirst_1106, target_17)
and func_1(vbuffer_1100, verr_1106, vleft_1107, target_1)
and func_2(vbuffer_1100, verr_1106, vleft_1107, vval_1133, target_2)
and func_3(vbuffer_1100, verr_1106, vleft_1107, target_3)
and func_4(vbuffer_1100, target_4)
and func_5(vwrite_1099, target_17, target_5)
and func_6(vfirst_1106, target_18, target_6)
and func_8(vbuffer_1100, vleft_1107, vkbuf_1108, target_8)
and func_9(vkbuf_1108, target_19, target_9)
and func_10(verr_1106, target_10)
and func_11(verr_1106, target_20, target_11)
and func_12(verr_1106, target_12)
and func_13(verr_1106, target_22, target_24, target_13)
and func_14(verr_1106, target_14)
and func_15(vkbuf_1108, target_5, target_15)
and func_16(vfirst_1106, verr_1106, target_5, target_16)
and func_17(func, target_17)
and func_18(verr_1106, target_18)
and func_19(vwrite_1099, target_25, target_19)
and func_20(vfirst_1106, target_26, target_20)
and func_22(vwrite_1099, target_27, target_22)
and func_24(vwrite_1099, vfirst_1106, verr_1106, vleft_1107, target_24)
and func_25(vleft_1107, target_25)
and func_26(func, target_26)
and func_27(verr_1106, vleft_1107, vval_1133, target_27)
and vwrite_1099.getType().hasName("int")
and vbuffer_1100.getType().hasName("void *")
and vfirst_1106.getType().hasName("int")
and verr_1106.getType().hasName("int")
and vleft_1107.getType().hasName("size_t")
and vkbuf_1108.getType().hasName("char *")
and vval_1133.getType().hasName("unsigned long")
and vwrite_1099.getFunction() = func
and vbuffer_1100.getFunction() = func
and vfirst_1106.(LocalVariable).getFunction() = func
and verr_1106.(LocalVariable).getFunction() = func
and vleft_1107.(LocalVariable).getFunction() = func
and vkbuf_1108.(LocalVariable).getFunction() = func
and vval_1133.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
