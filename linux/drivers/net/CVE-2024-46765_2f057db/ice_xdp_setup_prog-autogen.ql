/**
 * @name linux-2f057db2fb29bc209c103050647562e60554d3d3-ice_xdp_setup_prog
 * @id cpp/linux/2f057db2fb29bc209c103050647562e60554d3d3/ice-xdp-setup-prog
 * @description linux-2f057db2fb29bc209c103050647562e60554d3d3-drivers/net/ethernet/intel/ice/ice_main.c-ice_xdp_setup_prog CVE-2024-46765
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvsi_2929, BlockStmt target_2, EqualityOperation target_1) {
exists(LogicalOrExpr target_0 |
	exists(ConditionalExpr obj_0 | obj_0=target_0.getRightOperand() |
		exists(LogicalAndExpr obj_1 | obj_1=obj_0.getCondition() |
			exists(LogicalAndExpr obj_2 | obj_2=obj_1.getLeftOperand() |
				exists(LogicalAndExpr obj_3 | obj_3=obj_2.getLeftOperand() |
					obj_3.getLeftOperand().(Literal).getValue()="1"
					and obj_3.getRightOperand().(FunctionCall).getTarget().hasName("__builtin_constant_p")
				)
				and exists(EqualityOperation obj_4 | obj_4=obj_2.getRightOperand() |
					exists(PointerFieldAccess obj_5 | obj_5=obj_4.getLeftOperand() |
						obj_5.getTarget().getName()="state"
						and obj_5.getQualifier().(VariableAccess).getTarget()=vvsi_2929
					)
					and obj_4.getRightOperand().(Literal).getValue()="0"
				)
			)
			and exists(FunctionCall obj_6 | obj_6=obj_1.getRightOperand() |
				exists(PointerDereferenceExpr obj_7 | obj_7=obj_6.getArgument(0) |
					exists(PointerFieldAccess obj_8 | obj_8=obj_7.getOperand() |
						obj_8.getTarget().getName()="state"
						and obj_8.getQualifier().(VariableAccess).getTarget()=vvsi_2929
					)
				)
				and obj_6.getTarget().hasName("__builtin_constant_p")
			)
		)
		and exists(FunctionCall obj_9 | obj_9=obj_0.getThen() |
			exists(PointerFieldAccess obj_10 | obj_10=obj_9.getArgument(1) |
				obj_10.getTarget().getName()="state"
				and obj_10.getQualifier().(VariableAccess).getTarget()=vvsi_2929
			)
			and obj_9.getTarget().hasName("const_test_bit")
		)
		and exists(FunctionCall obj_11 | obj_11=obj_0.getElse() |
			exists(PointerFieldAccess obj_12 | obj_12=obj_11.getArgument(1) |
				obj_12.getTarget().getName()="state"
				and obj_12.getQualifier().(VariableAccess).getTarget()=vvsi_2929
			)
			and obj_11.getTarget().hasName("_test_bit")
		)
	)
	and target_0.getLeftOperand() instanceof EqualityOperation
	and target_0.getParent().(IfStmt).getThen()=target_2
	and target_0.getRightOperand().(ConditionalExpr).getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_1(Parameter vvsi_2929, Parameter vprog_2929, BlockStmt target_2, EqualityOperation target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getLeftOperand() |
		obj_0.getTarget().hasName("ice_is_xdp_ena_vsi")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vvsi_2929
	)
	and target_1.getRightOperand().(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vprog_2929
	and target_1.getParent().(IfStmt).getThen()=target_2
}

predicate func_2(Parameter vvsi_2929, Parameter vprog_2929, BlockStmt target_2) {
	exists(ExprStmt obj_0 | obj_0=target_2.getStmt(0) |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("ice_vsi_assign_bpf_prog")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vvsi_2929
			and obj_1.getArgument(1).(VariableAccess).getTarget()=vprog_2929
		)
	)
	and target_2.getStmt(1).(ReturnStmt).getExpr().(Literal).getValue()="0"
}

from Function func, Parameter vvsi_2929, Parameter vprog_2929, EqualityOperation target_1, BlockStmt target_2
where
not func_0(vvsi_2929, target_2, target_1)
and func_1(vvsi_2929, vprog_2929, target_2, target_1)
and func_2(vvsi_2929, vprog_2929, target_2)
and vvsi_2929.getType().hasName("ice_vsi *")
and vprog_2929.getType().hasName("bpf_prog *")
and vvsi_2929.getFunction() = func
and vprog_2929.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
