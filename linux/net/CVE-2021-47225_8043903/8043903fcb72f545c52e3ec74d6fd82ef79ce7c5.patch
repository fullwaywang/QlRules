commit 8043903fcb72f545c52e3ec74d6fd82ef79ce7c5
Author: Johannes Berg <johannes.berg@intel.com>
Date:   Mon May 17 16:03:23 2021 +0200

    mac80211: fix deadlock in AP/VLAN handling
    
    commit d5befb224edbe53056c2c18999d630dafb4a08b9 upstream.
    
    Syzbot reports that when you have AP_VLAN interfaces that are up
    and close the AP interface they belong to, we get a deadlock. No
    surprise - since we dev_close() them with the wiphy mutex held,
    which goes back into the netdev notifier in cfg80211 and tries to
    acquire the wiphy mutex there.
    
    To fix this, we need to do two things:
     1) prevent changing iftype while AP_VLANs are up, we can't
        easily fix this case since cfg80211 already calls us with
        the wiphy mutex held, but change_interface() is relatively
        rare in drivers anyway, so changing iftype isn't used much
        (and userspace has to fall back to down/change/up anyway)
     2) pull the dev_close() loop over VLANs out of the wiphy mutex
        section in the normal stop case
    
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+452ea4fbbef700ff0a56@syzkaller.appspotmail.com
    Fixes: a05829a7222e ("cfg80211: avoid holding the RTNL when calling the driver")
    Link: https://lore.kernel.org/r/20210517160322.9b8f356c0222.I392cb0e2fa5a1a94cf2e637555d702c7e512c1ff@changeid
    Signed-off-by: Johannes Berg <johannes.berg@intel.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/net/mac80211/iface.c b/net/mac80211/iface.c
index 6f8885766cba..6ebfd484e61d 100644
--- a/net/mac80211/iface.c
+++ b/net/mac80211/iface.c
@@ -475,14 +475,7 @@ static void ieee80211_do_stop(struct ieee80211_sub_if_data *sdata, bool going_do
 				   GFP_KERNEL);
 	}
 
-	/* APs need special treatment */
 	if (sdata->vif.type == NL80211_IFTYPE_AP) {
-		struct ieee80211_sub_if_data *vlan, *tmpsdata;
-
-		/* down all dependent devices, that is VLANs */
-		list_for_each_entry_safe(vlan, tmpsdata, &sdata->u.ap.vlans,
-					 u.vlan.list)
-			dev_close(vlan->dev);
 		WARN_ON(!list_empty(&sdata->u.ap.vlans));
 	} else if (sdata->vif.type == NL80211_IFTYPE_AP_VLAN) {
 		/* remove all packets in parent bc_buf pointing to this dev */
@@ -640,6 +633,15 @@ static int ieee80211_stop(struct net_device *dev)
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 
+	/* close all dependent VLAN interfaces before locking wiphy */
+	if (sdata->vif.type == NL80211_IFTYPE_AP) {
+		struct ieee80211_sub_if_data *vlan, *tmpsdata;
+
+		list_for_each_entry_safe(vlan, tmpsdata, &sdata->u.ap.vlans,
+					 u.vlan.list)
+			dev_close(vlan->dev);
+	}
+
 	wiphy_lock(sdata->local->hw.wiphy);
 	ieee80211_do_stop(sdata, true);
 	wiphy_unlock(sdata->local->hw.wiphy);
@@ -1589,6 +1591,9 @@ static int ieee80211_runtime_change_iftype(struct ieee80211_sub_if_data *sdata,
 
 	switch (sdata->vif.type) {
 	case NL80211_IFTYPE_AP:
+		if (!list_empty(&sdata->u.ap.vlans))
+			return -EBUSY;
+		break;
 	case NL80211_IFTYPE_STATION:
 	case NL80211_IFTYPE_ADHOC:
 	case NL80211_IFTYPE_OCB:
