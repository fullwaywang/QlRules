/**
 * @name linux-a349e5ab4dc9954746e836cd10b407ce48f9b2f6-i2c_pnx_interrupt
 * @id cpp/linux/a349e5ab4dc9954746e836cd10b407ce48f9b2f6/i2c-pnx-interrupt
 * @description linux-a349e5ab4dc9954746e836cd10b407ce48f9b2f6-drivers/i2c/busses/i2c-pnx.c-i2c_pnx_interrupt CVE-2024-42153
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable valg_data_381, BitwiseAndExpr target_2, PointerArithmeticOperation target_3, AddressOfExpr target_4, ExprStmt target_0) {
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="mif"
					and obj_3.getQualifier().(VariableAccess).getTarget()=valg_data_381
				)
				and obj_2.getTarget().getName()="timer"
			)
		)
		and obj_0.getTarget().hasName("del_timer_sync")
	)
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_3.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_1(Variable valg_data_381, BitwiseAndExpr target_5, ExprStmt target_6, AddressOfExpr target_7, ExprStmt target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="mif"
					and obj_3.getQualifier().(VariableAccess).getTarget()=valg_data_381
				)
				and obj_2.getTarget().getName()="timer"
			)
		)
		and obj_0.getTarget().hasName("del_timer_sync")
	)
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_6.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_7.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_2(Function func, BitwiseAndExpr target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget().getType().hasName("u32")
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable valg_data_381, PointerArithmeticOperation target_3) {
	exists(PointerFieldAccess obj_0 | obj_0=target_3.getLeftOperand() |
		obj_0.getTarget().getName()="ioaddr"
		and obj_0.getQualifier().(VariableAccess).getTarget()=valg_data_381
	)
	and exists(FunctionCall obj_1 | obj_1=target_3.getParent() |
		exists(ExprStmt obj_2 | obj_2=obj_1.getParent() |
			exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
				obj_3.getTarget().hasName("iowrite32")
				and obj_3.getArgument(0).(VariableAccess).getTarget().getType().hasName("u32")
			)
		)
	)
	and target_3.getRightOperand().(Literal).getValue()="8"
}

predicate func_4(Variable valg_data_381, AddressOfExpr target_4) {
	exists(ValueFieldAccess obj_0 | obj_0=target_4.getOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getQualifier() |
			obj_1.getTarget().getName()="mif"
			and obj_1.getQualifier().(VariableAccess).getTarget()=valg_data_381
		)
		and obj_0.getTarget().getName()="complete"
	)
	and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("complete")
}

predicate func_5(Function func, BitwiseAndExpr target_5) {
	target_5.getLeftOperand().(VariableAccess).getTarget().getType().hasName("u32")
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable valg_data_381, BitwiseAndExpr target_5, ExprStmt target_6) {
	exists(AssignExpr obj_0 | obj_0=target_6.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="mif"
				and obj_2.getQualifier().(VariableAccess).getTarget()=valg_data_381
			)
			and obj_1.getTarget().getName()="ret"
		)
		and obj_0.getRValue().(UnaryMinusExpr).getValue()="-5"
	)
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_7(Variable valg_data_381, AddressOfExpr target_7) {
	exists(ValueFieldAccess obj_0 | obj_0=target_7.getOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getQualifier() |
			obj_1.getTarget().getName()="mif"
			and obj_1.getQualifier().(VariableAccess).getTarget()=valg_data_381
		)
		and obj_0.getTarget().getName()="complete"
	)
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("complete")
}

from Function func, Variable valg_data_381, ExprStmt target_0, ExprStmt target_1, BitwiseAndExpr target_2, PointerArithmeticOperation target_3, AddressOfExpr target_4, BitwiseAndExpr target_5, ExprStmt target_6, AddressOfExpr target_7
where
func_0(valg_data_381, target_2, target_3, target_4, target_0)
and func_1(valg_data_381, target_5, target_6, target_7, target_1)
and func_2(func, target_2)
and func_3(valg_data_381, target_3)
and func_4(valg_data_381, target_4)
and func_5(func, target_5)
and func_6(valg_data_381, target_5, target_6)
and func_7(valg_data_381, target_7)
and valg_data_381.getType().hasName("i2c_pnx_algo_data *")
and valg_data_381.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
