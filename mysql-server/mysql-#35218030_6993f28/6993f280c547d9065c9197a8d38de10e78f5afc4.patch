commit 6993f280c547d9065c9197a8d38de10e78f5afc4	6993f280c547d9065c9197a8d38de10e78f5afc4
Author: Gopal Shankar <gopal.shankar@oracle.com>
Date:   Tue Mar 28 13:38:57 2023 +0530

    Bug#35218030 "Deadlock between FLUSH STATUS, COM_CHANGE_USER and SELECT FROM I_S.PROCESSLIST".
    
    Starting from 8.0.28 version of MySQL Server concurrent execution of
    COM_STATISTICS, COM_CHANGE_USER commands and SHOW PROCESSLIST statement
    sometimes led to deadlock. Same problem was observed if COM_STATISTICS
    was replaced with FLUSH STATUS statement and/or SHOW PROCESSLIST was
    replaced with SELECT from I_S.PROCESSLIST table.
    
    The deadlock occured because of regression from fix for bug#32320541
    "RACE CONDITION ON SECURITY_CONTEXT::M_USER". After this patch
    COM_STATISTICS/FLUSH STATUS, COM_CHANGE_USER and SHOW PROCESSLIST/
    SELECT ... FROM I_S.PROCESSLIST started to acquire same locks in
    different order.
    
    In particular:
      1) Code responsible for changing user for connection started to acquire
         THD::LOCK_thd_security_ctx mutex and the acquired LOCK_status mutex during
         call to THD::cleanup_connection(), without releasing the former.
      2) Implementations of COM_STATISTICS and FLUSH STATUS commands acquire
         LOCK_status mutex and then during iteration through all connections
         LOCK_thd_remove mutexes without releasing the former.
      3) Finally, SHOW PROCESSLIST/I_S.PROCESSLIST implementation acquired
         LOCK_thd_remove mutexes and then THD::LOCK_thd_security_ctx mutex
         during copying information about particular connection, without
         releasing the former.
    
    Naturally, THD::LOCK_thd_security_ctx -> LOCK_status -> LOCK_thd_remove ->
    THD::LOCK_thd_security_ctx dependency loop occasionally resulted in
    deadlock.
    
    This patch solves the problem by reducing scope during which
    THD::LOCK_thd_security_ctx lock is held in COM_CHANGE_USER implementation.
    We no longer call THD::cleanup_connection()/lock LOCK_status while
    holding it, thus breaking dependency loop.
    
    Thanks for the contribution dmitry.lenev@parcona.com - Bug#110494.
    
    Change-Id: If6bbd8a94a0671abcbfbce3afdaa5cebd28ac4f9

diff --git a/mysql-test/r/change_user_deadlock.result b/mysql-test/r/change_user_deadlock.result
new file mode 100644
index 00000000000..ab079a5b85e
--- /dev/null
+++ b/mysql-test/r/change_user_deadlock.result
@@ -0,0 +1,49 @@
+#
+# Bug#110494 "Deadlock between FLUSH STATUS, COM_CHANGE_USER
+# and SELECT FROM I_S.PROCESSLIST".
+#
+# The original problem reported was that concurrent execution of
+# COM_STATISTICS, COM_CHANGE_USER commands and SHOW FULL PROCESSLIST
+# statements sometimes led to deadlock. This test uses FLUSH STATUS
+# statement instead of the first command and SELECT ... FROM
+# I_S.PROCESSLIST instead of the latter. They acquire the same
+# locks and were affected by the same problem.
+# Doing 3000 concurrent runs of each statement was enough to reproduce
+# the deadlock with 80% probability on my machine.
+# Hence, the test doesn't reproduce the issue consistently. It is observed
+# that the test fails when run with mtr option --repeat=10 or more.
+# Also, it is hard to write a MTR test using DEBUG_SYNC, because
+# MTR doesn't allow us to run --change_user in background.
+CREATE PROCEDURE p_flush_status()
+BEGIN
+DECLARE x INT DEFAULT 3000;
+WHILE x DO
+SET x = x-1;
+FLUSH STATUS;
+END WHILE;
+END |
+CREATE PROCEDURE p_processlist()
+BEGIN
+DECLARE x INT DEFAULT 3000;
+WHILE x DO
+SET x = x-1;
+SELECT COUNT(*) INTO @a FROM information_schema.processlist;
+END WHILE;
+END |
+connect  con1, localhost, root,,;
+# Send:
+CALL p_flush_status();
+# Send:
+connect  con2, localhost, root,,;
+CALL p_processlist();
+connection default;
+# Execute COM_CHANGE_USER command 3000 times.
+connection con1;
+# Reap p_flush_status().
+disconnect con1;
+connection con2;
+# Reap p_processlist().
+disconnect con2;
+connection default;
+DROP PROCEDURE p_flush_status;
+DROP PROCEDURE p_processlist;
diff --git a/mysql-test/t/change_user_deadlock.test b/mysql-test/t/change_user_deadlock.test
new file mode 100644
index 00000000000..a84840dd05d
--- /dev/null
+++ b/mysql-test/t/change_user_deadlock.test
@@ -0,0 +1,78 @@
+# Run it only if --big-test option is specified
+-- source include/big_test.inc
+
+--echo #
+--echo # Bug#110494 "Deadlock between FLUSH STATUS, COM_CHANGE_USER
+--echo # and SELECT FROM I_S.PROCESSLIST".
+--echo #
+
+--echo # The original problem reported was that concurrent execution of
+--echo # COM_STATISTICS, COM_CHANGE_USER commands and SHOW FULL PROCESSLIST
+--echo # statements sometimes led to deadlock. This test uses FLUSH STATUS
+--echo # statement instead of the first command and SELECT ... FROM
+--echo # I_S.PROCESSLIST instead of the latter. They acquire the same
+--echo # locks and were affected by the same problem.
+--echo # Doing 3000 concurrent runs of each statement was enough to reproduce
+--echo # the deadlock with 80% probability on my machine.
+--echo # Hence, the test doesn't reproduce the issue consistently. It is observed
+--echo # that the test fails when run with mtr option --repeat=10 or more.
+--echo # Also, it is hard to write a MTR test using DEBUG_SYNC, because
+--echo # MTR doesn't allow us to run --change_user in background.
+
+--delimiter |
+
+CREATE PROCEDURE p_flush_status()
+BEGIN
+  DECLARE x INT DEFAULT 3000;
+  WHILE x DO
+    SET x = x-1;
+    FLUSH STATUS;
+  END WHILE;
+END |
+
+CREATE PROCEDURE p_processlist()
+BEGIN
+  DECLARE x INT DEFAULT 3000;
+  WHILE x DO
+    SET x = x-1;
+    SELECT COUNT(*) INTO @a FROM information_schema.processlist;
+  END WHILE;
+END |
+
+--delimiter ;
+
+--enable_connect_log
+--connect (con1, localhost, root,,)
+--echo # Send:
+--send CALL p_flush_status()
+
+--echo # Send:
+--connect (con2, localhost, root,,)
+--send CALL p_processlist()
+
+--connection default
+
+--echo # Execute COM_CHANGE_USER command 3000 times.
+let $i = 3000;
+while ($i)
+{
+  dec $i;
+--change_user
+}
+
+--connection con1
+--echo # Reap p_flush_status().
+--reap
+--disconnect con1
+--source include/wait_until_disconnected.inc
+
+--connection con2
+--echo # Reap p_processlist().
+--reap
+--disconnect con2
+--source include/wait_until_disconnected.inc
+
+--connection default
+--disable_connect_log
+DROP PROCEDURE p_flush_status;
+DROP PROCEDURE p_processlist;
diff --git a/sql/sql_parse.cc b/sql/sql_parse.cc
index b1959eb1540..99bd9d23682 100644
--- a/sql/sql_parse.cc
+++ b/sql/sql_parse.cc
@@ -1880,12 +1880,6 @@ bool dispatch_command(THD *thd, const COM_DATA *com_data,
     }
     case COM_CHANGE_USER: {
       MYSQL_NOTIFY_STATEMENT_QUERY_ATTRIBUTES(thd->m_statement_psi, false);
-      /*
-        LOCK_thd_security_ctx protects the THD's security-context from
-        inspection by SHOW PROCESSLIST while we're updating it. Nested
-        acquiring of LOCK_thd_data is fine (see below).
-      */
-      MUTEX_LOCK(grd_secctx, &thd->LOCK_thd_security_ctx);
 
       int auth_rc;
       thd->status_var.com_other++;
@@ -1894,8 +1888,18 @@ bool dispatch_command(THD *thd, const COM_DATA *com_data,
       USER_CONN *save_user_connect =
           const_cast<USER_CONN *>(thd->get_user_connect());
       LEX_CSTRING save_db = thd->db();
+
+      /*
+        LOCK_thd_security_ctx protects the THD's security-context from
+        inspection by SHOW PROCESSLIST while we're updating it. However,
+        there is no need to protect this context while we're reading it,
+        sinceother threads are not supposed to modify it.
+        Nested acquiring of LOCK_thd_data is fine (see below).
+      */
       Security_context save_security_ctx(*(thd->security_context()));
 
+      MUTEX_LOCK(grd_secctx, &thd->LOCK_thd_security_ctx);
+
       auth_rc = acl_authenticate(thd, COM_CHANGE_USER);
       auth_rc |= mysql_audit_notify(
           thd, AUDIT_EVENT(MYSQL_AUDIT_CONNECTION_CHANGE_USER));
