/**
 * @name linux-e891b36de161fcd96f12ff83667473e5067b9037-ip6_finish_output2
 * @id cpp/linux/e891b36de161fcd96f12ff83667473e5067b9037/ip6-finish-output2
 * @description linux-e891b36de161fcd96f12ff83667473e5067b9037-net/ipv6/ip6_output.c-ip6_finish_output2 CVE-2024-44986
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(LogicalAndExpr target_3, Function func) {
exists(ExprStmt target_0 |
	exists(BlockStmt obj_0 | obj_0=target_0.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(0)=target_0
			and obj_1.getCondition()=target_3
		)
	)
	and target_0.getExpr().(FunctionCall).getTarget().hasName("rcu_read_lock")
	and target_0.getEnclosingFunction() = func
)
}

predicate func_1(NotExpr target_4, Function func) {
exists(ExprStmt target_1 |
	exists(BlockStmt obj_0 | obj_0=target_1.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(1)=target_1
			and obj_1.getCondition()=target_4
		)
	)
	and target_1.getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(LogicalAndExpr target_3, Function func) {
exists(ExprStmt target_2 |
	exists(BlockStmt obj_0 | obj_0=target_2.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(3)=target_2
			and obj_1.getCondition()=target_3
		)
	)
	and target_2.getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
	and target_2.getEnclosingFunction() = func
)
}

predicate func_3(Function func, LogicalAndExpr target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getLeftOperand() |
		exists(NotExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(NotExpr obj_2 | obj_2=obj_1.getOperand() |
				exists(RelationalOperation obj_3 | obj_3=obj_2.getOperand() |
					exists(FunctionCall obj_4 | obj_4=obj_3.getLesserOperand() |
						obj_4.getTarget().hasName("skb_headroom")
						and obj_4.getArgument(0).(VariableAccess).getTarget().getType().hasName("sk_buff *")
					)
					and obj_3.getGreaterOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
				)
			)
		)
		and obj_0.getTarget().hasName("__builtin_expect")
		and obj_0.getArgument(1).(Literal).getValue()="0"
	)
	and exists(PointerFieldAccess obj_5 | obj_5=target_3.getRightOperand() |
		obj_5.getTarget().getName()="header_ops"
		and obj_5.getQualifier().(VariableAccess).getTarget().getType().hasName("net_device *")
	)
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Function func, NotExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget().getType().hasName("sk_buff *")
	and target_4.getEnclosingFunction() = func
}

from Function func, LogicalAndExpr target_3, NotExpr target_4
where
not func_0(target_3, func)
and not func_1(target_4, func)
and not func_2(target_3, func)
and func_3(func, target_3)
and func_4(func, target_4)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
