/**
 * @name linux-e362359ace6f87c201531872486ff295df306d13-begin_new_exec
 * @id cpp/linux/e362359ace6f87c201531872486ff295df306d13/begin-new-exec
 * @description linux-e362359ace6f87c201531872486ff295df306d13-fs/exec.c-begin_new_exec CVE-2022-2585
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vme_1252, ExprStmt target_3, ExprStmt target_4, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("spin_lock_irq")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="siglock"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sighand"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vme_1252
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_3.getLocation())
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vme_1252, ExprStmt target_3, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("posix_cpu_timers_exit")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vme_1252
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_3.getLocation()))
}

predicate func_2(Variable vme_1252, ExprStmt target_3, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("spin_unlock_irq")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="siglock"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sighand"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vme_1252
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_3.getLocation()))
}

predicate func_3(Variable vme_1252, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("exit_itimers")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vme_1252
}

predicate func_4(Variable vme_1252, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("de_thread")
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vme_1252
}

from Function func, Variable vme_1252, ExprStmt target_3, ExprStmt target_4
where
not func_0(vme_1252, target_3, target_4, func)
and not func_1(vme_1252, target_3, func)
and not func_2(vme_1252, target_3, func)
and func_3(vme_1252, target_3)
and func_4(vme_1252, target_4)
and vme_1252.getType().hasName("task_struct *")
and vme_1252.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
