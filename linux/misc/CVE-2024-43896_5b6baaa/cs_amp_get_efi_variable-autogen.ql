/**
 * @name linux-5b6baaa7cbd77ff980516bad38bbc5a648bb5158-cs_amp_get_efi_variable
 * @id cpp/linux/5b6baaa7cbd77ff980516bad38bbc5a648bb5158/cs-amp-get-efi-variable
 * @description linux-5b6baaa7cbd77ff980516bad38bbc5a648bb5158-sound/soc/codecs/cs-amp-lib.c-cs_amp_get_efi_variable CVE-2024-43896
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
	exists(IfStmt obj_0 | obj_0=target_0.getParent() |
		exists(BlockStmt obj_1 | obj_1=obj_0.getParent() |
			exists(IfStmt obj_2 | obj_2=obj_1.getStmt(2) |
				exists(ReturnStmt obj_3 | obj_3=obj_2.getThen() |
					exists(VariableCall obj_4 | obj_4=obj_3.getExpr() |
						exists(ValueFieldAccess obj_5 | obj_5=obj_4.getExpr() |
							obj_5.getTarget().getName()="get_variable"
							and obj_5.getQualifier().(VariableAccess).getTarget().getType().hasName("efi")
						)
						and obj_4.getArgument(0).(VariableAccess).getTarget().getType().hasName("efi_char16_t *")
						and obj_4.getArgument(1).(VariableAccess).getTarget().getType().hasName("efi_guid_t *")
						and obj_4.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("u32")
						and obj_4.getArgument(3).(VariableAccess).getTarget().getType().hasName("unsigned long *")
						and obj_4.getArgument(4).(VariableAccess).getTarget().getType().hasName("void *")
					)
				)
			)
		)
	)
	and target_0.getValue()="1"
	and not target_0.getValue()="16"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(ReturnStmt target_2, Function func) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("efi_rt_services_supported")
	and target_1.getArgument(0).(Literal).getValue()="16"
	and target_1.getParent().(IfStmt).getThen()=target_2
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(Function func, ReturnStmt target_2) {
	exists(VariableCall obj_0 | obj_0=target_2.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().getName()="get_variable"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("efi")
		)
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("efi_char16_t *")
		and obj_0.getArgument(1).(VariableAccess).getTarget().getType().hasName("efi_guid_t *")
		and obj_0.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("u32")
		and obj_0.getArgument(3).(VariableAccess).getTarget().getType().hasName("unsigned long *")
		and obj_0.getArgument(4).(VariableAccess).getTarget().getType().hasName("void *")
	)
	and target_2.getEnclosingFunction() = func
}

from Function func, Literal target_0, ReturnStmt target_2
where
func_0(func, target_0)
and not func_1(target_2, func)
and func_2(func, target_2)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
