/**
 * @name linux-2671fa4dc0109d3fb581bc3078fdf17b5d9080f6-nf_conntrack_standalone_init_sysctl
 * @id cpp/linux/2671fa4dc0109d3fb581bc3078fdf17b5d9080f6/nf-conntrack-standalone-init-sysctl
 * @description linux-2671fa4dc0109d3fb581bc3078fdf17b5d9080f6-net/netfilter/nf_conntrack_standalone.c-nf_conntrack_standalone_init_sysctl CVE-2021-38209
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vtable_1032, EqualityOperation target_4, ExprStmt target_0) {
	target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="mode"
	and target_0.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vtable_1032
	and target_0.getExpr().(AssignExpr).getRValue().(OctalLiteral).getValue()="292"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_1(Variable vtable_1032, EqualityOperation target_4, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="mode"
	and target_1.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vtable_1032
	and target_1.getExpr().(AssignExpr).getRValue().(OctalLiteral).getValue()="292"
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_2(Variable vtable_1032, ValueFieldAccess target_2) {
	target_2.getTarget().getName()="mode"
	and target_2.getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vtable_1032
}

predicate func_3(Variable vinit_net, Parameter vnet_1028, BlockStmt target_9, NotExpr target_3) {
	target_3.getOperand().(FunctionCall).getTarget().hasName("net_eq")
	and target_3.getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vinit_net
	and target_3.getOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vnet_1028
	and target_3.getParent().(IfStmt).getThen()=target_9
}

predicate func_4(Variable vinit_user_ns, Parameter vnet_1028, BlockStmt target_10, EqualityOperation target_4) {
	target_4.getLeftOperand().(PointerFieldAccess).getTarget().getName()="user_ns"
	and target_4.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnet_1028
	and target_4.getRightOperand().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vinit_user_ns
	and target_4.getParent().(IfStmt).getThen()=target_10
}

predicate func_5(Variable vtable_1032, EqualityOperation target_4, ExprStmt target_5) {
	target_5.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="mode"
	and target_5.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vtable_1032
	and target_5.getExpr().(AssignExpr).getRValue().(OctalLiteral).getValue()="292"
	and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_6(Variable vtable_1032, EqualityOperation target_4, ExprStmt target_6) {
	target_6.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="mode"
	and target_6.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vtable_1032
	and target_6.getExpr().(AssignExpr).getRValue().(OctalLiteral).getValue()="292"
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_7(EqualityOperation target_4, Function func, ExprStmt target_7) {
	target_7.getExpr().(AssignExpr).getLValue() instanceof ValueFieldAccess
	and target_7.getExpr().(AssignExpr).getRValue().(OctalLiteral).getValue()="292"
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Variable vtable_1032, EqualityOperation target_4, IfStmt target_8) {
	target_8.getCondition() instanceof NotExpr
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="mode"
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vtable_1032
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(OctalLiteral).getValue()="292"
	and target_8.getParent().(IfStmt).getCondition()=target_4
}

predicate func_9(Variable vtable_1032, BlockStmt target_9) {
	target_9.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="mode"
	and target_9.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vtable_1032
	and target_9.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(OctalLiteral).getValue()="292"
}

predicate func_10(Function func, BlockStmt target_10) {
	target_10.getStmt(0) instanceof ExprStmt
	and target_10.getStmt(1) instanceof ExprStmt
	and target_10.getStmt(2) instanceof ExprStmt
	and target_10.getStmt(3) instanceof ExprStmt
	and target_10.getStmt(4) instanceof ExprStmt
	and target_10.getEnclosingFunction() = func
}

from Function func, Variable vtable_1032, Variable vinit_user_ns, Variable vinit_net, Parameter vnet_1028, ExprStmt target_0, ExprStmt target_1, ValueFieldAccess target_2, NotExpr target_3, EqualityOperation target_4, ExprStmt target_5, ExprStmt target_6, ExprStmt target_7, IfStmt target_8, BlockStmt target_9, BlockStmt target_10
where
func_0(vtable_1032, target_4, target_0)
and func_1(vtable_1032, target_4, target_1)
and func_2(vtable_1032, target_2)
and func_3(vinit_net, vnet_1028, target_9, target_3)
and func_4(vinit_user_ns, vnet_1028, target_10, target_4)
and func_5(vtable_1032, target_4, target_5)
and func_6(vtable_1032, target_4, target_6)
and func_7(target_4, func, target_7)
and func_8(vtable_1032, target_4, target_8)
and func_9(vtable_1032, target_9)
and func_10(func, target_10)
and vtable_1032.getType().hasName("ctl_table *")
and vinit_user_ns.getType().hasName("user_namespace")
and vinit_net.getType().hasName("net")
and vnet_1028.getType().hasName("net *")
and vtable_1032.(LocalVariable).getFunction() = func
and not vinit_user_ns.getParentScope+() = func
and not vinit_net.getParentScope+() = func
and vnet_1028.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
