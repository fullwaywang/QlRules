/**
 * @name linux-13054abbaa4f1fd4e6f3b4b63439ec033b4c8035-hid_debug_events_poll
 * @id cpp/linux/13054abbaa4f1fd4e6f3b4b63439ec033b4c8035/hid-debug-events-poll
 * @description linux-13054abbaa4f1fd4e6f3b4b63439ec033b4c8035-drivers/hid/hid-debug.c-hid_debug_events_poll CVE-2019-3819
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ReturnStmt target_3, Function func) {
	exists(NotExpr target_0 |
		target_0.getOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(EqualityOperation).getAnOperand().(ValueFieldAccess).getTarget().getName()="in"
		and target_0.getOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="kfifo"
		and target_0.getOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(EqualityOperation).getAnOperand().(ValueFieldAccess).getTarget().getName()="out"
		and target_0.getOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="kfifo"
		and target_0.getParent().(IfStmt).getThen()=target_3
		and target_0.getEnclosingFunction() = func)
}

predicate func_1(Variable vlist_1185, VariableAccess target_1) {
		target_1.getTarget()=vlist_1185
}

predicate func_2(Variable vlist_1185, ReturnStmt target_3, EqualityOperation target_2) {
		target_2.getAnOperand().(PointerFieldAccess).getTarget().getName()="head"
		and target_2.getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vlist_1185
		and target_2.getAnOperand().(PointerFieldAccess).getTarget().getName()="tail"
		and target_2.getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vlist_1185
		and target_2.getParent().(IfStmt).getThen()=target_3
}

predicate func_3(Function func, ReturnStmt target_3) {
		target_3.getExpr().(BitwiseOrExpr).getValue()="65"
		and target_3.getEnclosingFunction() = func
}

from Function func, Variable vlist_1185, VariableAccess target_1, EqualityOperation target_2, ReturnStmt target_3
where
not func_0(target_3, func)
and func_1(vlist_1185, target_1)
and func_2(vlist_1185, target_3, target_2)
and func_3(func, target_3)
and vlist_1185.getType().hasName("hid_debug_list *")
and vlist_1185.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
