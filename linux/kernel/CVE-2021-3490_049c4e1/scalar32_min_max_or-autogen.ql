/**
 * @name linux-049c4e13714ecbca567b4d5f6d563f05d431c80e-scalar32_min_max_or
 * @id cpp/linux/049c4e13714ecbca567b4d5f6d563f05d431c80e/scalar32-min-max-or
 * @description linux-049c4e13714ecbca567b4d5f6d563f05d431c80e-scalar32_min_max_or CVE-2021-3490
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vdst_reg_7149, Variable vvar32_off_7154, LogicalAndExpr target_2, FunctionCall target_3, ExprStmt target_4, ExprStmt target_6) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("__mark_reg32_known")
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdst_reg_7149
		and target_0.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="value"
		and target_0.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vvar32_off_7154
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
		and target_3.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_0.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_6.getExpr().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(LogicalAndExpr target_2, Function func, ReturnStmt target_1) {
		target_1.getParent().(IfStmt).getCondition()=target_2
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, LogicalAndExpr target_2) {
		target_2.getAnOperand().(VariableAccess).getTarget().getType().hasName("bool")
		and target_2.getAnOperand().(VariableAccess).getTarget().getType().hasName("bool")
		and target_2.getEnclosingFunction() = func
}

predicate func_3(Parameter vdst_reg_7149, FunctionCall target_3) {
		target_3.getTarget().hasName("tnum_subreg")
		and target_3.getArgument(0).(PointerFieldAccess).getTarget().getName()="var_off"
		and target_3.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_reg_7149
}

predicate func_4(Parameter vdst_reg_7149, ExprStmt target_4) {
		target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="u32_min_value"
		and target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_reg_7149
		and target_4.getExpr().(AssignExpr).getRValue().(BuiltInChooseExpr).getChild(0).(LogicalAndExpr).getValue()="0"
		and target_4.getExpr().(AssignExpr).getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getTarget().getName()="u32_min_value"
		and target_4.getExpr().(AssignExpr).getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_reg_7149
		and target_4.getExpr().(AssignExpr).getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget().getType().hasName("u32")
		and target_4.getExpr().(AssignExpr).getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getThen().(PointerFieldAccess).getTarget().getName()="u32_min_value"
		and target_4.getExpr().(AssignExpr).getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getThen().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_reg_7149
		and target_4.getExpr().(AssignExpr).getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getElse().(VariableAccess).getTarget().getType().hasName("u32")
}

predicate func_6(Parameter vdst_reg_7149, Variable vvar32_off_7154, ExprStmt target_6) {
		target_6.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="u32_max_value"
		and target_6.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_reg_7149
		and target_6.getExpr().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(ValueFieldAccess).getTarget().getName()="value"
		and target_6.getExpr().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vvar32_off_7154
		and target_6.getExpr().(AssignExpr).getRValue().(BitwiseOrExpr).getRightOperand().(ValueFieldAccess).getTarget().getName()="mask"
		and target_6.getExpr().(AssignExpr).getRValue().(BitwiseOrExpr).getRightOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vvar32_off_7154
}

from Function func, Parameter vdst_reg_7149, Variable vvar32_off_7154, ReturnStmt target_1, LogicalAndExpr target_2, FunctionCall target_3, ExprStmt target_4, ExprStmt target_6
where
not func_0(vdst_reg_7149, vvar32_off_7154, target_2, target_3, target_4, target_6)
and func_1(target_2, func, target_1)
and func_2(func, target_2)
and func_3(vdst_reg_7149, target_3)
and func_4(vdst_reg_7149, target_4)
and func_6(vdst_reg_7149, vvar32_off_7154, target_6)
and vdst_reg_7149.getType().hasName("bpf_reg_state *")
and vvar32_off_7154.getType().hasName("tnum")
and vdst_reg_7149.getFunction() = func
and vvar32_off_7154.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
