/**
 * @name linux-b7a584598aea7ca73140cb87b40319944dd3393f-__switch_to
 * @id cpp/linux/b7a584598aea7ca73140cb87b40319944dd3393f/--switch-to
 * @description linux-b7a584598aea7ca73140cb87b40319944dd3393f-arch/x86/kernel/process_64.c-__switch_to CVE-2016-3157
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vnext_277, IfStmt target_1, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(LogicalAndExpr).getLeftOperand().(ConditionalExpr).getCondition().(FunctionCall).getTarget().hasName("__builtin_constant_p")
	and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(LogicalAndExpr).getLeftOperand().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("_static_cpu_has")
	and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="iopl"
	and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(LogicalAndExpr).getRightOperand().(EqualityOperation).getRightOperand().(PointerFieldAccess).getTarget().getName()="iopl"
	and target_0.getCondition().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("xen_set_iopl_mask")
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="iopl"
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnext_277
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation()))
}

predicate func_1(Function func, IfStmt target_1) {
	target_1.getCondition().(ConditionalExpr).getCondition().(FunctionCall).getTarget().hasName("__builtin_constant_p")
	and target_1.getCondition().(ConditionalExpr).getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_1.getCondition().(ConditionalExpr).getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_1.getCondition().(ConditionalExpr).getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(ConditionalExpr).getCondition().(Literal).getValue()="1"
	and target_1.getCondition().(ConditionalExpr).getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getTarget().hasName("constant_test_bit")
	and target_1.getCondition().(ConditionalExpr).getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="x86_capability"
	and target_1.getCondition().(ConditionalExpr).getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("variable_test_bit")
	and target_1.getCondition().(ConditionalExpr).getCondition().(FunctionCall).getArgument(0).(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="x86_capability"
	and target_1.getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_1.getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_1.getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getElse().(ConditionalExpr).getCondition().(Literal).getValue()="1"
	and target_1.getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getTarget().hasName("constant_test_bit")
	and target_1.getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getArgument(0).(AddExpr).getValue()="520"
	and target_1.getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="x86_capability"
	and target_1.getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("variable_test_bit")
	and target_1.getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="520"
	and target_1.getCondition().(ConditionalExpr).getThen().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="x86_capability"
	and target_1.getCondition().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("_static_cpu_has")
	and target_1.getCondition().(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="520"
	and target_1.getThen().(BlockStmt).getStmt(1).(AsmStmt).getChild(0).(VariableAccess).getTarget().getType().hasName("unsigned short")
	and target_1.getThen().(BlockStmt).getStmt(2).(IfStmt).getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned short")
	and target_1.getThen().(BlockStmt).getStmt(2).(IfStmt).getCondition().(EqualityOperation).getRightOperand().(MulExpr).getValue()="24"
	and target_1.getThen().(BlockStmt).getStmt(2).(IfStmt).getThen().(DoStmt).getCondition().(Literal).getValue()="0"
	and target_1.getThen().(BlockStmt).getStmt(2).(IfStmt).getThen().(DoStmt).getStmt().(BlockStmt).getStmt(1).(AsmStmt).getChild(0).(VariableAccess).getTarget().getType().hasName("unsigned short")
	and target_1.getEnclosingFunction() = func
}

from Function func, Variable vnext_277, IfStmt target_1
where
not func_0(vnext_277, target_1, func)
and func_1(func, target_1)
and vnext_277.getType().hasName("thread_struct *")
and vnext_277.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
