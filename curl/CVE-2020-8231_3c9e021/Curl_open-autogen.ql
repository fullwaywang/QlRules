/**
 * @name curl-3c9e021f86872baae412a427e807fbfa2f3e8-Curl_open
 * @id cpp/curl/3c9e021f86872baae412a427e807fbfa2f3e8/curl-open
 * @description curl-3c9e021f86872baae412a427e807fbfa2f3e8-lib/url.c-Curl_open CVE-2020-8231
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
		target_0.getValue()="0"
		and not target_0.getValue()="1"
		and target_0.getParent().(AssignExpr).getParent().(ExprStmt).getExpr() instanceof AssignExpr
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vdata_607, ExprStmt target_4, ExprStmt target_5) {
	exists(AssignExpr target_1 |
		target_1.getLValue().(ValueFieldAccess).getTarget().getName()="lastconnect_id"
		and target_1.getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="state"
		and target_1.getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdata_607
		and target_1.getRValue().(UnaryMinusExpr).getValue()="-1"
		and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_1.getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_5.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vdata_607, PointerFieldAccess target_2) {
		target_2.getTarget().getName()="state"
		and target_2.getQualifier().(VariableAccess).getTarget()=vdata_607
}

predicate func_3(Variable vdata_607, AssignExpr target_3) {
		target_3.getLValue().(ValueFieldAccess).getTarget().getName()="lastconnect"
		and target_3.getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="state"
		and target_3.getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdata_607
		and target_3.getRValue() instanceof Literal
}

predicate func_4(Variable vdata_607, ExprStmt target_4) {
		target_4.getExpr().(FunctionCall).getTarget().hasName("Curl_initinfo")
		and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdata_607
}

predicate func_5(Variable vdata_607, ExprStmt target_5) {
		target_5.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getTarget().getName()="flags"
		and target_5.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="progress"
		and target_5.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdata_607
		and target_5.getExpr().(AssignOrExpr).getRValue().(BinaryBitwiseOperation).getValue()="16"
}

from Function func, Variable vdata_607, Literal target_0, PointerFieldAccess target_2, AssignExpr target_3, ExprStmt target_4, ExprStmt target_5
where
func_0(func, target_0)
and not func_1(vdata_607, target_4, target_5)
and func_2(vdata_607, target_2)
and func_3(vdata_607, target_3)
and func_4(vdata_607, target_4)
and func_5(vdata_607, target_5)
and vdata_607.getType().hasName("Curl_easy *")
and vdata_607.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
