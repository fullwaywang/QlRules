/**
 * @name linux-b3cb7a830a24527877b0bc900b9bd74a96aea928-aq_ring_alloc
 * @id cpp/linux/b3cb7a830a24527877b0bc900b9bd74a96aea928/aq-ring-alloc
 * @description linux-b3cb7a830a24527877b0bc900b9bd74a96aea928-drivers/net/ethernet/aquantia/atlantic/aq_ring.c-aq_ring_alloc CVE-2023-52664
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Parameter vself_135, RelationalOperation target_3, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vself_135
	and target_1.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
}

predicate func_2(Parameter vself_135, ExprStmt target_1, VariableAccess target_2) {
	target_2.getTarget()=vself_135
	and target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_2.getLocation())
}

predicate func_3(Function func, RelationalOperation target_3) {
	 (target_3 instanceof GTExpr or target_3 instanceof LTExpr)
	and target_3.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getGreaterOperand().(Literal).getValue()="0"
	and target_3.getEnclosingFunction() = func
}

from Function func, Parameter vself_135, ExprStmt target_1, VariableAccess target_2, RelationalOperation target_3
where
func_1(vself_135, target_3, target_1)
and func_2(vself_135, target_1, target_2)
and func_3(func, target_3)
and vself_135.getType().hasName("aq_ring_s *")
and vself_135.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
