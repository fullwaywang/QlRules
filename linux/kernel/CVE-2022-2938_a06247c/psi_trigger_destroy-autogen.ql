/**
 * @name linux-a06247c6804f1a7c86a2e5398a4c1f1db1471848-psi_trigger_destroy
 * @id cpp/linux/a06247c6804f1a7c86a2e5398a4c1f1db1471848/psi-trigger-destroy
 * @description linux-a06247c6804f1a7c86a2e5398a4c1f1db1471848-kernel/sched/psi.c-psi_trigger_destroy CVE-2022-2938
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Variable vt_1196, Variable vgroup_1197) {
exists(AssignExpr target_1 |
	target_1.getLValue().(VariableAccess).getTarget()=vgroup_1197
	and target_1.getRValue().(PointerFieldAccess).getTarget().getName()="group"
	and target_1.getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vt_1196)
}

predicate func_2(Variable vt_1196, PointerFieldAccess target_2) {
	target_2.getTarget().getName()="group"
	and target_2.getQualifier().(VariableAccess).getTarget()=vt_1196
}

predicate func_6(Variable v__mptr_1196, PointerArithmeticOperation target_6) {
	target_6.getLeftOperand().(VariableAccess).getTarget()=v__mptr_1196
	and target_6.getRightOperand().(BuiltInOperationBuiltInOffsetOf).getValue()="176"
}

predicate func_7(Function func, DeclStmt target_7) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_7
}

predicate func_8(Variable vt_1196, Initializer target_8) {
	target_8.getExpr().(PointerFieldAccess).getTarget().getName()="group"
	and target_8.getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vt_1196
}

predicate func_9(Variable vbranch_1200, StmtExpr target_9) {
	target_9.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(BuiltInOperation).getValue()="0"
	and target_9.getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vbranch_1200
	and target_9.getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("arch_static_branch")
	and target_9.getStmt().(BlockStmt).getStmt(1).(IfStmt).getElse().(IfStmt).getCondition().(BuiltInOperation).getValue()="1"
	and target_9.getStmt().(BlockStmt).getStmt(1).(IfStmt).getElse().(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vbranch_1200
	and target_9.getStmt().(BlockStmt).getStmt(1).(IfStmt).getElse().(IfStmt).getElse().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vbranch_1200
	and target_9.getStmt().(BlockStmt).getStmt(1).(IfStmt).getElse().(IfStmt).getElse().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("____wrong_branch_error")
	and target_9.getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_9.getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vbranch_1200
	and target_9.getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="1"
	and target_9.getParent().(IfStmt).getThen() instanceof ReturnStmt
}

/*predicate func_11(Variable vbranch_1200, IfStmt target_11) {
	target_11.getCondition().(BuiltInOperation).getValue()="0"
	and target_11.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vbranch_1200
	and target_11.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("arch_static_branch")
	and target_11.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="key"
	and target_11.getElse().(IfStmt).getCondition().(BuiltInOperation).getValue()="1"
	and target_11.getElse().(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vbranch_1200
	and target_11.getElse().(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("arch_static_branch_jump")
	and target_11.getElse().(IfStmt).getElse().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vbranch_1200
	and target_11.getElse().(IfStmt).getElse().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("____wrong_branch_error")
}

*/
/*predicate func_12(Variable vpsi_disabled, FunctionCall target_12) {
	target_12.getTarget().hasName("arch_static_branch")
	and target_12.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="key"
	and target_12.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vpsi_disabled
}

*/
/*predicate func_13(Variable vbranch_1200, ExprStmt target_13) {
	target_13.getExpr().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_13.getExpr().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vbranch_1200
	and target_13.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="1"
}

*/
from Function func, Variable vt_1196, Variable v__mptr_1196, Variable vgroup_1197, Variable vbranch_1200, Variable vpsi_disabled, PointerFieldAccess target_2, PointerArithmeticOperation target_6, DeclStmt target_7, Initializer target_8, StmtExpr target_9
where
not func_1(vt_1196, vgroup_1197)
and func_2(vt_1196, target_2)
and func_6(v__mptr_1196, target_6)
and func_7(func, target_7)
and func_8(vt_1196, target_8)
and func_9(vbranch_1200, target_9)
and vt_1196.getType().hasName("psi_trigger *")
and v__mptr_1196.getType().hasName("void *")
and vgroup_1197.getType().hasName("psi_group *")
and vbranch_1200.getType().hasName("bool")
and vpsi_disabled.getType().hasName("static_key_false")
and vt_1196.(LocalVariable).getFunction() = func
and v__mptr_1196.(LocalVariable).getFunction() = func
and vgroup_1197.(LocalVariable).getFunction() = func
and vbranch_1200.(LocalVariable).getFunction() = func
and not vpsi_disabled.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
