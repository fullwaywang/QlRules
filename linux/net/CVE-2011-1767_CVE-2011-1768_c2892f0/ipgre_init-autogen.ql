/**
 * @name linux-c2892f02-ipgre_init
 * @id cpp/linux/c2892f02/ipgre-init
 * @description linux-c2892f02-net/ipv4/ip_gre.c-ipgre_init CVE-2011-1768
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, StringLiteral target_0) {
		target_0.getValue()="<6>GRE over IPv4 tunneling driver\n"
		and not target_0.getValue()="<6>ipgre close: can't remove protocol\n"
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vipgre_protocol, BlockStmt target_17, AddressOfExpr target_18, FunctionCall target_1) {
		target_1.getTarget().hasName("inet_add_protocol")
		and not target_1.getTarget().hasName("inet_del_protocol")
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vipgre_protocol
		and target_1.getParent().(LTExpr).getGreaterOperand().(Literal).getValue()="0"
		and target_1.getParent().(LTExpr).getParent().(IfStmt).getThen()=target_17
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_18.getOperand().(VariableAccess).getLocation())
}

predicate func_3(Variable vipgre_tap_ops, AddressOfExpr target_3) {
		target_3.getOperand().(VariableAccess).getTarget()=vipgre_tap_ops
		and target_3.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_4(Variable vipgre_protocol, FunctionCall target_4) {
		target_4.getTarget().hasName("inet_del_protocol")
		and target_4.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vipgre_protocol
}

predicate func_5(Function func, DeclStmt target_5) {
		func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

predicate func_6(Function func, FunctionCall target_6) {
		target_6.getTarget().hasName("printk")
		and target_6.getArgument(0).(StringLiteral).getValue()="<6>ipgre init: can't add protocol\n"
		and target_6.getEnclosingFunction() = func
}

predicate func_7(Function func, UnaryMinusExpr target_7) {
		target_7.getValue()="-11"
		and target_7.getEnclosingFunction() = func
}

predicate func_8(Variable verr_1664, Variable vipgre_net_ops, Function func, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1664
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("register_pernet_device")
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vipgre_net_ops
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_8
}

predicate func_9(Variable verr_1664, Function func, IfStmt target_9) {
		target_9.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=verr_1664
		and target_9.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_9
}

predicate func_10(Variable verr_1664, Variable vipgre_link_ops, Function func, ExprStmt target_10) {
		target_10.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1664
		and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("rtnl_link_register")
		and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vipgre_link_ops
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_10
}

predicate func_11(Variable verr_1664, Function func, IfStmt target_11) {
		target_11.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=verr_1664
		and target_11.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_11
}

predicate func_12(Variable verr_1664, Function func, ExprStmt target_12) {
		target_12.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1664
		and target_12.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("rtnl_link_register")
		and target_12.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0) instanceof AddressOfExpr
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_12
}

predicate func_13(Variable verr_1664, Function func, IfStmt target_13) {
		target_13.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=verr_1664
		and target_13.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_13
}

predicate func_14(Variable verr_1664, Function func, ReturnStmt target_14) {
		target_14.getExpr().(VariableAccess).getTarget()=verr_1664
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_14
}

predicate func_15(Function func, ExprStmt target_15) {
		target_15.getExpr() instanceof FunctionCall
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_15
}

predicate func_16(Function func, GotoStmt target_16) {
		func.getEntryPoint().(BlockStmt).getAStmt()=target_16
}

predicate func_17(Function func, BlockStmt target_17) {
		target_17.getStmt(0).(ExprStmt).getExpr() instanceof FunctionCall
		and target_17.getStmt(1).(ReturnStmt).getExpr() instanceof UnaryMinusExpr
		and target_17.getEnclosingFunction() = func
}

predicate func_18(Variable vipgre_protocol, AddressOfExpr target_18) {
		target_18.getOperand().(VariableAccess).getTarget()=vipgre_protocol
		and target_18.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

from Function func, Variable verr_1664, Variable vipgre_net_ops, Variable vipgre_link_ops, Variable vipgre_tap_ops, Variable vipgre_protocol, StringLiteral target_0, FunctionCall target_1, AddressOfExpr target_3, FunctionCall target_4, DeclStmt target_5, FunctionCall target_6, UnaryMinusExpr target_7, ExprStmt target_8, IfStmt target_9, ExprStmt target_10, IfStmt target_11, ExprStmt target_12, IfStmt target_13, ReturnStmt target_14, ExprStmt target_15, GotoStmt target_16, BlockStmt target_17, AddressOfExpr target_18
where
func_0(func, target_0)
and func_1(vipgre_protocol, target_17, target_18, target_1)
and func_3(vipgre_tap_ops, target_3)
and func_4(vipgre_protocol, target_4)
and func_5(func, target_5)
and func_6(func, target_6)
and func_7(func, target_7)
and func_8(verr_1664, vipgre_net_ops, func, target_8)
and func_9(verr_1664, func, target_9)
and func_10(verr_1664, vipgre_link_ops, func, target_10)
and func_11(verr_1664, func, target_11)
and func_12(verr_1664, func, target_12)
and func_13(verr_1664, func, target_13)
and func_14(verr_1664, func, target_14)
and func_15(func, target_15)
and func_16(func, target_16)
and func_17(func, target_17)
and func_18(vipgre_protocol, target_18)
and verr_1664.getType().hasName("int")
and vipgre_net_ops.getType().hasName("pernet_operations")
and vipgre_link_ops.getType().hasName("rtnl_link_ops")
and vipgre_tap_ops.getType().hasName("rtnl_link_ops")
and vipgre_protocol.getType().hasName("const net_protocol")
and verr_1664.(LocalVariable).getFunction() = func
and not vipgre_net_ops.getParentScope+() = func
and not vipgre_link_ops.getParentScope+() = func
and not vipgre_tap_ops.getParentScope+() = func
and not vipgre_protocol.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
