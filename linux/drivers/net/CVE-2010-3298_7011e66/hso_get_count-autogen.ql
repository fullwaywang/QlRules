/**
 * @name linux-7011e660938fc44ed86319c18a5954e95a82ab3e-hso_get_count
 * @id cpp/linux/7011e660938fc44ed86319c18a5954e95a82ab3e/hso-get-count
 * @description linux-7011e660938fc44ed86319c18a5954e95a82ab3e-drivers/net/usb/hso.c-hso_get_count CVE-2010-3298
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vicount_1651, ExprStmt target_2, Function func) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("memset")
		and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vicount_1651
		and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_0.getExpr().(FunctionCall).getArgument(2).(SizeofTypeOperator).getType() instanceof LongType
		and target_0.getExpr().(FunctionCall).getArgument(2).(SizeofTypeOperator).getValue()="80"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vicount_1651, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="cts"
		and target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vicount_1651
		and target_2.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getTarget().getName()="cts"
		and target_2.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("uart_icount")
}

from Function func, Variable vicount_1651, ExprStmt target_2
where
not func_0(vicount_1651, target_2, func)
and func_2(vicount_1651, target_2)
and vicount_1651.getType().hasName("serial_icounter_struct")
and vicount_1651.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
