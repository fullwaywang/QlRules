/**
 * @name linux-42cb14b110a5698ccf26ce59c4441722605a3743-migrate_page_move_mapping
 * @id cpp/linux/42cb14b110a5698ccf26ce59c4441722605a3743/migrate-page-move-mapping
 * @description linux-42cb14b110a5698ccf26ce59c4441722605a3743-mm/migrate.c-migrate_page_move_mapping CVE-2016-3070
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vmapping_311, FunctionCall target_0) {
		target_0.getTarget().hasName("spin_unlock_irq")
		and not target_0.getTarget().hasName("spin_unlock")
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="tree_lock"
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmapping_311
}

predicate func_1(Parameter vpage_312, FunctionCall target_1) {
		target_1.getTarget().hasName("__dec_zone_page_state")
		and not target_1.getTarget().hasName("ClearPageDirty")
		and target_1.getArgument(0).(VariableAccess).getTarget()=vpage_312
		and target_1.getArgument(1) instanceof EnumConstantAccess
}

predicate func_2(Parameter vnewpage_312, FunctionCall target_2) {
		target_2.getTarget().hasName("__inc_zone_page_state")
		and not target_2.getTarget().hasName("SetPageDirty")
		and target_2.getArgument(0).(VariableAccess).getTarget()=vnewpage_312
		and target_2.getArgument(1) instanceof EnumConstantAccess
}

predicate func_3(Parameter vpage_312, FunctionCall target_3) {
		target_3.getTarget().hasName("__dec_zone_page_state")
		and not target_3.getTarget().hasName("__dec_zone_state")
		and target_3.getArgument(0).(VariableAccess).getTarget()=vpage_312
		and target_3.getArgument(1) instanceof EnumConstantAccess
}

predicate func_4(Parameter vnewpage_312, FunctionCall target_4) {
		target_4.getTarget().hasName("__inc_zone_page_state")
		and not target_4.getTarget().hasName("__inc_zone_state")
		and target_4.getArgument(0).(VariableAccess).getTarget()=vnewpage_312
		and target_4.getArgument(1) instanceof EnumConstantAccess
}

predicate func_5(Parameter vpage_312, LogicalAndExpr target_22) {
	exists(AssignExpr target_5 |
		target_5.getLValue().(VariableAccess).getType().hasName("zone *")
		and target_5.getRValue().(FunctionCall).getTarget().hasName("page_zone")
		and target_5.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_312
		and target_5.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_22.getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_6(Parameter vnewpage_312, ExprStmt target_23) {
	exists(AssignExpr target_6 |
		target_6.getLValue().(VariableAccess).getType().hasName("zone *")
		and target_6.getRValue().(FunctionCall).getTarget().hasName("page_zone")
		and target_6.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vnewpage_312
		and target_23.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_6.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_7(Parameter vpage_312, LogicalAndExpr target_22, Function func) {
	exists(ExprStmt target_7 |
		target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
		and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("PageDirty")
		and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_312
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_7
		and target_22.getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_10(Parameter vmapping_311, Parameter vpage_312, AddressOfExpr target_25, LogicalAndExpr target_22, Function func) {
	exists(IfStmt target_10 |
		target_10.getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getType().hasName("zone *")
		and target_10.getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getType().hasName("zone *")
		and target_10.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__dec_zone_state")
		and target_10.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("zone *")
		and target_10.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1) instanceof EnumConstantAccess
		and target_10.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__inc_zone_state")
		and target_10.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("zone *")
		and target_10.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1) instanceof EnumConstantAccess
		and target_10.getThen().(BlockStmt).getStmt(2).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getTarget().hasName("PageSwapBacked")
		and target_10.getThen().(BlockStmt).getStmt(2).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_312
		and target_10.getThen().(BlockStmt).getStmt(2).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("PageSwapCache")
		and target_10.getThen().(BlockStmt).getStmt(2).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_312
		and target_10.getThen().(BlockStmt).getStmt(2).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__dec_zone_state")
		and target_10.getThen().(BlockStmt).getStmt(2).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("zone *")
		and target_10.getThen().(BlockStmt).getStmt(2).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1) instanceof EnumConstantAccess
		and target_10.getThen().(BlockStmt).getStmt(2).(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__inc_zone_state")
		and target_10.getThen().(BlockStmt).getStmt(2).(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("zone *")
		and target_10.getThen().(BlockStmt).getStmt(2).(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1) instanceof EnumConstantAccess
		and target_10.getThen().(BlockStmt).getStmt(3).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(VariableAccess).getType().hasName("int")
		and target_10.getThen().(BlockStmt).getStmt(3).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getTarget().hasName("mapping_cap_account_dirty")
		and target_10.getThen().(BlockStmt).getStmt(3).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmapping_311
		and target_10.getThen().(BlockStmt).getStmt(3).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__dec_zone_state")
		and target_10.getThen().(BlockStmt).getStmt(3).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("zone *")
		and target_10.getThen().(BlockStmt).getStmt(3).(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__inc_zone_state")
		and target_10.getThen().(BlockStmt).getStmt(3).(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("zone *")
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_10
		and target_25.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_10.getThen().(BlockStmt).getStmt(3).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_22.getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_10.getThen().(BlockStmt).getStmt(2).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_13(Function func) {
	exists(DoStmt target_13 |
		target_13.getCondition().(Literal).getValue()="0"
		and target_13.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("trace_hardirqs_on")
		and target_13.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("arch_local_irq_enable")
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_13)
}

predicate func_14(Parameter vpage_312, VariableAccess target_14) {
		target_14.getTarget()=vpage_312
		and target_14.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_16(Parameter vnewpage_312, VariableAccess target_16) {
		target_16.getTarget()=vnewpage_312
		and target_16.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_18(Parameter vpage_312, VariableAccess target_18) {
		target_18.getTarget()=vpage_312
		and target_18.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_20(Parameter vnewpage_312, VariableAccess target_20) {
		target_20.getTarget()=vnewpage_312
		and target_20.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_22(Parameter vpage_312, LogicalAndExpr target_22) {
		target_22.getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("PageSwapCache")
		and target_22.getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_312
		and target_22.getAnOperand().(FunctionCall).getTarget().hasName("PageSwapBacked")
		and target_22.getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_312
}

predicate func_23(Parameter vnewpage_312, ExprStmt target_23) {
		target_23.getExpr().(FunctionCall).getTarget().hasName("radix_tree_replace_slot")
		and target_23.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("void **")
		and target_23.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vnewpage_312
}

predicate func_25(Parameter vmapping_311, AddressOfExpr target_25) {
		target_25.getOperand().(PointerFieldAccess).getTarget().getName()="tree_lock"
		and target_25.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmapping_311
		and target_25.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

from Function func, Parameter vmapping_311, Parameter vnewpage_312, Parameter vpage_312, FunctionCall target_0, FunctionCall target_1, FunctionCall target_2, FunctionCall target_3, FunctionCall target_4, VariableAccess target_14, VariableAccess target_16, VariableAccess target_18, VariableAccess target_20, LogicalAndExpr target_22, ExprStmt target_23, AddressOfExpr target_25
where
func_0(vmapping_311, target_0)
and func_1(vpage_312, target_1)
and func_2(vnewpage_312, target_2)
and func_3(vpage_312, target_3)
and func_4(vnewpage_312, target_4)
and not func_5(vpage_312, target_22)
and not func_6(vnewpage_312, target_23)
and not func_7(vpage_312, target_22, func)
and not func_10(vmapping_311, vpage_312, target_25, target_22, func)
and not func_13(func)
and func_14(vpage_312, target_14)
and func_16(vnewpage_312, target_16)
and func_18(vpage_312, target_18)
and func_20(vnewpage_312, target_20)
and func_22(vpage_312, target_22)
and func_23(vnewpage_312, target_23)
and func_25(vmapping_311, target_25)
and vmapping_311.getType().hasName("address_space *")
and vnewpage_312.getType().hasName("page *")
and vpage_312.getType().hasName("page *")
and vmapping_311.getFunction() = func
and vnewpage_312.getFunction() = func
and vpage_312.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
