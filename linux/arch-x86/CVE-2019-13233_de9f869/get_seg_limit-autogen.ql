/**
 * @name linux-de9f869616dd95e95c00bdd6b0fcd3421e8a4323-get_seg_limit
 * @id cpp/linux/de9f869616dd95e95c00bdd6b0fcd3421e8a4323/get-seg-limit
 * @description linux-de9f869616dd95e95c00bdd6b0fcd3421e8a4323-arch/x86/lib/insn-eval.c-get_seg_limit CVE-2019-13233
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Variable vdesc_695, ExprStmt target_11, IfStmt target_1) {
	target_1.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vdesc_695
	and target_1.getThen().(ReturnStmt).getExpr().(Literal).getValue()="0"
	and target_11.getLocation().isBefore(target_1.getLocation())
}

predicate func_2(Variable vdesc_695, Variable vsel_697, ReturnStmt target_12, ExprStmt target_11, NotExpr target_13) {
exists(FunctionCall target_2 |
	target_2.getTarget().hasName("get_desc")
	and target_2.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vdesc_695
	and target_2.getArgument(1).(VariableAccess).getTarget()=vsel_697
	and target_2.getParent().(NotExpr).getOperand().(VariableAccess).getTarget()=vdesc_695
	and target_2.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_12
	and target_2.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_13.getOperand().(VariableAccess).getLocation()))
}

predicate func_3(Variable vdesc_695, NotExpr target_13, ExprStmt target_8) {
exists(AddressOfExpr target_3 |
	target_3.getOperand().(VariableAccess).getTarget()=vdesc_695
	and target_3.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("get_desc_limit")
	and target_3.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdesc_695
	and target_13.getOperand().(VariableAccess).getLocation().isBefore(target_3.getOperand().(VariableAccess).getLocation())
	and target_3.getOperand().(VariableAccess).getLocation().isBefore(target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_4(Variable vdesc_695, ExprStmt target_8, IfStmt target_14) {
exists(ValueFieldAccess target_4 |
	target_4.getTarget().getName()="g"
	and target_4.getQualifier().(VariableAccess).getTarget()=vdesc_695
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getQualifier().(VariableAccess).getLocation())
	and target_4.getQualifier().(VariableAccess).getLocation().isBefore(target_14.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_5(Variable vsel_697, VariableAccess target_5) {
	target_5.getTarget()=vsel_697
	and target_5.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_6(Variable vdesc_695, Variable vsel_697, AssignExpr target_6) {
	target_6.getLValue().(VariableAccess).getTarget()=vdesc_695
	and target_6.getRValue().(FunctionCall).getTarget().hasName("get_desc")
	and target_6.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsel_697
}

predicate func_7(Variable vdesc_695, ReturnStmt target_12, VariableAccess target_7) {
	target_7.getTarget()=vdesc_695
	and target_7.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_12
}

predicate func_8(Variable vdesc_695, Variable vlimit_696, Function func, ExprStmt target_8) {
	target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vlimit_696
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("get_desc_limit")
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdesc_695
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_8
}

/*predicate func_9(Variable vdesc_695, VariableAccess target_9) {
	target_9.getTarget()=vdesc_695
	and target_9.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("get_desc_limit")
}

*/
predicate func_10(Variable vdesc_695, PointerFieldAccess target_10) {
	target_10.getTarget().getName()="g"
	and target_10.getQualifier().(VariableAccess).getTarget()=vdesc_695
}

predicate func_11(Function func, ExprStmt target_11) {
	target_11.getExpr() instanceof AssignExpr
	and target_11.getEnclosingFunction() = func
}

predicate func_12(NotExpr target_13, Function func, ReturnStmt target_12) {
	target_12.getExpr().(Literal).getValue()="0"
	and target_12.getParent().(IfStmt).getCondition()=target_13
	and target_12.getEnclosingFunction() = func
}

predicate func_13(Variable vdesc_695, NotExpr target_13) {
	target_13.getOperand().(VariableAccess).getTarget()=vdesc_695
}

predicate func_14(Variable vdesc_695, Variable vlimit_696, IfStmt target_14) {
	target_14.getCondition().(PointerFieldAccess).getTarget().getName()="g"
	and target_14.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdesc_695
	and target_14.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vlimit_696
	and target_14.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(AddExpr).getLeftOperand().(BinaryBitwiseOperation).getLeftOperand().(VariableAccess).getTarget()=vlimit_696
	and target_14.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(AddExpr).getLeftOperand().(BinaryBitwiseOperation).getRightOperand().(Literal).getValue()="12"
	and target_14.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(AddExpr).getRightOperand().(HexLiteral).getValue()="4095"
}

from Function func, Variable vdesc_695, Variable vlimit_696, Variable vsel_697, IfStmt target_1, VariableAccess target_5, AssignExpr target_6, VariableAccess target_7, ExprStmt target_8, PointerFieldAccess target_10, ExprStmt target_11, ReturnStmt target_12, NotExpr target_13, IfStmt target_14
where
func_1(vdesc_695, target_11, target_1)
and not func_2(vdesc_695, vsel_697, target_12, target_11, target_13)
and not func_3(vdesc_695, target_13, target_8)
and not func_4(vdesc_695, target_8, target_14)
and func_5(vsel_697, target_5)
and func_6(vdesc_695, vsel_697, target_6)
and func_7(vdesc_695, target_12, target_7)
and func_8(vdesc_695, vlimit_696, func, target_8)
and func_10(vdesc_695, target_10)
and func_11(func, target_11)
and func_12(target_13, func, target_12)
and func_13(vdesc_695, target_13)
and func_14(vdesc_695, vlimit_696, target_14)
and vdesc_695.getType().hasName("desc_struct *")
and vlimit_696.getType().hasName("unsigned long")
and vsel_697.getType().hasName("short")
and vdesc_695.(LocalVariable).getFunction() = func
and vlimit_696.(LocalVariable).getFunction() = func
and vsel_697.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
