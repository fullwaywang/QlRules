commit 3edf9ce1a7dd2e20d517ccb8c36ef2ac5c0bead4	3edf9ce1a7dd2e20d517ccb8c36ef2ac5c0bead4
Author: Peter Kvitek <kvitekp@chromium.org>
Date:   Sat Feb 25 00:33:56 2023 +0000

    [devtools] Fixed potential UAF in simple CDP protocol
    
    SimpleDevToolsProtocolClient posts task to itself, however since it does
    not control its own lifecycle, it could be destroyed before the task is
    dispatched.
    
    Bug: 1417649
    Change-Id: I92079214da01f4961bc66dba1bc436078adf1ce1
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4291481
    Reviewed-by: Andrey Kosyakov <caseq@chromium.org>
    Auto-Submit: Peter Kvitek <kvitekp@chromium.org>
    Commit-Queue: Peter Kvitek <kvitekp@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1109904}

diff --git a/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client.cc b/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client.cc
index af291a04dc6e3..e74bfcf8a2679 100644
--- a/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client.cc
+++ b/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client.cc
@@ -39,7 +39,6 @@ int g_next_message_id = 0;
 }  // namespace
 
 SimpleDevToolsProtocolClient::SimpleDevToolsProtocolClient() = default;
-
 SimpleDevToolsProtocolClient::SimpleDevToolsProtocolClient(
     const std::string& session_id)
     : session_id_(session_id) {}
@@ -104,7 +103,7 @@ void SimpleDevToolsProtocolClient::DispatchProtocolMessage(
           FROM_HERE,
           base::BindOnce(
               &SimpleDevToolsProtocolClient::DispatchProtocolMessageTask,
-              base::Unretained(it->second), std::move(message)));
+              it->second->GetWeakPtr(), std::move(message)));
       return;
     }
   }
@@ -112,7 +111,7 @@ void SimpleDevToolsProtocolClient::DispatchProtocolMessage(
   content::GetUIThreadTaskRunner({})->PostTask(
       FROM_HERE,
       base::BindOnce(&SimpleDevToolsProtocolClient::DispatchProtocolMessageTask,
-                     base::Unretained(this), std::move(message)));
+                     GetWeakPtr(), std::move(message)));
 }
 
 void SimpleDevToolsProtocolClient::AgentHostClosed(
@@ -254,4 +253,9 @@ bool SimpleDevToolsProtocolClient::HasEventHandler(
   return handler != handlers.cend();
 }
 
+base::WeakPtr<SimpleDevToolsProtocolClient>
+SimpleDevToolsProtocolClient::GetWeakPtr() {
+  return weak_ptr_factory_.GetWeakPtr();
+}
+
 }  // namespace simple_devtools_protocol_client
\ No newline at end of file
diff --git a/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client.h b/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client.h
index 87ec1199e7cc0..d958d4519b334 100644
--- a/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client.h
+++ b/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client.h
@@ -14,6 +14,7 @@
 #include "base/functional/callback.h"
 #include "base/memory/raw_ptr.h"
 #include "base/memory/scoped_refptr.h"
+#include "base/memory/weak_ptr.h"
 #include "base/values.h"
 #include "content/public/browser/devtools_agent_host.h"
 
@@ -66,13 +67,16 @@ class SimpleDevToolsProtocolClient : public content::DevToolsAgentHostClient {
                                base::span<const uint8_t> json_message) override;
   void AgentHostClosed(content::DevToolsAgentHost* agent_host) override;
 
-  void DispatchProtocolMessageTask(base::Value::Dict message);
+  // Virtual for tests.
+  virtual void DispatchProtocolMessageTask(base::Value::Dict message);
 
   void SendProtocolMessage(base::Value::Dict message);
 
   bool HasEventHandler(const std::string& event_name,
                        const EventCallback& event_callback);
 
+  base::WeakPtr<SimpleDevToolsProtocolClient> GetWeakPtr();
+
   const std::string session_id_;
   base::raw_ptr<SimpleDevToolsProtocolClient> parent_client_ = nullptr;
   base::flat_map<std::string, SimpleDevToolsProtocolClient*> sessions_;
@@ -80,6 +84,8 @@ class SimpleDevToolsProtocolClient : public content::DevToolsAgentHostClient {
   scoped_refptr<content::DevToolsAgentHost> agent_host_;
   base::flat_map<int, ResponseCallback> pending_response_map_;
   base::flat_map<std::string, std::vector<EventCallback>> event_handler_map_;
+
+  base::WeakPtrFactory<SimpleDevToolsProtocolClient> weak_ptr_factory_{this};
 };
 
 }  // namespace simple_devtools_protocol_client
diff --git a/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client_unittest.cc b/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client_unittest.cc
index d81e2a9547a81..6167185dce218 100644
--- a/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client_unittest.cc
+++ b/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client_unittest.cc
@@ -7,6 +7,7 @@
 #include <string>
 #include <vector>
 
+#include "base/containers/span.h"
 #include "base/json/json_writer.h"
 #include "base/memory/raw_ptr.h"
 #include "base/memory/ref_counted_memory.h"
@@ -22,6 +23,8 @@ using testing::ElementsAre;
 
 namespace simple_devtools_protocol_client {
 
+namespace {
+
 class SimpleDevToolsProtocolClientTest : public SimpleDevToolsProtocolClient,
                                          public testing::Test {
  public:
@@ -345,4 +348,32 @@ TEST_F(SimpleDevToolsProtocolClientEventHandlerNestedRemoveTest,
   EXPECT_THAT(received_events_, ElementsAre("event"));
 }
 
+class SelfDestructingSimpleDevToolsProtocolClient
+    : public SimpleDevToolsProtocolClient {
+ public:
+  void TryIt() {
+    std::string json_message = "{}";
+    SimpleDevToolsProtocolClient::DispatchProtocolMessage(
+        agent_host_.get(), base::as_bytes(base::make_span(json_message)));
+
+    // Delete self so that the task posted by the previous call has nowhere to
+    // go.
+    delete this;
+  }
+
+  void DispatchProtocolMessageTask(base::Value::Dict message) override {
+    CHECK(false) << "use-after-free";
+  }
+};
+
+TEST(SimpleDevToolsProtocolClientTest, DestoroyClientInFlight) {
+  content::BrowserTaskEnvironment task_environment;
+
+  (new SelfDestructingSimpleDevToolsProtocolClient)->TryIt();
+
+  task_environment.RunUntilIdle();
+}
+
+}  // namespace
+
 }  // namespace simple_devtools_protocol_client
