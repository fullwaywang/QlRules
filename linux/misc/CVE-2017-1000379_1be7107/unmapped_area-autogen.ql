/**
 * @name linux-1be7107fbe18eed3e319a6c3e83c78254b693acb-unmapped_area
 * @id cpp/linux/1be7107fbe18eed3e319a6c3e83c78254b693acb/unmapped-area
 * @description linux-1be7107fbe18eed3e319a6c3e83c78254b693acb-arch/frv/mm/elf-fdpic.c-unmapped_area CVE-2017-1000379
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vvma_1764, LogicalAndExpr target_12) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("vm_start_gap")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vvma_1764
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_12.getRightOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vvma_1764, ValueFieldAccess target_13) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("vm_end_gap")
	and target_1.getArgument(0).(PointerFieldAccess).getTarget().getName()="vm_prev"
	and target_1.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1764
	and target_1.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_13.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vvma_1764, ExprStmt target_14) {
exists(FunctionCall target_2 |
	target_2.getTarget().hasName("vm_end_gap")
	and target_2.getArgument(0).(PointerFieldAccess).getTarget().getName()="vm_prev"
	and target_2.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1764
	and target_2.getParent().(AssignExpr).getRValue() = target_2
	and target_2.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_2.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_14.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_3(Variable vvma_1764) {
exists(FunctionCall target_3 |
	target_3.getTarget().hasName("vm_start_gap")
	and target_3.getArgument(0).(VariableAccess).getTarget()=vvma_1764
	and target_3.getParent().(AssignExpr).getRValue() = target_3
	and target_3.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned long"))
}

predicate func_4(Variable vvma_1764, PointerFieldAccess target_4) {
	target_4.getTarget().getName()="vm_prev"
	and target_4.getQualifier().(VariableAccess).getTarget()=vvma_1764
}

predicate func_5(Variable vvma_1764, PointerFieldAccess target_5) {
	target_5.getTarget().getName()="vm_prev"
	and target_5.getQualifier().(VariableAccess).getTarget()=vvma_1764
}

predicate func_6(Variable vvma_1764, VariableAccess target_6) {
	target_6.getTarget()=vvma_1764
}

predicate func_7(Variable vvma_1764, VariableAccess target_7) {
	target_7.getTarget()=vvma_1764
}

predicate func_8(Variable vvma_1764, LogicalAndExpr target_12, PointerFieldAccess target_8) {
	target_8.getTarget().getName()="vm_start"
	and target_8.getQualifier().(VariableAccess).getTarget()=vvma_1764
	and target_8.getQualifier().(VariableAccess).getLocation().isBefore(target_12.getRightOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_9(Variable vvma_1764, ValueFieldAccess target_13, PointerFieldAccess target_9) {
	target_9.getTarget().getName()="vm_end"
	and target_9.getQualifier().(PointerFieldAccess).getTarget().getName()="vm_prev"
	and target_9.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1764
	and target_9.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_13.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_10(Variable vvma_1764, ExprStmt target_14, PointerFieldAccess target_10) {
	target_10.getTarget().getName()="vm_end"
	and target_10.getQualifier().(PointerFieldAccess).getTarget().getName()="vm_prev"
	and target_10.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1764
	and target_10.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_14.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_11(Variable vvma_1764, PointerFieldAccess target_11) {
	target_11.getTarget().getName()="vm_start"
	and target_11.getQualifier().(VariableAccess).getTarget()=vvma_1764
}

predicate func_12(Variable vvma_1764, LogicalAndExpr target_12) {
	target_12.getLeftOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_12.getLeftOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_12.getRightOperand().(ValueFieldAccess).getTarget().getName()="rb_left"
	and target_12.getRightOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="vm_rb"
	and target_12.getRightOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1764
}

predicate func_13(Variable vvma_1764, ValueFieldAccess target_13) {
	target_13.getTarget().getName()="rb_right"
	and target_13.getQualifier().(PointerFieldAccess).getTarget().getName()="vm_rb"
	and target_13.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1764
}

predicate func_14(Variable vvma_1764, EqualityOperation target_15, ExprStmt target_14) {
	target_14.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_14.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="vm_start"
	and target_14.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1764
	and target_14.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_15
}

predicate func_15(Variable vvma_1764, EqualityOperation target_15) {
	target_15.getLeftOperand().(VariableAccess).getTarget().getType().hasName("rb_node *")
	and target_15.getRightOperand().(ValueFieldAccess).getTarget().getName()="rb_left"
	and target_15.getRightOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="vm_rb"
	and target_15.getRightOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1764
}

from Function func, Variable vvma_1764, PointerFieldAccess target_4, PointerFieldAccess target_5, VariableAccess target_6, VariableAccess target_7, PointerFieldAccess target_8, PointerFieldAccess target_9, PointerFieldAccess target_10, PointerFieldAccess target_11, LogicalAndExpr target_12, ValueFieldAccess target_13, ExprStmt target_14, EqualityOperation target_15
where
not func_0(vvma_1764, target_12)
and not func_1(vvma_1764, target_13)
and not func_2(vvma_1764, target_14)
and not func_3(vvma_1764)
and func_4(vvma_1764, target_4)
and func_5(vvma_1764, target_5)
and func_6(vvma_1764, target_6)
and func_7(vvma_1764, target_7)
and func_8(vvma_1764, target_12, target_8)
and func_9(vvma_1764, target_13, target_9)
and func_10(vvma_1764, target_14, target_10)
and func_11(vvma_1764, target_11)
and func_12(vvma_1764, target_12)
and func_13(vvma_1764, target_13)
and func_14(vvma_1764, target_15, target_14)
and func_15(vvma_1764, target_15)
and vvma_1764.getType().hasName("vm_area_struct *")
and vvma_1764.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
