/**
 * @name linux-7a49389771ae7666f4dc3426e2a4594bf23ae290-node_dirty_limit
 * @id cpp/linux/7a49389771ae7666f4dc3426e2a4594bf23ae290/node-dirty-limit
 * @description linux-7a49389771ae7666f4dc3426e2a4594bf23ae290-mm/page-writeback.c-node_dirty_limit CVE-2024-42131
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdirty_480, ReturnStmt target_2) {
exists(BuiltInChooseExpr target_0 |
	exists(ConditionalExpr obj_0 | obj_0=target_0.getChild(1) |
		exists(RelationalOperation obj_1 | obj_1=obj_0.getCondition() |
			obj_1.getLesserOperand().(VariableAccess).getTarget()=vdirty_480
			and obj_1.getGreaterOperand().(ComplementExpr).getValue()="4294967295"
		)
		and obj_0.getThen().(VariableAccess).getTarget()=vdirty_480
		and obj_0.getElse().(ComplementExpr).getValue()="4294967295"
	)
	and exists(StmtExpr obj_2 | obj_2=target_0.getChild(2) |
		exists(BlockStmt obj_3 | obj_3=obj_2.getStmt() |
			exists(ExprStmt obj_4 | obj_4=obj_3.getStmt(2) |
				exists(ConditionalExpr obj_5 | obj_5=obj_4.getExpr() |
					exists(RelationalOperation obj_6 | obj_6=obj_5.getCondition() |
						obj_6.getLesserOperand().(VariableAccess).getType().hasName("unsigned long")
						and obj_6.getGreaterOperand().(VariableAccess).getType().hasName("unsigned long")
					)
					and obj_5.getThen().(VariableAccess).getType().hasName("unsigned long")
					and obj_5.getElse().(VariableAccess).getType().hasName("unsigned long")
				)
			)
		)
	)
	and target_0.getChild(0).(LogicalAndExpr).getValue()="0"
	and target_0.getChild(1).(ConditionalExpr).getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_2.getExpr().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vdirty_480, VariableAccess target_1) {
	target_1.getTarget()=vdirty_480
}

predicate func_2(Variable vdirty_480, ReturnStmt target_2) {
	target_2.getExpr().(VariableAccess).getTarget()=vdirty_480
}

from Function func, Variable vdirty_480, VariableAccess target_1, ReturnStmt target_2
where
not func_0(vdirty_480, target_2)
and func_1(vdirty_480, target_1)
and func_2(vdirty_480, target_2)
and vdirty_480.getType().hasName("unsigned long")
and vdirty_480.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
