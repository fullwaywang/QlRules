/**
 * @name linux-66e7650dbbb8e236e781c670b167edc81e771450-ctnetlink_del_expect
 * @id cpp/linux/66e7650dbbb8e236e781c670b167edc81e771450/ctnetlink-del-expect
 * @description linux-66e7650dbbb8e236e781c670b167edc81e771450-net/netfilter/nf_conntrack_netlink.c-ctnetlink_del_expect CVE-2024-44944
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vexp_3084, BlockStmt target_4, ExprStmt target_5) {
exists(FunctionCall target_0 |
	exists(NEExpr obj_0 | obj_0=target_0.getParent() |
		obj_0.getLeftOperand() instanceof FunctionCall
		and obj_0.getRightOperand().(VariableAccess).getTarget()=vexp_3084
		and obj_0.getParent().(IfStmt).getThen()=target_4
	)
	and target_0.getTarget().hasName("nf_expect_get_id")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vexp_3084
	and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_1(Variable vid_3108, VariableAccess target_1) {
	target_1.getTarget()=vid_3108
	and target_1.getParent().(FunctionCall).getParent().(NEExpr).getLeftOperand() instanceof FunctionCall
}

predicate func_2(Variable vexp_3084, BlockStmt target_4, VariableAccess target_2) {
	exists(NEExpr obj_0 | obj_0=target_2.getParent() |
		obj_0.getLeftOperand() instanceof FunctionCall
		and obj_0.getParent().(IfStmt).getThen()=target_4
	)
	and target_2.getTarget()=vexp_3084
}

predicate func_3(Variable vexp_3084, Variable vid_3108, BlockStmt target_4, FunctionCall target_3) {
	exists(NEExpr obj_0 | obj_0=target_3.getParent() |
		obj_0.getRightOperand().(VariableAccess).getTarget()=vexp_3084
		and obj_0.getParent().(IfStmt).getThen()=target_4
	)
	and target_3.getTarget().hasName("__builtin_bswap32")
	and target_3.getArgument(0).(VariableAccess).getTarget()=vid_3108
}

predicate func_4(Variable vexp_3084, BlockStmt target_4) {
	exists(ExprStmt obj_0 | obj_0=target_4.getStmt(0) |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("nf_ct_expect_put")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vexp_3084
		)
	)
	and target_4.getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-2"
}

predicate func_5(Variable vexp_3084, EqualityOperation target_6, ExprStmt target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getExpr() |
		obj_0.getTarget().hasName("nf_ct_expect_put")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vexp_3084
	)
	and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_6(Variable vexp_3084, EqualityOperation target_6) {
	target_6.getLeftOperand() instanceof FunctionCall
	and target_6.getRightOperand().(VariableAccess).getTarget()=vexp_3084
}

from Function func, Variable vexp_3084, Variable vid_3108, VariableAccess target_1, VariableAccess target_2, FunctionCall target_3, BlockStmt target_4, ExprStmt target_5, EqualityOperation target_6
where
not func_0(vexp_3084, target_4, target_5)
and func_1(vid_3108, target_1)
and func_2(vexp_3084, target_4, target_2)
and func_3(vexp_3084, vid_3108, target_4, target_3)
and func_4(vexp_3084, target_4)
and func_5(vexp_3084, target_6, target_5)
and func_6(vexp_3084, target_6)
and vexp_3084.getType().hasName("nf_conntrack_expect *")
and vid_3108.getType().hasName("__be32")
and vexp_3084.(LocalVariable).getFunction() = func
and vid_3108.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
