/**
 * @name linux-371528c-mem_cgroup_usage_unregister_event
 * @id cpp/linux/371528c/mem-cgroup-usage-unregister-event
 * @description linux-371528c-mm/memcontrol.c-mem_cgroup_usage_unregister_event CVE-2012-1146
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vthresholds_4397, NotExpr target_1, RelationalOperation target_2, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="primary"
		and target_0.getCondition().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vthresholds_4397
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_1.getOperand().(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_0.getCondition().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getGreaterOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vthresholds_4397, NotExpr target_1) {
		target_1.getOperand().(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vthresholds_4397
}

predicate func_2(Variable vthresholds_4397, BlockStmt target_3, RelationalOperation target_2) {
		 (target_2 instanceof GTExpr or target_2 instanceof LTExpr)
		and target_2.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getGreaterOperand().(PointerFieldAccess).getTarget().getName()="size"
		and target_2.getGreaterOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="primary"
		and target_2.getGreaterOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vthresholds_4397
		and target_2.getParent().(ForStmt).getStmt()=target_3
}

predicate func_3(Function func, BlockStmt target_3) {
		target_3.getStmt(0).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(ValueFieldAccess).getTarget().getName()="eventfd"
		and target_3.getStmt(0).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="entries"
		and target_3.getStmt(0).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="primary"
		and target_3.getStmt(0).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
		and target_3.getStmt(0).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("eventfd_ctx *")
		and target_3.getStmt(0).(IfStmt).getThen().(ExprStmt).getExpr().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_3.getEnclosingFunction() = func
}

from Function func, Variable vthresholds_4397, NotExpr target_1, RelationalOperation target_2, BlockStmt target_3
where
not func_0(vthresholds_4397, target_1, target_2, func)
and func_1(vthresholds_4397, target_1)
and func_2(vthresholds_4397, target_3, target_2)
and func_3(func, target_3)
and vthresholds_4397.getType().hasName("mem_cgroup_thresholds *")
and vthresholds_4397.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
