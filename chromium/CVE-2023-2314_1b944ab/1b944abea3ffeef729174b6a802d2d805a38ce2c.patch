commit 1b944abea3ffeef729174b6a802d2d805a38ce2c	1b944abea3ffeef729174b6a802d2d805a38ce2c
Author: Danil Somsikov <dsv@chromium.org>
Date:   Fri Dec 16 13:38:27 2022 +0000

    Disallow GET, POST and OPTIONS for /json/new
    
    Bug: 813542
    Change-Id: I26394df661adb39f07045854366223236a1eeecb
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4110715
    Auto-Submit: Danil Somsikov <dsv@chromium.org>
    Reviewed-by: Alex Rudenko <alexrudenko@chromium.org>
    Commit-Queue: Danil Somsikov <dsv@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1084279}

diff --git a/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client_unittest.cc b/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client_unittest.cc
index d70619b597f7f..d81e2a9547a81 100644
--- a/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client_unittest.cc
+++ b/components/devtools/simple_devtools_protocol_client/simple_devtools_protocol_client_unittest.cc
@@ -14,6 +14,7 @@
 #include "base/values.h"
 #include "content/public/browser/devtools_agent_host.h"
 #include "content/public/test/browser_task_environment.h"
+#include "content/public/test/mock_devtools_agent_host.h"
 #include "testing/gmock/include/gmock/gmock.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
@@ -21,72 +22,11 @@ using testing::ElementsAre;
 
 namespace simple_devtools_protocol_client {
 
-class MockDevToolsAgentHost : public content::DevToolsAgentHost {
- public:
-  MockDevToolsAgentHost() = default;
-
-  // content::DevToolsAgentHost
-  std::string CreateIOStreamFromData(
-      scoped_refptr<base::RefCountedMemory>) override {
-    return std::string();
-  }
-  bool AttachClient(content::DevToolsAgentHostClient* client) override {
-    DCHECK(!client_);
-    client_ = client;
-    return true;
-  }
-  bool AttachClientWithoutWakeLock(
-      content::DevToolsAgentHostClient* client) override {
-    return AttachClient(client);
-  }
-  bool DetachClient(content::DevToolsAgentHostClient* client) override {
-    if (client != client_)
-      return false;
-    client_ = nullptr;
-    return true;
-  }
-  bool IsAttached() override { return client_ != nullptr; }
-  void DispatchProtocolMessage(content::DevToolsAgentHostClient* client,
-                               base::span<const uint8_t> message) override {
-    DCHECK_EQ(client, client_);
-    client->DispatchProtocolMessage(this, message);
-  }
-  void InspectElement(content::RenderFrameHost* frame_host,
-                      int x,
-                      int y) override {}
-  std::string GetId() override { return std::string(); }
-  std::string GetParentId() override { return std::string(); }
-  std::string GetOpenerId() override { return std::string(); }
-  bool CanAccessOpener() override { return true; }
-  std::string GetOpenerFrameId() override { return std::string(); }
-  content::WebContents* GetWebContents() override { return nullptr; }
-  content::BrowserContext* GetBrowserContext() override { return nullptr; }
-  void DisconnectWebContents() override {}
-  void ConnectWebContents(content::WebContents* web_contents) override {}
-  std::string GetType() override { return std::string(); }
-  std::string GetTitle() override { return std::string(); }
-  std::string GetDescription() override { return std::string(); }
-  GURL GetURL() override { return GURL(); }
-  GURL GetFaviconURL() override { return GURL(); }
-  std::string GetFrontendURL() override { return std::string(); }
-  bool Activate() override { return true; }
-  void Reload() override {}
-  bool Close() override { return true; }
-  base::TimeTicks GetLastActivityTime() override { return base::TimeTicks(); }
-  content::RenderProcessHost* GetProcessHost() override { return nullptr; }
-  void ForceDetachAllSessions() override {}
-
- protected:
-  ~MockDevToolsAgentHost() override = default;
-
-  base::raw_ptr<content::DevToolsAgentHostClient> client_ = nullptr;
-};
-
 class SimpleDevToolsProtocolClientTest : public SimpleDevToolsProtocolClient,
                                          public testing::Test {
  public:
   SimpleDevToolsProtocolClientTest() {
-    AttachClient(new MockDevToolsAgentHost);
+    AttachClient(new content::MockDevToolsAgentHost);
   }
 
   void RunUntilIdle() { task_environment_.RunUntilIdle(); }
@@ -405,4 +345,4 @@ TEST_F(SimpleDevToolsProtocolClientEventHandlerNestedRemoveTest,
   EXPECT_THAT(received_events_, ElementsAre("event"));
 }
 
-}  // namespace simple_devtools_protocol_client
\ No newline at end of file
+}  // namespace simple_devtools_protocol_client
diff --git a/content/browser/devtools/devtools_http_handler.cc b/content/browser/devtools/devtools_http_handler.cc
index c3a7cdb75947a..6baaaba87ea12 100644
--- a/content/browser/devtools/devtools_http_handler.cc
+++ b/content/browser/devtools/devtools_http_handler.cc
@@ -557,15 +557,6 @@ static bool ParseJsonPath(
   return true;
 }
 
-// These values are persisted to logs. Entries should not be renumbered and
-// numeric values should never be reused.
-enum class DevToolsMutatingHttpActionVerb {
-  kGet = 0,
-  kPost = 1,
-  kOther = 2,
-  kMaxValue = kOther,
-};
-
 void DevToolsHttpHandler::OnJsonRequest(
     int connection_id,
     const net::HttpServerRequestInfo& info) {
@@ -627,22 +618,14 @@ void DevToolsHttpHandler::OnJsonRequest(
   }
 
   if (command == "new") {
-    DevToolsMutatingHttpActionVerb verb;
-    if (base::EqualsCaseInsensitiveASCII(info.method,
-                                         net::HttpRequestHeaders::kGetMethod)) {
-      verb = DevToolsMutatingHttpActionVerb::kGet;
-    } else if (base::EqualsCaseInsensitiveASCII(
-                   info.method, net::HttpRequestHeaders::kPostMethod)) {
-      verb = DevToolsMutatingHttpActionVerb::kPost;
-    } else {
-      verb = DevToolsMutatingHttpActionVerb::kOther;
-    }
-
-    UMA_HISTOGRAM_ENUMERATION("DevTools.MutatingHttpAction", verb);
-    if (verb != DevToolsMutatingHttpActionVerb::kOther) {
-      LOG(ERROR) << "Using unsafe HTTP verb " << info.method
-                 << " to invoke /json/new. This action will stop supporting "
-                    "GET and POST verbs in future versions.";
+    if (!base::EqualsCaseInsensitiveASCII(
+            info.method, net::HttpRequestHeaders::kPutMethod)) {
+      SendJson(
+          connection_id, net::HTTP_METHOD_NOT_ALLOWED, absl::nullopt,
+          base::StringPrintf("Using unsafe HTTP verb %s to invoke /json/new. "
+                             "This action supports only PUT verb.",
+                             info.method.c_str()));
+      return;
     }
 
     std::vector<base::StringPiece> query_components = base::SplitStringPiece(
diff --git a/content/browser/devtools/devtools_http_handler_unittest.cc b/content/browser/devtools/devtools_http_handler_unittest.cc
index f36fb340d0962..e84d452d18c5c 100644
--- a/content/browser/devtools/devtools_http_handler_unittest.cc
+++ b/content/browser/devtools/devtools_http_handler_unittest.cc
@@ -20,10 +20,10 @@
 #include "base/strings/string_split.h"
 #include "base/strings/stringprintf.h"
 #include "base/task/single_thread_task_runner.h"
-#include "base/test/metrics/histogram_tester.h"
 #include "base/test/task_environment.h"
 #include "base/threading/thread_task_runner_handle.h"
 #include "base/values.h"
+#include "content/browser/devtools/devtools_agent_host_impl.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/content_browser_client.h"
@@ -31,6 +31,7 @@
 #include "content/public/browser/devtools_socket_factory.h"
 #include "content/public/common/content_client.h"
 #include "content/public/test/browser_task_environment.h"
+#include "content/public/test/mock_devtools_agent_host.h"
 #include "content/public/test/test_utils.h"
 #include "net/base/completion_once_callback.h"
 #include "net/base/ip_address.h"
@@ -48,6 +49,8 @@
 namespace content {
 namespace {
 
+using ::testing::Return;
+
 const uint16_t kDummyPort = 4321;
 const base::FilePath::CharType kDevToolsActivePortFileName[] =
     FILE_PATH_LITERAL("DevToolsActivePort");
@@ -245,7 +248,7 @@ TEST_F(DevToolsHttpHandlerTest, TestDevToolsActivePort) {
   EXPECT_EQ(static_cast<int>(kDummyPort), port);
 }
 
-TEST_F(DevToolsHttpHandlerTest, TestMutatingActionsMetrics) {
+TEST_F(DevToolsHttpHandlerTest, MutatingActionsiRequireSafeVerb) {
   base::RunLoop run_loop, run_loop_2;
   auto* factory = new TCPServerSocketFactory(run_loop.QuitClosure(),
                                              run_loop_2.QuitClosure());
@@ -255,7 +258,6 @@ TEST_F(DevToolsHttpHandlerTest, TestMutatingActionsMetrics) {
   // become ready.
   run_loop.Run();
   int port = factory->port();
-  base::HistogramTester histogram_tester;
 
   net::TestDelegate delegate;
   GURL url(base::StringPrintf("http://127.0.0.1:%d/json/new", port));
@@ -265,7 +267,7 @@ TEST_F(DevToolsHttpHandlerTest, TestMutatingActionsMetrics) {
   request->Start();
   delegate.RunUntilComplete();
   EXPECT_GE(delegate.request_status(), 0);
-  histogram_tester.ExpectBucketCount("DevTools.MutatingHttpAction", 0, 1);
+  EXPECT_EQ(405, request->response_info().headers->response_code());
 
   request = request_context->CreateRequest(
       url, net::DEFAULT_PRIORITY, &delegate, TRAFFIC_ANNOTATION_FOR_TESTS);
@@ -273,7 +275,11 @@ TEST_F(DevToolsHttpHandlerTest, TestMutatingActionsMetrics) {
   request->Start();
   delegate.RunUntilComplete();
   EXPECT_GE(delegate.request_status(), 0);
-  histogram_tester.ExpectBucketCount("DevTools.MutatingHttpAction", 1, 1);
+  EXPECT_EQ(405, request->response_info().headers->response_code());
+
+  EXPECT_CALL(*MockDevToolsManagerDelegate::last_instance,
+              CreateNewTarget(GURL("about:blank"), false))
+      .WillOnce(Return(base::MakeRefCounted<MockDevToolsAgentHost>()));
 
   request = request_context->CreateRequest(
       url, net::DEFAULT_PRIORITY, &delegate, TRAFFIC_ANNOTATION_FOR_TESTS);
@@ -281,7 +287,7 @@ TEST_F(DevToolsHttpHandlerTest, TestMutatingActionsMetrics) {
   request->Start();
   delegate.RunUntilComplete();
   EXPECT_GE(delegate.request_status(), 0);
-  histogram_tester.ExpectBucketCount("DevTools.MutatingHttpAction", 2, 1);
+  EXPECT_EQ(200, request->response_info().headers->response_code());
 
   DevToolsAgentHost::StopRemoteDebuggingServer();
   // Make sure the handler actually stops.
@@ -306,6 +312,7 @@ TEST_F(DevToolsHttpHandlerTest, TestJsonNew) {
   auto request_context = net::CreateTestURLRequestContextBuilder()->Build();
   auto request = request_context->CreateRequest(
       url, net::DEFAULT_PRIORITY, &delegate, TRAFFIC_ANNOTATION_FOR_TESTS);
+  request->set_method("PUT");
   request->Start();
   delegate.RunUntilComplete();
   EXPECT_GE(delegate.request_status(), 0);
@@ -317,7 +324,7 @@ TEST_F(DevToolsHttpHandlerTest, TestJsonNew) {
       base::EscapeQueryParamValue("http://example.com", true).c_str()));
   request = request_context->CreateRequest(
       url, net::DEFAULT_PRIORITY, &delegate, TRAFFIC_ANNOTATION_FOR_TESTS);
-  request->set_method("POST");
+  request->set_method("PUT");
   request->Start();
   delegate.RunUntilComplete();
   EXPECT_GE(delegate.request_status(), 0);
@@ -329,7 +336,7 @@ TEST_F(DevToolsHttpHandlerTest, TestJsonNew) {
       base::EscapeQueryParamValue("http://example.com", true).c_str()));
   request = request_context->CreateRequest(
       url, net::DEFAULT_PRIORITY, &delegate, TRAFFIC_ANNOTATION_FOR_TESTS);
-  request->set_method("POST");
+  request->set_method("PUT");
   request->Start();
   delegate.RunUntilComplete();
   EXPECT_GE(delegate.request_status(), 0);
diff --git a/content/public/test/mock_devtools_agent_host.cc b/content/public/test/mock_devtools_agent_host.cc
new file mode 100644
index 0000000000000..91e436573023c
--- /dev/null
+++ b/content/public/test/mock_devtools_agent_host.cc
@@ -0,0 +1,115 @@
+// Copyright 2022 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+#include "content/public/test/mock_devtools_agent_host.h"
+
+#include "base/memory/ref_counted_memory.h"
+
+namespace content {
+
+std::string MockDevToolsAgentHost::CreateIOStreamFromData(
+    scoped_refptr<base::RefCountedMemory>) {
+  return std::string();
+}
+
+bool MockDevToolsAgentHost::AttachClient(
+    content::DevToolsAgentHostClient* client) {
+  DCHECK(!client_);
+  client_ = client;
+  return true;
+}
+
+bool MockDevToolsAgentHost::AttachClientWithoutWakeLock(
+    content::DevToolsAgentHostClient* client) {
+  return AttachClient(client);
+}
+
+bool MockDevToolsAgentHost::DetachClient(
+    content::DevToolsAgentHostClient* client) {
+  if (client != client_) {
+    return false;
+  }
+  client_ = nullptr;
+  return true;
+}
+
+bool MockDevToolsAgentHost::IsAttached() {
+  return client_ != nullptr;
+}
+
+void MockDevToolsAgentHost::DispatchProtocolMessage(
+    content::DevToolsAgentHostClient* client,
+    base::span<const uint8_t> message) {
+  DCHECK_EQ(client, client_);
+  client->DispatchProtocolMessage(this, message);
+}
+
+std::string MockDevToolsAgentHost::GetId() {
+  return std::string();
+}
+
+std::string MockDevToolsAgentHost::GetParentId() {
+  return std::string();
+}
+
+std::string MockDevToolsAgentHost::GetOpenerId() {
+  return std::string();
+}
+
+bool MockDevToolsAgentHost::CanAccessOpener() {
+  return true;
+}
+
+std::string MockDevToolsAgentHost::GetOpenerFrameId() {
+  return std::string();
+}
+
+content::WebContents* MockDevToolsAgentHost::GetWebContents() {
+  return nullptr;
+}
+
+content::BrowserContext* MockDevToolsAgentHost::GetBrowserContext() {
+  return nullptr;
+}
+
+std::string MockDevToolsAgentHost::GetType() {
+  return std::string();
+}
+
+std::string MockDevToolsAgentHost::GetTitle() {
+  return std::string();
+}
+
+std::string MockDevToolsAgentHost::GetDescription() {
+  return std::string();
+}
+
+GURL MockDevToolsAgentHost::GetURL() {
+  return GURL();
+}
+
+GURL MockDevToolsAgentHost::GetFaviconURL() {
+  return GURL();
+}
+
+std::string MockDevToolsAgentHost::GetFrontendURL() {
+  return std::string();
+}
+
+bool MockDevToolsAgentHost::Activate() {
+  return true;
+}
+
+bool MockDevToolsAgentHost::Close() {
+  return true;
+}
+
+base::TimeTicks MockDevToolsAgentHost::GetLastActivityTime() {
+  return base::TimeTicks();
+}
+
+content::RenderProcessHost* MockDevToolsAgentHost::GetProcessHost() {
+  return nullptr;
+}
+
+}  // namespace content
diff --git a/content/public/test/mock_devtools_agent_host.h b/content/public/test/mock_devtools_agent_host.h
new file mode 100644
index 0000000000000..ee01a606b8738
--- /dev/null
+++ b/content/public/test/mock_devtools_agent_host.h
@@ -0,0 +1,58 @@
+// Copyright 2022 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+#ifndef CONTENT_PUBLIC_TEST_MOCK_DEVTOOLS_AGENT_HOST_H_
+#define CONTENT_PUBLIC_TEST_MOCK_DEVTOOLS_AGENT_HOST_H_
+
+#include "content/public/browser/devtools_agent_host.h"
+
+namespace content {
+
+class MockDevToolsAgentHost : public content::DevToolsAgentHost {
+ public:
+  MockDevToolsAgentHost() = default;
+
+  // content::DevToolsAgentHost
+  std::string CreateIOStreamFromData(
+      scoped_refptr<base::RefCountedMemory>) override;
+  bool AttachClient(content::DevToolsAgentHostClient* client) override;
+  bool AttachClientWithoutWakeLock(
+      content::DevToolsAgentHostClient* client) override;
+  bool DetachClient(content::DevToolsAgentHostClient* client) override;
+  bool IsAttached() override;
+  void DispatchProtocolMessage(content::DevToolsAgentHostClient* client,
+                               base::span<const uint8_t> message) override;
+  void InspectElement(content::RenderFrameHost* frame_host,
+                      int x,
+                      int y) override {}
+  std::string GetId() override;
+  std::string GetParentId() override;
+  std::string GetOpenerId() override;
+  bool CanAccessOpener() override;
+  std::string GetOpenerFrameId() override;
+  content::WebContents* GetWebContents() override;
+  content::BrowserContext* GetBrowserContext() override;
+  void DisconnectWebContents() override {}
+  void ConnectWebContents(content::WebContents* web_contents) override {}
+  std::string GetType() override;
+  std::string GetTitle() override;
+  std::string GetDescription() override;
+  GURL GetURL() override;
+  GURL GetFaviconURL() override;
+  std::string GetFrontendURL() override;
+  bool Activate() override;
+  void Reload() override {}
+  bool Close() override;
+  base::TimeTicks GetLastActivityTime() override;
+  content::RenderProcessHost* GetProcessHost() override;
+  void ForceDetachAllSessions() override {}
+
+ protected:
+  ~MockDevToolsAgentHost() override = default;
+
+  base::raw_ptr<content::DevToolsAgentHostClient> client_ = nullptr;
+};
+
+}  // namespace content
+
+#endif  // CONTENT_PUBLIC_TEST_MOCK_DEVTOOLS_AGENT_HOST_H_
diff --git a/content/test/BUILD.gn b/content/test/BUILD.gn
index eb176b1943972..a45cdc3a7eb60 100644
--- a/content/test/BUILD.gn
+++ b/content/test/BUILD.gn
@@ -194,6 +194,8 @@ static_library("test_support") {
     "../public/test/mock_browsing_data_remover_delegate.cc",
     "../public/test/mock_browsing_data_remover_delegate.h",
     "../public/test/mock_client_hints_controller_delegate.h",
+    "../public/test/mock_devtools_agent_host.cc",
+    "../public/test/mock_devtools_agent_host.h",
     "../public/test/mock_download_manager.cc",
     "../public/test/mock_download_manager.h",
     "../public/test/mock_media_session.cc",
