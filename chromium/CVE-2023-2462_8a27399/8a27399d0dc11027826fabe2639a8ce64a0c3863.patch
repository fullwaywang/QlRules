commit 8a27399d0dc11027826fabe2639a8ce64a0c3863	8a27399d0dc11027826fabe2639a8ce64a0c3863
Author: Sina Firoozabadi <sinafirooz@google.com>
Date:   Wed Jan 25 22:32:26 2023 +0000

    Reject Web HID requests with an opaque origin
    
    The Web HID API tracks permissions using the origin of the top-level document in the frame tree. If this document has an opaque origin then there is no way to format the origin for display to the user in permission prompts or to write their decision in the preferences file.
    
    Access to the Web HID API from such contexts should therefore be blocked.
    
    Bug: 1375133
    Change-Id: I7992b2886e882bbbb097b0460114f0a02a02e34f
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4133535
    Reviewed-by: Reilly Grant <reillyg@chromium.org>
    Commit-Queue: Sina Firoozabadi <sinafirooz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1097051}

diff --git a/third_party/blink/renderer/modules/hid/hid.cc b/third_party/blink/renderer/modules/hid/hid.cc
index 2239682bf50e2..92543c029fd6e 100644
--- a/third_party/blink/renderer/modules/hid/hid.cc
+++ b/third_party/blink/renderer/modules/hid/hid.cc
@@ -35,11 +35,28 @@ const char kFeaturePolicyBlocked[] =
 // requirements for them to be served are met. Returns true if any conditions
 // fail to be met, generating an appropriate exception as well. Otherwise,
 // returns false to indicate the call should be allowed.
-bool ShouldBlockHidServiceCall(ExecutionContext* context,
+bool ShouldBlockHidServiceCall(LocalDOMWindow* window,
+                               ExecutionContext* context,
                                ExceptionState& exception_state) {
   if (!context) {
     exception_state.ThrowDOMException(DOMExceptionCode::kNotSupportedError,
                                       kContextGone);
+    return true;
+  }
+
+  // The security origin must match the one checked by the browser process.
+  // Service Workers do not use delegated permissions so we use their security
+  // origin directly.
+  DCHECK(context->IsWindow() || context->IsServiceWorkerGlobalScope());
+  auto* security_origin =
+      window
+          ? window->GetFrame()->Top()->GetSecurityContext()->GetSecurityOrigin()
+          : context->GetSecurityOrigin();
+
+  if (security_origin->IsOpaque()) {
+    exception_state.ThrowSecurityError(
+        "Access to the WebHID API is denied from contexts where the top-level "
+        "document has an opaque origin.");
   } else if (!context->IsFeatureEnabled(
                  mojom::blink::PermissionsPolicyFeature::kHid,
                  ReportOptions::kReportOnFailure)) {
@@ -145,7 +162,8 @@ void HID::DeviceChanged(device::mojom::blink::HidDeviceInfoPtr device_info) {
 
 ScriptPromise HID::getDevices(ScriptState* script_state,
                               ExceptionState& exception_state) {
-  if (ShouldBlockHidServiceCall(GetExecutionContext(), exception_state)) {
+  if (ShouldBlockHidServiceCall(GetSupplementable()->DomWindow(),
+                                GetExecutionContext(), exception_state)) {
     return ScriptPromise();
   }
 
@@ -163,14 +181,15 @@ ScriptPromise HID::requestDevice(ScriptState* script_state,
                                  ExceptionState& exception_state) {
   // requestDevice requires a window to satisfy the user activation requirement
   // and to show a chooser dialog.
-  const auto* window = GetSupplementable()->DomWindow();
+  auto* window = GetSupplementable()->DomWindow();
   if (!window) {
     exception_state.ThrowDOMException(DOMExceptionCode::kNotSupportedError,
                                       kContextGone);
     return ScriptPromise();
   }
 
-  if (ShouldBlockHidServiceCall(GetExecutionContext(), exception_state)) {
+  if (ShouldBlockHidServiceCall(window, GetExecutionContext(),
+                                exception_state)) {
     return ScriptPromise();
   }
 
diff --git a/third_party/blink/web_tests/wpt_internal/hid/getDevices/reject_opaque_origin.https.html b/third_party/blink/web_tests/wpt_internal/hid/getDevices/reject_opaque_origin.https.html
new file mode 100644
index 0000000000000..8b8200630917d
--- /dev/null
+++ b/third_party/blink/web_tests/wpt_internal/hid/getDevices/reject_opaque_origin.https.html
@@ -0,0 +1,13 @@
+<!DOCTYPE html>
+
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script>
+  'use strict';
+
+  promise_test(async (t) => {
+    await promise_rejects_dom(
+        t, 'SecurityError', navigator.hid.getDevices(),
+        'getDevices() should throw a SecurityError DOMException when called from a context where the top-level document has an opaque origin.');
+  }, 'Calls to HID APIs from an origin with opaque top origin get blocked.');
+</script>
\ No newline at end of file
diff --git a/third_party/blink/web_tests/wpt_internal/hid/getDevices/reject_opaque_origin.https.html.headers b/third_party/blink/web_tests/wpt_internal/hid/getDevices/reject_opaque_origin.https.html.headers
new file mode 100644
index 0000000000000..c7e4e7cc5bd3f
--- /dev/null
+++ b/third_party/blink/web_tests/wpt_internal/hid/getDevices/reject_opaque_origin.https.html.headers
@@ -0,0 +1 @@
+Content-Security-Policy: sandbox allow-scripts
\ No newline at end of file
diff --git a/third_party/blink/web_tests/wpt_internal/hid/getDevices/sandboxed_iframe.https.window.js b/third_party/blink/web_tests/wpt_internal/hid/getDevices/sandboxed_iframe.https.window.js
new file mode 100644
index 0000000000000..7d5a280254d44
--- /dev/null
+++ b/third_party/blink/web_tests/wpt_internal/hid/getDevices/sandboxed_iframe.https.window.js
@@ -0,0 +1,22 @@
+'use strict';
+
+let iframe = document.createElement('iframe');
+
+promise_test(async () => {
+  await new Promise(resolve => {
+    iframe.src = '../resources/open-in-iframe.html';
+    iframe.sandbox.add('allow-scripts');
+    iframe.allow = 'hid';
+    document.body.appendChild(iframe);
+    iframe.addEventListener('load', resolve);
+  });
+
+  await new Promise(resolve => {
+    iframe.contentWindow.postMessage({type: 'GetDevices'}, '*');
+
+    window.addEventListener('message', (messageEvent) => {
+      assert_equals(messageEvent.data, 'Success');
+      resolve();
+    });
+  });
+}, 'Calls to HID APIs from a sandboxed iframe are valid.');
\ No newline at end of file
diff --git a/third_party/blink/web_tests/wpt_internal/hid/requestDevice/reject_opaque_origin.https.html b/third_party/blink/web_tests/wpt_internal/hid/requestDevice/reject_opaque_origin.https.html
new file mode 100644
index 0000000000000..6c04fbee14909
--- /dev/null
+++ b/third_party/blink/web_tests/wpt_internal/hid/requestDevice/reject_opaque_origin.https.html
@@ -0,0 +1,13 @@
+<!DOCTYPE html>
+
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script>
+  'use strict';
+
+  promise_test(async (t) => {
+    await promise_rejects_dom(
+        t, 'SecurityError', navigator.hid.requestDevice({filters: [{}]}),
+        'requestDevice() should throw a SecurityError DOMException when called from a context where the top-level document has an opaque origin.');
+  }, 'Calls to HID APIs from an origin with opaque top origin get blocked.');
+</script>
\ No newline at end of file
diff --git a/third_party/blink/web_tests/wpt_internal/hid/requestDevice/reject_opaque_origin.https.html.headers b/third_party/blink/web_tests/wpt_internal/hid/requestDevice/reject_opaque_origin.https.html.headers
new file mode 100644
index 0000000000000..c7e4e7cc5bd3f
--- /dev/null
+++ b/third_party/blink/web_tests/wpt_internal/hid/requestDevice/reject_opaque_origin.https.html.headers
@@ -0,0 +1 @@
+Content-Security-Policy: sandbox allow-scripts
\ No newline at end of file
diff --git a/third_party/blink/web_tests/wpt_internal/hid/requestDevice/sandboxed_iframe.https.window.js b/third_party/blink/web_tests/wpt_internal/hid/requestDevice/sandboxed_iframe.https.window.js
new file mode 100644
index 0000000000000..41b328f5b3a72
--- /dev/null
+++ b/third_party/blink/web_tests/wpt_internal/hid/requestDevice/sandboxed_iframe.https.window.js
@@ -0,0 +1,22 @@
+'use strict';
+
+let iframe = document.createElement('iframe');
+
+promise_test(async () => {
+  await new Promise(resolve => {
+    iframe.src = '../resources/open-in-iframe.html';
+    iframe.sandbox.add('allow-scripts');
+    iframe.allow = 'hid';
+    document.body.appendChild(iframe);
+    iframe.addEventListener('load', resolve);
+  });
+
+  await new Promise(resolve => {
+    iframe.contentWindow.postMessage({type: 'RequestDevice'}, '*');
+
+    window.addEventListener('message', (messageEvent) => {
+      assert_equals(messageEvent.data, 'Success');
+      resolve();
+    });
+  });
+}, 'Calls to HID APIs from a sandboxed iframe are valid.');
\ No newline at end of file
diff --git a/third_party/blink/web_tests/wpt_internal/hid/resources/open-in-iframe.html b/third_party/blink/web_tests/wpt_internal/hid/resources/open-in-iframe.html
new file mode 100644
index 0000000000000..12ce917c65846
--- /dev/null
+++ b/third_party/blink/web_tests/wpt_internal/hid/resources/open-in-iframe.html
@@ -0,0 +1,33 @@
+<!DOCTYPE html>
+
+<script src="/resources/testdriver.js"></script>
+<script src="/resources/testdriver-vendor.js"></script>
+
+<body>
+  <button>
+    Fake user gesture
+  </button>
+</body>
+
+<script>
+  test_driver.set_test_context(parent);
+
+  window.addEventListener('message', async messageEvent => {
+    switch (messageEvent.data.type) {
+      case 'GetDevices':
+        navigator.hid.getDevices()
+            .then(devices => parent.postMessage('Success', '*'))
+            .catch(err => parent.postMessage(`FAIL: ${err}`, '*'));
+        break;
+      case 'RequestDevice':
+        await test_driver.click(document.getElementsByTagName('button')[0]);
+        navigator.hid.requestDevice({filters: []})
+            .then(device => parent.postMessage('Success', '*'))
+            .catch(err => parent.postMessage(`FAIL: ${err}`, '*'));
+        break;
+      default:
+        parent.postMessage(
+            `FAIL: Bad message type: ${messageEvent.data.type}`, '*');
+    }
+  });
+</script>
\ No newline at end of file
