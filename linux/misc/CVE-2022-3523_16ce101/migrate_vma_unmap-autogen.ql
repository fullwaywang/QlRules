/**
 * @name linux-16ce101db85db694a91380aa4c89b25530871d33-migrate_vma_unmap
 * @id cpp/linux/16ce101db85db694a91380aa4c89b25530871d33/migrate-vma-unmap
 * @description linux-16ce101db85db694a91380aa4c89b25530871d33-migrate_vma_unmap CVE-2022-3523
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vmigrate_370, ExprStmt target_1, ExprStmt target_2) {
	exists(PointerFieldAccess target_0 |
		target_0.getTarget().getName()="fault_page"
		and target_0.getQualifier().(VariableAccess).getTarget()=vmigrate_370
		and target_1.getExpr().(PostfixDecrExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getQualifier().(VariableAccess).getLocation())
		and target_0.getQualifier().(VariableAccess).getLocation().isBefore(target_2.getExpr().(AssignAndExpr).getLValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vmigrate_370, FunctionCall target_3, ExprStmt target_1) {
		target_1.getExpr().(PostfixDecrExpr).getOperand().(PointerFieldAccess).getTarget().getName()="cpages"
		and target_1.getExpr().(PostfixDecrExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmigrate_370
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
}

predicate func_2(Parameter vmigrate_370, LogicalOrExpr target_4, ExprStmt target_2) {
		target_2.getExpr().(AssignAndExpr).getLValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="src"
		and target_2.getExpr().(AssignAndExpr).getLValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmigrate_370
		and target_2.getExpr().(AssignAndExpr).getLValue().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("unsigned long")
		and target_2.getExpr().(AssignAndExpr).getRValue().(ComplementExpr).getValue()="18446744073709551613"
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_3(Function func, FunctionCall target_3) {
		target_3.getTarget().hasName("isolate_lru_page")
		and target_3.getArgument(0).(VariableAccess).getTarget().getType().hasName("page *")
		and target_3.getEnclosingFunction() = func
}

predicate func_4(Function func, LogicalOrExpr target_4) {
		target_4.getAnOperand().(FunctionCall).getTarget().hasName("page_mapped")
		and target_4.getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("page *")
		and target_4.getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("migrate_vma_check_page")
		and target_4.getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("page *")
		and target_4.getEnclosingFunction() = func
}

from Function func, Parameter vmigrate_370, ExprStmt target_1, ExprStmt target_2, FunctionCall target_3, LogicalOrExpr target_4
where
not func_0(vmigrate_370, target_1, target_2)
and func_1(vmigrate_370, target_3, target_1)
and func_2(vmigrate_370, target_4, target_2)
and func_3(func, target_3)
and func_4(func, target_4)
and vmigrate_370.getType().hasName("migrate_vma *")
and vmigrate_370.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
