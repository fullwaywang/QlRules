commit 5593473a1e6c743764b08e3b6071cb43b5cfa6c4
Author: Paolo Bonzini <pbonzini@redhat.com>
Date:   Wed Apr 6 13:13:42 2022 -0400

    KVM: avoid NULL pointer dereference in kvm_dirty_ring_push
    
    kvm_vcpu_release() will call kvm_dirty_ring_free(), freeing
    ring->dirty_gfns and setting it to NULL.  Afterwards, it calls
    kvm_arch_vcpu_destroy().
    
    However, if closing the file descriptor races with KVM_RUN in such away
    that vcpu->arch.st.preempted == 0, the following call stack leads to a
    NULL pointer dereference in kvm_dirty_run_push():
    
     mark_page_dirty_in_slot+0x192/0x270 arch/x86/kvm/../../../virt/kvm/kvm_main.c:3171
     kvm_steal_time_set_preempted arch/x86/kvm/x86.c:4600 [inline]
     kvm_arch_vcpu_put+0x34e/0x5b0 arch/x86/kvm/x86.c:4618
     vcpu_put+0x1b/0x70 arch/x86/kvm/../../../virt/kvm/kvm_main.c:211
     vmx_free_vcpu+0xcb/0x130 arch/x86/kvm/vmx/vmx.c:6985
     kvm_arch_vcpu_destroy+0x76/0x290 arch/x86/kvm/x86.c:11219
     kvm_vcpu_destroy arch/x86/kvm/../../../virt/kvm/kvm_main.c:441 [inline]
    
    The fix is to release the dirty page ring after kvm_arch_vcpu_destroy
    has run.
    
    Reported-by: Qiuhao Li <qiuhao@sysec.org>
    Reported-by: Gaoning Pan <pgn@zju.edu.cn>
    Reported-by: Yongkang Jia <kangel@zju.edu.cn>
    Cc: stable@vger.kernel.org
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>

diff --git a/virt/kvm/kvm_main.c b/virt/kvm/kvm_main.c
index 70e05af5ebead..b22f380e3347d 100644
--- a/virt/kvm/kvm_main.c
+++ b/virt/kvm/kvm_main.c
@@ -434,8 +434,8 @@ static void kvm_vcpu_init(struct kvm_vcpu *vcpu, struct kvm *kvm, unsigned id)
 
 static void kvm_vcpu_destroy(struct kvm_vcpu *vcpu)
 {
-	kvm_dirty_ring_free(&vcpu->dirty_ring);
 	kvm_arch_vcpu_destroy(vcpu);
+	kvm_dirty_ring_free(&vcpu->dirty_ring);
 
 	/*
 	 * No need for rcu_read_lock as VCPU_RUN is the only place that changes
