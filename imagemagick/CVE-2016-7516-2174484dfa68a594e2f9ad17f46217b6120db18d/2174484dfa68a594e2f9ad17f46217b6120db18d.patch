commit 2174484dfa68a594e2f9ad17f46217b6120db18d
Author: Cristy <urban-warrior@imagemagick.org>
Date:   Wed Jan 13 18:31:21 2016 -0500

    https://github.com/ImageMagick/ImageMagick/issues/82
    https://github.com/ImageMagick/ImageMagick/issues/81
    https://github.com/ImageMagick/ImageMagick/issues/80
    https://github.com/ImageMagick/ImageMagick/issues/77

diff --git a/MagickCore/memory.c b/MagickCore/memory.c
index d70cf1005..02bae6a23 100644
--- a/MagickCore/memory.c
+++ b/MagickCore/memory.c
@@ -233,6 +233,21 @@ static MagickBooleanType
 %    o quantum: the number of bytes in each quantum.
 %
 */
+static MagickBooleanType CheckMemoryOverflow(const size_t count,
+  const size_t quantum)
+{
+  size_t
+    size;
+
+  size=count*quantum;
+  if ((count == 0) || (quantum != (size/count)))
+    {
+      errno=ENOMEM;
+      return(MagickTrue);
+    }
+  return(MagickFalse);
+}
+
 MagickExport void *AcquireAlignedMemory(const size_t count,const size_t quantum)
 {
 #define AlignedExtent(size,alignment) \
@@ -246,14 +261,11 @@ MagickExport void *AcquireAlignedMemory(const size_t count,const size_t quantum)
   void
     *memory;
 
-  size=count*quantum;
-  if ((count == 0) || (quantum != (size/count)))
-    {
-      errno=ENOMEM;
-      return((void *) NULL);
-    }
+  if (CheckMemoryOverflow(count,quantum) != MagickFalse)
+    return((void *) NULL);
   memory=NULL;
   alignment=CACHE_LINE_SIZE;
+  size=count*quantum;
   extent=AlignedExtent(size,alignment);
   if ((size == 0) || (alignment < sizeof(void *)) || (extent < size))
     return((void *) NULL);
@@ -528,15 +540,12 @@ MagickExport void *AcquireMagickMemory(const size_t size)
 MagickExport void *AcquireQuantumMemory(const size_t count,const size_t quantum)
 {
   size_t
-    size;
+    extent;
 
-  size=count*quantum;
-  if ((count == 0) || (quantum != (size/count)))
-    {
-      errno=ENOMEM;
-      return((void *) NULL);
-    }
-  return(AcquireMagickMemory(size));
+  if (CheckMemoryOverflow(count,quantum) != MagickFalse)
+    return((void *) NULL);
+  extent=count*quantum;
+  return(AcquireMagickMemory(extent));
 }
 
 /*
@@ -571,43 +580,40 @@ MagickExport MemoryInfo *AcquireVirtualMemory(const size_t count,
     *memory_info;
 
   size_t
-    length;
+    extent;
 
-  length=count*quantum;
-  if ((count == 0) || (quantum != (length/count)))
-    {
-      errno=ENOMEM;
-      return((MemoryInfo *) NULL);
-    }
+  if (CheckMemoryOverflow(count,quantum) != MagickFalse)
+    return((MemoryInfo *) NULL);
   memory_info=(MemoryInfo *) MagickAssumeAligned(AcquireAlignedMemory(1,
     sizeof(*memory_info)));
   if (memory_info == (MemoryInfo *) NULL)
     ThrowFatalException(ResourceLimitFatalError,"MemoryAllocationFailed");
   (void) ResetMagickMemory(memory_info,0,sizeof(*memory_info));
-  memory_info->length=length;
+  extent=count*quantum;
+  memory_info->length=extent;
   memory_info->signature=MagickCoreSignature;
-  if (AcquireMagickResource(MemoryResource,length) != MagickFalse)
+  if (AcquireMagickResource(MemoryResource,extent) != MagickFalse)
     {
-      memory_info->blob=AcquireAlignedMemory(1,length);
+      memory_info->blob=AcquireAlignedMemory(1,extent);
       if (memory_info->blob != NULL)
         {
           memory_info->type=AlignedVirtualMemory;
           return(memory_info);
         }
     }
-  RelinquishMagickResource(MemoryResource,length);
-  if (AcquireMagickResource(MapResource,length) != MagickFalse)
+  RelinquishMagickResource(MemoryResource,extent);
+  if (AcquireMagickResource(MapResource,extent) != MagickFalse)
     {
       /*
         Heap memory failed, try anonymous memory mapping.
       */
-      memory_info->blob=MapBlob(-1,IOMode,0,length);
+      memory_info->blob=MapBlob(-1,IOMode,0,extent);
       if (memory_info->blob != NULL)
         {
           memory_info->type=MapVirtualMemory;
           return(memory_info);
         }
-      if (AcquireMagickResource(DiskResource,length) != MagickFalse)
+      if (AcquireMagickResource(DiskResource,extent) != MagickFalse)
         {
           int
             file;
@@ -620,10 +626,10 @@ MagickExport MemoryInfo *AcquireVirtualMemory(const size_t count,
           file=AcquireUniqueFileResource(memory_info->filename);
           if (file != -1)
             {
-              if ((lseek(file,length-1,SEEK_SET) == (length-1)) &&
+              if ((lseek(file,extent-1,SEEK_SET) == (extent-1)) &&
                   (write(file,"",1) == 1))
                 {
-                  memory_info->blob=MapBlob(file,IOMode,0,length);
+                  memory_info->blob=MapBlob(file,IOMode,0,extent);
                   if (memory_info->blob != NULL)
                     {
                       (void) close(file);
@@ -639,12 +645,12 @@ MagickExport MemoryInfo *AcquireVirtualMemory(const size_t count,
               *memory_info->filename = '\0';
             }
         }
-      RelinquishMagickResource(DiskResource,length);
+      RelinquishMagickResource(DiskResource,extent);
     }
-  RelinquishMagickResource(MapResource,length);
+  RelinquishMagickResource(MapResource,extent);
   if (memory_info->blob == NULL)
     {
-      memory_info->blob=AcquireMagickMemory(length);
+      memory_info->blob=AcquireMagickMemory(extent);
       if (memory_info->blob != NULL)
         memory_info->type=UnalignedVirtualMemory;
     }
@@ -1208,16 +1214,15 @@ MagickExport void *ResizeQuantumMemory(void *memory,const size_t count,
   const size_t quantum)
 {
   size_t
-    size;
+    extent;
 
-  size=count*quantum;
-  if ((count == 0) || (quantum != (size/count)))
+  if (CheckMemoryOverflow(count,quantum) != MagickFalse)
     {
       memory=RelinquishMagickMemory(memory);
-      errno=ENOMEM;
       return((void *) NULL);
     }
-  return(ResizeMagickMemory(memory,size));
+  extent=count*quantum;
+  return(ResizeMagickMemory(memory,extent));
 }
 
 /*
diff --git a/coders/pict.c b/coders/pict.c
index 2862159b8..9826e26f2 100644
--- a/coders/pict.c
+++ b/coders/pict.c
@@ -2003,8 +2003,7 @@ static MagickBooleanType WritePICTImage(const ImageInfo *image_info,
               *opacity++=ScaleQuantumToChar((Quantum) (GetPixelAlpha(image,p)));
             p+=GetPixelChannels(image);
           }
-          count+=EncodeImage(image,scanline,bytes_per_line & 0x7FFF,
-            packed_scanline);
+          count+=EncodeImage(image,scanline,bytes_per_line,packed_scanline);
           if (image->previous == (Image *) NULL)
             {
               status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,
diff --git a/coders/rle.c b/coders/rle.c
index 00e653f7a..cc1ce594e 100644
--- a/coders/rle.c
+++ b/coders/rle.c
@@ -314,10 +314,13 @@ static Image *ReadRLEImage(const ImageInfo *image_info,ExceptionInfo *exception)
     if ((number_pixels*number_planes_filled) != (size_t) (number_pixels*
          number_planes_filled))
       ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
-    pixel_info_length=image->columns*image->rows*number_planes_filled;
-    pixel_info=AcquireVirtualMemory(pixel_info_length,sizeof(*pixels));
+    if (image->rows < (image->rows*number_planes_filled*sizeof(*pixels)))
+      ThrowReaderException(CorruptImageError,"ImproperImageHeader");
+    pixel_info=AcquireVirtualMemory(image->columns,image->rows*
+      number_planes_filled*sizeof(*pixels));
     if (pixel_info == (MemoryInfo *) NULL)
       ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+    pixel_info_length=image->columns*image->rows*number_planes_filled;
     pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);
     if ((flags & 0x01) && !(flags & 0x02))
       {
diff --git a/coders/sun.c b/coders/sun.c
index b747f9086..303ed18d3 100644
--- a/coders/sun.c
+++ b/coders/sun.c
@@ -431,9 +431,11 @@ static Image *ReadSUNImage(const ImageInfo *image_info,ExceptionInfo *exception)
       ThrowReaderException(ResourceLimitError,"ImproperImageHeader");
     bytes_per_line>>=4;
     sun_pixels=(unsigned char *) AcquireQuantumMemory(height,
-      bytes_per_line*sizeof(*sun_pixels));
+      MagickMax(image->columns,bytes_per_line)*sizeof(*sun_pixels));
     if (sun_pixels == (unsigned char *) NULL)
       ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+    ResetMagickMemory(sun_pixels,0,height*MagickMax(image->columns,
+      bytes_per_line)*sizeof(*sun_pixels));
     if (sun_info.type == RT_ENCODED)
       (void) DecodeImage(sun_data,sun_info.length,sun_pixels,bytes_per_line*
         height);
diff --git a/coders/viff.c b/coders/viff.c
index 78e41fec8..6c8ba7930 100644
--- a/coders/viff.c
+++ b/coders/viff.c
@@ -407,6 +407,9 @@ static Image *ReadVIFFImage(const ImageInfo *image_info,
         image->colors=viff_info.map_columns;
         if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)
           ThrowReaderException(ResourceLimitError,"MemoryAllocationFailed");
+        if (viff_info.map_rows <
+            (viff_info.map_rows*bytes_per_pixel*sizeof(*viff_colormap)))
+          ThrowReaderException(CorruptImageError,"ImproperImageHeader");
         viff_colormap=(unsigned char *) AcquireQuantumMemory(image->colors,
           viff_info.map_rows*bytes_per_pixel*sizeof(*viff_colormap));
         if (viff_colormap == (unsigned char *) NULL)
