/**
 * @name linux-c2775ae4d9227729f8ca9ee2a068f62a00d5ea9c-privcmd_irqfd_deassign
 * @id cpp/linux/c2775ae4d9227729f8ca9ee2a068f62a00d5ea9c/privcmd-irqfd-deassign
 * @description linux-c2775ae4d9227729f8ca9ee2a068f62a00d5ea9c-drivers/xen/privcmd.c-privcmd_irqfd_deassign CVE-2024-44957
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("mutex_lock_nested")
	and not target_0.getTarget().hasName("spin_unlock_irqrestore")
	and target_0.getArgument(0) instanceof AddressOfExpr
	and target_0.getArgument(1) instanceof Literal
	and target_0.getEnclosingFunction() = func
}

predicate func_1(ExprStmt target_8, Function func) {
exists(DoStmt target_1 |
	exists(BlockStmt obj_0 | obj_0=target_1.getStmt() |
		exists(DoStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(BlockStmt obj_2 | obj_2=obj_1.getStmt() |
				exists(ExprStmt obj_3 | obj_3=obj_2.getStmt(1) |
					exists(AssignExpr obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getLValue().(VariableAccess).getType().hasName("unsigned long")
						and obj_4.getRValue().(FunctionCall).getTarget().hasName("_raw_spin_lock_irqsave")
					)
				)
			)
			and obj_1.getCondition().(Literal).getValue()="0"
		)
	)
	and target_1.getCondition() instanceof Literal
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_8.getLocation())
)
}

/*predicate func_2(Function func) {
exists(StmtExpr target_2 |
	exists(BlockStmt obj_0 | obj_0=target_2.getStmt() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(2) |
			exists(EqualityOperation obj_2 | obj_2=obj_1.getExpr() |
				obj_2.getLeftOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("unsigned long")
				and obj_2.getRightOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("unsigned long")
			)
		)
		and obj_0.getStmt(3).(ExprStmt).getExpr().(Literal).getValue()="1"
	)
	and target_2.getEnclosingFunction() = func
)
}

*/
predicate func_4(Variable virqfds_lock, AddressOfExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget()=virqfds_lock
	and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_5(Variable virqfds_lock, AddressOfExpr target_5) {
	target_5.getOperand().(VariableAccess).getTarget()=virqfds_lock
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_7(Function func, FunctionCall target_7) {
	target_7.getTarget().hasName("mutex_unlock")
	and target_7.getArgument(0) instanceof AddressOfExpr
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Function func, ExprStmt target_8) {
	target_8.getExpr() instanceof FunctionCall
	and target_8.getEnclosingFunction() = func
}

from Function func, Variable virqfds_lock, FunctionCall target_0, AddressOfExpr target_4, AddressOfExpr target_5, FunctionCall target_7, ExprStmt target_8
where
func_0(func, target_0)
and not func_1(target_8, func)
and func_4(virqfds_lock, target_4)
and func_5(virqfds_lock, target_5)
and func_7(func, target_7)
and func_8(func, target_8)
and virqfds_lock.getType().hasName("mutex")
and not virqfds_lock.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
