/**
 * @name linux-9cc02ede696272c5271a401e4f27c262359bc2f6-rose_heartbeat_expiry
 * @id cpp/linux/9cc02ede696272c5271a401e4f27c262359bc2f6/rose-heartbeat-expiry
 * @description linux-9cc02ede696272c5271a401e4f27c262359bc2f6-net/rose/rose_timer.c-rose_heartbeat_expiry CVE-2022-2318
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsk_121, LogicalOrExpr target_2, ExprStmt target_3, AddressOfExpr target_4) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("sock_put")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_121
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vsk_121, AddressOfExpr target_5, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("sock_put")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_121
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getFollowingStmt() instanceof ReturnStmt
	and target_5.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable vsk_121, LogicalOrExpr target_2) {
	target_2.getLeftOperand().(FunctionCall).getTarget().hasName("sock_flag")
	and target_2.getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_121
	and target_2.getRightOperand().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getTarget().getName()="skc_state"
	and target_2.getRightOperand().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="__sk_common"
	and target_2.getRightOperand().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_121
	and target_2.getRightOperand().(LogicalAndExpr).getRightOperand().(FunctionCall).getTarget().hasName("sock_flag")
	and target_2.getRightOperand().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_121
}

predicate func_3(Variable vsk_121, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("rose_destroy_socket")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_121
}

predicate func_4(Variable vsk_121, AddressOfExpr target_4) {
	target_4.getOperand().(ValueFieldAccess).getTarget().getName()="rmem_alloc"
	and target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_backlog"
	and target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_121
}

predicate func_5(Variable vsk_121, AddressOfExpr target_5) {
	target_5.getOperand().(ValueFieldAccess).getTarget().getName()="slock"
	and target_5.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
	and target_5.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_121
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
}

from Function func, Variable vsk_121, LogicalOrExpr target_2, ExprStmt target_3, AddressOfExpr target_4, AddressOfExpr target_5
where
not func_0(vsk_121, target_2, target_3, target_4)
and not func_1(vsk_121, target_5, func)
and func_2(vsk_121, target_2)
and func_3(vsk_121, target_3)
and func_4(vsk_121, target_4)
and func_5(vsk_121, target_5)
and vsk_121.getType().hasName("sock *")
and vsk_121.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
