/**
 * @name linux-9aa422ad326634b76309e8ff342c246800621216-tipc_link_proto_rcv
 * @id cpp/linux/9aa422ad326634b76309e8ff342c246800621216/tipc-link-proto-rcv
 * @description linux-9aa422ad326634b76309e8ff342c246800621216-net/tipc/link.c-tipc_link_proto_rcv CVE-2022-0435
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_2(Variable vdlen_2203, IfStmt target_4, Function func) {
exists(IfStmt target_2 |
	target_2.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vdlen_2203
	and target_2.getCondition().(RelationalOperation).getLesserOperand().(ComplementExpr).getValue()="65535"
	and target_2.getThen().(GotoStmt).getName() ="exit"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_4.getLocation()))
}

predicate func_3(Variable vdlen_2203, Variable vglen_2203, VariableAccess target_6, SubExpr target_7, ExprStmt target_8, PointerArithmeticOperation target_9) {
exists(IfStmt target_3 |
	target_3.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vglen_2203
	and target_3.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vdlen_2203
	and target_3.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_6
	and target_3.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_7.getLeftOperand().(VariableAccess).getLocation())
	and target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_3.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation())
	and target_3.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation().isBefore(target_9.getRightOperand().(VariableAccess).getLocation()))
}

predicate func_4(Function func, IfStmt target_4) {
	target_4.getCondition().(LogicalOrExpr).getLeftOperand().(FunctionCall).getTarget().hasName("tipc_link_is_blocked")
	and target_4.getCondition().(LogicalOrExpr).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("tipc_link *")
	and target_4.getCondition().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(VariableAccess).getTarget().getType().hasName("sk_buff_head *")
	and target_4.getThen().(GotoStmt).getName() ="exit"
	and target_4.getEnclosingFunction() = func
}

predicate func_6(Variable vmtyp_2211, VariableAccess target_6) {
	target_6.getTarget()=vmtyp_2211
}

predicate func_7(Variable vdlen_2203, Variable vglen_2203, SubExpr target_7) {
	target_7.getLeftOperand().(VariableAccess).getTarget()=vdlen_2203
	and target_7.getRightOperand().(VariableAccess).getTarget()=vglen_2203
}

predicate func_8(Variable vglen_2203, ExprStmt target_8) {
	target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vglen_2203
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("tipc_get_gap_ack_blks")
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("tipc_gap_ack_blks *")
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("tipc_link *")
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("tipc_msg *")
}

predicate func_9(Variable vglen_2203, PointerArithmeticOperation target_9) {
	target_9.getLeftOperand().(VariableAccess).getTarget().getType().hasName("void *")
	and target_9.getRightOperand().(VariableAccess).getTarget()=vglen_2203
}

from Function func, Variable vmtyp_2211, Variable vdlen_2203, Variable vglen_2203, IfStmt target_4, VariableAccess target_6, SubExpr target_7, ExprStmt target_8, PointerArithmeticOperation target_9
where
not func_2(vdlen_2203, target_4, func)
and not func_3(vdlen_2203, vglen_2203, target_6, target_7, target_8, target_9)
and func_4(func, target_4)
and func_6(vmtyp_2211, target_6)
and func_7(vdlen_2203, vglen_2203, target_7)
and func_8(vglen_2203, target_8)
and func_9(vglen_2203, target_9)
and vmtyp_2211.getType().hasName("int")
and vdlen_2203.getType().hasName("u16")
and vglen_2203.getType().hasName("u16")
and vmtyp_2211.(LocalVariable).getFunction() = func
and vdlen_2203.(LocalVariable).getFunction() = func
and vglen_2203.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
