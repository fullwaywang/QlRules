/**
 * @name linux-401e7e88d4ef80188ffa07095ac00456f901b8c4-try_smi_init
 * @id cpp/linux/401e7e88d4ef80188ffa07095ac00456f901b8c4/try-smi-init
 * @description linux-401e7e88d4ef80188ffa07095ac00456f901b8c4-drivers/char/ipmi/ipmi_si_intf.c-try_smi_init CVE-2019-11811
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vnew_smi_1921, Variable vrv_1923, ExprStmt target_1, NotExpr target_2, ExprStmt target_3, ReturnStmt target_4, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(LogicalAndExpr).getLeftOperand().(VariableAccess).getTarget()=vrv_1923
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(ValueFieldAccess).getTarget().getName()="io_cleanup"
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="io"
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnew_smi_1921
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(VariableCall).getExpr().(ValueFieldAccess).getTarget().getName()="io_cleanup"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(VariableCall).getExpr().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="io"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(VariableCall).getExpr().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnew_smi_1921
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(VariableCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="io"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(VariableCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnew_smi_1921
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="io_cleanup"
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="io"
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnew_smi_1921
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getOperand().(NotExpr).getOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getRightOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_3.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getLeftOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(VariableAccess).getLocation().isBefore(target_4.getExpr().(VariableAccess).getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("kfree")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("char *")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Parameter vnew_smi_1921, NotExpr target_2) {
	target_2.getOperand().(NotExpr).getOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="init_name"
	and target_2.getOperand().(NotExpr).getOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="dev"
	and target_2.getOperand().(NotExpr).getOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="io"
	and target_2.getOperand().(NotExpr).getOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnew_smi_1921
	and target_2.getOperand().(NotExpr).getOperand().(EqualityOperation).getRightOperand() instanceof Literal
}

predicate func_3(Parameter vnew_smi_1921, Variable vrv_1923, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("_dev_err")
	and target_3.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="dev"
	and target_3.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="io"
	and target_3.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnew_smi_1921
	and target_3.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="Unable to register device: error %d\n"
	and target_3.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vrv_1923
}

predicate func_4(Variable vrv_1923, ReturnStmt target_4) {
	target_4.getExpr().(VariableAccess).getTarget()=vrv_1923
}

from Function func, Parameter vnew_smi_1921, Variable vrv_1923, ExprStmt target_1, NotExpr target_2, ExprStmt target_3, ReturnStmt target_4
where
not func_0(vnew_smi_1921, vrv_1923, target_1, target_2, target_3, target_4, func)
and func_1(func, target_1)
and func_2(vnew_smi_1921, target_2)
and func_3(vnew_smi_1921, vrv_1923, target_3)
and func_4(vrv_1923, target_4)
and vnew_smi_1921.getType().hasName("smi_info *")
and vrv_1923.getType().hasName("int")
and vnew_smi_1921.getFunction() = func
and vrv_1923.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
