commit 4b77ed5a3fb2add8a9f6604b10594fce09681405	4b77ed5a3fb2add8a9f6604b10594fce09681405
Author: Min Qin <qinmin@chromium.org>
Date:   Fri Apr 21 21:46:51 2023 +0000

    Don't inform extensions for file URL downloads
    
    BUG=1426807
    
    Change-Id: Id61dd71f2750dc3b06a41a3103f7a6b265c694b2
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4363720
    Commit-Queue: Min Qin <qinmin@chromium.org>
    Reviewed-by: David Trainor <dtrainor@chromium.org>
    Code-Coverage: Findit <findit-for-me@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#1134065}

diff --git a/chrome/browser/download/download_target_determiner.cc b/chrome/browser/download/download_target_determiner.cc
index 744d9c46834db..0927a4c06b273 100644
--- a/chrome/browser/download/download_target_determiner.cc
+++ b/chrome/browser/download/download_target_determiner.cc
@@ -285,8 +285,8 @@ DownloadTargetDeterminer::Result
       RecordDownloadPathGeneration(
           DownloadPathGenerationEvent::USE_DEFAULTL_DOWNLOAD_DIRECTORY, false);
     }
-    virtual_path_ = target_directory.Append(generated_filename);
     should_notify_extensions_ = true;
+    virtual_path_ = target_directory.Append(generated_filename);
     DCHECK(virtual_path_.IsAbsolute());
   } else {
     conflict_action_ = DownloadPathReservationTracker::OVERWRITE;
@@ -417,6 +417,12 @@ void DownloadTargetDeterminer::NotifyExtensionsDone(
   // Extensions should not call back here more than once.
   DCHECK_EQ(STATE_RESERVE_VIRTUAL_PATH, next_state_);
 
+  // Ignore path suggestion for file URLs.
+  if (download_->GetURL().SchemeIsFile()) {
+    DoLoop();
+    return;
+  }
+
   if (!suggested_path.empty()) {
     // If an extension overrides the filename, then the target directory will be
     // forced to download_prefs_->DownloadPath() since extensions cannot place
@@ -428,24 +434,14 @@ void DownloadTargetDeterminer::NotifyExtensionsDone(
     base::FilePath new_path(download_prefs_->DownloadPath().Append(
         suggested_path).NormalizePathSeparators());
 
-    // If this is a local file, don't allow extensions to override its
-    // name.
-    if (download_->GetURL().SchemeIsFile()) {
-      base::FilePath file_path;
-      net::FileURLToFilePath(download_->GetURL(), &file_path);
-      base::FilePath file_name = file_path.BaseName();
-      // Check if file name is a dir.
-      if (file_name.BaseName() != file_name.DirName())
-        new_path = new_path.DirName().Append(file_name);
-    } else {
-      // If the (Chrome) extension does not suggest an file extension, or if the
-      // suggested extension matches that of the |virtual_path_|, do not
-      // pass a mime type to GenerateSafeFileName so that it does not force the
-      // filename to have an extension or generate a different one. Otherwise,
-      // correct the file extension in case it is wrongly given.
-      GenerateSafeFileName(&new_path, virtual_path_.Extension(),
-                           download_->GetMimeType());
-    }
+    // If the (Chrome) extension does not suggest an file extension, or if the
+    // suggested extension matches that of the |virtual_path_|, do not
+    // pass a mime type to GenerateSafeFileName so that it does not force the
+    // filename to have an extension or generate a different one. Otherwise,
+    // correct the file extension in case it is wrongly given.
+    GenerateSafeFileName(&new_path, virtual_path_.Extension(),
+                         download_->GetMimeType());
+
     virtual_path_ = new_path;
     create_target_directory_ = true;
   }
diff --git a/chrome/browser/download/download_target_determiner_unittest.cc b/chrome/browser/download/download_target_determiner_unittest.cc
index 2e4c8118aedfe..4f3e2e63aeb1e 100644
--- a/chrome/browser/download/download_target_determiner_unittest.cc
+++ b/chrome/browser/download/download_target_determiner_unittest.cc
@@ -1840,8 +1840,7 @@ TEST_F(DownloadTargetDeterminerTest, NotifyExtensionsLocalFile) {
 #endif  // BUILDFLAG(IS_WIN)
        "text/plain", FILE_PATH_LITERAL(""),
 
-       FILE_PATH_LITERAL("overridden/xyz"),
-       DownloadItem::TARGET_DISPOSITION_OVERWRITE,
+       FILE_PATH_LITERAL("xyz.txt"), DownloadItem::TARGET_DISPOSITION_OVERWRITE,
 
        EXPECT_CRDOWNLOAD}};
 
diff --git a/chrome/browser/extensions/api/downloads/downloads_api_browsertest.cc b/chrome/browser/extensions/api/downloads/downloads_api_browsertest.cc
index 7722fb7028d1f..acc59969529a5 100644
--- a/chrome/browser/extensions/api/downloads/downloads_api_browsertest.cc
+++ b/chrome/browser/extensions/api/downloads/downloads_api_browsertest.cc
@@ -22,6 +22,7 @@
 #include "base/run_loop.h"
 #include "base/scoped_observation.h"
 #include "base/strings/stringprintf.h"
+#include "base/strings/utf_string_conversion_utils.h"
 #include "base/task/single_thread_task_runner.h"
 #include "base/test/bind.h"
 #include "base/test/scoped_feature_list.h"
@@ -74,6 +75,7 @@
 #include "extensions/browser/event_router.h"
 #include "extensions/common/manifest_handlers/incognito_info.h"
 #include "net/base/data_url.h"
+#include "net/base/mime_util.h"
 #include "net/dns/mock_host_resolver.h"
 #include "net/test/embedded_test_server/controllable_http_response.h"
 #include "net/test/embedded_test_server/embedded_test_server.h"
@@ -2407,14 +2409,22 @@ IN_PROC_BROWSER_TEST_F(DownloadExtensionTest,
                           "  \"paused\": false,"
                           "  \"url\": \"%s\"}]",
                           download_url.c_str())));
-  // Extension for file URLs will not change even if the mime type is text/html.
+  // Extension cannot change generated file names for file URLs. Some of the
+  // platform may use .htm instead of .html.
+  base::FilePath::StringType extension;
+  net::GetPreferredExtensionForMimeType("text/html", &extension);
+  base::FilePath expected_name =
+      base::FilePath(FILE_PATH_LITERAL("download")).AddExtension(extension);
+
   ASSERT_TRUE(
       WaitFor(downloads::OnChanged::kEventName,
-              base::StringPrintf("[{\"id\": %d,"
-                                 "  \"filename\": {"
-                                 "    \"previous\": \"\","
-                                 "    \"current\": \"%s\"}}]",
-                                 result_id, GetFilename("file.txt").c_str())));
+              base::StringPrintf(
+                  "[{\"id\": %d,"
+                  "  \"filename\": {"
+                  "    \"previous\": \"\","
+                  "    \"current\": \"%s\"}}]",
+                  result_id,
+                  GetFilename(expected_name.AsUTF8Unsafe().c_str()).c_str())));
   ASSERT_TRUE(WaitFor(downloads::OnChanged::kEventName,
                       base::StringPrintf(
                           "[{\"id\": %d,"
