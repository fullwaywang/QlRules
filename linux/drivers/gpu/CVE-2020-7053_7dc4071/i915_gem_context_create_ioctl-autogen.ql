/**
 * @name linux-7dc40713618c884bf07c030d1ab1f47a9dc1f310-i915_gem_context_create_ioctl
 * @id cpp/linux/7dc40713618c884bf07c030d1ab1f47a9dc1f310/i915-gem-context-create-ioctl
 * @description linux-7dc40713618c884bf07c030d1ab1f47a9dc1f310-drivers/gpu/drm/i915/i915_gem_context.c-i915_gem_context_create_ioctl CVE-2020-7053
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(FunctionCall target_5, Function func) {
	exists(ReturnStmt target_0 |
		target_0.getExpr() instanceof FunctionCall
		and target_0.getParent().(IfStmt).getCondition()=target_5
		and target_0.getEnclosingFunction() = func)
}

predicate func_1(Parameter vdev_816, ExprStmt target_6, AddressOfExpr target_7) {
	exists(FunctionCall target_1 |
		target_1.getTarget().hasName("mutex_lock_nested")
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="struct_mutex"
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_816
		and target_1.getArgument(1).(Literal).getValue()="0"
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_7.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vctx_822, Variable vret_823, FunctionCall target_2) {
		target_2.getTarget().hasName("PTR_ERR")
		and target_2.getArgument(0).(VariableAccess).getTarget()=vctx_822
		and target_2.getParent().(AssignExpr).getRValue() = target_2
		and target_2.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_823
}

predicate func_3(Variable vret_823, AssignExpr target_3) {
		target_3.getLValue().(VariableAccess).getTarget()=vret_823
		and target_3.getRValue() instanceof FunctionCall
}

predicate func_4(FunctionCall target_5, Function func, GotoStmt target_4) {
		target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
		and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable vctx_822, FunctionCall target_5) {
		target_5.getTarget().hasName("IS_ERR")
		and target_5.getArgument(0).(VariableAccess).getTarget()=vctx_822
}

predicate func_6(Variable vret_823, Parameter vdev_816, ExprStmt target_6) {
		target_6.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_823
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("i915_mutex_lock_interruptible")
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdev_816
}

predicate func_7(Parameter vdev_816, AddressOfExpr target_7) {
		target_7.getOperand().(PointerFieldAccess).getTarget().getName()="struct_mutex"
		and target_7.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_816
		and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
}

from Function func, Variable vctx_822, Variable vret_823, Parameter vdev_816, FunctionCall target_2, AssignExpr target_3, GotoStmt target_4, FunctionCall target_5, ExprStmt target_6, AddressOfExpr target_7
where
not func_0(target_5, func)
and not func_1(vdev_816, target_6, target_7)
and func_2(vctx_822, vret_823, target_2)
and func_3(vret_823, target_3)
and func_4(target_5, func, target_4)
and func_5(vctx_822, target_5)
and func_6(vret_823, vdev_816, target_6)
and func_7(vdev_816, target_7)
and vctx_822.getType().hasName("i915_gem_context *")
and vret_823.getType().hasName("int")
and vdev_816.getType().hasName("drm_device *")
and vctx_822.(LocalVariable).getFunction() = func
and vret_823.(LocalVariable).getFunction() = func
and vdev_816.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
