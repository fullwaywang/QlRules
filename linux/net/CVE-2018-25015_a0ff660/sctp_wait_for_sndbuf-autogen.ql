/**
 * @name linux-a0ff660058b88d12625a783ce9e5c1371c87951f-sctp_wait_for_sndbuf
 * @id cpp/linux/a0ff660058b88d12625a783ce9e5c1371c87951f/sctp-wait-for-sndbuf
 * @description linux-a0ff660058b88d12625a783ce9e5c1371c87951f-net/sctp/socket.c-sctp_wait_for_sndbuf CVE-2018-25015
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Function func, GotoStmt target_1) {
		func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

predicate func_2(Variable vsk_8027, EqualityOperation target_6, ExprStmt target_2) {
		target_2.getExpr().(FunctionCall).getTarget().hasName("release_sock")
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_8027
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_3(Variable vsk_8027, Parameter vasoc_8024, EqualityOperation target_6, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsk_8027
		and target_3.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getTarget().getName()="sk"
		and target_3.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="base"
		and target_3.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vasoc_8024
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_4(Variable vsk_8027, EqualityOperation target_6, ExprStmt target_3, ExprStmt target_5, ExprStmt target_4) {
		target_4.getExpr().(FunctionCall).getTarget().hasName("lock_sock")
		and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_8027
		and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
		and target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation())
}

predicate func_5(Parameter vorig_sk_8025, Variable vsk_8027, Function func, ExprStmt target_5) {
		target_5.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vorig_sk_8025
		and target_5.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vsk_8027
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

predicate func_6(Variable vsk_8027, Parameter vasoc_8024, EqualityOperation target_6) {
		target_6.getAnOperand().(VariableAccess).getTarget()=vsk_8027
		and target_6.getAnOperand().(ValueFieldAccess).getTarget().getName()="sk"
		and target_6.getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="base"
		and target_6.getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vasoc_8024
}

from Function func, Parameter vorig_sk_8025, Variable vsk_8027, Parameter vasoc_8024, GotoStmt target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, ExprStmt target_5, EqualityOperation target_6
where
func_1(func, target_1)
and func_2(vsk_8027, target_6, target_2)
and func_3(vsk_8027, vasoc_8024, target_6, target_3)
and func_4(vsk_8027, target_6, target_3, target_5, target_4)
and func_5(vorig_sk_8025, vsk_8027, func, target_5)
and func_6(vsk_8027, vasoc_8024, target_6)
and vorig_sk_8025.getType().hasName("sock **")
and vsk_8027.getType().hasName("sock *")
and vasoc_8024.getType().hasName("sctp_association *")
and vorig_sk_8025.getFunction() = func
and vsk_8027.(LocalVariable).getFunction() = func
and vasoc_8024.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
