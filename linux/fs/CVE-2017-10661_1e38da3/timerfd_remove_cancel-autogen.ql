/**
 * @name linux-1e38da300e1e395a15048b0af1e5305bd91402f6-timerfd_remove_cancel
 * @id cpp/linux/1e38da300e1e395a15048b0af1e5305bd91402f6/timerfd-remove-cancel
 * @description linux-1e38da300e1e395a15048b0af1e5305bd91402f6-fs/timerfd.c-timerfd_remove_cancel CVE-2017-10661
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vctx_115, FunctionCall target_0) {
	target_0.getTarget().hasName("list_del_rcu")
	and not target_0.getTarget().hasName("__timerfd_remove_cancel")
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="clist"
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_115
}

predicate func_1(Parameter vctx_115) {
exists(PointerFieldAccess target_1 |
	target_1.getTarget().getName()="cancel_lock"
	and target_1.getQualifier().(VariableAccess).getTarget()=vctx_115)
}

predicate func_2(Parameter vctx_115, AddressOfExpr target_13) {
exists(PointerFieldAccess target_2 |
	target_2.getTarget().getName()="cancel_lock"
	and target_2.getQualifier().(VariableAccess).getTarget()=vctx_115
	and target_2.getQualifier().(VariableAccess).getLocation().isBefore(target_13.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_3(Parameter vctx_115, BlockStmt target_14, VariableAccess target_3) {
	target_3.getTarget()=vctx_115
	and target_3.getParent().(PointerFieldAccess).getParent().(IfStmt).getThen()=target_14
}

predicate func_4(Parameter vctx_115, VariableAccess target_4) {
	target_4.getTarget()=vctx_115
}

predicate func_5(Parameter vctx_115, VariableAccess target_5) {
	target_5.getTarget()=vctx_115
	and target_5.getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_6(Parameter vctx_115, Variable vcancel_lock, Function func, IfStmt target_6) {
	target_6.getCondition().(PointerFieldAccess).getTarget().getName()="might_cancel"
	and target_6.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_115
	and target_6.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="might_cancel"
	and target_6.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_115
	and target_6.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_lock")
	and target_6.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vcancel_lock
	and target_6.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr() instanceof FunctionCall
	and target_6.getThen().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
	and target_6.getThen().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vcancel_lock
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_6
}

/*predicate func_7(Parameter vctx_115, AssignExpr target_7) {
	target_7.getLValue().(PointerFieldAccess).getTarget().getName()="might_cancel"
	and target_7.getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_115
}

*/
/*predicate func_8(Variable vcancel_lock, AddressOfExpr target_15, VariableAccess target_8) {
	target_8.getTarget()=vcancel_lock
	and target_8.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_lock")
	and target_8.getLocation().isBefore(target_15.getOperand().(VariableAccess).getLocation())
}

*/
predicate func_9(Parameter vctx_115, PointerFieldAccess target_9) {
	target_9.getTarget().getName()="clist"
	and target_9.getQualifier().(VariableAccess).getTarget()=vctx_115
}

/*predicate func_10(Variable vcancel_lock, PointerFieldAccess target_16, ExprStmt target_10) {
	target_10.getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
	and target_10.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vcancel_lock
	and target_10.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_16
}

*/
/*predicate func_11(Variable vcancel_lock, AddressOfExpr target_17, VariableAccess target_11) {
	target_11.getTarget()=vcancel_lock
	and target_11.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
	and target_17.getOperand().(VariableAccess).getLocation().isBefore(target_11.getLocation())
}

*/
predicate func_13(Parameter vctx_115, AddressOfExpr target_13) {
	target_13.getOperand().(PointerFieldAccess).getTarget().getName()="clist"
	and target_13.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_115
}

predicate func_14(Variable vcancel_lock, BlockStmt target_14) {
	target_14.getStmt(0).(ExprStmt).getExpr() instanceof AssignExpr
	and target_14.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_lock")
	and target_14.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vcancel_lock
	and target_14.getStmt(2).(ExprStmt).getExpr() instanceof FunctionCall
	and target_14.getStmt(3) instanceof ExprStmt
}

predicate func_15(Variable vcancel_lock, AddressOfExpr target_15) {
	target_15.getOperand().(VariableAccess).getTarget()=vcancel_lock
	and target_15.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
}

predicate func_16(Parameter vctx_115, PointerFieldAccess target_16) {
	target_16.getTarget().getName()="might_cancel"
	and target_16.getQualifier().(VariableAccess).getTarget()=vctx_115
}

predicate func_17(Variable vcancel_lock, AddressOfExpr target_17) {
	target_17.getOperand().(VariableAccess).getTarget()=vcancel_lock
	and target_17.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_lock")
}

from Function func, Parameter vctx_115, Variable vcancel_lock, FunctionCall target_0, VariableAccess target_3, VariableAccess target_4, VariableAccess target_5, IfStmt target_6, PointerFieldAccess target_9, AddressOfExpr target_13, BlockStmt target_14, AddressOfExpr target_15, PointerFieldAccess target_16, AddressOfExpr target_17
where
func_0(vctx_115, target_0)
and not func_1(vctx_115)
and not func_2(vctx_115, target_13)
and func_3(vctx_115, target_14, target_3)
and func_4(vctx_115, target_4)
and func_5(vctx_115, target_5)
and func_6(vctx_115, vcancel_lock, func, target_6)
and func_9(vctx_115, target_9)
and func_13(vctx_115, target_13)
and func_14(vcancel_lock, target_14)
and func_15(vcancel_lock, target_15)
and func_16(vctx_115, target_16)
and func_17(vcancel_lock, target_17)
and vctx_115.getType().hasName("timerfd_ctx *")
and vcancel_lock.getType().hasName("spinlock_t")
and vctx_115.getFunction() = func
and not vcancel_lock.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
