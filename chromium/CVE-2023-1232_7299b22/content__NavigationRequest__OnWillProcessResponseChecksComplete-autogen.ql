/**
 * @name chromium-7299b22d624a5325955149cd48f07d82bf2a0039-content__NavigationRequest__OnWillProcessResponseChecksComplete
 * @id cpp/chromium/7299b22d624a5325955149cd48f07d82bf2a0039/contentnavigationrequestonwillprocessresponsecheckscomplete
 * @description chromium-7299b22d624a5325955149cd48f07d82bf2a0039-content/browser/renderer_host/navigation_request.cc-content__NavigationRequest__OnWillProcessResponseChecksComplete CVE-2023-1232
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(LogicalOrExpr target_1, Function func) {
exists(ExprStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		obj_0.getTarget().hasName("MaybeAddResourceTimingEntryForCancelledNavigation")
		and obj_0.getQualifier().(ThisExpr).getType() instanceof PointerType
	)
	and exists(BlockStmt obj_1 | obj_1=target_0.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getThen().(BlockStmt).getStmt(0)=target_0
			and obj_2.getCondition()=target_1
		)
	)
	and target_0.getEnclosingFunction() = func
)
}

predicate func_1(Function func, LogicalOrExpr target_1) {
	exists(LogicalOrExpr obj_0 | obj_0=target_1.getLeftOperand() |
		exists(EqualityOperation obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getLeftOperand() |
				obj_2.getTarget().hasName("action")
				and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("ThrottleCheckResult")
			)
		)
		and exists(EqualityOperation obj_3 | obj_3=obj_0.getRightOperand() |
			exists(FunctionCall obj_4 | obj_4=obj_3.getLeftOperand() |
				obj_4.getTarget().hasName("action")
				and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("ThrottleCheckResult")
			)
		)
	)
	and exists(NotExpr obj_5 | obj_5=target_1.getRightOperand() |
		exists(PointerFieldAccess obj_6 | obj_6=obj_5.getOperand() |
			obj_6.getTarget().getName()="response_should_be_rendered_"
			and obj_6.getQualifier().(ThisExpr).getType() instanceof PointerType
		)
	)
	and target_1.getEnclosingFunction() = func
}

from Function func, LogicalOrExpr target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
