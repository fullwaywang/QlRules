/**
 * @name linux-cea4dcfdad926a27a18e188720efe0f2c9403456-iscsi_add_notunderstood_response
 * @id cpp/linux/cea4dcfdad926a27a18e188720efe0f2c9403456/iscsi-add-notunderstood-response
 * @description linux-cea4dcfdad926a27a18e188720efe0f2c9403456-drivers/target/iscsi/iscsi_target_parameters.c-iscsi_add_notunderstood_response CVE-2013-2850
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vkey_741, FunctionCall target_0) {
	target_0.getTarget().hasName("strlen")
	and not target_0.getTarget().hasName("strlcpy")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vkey_741
	and target_0.getParent().(AddExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_1(Function func, FunctionCall target_1) {
	target_1.getTarget().hasName("strlen")
	and not target_1.getTarget().hasName("strlcpy")
	and target_1.getArgument(0).(StringLiteral).getValue()="NotUnderstood"
	and target_1.getParent().(AddExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func) {
exists(SizeofExprOperator target_2 |
	target_2.getValue()="64"
	and target_2.getEnclosingFunction() = func)
}

predicate func_3(Function func) {
exists(SizeofExprOperator target_3 |
	target_3.getValue()="32"
	and target_3.getEnclosingFunction() = func)
}

predicate func_4(Variable vextra_response_745, PointerFieldAccess target_4) {
	target_4.getTarget().getName()="key"
	and target_4.getQualifier().(VariableAccess).getTarget()=vextra_response_745
	and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_5(Variable vextra_response_745, PointerFieldAccess target_5) {
	target_5.getTarget().getName()="value"
	and target_5.getQualifier().(VariableAccess).getTarget()=vextra_response_745
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_6(Parameter vkey_741, VariableAccess target_6) {
	target_6.getTarget()=vkey_741
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_8(Variable vextra_response_745, Parameter vkey_741, FunctionCall target_8) {
	target_8.getTarget().hasName("strncpy")
	and target_8.getArgument(0).(PointerFieldAccess).getTarget().getName()="key"
	and target_8.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vextra_response_745
	and target_8.getArgument(1).(VariableAccess).getTarget()=vkey_741
	and target_8.getArgument(2).(AddExpr).getLeftOperand() instanceof FunctionCall
	and target_8.getArgument(2).(AddExpr).getRightOperand().(Literal).getValue()="1"
}

predicate func_9(Variable vextra_response_745, FunctionCall target_9) {
	target_9.getTarget().hasName("strncpy")
	and target_9.getArgument(0).(PointerFieldAccess).getTarget().getName()="value"
	and target_9.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vextra_response_745
	and target_9.getArgument(1) instanceof StringLiteral
	and target_9.getArgument(2).(AddExpr).getLeftOperand() instanceof FunctionCall
	and target_9.getArgument(2).(AddExpr).getRightOperand().(Literal).getValue()="1"
}

from Function func, Variable vextra_response_745, Parameter vkey_741, FunctionCall target_0, FunctionCall target_1, PointerFieldAccess target_4, PointerFieldAccess target_5, VariableAccess target_6, FunctionCall target_8, FunctionCall target_9
where
func_0(vkey_741, target_0)
and func_1(func, target_1)
and not func_2(func)
and not func_3(func)
and func_4(vextra_response_745, target_4)
and func_5(vextra_response_745, target_5)
and func_6(vkey_741, target_6)
and func_8(vextra_response_745, vkey_741, target_8)
and func_9(vextra_response_745, target_9)
and vextra_response_745.getType().hasName("iscsi_extra_response *")
and vkey_741.getType().hasName("char *")
and vextra_response_745.(LocalVariable).getFunction() = func
and vkey_741.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
