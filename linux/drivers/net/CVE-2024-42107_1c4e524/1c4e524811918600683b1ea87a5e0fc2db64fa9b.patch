commit 1c4e524811918600683b1ea87a5e0fc2db64fa9b
Author: Jacob Keller <jacob.e.keller@intel.com>
Date:   Tue Jul 2 10:14:55 2024 -0700

    ice: Don't process extts if PTP is disabled
    
    [ Upstream commit 996422e3230e41468f652d754fefd1bdbcd4604e ]
    
    The ice_ptp_extts_event() function can race with ice_ptp_release() and
    result in a NULL pointer dereference which leads to a kernel panic.
    
    Panic occurs because the ice_ptp_extts_event() function calls
    ptp_clock_event() with a NULL pointer. The ice driver has already
    released the PTP clock by the time the interrupt for the next external
    timestamp event occurs.
    
    To fix this, modify the ice_ptp_extts_event() function to check the
    PTP state and bail early if PTP is not ready.
    
    Fixes: 172db5f91d5f ("ice: add support for auxiliary input/output pins")
    Reviewed-by: Przemek Kitszel <przemyslaw.kitszel@intel.com>
    Signed-off-by: Jacob Keller <jacob.e.keller@intel.com>
    Signed-off-by: Karol Kolacinski <karol.kolacinski@intel.com>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Tested-by: Pucha Himasekhar Reddy <himasekharx.reddy.pucha@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Link: https://patch.msgid.link/20240702171459.2606611-3-anthony.l.nguyen@intel.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/drivers/net/ethernet/intel/ice/ice_ptp.c b/drivers/net/ethernet/intel/ice/ice_ptp.c
index ee741a1d13cf..e983e56b342b 100644
--- a/drivers/net/ethernet/intel/ice/ice_ptp.c
+++ b/drivers/net/ethernet/intel/ice/ice_ptp.c
@@ -1578,6 +1578,10 @@ void ice_ptp_extts_event(struct ice_pf *pf)
 	u8 chan, tmr_idx;
 	u32 hi, lo;
 
+	/* Don't process timestamp events if PTP is not ready */
+	if (pf->ptp.state != ICE_PTP_READY)
+		return;
+
 	tmr_idx = hw->func_caps.ts_func_info.tmr_index_owned;
 	/* Event time is captured by one of the two matched registers
 	 *      GLTSYN_EVNT_L: 32 LSB of sampled time event
