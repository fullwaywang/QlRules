/**
 * @name linux-c0a333d842ef67ac04adc72ff79dc1ccc3dca4ed-sof_dfsentry_write
 * @id cpp/linux/c0a333d842ef67ac04adc72ff79dc1ccc3dca4ed/sof-dfsentry-write
 * @description linux-c0a333d842ef67ac04adc72ff79dc1ccc3dca4ed-sound/soc/sof/debug.c-sof_dfsentry_write CVE-2019-18812
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vret_136, LogicalAndExpr target_4, ExprStmt target_5) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_136
	and target_0.getExpr().(AssignExpr).getRValue() instanceof UnaryMinusExpr
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation()))
}

predicate func_1(LogicalAndExpr target_4, Function func) {
exists(GotoStmt target_1 |
	target_1.getName() ="out"
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_1.getEnclosingFunction() = func)
}

predicate func_2(Function func, UnaryMinusExpr target_2) {
	target_2.getValue()="-22"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(LogicalAndExpr target_4, Function func, ReturnStmt target_3) {
	target_3.getExpr() instanceof UnaryMinusExpr
	and target_3.getParent().(IfStmt).getCondition()=target_4
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Function func, LogicalAndExpr target_4) {
	target_4.getLeftOperand().(FunctionCall).getTarget().hasName("strcmp")
	and target_4.getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="name"
	and target_4.getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="d_name"
	and target_4.getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("dentry *")
	and target_4.getLeftOperand().(FunctionCall).getArgument(1).(StringLiteral).getValue()="ipc_flood_count"
	and target_4.getRightOperand().(FunctionCall).getTarget().hasName("strcmp")
	and target_4.getRightOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="name"
	and target_4.getRightOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="d_name"
	and target_4.getRightOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("dentry *")
	and target_4.getRightOperand().(FunctionCall).getArgument(1).(StringLiteral).getValue()="ipc_flood_duration_ms"
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable vret_136, Function func, ExprStmt target_5) {
	target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_136
	and target_5.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("size_t")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

from Function func, Variable vret_136, UnaryMinusExpr target_2, ReturnStmt target_3, LogicalAndExpr target_4, ExprStmt target_5
where
not func_0(vret_136, target_4, target_5)
and not func_1(target_4, func)
and func_2(func, target_2)
and func_3(target_4, func, target_3)
and func_4(func, target_4)
and func_5(vret_136, func, target_5)
and vret_136.getType().hasName("int")
and vret_136.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
