commit dacc15e9cb248d19e5fc63c54bef0b9b55007761
Author: Florian Westphal <fw@strlen.de>
Date:   Fri Jun 14 12:17:33 2024 +0200

    bpf: Avoid splat in pskb_pull_reason
    
    [ Upstream commit 2bbe3e5a2f4ef69d13be54f1cf895b4658287080 ]
    
    syzkaller builds (CONFIG_DEBUG_NET=y) frequently trigger a debug
    hint in pskb_may_pull.
    
    We'd like to retain this debug check because it might hint at integer
    overflows and other issues (kernel code should pull headers, not huge
    value).
    
    In bpf case, this splat isn't interesting at all: such (nonsensical)
    bpf programs are typically generated by a fuzzer anyway.
    
    Do what Eric suggested and suppress such warning.
    
    For CONFIG_DEBUG_NET=n we don't need the extra check because
    pskb_may_pull will do the right thing: return an error without the
    WARN() backtrace.
    
    Fixes: 219eee9c0d16 ("net: skbuff: add overflow debug check to pull/push helpers")
    Reported-by: syzbot+0c4150bff9fff3bf023c@syzkaller.appspotmail.com
    Suggested-by: Eric Dumazet <edumazet@google.com>
    Signed-off-by: Florian Westphal <fw@strlen.de>
    Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
    Reviewed-by: Eric Dumazet <edumazet@google.com>
    Acked-by: Daniel Borkmann <daniel@iogearbox.net>
    Closes: https://syzkaller.appspot.com/bug?extid=0c4150bff9fff3bf023c
    Link: https://lore.kernel.org/netdev/9f254c96-54f2-4457-b7ab-1d9f6187939c@gmail.com/
    Link: https://lore.kernel.org/bpf/20240614101801.9496-1-fw@strlen.de
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/net/core/filter.c b/net/core/filter.c
index 1d8b271ef8cc..7a0741391353 100644
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -1655,6 +1655,11 @@ static DEFINE_PER_CPU(struct bpf_scratchpad, bpf_sp);
 static inline int __bpf_try_make_writable(struct sk_buff *skb,
 					  unsigned int write_len)
 {
+#ifdef CONFIG_DEBUG_NET
+	/* Avoid a splat in pskb_may_pull_reason() */
+	if (write_len > INT_MAX)
+		return -EINVAL;
+#endif
 	return skb_ensure_writable(skb, write_len);
 }
 
