/**
 * @name linux-22076557b07c12086eeb16b8ce2b0b735f7a27e7-get_busid_idx
 * @id cpp/linux/22076557b07c12086eeb16b8ce2b0b735f7a27e7/get-busid-idx
 * @description linux-22076557b07c12086eeb16b8ce2b0b735f7a27e7-drivers/usb/usbip/stub_main.c-get_busid_idx CVE-2018-5814
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vi_44, PostfixIncrExpr target_3) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("spin_lock")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="busid_lock"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getType().hasName("bus_id_priv[16]")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_44
	and target_3.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation()))
}

predicate func_1(Variable vi_44, NotExpr target_4, ExprStmt target_5) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="busid_lock"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getType().hasName("bus_id_priv[16]")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_44
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_5.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation()))
}

predicate func_2(Variable vi_44, ArrayExpr target_6) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="busid_lock"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getType().hasName("bus_id_priv[16]")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_44
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation().isBefore(target_6.getArrayBase().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation()))
}

predicate func_3(Variable vi_44, PostfixIncrExpr target_3) {
	target_3.getOperand().(VariableAccess).getTarget()=vi_44
}

predicate func_4(Variable vi_44, NotExpr target_4) {
	target_4.getOperand().(FunctionCall).getTarget().hasName("strncmp")
	and target_4.getOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="name"
	and target_4.getOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_4.getOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_44
	and target_4.getOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("const char *")
	and target_4.getOperand().(FunctionCall).getArgument(2).(Literal).getValue()="32"
}

predicate func_5(Variable vi_44, ExprStmt target_5) {
	target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_5.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vi_44
}

predicate func_6(Variable vi_44, ArrayExpr target_6) {
	target_6.getArrayBase().(ValueFieldAccess).getTarget().getName()="name"
	and target_6.getArrayBase().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_6.getArrayBase().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_44
	and target_6.getArrayOffset().(Literal).getValue()="0"
}

from Function func, Variable vi_44, PostfixIncrExpr target_3, NotExpr target_4, ExprStmt target_5, ArrayExpr target_6
where
not func_0(vi_44, target_3)
and not func_1(vi_44, target_4, target_5)
and not func_2(vi_44, target_6)
and func_3(vi_44, target_3)
and func_4(vi_44, target_4)
and func_5(vi_44, target_5)
and func_6(vi_44, target_6)
and vi_44.getType().hasName("int")
and vi_44.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
