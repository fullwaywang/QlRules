/**
 * @name linux-073931017b49d9458aa351605b43a7e34598caef-hfsplus_set_posix_acl
 * @id cpp/linux/073931017b49d9458aa351605b43a7e34598caef/hfsplus-set-posix-acl
 * @description linux-073931017b49d9458aa351605b43a7e34598caef-fs/hfsplus/posix_acl.c-hfsplus_set_posix_acl CVE-2016-7097
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vacl_54, Variable verr_57, Parameter vinode_54, FunctionCall target_0) {
	target_0.getTarget().hasName("posix_acl_equiv_mode")
	and not target_0.getTarget().hasName("posix_acl_update_mode")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vacl_54
	and target_0.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="i_mode"
	and target_0.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinode_54
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_57
}

predicate func_2(Parameter vacl_54, ConditionalExpr target_6) {
exists(AddressOfExpr target_2 |
	target_2.getOperand().(VariableAccess).getTarget()=vacl_54
	and target_2.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
	and target_2.getOperand().(VariableAccess).getLocation().isBefore(target_6.getCondition().(VariableAccess).getLocation()))
}

predicate func_3(Variable verr_57, ReturnStmt target_7, VariableAccess target_3) {
	target_3.getTarget()=verr_57
	and target_3.getParent().(LTExpr).getGreaterOperand() instanceof Literal
	and target_3.getParent().(LTExpr).getParent().(IfStmt).getThen()=target_7
}

predicate func_4(Variable verr_57, ReturnStmt target_7, RelationalOperation target_4) {
	 (target_4 instanceof GTExpr or target_4 instanceof LTExpr)
	and target_4.getLesserOperand().(VariableAccess).getTarget()=verr_57
	and target_4.getGreaterOperand().(Literal).getValue()="0"
	and target_4.getParent().(IfStmt).getThen()=target_7
}

predicate func_6(Parameter vacl_54, ConditionalExpr target_6) {
	target_6.getCondition().(VariableAccess).getTarget()=vacl_54
	and target_6.getThen().(UnaryMinusExpr).getValue()="-13"
	and target_6.getElse().(Literal).getValue()="0"
}

predicate func_7(Variable verr_57, RelationalOperation target_4, ReturnStmt target_7) {
	target_7.getExpr().(VariableAccess).getTarget()=verr_57
	and target_7.getParent().(IfStmt).getCondition()=target_4
}

from Function func, Parameter vacl_54, Variable verr_57, Parameter vinode_54, FunctionCall target_0, VariableAccess target_3, RelationalOperation target_4, ConditionalExpr target_6, ReturnStmt target_7
where
func_0(vacl_54, verr_57, vinode_54, target_0)
and not func_2(vacl_54, target_6)
and func_3(verr_57, target_7, target_3)
and func_4(verr_57, target_7, target_4)
and func_6(vacl_54, target_6)
and func_7(verr_57, target_4, target_7)
and vacl_54.getType().hasName("posix_acl *")
and verr_57.getType().hasName("int")
and vinode_54.getType().hasName("inode *")
and vacl_54.getFunction() = func
and verr_57.(LocalVariable).getFunction() = func
and vinode_54.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
