/**
 * @name linux-975f764e96f71616b530e300c1bb2ac0ce0c2596-ip6_xmit
 * @id cpp/linux/975f764e96f71616b530e300c1bb2ac0ce0c2596/ip6-xmit
 * @description linux-975f764e96f71616b530e300c1bb2ac0ce0c2596-net/ipv6/ip6_output.c-ip6_xmit CVE-2024-44985
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(FunctionCall target_3, Function func) {
exists(ExprStmt target_0 |
	exists(BlockStmt obj_0 | obj_0=target_0.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(0)=target_0
			and obj_1.getCondition()=target_3
		)
	)
	and target_0.getExpr().(FunctionCall).getTarget().hasName("rcu_read_lock")
	and target_0.getEnclosingFunction() = func
)
}

predicate func_1(NotExpr target_4, Function func) {
exists(ExprStmt target_1 |
	exists(BlockStmt obj_0 | obj_0=target_1.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(1)=target_1
			and obj_1.getCondition()=target_4
		)
	)
	and target_1.getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(FunctionCall target_3, Function func) {
exists(ExprStmt target_2 |
	exists(BlockStmt obj_0 | obj_0=target_2.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(3)=target_2
			and obj_1.getCondition()=target_3
		)
	)
	and target_2.getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
	and target_2.getEnclosingFunction() = func
)
}

predicate func_3(Function func, FunctionCall target_3) {
	exists(NotExpr obj_0 | obj_0=target_3.getArgument(0) |
		exists(NotExpr obj_1 | obj_1=obj_0.getOperand() |
			exists(RelationalOperation obj_2 | obj_2=obj_1.getOperand() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getLesserOperand() |
					obj_3.getTarget().hasName("skb_headroom")
					and obj_3.getArgument(0).(VariableAccess).getTarget().getType().hasName("sk_buff *")
				)
				and obj_2.getGreaterOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
			)
		)
	)
	and target_3.getTarget().hasName("__builtin_expect")
	and target_3.getArgument(1).(Literal).getValue()="0"
	and target_3.getEnclosingFunction() = func
}

predicate func_4(BlockStmt target_5, Function func, NotExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget().getType().hasName("sk_buff *")
	and target_4.getParent().(IfStmt).getThen()=target_5
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Function func, BlockStmt target_5) {
	exists(ExprStmt obj_0 | obj_0=target_5.getStmt(0) |
		exists(StmtExpr obj_1 | obj_1=obj_0.getExpr() |
			exists(BlockStmt obj_2 | obj_2=obj_1.getStmt() |
				exists(IfStmt obj_3 | obj_3=obj_2.getStmt(1) |
					exists(FunctionCall obj_4 | obj_4=obj_3.getCondition() |
						obj_4.getTarget().hasName("__builtin_expect")
						and obj_4.getArgument(1).(Literal).getValue()="1"
					)
					and obj_3.getThen().(DoStmt).getCondition().(Literal).getValue()="0"
				)
				and obj_2.getStmt(2).(DoStmt).getCondition().(Literal).getValue()="0"
			)
		)
	)
	and target_5.getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-105"
	and target_5.getEnclosingFunction() = func
}

from Function func, FunctionCall target_3, NotExpr target_4, BlockStmt target_5
where
not func_0(target_3, func)
and not func_1(target_4, func)
and not func_2(target_3, func)
and func_3(func, target_3)
and func_4(target_5, func, target_4)
and func_5(func, target_5)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
