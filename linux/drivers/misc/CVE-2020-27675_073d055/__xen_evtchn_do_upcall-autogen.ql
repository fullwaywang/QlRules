/**
 * @name linux-073d0552ead5bfc7a3a9c01de590e924f11b5dd2-__xen_evtchn_do_upcall
 * @id cpp/linux/073d0552ead5bfc7a3a9c01de590e924f11b5dd2/--xen-evtchn-do-upcall
 * @description linux-073d0552ead5bfc7a3a9c01de590e924f11b5dd2-drivers/xen/events/events_base.c-__xen_evtchn_do_upcall CVE-2020-27675
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
	target_0.getValue()="1551"
	and not target_0.getValue()="1549"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, Literal target_1) {
	target_1.getValue()="1552"
	and not target_1.getValue()="1550"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(DoStmt target_4, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("_raw_read_lock")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("rwlock_t")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_4.getLocation()))
}

predicate func_3(Function func) {
exists(ExprStmt target_3 |
	target_3.getExpr().(FunctionCall).getTarget().hasName("_raw_read_unlock")
	and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("rwlock_t")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
	and target_3.getFollowingStmt() instanceof ReturnStmt)
}

predicate func_4(Function func, DoStmt target_4) {
	target_4.getCondition().(PointerFieldAccess).getTarget().getName()="evtchn_upcall_pending"
	and target_4.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("vcpu_info *")
	and target_4.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="evtchn_upcall_pending"
	and target_4.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("vcpu_info *")
	and target_4.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_4.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("xen_evtchn_handle_events")
	and target_4.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("int")
	and target_4.getEnclosingFunction() = func
}

from Function func, Literal target_0, Literal target_1, DoStmt target_4
where
func_0(func, target_0)
and func_1(func, target_1)
and not func_2(target_4, func)
and not func_3(func)
and func_4(func, target_4)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
