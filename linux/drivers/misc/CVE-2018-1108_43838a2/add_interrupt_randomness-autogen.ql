/**
 * @name linux-43838a23a05fbd13e47d750d3dfd77001536dd33-add_interrupt_randomness
 * @id cpp/linux/43838a23a05fbd13e47d750d3dfd77001536dd33/add-interrupt-randomness
 * @description linux-43838a23a05fbd13e47d750d3dfd77001536dd33-drivers/char/random.c-add_interrupt_randomness CVE-2018-1108
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
		target_0.getValue()="1"
		and not target_0.getValue()="0"
		and target_0.getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("__builtin_expect")
		and target_0.getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand() instanceof RelationalOperation
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vcrng_init) {
	exists(EqualityOperation target_1 |
		target_1.getAnOperand().(VariableAccess).getTarget()=vcrng_init
		and target_1.getAnOperand() instanceof Literal
		and target_1.getParent().(NotExpr).getParent().(NotExpr).getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("__builtin_expect")
		and target_1.getParent().(NotExpr).getParent().(NotExpr).getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand() instanceof RelationalOperation
		and target_1.getParent().(NotExpr).getParent().(NotExpr).getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getArgument(1) instanceof Literal)
}

predicate func_2(Variable vcrng_init, VariableAccess target_2) {
		target_2.getTarget()=vcrng_init
		and target_2.getParent().(GTExpr).getParent().(NotExpr).getParent().(NotExpr).getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("__builtin_expect")
		and target_2.getParent().(GTExpr).getParent().(NotExpr).getParent().(NotExpr).getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getArgument(1) instanceof Literal
}

predicate func_4(Variable vcrng_init, BlockStmt target_6, NotExpr target_4) {
		target_4.getOperand().(FunctionCall).getTarget().hasName("__builtin_expect")
		and target_4.getOperand().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vcrng_init
		and target_4.getOperand().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getLesserOperand() instanceof Literal
		and target_4.getOperand().(FunctionCall).getArgument(1) instanceof Literal
		and target_4.getParent().(IfStmt).getThen()=target_6
}

/*predicate func_5(Variable vcrng_init, RelationalOperation target_5) {
		 (target_5 instanceof GTExpr or target_5 instanceof LTExpr)
		and target_5.getGreaterOperand().(VariableAccess).getTarget()=vcrng_init
		and target_5.getLesserOperand() instanceof Literal
		and target_5.getParent().(NotExpr).getParent().(NotExpr).getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("__builtin_expect")
		and target_5.getParent().(NotExpr).getParent().(NotExpr).getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getArgument(1) instanceof Literal
}

*/
predicate func_6(Function func, BlockStmt target_6) {
		target_6.getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getTarget().getName()="count"
		and target_6.getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("fast_pool *")
		and target_6.getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(RelationalOperation).getLesserOperand().(Literal).getValue()="64"
		and target_6.getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getTarget().hasName("crng_fast_load")
		and target_6.getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="pool"
		and target_6.getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("fast_pool *")
		and target_6.getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getArgument(1).(SizeofExprOperator).getValue()="16"
		and target_6.getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="count"
		and target_6.getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("fast_pool *")
		and target_6.getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and target_6.getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="last"
		and target_6.getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("fast_pool *")
		and target_6.getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("unsigned long")
		and target_6.getEnclosingFunction() = func
}

from Function func, Variable vcrng_init, Literal target_0, VariableAccess target_2, NotExpr target_4, BlockStmt target_6
where
func_0(func, target_0)
and not func_1(vcrng_init)
and func_2(vcrng_init, target_2)
and func_4(vcrng_init, target_6, target_4)
and func_6(func, target_6)
and vcrng_init.getType().hasName("int")
and not vcrng_init.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
