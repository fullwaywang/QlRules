/**
 * @name linux-49b22e06a947727a6d1c802d2d9ad92420b90fc5-z_erofs_get_gbuf
 * @id cpp/linux/49b22e06a947727a6d1c802d2d9ad92420b90fc5/z-erofs-get-gbuf
 * @description linux-49b22e06a947727a6d1c802d2d9ad92420b90fc5-fs/erofs/zutil.c-z_erofs_get_gbuf CVE-2024-42300
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_2, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("migrate_disable")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
)
}

predicate func_1(RelationalOperation target_3, Function func) {
exists(ExprStmt target_1 |
	exists(BlockStmt obj_0 | obj_0=target_1.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(1)=target_1
			and obj_1.getCondition()=target_3
		)
	)
	and target_1.getExpr().(FunctionCall).getTarget().hasName("migrate_enable")
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(Function func, ExprStmt target_2) {
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getRValue() |
			exists(ArrayExpr obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getArrayBase().(VariableAccess).getTarget().getType().hasName("z_erofs_gbuf *")
				and obj_2.getArrayOffset().(FunctionCall).getTarget().hasName("z_erofs_gbuf_id")
			)
		)
		and obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("z_erofs_gbuf *")
	)
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, RelationalOperation target_3) {
	exists(PointerFieldAccess obj_0 | obj_0=target_3.getLesserOperand() |
		obj_0.getTarget().getName()="nrpages"
		and obj_0.getQualifier().(VariableAccess).getTarget().getType().hasName("z_erofs_gbuf *")
	)
	and  (target_3 instanceof GTExpr or target_3 instanceof LTExpr)
	and target_3.getGreaterOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_3.getEnclosingFunction() = func
}

from Function func, ExprStmt target_2, RelationalOperation target_3
where
not func_0(target_2, func)
and not func_1(target_3, func)
and func_2(func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
