/**
 * @name linux-5d2bd7009f306c82afddd1ca4d9763ad8473c216-switch_fpu_prepare
 * @id cpp/linux/5d2bd7009f306c82afddd1ca4d9763ad8473c216/switch-fpu-prepare
 * @description linux-5d2bd7009f306c82afddd1ca4d9763ad8473c216-arch/x86/include/asm/fpu-internal.h-switch_fpu_prepare CVE-2018-3665
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("use_xsave")
	and not target_0.getTarget().hasName("use_eager_fpu")
	and target_0.getEnclosingFunction() = func
}

predicate func_1(ExprStmt target_3, Function func, FunctionCall target_1) {
	target_1.getTarget().hasName("use_xsave")
	and not target_1.getTarget().hasName("use_eager_fpu")
	and target_1.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_3
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, FunctionCall target_2) {
	target_2.getTarget().hasName("use_xsave")
	and not target_2.getTarget().hasName("use_eager_fpu")
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("write_cr0")
	and target_3.getExpr().(FunctionCall).getArgument(0).(BitwiseOrExpr).getLeftOperand().(FunctionCall).getTarget().hasName("read_cr0")
	and target_3.getExpr().(FunctionCall).getArgument(0).(BitwiseOrExpr).getRightOperand().(Literal).getValue()="8"
	and target_3.getEnclosingFunction() = func
}

from Function func, FunctionCall target_0, FunctionCall target_1, FunctionCall target_2, ExprStmt target_3
where
func_0(func, target_0)
and func_1(target_3, func, target_1)
and func_2(func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
