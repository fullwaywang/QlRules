/**
 * @name linux-8572cea1461a006bce1d06c0c4b0575869125fa4-nfp_flower_spawn_phy_reprs
 * @id cpp/linux/8572cea1461a006bce1d06c0c4b0575869125fa4/nfp-flower-spawn-phy-reprs
 * @description linux-8572cea1461a006bce1d06c0c4b0575869125fa4-drivers/net/ethernet/netronome/nfp/flower/main.c-nfp_flower_spawn_phy_reprs CVE-2019-19080
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vrepr_505, NotExpr target_4, NotExpr target_5, ExprStmt target_6) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("nfp_repr_free")
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_505
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
		and target_5.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vrepr_priv_486, FunctionCall target_7, ExprStmt target_8) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(FunctionCall).getTarget().hasName("kfree")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_priv_486
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
		and target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable vrepr_priv_486, VariableAccess target_9) {
	exists(ExprStmt target_2 |
		target_2.getExpr().(FunctionCall).getTarget().hasName("kfree")
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_priv_486
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_2
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9)
}

predicate func_3(Variable vrepr_priv_486, VariableAccess target_10) {
	exists(ExprStmt target_3 |
		target_3.getExpr().(FunctionCall).getTarget().hasName("kfree")
		and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_priv_486
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_3
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10)
}

predicate func_4(Variable vrepr_priv_486, NotExpr target_4) {
		target_4.getOperand().(VariableAccess).getTarget()=vrepr_priv_486
}

predicate func_5(Variable vrepr_505, NotExpr target_5) {
		target_5.getOperand().(VariableAccess).getTarget()=vrepr_505
}

predicate func_6(Variable vrepr_505, ExprStmt target_6) {
		target_6.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("nfp_repr *")
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("netdev_priv")
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_505
}

predicate func_7(Function func, FunctionCall target_7) {
		target_7.getTarget().hasName("IS_ERR")
		and target_7.getArgument(0).(VariableAccess).getTarget().getType().hasName("nfp_port *")
		and target_7.getEnclosingFunction() = func
}

predicate func_8(Variable vrepr_priv_486, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="nfp_repr"
		and target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vrepr_priv_486
		and target_8.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("nfp_repr *")
}

predicate func_9(Variable verr_490, BlockStmt target_11, VariableAccess target_9) {
		target_9.getTarget()=verr_490
		and target_9.getParent().(IfStmt).getThen()=target_11
}

predicate func_10(Variable verr_490, BlockStmt target_12, VariableAccess target_10) {
		target_10.getTarget()=verr_490
		and target_10.getParent().(IfStmt).getThen()=target_12
}

predicate func_11(Variable vrepr_505, BlockStmt target_11) {
		target_11.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("nfp_port_free")
		and target_11.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("nfp_port *")
		and target_11.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("nfp_repr_free")
		and target_11.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_505
}

predicate func_12(Variable vrepr_505, BlockStmt target_12) {
		target_12.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("nfp_port_free")
		and target_12.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("nfp_port *")
		and target_12.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("nfp_repr_free")
		and target_12.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_505
}

from Function func, Variable vrepr_priv_486, Variable verr_490, Variable vrepr_505, NotExpr target_4, NotExpr target_5, ExprStmt target_6, FunctionCall target_7, ExprStmt target_8, VariableAccess target_9, VariableAccess target_10, BlockStmt target_11, BlockStmt target_12
where
not func_0(vrepr_505, target_4, target_5, target_6)
and not func_1(vrepr_priv_486, target_7, target_8)
and not func_2(vrepr_priv_486, target_9)
and not func_3(vrepr_priv_486, target_10)
and func_4(vrepr_priv_486, target_4)
and func_5(vrepr_505, target_5)
and func_6(vrepr_505, target_6)
and func_7(func, target_7)
and func_8(vrepr_priv_486, target_8)
and func_9(verr_490, target_11, target_9)
and func_10(verr_490, target_12, target_10)
and func_11(vrepr_505, target_11)
and func_12(vrepr_505, target_12)
and vrepr_priv_486.getType().hasName("nfp_flower_repr_priv *")
and verr_490.getType().hasName("int")
and vrepr_505.getType().hasName("net_device *")
and vrepr_priv_486.(LocalVariable).getFunction() = func
and verr_490.(LocalVariable).getFunction() = func
and vrepr_505.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
