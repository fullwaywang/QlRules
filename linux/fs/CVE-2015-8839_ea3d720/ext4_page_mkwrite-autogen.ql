/**
 * @name linux-ea3d7209ca01da209cda6f0dea8be9cc4b7a933b-ext4_page_mkwrite
 * @id cpp/linux/ea3d7209ca01da209cda6f0dea8be9cc4b7a933b/ext4-page-mkwrite
 * @description linux-ea3d7209ca01da209cda6f0dea8be9cc4b7a933b-fs/ext4/inode.c-ext4_page_mkwrite CVE-2015-8839
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(IfStmt target_2, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("down_read")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="i_mmap_sem"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation()))
}

predicate func_1(ExprStmt target_3, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("up_read")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="i_mmap_sem"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_3.getLocation()))
}

predicate func_2(Function func, IfStmt target_2) {
	target_2.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="s_mount_opt"
	and target_2.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("EXT4_SB")
	and target_2.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="i_sb"
	and target_2.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="134217728"
	and target_2.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("ext4_should_journal_data")
	and target_2.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("inode *")
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("ext4_nonda_switch")
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="i_sb"
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("inode *")
	and target_2.getThen().(BlockStmt).getStmt(0).(DoStmt).getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getThen().(BlockStmt).getStmt(0).(DoStmt).getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getRightOperand().(UnaryMinusExpr).getValue()="-28"
	and target_2.getThen().(BlockStmt).getStmt(0).(DoStmt).getCondition().(LogicalAndExpr).getRightOperand().(FunctionCall).getTarget().hasName("ext4_should_retry_alloc")
	and target_2.getThen().(BlockStmt).getStmt(0).(DoStmt).getCondition().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="i_sb"
	and target_2.getThen().(BlockStmt).getStmt(0).(DoStmt).getCondition().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("inode *")
	and target_2.getThen().(BlockStmt).getStmt(0).(DoStmt).getCondition().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getThen().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getThen().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("block_page_mkwrite")
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("sb_end_pagefault")
	and target_3.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="i_sb"
	and target_3.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("inode *")
	and target_3.getEnclosingFunction() = func
}

from Function func, IfStmt target_2, ExprStmt target_3
where
not func_0(target_2, func)
and not func_1(target_3, func)
and func_2(func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
