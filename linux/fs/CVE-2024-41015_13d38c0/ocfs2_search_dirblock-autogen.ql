/**
 * @name linux-13d38c00df97289e6fba2e54193959293fd910d2-ocfs2_search_dirblock
 * @id cpp/linux/13d38c00df97289e6fba2e54193959293fd910d2/ocfs2-search-dirblock
 * @description linux-13d38c00df97289e6fba2e54193959293fd910d2-fs/ocfs2/dir.c-ocfs2_search_dirblock CVE-2024-41015
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vde_buf_368, ExprStmt target_6, ExprStmt target_7, VariableAccess target_0) {
	target_0.getTarget()=vde_buf_368
	and target_6.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation().isBefore(target_0.getLocation())
	and target_0.getLocation().isBefore(target_7.getExpr().(AssignPointerAddExpr).getLValue().(VariableAccess).getLocation())
}

predicate func_1(Variable vdlimit_368, Variable vde_buf_368) {
exists(PointerArithmeticOperation target_1 |
	exists(LTExpr obj_0 | obj_0=target_1.getParent() |
		obj_0.getLesserOperand().(VariableAccess).getTarget()=vde_buf_368
		and obj_0.getGreaterOperand().(VariableAccess).getTarget()=vdlimit_368
	)
	and target_1.getLeftOperand().(VariableAccess).getTarget()=vdlimit_368
	and target_1.getRightOperand().(BuiltInOperationBuiltInOffsetOf).getValue()="12"
)
}

predicate func_2(Variable vde_367, ExprStmt target_6, LogicalAndExpr target_8) {
exists(PointerFieldAccess target_2 |
	target_2.getTarget().getName()="name"
	and target_2.getQualifier().(VariableAccess).getTarget()=vde_367
	and target_6.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_2.getQualifier().(VariableAccess).getLocation())
	and target_2.getQualifier().(VariableAccess).getLocation().isBefore(target_8.getRightOperand().(FunctionCall).getArgument(2).(VariableAccess).getLocation())
)
}

predicate func_4(Variable vdlimit_368, Variable vde_buf_368, VariableAccess target_4) {
	target_4.getTarget()=vdlimit_368
	and target_4.getParent().(LTExpr).getLesserOperand().(VariableAccess).getTarget()=vde_buf_368
}

predicate func_5(Variable vdlimit_368, VariableAccess target_5) {
	target_5.getTarget()=vdlimit_368
}

predicate func_6(Variable vde_367, Variable vde_buf_368, ExprStmt target_6) {
	exists(AssignExpr obj_0 | obj_0=target_6.getExpr() |
		obj_0.getLValue().(VariableAccess).getTarget()=vde_367
		and obj_0.getRValue().(VariableAccess).getTarget()=vde_buf_368
	)
}

predicate func_7(Variable vde_buf_368, ExprStmt target_7) {
	exists(AssignPointerAddExpr obj_0 | obj_0=target_7.getExpr() |
		obj_0.getLValue().(VariableAccess).getTarget()=vde_buf_368
		and obj_0.getRValue().(VariableAccess).getTarget().getType().hasName("int")
	)
}

predicate func_8(Variable vde_367, Variable vdlimit_368, Variable vde_buf_368, LogicalAndExpr target_8) {
	exists(RelationalOperation obj_0 | obj_0=target_8.getLeftOperand() |
		exists(PointerArithmeticOperation obj_1 | obj_1=obj_0.getLesserOperand() |
			obj_1.getLeftOperand().(VariableAccess).getTarget()=vde_buf_368
			and obj_1.getRightOperand().(VariableAccess).getTarget().getType().hasName("int")
		)
		and obj_0.getGreaterOperand().(VariableAccess).getTarget()=vdlimit_368
	)
	and exists(FunctionCall obj_2 | obj_2=target_8.getRightOperand() |
		obj_2.getTarget().hasName("ocfs2_match")
		and obj_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("int")
		and obj_2.getArgument(1).(VariableAccess).getTarget().getType().hasName("const char *")
		and obj_2.getArgument(2).(VariableAccess).getTarget()=vde_367
	)
}

from Function func, Variable vde_367, Variable vdlimit_368, Variable vde_buf_368, VariableAccess target_0, VariableAccess target_4, VariableAccess target_5, ExprStmt target_6, ExprStmt target_7, LogicalAndExpr target_8
where
func_0(vde_buf_368, target_6, target_7, target_0)
and not func_1(vdlimit_368, vde_buf_368)
and not func_2(vde_367, target_6, target_8)
and func_4(vdlimit_368, vde_buf_368, target_4)
and func_5(vdlimit_368, target_5)
and func_6(vde_367, vde_buf_368, target_6)
and func_7(vde_buf_368, target_7)
and func_8(vde_367, vdlimit_368, vde_buf_368, target_8)
and vde_367.getType().hasName("ocfs2_dir_entry *")
and vdlimit_368.getType().hasName("char *")
and vde_buf_368.getType().hasName("char *")
and vde_367.(LocalVariable).getFunction() = func
and vdlimit_368.(LocalVariable).getFunction() = func
and vde_buf_368.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
