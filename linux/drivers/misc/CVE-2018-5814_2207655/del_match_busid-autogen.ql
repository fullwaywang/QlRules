/**
 * @name linux-22076557b07c12086eeb16b8ce2b0b735f7a27e7-del_match_busid
 * @id cpp/linux/22076557b07c12086eeb16b8ce2b0b735f7a27e7/del-match-busid
 * @description linux-22076557b07c12086eeb16b8ce2b0b735f7a27e7-drivers/usb/usbip/stub_main.c-del_match_busid CVE-2018-5814
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vidx_100, IfStmt target_2, RelationalOperation target_3, EqualityOperation target_4, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("spin_lock")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="busid_lock"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getType().hasName("bus_id_priv[16]")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vidx_100
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
	and target_3.getLesserOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation().isBefore(target_4.getLeftOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation()))
}

predicate func_1(Variable vidx_100, ExprStmt target_5, ExprStmt target_6, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="busid_lock"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getType().hasName("bus_id_priv[16]")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vidx_100
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_5.getLocation())
	and target_6.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation()))
}

predicate func_2(Variable vidx_100, IfStmt target_2) {
	target_2.getCondition().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getTarget().getName()="status"
	and target_2.getCondition().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_2.getCondition().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vidx_100
	and target_2.getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_2.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__memset")
	and target_2.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="name"
	and target_2.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_2.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vidx_100
	and target_2.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_2.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(Literal).getValue()="32"
}

predicate func_3(Variable vidx_100, RelationalOperation target_3) {
	 (target_3 instanceof GTExpr or target_3 instanceof LTExpr)
	and target_3.getLesserOperand().(VariableAccess).getTarget()=vidx_100
	and target_3.getGreaterOperand().(Literal).getValue()="0"
}

predicate func_4(Variable vidx_100, EqualityOperation target_4) {
	target_4.getLeftOperand().(ValueFieldAccess).getTarget().getName()="status"
	and target_4.getLeftOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_4.getLeftOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vidx_100
	and target_4.getRightOperand().(Literal).getValue()="0"
}

predicate func_5(Function func, ExprStmt target_5) {
	target_5.getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
	and target_5.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("spinlock_t")
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable vidx_100, ExprStmt target_6) {
	target_6.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="status"
	and target_6.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_6.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vidx_100
	and target_6.getExpr().(AssignExpr).getRValue().(Literal).getValue()="1"
}

from Function func, Variable vidx_100, IfStmt target_2, RelationalOperation target_3, EqualityOperation target_4, ExprStmt target_5, ExprStmt target_6
where
not func_0(vidx_100, target_2, target_3, target_4, func)
and not func_1(vidx_100, target_5, target_6, func)
and func_2(vidx_100, target_2)
and func_3(vidx_100, target_3)
and func_4(vidx_100, target_4)
and func_5(func, target_5)
and func_6(vidx_100, target_6)
and vidx_100.getType().hasName("int")
and vidx_100.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
