/**
 * @name linux-030b533c4fd4d2ec3402363323de4bb2983c9cee-notify_change
 * @id cpp/linux/030b533c4fd4d2ec3402363323de4bb2983c9cee/notify-change
 * @description linux-030b533c4fd4d2ec3402363323de4bb2983c9cee-fs/attr.c-notify_change CVE-2015-1350
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
	target_0.getValue()="1"
	and not target_0.getValue()="0"
	and target_0.getParent().(LShiftExpr).getParent().(ComplementExpr).getOperand() instanceof BinaryBitwiseOperation
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable verror_197, ExprStmt target_13) {
exists(RelationalOperation target_1 |
	 (target_1 instanceof GTExpr or target_1 instanceof LTExpr)
	and target_1.getLesserOperand().(VariableAccess).getTarget()=verror_197
	and target_1.getGreaterOperand() instanceof Literal
	and target_1.getParent().(IfStmt).getThen()=target_13)
}

predicate func_2(Variable verror_197, ReturnStmt target_14) {
exists(EqualityOperation target_2 |
	target_2.getLeftOperand().(VariableAccess).getTarget()=verror_197
	and target_2.getRightOperand().(Literal).getValue()="0"
	and target_2.getParent().(IfStmt).getThen()=target_14)
}

predicate func_3(Variable via_valid_199, LogicalAndExpr target_15) {
exists(AssignExpr target_3 |
	target_3.getLValue().(VariableAccess).getTarget()=via_valid_199
	and target_3.getRValue() instanceof AssignAndExpr
	and target_3.getLValue().(VariableAccess).getLocation().isBefore(target_15.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getLocation()))
}

predicate func_4(Parameter vattr_193, AssignAndExpr target_4) {
	target_4.getLValue().(PointerFieldAccess).getTarget().getName()="ia_valid"
	and target_4.getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vattr_193
	and target_4.getRValue().(ComplementExpr).getValue()="4294950911"
}

predicate func_5(Variable via_valid_199, VariableAccess target_5) {
	target_5.getTarget()=via_valid_199
}

predicate func_6(Variable verror_197, ExprStmt target_13, VariableAccess target_6) {
	target_6.getTarget()=verror_197
	and target_6.getParent().(GTExpr).getLesserOperand().(Literal).getValue()="0"
	and target_6.getParent().(GTExpr).getParent().(IfStmt).getThen()=target_13
}

predicate func_8(Variable verror_197, ReturnStmt target_14, VariableAccess target_8) {
	target_8.getTarget()=verror_197
	and target_8.getParent().(IfStmt).getThen()=target_14
}

predicate func_9(BitwiseAndExpr target_16, Function func, ExprStmt target_9) {
	target_9.getExpr() instanceof AssignAndExpr
	and target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_16
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Variable via_valid_199, BitwiseAndExpr target_16, ExprStmt target_10) {
	target_10.getExpr().(AssignAndExpr).getLValue().(VariableAccess).getTarget()=via_valid_199
	and target_10.getExpr().(AssignAndExpr).getRValue().(ComplementExpr).getValue()="4294950911"
	and target_10.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_16
}

predicate func_11(Variable verror_197, ExprStmt target_13, RelationalOperation target_11) {
	 (target_11 instanceof GTExpr or target_11 instanceof LTExpr)
	and target_11.getGreaterOperand().(VariableAccess).getTarget()=verror_197
	and target_11.getLesserOperand() instanceof Literal
	and target_11.getParent().(IfStmt).getThen()=target_13
}

predicate func_12(Parameter vdentry_193, Variable verror_197, AssignExpr target_12) {
	target_12.getLValue().(VariableAccess).getTarget()=verror_197
	and target_12.getRValue().(FunctionCall).getTarget().hasName("security_inode_killpriv")
	and target_12.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdentry_193
}

predicate func_13(Function func, ExprStmt target_13) {
	target_13.getExpr() instanceof AssignExpr
	and target_13.getEnclosingFunction() = func
}

predicate func_14(Variable verror_197, VariableAccess target_8, ReturnStmt target_14) {
	target_14.getExpr().(VariableAccess).getTarget()=verror_197
	and target_14.getParent().(IfStmt).getCondition()=target_8
}

predicate func_15(Variable via_valid_199, LogicalAndExpr target_15) {
	target_15.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=via_valid_199
	and target_15.getLeftOperand().(BitwiseAndExpr).getRightOperand().(BitwiseOrExpr).getValue()="6144"
	and target_15.getRightOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=via_valid_199
	and target_15.getRightOperand().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="1"
}

predicate func_16(Variable via_valid_199, BitwiseAndExpr target_16) {
	target_16.getLeftOperand().(VariableAccess).getTarget()=via_valid_199
	and target_16.getRightOperand().(BinaryBitwiseOperation).getValue()="16384"
}

from Function func, Parameter vdentry_193, Parameter vattr_193, Variable verror_197, Variable via_valid_199, Literal target_0, AssignAndExpr target_4, VariableAccess target_5, VariableAccess target_6, VariableAccess target_8, ExprStmt target_9, ExprStmt target_10, RelationalOperation target_11, AssignExpr target_12, ExprStmt target_13, ReturnStmt target_14, LogicalAndExpr target_15, BitwiseAndExpr target_16
where
func_0(func, target_0)
and not func_1(verror_197, target_13)
and not func_2(verror_197, target_14)
and not func_3(via_valid_199, target_15)
and func_4(vattr_193, target_4)
and func_5(via_valid_199, target_5)
and func_6(verror_197, target_13, target_6)
and func_8(verror_197, target_14, target_8)
and func_9(target_16, func, target_9)
and func_10(via_valid_199, target_16, target_10)
and func_11(verror_197, target_13, target_11)
and func_12(vdentry_193, verror_197, target_12)
and func_13(func, target_13)
and func_14(verror_197, target_8, target_14)
and func_15(via_valid_199, target_15)
and func_16(via_valid_199, target_16)
and vdentry_193.getType().hasName("dentry *")
and vattr_193.getType().hasName("iattr *")
and verror_197.getType().hasName("int")
and via_valid_199.getType().hasName("unsigned int")
and vdentry_193.getFunction() = func
and vattr_193.getFunction() = func
and verror_197.(LocalVariable).getFunction() = func
and via_valid_199.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
