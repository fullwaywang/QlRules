/**
 * @name linux-3812c8c8f3953921ef18544110dafc3505c1ac62-mem_cgroup_do_charge
 * @id cpp/linux/3812c8c8f3953921ef18544110dafc3505c1ac62/mem-cgroup-do-charge
 * @description linux-3812c8c8f3953921ef18544110dafc3505c1ac62-mm/memcontrol.c-mem_cgroup_do_charge CVE-2014-8171
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter voom_check_2408, VariableAccess target_0) {
	target_0.getTarget()=voom_check_2408
	and voom_check_2408.getIndex() = 4
}

predicate func_1(Parameter vgfp_mask_2406, Variable vmem_over_limit_2411, LogicalOrExpr target_6) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("mem_cgroup_oom")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmem_over_limit_2411
	and target_1.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vgfp_mask_2406
	and target_1.getExpr().(FunctionCall).getArgument(2) instanceof ConditionalExpr
	and target_1.getParent().(IfStmt).getCondition()=target_6)
}

predicate func_2(Variable vcsize_2410, ConditionalExpr target_2) {
	target_2.getCondition().(FunctionCall).getTarget().hasName("__builtin_constant_p")
	and target_2.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vcsize_2410
	and target_2.getThen().(ConditionalExpr).getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vcsize_2410
	and target_2.getThen().(ConditionalExpr).getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_2.getThen().(ConditionalExpr).getThen().(SubExpr).getValue()="52"
	and target_2.getThen().(ConditionalExpr).getElse().(ConditionalExpr).getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vcsize_2410
	and target_2.getThen().(ConditionalExpr).getElse().(ConditionalExpr).getCondition().(RelationalOperation).getGreaterOperand().(BinaryBitwiseOperation).getValue()="4096"
	and target_2.getThen().(ConditionalExpr).getElse().(ConditionalExpr).getThen().(Literal).getValue()="0"
	and target_2.getThen().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(AddExpr).getLeftOperand().(SubExpr).getLeftOperand().(ConditionalExpr).getCondition().(FunctionCall).getTarget().hasName("__builtin_constant_p")
	and target_2.getThen().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(AddExpr).getLeftOperand().(SubExpr).getRightOperand().(Literal).getValue()="12"
	and target_2.getThen().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(AddExpr).getRightOperand().(Literal).getValue()="1"
	and target_2.getElse().(FunctionCall).getTarget().hasName("__get_order")
	and target_2.getElse().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vcsize_2410
	and target_2.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
}

predicate func_3(LogicalOrExpr target_6, Function func, ReturnStmt target_3) {
	target_3.getParent().(IfStmt).getCondition()=target_6
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vmem_over_limit_2411, VariableAccess target_4) {
	target_4.getTarget()=vmem_over_limit_2411
	and target_4.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
}

predicate func_5(Parameter vgfp_mask_2406, VariableAccess target_5) {
	target_5.getTarget()=vgfp_mask_2406
	and target_5.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
}

predicate func_6(Parameter voom_check_2408, ReturnStmt target_3, LogicalOrExpr target_6) {
	target_6.getLeftOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=voom_check_2408
	and target_6.getRightOperand().(NotExpr).getOperand().(ValueFieldAccess).getTarget().getName()="may_oom"
	and target_6.getRightOperand().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="memcg_oom"
	and target_6.getRightOperand().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("get_current")
	and target_6.getParent().(IfStmt).getThen()=target_3
}

predicate func_7(Parameter vgfp_mask_2406, Variable vmem_over_limit_2411, Function func, IfStmt target_7) {
	target_7.getCondition().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("mem_cgroup_handle_oom")
	and target_7.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmem_over_limit_2411
	and target_7.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vgfp_mask_2406
	and target_7.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(2) instanceof ConditionalExpr
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_7
}

predicate func_8(Function func, ReturnStmt target_8) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_8
}

from Function func, Parameter vgfp_mask_2406, Parameter voom_check_2408, Variable vcsize_2410, Variable vmem_over_limit_2411, VariableAccess target_0, ConditionalExpr target_2, ReturnStmt target_3, VariableAccess target_4, VariableAccess target_5, LogicalOrExpr target_6, IfStmt target_7, ReturnStmt target_8
where
func_0(voom_check_2408, target_0)
and not func_1(vgfp_mask_2406, vmem_over_limit_2411, target_6)
and func_2(vcsize_2410, target_2)
and func_3(target_6, func, target_3)
and func_4(vmem_over_limit_2411, target_4)
and func_5(vgfp_mask_2406, target_5)
and func_6(voom_check_2408, target_3, target_6)
and func_7(vgfp_mask_2406, vmem_over_limit_2411, func, target_7)
and func_8(func, target_8)
and vgfp_mask_2406.getType().hasName("gfp_t")
and voom_check_2408.getType().hasName("bool")
and vcsize_2410.getType().hasName("unsigned long")
and vmem_over_limit_2411.getType().hasName("mem_cgroup *")
and vgfp_mask_2406.getFunction() = func
and voom_check_2408.getFunction() = func
and vcsize_2410.(LocalVariable).getFunction() = func
and vmem_over_limit_2411.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
