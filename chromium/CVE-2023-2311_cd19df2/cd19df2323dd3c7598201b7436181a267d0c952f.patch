commit cd19df2323dd3c7598201b7436181a267d0c952f	cd19df2323dd3c7598201b7436181a267d0c952f
Author: Austin Sullivan <asully@chromium.org>
Date:   Tue Jan 31 16:52:42 2023 +0000

    FSA: Elide filenames in permission prompt titles
    
    This prioritizes showing the file extension for files with long names
    that would otherwise overflow the dialog box.
    
    Screenshots (Googler-only, sorry): go/fsa-filename-elision
    
    Bug: 1354505
    Change-Id: I1c6c72c6b19c36c712080c8bdbc0a541a5ecf89c
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3955966
    Reviewed-by: Daseul Lee <dslee@chromium.org>
    Commit-Queue: Austin Sullivan <asully@chromium.org>
    Reviewed-by: Allen Bauer <kylixrd@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1099285}

diff --git a/chrome/browser/ui/views/file_system_access/file_system_access_dangerous_file_dialog.cc b/chrome/browser/ui/views/file_system_access/file_system_access_dangerous_file_dialog.cc
index 6ecf5130b9497..0df1e22548a73 100644
--- a/chrome/browser/ui/views/file_system_access/file_system_access_dangerous_file_dialog.cc
+++ b/chrome/browser/ui/views/file_system_access/file_system_access_dangerous_file_dialog.cc
@@ -41,7 +41,7 @@ std::unique_ptr<ui::DialogModel> CreateFileSystemAccessDangerousFileDialog(
   dialog_builder
       .SetTitle(l10n_util::GetStringFUTF16(
           IDS_FILE_SYSTEM_ACCESS_DANGEROUS_FILE_TITLE,
-          file_system_access_ui_helper::GetPathForDisplay(path)))
+          file_system_access_ui_helper::GetElidedPathForDisplayAsTitle(path)))
       .AddParagraph(ui::DialogModelLabel::CreateWithReplacement(
           IDS_FILE_SYSTEM_ACCESS_DANGEROUS_FILE_TEXT,
           ui::DialogModelLabel::CreateEmphasizedText(origin_or_short_name)))
diff --git a/chrome/browser/ui/views/file_system_access/file_system_access_permission_dialog.cc b/chrome/browser/ui/views/file_system_access/file_system_access_permission_dialog.cc
index a6da7f61d6c69..8b136aee0303c 100644
--- a/chrome/browser/ui/views/file_system_access/file_system_access_permission_dialog.cc
+++ b/chrome/browser/ui/views/file_system_access/file_system_access_permission_dialog.cc
@@ -81,12 +81,14 @@ std::u16string GetWindowTitle(const RequestData& request) {
       } else {
         return l10n_util::GetStringFUTF16(
             IDS_FILE_SYSTEM_ACCESS_READ_FILE_PERMISSION_TITLE,
-            file_system_access_ui_helper::GetPathForDisplay(request.path));
+            file_system_access_ui_helper::GetElidedPathForDisplayAsTitle(
+                request.path));
       }
     case AccessType::kWrite:
       return l10n_util::GetStringFUTF16(
           IDS_FILE_SYSTEM_ACCESS_WRITE_PERMISSION_TITLE,
-          file_system_access_ui_helper::GetPathForDisplay(request.path));
+          file_system_access_ui_helper::GetElidedPathForDisplayAsTitle(
+              request.path));
     case AccessType::kReadWrite:
       if (request.handle_type == HandleType::kDirectory) {
         return l10n_util::GetStringUTF16(
@@ -94,7 +96,8 @@ std::u16string GetWindowTitle(const RequestData& request) {
       } else {
         return l10n_util::GetStringFUTF16(
             IDS_FILE_SYSTEM_ACCESS_EDIT_FILE_PERMISSION_TITLE,
-            file_system_access_ui_helper::GetPathForDisplay(request.path));
+            file_system_access_ui_helper::GetElidedPathForDisplayAsTitle(
+                request.path));
       }
   }
   NOTREACHED();
@@ -123,7 +126,8 @@ std::unique_ptr<ui::DialogModel> CreateFileSystemAccessPermissionDialog(
           GetMessageText(request),
           {ui::DialogModelLabel::CreateEmphasizedText(origin_or_short_name),
            ui::DialogModelLabel::CreateEmphasizedText(
-               file_system_access_ui_helper::GetPathForDisplay(request.path))}))
+               file_system_access_ui_helper::GetPathForDisplayAsParagraph(
+                   request.path))}))
       .AddOkButton(std::move(accept_callback),
                    ui::DialogModelButton::Params().SetLabel(
                        l10n_util::GetStringUTF16(GetButtonLabel(request))))
diff --git a/chrome/browser/ui/views/file_system_access/file_system_access_ui_helpers.cc b/chrome/browser/ui/views/file_system_access/file_system_access_ui_helpers.cc
index bf53fdaf56f9b..9432a12f116f7 100644
--- a/chrome/browser/ui/views/file_system_access/file_system_access_ui_helpers.cc
+++ b/chrome/browser/ui/views/file_system_access/file_system_access_ui_helpers.cc
@@ -11,9 +11,26 @@
 #include "chrome/browser/ui/web_applications/app_browser_controller.h"
 #include "components/url_formatter/elide_url.h"
 #include "ui/base/l10n/l10n_util.h"
+#include "ui/gfx/font_list.h"
+#include "ui/gfx/text_elider.h"
 #include "ui/views/controls/styled_label.h"
+#include "ui/views/layout/layout_provider.h"
 #include "ui/views/style/typography.h"
 
+namespace {
+
+base::FilePath GetPathForDisplayAsPath(const base::FilePath& path) {
+  // Display the drive letter if the path is the root of the filesystem.
+  auto dir_name = path.DirName();
+  if (!path.empty() && (dir_name.empty() || path == dir_name)) {
+    return path;
+  }
+
+  return path.BaseName();
+}
+
+}  // namespace
+
 namespace file_system_access_ui_helper {
 
 std::unique_ptr<views::View> CreateOriginLabel(Browser* browser,
@@ -48,7 +65,7 @@ std::unique_ptr<views::View> CreateOriginPathLabel(Browser* browser,
                                                    const base::FilePath& path,
                                                    int text_context,
                                                    bool show_emphasis) {
-  std::u16string formatted_path = GetPathForDisplay(path);
+  std::u16string formatted_path = GetPathForDisplayAsParagraph(path);
   std::u16string origin_or_short_name =
       GetFormattedOriginOrAppShortName(browser, origin);
   std::vector<size_t> offsets;
@@ -74,8 +91,9 @@ std::unique_ptr<views::View> CreateOriginPathLabel(Browser* browser,
   }
 
   views::StyledLabel::RangeStyleInfo path_style;
-  if (show_emphasis)
+  if (show_emphasis) {
     path_style.text_style = views::style::STYLE_EMPHASIZED;
+  }
   path_style.tooltip = path.LossyDisplayName();
   label->AddStyleRange(
       gfx::Range(offsets.back(), offsets.back() + formatted_path.length()),
@@ -84,13 +102,35 @@ std::unique_ptr<views::View> CreateOriginPathLabel(Browser* browser,
   return label;
 }
 
-std::u16string GetPathForDisplay(const base::FilePath& path) {
-  // Display the drive letter if the path is the root of the filesystem.
-  auto dir_name = path.DirName();
-  if (!path.empty() && (dir_name.empty() || path == dir_name))
-    return path.LossyDisplayName();
+std::u16string GetElidedPathForDisplayAsTitle(const base::FilePath& path) {
+  // TODO(crbug.com/1411723): Consider moving filename elision logic into a core
+  // component, which would allow for dynamic elision based on the _actual_
+  // available pixel width and font of the dialog.
+  //
+  // Ensure file names containing spaces won't overflow to the next line in the
+  // title of a permission prompt, which is very hard to read. File names not
+  // containing a space will bump to the next line if the file name + preceding
+  // text in the title is too long, which is still easy to read because the file
+  // name is contiguous.
+  int scalar_quarters = base::Contains(GetPathForDisplayAsPath(path).value(),
+                                       FILE_PATH_LITERAL(" "))
+                            ? 2
+                            : 3;
+  // views::LayoutProvider::Get() may be null in tests.
+  int available_pixel_width =
+      (views::LayoutProvider::Get()
+           ? views::LayoutProvider::Get()->GetDistanceMetric(
+                 views::DISTANCE_MODAL_DIALOG_PREFERRED_WIDTH)
+           : 400) *
+      scalar_quarters / 4;
+  return gfx::ElideFilename(GetPathForDisplayAsPath(path), gfx::FontList(),
+                            available_pixel_width);
+}
 
-  return path.BaseName().LossyDisplayName();
+std::u16string GetPathForDisplayAsParagraph(const base::FilePath& path) {
+  // Paragraph text will wrap to the next line rather than overflow, so there's
+  // no need to elide the file name.
+  return GetPathForDisplayAsPath(path).LossyDisplayName();
 }
 
 std::u16string GetFormattedOriginOrAppShortName(Browser* browser,
diff --git a/chrome/browser/ui/views/file_system_access/file_system_access_ui_helpers.h b/chrome/browser/ui/views/file_system_access/file_system_access_ui_helpers.h
index 9fefa727a4d54..915c590bcd237 100644
--- a/chrome/browser/ui/views/file_system_access/file_system_access_ui_helpers.h
+++ b/chrome/browser/ui/views/file_system_access/file_system_access_ui_helpers.h
@@ -24,8 +24,8 @@ class View;
 
 namespace file_system_access_ui_helper {
 
-// Creates and returns a label where the place holder is replaced with |origin|.
-// If |show_emphasis| is true, the origin is formatted as emphasized text.
+// Creates and returns a label where the place holder is replaced with `origin`.
+// If `show_emphasis` is true, the origin is formatted as emphasized text.
 std::unique_ptr<views::View> CreateOriginLabel(Browser* browser,
                                                int message_id,
                                                const url::Origin& origin,
@@ -33,7 +33,7 @@ std::unique_ptr<views::View> CreateOriginLabel(Browser* browser,
                                                bool show_emphasis);
 
 // Creates and returns a label where the place holders are replaced with
-// |origin| and |path|. If |show_emphasis| is true, the origin and path are
+// `origin` and `path`. If `show_emphasis` is true, the origin and path are
 // formatted as emphasized text.
 std::unique_ptr<views::View> CreateOriginPathLabel(Browser* browser,
                                                    int message_id,
@@ -42,9 +42,17 @@ std::unique_ptr<views::View> CreateOriginPathLabel(Browser* browser,
                                                    int text_context,
                                                    bool show_emphasis);
 
-// Returns a human-readable string for use in UI surfaces.
-// Shows the drive letter of a path if it is the root of a file system.
-std::u16string GetPathForDisplay(const base::FilePath& path);
+// Returns a human-readable string for use in titles of dialogs. Shows the drive
+// letter of a path if it is the root of a file system. Elides `path` to fit
+// within a standard dialog, prioritizing the file extension. See
+// https://crbug.com/1354505 for context.
+std::u16string GetElidedPathForDisplayAsTitle(const base::FilePath& path);
+// Same as above, but does not elide `path`. This should only be used when it is
+// safe to show a path which may overflow its container and have the path cut
+// off (i.e. the site has already granted access to the file) or where extra
+// characters would spill to the next line rather than be cut off (such as a
+// dialog paragraph). See https://crbug.com/1354505 for context.
+std::u16string GetPathForDisplayAsParagraph(const base::FilePath& path);
 
 // Returns app's short name for Isolated Web Apps or the formatted origin for
 // all others.
diff --git a/chrome/browser/ui/views/file_system_access/file_system_access_ui_helpers_unittest.cc b/chrome/browser/ui/views/file_system_access/file_system_access_ui_helpers_unittest.cc
index fdfa0a4faca6f..4a620e6cd3b83 100644
--- a/chrome/browser/ui/views/file_system_access/file_system_access_ui_helpers_unittest.cc
+++ b/chrome/browser/ui/views/file_system_access/file_system_access_ui_helpers_unittest.cc
@@ -6,7 +6,6 @@
 
 #include <string>
 
-#include "base/cxx17_backports.h"
 #include "base/files/file_path.h"
 #include "base/strings/utf_string_conversions.h"
 #include "build/build_config.h"
@@ -21,12 +20,7 @@ struct UnaryTestData {
   std::u16string expected;
 };
 
-}  // namespace
-
-class FileSystemAccessUIHelpersTest : public testing::Test {};
-
-TEST_F(FileSystemAccessUIHelpersTest, GetPathForDisplay) {
-  const struct UnaryTestData cases[] = {
+static const struct UnaryTestData cases[] = {
     {FILE_PATH_LITERAL(""), u""},
     {FILE_PATH_LITERAL("aa"), u"aa"},
     {FILE_PATH_LITERAL("/aa/bb"), u"bb"},
@@ -100,11 +94,39 @@ TEST_F(FileSystemAccessUIHelpersTest, GetPathForDisplay) {
     {FILE_PATH_LITERAL("c:aa\\bb"), u"bb"},
 #endif  // FILE_PATH_USES_DRIVE_LETTERS
 #endif  // FILE_PATH_USES_WIN_SEPARATORS
-  };
+};
+
+static const struct UnaryTestData elided_cases[] = {
+    {FILE_PATH_LITERAL("spaces are elided.txt                        .exe"),
+     u"spaces are elided.txt\x2026.exe"},
+};
 
+}  // namespace
+
+class FileSystemAccessUIHelpersTest : public testing::Test {};
+
+TEST_F(FileSystemAccessUIHelpersTest, GetPathForDisplayAsParagraph) {
   for (const auto& i : cases) {
     base::FilePath input(i.input);
-    std::u16string observed = GetPathForDisplay(input);
+    std::u16string observed = GetPathForDisplayAsParagraph(input);
+    EXPECT_EQ(i.expected, observed)
+        << "input: " << i.input
+        << ", expected: " << base::UTF16ToUTF8(i.expected);
+  }
+}
+
+TEST_F(FileSystemAccessUIHelpersTest, GetElidedPathForDisplayAsTitle) {
+  for (const auto& i : cases) {
+    base::FilePath input(i.input);
+    std::u16string observed = GetElidedPathForDisplayAsTitle(input);
+    EXPECT_EQ(i.expected, observed)
+        << "input: " << i.input
+        << ", expected: " << base::UTF16ToUTF8(i.expected);
+  }
+
+  for (const auto& i : elided_cases) {
+    base::FilePath input(i.input);
+    std::u16string observed = GetElidedPathForDisplayAsTitle(input);
     EXPECT_EQ(i.expected, observed)
         << "input: " << i.input
         << ", expected: " << base::UTF16ToUTF8(i.expected);
diff --git a/chrome/browser/ui/views/file_system_access/file_system_access_usage_bubble_view.cc b/chrome/browser/ui/views/file_system_access/file_system_access_usage_bubble_view.cc
index e070b4445e714..19a1b6333ae17 100644
--- a/chrome/browser/ui/views/file_system_access/file_system_access_usage_bubble_view.cc
+++ b/chrome/browser/ui/views/file_system_access/file_system_access_usage_bubble_view.cc
@@ -257,9 +257,13 @@ size_t FileSystemAccessUsageBubbleView::FilePathListModel::RowCount() {
 std::u16string FileSystemAccessUsageBubbleView::FilePathListModel::GetText(
     size_t row,
     int column_id) {
-  if (row < files_.size())
-    return file_system_access_ui_helper::GetPathForDisplay(files_[row]);
-  return file_system_access_ui_helper::GetPathForDisplay(
+  // Use the non-eliding version of GetPathForDisplay since these are files the
+  // user has already granted the site access to.
+  if (row < files_.size()) {
+    return file_system_access_ui_helper::GetPathForDisplayAsParagraph(
+        files_[row]);
+  }
+  return file_system_access_ui_helper::GetPathForDisplayAsParagraph(
       directories_[row - files_.size()]);
 }
 
