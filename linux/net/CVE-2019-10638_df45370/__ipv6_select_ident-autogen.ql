/**
 * @name linux-df453700e8d81b1bdafdf684365ee2b9431fb702-__ipv6_select_ident
 * @id cpp/linux/df453700e8d81b1bdafdf684365ee2b9431fb702/--ipv6-select-ident
 * @description linux-df453700e8d81b1bdafdf684365ee2b9431fb702-net/ipv6/output_core.c-__ipv6_select_ident CVE-2019-10638
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vnet_13, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
		and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("siphash_key_is_zero")
		and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="ip_id_key"
		and target_0.getCondition().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("get_random_bytes")
		and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="ip_id_key"
		and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ipv4"
		and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnet_13
		and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(SizeofExprOperator).getValue()="16"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0)
}

/*predicate func_1(Parameter vnet_13) {
	exists(FunctionCall target_1 |
		target_1.getTarget().hasName("get_random_bytes")
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="ip_id_key"
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ipv4"
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnet_13
		and target_1.getArgument(1).(SizeofExprOperator).getValue()="16")
}

*/
predicate func_2(Parameter vnet_13, Variable vhash_17) {
	exists(FunctionCall target_2 |
		target_2.getTarget().hasName("siphash")
		and target_2.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("const struct <unnamed>")
		and target_2.getArgument(1).(SizeofExprOperator).getValue()="32"
		and target_2.getArgument(2).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="ip_id_key"
		and target_2.getArgument(2).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ipv4"
		and target_2.getArgument(2).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnet_13
		and target_2.getParent().(AssignExpr).getRValue() = target_2
		and target_2.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vhash_17)
}

predicate func_3(Parameter vdst_14, VariableAccess target_3) {
		target_3.getTarget()=vdst_14
		and target_3.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_4(Parameter vsrc_15, VariableAccess target_4) {
		target_4.getTarget()=vsrc_15
		and target_4.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_5(Parameter vnet_13, VariableAccess target_5) {
		target_5.getTarget()=vnet_13
		and target_5.getParent().(FunctionCall).getParent().(AssignXorExpr).getRValue() instanceof FunctionCall
}

predicate func_6(Parameter vhashrnd_13, Parameter vdst_14, Variable vhash_17, FunctionCall target_6) {
		target_6.getTarget().hasName("__ipv6_addr_jhash")
		and target_6.getArgument(0).(VariableAccess).getTarget()=vdst_14
		and target_6.getArgument(1).(VariableAccess).getTarget()=vhashrnd_13
		and target_6.getParent().(AssignExpr).getRValue() = target_6
		and target_6.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vhash_17
}

predicate func_7(Parameter vsrc_15, Variable vhash_17, Function func, ExprStmt target_7) {
		target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vhash_17
		and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("__ipv6_addr_jhash")
		and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsrc_15
		and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vhash_17
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_7
}

predicate func_8(Parameter vnet_13, Variable vhash_17, AssignXorExpr target_8) {
		target_8.getLValue().(VariableAccess).getTarget()=vhash_17
		and target_8.getRValue().(FunctionCall).getTarget().hasName("net_hash_mix")
		and target_8.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vnet_13
}

from Function func, Parameter vnet_13, Parameter vhashrnd_13, Parameter vdst_14, Parameter vsrc_15, Variable vhash_17, VariableAccess target_3, VariableAccess target_4, VariableAccess target_5, FunctionCall target_6, ExprStmt target_7, AssignXorExpr target_8
where
not func_0(vnet_13, func)
and not func_2(vnet_13, vhash_17)
and func_3(vdst_14, target_3)
and func_4(vsrc_15, target_4)
and func_5(vnet_13, target_5)
and func_6(vhashrnd_13, vdst_14, vhash_17, target_6)
and func_7(vsrc_15, vhash_17, func, target_7)
and func_8(vnet_13, vhash_17, target_8)
and vnet_13.getType().hasName("net *")
and vhashrnd_13.getType().hasName("u32")
and vdst_14.getType().hasName("const in6_addr *")
and vsrc_15.getType().hasName("const in6_addr *")
and vhash_17.getType().hasName("u32")
and vnet_13.getFunction() = func
and vhashrnd_13.getFunction() = func
and vdst_14.getFunction() = func
and vsrc_15.getFunction() = func
and vhash_17.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
