/**
 * @name linux-32927393dc1ccd60fb2bdc05b9e8e88753761469-flow_limit_cpu_sysctl
 * @id cpp/linux/32927393dc1ccd60fb2bdc05b9e8e88753761469/flow-limit-cpu-sysctl
 * @description linux-32927393dc1ccd60fb2bdc05b9e8e88753761469-net/core/sysctl_net_core.c-flow_limit_cpu_sysctl CVE-2021-4218
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vbuffer_118, Variable vlen_124, Variable vkbuf_159, ExprStmt target_7) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("__memcpy")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vbuffer_118
	and target_0.getArgument(1).(VariableAccess).getTarget()=vkbuf_159
	and target_0.getArgument(2).(VariableAccess).getTarget()=vlen_124
	and target_0.getArgument(2).(VariableAccess).getLocation().isBefore(target_7.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vbuffer_118, Variable vlen_124, Variable vkbuf_159, BlockStmt target_8, VariableAccess target_1) {
	target_1.getTarget()=vbuffer_118
	and target_1.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vkbuf_159
	and target_1.getParent().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vlen_124
	and target_1.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_8
}

/*predicate func_2(Parameter vbuffer_118, Variable vlen_124, Variable vkbuf_159, BlockStmt target_8, VariableAccess target_2) {
	target_2.getTarget()=vkbuf_159
	and target_2.getParent().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbuffer_118
	and target_2.getParent().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vlen_124
	and target_2.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_8
}

*/
/*predicate func_3(Parameter vbuffer_118, Variable vlen_124, Variable vkbuf_159, BlockStmt target_8, VariableAccess target_3) {
	target_3.getTarget()=vlen_124
	and target_3.getParent().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbuffer_118
	and target_3.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vkbuf_159
	and target_3.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_8
}

*/
predicate func_4(Parameter vbuffer_118, Variable vlen_124, Variable vret_124, Variable vkbuf_159, VariableAccess target_9, IfStmt target_4) {
	target_4.getCondition().(FunctionCall).getTarget().hasName("copy_to_user")
	and target_4.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbuffer_118
	and target_4.getCondition().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vkbuf_159
	and target_4.getCondition().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vlen_124
	and target_4.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_124
	and target_4.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-14"
	and target_4.getThen().(BlockStmt).getStmt(1).(GotoStmt).getName() ="done"
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
}

/*predicate func_5(Variable vret_124, AssignExpr target_5) {
	target_5.getLValue().(VariableAccess).getTarget()=vret_124
	and target_5.getRValue().(UnaryMinusExpr).getValue()="-14"
}

*/
/*predicate func_6(FunctionCall target_10, Function func, GotoStmt target_6) {
	target_6.getName() ="done"
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10
	and target_6.getEnclosingFunction() = func
}

*/
predicate func_7(Variable vlen_124, ExprStmt target_7) {
	target_7.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget().getType().hasName("size_t *")
	and target_7.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vlen_124
}

predicate func_8(Function func, BlockStmt target_8) {
	target_8.getStmt(0).(ExprStmt).getExpr() instanceof AssignExpr
	and target_8.getStmt(1) instanceof GotoStmt
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Parameter vwrite_117, VariableAccess target_9) {
	target_9.getTarget()=vwrite_117
}

predicate func_10(Parameter vbuffer_118, Variable vlen_124, Variable vkbuf_159, FunctionCall target_10) {
	target_10.getTarget().hasName("copy_to_user")
	and target_10.getArgument(0).(VariableAccess).getTarget()=vbuffer_118
	and target_10.getArgument(1).(VariableAccess).getTarget()=vkbuf_159
	and target_10.getArgument(2).(VariableAccess).getTarget()=vlen_124
}

from Function func, Parameter vwrite_117, Parameter vbuffer_118, Variable vlen_124, Variable vret_124, Variable vkbuf_159, VariableAccess target_1, IfStmt target_4, ExprStmt target_7, BlockStmt target_8, VariableAccess target_9, FunctionCall target_10
where
not func_0(vbuffer_118, vlen_124, vkbuf_159, target_7)
and func_1(vbuffer_118, vlen_124, vkbuf_159, target_8, target_1)
and func_4(vbuffer_118, vlen_124, vret_124, vkbuf_159, target_9, target_4)
and func_7(vlen_124, target_7)
and func_8(func, target_8)
and func_9(vwrite_117, target_9)
and func_10(vbuffer_118, vlen_124, vkbuf_159, target_10)
and vwrite_117.getType().hasName("int")
and vbuffer_118.getType().hasName("void *")
and vlen_124.getType().hasName("int")
and vret_124.getType().hasName("int")
and vkbuf_159.getType().hasName("char[128]")
and vwrite_117.getFunction() = func
and vbuffer_118.getFunction() = func
and vlen_124.(LocalVariable).getFunction() = func
and vret_124.(LocalVariable).getFunction() = func
and vkbuf_159.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
