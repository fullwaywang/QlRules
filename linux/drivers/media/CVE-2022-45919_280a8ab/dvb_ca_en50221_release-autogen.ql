/**
 * @name linux-280a8ab81733da8bc442253c700a52c4c0886ffd-dvb_ca_en50221_release
 * @id cpp/linux/280a8ab81733da8bc442253c700a52c4c0886ffd/dvb-ca-en50221-release
 * @description linux-280a8ab81733da8bc442253c700a52c4c0886ffd-drivers/media/dvb-core/dvb_ca_en50221.c-dvb_ca_en50221_release CVE-2022-45919
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vca_1933, ExprStmt target_4, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="remove_mutex"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vca_1933
	and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_4.getLocation()))
}

predicate func_1(Variable vca_1933, ExprStmt target_4, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="exit"
	and target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vca_1933
	and target_1.getExpr().(AssignExpr).getRValue().(Literal).getValue()="1"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_4.getLocation()))
}

predicate func_2(Variable vca_1933, ExprStmt target_4, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="remove_mutex"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vca_1933
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_4.getLocation()))
}

predicate func_3(Variable vca_1933, ExprStmt target_4, Function func) {
exists(IfStmt target_3 |
	target_3.getCondition().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getTarget().getName()="users"
	and target_3.getCondition().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="dvbdev"
	and target_3.getCondition().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vca_1933
	and target_3.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="1"
	and target_3.getThen().(BlockStmt).getStmt(0).(DoStmt).getCondition() instanceof Literal
	and target_3.getThen().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(DoStmt).getCondition() instanceof Literal
	and target_3.getThen().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="users"
	and target_3.getThen().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="1"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
	and target_3.getLocation().isBefore(target_4.getLocation()))
}

predicate func_4(Variable vca_1933, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("kthread_stop")
	and target_4.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="thread"
	and target_4.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vca_1933
}

from Function func, Variable vca_1933, ExprStmt target_4
where
not func_0(vca_1933, target_4, func)
and not func_1(vca_1933, target_4, func)
and not func_2(vca_1933, target_4, func)
and not func_3(vca_1933, target_4, func)
and func_4(vca_1933, target_4)
and vca_1933.getType().hasName("dvb_ca_private *")
and vca_1933.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
