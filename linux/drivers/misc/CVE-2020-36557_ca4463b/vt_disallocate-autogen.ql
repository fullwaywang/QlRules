/**
 * @name linux-ca4463bf8438b403596edd0ec961ca0d4fbe0220-vt_disallocate
 * @id cpp/linux/ca4463bf8438b403596edd0ec961ca0d4fbe0220/vt-disallocate
 * @description linux-ca4463bf8438b403596edd0ec961ca0d4fbe0220-drivers/tty/vt/vt_ioctl.c-vt_disallocate CVE-2020-36557
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vvc_303, FunctionCall target_0) {
		target_0.getTarget().hasName("tty_port_destroy")
		and not target_0.getTarget().hasName("tty_port_put")
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="port"
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvc_303
}

predicate func_1(Variable vvc_303, LogicalAndExpr target_2, ExprStmt target_1) {
		target_1.getExpr().(FunctionCall).getTarget().hasName("kfree")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvc_303
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
}

predicate func_2(Variable vvc_303, LogicalAndExpr target_2) {
		target_2.getAnOperand().(VariableAccess).getTarget()=vvc_303
		and target_2.getAnOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
		and target_2.getAnOperand().(RelationalOperation).getLesserOperand().(Literal).getValue()="1"
}

from Function func, Variable vvc_303, FunctionCall target_0, ExprStmt target_1, LogicalAndExpr target_2
where
func_0(vvc_303, target_0)
and func_1(vvc_303, target_2, target_1)
and func_2(vvc_303, target_2)
and vvc_303.getType().hasName("vc_data *")
and vvc_303.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
