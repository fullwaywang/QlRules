/**
 * @name linux-fc4ef9d5724973193bfa5ebed181dba6de3a56db-bigben_probe
 * @id cpp/linux/fc4ef9d5724973193bfa5ebed181dba6de3a56db/bigben-probe
 * @description linux-fc4ef9d5724973193bfa5ebed181dba6de3a56db-bigben_probe CVE-2022-3577
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vhid_316, Variable verror_325, ArrayExpr target_1, ReturnStmt target_2, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(FunctionCall).getTarget().hasName("list_empty")
		and target_0.getCondition().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="inputs"
		and target_0.getCondition().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vhid_316
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(DoStmt).getCondition() instanceof Literal
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_dev_err")
		and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verror_325
		and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-19"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_1.getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_2.getExpr().(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vhid_316, ArrayExpr target_1) {
		target_1.getArrayBase().(PointerFieldAccess).getTarget().getName()="report_enum"
		and target_1.getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vhid_316
		and target_1.getArrayOffset().(Literal).getValue()="1"
}

predicate func_2(Variable verror_325, VariableAccess target_3, ReturnStmt target_2) {
		target_2.getExpr().(VariableAccess).getTarget()=verror_325
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
}

predicate func_3(Variable verror_325, BlockStmt target_4, VariableAccess target_3) {
		target_3.getTarget()=verror_325
		and target_3.getParent().(IfStmt).getThen()=target_4
}

predicate func_4(Variable verror_325, BlockStmt target_4) {
		target_4.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(DoStmt).getCondition() instanceof Literal
		and target_4.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_dev_err")
		and target_4.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="hw start failed\n"
		and target_4.getStmt(1).(ReturnStmt).getExpr().(VariableAccess).getTarget()=verror_325
}

from Function func, Parameter vhid_316, Variable verror_325, ArrayExpr target_1, ReturnStmt target_2, VariableAccess target_3, BlockStmt target_4
where
not func_0(vhid_316, verror_325, target_1, target_2, func)
and func_1(vhid_316, target_1)
and func_2(verror_325, target_3, target_2)
and func_3(verror_325, target_4, target_3)
and func_4(verror_325, target_4)
and vhid_316.getType().hasName("hid_device *")
and verror_325.getType().hasName("int")
and vhid_316.getFunction() = func
and verror_325.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
