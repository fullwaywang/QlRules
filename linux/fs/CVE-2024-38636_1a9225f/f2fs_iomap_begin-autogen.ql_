/**
 * @name linux-1a9225fdd0ec95fcf32936bcea9ceef0cf1512dc-f2fs_iomap_begin
 * @id cpp/linux/1a9225fdd0ec95fcf32936bcea9ceef0cf1512dc/f2fs-iomap-begin
 * @description linux-1a9225fdd0ec95fcf32936bcea9ceef0cf1512dc-fs/f2fs/data.c-f2fs_iomap_begin CVE-2024-38636
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
	target_0.getValue()="0"
	and not target_0.getValue()="1"
	and target_0.getParent().(NEExpr).getParent().(IfStmt).getCondition() instanceof EqualityOperation
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vmap_4164, BlockStmt target_4, ValueFieldAccess target_5) {
exists(BitwiseAndExpr target_1 |
	exists(ValueFieldAccess obj_0 | obj_0=target_1.getLeftOperand() |
		obj_0.getTarget().getName()="m_flags"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vmap_4164
	)
	and target_1.getRightOperand().(BinaryBitwiseOperation).getValue()="16"
	and target_1.getParent().(IfStmt).getThen()=target_4
	and target_1.getLeftOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_5.getQualifier().(VariableAccess).getLocation())
)
}

predicate func_2(Variable vmap_4164, VariableAccess target_2) {
	target_2.getTarget()=vmap_4164
}

predicate func_3(Variable vmap_4164, BlockStmt target_4, EqualityOperation target_3) {
	exists(ValueFieldAccess obj_0 | obj_0=target_3.getLeftOperand() |
		obj_0.getTarget().getName()="m_pblk"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vmap_4164
	)
	and target_3.getRightOperand() instanceof Literal
	and target_3.getParent().(IfStmt).getThen()=target_4
}

predicate func_4(Variable vmap_4164, BlockStmt target_4) {
	exists(ExprStmt obj_0 | obj_0=target_4.getStmt(0) |
		exists(AssignExpr obj_1 | obj_1=obj_0.getExpr() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getLValue() |
				obj_2.getTarget().getName()="length"
				and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("iomap *")
			)
			and exists(FunctionCall obj_3 | obj_3=obj_1.getRValue() |
				exists(ValueFieldAccess obj_4 | obj_4=obj_3.getArgument(1) |
					obj_4.getTarget().getName()="m_len"
					and obj_4.getQualifier().(VariableAccess).getTarget()=vmap_4164
				)
				and obj_3.getTarget().hasName("blks_to_bytes")
				and obj_3.getArgument(0).(VariableAccess).getTarget().getType().hasName("inode *")
			)
		)
	)
}

predicate func_5(Variable vmap_4164, ValueFieldAccess target_5) {
	target_5.getTarget().getName()="m_len"
	and target_5.getQualifier().(VariableAccess).getTarget()=vmap_4164
}

from Function func, Variable vmap_4164, Literal target_0, VariableAccess target_2, EqualityOperation target_3, BlockStmt target_4, ValueFieldAccess target_5
where
func_0(func, target_0)
and not func_1(vmap_4164, target_4, target_5)
and func_2(vmap_4164, target_2)
and func_3(vmap_4164, target_4, target_3)
and func_4(vmap_4164, target_4)
and func_5(vmap_4164, target_5)
and vmap_4164.getType().hasName("f2fs_map_blocks")
and vmap_4164.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
