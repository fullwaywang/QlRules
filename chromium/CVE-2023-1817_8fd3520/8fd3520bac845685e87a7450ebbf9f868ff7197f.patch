commit 8fd3520bac845685e87a7450ebbf9f868ff7197f	8fd3520bac845685e87a7450ebbf9f868ff7197f
Author: Michael Thiessen <mthiesse@chromium.org>
Date:   Fri Mar 10 20:55:47 2023 +0000

    Block intents to self, and block fallback URLs in sandboxed main frames
    
    Intents to self and main frame fallback URLs don't currently support
    maintaining sandbox attributes. I've been wanting to block intents to
    self for a while, and this seems like a good reason to finally do it -
    we'll instead just load the intent's target URL in the browser (unless
    the frame is sandboxed, in which case we just block the navigation).
    
    This is guarded by a kill switch in case we find that important use
    cases are relying on intenting to the current browser (which would be
    very weird).
    
    Bug: 1418061
    Change-Id: Iaa836be3783122ba6d3fa286bfbf131b0b5cf494
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4294954
    Reviewed-by: Alex Moshchuk <alexmos@chromium.org>
    Reviewed-by: Arthur Sonzogni <arthursonzogni@chromium.org>
    Commit-Queue: Michael Thiessen <mthiesse@chromium.org>
    Code-Coverage: Findit <findit-for-me@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#1115894}

diff --git a/android_webview/java/src/org/chromium/android_webview/AwContents.java b/android_webview/java/src/org/chromium/android_webview/AwContents.java
index e5cfc9e84d78a..8a1aab8fc221b 100644
--- a/android_webview/java/src/org/chromium/android_webview/AwContents.java
+++ b/android_webview/java/src/org/chromium/android_webview/AwContents.java
@@ -688,8 +688,8 @@ public class AwContents implements SmartClipProvider {
     //
     private class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate {
         @Override
-        public boolean shouldIgnoreNavigation(
-                NavigationHandle navigationHandle, GURL escapedUrl, boolean crossFrame) {
+        public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle, GURL escapedUrl,
+                boolean crossFrame, boolean isSandboxedFrame) {
             // The shouldOverrideUrlLoading call might have resulted in posting messages to the
             // UI thread. Using sendMessage here (instead of calling onPageStarted directly)
             // will allow those to run in order.
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/OverlayPanelContent.java b/chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/OverlayPanelContent.java
index 6b246fd5062ac..86f923e25ce9c 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/OverlayPanelContent.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/compositor/bottombar/OverlayPanelContent.java
@@ -163,8 +163,8 @@ public class OverlayPanelContent {
         }
 
         @Override
-        public boolean shouldIgnoreNavigation(
-                NavigationHandle navigationHandle, GURL escapedUrl, boolean crossFrame) {
+        public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle, GURL escapedUrl,
+                boolean crossFrame, boolean isSandboxedFrame) {
             // If either of the required params for the delegate are null, do not call the
             // delegate and ignore the navigation.
             if (mExternalNavHandler == null || navigationHandle == null) return true;
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/dom_distiller/ReaderModeManager.java b/chrome/android/java/src/org/chromium/chrome/browser/dom_distiller/ReaderModeManager.java
index f4e6335f1224e..9a67aac0e2efa 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/dom_distiller/ReaderModeManager.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/dom_distiller/ReaderModeManager.java
@@ -228,8 +228,8 @@ public class ReaderModeManager extends EmptyTabObserver implements UserData {
 
         mCustomTabNavigationDelegate = new InterceptNavigationDelegate() {
             @Override
-            public boolean shouldIgnoreNavigation(
-                    NavigationHandle navigationHandle, GURL escapedUrl, boolean crossFrame) {
+            public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle,
+                    GURL escapedUrl, boolean crossFrame, boolean isSandboxedFrame) {
                 if (DomDistillerUrlUtils.isDistilledPage(navigationHandle.getUrl())
                         || navigationHandle.isExternalProtocol()) {
                     return false;
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/contextualsearch/ContextualSearchManagerTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/contextualsearch/ContextualSearchManagerTest.java
index 3b1a9a96fdeb0..2740f128bbb6c 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/contextualsearch/ContextualSearchManagerTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/contextualsearch/ContextualSearchManagerTest.java
@@ -70,6 +70,7 @@ import org.chromium.chrome.test.util.ChromeTabUtils;
 import org.chromium.chrome.test.util.FullscreenTestUtils;
 import org.chromium.chrome.test.util.MenuUtils;
 import org.chromium.chrome.test.util.browser.Features.EnableFeatures;
+import org.chromium.components.external_intents.ExternalNavigationHandler;
 import org.chromium.content_public.browser.NavigationHandle;
 import org.chromium.content_public.browser.WebContents;
 import org.chromium.content_public.browser.test.util.TestThreadUtils;
@@ -329,6 +330,7 @@ public class ContextualSearchManagerTest extends ContextualSearchInstrumentation
     @SmallTest
     @Feature({"ContextualSearch"})
     public void testRedirectedExternalNavigationWithUserGesture() throws Exception {
+        ExternalNavigationHandler.sAllowIntentsToSelfForTesting = true;
         simulateResolveSearch("intelligence");
         GURL initialUrl = new GURL("http://test.com");
         final NavigationHandle navigationHandle = NavigationHandle.createForTesting(initialUrl,
@@ -339,17 +341,17 @@ public class ContextualSearchManagerTest extends ContextualSearchInstrumentation
         InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() {
             @Override
             public void run() {
-                Assert.assertFalse(
-                        mPanel.getOverlayPanelContent()
-                                .getInterceptNavigationDelegateForTesting()
-                                .shouldIgnoreNavigation(navigationHandle, initialUrl, false));
+                Assert.assertFalse(mPanel.getOverlayPanelContent()
+                                           .getInterceptNavigationDelegateForTesting()
+                                           .shouldIgnoreNavigation(
+                                                   navigationHandle, initialUrl, false, false));
                 Assert.assertEquals(0, mActivityMonitor.getHits());
 
                 navigationHandle.didRedirect(redirectUrl, true);
-                Assert.assertTrue(
-                        mPanel.getOverlayPanelContent()
-                                .getInterceptNavigationDelegateForTesting()
-                                .shouldIgnoreNavigation(navigationHandle, redirectUrl, false));
+                Assert.assertTrue(mPanel.getOverlayPanelContent()
+                                          .getInterceptNavigationDelegateForTesting()
+                                          .shouldIgnoreNavigation(
+                                                  navigationHandle, redirectUrl, false, false));
                 Assert.assertEquals(1, mActivityMonitor.getHits());
             }
         });
@@ -363,6 +365,7 @@ public class ContextualSearchManagerTest extends ContextualSearchInstrumentation
     @SmallTest
     @Feature({"ContextualSearch"})
     public void testExternalNavigationWithUserGesture() throws Exception {
+        ExternalNavigationHandler.sAllowIntentsToSelfForTesting = true;
         testExternalNavigationImpl(true);
     }
 
@@ -374,6 +377,7 @@ public class ContextualSearchManagerTest extends ContextualSearchInstrumentation
     @SmallTest
     @Feature({"ContextualSearch"})
     public void testExternalNavigationWithoutUserGesture() throws Exception {
+        ExternalNavigationHandler.sAllowIntentsToSelfForTesting = true;
         testExternalNavigationImpl(false);
     }
 
@@ -386,9 +390,10 @@ public class ContextualSearchManagerTest extends ContextualSearchInstrumentation
         InstrumentationRegistry.getInstrumentation().runOnMainSync(new Runnable() {
             @Override
             public void run() {
-                Assert.assertTrue(mPanel.getOverlayPanelContent()
-                                          .getInterceptNavigationDelegateForTesting()
-                                          .shouldIgnoreNavigation(navigationHandle, url, false));
+                Assert.assertTrue(
+                        mPanel.getOverlayPanelContent()
+                                .getInterceptNavigationDelegateForTesting()
+                                .shouldIgnoreNavigation(navigationHandle, url, false, false));
             }
         });
         Assert.assertEquals(hasGesture ? 1 : 0, mActivityMonitor.getHits());
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/customtabs/CustomTabExternalNavigationTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/customtabs/CustomTabExternalNavigationTest.java
index 37df91da1bbd3..de00226de5b3b 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/customtabs/CustomTabExternalNavigationTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/customtabs/CustomTabExternalNavigationTest.java
@@ -110,6 +110,7 @@ public class CustomTabExternalNavigationTest {
     @Test
     @SmallTest
     public void testExternalActivityStartedForDefaultUrl() {
+        ExternalNavigationHandler.sAllowIntentsToSelfForTesting = true;
         final GURL testUrl = new GURL("customtab://customtabtest/intent");
         RedirectHandler redirectHandler = RedirectHandler.create();
         redirectHandler.updateNewUrlLoading(PageTransition.LINK, false, true, 0, 0, false, true);
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
index b18164efa7405..3896e667b6fa8 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
@@ -185,6 +185,8 @@ public class UrlOverridingTest {
             BASE_PATH + "navigation_from_page_show.html";
     private static final String SUBFRAME_NAVIGATION_PARENT =
             BASE_PATH + "subframe_navigation_parent.html";
+    private static final String SUBFRAME_NAVIGATION_PARENT_SANDBOX =
+            BASE_PATH + "subframe_navigation_parent_sandbox.html";
     private static final String SUBFRAME_NAVIGATION_CHILD =
             BASE_PATH + "subframe_navigation_child.html";
     private static final String NAVIGATION_FROM_RENAVIGATE_FRAME =
@@ -494,29 +496,20 @@ public class UrlOverridingTest {
             }
         }
 
-        if (shouldFailNavigation) {
-            try {
-                failCallback.waitForCallback(0, 1, 20, TimeUnit.SECONDS);
-            } catch (TimeoutException ex) {
-                Assert.fail("Haven't received navigation failure of intents.");
-                return OverrideUrlLoadingResult.forNoOverride();
-            }
-        }
-
         if (createsNewTab) {
             try {
                 newTabCallback.waitForCallback(0, 1, 20, TimeUnit.SECONDS);
             } catch (TimeoutException ex) {
                 Assert.fail("New Tab was not created.");
             }
+        }
 
-            if (shouldLaunchExternalIntent) {
-                try {
-                    destroyedCallback.waitForCallback(0, 1, 20, TimeUnit.SECONDS);
-                } catch (TimeoutException ex) {
-                    Assert.fail("Intercepted new tab wasn't destroyed.");
-                    return OverrideUrlLoadingResult.forNoOverride();
-                }
+        if (shouldFailNavigation) {
+            try {
+                failCallback.waitForCallback(0, 1, 20, TimeUnit.SECONDS);
+            } catch (TimeoutException ex) {
+                Assert.fail("Haven't received navigation failure of intents.");
+                return OverrideUrlLoadingResult.forNoOverride();
             }
         }
 
@@ -556,6 +549,15 @@ public class UrlOverridingTest {
             Criteria.checkThat(latestTab.getUrl().getSpec(), Matchers.is(expectedFinalUrl));
         });
 
+        if (createsNewTab && shouldLaunchExternalIntent) {
+            try {
+                destroyedCallback.waitForCallback(0, 1, 20, TimeUnit.SECONDS);
+            } catch (TimeoutException ex) {
+                Assert.fail("Intercepted new tab wasn't destroyed.");
+                return OverrideUrlLoadingResult.forNoOverride();
+            }
+        }
+
         CriteriaHelper.pollUiThread(() -> {
             Criteria.checkThat(
                     mActivityMonitor.getHits(), Matchers.is(shouldLaunchExternalIntent ? 1 : 0));
@@ -598,7 +600,8 @@ public class UrlOverridingTest {
         Assert.assertNotNull(message.get(MessageBannerProperties.ICON));
     }
 
-    private String getSubframeNavigationUrl(String subframeTargetUrl) {
+    private String getSubframeNavigationUrl(
+            String subframeTargetUrl, boolean openInNewTab, boolean sandbox) {
         // The replace_text parameters for SUBFRAME_NAVIGATION_CHILD, which is loaded in
         // the iframe in SUBFRAME_NAVIGATION_PARENT, have to go through the
         // embedded test server twice and, as such, have to be base64-encoded twice.
@@ -609,11 +612,18 @@ public class UrlOverridingTest {
         byte[] base64SubframeUrl = Base64.encode(
                 ApiCompatibilityUtils.getBytesUtf8(subframeTargetUrl), Base64.URL_SAFE);
 
-        return mTestServer.getURL(SUBFRAME_NAVIGATION_PARENT
+        byte[] paramBlank = ApiCompatibilityUtils.getBytesUtf8("PARAM_BLANK");
+        byte[] valBlank = ApiCompatibilityUtils.getBytesUtf8("_blank");
+
+        String url = sandbox ? SUBFRAME_NAVIGATION_PARENT_SANDBOX : SUBFRAME_NAVIGATION_PARENT;
+
+        return mTestServer.getURL(url
                 + "?replace_text=" + Base64.encodeToString(paramBase64Name, Base64.URL_SAFE) + ":"
                 + Base64.encodeToString(base64ParamSubframeUrl, Base64.URL_SAFE)
                 + "&replace_text=" + Base64.encodeToString(paramBase64Value, Base64.URL_SAFE) + ":"
-                + Base64.encodeToString(base64SubframeUrl, Base64.URL_SAFE));
+                + Base64.encodeToString(base64SubframeUrl, Base64.URL_SAFE)
+                + "&replace_text=" + Base64.encodeToString(paramBlank, Base64.URL_SAFE) + ":"
+                + (openInNewTab ? Base64.encodeToString(valBlank, Base64.URL_SAFE) : ""));
     }
 
     @Test
@@ -722,7 +732,7 @@ public class UrlOverridingTest {
         String fallbackUrl = mTestServer.getURL(FALLBACK_LANDING_PATH);
         String subframeUrl = "intent://test/#Intent;scheme=badscheme;S.browser_fallback_url="
                 + fallbackUrl + ";end";
-        String originalUrl = getSubframeNavigationUrl(subframeUrl);
+        String originalUrl = getSubframeNavigationUrl(subframeUrl, false, false);
 
         OverrideUrlLoadingResult result = loadUrlAndWaitForIntentUrl(originalUrl, true, false);
 
@@ -739,7 +749,7 @@ public class UrlOverridingTest {
         String fallbackUrl = mTestServer.getURL(FALLBACK_LANDING_PATH);
         String subframeUrl = "intent://test/#Intent;scheme=badscheme;S.browser_fallback_url="
                 + fallbackUrl + ";end";
-        String originalUrl = getSubframeNavigationUrl(subframeUrl);
+        String originalUrl = getSubframeNavigationUrl(subframeUrl, false, false);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
@@ -1408,7 +1418,7 @@ public class UrlOverridingTest {
                 + "https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.android.chrome"
                 + ";end";
 
-        String originalUrl = getSubframeNavigationUrl(subframeTarget);
+        String originalUrl = getSubframeNavigationUrl(subframeTarget, false, false);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
@@ -1449,7 +1459,7 @@ public class UrlOverridingTest {
         String subframeUrl =
                 "intent://test/#Intent;scheme=externalappscheme;S.browser_fallback_url="
                 + fallbackUrl + ";end";
-        String originalUrl = getSubframeNavigationUrl(subframeUrl);
+        String originalUrl = getSubframeNavigationUrl(subframeUrl, false, false);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
@@ -1523,7 +1533,7 @@ public class UrlOverridingTest {
     }
 
     @Test
-    @SmallTest
+    @LargeTest
     @Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_FRAME_RENAVIGATIONS_NAME})
     public void testWindowRenavigation() throws Exception {
         String finalUrl = mTestServer.getURL(HELLO_PAGE);
@@ -1534,4 +1544,128 @@ public class UrlOverridingTest {
         Assert.assertEquals(OverrideUrlLoadingResultType.NO_OVERRIDE, result.getResultType());
         Assert.assertNull(getCurrentExternalNavigationMessage());
     }
+
+    @Test
+    @LargeTest
+    @Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_SUBFRAME_INTENT_TO_SELF_NAME,
+            ExternalIntentsFeatures.BLOCK_INTENTS_TO_SELF_NAME})
+    public void
+    testIntentToSelf() {
+        String targetUrl = mTestServer.getURL(HELLO_PAGE);
+        // Strip off the https: from the URL.
+        String strippedTargetUrl = targetUrl.substring(6);
+        String link = "intent:" + strippedTargetUrl + "#Intent;scheme=https;package="
+                + ContextUtils.getApplicationContext().getPackageName() + ";end";
+
+        byte[] paramName = ApiCompatibilityUtils.getBytesUtf8("PARAM_SUBFRAME_URL");
+        byte[] paramValue = ApiCompatibilityUtils.getBytesUtf8(link);
+
+        String url = mTestServer.getURL(SUBFRAME_NAVIGATION_CHILD
+                + "?replace_text=" + Base64.encodeToString(paramName, Base64.URL_SAFE) + ":"
+                + Base64.encodeToString(paramValue, Base64.URL_SAFE));
+
+        mActivityTestRule.startMainActivityOnBlankPage();
+        loadUrlAndWaitForIntentUrl(url, true, false, false, targetUrl, true);
+    }
+
+    @Test
+    @LargeTest
+    @Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_SUBFRAME_INTENT_TO_SELF_NAME,
+            ExternalIntentsFeatures.BLOCK_INTENTS_TO_SELF_NAME})
+    public void
+    testIntentToSelfWithFallback() throws Exception {
+        mActivityTestRule.startMainActivityOnBlankPage();
+
+        String targetUrl = mTestServer.getURL(HELLO_PAGE);
+        // Strip off the https: from the URL.
+        String strippedTargetUrl = targetUrl.substring(6);
+        String subframeTarget = "intent:" + strippedTargetUrl + "#Intent;scheme=https;package="
+                + ContextUtils.getApplicationContext().getPackageName() + ";S.browser_fallback_url="
+                + "https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.android.chrome"
+                + ";end";
+
+        String originalUrl = getSubframeNavigationUrl(subframeTarget, true, false);
+
+        final Tab tab = mActivityTestRule.getActivity().getActivityTab();
+
+        final CallbackHelper subframeRedirect = new CallbackHelper();
+        final AtomicInteger navCount = new AtomicInteger(0);
+        EmptyTabObserver observer = new EmptyTabObserver() {
+            @Override
+            public void onDidStartNavigationInPrimaryMainFrame(
+                    Tab tab, NavigationHandle navigation) {
+                int count = navCount.getAndIncrement();
+                if (count == 0) {
+                    Assert.assertEquals(originalUrl, navigation.getUrl().getSpec());
+                } else if (count == 1) {
+                    Assert.assertEquals(subframeTarget, navigation.getUrl().getSpec());
+                } else if (count == 2) {
+                    Assert.assertEquals(targetUrl, navigation.getUrl().getSpec());
+                } else {
+                    Assert.fail();
+                }
+            }
+        };
+        TestThreadUtils.runOnUiThreadBlocking(() -> { tab.addObserver(observer); });
+
+        OverrideUrlLoadingResult result =
+                loadUrlAndWaitForIntentUrl(originalUrl, true, true, false, targetUrl, true);
+        Assert.assertEquals(
+                OverrideUrlLoadingResultType.OVERRIDE_WITH_NAVIGATE_TAB, result.getResultType());
+    }
+
+    // Ensures that for a sandboxed main frame, we block both intents to ourself, and fallback URLs
+    // that would escape the sandbox by clobbering the main frame.
+    @Test
+    @LargeTest
+    @Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_SUBFRAME_INTENT_TO_SELF_NAME,
+            ExternalIntentsFeatures.BLOCK_INTENTS_TO_SELF_NAME})
+    public void
+    testIntentToSelfWithFallback_Sandboxed() throws Exception {
+        mActivityTestRule.startMainActivityOnBlankPage();
+
+        String targetUrl = mTestServer.getURL(HELLO_PAGE);
+        // Strip off the https: from the URL.
+        String strippedTargetUrl = targetUrl.substring(6);
+        String subframeTarget = "intent:" + strippedTargetUrl + "#Intent;scheme=https;package="
+                + ContextUtils.getApplicationContext().getPackageName() + ";S.browser_fallback_url="
+                + "https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.android.chrome"
+                + ";end";
+
+        String originalUrl = getSubframeNavigationUrl(subframeTarget, true, true);
+
+        final Tab tab = mActivityTestRule.getActivity().getActivityTab();
+
+        final CallbackHelper subframeRedirect = new CallbackHelper();
+        final AtomicInteger navCount = new AtomicInteger(0);
+        EmptyTabObserver observer = new EmptyTabObserver() {
+            @Override
+            public void onDidStartNavigationInPrimaryMainFrame(
+                    Tab tab, NavigationHandle navigation) {
+                int count = navCount.getAndIncrement();
+                if (count == 0) {
+                    Assert.assertEquals(originalUrl, navigation.getUrl().getSpec());
+                } else if (count == 1) {
+                    Assert.assertEquals(subframeTarget, navigation.getUrl().getSpec());
+                } else {
+                    Assert.fail();
+                }
+            }
+        };
+        TestThreadUtils.runOnUiThreadBlocking(() -> { tab.addObserver(observer); });
+
+        OverrideUrlLoadingResult result =
+                loadUrlAndWaitForIntentUrl(originalUrl, true, true, false, null, true);
+        // Navigation to self is blocked, ExternalNavigationHandler asks to navigate to the
+        // fallback URL.
+        Assert.assertEquals(
+                OverrideUrlLoadingResultType.OVERRIDE_WITH_NAVIGATE_TAB, result.getResultType());
+        // Fallback URL is blocked by InterceptNavigationDelegateImpl, no URL is loading and the
+        // final URL is the subframe's target.
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            Tab newTab = mActivityTestRule.getActivity().getActivityTab();
+            Assert.assertEquals(subframeTarget, newTab.getUrl().getSpec());
+            Assert.assertFalse(newTab.getWebContents().isLoading());
+        });
+    }
 }
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java
index 55291ab695fe4..928c68cb5a226 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java
@@ -118,10 +118,11 @@ public class InterceptNavigationDelegateTest {
                     new InterceptNavigationDelegateClientImpl(tab);
             InterceptNavigationDelegateImpl delegate = new InterceptNavigationDelegateImpl(client) {
                 @Override
-                public boolean shouldIgnoreNavigation(
-                        NavigationHandle navigationHandle, GURL escapedUrl, boolean crossFrame) {
+                public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle,
+                        GURL escapedUrl, boolean crossFrame, boolean isSandboxedFrame) {
                     mNavParamHistory.add(navigationHandle);
-                    return super.shouldIgnoreNavigation(navigationHandle, escapedUrl, crossFrame);
+                    return super.shouldIgnoreNavigation(
+                            navigationHandle, escapedUrl, crossFrame, isSandboxedFrame);
                 }
 
                 @Override
diff --git a/chrome/test/data/android/url_overriding/subframe_navigation_child_blank.html b/chrome/test/data/android/url_overriding/subframe_navigation_child_blank.html
new file mode 100644
index 0000000000000..e6485cc1b26a8
--- /dev/null
+++ b/chrome/test/data/android/url_overriding/subframe_navigation_child_blank.html
@@ -0,0 +1,10 @@
+<head>
+  <meta name="viewport"
+    content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+</head>
+<body>
+  <a href='PARAM_SUBFRAME_URL' target='_Blank'>
+    <div style='height:10000px; width:100%;'></div>
+  </a>
+  Click page to open App!!
+</body>
diff --git a/chrome/test/data/android/url_overriding/subframe_navigation_parent.html b/chrome/test/data/android/url_overriding/subframe_navigation_parent.html
index 73df9fbc88b39..5d78f2c5e2d9e 100644
--- a/chrome/test/data/android/url_overriding/subframe_navigation_parent.html
+++ b/chrome/test/data/android/url_overriding/subframe_navigation_parent.html
@@ -3,6 +3,6 @@
     content="width=device-width, initial-scale=1.0, maximum-scale=1.0"/>
 <body style='height:10000px'>
 <p>Hello World</p>
-<iframe src="subframe_navigation_child.html?replace_text=PARAM_BASE64_NAME:PARAM_BASE64_VALUE"
+<iframe src="subframe_navigation_childPARAM_BLANK.html?replace_text=PARAM_BASE64_NAME:PARAM_BASE64_VALUE"
     width="100%" height="99%"></iframe>
 </body>
diff --git a/chrome/test/data/android/url_overriding/subframe_navigation_parent_sandbox.html b/chrome/test/data/android/url_overriding/subframe_navigation_parent_sandbox.html
new file mode 100644
index 0000000000000..98df7968aa136
--- /dev/null
+++ b/chrome/test/data/android/url_overriding/subframe_navigation_parent_sandbox.html
@@ -0,0 +1,8 @@
+<!DOCTYPE html>
+<meta name="viewport"
+    content="width=device-width, initial-scale=1.0, maximum-scale=1.0"/>
+<body style='height:10000px'>
+<p>Hello World</p>
+<iframe src="subframe_navigation_childPARAM_BLANK.html?replace_text=PARAM_BASE64_NAME:PARAM_BASE64_VALUE"
+    width="100%" height="99%" sandbox="allow-popups allow-script"></iframe>
+</body>
diff --git a/components/external_intents/android/external_intents_features.cc b/components/external_intents/android/external_intents_features.cc
index c39709a6bf0d2..f5a005f629191 100644
--- a/components/external_intents/android/external_intents_features.cc
+++ b/components/external_intents/android/external_intents_features.cc
@@ -18,9 +18,9 @@ namespace {
 
 // Array of features exposed through the Java ExternalIntentsFeatures API.
 const base::Feature* kFeaturesExposedToJava[] = {
-    &kExternalNavigationDebugLogs, &kExternalNavigationSubframeRedirects,
-    &kBlockSubframeIntentToSelf, &kBlockFrameRenavigations,
-    &kDoNotRequireSpecializedCCTHandler};
+    &kExternalNavigationDebugLogs,       &kExternalNavigationSubframeRedirects,
+    &kBlockSubframeIntentToSelf,         &kBlockFrameRenavigations,
+    &kDoNotRequireSpecializedCCTHandler, &kBlockIntentsToSelf};
 
 }  // namespace
 
@@ -46,6 +46,10 @@ BASE_FEATURE(kDoNotRequireSpecializedCCTHandler,
              "DoNotRequireSpecializedCCTHandler",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
+BASE_FEATURE(kBlockIntentsToSelf,
+             "BlockIntentsToSelf",
+             base::FEATURE_ENABLED_BY_DEFAULT);
+
 static jlong JNI_ExternalIntentsFeatures_GetFeature(JNIEnv* env, jint ordinal) {
   return reinterpret_cast<jlong>(kFeaturesExposedToJava[ordinal]);
 }
diff --git a/components/external_intents/android/external_intents_features.h b/components/external_intents/android/external_intents_features.h
index 7bab713c41cd6..85592f2e1d99d 100644
--- a/components/external_intents/android/external_intents_features.h
+++ b/components/external_intents/android/external_intents_features.h
@@ -9,12 +9,12 @@
 
 namespace external_intents {
 
-// Alphabetical:
 BASE_DECLARE_FEATURE(kExternalNavigationDebugLogs);
 BASE_DECLARE_FEATURE(kExternalNavigationSubframeRedirects);
 BASE_DECLARE_FEATURE(kBlockSubframeIntentToSelf);
 BASE_DECLARE_FEATURE(kBlockFrameRenavigations);
 BASE_DECLARE_FEATURE(kDoNotRequireSpecializedCCTHandler);
+BASE_DECLARE_FEATURE(kBlockIntentsToSelf);
 }  // namespace external_intents
 
 #endif  // COMPONENTS_EXTERNAL_INTENTS_ANDROID_EXTERNAL_INTENTS_FEATURES_H_
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
index c81c4f567047f..2f11ebc3ee6f1 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
@@ -24,6 +24,7 @@ public class ExternalIntentsFeatures extends Features {
     public static final String BLOCK_FRAME_RENAVIGATIONS_NAME = "BlockFrameRenavigations";
     public static final String DO_NOT_REQUIRE_SPECIALIZED_CCT_HANDLER_NAME =
             "DoNotRequireSpecializedCCTHandler";
+    public static final String BLOCK_INTENTS_TO_SELF_NAME = "BlockIntentsToSelf";
 
     public static final ExternalIntentsFeatures EXTERNAL_NAVIGATION_DEBUG_LOGS =
             new ExternalIntentsFeatures(0, EXTERNAL_NAVIGATION_DEBUG_LOGS_NAME);
@@ -40,6 +41,9 @@ public class ExternalIntentsFeatures extends Features {
     public static final ExternalIntentsFeatures DO_NOT_REQUIRE_SPECIALIZED_CCT_HANDLER =
             new ExternalIntentsFeatures(4, DO_NOT_REQUIRE_SPECIALIZED_CCT_HANDLER_NAME);
 
+    public static final ExternalIntentsFeatures BLOCK_INTENTS_TO_SELF =
+            new ExternalIntentsFeatures(5, BLOCK_INTENTS_TO_SELF_NAME);
+
     private final int mOrdinal;
 
     private ExternalIntentsFeatures(int ordinal, String name) {
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
index 3808fc48c78b5..aa8217e4135c8 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
@@ -444,6 +444,7 @@ public class ExternalNavigationHandler {
         }
     }
 
+    public static boolean sAllowIntentsToSelfForTesting;
     private final ExternalNavigationDelegate mDelegate;
     private AlertDialog mIncognitoAlertDialog;
 
@@ -1121,10 +1122,20 @@ public class ExternalNavigationHandler {
         return OverrideUrlLoadingResult.forNoOverride();
     }
 
-    private boolean isSubframeNavigationToSelf(ExternalNavigationParams params,
-            QueryIntentActivitiesSupplier resolvingInfos, ResolveActivitySupplier resolveActivity) {
+    /**
+     * If a navigation is targeting the current browser, just load the URL in the browser to avoid
+     * exposing capabilities only intended for other apps on the device to the web (and weird things
+     * like websites launching CCTs).
+     */
+    private boolean isNavigationToSelf(ExternalNavigationParams params,
+            QueryIntentActivitiesSupplier resolvingInfos, ResolveActivitySupplier resolveActivity,
+            boolean isExternalProtocol) {
+        if (sAllowIntentsToSelfForTesting) return false;
         if (!ExternalIntentsFeatures.BLOCK_SUBFRAME_INTENT_TO_SELF.isEnabled()) return false;
-        if (params.isMainFrame()) return false;
+        if (!ExternalIntentsFeatures.BLOCK_INTENTS_TO_SELF.isEnabled() && params.isMainFrame()) {
+            return false;
+        }
+        if (!isExternalProtocol) return false;
         if (!resolveInfoContainsSelf(resolvingInfos.get())) return false;
         if (resolveActivity.get() == null) return false;
 
@@ -1591,7 +1602,7 @@ public class ExternalNavigationHandler {
         }
 
         ResolveActivitySupplier resolveActivity = new ResolveActivitySupplier(targetIntent);
-        if (isSubframeNavigationToSelf(params, resolvingInfos, resolveActivity)) {
+        if (isNavigationToSelf(params, resolvingInfos, resolveActivity, isExternalProtocol)) {
             return OverrideUrlLoadingResult.forNavigateTab(intentDataUrl, params);
         }
 
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationParams.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationParams.java
index 63c6f3e582dba..46a7373def982 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationParams.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationParams.java
@@ -93,6 +93,7 @@ public class ExternalNavigationParams {
     private final boolean mHasUserGesture;
     private final boolean mIsInitialNavigationInFrame;
     private final boolean mIsCrossFrameNavigation;
+    private final boolean mIsSandboxedMainFrame;
     private final Callback<AsyncActionTakenParams> mAsyncActionTakenCallback;
     private boolean mIsRendererInitiated;
     private Origin mInitiatorOrigin;
@@ -107,7 +108,7 @@ public class ExternalNavigationParams {
             boolean isMainFrame, String nativeClientPackageName, boolean hasUserGesture,
             Callback<AsyncActionTakenParams> asyncActionTakenCallback, boolean isRendererInitiated,
             @Nullable Origin initiatorOrigin, boolean isInitialNavigationInFrame,
-            boolean isCrossFrameNavigation) {
+            boolean isCrossFrameNavigation, boolean isSandboxedMainFrame) {
         mUrl = url;
         mIsIncognito = isIncognito;
         mPageTransition = pageTransition;
@@ -126,6 +127,7 @@ public class ExternalNavigationParams {
         mInitiatorOrigin = initiatorOrigin;
         mIsInitialNavigationInFrame = isInitialNavigationInFrame;
         mIsCrossFrameNavigation = isCrossFrameNavigation;
+        mIsSandboxedMainFrame = isSandboxedMainFrame;
     }
 
     public void onAsyncActionStarted() {
@@ -248,6 +250,13 @@ public class ExternalNavigationParams {
         return mIsCrossFrameNavigation;
     }
 
+    /**
+     * @return whether this navigation is taking place in a sandboxed main frame.
+     */
+    public boolean isSandboxedMainFrame() {
+        return mIsSandboxedMainFrame;
+    }
+
     /** The builder for {@link ExternalNavigationParams} objects. */
     public static class Builder {
         private GURL mUrl;
@@ -268,6 +277,7 @@ public class ExternalNavigationParams {
         private Origin mInitiatorOrigin;
         private boolean mIsInitialNavigationInFrame;
         private boolean mIsCrossFrameNavigation;
+        private boolean mIsSandboxedMainFrame;
 
         public Builder(GURL url, boolean isIncognito) {
             mUrl = url;
@@ -371,6 +381,14 @@ public class ExternalNavigationParams {
             return this;
         }
 
+        /**
+         * Sets whether this navigation is taking place in a sandboxed main frame.
+         */
+        public Builder setIsSandboxedMainFrame(boolean v) {
+            mIsSandboxedMainFrame = v;
+            return this;
+        }
+
         /** @return A fully constructed {@link ExternalNavigationParams} object. */
         public ExternalNavigationParams build() {
             return new ExternalNavigationParams(mUrl, mIsIncognito, mReferrerUrl, mPageTransition,
@@ -378,7 +396,7 @@ public class ExternalNavigationParams {
                     mIsBackgroundTabNavigation, mIntentLaunchesAllowedInBackgroundTabs,
                     mIsMainFrame, mNativeClientPackageName, mHasUserGesture,
                     mAsyncActionTakenCallback, mIsRendererInitiated, mInitiatorOrigin,
-                    mIsInitialNavigationInFrame, mIsCrossFrameNavigation);
+                    mIsInitialNavigationInFrame, mIsCrossFrameNavigation, mIsSandboxedMainFrame);
         }
     }
 }
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
index dff348fb31540..4604289edd391 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
@@ -149,8 +149,8 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
     }
 
     @Override
-    public boolean shouldIgnoreNavigation(
-            NavigationHandle navigationHandle, GURL escapedUrl, boolean crossFrame) {
+    public boolean shouldIgnoreNavigation(NavigationHandle navigationHandle, GURL escapedUrl,
+            boolean crossFrame, boolean isSandboxedFrame) {
         // We should never get here for non-main-frame navigations.
         if (!navigationHandle.isInPrimaryMainFrame()) throw new RuntimeException();
 
@@ -167,7 +167,7 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
                 navigationHandle.getReferrerUrl(), navigationHandle.isInPrimaryMainFrame(),
                 navigationHandle.getInitiatorOrigin(), navigationHandle.isExternalProtocol(),
                 mClient.areIntentLaunchesAllowedInHiddenTabsForNavigation(navigationHandle),
-                this::onDidAsyncActionInMainFrame, crossFrame);
+                this::onDidAsyncActionInMainFrame, crossFrame, isSandboxedFrame);
 
         mClient.onDecisionReachedForNavigation(navigationHandle, result);
 
@@ -210,7 +210,8 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
                 GURL.emptyGURL() /* referrerUrl */, false /* isInPrimaryMainFrame */,
                 initiatorOrigin, true /* isExternalProtocol */,
                 false /* areIntentLaunchesAllowedInHiddenTabsForNavigation */,
-                this::onDidAsyncActionInSubFrame, false /* crossframe */);
+                this::onDidAsyncActionInSubFrame, false /* crossframe */,
+                false /* isSandboxedMainFrame */);
 
         switch (result.getResultType()) {
             case OverrideUrlLoadingResultType.OVERRIDE_WITH_EXTERNAL_INTENT:
@@ -237,7 +238,8 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
             boolean hasUserGesture, boolean isRendererInitiated, GURL referrerUrl,
             boolean isInPrimaryMainFrame, Origin initiatorOrigin, boolean isExternalProtocol,
             boolean areIntentLaunchesAllowedInHiddenTabsForNavigation,
-            Callback<AsyncActionTakenParams> asyncActionTakenCallback, boolean crossFrame) {
+            Callback<AsyncActionTakenParams> asyncActionTakenCallback, boolean crossFrame,
+            boolean isSandboxedMainFrame) {
         boolean initialNavigation = isInitialNavigation();
         redirectHandler.updateNewUrlLoading(pageTransition, isRedirect, hasUserGesture,
                 mClient.getLastUserInteractionTime(), getLastCommittedEntryIndex(),
@@ -266,6 +268,7 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
                         .setAsyncActionTakenCallback(asyncActionTakenCallback)
                         .setIsInitialNavigationInFrame(initialNavigation)
                         .setIsCrossFrameNavigation(crossFrame)
+                        .setIsSandboxedMainFrame(isSandboxedMainFrame)
                         .build();
 
         OverrideUrlLoadingResult result = mExternalNavHandler.shouldOverrideUrlLoading(params);
@@ -446,6 +449,12 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
     }
 
     private void clobberMainFrame(GURL targetUrl, ExternalNavigationParams params) {
+        if (ExternalIntentsFeatures.BLOCK_INTENTS_TO_SELF.isEnabled()) {
+            // Our current tab clobbering strategy doesn't support persisting sandbox attributes, so
+            // for sandboxed main frames, drop the navigation.
+            if (params.isSandboxedMainFrame()) return;
+        }
+
         int transitionType = PageTransition.LINK;
         final LoadUrlParams loadUrlParams = new LoadUrlParams(targetUrl, transitionType);
         if (!params.getReferrerUrl().isEmpty()) {
diff --git a/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java b/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java
index 5cecf41675189..4983bf77fbee8 100644
--- a/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java
+++ b/components/external_intents/android/javatests/src/org/chromium/components/external_intents/ExternalNavigationHandlerTest.java
@@ -77,7 +77,8 @@ import java.util.regex.Pattern;
 @Features.DisableFeatures(ExternalIntentsFeatures.EXTERNAL_NAVIGATION_DEBUG_LOGS_NAME)
 @Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_SUBFRAME_INTENT_TO_SELF_NAME,
         ExternalIntentsFeatures.BLOCK_FRAME_RENAVIGATIONS_NAME,
-        ExternalIntentsFeatures.DO_NOT_REQUIRE_SPECIALIZED_CCT_HANDLER_NAME})
+        ExternalIntentsFeatures.DO_NOT_REQUIRE_SPECIALIZED_CCT_HANDLER_NAME,
+        ExternalIntentsFeatures.BLOCK_INTENTS_TO_SELF_NAME})
 public class ExternalNavigationHandlerTest {
     // Expectations
     private static final int IGNORE = 0x0;
diff --git a/components/navigation_interception/android/java/src/org/chromium/components/navigation_interception/InterceptNavigationDelegate.java b/components/navigation_interception/android/java/src/org/chromium/components/navigation_interception/InterceptNavigationDelegate.java
index 2a3b35aaecdb8..83fe5b9ca1db5 100644
--- a/components/navigation_interception/android/java/src/org/chromium/components/navigation_interception/InterceptNavigationDelegate.java
+++ b/components/navigation_interception/android/java/src/org/chromium/components/navigation_interception/InterceptNavigationDelegate.java
@@ -20,11 +20,12 @@ public abstract class InterceptNavigationDelegate {
      * @param escapedUrl The url from the NavigationHandle, properly escaped for external
      *         navigation.
      * @param crossFrame whether the navigation has been initiated by another frame.
+     * @param isSandboxedFrame whether the navigation was initiated by a sandboxed frame.
      * @return true if the navigation should be ignored.
      */
     @CalledByNative
-    public abstract boolean shouldIgnoreNavigation(
-            NavigationHandle navigationHandle, GURL escapedUrl, boolean crossFrame);
+    public abstract boolean shouldIgnoreNavigation(NavigationHandle navigationHandle,
+            GURL escapedUrl, boolean crossFrame, boolean isSandboxedFrame);
 
     /**
      * This method is called for navigations to external protocols in subframes, which on Android
diff --git a/components/navigation_interception/intercept_navigation_delegate.cc b/components/navigation_interception/intercept_navigation_delegate.cc
index e849b9a6f8070..913cda39d0ecf 100644
--- a/components/navigation_interception/intercept_navigation_delegate.cc
+++ b/components/navigation_interception/intercept_navigation_delegate.cc
@@ -196,9 +196,16 @@ bool InterceptNavigationDelegate::ShouldIgnoreNavigation(
                              ->GetPrimaryMainFrame()
                              ->GetFrameToken();
 
+  // We don't care which sandbox flags are present, only that any sandbox flags
+  // are present, as we don't support persisting sandbox flags through fallback
+  // URL navigation.
+  bool is_sandboxed = navigation_handle->SandboxFlagsInherited() !=
+                      network::mojom::WebSandboxFlags::kNone;
+
   return Java_InterceptNavigationDelegate_shouldIgnoreNavigation(
       env, jdelegate, navigation_handle->GetJavaNavigationHandle(),
-      url::GURLAndroid::FromNativeGURL(env, escaped_url), cross_frame);
+      url::GURLAndroid::FromNativeGURL(env, escaped_url), cross_frame,
+      is_sandboxed);
 }
 
 void InterceptNavigationDelegate::HandleSubframeExternalProtocol(
diff --git a/content/browser/renderer_host/navigation_request.cc b/content/browser/renderer_host/navigation_request.cc
index 4447f931c4839..bdd7beda5b911 100644
--- a/content/browser/renderer_host/navigation_request.cc
+++ b/content/browser/renderer_host/navigation_request.cc
@@ -4764,6 +4764,10 @@ void NavigationRequest::OnServiceWorkerAccessed(
   GetDelegate()->OnServiceWorkerAccessed(this, scope, allowed);
 }
 
+network::mojom::WebSandboxFlags NavigationRequest::SandboxFlagsInherited() {
+  return commit_params_->frame_policy.sandbox_flags;
+}
+
 network::mojom::WebSandboxFlags NavigationRequest::SandboxFlagsToCommit() {
   DCHECK_GE(state_, WILL_PROCESS_RESPONSE);
   DCHECK(!IsSameDocument());
diff --git a/content/browser/renderer_host/navigation_request.h b/content/browser/renderer_host/navigation_request.h
index bcbadcb0e901e..778fa24ce8c00 100644
--- a/content/browser/renderer_host/navigation_request.h
+++ b/content/browser/renderer_host/navigation_request.h
@@ -408,6 +408,7 @@ class CONTENT_EXPORT NavigationRequest
   bool IsServedFromBackForwardCache() override;
   void SetIsOverridingUserAgent(bool override_ua) override;
   void SetSilentlyIgnoreErrors() override;
+  network::mojom::WebSandboxFlags SandboxFlagsInherited() override;
   network::mojom::WebSandboxFlags SandboxFlagsToCommit() override;
   bool IsWaitingToCommit() override;
   bool WasResourceHintsReceived() override;
diff --git a/content/public/browser/navigation_handle.h b/content/public/browser/navigation_handle.h
index a0e14ea0d1a4a..e384b81fb9983 100644
--- a/content/public/browser/navigation_handle.h
+++ b/content/public/browser/navigation_handle.h
@@ -532,6 +532,20 @@ class CONTENT_EXPORT NavigationHandle : public base::SupportsUserData {
   // the navigation: no error page will commit.
   virtual void SetSilentlyIgnoreErrors() = 0;
 
+  // The sandbox flags inherited at the beginning of the navigation.
+  //
+  // This is the sandbox flags intersection of:
+  // - The parent document.
+  // - The iframe.sandbox attribute.
+  //
+  // Contrary to `SandboxFlagsToCommit()`, this can be called at the beginning
+  // of the navigation. However, this doesn't include the sandbox flags a
+  // document applies on itself, via the "Content-Security-Policy: sandbox"
+  // response header.
+  //
+  // See also: content/browser/renderer_host/sandbox_flags.md
+  virtual network::mojom::WebSandboxFlags SandboxFlagsInherited() = 0;
+
   // The sandbox flags of the new document created by this navigation. This
   // function can only be called for cross-document navigations after receiving
   // the final response.
diff --git a/content/public/test/mock_navigation_handle.h b/content/public/test/mock_navigation_handle.h
index 8e514a3a073c4..34d46c80843dd 100644
--- a/content/public/test/mock_navigation_handle.h
+++ b/content/public/test/mock_navigation_handle.h
@@ -204,6 +204,7 @@ class MockNavigationHandle : public NavigationHandle {
               (const std::vector<std::string>& trials));
   MOCK_METHOD(void, SetIsOverridingUserAgent, (bool));
   MOCK_METHOD(void, SetSilentlyIgnoreErrors, ());
+  MOCK_METHOD(network::mojom::WebSandboxFlags, SandboxFlagsInherited, ());
   MOCK_METHOD(network::mojom::WebSandboxFlags, SandboxFlagsToCommit, ());
   MOCK_METHOD(bool, IsWaitingToCommit, ());
   MOCK_METHOD(bool, WasResourceHintsReceived, ());
