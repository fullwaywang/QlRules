/**
 * @name cpython-dbf52e02f18dac6f5f0a64f78932f3dc6efc056b-file_seek
 * @id cpp/cpython/dbf52e02f18dac6f5f0a64f78932f3dc6efc056b/file-seek
 * @description cpython-dbf52e02f18dac6f5f0a64f78932f3dc6efc056b-Objects/fileobject.c-file_seek CVE-2018-1000030
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vf_761, FunctionCall target_0) {
		target_0.getTarget().hasName("drop_readahead")
		and not target_0.getTarget().hasName("drop_file_readahead")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vf_761
}

predicate func_1(Parameter vf_761, Variable vPyExc_IOError, Function func, IfStmt target_1) {
		target_1.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getTarget().getName()="unlocked_count"
		and target_1.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vf_761
		and target_1.getCondition().(RelationalOperation).getLesserOperand().(Literal).getValue()="0"
		and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("PyErr_SetString")
		and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vPyExc_IOError
		and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="seek() called during concurrent operation on the same file object"
		and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(Literal).getValue()="0"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

/*predicate func_2(Variable vPyExc_IOError, RelationalOperation target_4, ExprStmt target_2) {
		target_2.getExpr().(FunctionCall).getTarget().hasName("PyErr_SetString")
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vPyExc_IOError
		and target_2.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="seek() called during concurrent operation on the same file object"
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

*/
/*predicate func_3(RelationalOperation target_4, Function func, ReturnStmt target_3) {
		target_3.getExpr().(Literal).getValue()="0"
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
		and target_3.getEnclosingFunction() = func
}

*/
predicate func_4(Parameter vf_761, RelationalOperation target_4) {
		 (target_4 instanceof GTExpr or target_4 instanceof LTExpr)
		and target_4.getGreaterOperand().(PointerFieldAccess).getTarget().getName()="unlocked_count"
		and target_4.getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vf_761
		and target_4.getLesserOperand() instanceof Literal
}

from Function func, Parameter vf_761, Variable vPyExc_IOError, FunctionCall target_0, IfStmt target_1, RelationalOperation target_4
where
func_0(vf_761, target_0)
and func_1(vf_761, vPyExc_IOError, func, target_1)
and func_4(vf_761, target_4)
and vf_761.getType().hasName("PyFileObject *")
and vPyExc_IOError.getType().hasName("PyObject *")
and vf_761.getFunction() = func
and not vPyExc_IOError.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
