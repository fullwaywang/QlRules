/**
 * @name linux-64beba0558fce7b59e9a8a7afd77290e82a22163-f2fs_getxattr
 * @id cpp/linux/64beba0558fce7b59e9a8a7afd77290e82a22163/f2fs-getxattr
 * @description linux-64beba0558fce7b59e9a8a7afd77290e82a22163-fs/f2fs/xattr.c-f2fs_getxattr CVE-2019-9245
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vbase_addr_476) {
exists(AddressOfExpr target_0 |
	target_0.getOperand().(VariableAccess).getType().hasName("int")
	and target_0.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("lookup_all_xattrs")
	and target_0.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("inode *")
	and target_0.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("page *")
	and target_0.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("int")
	and target_0.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_0.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("const char *")
	and target_0.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(5).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("f2fs_xattr_entry *")
	and target_0.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(6).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vbase_addr_476)
}

predicate func_1(Variable vbase_addr_476, Variable vpval_500, Variable verror_474, Variable vsize_475, VariableAccess target_2, AddressOfExpr target_3, ExprStmt target_4, ExprStmt target_6, ExprStmt target_7, LogicalAndExpr target_8) {
exists(IfStmt target_1 |
	target_1.getCondition().(RelationalOperation).getLesserOperand().(SubExpr).getLeftOperand().(VariableAccess).getType().hasName("int")
	and target_1.getCondition().(RelationalOperation).getLesserOperand().(SubExpr).getRightOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=vpval_500
	and target_1.getCondition().(RelationalOperation).getLesserOperand().(SubExpr).getRightOperand().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getTarget()=vbase_addr_476
	and target_1.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vsize_475
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verror_474
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-34"
	and target_1.getThen().(BlockStmt).getStmt(1).(GotoStmt).getName() ="out"
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_3.getOperand().(VariableAccess).getLocation().isBefore(target_1.getCondition().(RelationalOperation).getLesserOperand().(SubExpr).getRightOperand().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getLocation())
	and target_1.getCondition().(RelationalOperation).getLesserOperand().(SubExpr).getRightOperand().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_1.getCondition().(RelationalOperation).getLesserOperand().(SubExpr).getRightOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
	and target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation())
	and target_8.getRightOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation().isBefore(target_1.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation()))
}

predicate func_2(Parameter vbuffer_471, BlockStmt target_9, VariableAccess target_2) {
	target_2.getTarget()=vbuffer_471
	and target_2.getParent().(IfStmt).getThen()=target_9
}

predicate func_3(Variable vbase_addr_476, AddressOfExpr target_3) {
	target_3.getOperand().(VariableAccess).getTarget()=vbase_addr_476
}

predicate func_4(Variable vbase_addr_476, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("kzfree")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbase_addr_476
}

predicate func_6(Variable vpval_500, Parameter vbuffer_471, Variable vsize_475, ExprStmt target_6) {
	target_6.getExpr().(FunctionCall).getTarget().hasName("__memcpy")
	and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbuffer_471
	and target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vpval_500
	and target_6.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vsize_475
}

predicate func_7(Variable verror_474, ExprStmt target_7) {
	target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verror_474
	and target_7.getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-34"
}

predicate func_8(Parameter vbuffer_471, Variable vsize_475, LogicalAndExpr target_8) {
	target_8.getLeftOperand().(VariableAccess).getTarget()=vbuffer_471
	and target_8.getRightOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vsize_475
	and target_8.getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget().getType().hasName("size_t")
}

predicate func_9(Variable vpval_500, Parameter vbuffer_471, Variable vsize_475, BlockStmt target_9) {
	target_9.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__memcpy")
	and target_9.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbuffer_471
	and target_9.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vpval_500
	and target_9.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vsize_475
}

from Function func, Variable vbase_addr_476, Variable vpval_500, Parameter vbuffer_471, Variable verror_474, Variable vsize_475, VariableAccess target_2, AddressOfExpr target_3, ExprStmt target_4, ExprStmt target_6, ExprStmt target_7, LogicalAndExpr target_8, BlockStmt target_9
where
not func_0(vbase_addr_476)
and not func_1(vbase_addr_476, vpval_500, verror_474, vsize_475, target_2, target_3, target_4, target_6, target_7, target_8)
and func_2(vbuffer_471, target_9, target_2)
and func_3(vbase_addr_476, target_3)
and func_4(vbase_addr_476, target_4)
and func_6(vpval_500, vbuffer_471, vsize_475, target_6)
and func_7(verror_474, target_7)
and func_8(vbuffer_471, vsize_475, target_8)
and func_9(vpval_500, vbuffer_471, vsize_475, target_9)
and vbase_addr_476.getType().hasName("void *")
and vpval_500.getType().hasName("char *")
and vbuffer_471.getType().hasName("void *")
and verror_474.getType().hasName("int")
and vsize_475.getType().hasName("unsigned int")
and vbase_addr_476.(LocalVariable).getFunction() = func
and vpval_500.(LocalVariable).getFunction() = func
and vbuffer_471.getFunction() = func
and verror_474.(LocalVariable).getFunction() = func
and vsize_475.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
