/**
 * @name linux-2e7eab81425ad6c875f2ed47c0ce01e78afc38a5-nested_vmx_vmexit
 * @id cpp/linux/2e7eab81425ad6c875f2ed47c0ce01e78afc38a5/nested-vmx-vmexit
 * @description linux-2e7eab81425ad6c875f2ed47c0ce01e78afc38a5-arch/x86/kvm/vmx/nested.c-nested_vmx_vmexit CVE-2022-2196
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvcpu_4715, ExprStmt target_1, ExprStmt target_2, ValueFieldAccess target_3, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("guest_cpuid_has")
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_4715
	and target_0.getCondition().(FunctionCall).getArgument(1).(AddExpr).getValue()="602"
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("indirect_branch_prediction_barrier")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("vmcs_write32")
	and target_1.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="nr"
	and target_1.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="host"
	and target_1.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="msr_autoload"
	and target_1.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("vcpu_vmx *")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Parameter vvcpu_4715, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("vmx_switch_vmcs")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_4715
	and target_2.getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="vmcs01"
	and target_2.getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("vcpu_vmx *")
}

predicate func_3(Parameter vvcpu_4715, ValueFieldAccess target_3) {
	target_3.getTarget().getName()="tsc_offset"
	and target_3.getQualifier().(PointerFieldAccess).getTarget().getName()="arch"
	and target_3.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_4715
}

from Function func, Parameter vvcpu_4715, ExprStmt target_1, ExprStmt target_2, ValueFieldAccess target_3
where
not func_0(vvcpu_4715, target_1, target_2, target_3, func)
and func_1(func, target_1)
and func_2(vvcpu_4715, target_2)
and func_3(vvcpu_4715, target_3)
and vvcpu_4715.getType().hasName("kvm_vcpu *")
and vvcpu_4715.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
