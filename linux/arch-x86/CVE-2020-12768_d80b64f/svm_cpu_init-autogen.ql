/**
 * @name linux-d80b64ff297e40c2b6f7d7abc1b3eba70d22a068-svm_cpu_init
 * @id cpp/linux/d80b64ff297e40c2b6f7d7abc1b3eba70d22a068/svm-cpu-init
 * @description linux-d80b64ff297e40c2b6f7d7abc1b3eba70d22a068-arch/x86/kvm/svm.c-svm_cpu_init CVE-2020-12768
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
		target_0.getValue()="12"
		and not target_0.getValue()="0"
		and target_0.getParent().(UnaryMinusExpr).getParent().(AssignExpr).getRValue() instanceof UnaryMinusExpr
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vsd_1007, ExprStmt target_7, ExprStmt target_8) {
	exists(FunctionCall target_1 |
		target_1.getTarget().hasName("__free_pages")
		and target_1.getArgument(0).(PointerFieldAccess).getTarget().getName()="save_area"
		and target_1.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsd_1007
		and target_1.getArgument(1).(Literal).getValue()="0"
		and target_7.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_1.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vr_1008, UnaryMinusExpr target_2) {
		target_2.getValue()="-12"
		and target_2.getParent().(AssignExpr).getRValue() = target_2
		and target_2.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vr_1008
}

predicate func_3(Function func, DeclStmt target_3) {
		func.getEntryPoint().(BlockStmt).getAStmt()=target_3
}

predicate func_4(Variable vr_1008, DeclStmt target_3, AssignExpr target_4) {
		target_4.getLValue().(VariableAccess).getTarget()=vr_1008
		and target_4.getRValue() instanceof UnaryMinusExpr
}

predicate func_5(Variable vr_1008, FunctionCall target_9, ExprStmt target_5) {
		target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vr_1008
		and target_5.getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-12"
		and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
}

predicate func_6(Variable vr_1008, VariableAccess target_6) {
		target_6.getTarget()=vr_1008
}

predicate func_7(Variable vsd_1007, ExprStmt target_7) {
		target_7.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="cpu"
		and target_7.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsd_1007
		and target_7.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_8(Variable vsd_1007, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="save_area"
		and target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsd_1007
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("alloc_pages")
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(BitwiseOrExpr).getValue()="3264"
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(Literal).getValue()="0"
}

predicate func_9(Function func, FunctionCall target_9) {
		target_9.getTarget().hasName("svm_sev_enabled")
		and target_9.getEnclosingFunction() = func
}

from Function func, Variable vr_1008, Variable vsd_1007, Literal target_0, UnaryMinusExpr target_2, DeclStmt target_3, AssignExpr target_4, ExprStmt target_5, VariableAccess target_6, ExprStmt target_7, ExprStmt target_8, FunctionCall target_9
where
func_0(func, target_0)
and not func_1(vsd_1007, target_7, target_8)
and func_2(vr_1008, target_2)
and func_3(func, target_3)
and func_4(vr_1008, target_3, target_4)
and func_5(vr_1008, target_9, target_5)
and func_6(vr_1008, target_6)
and func_7(vsd_1007, target_7)
and func_8(vsd_1007, target_8)
and func_9(func, target_9)
and vr_1008.getType().hasName("int")
and vsd_1007.getType().hasName("svm_cpu_data *")
and vr_1008.(LocalVariable).getFunction() = func
and vsd_1007.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
