/**
 * @name linux-ab8b397d5997d8c37610252528edc54bebf9f6d3-padata_do_multithreaded
 * @id cpp/linux/ab8b397d5997d8c37610252528edc54bebf9f6d3/padata-do-multithreaded
 * @description linux-ab8b397d5997d8c37610252528edc54bebf9f6d3-kernel/padata.c-padata_do_multithreaded CVE-2024-43889
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vps_491, ForStmt target_1, ExprStmt target_2, AddressOfExpr target_3, Function func) {
exists(IfStmt target_0 |
	exists(NotExpr obj_0 | obj_0=target_0.getCondition() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().getName()="chunk_size"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vps_491
		)
	)
	and exists(ExprStmt obj_2 | obj_2=target_0.getThen() |
		exists(AssignExpr obj_3 | obj_3=obj_2.getExpr() |
			exists(ValueFieldAccess obj_4 | obj_4=obj_3.getLValue() |
				obj_4.getTarget().getName()="chunk_size"
				and obj_4.getQualifier().(VariableAccess).getTarget()=vps_491
			)
			and obj_3.getRValue().(Literal).getValue()="1"
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(MulExpr).getLeftOperand().(DivExpr).getLeftOperand().(AddExpr).getLeftOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getOperand().(VariableAccess).getLocation())
)
}

predicate func_1(Function func, ForStmt target_1) {
	exists(ExprStmt obj_0 | obj_0=target_1.getInitialization() |
		exists(AssignExpr obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getLValue().(VariableAccess).getTarget().getType().hasName("padata_work *")
			and obj_1.getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(DoStmt).getCondition().(Literal).getValue()="0"
		)
	)
	and exists(NotExpr obj_2 | obj_2=target_1.getCondition() |
		exists(EqualityOperation obj_3 | obj_3=obj_2.getOperand() |
			exists(AddressOfExpr obj_4 | obj_4=obj_3.getLeftOperand() |
				exists(PointerFieldAccess obj_5 | obj_5=obj_4.getOperand() |
					obj_5.getTarget().getName()="pw_list"
					and obj_5.getQualifier().(VariableAccess).getTarget().getType().hasName("padata_work *")
				)
			)
			and obj_3.getRightOperand().(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("list_head")
		)
	)
	and exists(AssignExpr obj_6 | obj_6=target_1.getUpdate() |
		exists(StmtExpr obj_7 | obj_7=obj_6.getRValue() |
			exists(BlockStmt obj_8 | obj_8=obj_7.getStmt() |
				obj_8.getStmt(1).(DoStmt).getCondition().(Literal).getValue()="0"
				and obj_8.getStmt(2).(ExprStmt).getExpr().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("void *")
			)
		)
		and obj_6.getLValue().(VariableAccess).getTarget().getType().hasName("padata_work *")
	)
	and exists(ExprStmt obj_9 | obj_9=target_1.getStmt() |
		exists(FunctionCall obj_10 | obj_10=obj_9.getExpr() |
			exists(AddressOfExpr obj_11 | obj_11=obj_10.getArgument(1) |
				exists(PointerFieldAccess obj_12 | obj_12=obj_11.getOperand() |
					obj_12.getTarget().getName()="pw_work"
					and obj_12.getQualifier().(VariableAccess).getTarget().getType().hasName("padata_work *")
				)
			)
			and obj_10.getTarget().hasName("queue_work")
			and obj_10.getArgument(0).(VariableAccess).getTarget().getType().hasName("workqueue_struct *")
		)
	)
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vps_491, ExprStmt target_2) {
	exists(MulExpr obj_0 | obj_0=target_2.getExpr() |
		exists(DivExpr obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(AddExpr obj_2 | obj_2=obj_1.getLeftOperand() |
				exists(ValueFieldAccess obj_3 | obj_3=obj_2.getLeftOperand() |
					obj_3.getTarget().getName()="chunk_size"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vps_491
				)
				and exists(SubExpr obj_4 | obj_4=obj_2.getRightOperand() |
					obj_4.getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
					and obj_4.getRightOperand().(Literal).getValue()="1"
				)
			)
			and obj_1.getRightOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
		)
		and obj_0.getRightOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
	)
}

predicate func_3(Variable vps_491, AddressOfExpr target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getParent() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				obj_2.getTarget().hasName("padata_work_init")
				and obj_2.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("padata_work")
				and obj_2.getArgument(3).(Literal).getValue()="1"
			)
		)
	)
	and target_3.getOperand().(VariableAccess).getTarget()=vps_491
}

from Function func, Variable vps_491, ForStmt target_1, ExprStmt target_2, AddressOfExpr target_3
where
not func_0(vps_491, target_1, target_2, target_3, func)
and func_1(func, target_1)
and func_2(vps_491, target_2)
and func_3(vps_491, target_3)
and vps_491.getType().hasName("padata_mt_job_state")
and vps_491.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
