/**
 * @name linux-b2186061d6043d6345a97100460363e990af0d46-hci_sock_setsockopt
 * @id cpp/linux/b2186061d6043d6345a97100460363e990af0d46/hci-sock-setsockopt
 * @description linux-b2186061d6043d6345a97100460363e990af0d46-net/bluetooth/hci_sock.c-hci_sock_setsockopt CVE-2024-35963
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Variable v__UNIQUE_ID_ddebug1680_2021, VariableAccess target_1) {
	target_1.getTarget()=v__UNIQUE_ID_ddebug1680_2021
	and target_1.getParent().(ValueFieldAccess).getParent().(ValueFieldAccess).getParent().(AddressOfExpr).getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("arch_static_branch_jump")
}

predicate func_2(Variable v__UNIQUE_ID_ddebug1680_2021, VariableAccess target_2) {
	target_2.getTarget()=v__UNIQUE_ID_ddebug1680_2021
	and target_2.getParent().(ValueFieldAccess).getParent().(ValueFieldAccess).getParent().(AddressOfExpr).getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("arch_static_branch")
}

predicate func_3(Variable v__UNIQUE_ID_ddebug1680_2021, VariableAccess target_3) {
	target_3.getTarget()=v__UNIQUE_ID_ddebug1680_2021
	and target_3.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__dynamic_pr_debug")
	and target_3.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="sk %p, opt %d\n"
	and target_3.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("sock *")
	and target_3.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_4(Parameter voptval_2015, Variable vopt_2019, BlockStmt target_9, FunctionCall target_4) {
	target_4.getTarget().hasName("copy_from_sockptr")
	and not target_4.getTarget().hasName("bt_copy_from_sockptr")
	and target_4.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vopt_2019
	and target_4.getArgument(1).(VariableAccess).getTarget()=voptval_2015
	and target_4.getArgument(2).(SizeofExprOperator).getValue()="2"
	and target_4.getParent().(IfStmt).getThen()=target_9
}

predicate func_7(FunctionCall target_4, Function func, BreakStmt target_7) {
	target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Function func, UnaryMinusExpr target_8) {
	target_8.getValue()="-14"
	and target_8.getParent().(AssignExpr).getRValue() = target_8
	and target_8.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Function func, BlockStmt target_9) {
	target_9.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_9.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue() instanceof UnaryMinusExpr
	and target_9.getStmt(1) instanceof BreakStmt
	and target_9.getEnclosingFunction() = func
}

from Function func, Parameter voptval_2015, Variable vopt_2019, Variable v__UNIQUE_ID_ddebug1680_2021, VariableAccess target_1, VariableAccess target_2, VariableAccess target_3, FunctionCall target_4, BreakStmt target_7, UnaryMinusExpr target_8, BlockStmt target_9
where
func_1(v__UNIQUE_ID_ddebug1680_2021, target_1)
and func_2(v__UNIQUE_ID_ddebug1680_2021, target_2)
and func_3(v__UNIQUE_ID_ddebug1680_2021, target_3)
and func_4(voptval_2015, vopt_2019, target_9, target_4)
and func_7(target_4, func, target_7)
and func_8(func, target_8)
and func_9(func, target_9)
and voptval_2015.getType().hasName("sockptr_t")
and vopt_2019.getType().hasName("u16")
and v__UNIQUE_ID_ddebug1680_2021.getType().hasName("_ddebug")
and voptval_2015.getFunction() = func
and vopt_2019.(LocalVariable).getFunction() = func
and v__UNIQUE_ID_ddebug1680_2021.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
