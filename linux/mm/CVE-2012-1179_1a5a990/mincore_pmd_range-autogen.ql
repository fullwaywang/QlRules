/**
 * @name linux-1a5a9906d4e8d1976b701f889d8f35d54b928f25-mincore_pmd_range
 * @id cpp/linux/1a5a9906d4e8d1976b701f889d8f35d54b928f25/mincore-pmd-range
 * @description linux-1a5a9906d4e8d1976b701f889d8f35d54b928f25-mm/mincore.c-mincore_pmd_range CVE-2012-1179
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vpmd_155, ExprStmt target_1, FunctionCall target_0) {
		target_0.getTarget().hasName("pmd_none_or_clear_bad")
		and not target_0.getTarget().hasName("pmd_none_or_trans_huge_or_clear_bad")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vpmd_155
		and target_0.getParent().(IfStmt).getThen()=target_1
}

predicate func_1(Function func, ExprStmt target_1) {
		target_1.getExpr().(FunctionCall).getTarget().hasName("mincore_unmapped_range")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("vm_area_struct *")
		and target_1.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned long")
		and target_1.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("unsigned long")
		and target_1.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("unsigned char *")
		and target_1.getEnclosingFunction() = func
}

from Function func, Variable vpmd_155, FunctionCall target_0, ExprStmt target_1
where
func_0(vpmd_155, target_1, target_0)
and func_1(func, target_1)
and vpmd_155.getType().hasName("pmd_t *")
and vpmd_155.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
