/**
 * @name linux-57a27e1d6a3bb9ad4efeebd3a8c71156d6207536-nl80211_trigger_scan
 * @id cpp/linux/57a27e1d6a3bb9ad4efeebd3a8c71156d6207536/nl80211-trigger-scan
 * @description linux-57a27e1d6a3bb9ad4efeebd3a8c71156d6207536-net/wireless/nl80211.c-nl80211_trigger_scan CVE-2011-2517
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vattr_3297, BlockStmt target_3, ExprStmt target_4, FunctionCall target_5) {
	exists(FunctionCall target_0 |
		target_0.getTarget().hasName("nla_len")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vattr_3297
		and target_0.getParent().(GTExpr).getGreaterOperand() instanceof ValueFieldAccess
		and target_0.getParent().(GTExpr).getLesserOperand().(Literal).getValue()="32"
		and target_0.getParent().(GTExpr).getParent().(IfStmt).getThen()=target_3
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getArgument(0).(VariableAccess).getLocation())
		and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vrequest_3296, Variable vi_3299, PointerFieldAccess target_1) {
		target_1.getTarget().getName()="ssids"
		and target_1.getQualifier().(VariableAccess).getTarget()=vrequest_3296
		and target_1.getParent().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_3299
}

predicate func_2(Variable vrequest_3296, Variable vi_3299, BlockStmt target_3, ValueFieldAccess target_2) {
		target_2.getTarget().getName()="ssid_len"
		and target_2.getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="ssids"
		and target_2.getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vrequest_3296
		and target_2.getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_3299
		and target_2.getParent().(GTExpr).getLesserOperand().(Literal).getValue()="32"
		and target_2.getParent().(GTExpr).getParent().(IfStmt).getThen()=target_3
}

predicate func_3(Function func, BlockStmt target_3) {
		target_3.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_3.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-22"
		and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vrequest_3296, Variable vattr_3297, Variable vi_3299, ExprStmt target_4) {
		target_4.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="ssid_len"
		and target_4.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="ssids"
		and target_4.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vrequest_3296
		and target_4.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_3299
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("nla_len")
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vattr_3297
}

predicate func_5(Variable vattr_3297, FunctionCall target_5) {
		target_5.getTarget().hasName("nla_data")
		and target_5.getArgument(0).(VariableAccess).getTarget()=vattr_3297
}

from Function func, Variable vrequest_3296, Variable vattr_3297, Variable vi_3299, PointerFieldAccess target_1, ValueFieldAccess target_2, BlockStmt target_3, ExprStmt target_4, FunctionCall target_5
where
not func_0(vattr_3297, target_3, target_4, target_5)
and func_1(vrequest_3296, vi_3299, target_1)
and func_2(vrequest_3296, vi_3299, target_3, target_2)
and func_3(func, target_3)
and func_4(vrequest_3296, vattr_3297, vi_3299, target_4)
and func_5(vattr_3297, target_5)
and vrequest_3296.getType().hasName("cfg80211_scan_request *")
and vattr_3297.getType().hasName("nlattr *")
and vi_3299.getType().hasName("int")
and vrequest_3296.(LocalVariable).getFunction() = func
and vattr_3297.(LocalVariable).getFunction() = func
and vi_3299.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
