/**
 * @name linux-cacdb14b1c8d3804a3a7d31773bc7569837b71a4-roccat_report_event
 * @id cpp/linux/cacdb14b1c8d3804a3a7d31773bc7569837b71a4/roccat-report-event
 * @description linux-cacdb14b1c8d3804a3a7d31773bc7569837b71a4-drivers/hid/hid-roccat.c-roccat_report_event CVE-2022-41850
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdevice_249, ExprStmt target_2, ExprStmt target_3, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="cbuf_lock"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdevice_249
	and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vdevice_249, ExprStmt target_4, EqualityOperation target_5, AddressOfExpr target_6, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="cbuf_lock"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdevice_249
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_4.getLocation())
	and target_5.getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_6.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vdevice_249, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("roccat_report *")
	and target_2.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="cbuf"
	and target_2.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdevice_249
	and target_2.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getTarget().getName()="cbuf_end"
	and target_2.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdevice_249
}

predicate func_3(Variable vdevice_249, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("uint8_t *")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("kmemdup")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("const u8 *")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="report_size"
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdevice_249
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(BitwiseOrExpr).getValue()="2592"
}

predicate func_4(Variable vdevice_249, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("__wake_up")
	and target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="wait"
	and target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdevice_249
	and target_4.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="1"
	and target_4.getExpr().(FunctionCall).getArgument(2).(Literal).getValue()="1"
	and target_4.getExpr().(FunctionCall).getArgument(3).(Literal).getValue()="0"
}

predicate func_5(Variable vdevice_249, EqualityOperation target_5) {
	target_5.getLeftOperand().(PointerFieldAccess).getTarget().getName()="cbuf_start"
	and target_5.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("roccat_reader *")
	and target_5.getRightOperand().(PointerFieldAccess).getTarget().getName()="cbuf_end"
	and target_5.getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdevice_249
}

predicate func_6(Variable vdevice_249, AddressOfExpr target_6) {
	target_6.getOperand().(PointerFieldAccess).getTarget().getName()="wait"
	and target_6.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdevice_249
}

from Function func, Variable vdevice_249, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, EqualityOperation target_5, AddressOfExpr target_6
where
not func_0(vdevice_249, target_2, target_3, func)
and not func_1(vdevice_249, target_4, target_5, target_6, func)
and func_2(vdevice_249, target_2)
and func_3(vdevice_249, target_3)
and func_4(vdevice_249, target_4)
and func_5(vdevice_249, target_5)
and func_6(vdevice_249, target_6)
and vdevice_249.getType().hasName("roccat_device *")
and vdevice_249.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
