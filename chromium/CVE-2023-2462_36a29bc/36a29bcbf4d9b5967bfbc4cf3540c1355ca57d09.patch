commit 36a29bcbf4d9b5967bfbc4cf3540c1355ca57d09	36a29bcbf4d9b5967bfbc4cf3540c1355ca57d09
Author: Sina Firoozabadi <sinafirooz@google.com>
Date:   Wed Mar 8 02:29:36 2023 +0000

    Drop Web Bluetooth mojoms from a renderer process of an opaque origin
    
    The Web Bluetooth API tracks permissions using the origin of the
    top-level document in the frame tree. If a document has an opaque origin
    then the requests to access Web Bluetooth get rejected on renderer side.
    
    To add a second layer of security in case of the renderer process being
    compromised, responding to the Web Bluetooth mojoms from such renderer
    process should be avoided.
    
    Disable-Rts: True
    Bug: 1375133
    Change-Id: Icbc6da4127e9c10f659d43e64cd5d7d1e207d02f
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4114125
    Reviewed-by: Reilly Grant <reillyg@chromium.org>
    Commit-Queue: Sina Firoozabadi <sinafirooz@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1114352}

diff --git a/content/browser/bluetooth/frame_connected_bluetooth_devices_unittest.cc b/content/browser/bluetooth/frame_connected_bluetooth_devices_unittest.cc
index dc4d7e3760653..b833f5a3b0e9e 100644
--- a/content/browser/bluetooth/frame_connected_bluetooth_devices_unittest.cc
+++ b/content/browser/bluetooth/frame_connected_bluetooth_devices_unittest.cc
@@ -81,6 +81,8 @@ class FrameConnectedBluetoothDevicesTest
 
     // Create subframe to simulate two maps on the same WebContents.
     contents()->GetPrimaryMainFrame()->InitializeRenderFrameIfNeeded();
+    contents()->GetPrimaryMainFrame()->SetLastCommittedOriginForTesting(
+        url::Origin::Create(GURL("https://blah.com")));
     TestRenderFrameHost* subframe =
         contents()->GetPrimaryMainFrame()->AppendChild("bluetooth_frame");
     subframe->InitializeRenderFrameIfNeeded();
diff --git a/content/browser/bluetooth/web_bluetooth_service_impl.cc b/content/browser/bluetooth/web_bluetooth_service_impl.cc
index afb4a5de57893..6f004befe79e2 100644
--- a/content/browser/bluetooth/web_bluetooth_service_impl.cc
+++ b/content/browser/bluetooth/web_bluetooth_service_impl.cc
@@ -84,7 +84,7 @@ constexpr char kScanClientNameRequestLeScan[] = "Web Bluetooth requestLeScan()";
 // The renderer performs its own checks so a request that gets to the browser
 // process indicates some failure to check for fenced frames.
 const char kFencedFrameError[] =
-    "Use Web Bluetooth API is blocked in a fenced frame tree.";
+    "Use of Web Bluetooth API is blocked in a <fencedframe> tree.";
 
 blink::mojom::WebBluetoothResult TranslateGATTErrorAndRecord(
     GattErrorCode error_code,
@@ -547,6 +547,14 @@ WebBluetoothServiceImpl* WebBluetoothServiceImpl::Create(
     return nullptr;
   }
 
+  if (render_frame_host->GetOutermostMainFrame()
+          ->GetLastCommittedOrigin()
+          .opaque()) {
+    mojo::ReportBadMessage(
+        "Web Bluetooth is not allowed from an opaque origin.");
+    return nullptr;
+  }
+
   return new WebBluetoothServiceImpl(*render_frame_host, std::move(receiver));
 }
 
diff --git a/content/browser/bluetooth/web_bluetooth_service_impl.h b/content/browser/bluetooth/web_bluetooth_service_impl.h
index 04d84453d6a18..0d13363e9b48e 100644
--- a/content/browser/bluetooth/web_bluetooth_service_impl.h
+++ b/content/browser/bluetooth/web_bluetooth_service_impl.h
@@ -57,7 +57,7 @@ bool HasValidFilter(
         std::vector<blink::mojom::WebBluetoothLeScanFilterPtr>>& filters);
 
 // Implementation of Mojo WebBluetoothService located in
-// third_party/WebKit/public/platform/modules/bluetooth.
+// third_party/blink/renderer/modules/bluetooth.
 // It handles Web Bluetooth API requests coming from Blink / renderer
 // process and uses the platform abstraction of device/bluetooth.
 // WebBluetoothServiceImpl is not thread-safe and should be created on the
diff --git a/content/browser/bluetooth/web_bluetooth_service_impl_unittest.cc b/content/browser/bluetooth/web_bluetooth_service_impl_unittest.cc
index 878441b5339d2..31e67783d70b5 100644
--- a/content/browser/bluetooth/web_bluetooth_service_impl_unittest.cc
+++ b/content/browser/bluetooth/web_bluetooth_service_impl_unittest.cc
@@ -21,6 +21,8 @@
 #include "content/public/common/content_client.h"
 #include "content/public/common/content_features.h"
 #include "content/public/test/navigation_simulator.h"
+#include "content/public/test/test_browser_context.h"
+#include "content/public/test/test_web_contents_factory.h"
 #include "content/test/test_render_view_host.h"
 #include "content/test/test_web_contents.h"
 #include "device/bluetooth/public/cpp/bluetooth_uuid.h"
@@ -32,6 +34,8 @@
 #include "mojo/public/cpp/bindings/associated_receiver.h"
 #include "mojo/public/cpp/bindings/pending_associated_receiver.h"
 #include "mojo/public/cpp/bindings/pending_associated_remote.h"
+#include "mojo/public/cpp/test_support/fake_message_dispatch_context.h"
+#include "mojo/public/cpp/test_support/test_utils.h"
 #include "testing/gmock/include/gmock/gmock.h"
 #include "testing/gtest/include/gtest/gtest.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
@@ -843,7 +847,7 @@ TEST_F(WebBluetoothServiceImplTest,
   // BluetoothRemoteGattCharacteristic::ValueCallback callback argument is that
   // when an error occurs, value must be ignored. This test verifies that
   // WebBluetoothServiceImpl::OnCharacteristicReadValue honors that contract
-  // and will not pass a value to it's callback
+  // and will not pass a value to its callback
   // (a RemoteCharacteristicReadValueCallback instance) when an error occurs
   // with a non-empty value array.
   const std::vector<uint8_t> read_error_value = {1, 2, 3};
@@ -1035,4 +1039,27 @@ TEST_F(WebBluetoothServiceImplTest, DeviceDisconnected) {
             blink::mojom::WebBluetoothResult::NO_SERVICES_FOUND);
 }
 
+TEST_F(WebBluetoothServiceImplTest, RejectOpaqueOrigin) {
+  // Create a fake dispatch context to trigger a bad message in.
+  mojo::FakeMessageDispatchContext fake_dispatch_context;
+  mojo::test::BadMessageObserver bad_message_observer;
+
+  auto response_headers =
+      base::MakeRefCounted<net::HttpResponseHeaders>(std::string());
+  response_headers->SetHeader("Content-Security-Policy",
+                              "sandbox allow-scripts");
+  auto navigation_simulator = NavigationSimulator::CreateRendererInitiated(
+      GURL("http://whatever.com"), main_test_rfh());
+  navigation_simulator->SetResponseHeaders(response_headers);
+  navigation_simulator->Start();
+  navigation_simulator->Commit();
+
+  mojo::Remote<blink::mojom::WebBluetoothService> service;
+  contents()->GetPrimaryMainFrame()->CreateWebBluetoothServiceForTesting(
+      service.BindNewPipeAndPassReceiver());
+
+  EXPECT_EQ(bad_message_observer.WaitForBadMessage(),
+            "Web Bluetooth is not allowed from an opaque origin.");
+}
+
 }  // namespace content
