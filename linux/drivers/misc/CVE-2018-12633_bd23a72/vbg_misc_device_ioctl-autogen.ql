/**
 * @name linux-bd23a7269834dc7c1f93e83535d16ebc44b75eba-vbg_misc_device_ioctl
 * @id cpp/linux/bd23a7269834dc7c1f93e83535d16ebc44b75eba/vbg-misc-device-ioctl
 * @description linux-bd23a7269834dc7c1f93e83535d16ebc44b75eba-drivers/virt/vboxguest/vboxguest_linux.c-vbg_misc_device_ioctl CVE-2018-12633
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vhdr_89, Variable vbuf_92, ValueFieldAccess target_7, PointerArithmeticOperation target_8, Function func) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vbuf_92
		and target_0.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vhdr_89
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_7.getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation())
		and target_0.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getLocation().isBefore(target_8.getAnOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vbuf_92, Parameter varg_85, BlockStmt target_9, NotExpr target_10, FunctionCall target_11) {
	exists(PointerArithmeticOperation target_1 |
		target_1.getAnOperand().(VariableAccess).getTarget()=vbuf_92
		and target_1.getAnOperand().(SizeofExprOperator).getValue()="24"
		and target_1.getParent().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbuf_92
		and target_1.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=varg_85
		and target_1.getParent().(FunctionCall).getArgument(2) instanceof ValueFieldAccess
		and target_1.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_9
		and target_10.getOperand().(VariableAccess).getLocation().isBefore(target_1.getAnOperand().(VariableAccess).getLocation())
		and target_1.getAnOperand().(VariableAccess).getLocation().isBefore(target_11.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable vbuf_92, Parameter varg_85, BlockStmt target_9, FunctionCall target_12, EqualityOperation target_13) {
	exists(PointerArithmeticOperation target_2 |
		target_2.getAnOperand().(VariableAccess).getTarget()=varg_85
		and target_2.getAnOperand().(SizeofExprOperator).getValue()="24"
		and target_2.getParent().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbuf_92
		and target_2.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=varg_85
		and target_2.getParent().(FunctionCall).getArgument(2) instanceof ValueFieldAccess
		and target_2.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_9
		and target_12.getArgument(1).(VariableAccess).getLocation().isBefore(target_2.getAnOperand().(VariableAccess).getLocation())
		and target_2.getAnOperand().(VariableAccess).getLocation().isBefore(target_13.getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Variable vbuf_92, Parameter varg_85, BlockStmt target_9) {
	exists(SubExpr target_3 |
		target_3.getLeftOperand() instanceof ValueFieldAccess
		and target_3.getRightOperand().(SizeofExprOperator).getValue()="24"
		and target_3.getParent().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbuf_92
		and target_3.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=varg_85
		and target_3.getParent().(FunctionCall).getArgument(2) instanceof ValueFieldAccess
		and target_3.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_9)
}

/*predicate func_4(Variable vhdr_89, ValueFieldAccess target_4) {
		target_4.getTarget().getName()="size_in"
		and target_4.getQualifier().(VariableAccess).getTarget()=vhdr_89
}

*/
predicate func_5(Variable vhdr_89, Variable vbuf_92, Parameter varg_85, BlockStmt target_9, VariableAccess target_5) {
		target_5.getTarget()=vbuf_92
		and target_5.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=varg_85
		and target_5.getParent().(FunctionCall).getArgument(2).(ValueFieldAccess).getTarget().getName()="size_in"
		and target_5.getParent().(FunctionCall).getArgument(2).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vhdr_89
		and target_5.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_9
}

/*predicate func_6(Variable vhdr_89, Variable vbuf_92, Parameter varg_85, BlockStmt target_9, VariableAccess target_6) {
		target_6.getTarget()=varg_85
		and target_6.getParent().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbuf_92
		and target_6.getParent().(FunctionCall).getArgument(2).(ValueFieldAccess).getTarget().getName()="size_in"
		and target_6.getParent().(FunctionCall).getArgument(2).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vhdr_89
		and target_6.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_9
}

*/
predicate func_7(Variable vhdr_89, ValueFieldAccess target_7) {
		target_7.getTarget().getName()="size_out"
		and target_7.getQualifier().(VariableAccess).getTarget()=vhdr_89
}

predicate func_8(Variable vhdr_89, Variable vbuf_92, PointerArithmeticOperation target_8) {
		target_8.getAnOperand().(VariableAccess).getTarget()=vbuf_92
		and target_8.getAnOperand().(ValueFieldAccess).getTarget().getName()="size_in"
		and target_8.getAnOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vhdr_89
}

predicate func_9(Function func, BlockStmt target_9) {
		target_9.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_9.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-14"
		and target_9.getEnclosingFunction() = func
}

predicate func_10(Variable vbuf_92, NotExpr target_10) {
		target_10.getOperand().(VariableAccess).getTarget()=vbuf_92
}

predicate func_11(Variable vbuf_92, Parameter varg_85, FunctionCall target_11) {
		target_11.getTarget().hasName("copy_from_user")
		and target_11.getArgument(0).(VariableAccess).getTarget()=vbuf_92
		and target_11.getArgument(1).(VariableAccess).getTarget()=varg_85
		and target_11.getArgument(2) instanceof ValueFieldAccess
}

predicate func_12(Variable vhdr_89, Parameter varg_85, FunctionCall target_12) {
		target_12.getTarget().hasName("copy_from_user")
		and target_12.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vhdr_89
		and target_12.getArgument(1).(VariableAccess).getTarget()=varg_85
		and target_12.getArgument(2).(SizeofExprOperator).getValue()="24"
}

predicate func_13(Variable vbuf_92, Parameter varg_85, EqualityOperation target_13) {
		target_13.getAnOperand().(FunctionCall).getTarget().hasName("copy_to_user")
		and target_13.getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=varg_85
		and target_13.getAnOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vbuf_92
		and target_13.getAnOperand().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("size_t")
		and target_13.getAnOperand().(Literal).getValue()="0"
}

from Function func, Variable vhdr_89, Variable vbuf_92, Parameter varg_85, VariableAccess target_5, ValueFieldAccess target_7, PointerArithmeticOperation target_8, BlockStmt target_9, NotExpr target_10, FunctionCall target_11, FunctionCall target_12, EqualityOperation target_13
where
not func_0(vhdr_89, vbuf_92, target_7, target_8, func)
and not func_1(vbuf_92, varg_85, target_9, target_10, target_11)
and not func_2(vbuf_92, varg_85, target_9, target_12, target_13)
and not func_3(vbuf_92, varg_85, target_9)
and func_5(vhdr_89, vbuf_92, varg_85, target_9, target_5)
and func_7(vhdr_89, target_7)
and func_8(vhdr_89, vbuf_92, target_8)
and func_9(func, target_9)
and func_10(vbuf_92, target_10)
and func_11(vbuf_92, varg_85, target_11)
and func_12(vhdr_89, varg_85, target_12)
and func_13(vbuf_92, varg_85, target_13)
and vhdr_89.getType().hasName("vbg_ioctl_hdr")
and vbuf_92.getType().hasName("void *")
and varg_85.getType().hasName("unsigned long")
and vhdr_89.(LocalVariable).getFunction() = func
and vbuf_92.(LocalVariable).getFunction() = func
and varg_85.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
