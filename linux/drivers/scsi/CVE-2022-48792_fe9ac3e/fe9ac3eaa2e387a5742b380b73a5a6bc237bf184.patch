commit fe9ac3eaa2e387a5742b380b73a5a6bc237bf184
Author: John Garry <john.garry@huawei.com>
Date:   Thu Jan 27 21:12:52 2022 +0800

    scsi: pm8001: Fix use-after-free for aborted SSP/STP sas_task
    
    [ Upstream commit df7abcaa1246e2537ab4016077b5443bb3c09378 ]
    
    Currently a use-after-free may occur if a sas_task is aborted by the upper
    layer before we handle the I/O completion in mpi_ssp_completion() or
    mpi_sata_completion().
    
    In this case, the following are the two steps in handling those I/O
    completions:
    
     - Call complete() to inform the upper layer handler of completion of
       the I/O.
    
     - Release driver resources associated with the sas_task in
       pm8001_ccb_task_free() call.
    
    When complete() is called, the upper layer may free the sas_task. As such,
    we should not touch the associated sas_task afterwards, but we do so in the
    pm8001_ccb_task_free() call.
    
    Fix by swapping the complete() and pm8001_ccb_task_free() calls ordering.
    
    Link: https://lore.kernel.org/r/1643289172-165636-4-git-send-email-john.garry@huawei.com
    Reviewed-by: Damien Le Moal <damien.lemoal@opensource.wdc.com>
    Acked-by: Jack Wang <jinpu.wang@ionos.com>
    Signed-off-by: John Garry <john.garry@huawei.com>
    Signed-off-by: Martin K. Petersen <martin.petersen@oracle.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/drivers/scsi/pm8001/pm80xx_hwi.c b/drivers/scsi/pm8001/pm80xx_hwi.c
index b22a8ab754fa..2a3ce4680734 100644
--- a/drivers/scsi/pm8001/pm80xx_hwi.c
+++ b/drivers/scsi/pm8001/pm80xx_hwi.c
@@ -2133,9 +2133,9 @@ mpi_ssp_completion(struct pm8001_hba_info *pm8001_ha , void *piomb)
 		pm8001_dbg(pm8001_ha, FAIL,
 			   "task 0x%p done with io_status 0x%x resp 0x%x stat 0x%x but aborted by upper layer!\n",
 			   t, status, ts->resp, ts->stat);
+		pm8001_ccb_task_free(pm8001_ha, t, ccb, tag);
 		if (t->slow_task)
 			complete(&t->slow_task->completion);
-		pm8001_ccb_task_free(pm8001_ha, t, ccb, tag);
 	} else {
 		spin_unlock_irqrestore(&t->task_state_lock, flags);
 		pm8001_ccb_task_free(pm8001_ha, t, ccb, tag);
@@ -2726,9 +2726,9 @@ mpi_sata_completion(struct pm8001_hba_info *pm8001_ha, void *piomb)
 		pm8001_dbg(pm8001_ha, FAIL,
 			   "task 0x%p done with io_status 0x%x resp 0x%x stat 0x%x but aborted by upper layer!\n",
 			   t, status, ts->resp, ts->stat);
+		pm8001_ccb_task_free(pm8001_ha, t, ccb, tag);
 		if (t->slow_task)
 			complete(&t->slow_task->completion);
-		pm8001_ccb_task_free(pm8001_ha, t, ccb, tag);
 	} else {
 		spin_unlock_irqrestore(&t->task_state_lock, flags);
 		pm8001_ccb_task_free_done(pm8001_ha, t, ccb, tag);
