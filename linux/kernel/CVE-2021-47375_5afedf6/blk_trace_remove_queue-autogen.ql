/**
 * @name linux-5afedf670caf30a2b5a52da96eb7eac7dee6a9c9-blk_trace_remove_queue
 * @id cpp/linux/5afedf670caf30a2b5a52da96eb7eac7dee6a9c9/blk-trace-remove-queue
 * @description linux-5afedf670caf30a2b5a52da96eb7eac7dee6a9c9-kernel/trace/blktrace.c-blk_trace_remove_queue CVE-2021-47375
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vbt_1601, ExprStmt target_1, EqualityOperation target_2, ExprStmt target_3, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="trace_state"
	and target_0.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbt_1601
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="trace_state"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbt_1601
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_lock_irq")
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("spinlock_t")
	and target_0.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("list_del_init")
	and target_0.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="running_list"
	and target_0.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbt_1601
	and target_0.getThen().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock_irq")
	and target_0.getThen().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("spinlock_t")
	and target_0.getThen().(BlockStmt).getStmt(4).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("relay_flush")
	and target_0.getThen().(BlockStmt).getStmt(4).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="rchan"
	and target_0.getThen().(BlockStmt).getStmt(4).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbt_1601
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getLeftOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("put_probe_ref")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vbt_1601, EqualityOperation target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget()=vbt_1601
	and target_2.getRightOperand().(Literal).getValue()="0"
}

predicate func_3(Variable vbt_1601, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("blk_trace_free")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbt_1601
}

from Function func, Variable vbt_1601, ExprStmt target_1, EqualityOperation target_2, ExprStmt target_3
where
not func_0(vbt_1601, target_1, target_2, target_3, func)
and func_1(func, target_1)
and func_2(vbt_1601, target_2)
and func_3(vbt_1601, target_3)
and vbt_1601.getType().hasName("blk_trace *")
and vbt_1601.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
