/**
 * @name linux-55349790d7cbf0d381873a7ece1dcafcffd4aaa9-udp_queue_rcv_skb
 * @id cpp/linux/55349790d7cbf0d381873a7ece1dcafcffd4aaa9/udp-queue-rcv-skb
 * @description linux-55349790d7cbf0d381873a7ece1dcafcffd4aaa9-net/ipv4/udp.c-udp_queue_rcv_skb CVE-2010-4251
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vskb_1286, Parameter vsk_1286, ExprStmt target_5, ExprStmt target_6, AddressOfExpr target_7, FunctionCall target_0) {
		target_0.getTarget().hasName("sk_add_backlog")
		and not target_0.getTarget().hasName("spin_unlock")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vsk_1286
		and target_0.getArgument(1).(VariableAccess).getTarget()=vskb_1286
		and target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_0.getArgument(1).(VariableAccess).getLocation())
		and target_0.getArgument(1).(VariableAccess).getLocation().isBefore(target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_7.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_1(Parameter vskb_1286, Parameter vsk_1286, NotExpr target_8, ExprStmt target_5, ExprStmt target_6, AddressOfExpr target_7) {
	exists(IfStmt target_1 |
		target_1.getCondition().(FunctionCall).getTarget().hasName("sk_add_backlog_limited")
		and target_1.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_1286
		and target_1.getCondition().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vskb_1286
		and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
		and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="slock"
		and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
		and target_1.getParent().(IfStmt).getCondition()=target_8
		and target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_1.getCondition().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
		and target_1.getCondition().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_1.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_7.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

/*predicate func_2(Parameter vsk_1286, ExprStmt target_5) {
	exists(AddressOfExpr target_2 |
		target_2.getOperand().(ValueFieldAccess).getTarget().getName()="slock"
		and target_2.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
		and target_2.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_1286
		and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
		and target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_2.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

*/
predicate func_3(Parameter vsk_1286, VariableAccess target_3) {
		target_3.getTarget()=vsk_1286
		and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_4(Parameter vskb_1286, VariableAccess target_4) {
		target_4.getTarget()=vskb_1286
		and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_5(Parameter vskb_1286, Parameter vsk_1286, ExprStmt target_5) {
		target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("__udp_queue_rcv_skb")
		and target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_1286
		and target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vskb_1286
}

predicate func_6(Parameter vskb_1286, ExprStmt target_6) {
		target_6.getExpr().(FunctionCall).getTarget().hasName("kfree_skb")
		and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskb_1286
}

predicate func_7(Parameter vsk_1286, AddressOfExpr target_7) {
		target_7.getOperand().(ValueFieldAccess).getTarget().getName()="slock"
		and target_7.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
		and target_7.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_1286
		and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
}

predicate func_8(Parameter vsk_1286, NotExpr target_8) {
		target_8.getOperand().(ValueFieldAccess).getTarget().getName()="owned"
		and target_8.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
		and target_8.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_1286
}

from Function func, Parameter vskb_1286, Parameter vsk_1286, FunctionCall target_0, VariableAccess target_3, VariableAccess target_4, ExprStmt target_5, ExprStmt target_6, AddressOfExpr target_7, NotExpr target_8
where
func_0(vskb_1286, vsk_1286, target_5, target_6, target_7, target_0)
and not func_1(vskb_1286, vsk_1286, target_8, target_5, target_6, target_7)
and func_3(vsk_1286, target_3)
and func_4(vskb_1286, target_4)
and func_5(vskb_1286, vsk_1286, target_5)
and func_6(vskb_1286, target_6)
and func_7(vsk_1286, target_7)
and func_8(vsk_1286, target_8)
and vskb_1286.getType().hasName("sk_buff *")
and vsk_1286.getType().hasName("sock *")
and vskb_1286.getFunction() = func
and vsk_1286.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
