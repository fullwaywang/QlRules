commit 9482ab4540f5bcc869b44c067ae99b5fca16bd07
Author: NeilBrown <neilb@suse.de>
Date:   Mon Jan 17 16:36:53 2022 +1100

    SUNRPC: lock against ->sock changing during sysfs read
    
    [ Upstream commit b49ea673e119f59c71645e2f65b3ccad857c90ee ]
    
    ->sock can be set to NULL asynchronously unless ->recv_mutex is held.
    So it is important to hold that mutex.  Otherwise a sysfs read can
    trigger an oops.
    Commit 17f09d3f619a ("SUNRPC: Check if the xprt is connected before
    handling sysfs reads") appears to attempt to fix this problem, but it
    only narrows the race window.
    
    Fixes: 17f09d3f619a ("SUNRPC: Check if the xprt is connected before handling sysfs reads")
    Fixes: a8482488a7d6 ("SUNRPC query transport's source port")
    Signed-off-by: NeilBrown <neilb@suse.de>
    Signed-off-by: Anna Schumaker <Anna.Schumaker@Netapp.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/net/sunrpc/sysfs.c b/net/sunrpc/sysfs.c
index 8f309bcdf84f..0c28280dd3bc 100644
--- a/net/sunrpc/sysfs.c
+++ b/net/sunrpc/sysfs.c
@@ -115,11 +115,14 @@ static ssize_t rpc_sysfs_xprt_srcaddr_show(struct kobject *kobj,
 	}
 
 	sock = container_of(xprt, struct sock_xprt, xprt);
-	if (kernel_getsockname(sock->sock, (struct sockaddr *)&saddr) < 0)
+	mutex_lock(&sock->recv_mutex);
+	if (sock->sock == NULL ||
+	    kernel_getsockname(sock->sock, (struct sockaddr *)&saddr) < 0)
 		goto out;
 
 	ret = sprintf(buf, "%pISc\n", &saddr);
 out:
+	mutex_unlock(&sock->recv_mutex);
 	xprt_put(xprt);
 	return ret + 1;
 }
diff --git a/net/sunrpc/xprtsock.c b/net/sunrpc/xprtsock.c
index d8ee06a9650a..03770e56df36 100644
--- a/net/sunrpc/xprtsock.c
+++ b/net/sunrpc/xprtsock.c
@@ -1641,7 +1641,12 @@ static int xs_get_srcport(struct sock_xprt *transport)
 unsigned short get_srcport(struct rpc_xprt *xprt)
 {
 	struct sock_xprt *sock = container_of(xprt, struct sock_xprt, xprt);
-	return xs_sock_getport(sock->sock);
+	unsigned short ret = 0;
+	mutex_lock(&sock->recv_mutex);
+	if (sock->sock)
+		ret = xs_sock_getport(sock->sock);
+	mutex_unlock(&sock->recv_mutex);
+	return ret;
 }
 EXPORT_SYMBOL(get_srcport);
 
