/**
 * @name chromium-dc0a8d8a80e653e13af8ff8cab0bf44b0f0baad0-blink__USB__requestDevice
 * @id cpp/chromium/dc0a8d8a80e653e13af8ff8cab0bf44b0f0baad0/blinkusbrequestdevice
 * @description chromium-dc0a8d8a80e653e13af8ff8cab0bf44b0f0baad0-third_party/blink/renderer/modules/webusb/usb.cc-blink__USB__requestDevice CVE-2023-2462
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(BlockStmt target_8, Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("IsFeatureEnabled")
	and not target_0.getTarget().hasName("ShouldBlockUsbServiceCall")
	and target_0.getQualifier() instanceof ThisExpr
	and target_0.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_8
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func) {
exists(FunctionCall target_1 |
	exists(FunctionCall obj_0 | obj_0=target_1.getQualifier() |
		obj_0.getTarget().hasName("GetSupplementable")
		and obj_0.getQualifier() instanceof ThisExpr
	)
	and target_1.getTarget().hasName("DomWindow")
	and target_1.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(Function func) {
exists(FunctionCall target_2 |
	target_2.getTarget().hasName("GetExecutionContext")
	and target_2.getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_2.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
	and target_2.getEnclosingFunction() = func
)
}

predicate func_3(Parameter vexception_state_145, ExprStmt target_9) {
exists(AddressOfExpr target_3 |
	target_3.getOperand().(VariableAccess).getTarget()=vexception_state_145
	and target_3.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
	and target_3.getOperand().(VariableAccess).getLocation().isBefore(target_9.getExpr().(FunctionCall).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_4(Function func, ThisExpr target_4) {
	target_4.getType() instanceof PointerType
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Parameter vexception_state_145, VariableAccess target_5) {
	target_5.getTarget()=vexception_state_145
}

predicate func_6(BlockStmt target_8, Function func, NotExpr target_6) {
	target_6.getOperand() instanceof FunctionCall
	and target_6.getParent().(IfStmt).getThen()=target_8
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Parameter vexception_state_145, Variable vkFeaturePolicyBlocked, NotExpr target_6, ExprStmt target_7) {
	exists(FunctionCall obj_0 | obj_0=target_7.getExpr() |
		obj_0.getTarget().hasName("ThrowSecurityError")
		and obj_0.getQualifier().(VariableAccess).getTarget()=vexception_state_145
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vkFeaturePolicyBlocked
	)
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_8(Function func, BlockStmt target_8) {
	target_8.getStmt(0) instanceof ExprStmt
	and target_8.getStmt(1).(ReturnStmt).getExpr().(ConstructorCall).getType() instanceof VoidType
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Parameter vexception_state_145, ExprStmt target_9) {
	exists(FunctionCall obj_0 | obj_0=target_9.getExpr() |
		obj_0.getTarget().hasName("ThrowSecurityError")
		and obj_0.getQualifier().(VariableAccess).getTarget()=vexception_state_145
		and obj_0.getArgument(0).(StringLiteral).getValue()="Must be handling a user gesture to show a permission request."
	)
}

from Function func, Parameter vexception_state_145, Variable vkFeaturePolicyBlocked, FunctionCall target_0, ThisExpr target_4, VariableAccess target_5, NotExpr target_6, ExprStmt target_7, BlockStmt target_8, ExprStmt target_9
where
func_0(target_8, func, target_0)
and not func_1(func)
and not func_2(func)
and not func_3(vexception_state_145, target_9)
and func_4(func, target_4)
and func_5(vexception_state_145, target_5)
and func_6(target_8, func, target_6)
and func_7(vexception_state_145, vkFeaturePolicyBlocked, target_6, target_7)
and func_8(func, target_8)
and func_9(vexception_state_145, target_9)
and vexception_state_145.getType().hasName("ExceptionState &")
and vkFeaturePolicyBlocked.getType() instanceof ArrayType
and vexception_state_145.getFunction() = func
and not vkFeaturePolicyBlocked.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
