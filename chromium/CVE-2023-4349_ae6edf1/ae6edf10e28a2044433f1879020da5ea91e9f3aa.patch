commit ae6edf10e28a2044433f1879020da5ea91e9f3aa	ae6edf10e28a2044433f1879020da5ea91e9f3aa
Author: Sebastien Lalancette <seblalancette@chromium.org>
Date:   Wed Jul 26 19:31:30 2023 +0000

    [DTC] Make SigningKeyPair Ref Counted
    
    In the current implementation, the Device Trust SigningKeyPair instance
    was held in a unique_ptr inside the DeviceTrustKeyManager, which is a
    browser-level object. However, in the shutdown sequence, it gets deleted
    before the ThreadPool. This means that there is a (very slim)
    possibility that any task running on the ThreadPool making use of that
    key could run into a UAF problem.
    
    Since the key is expensive to load or copy, the best way forward it to
    convert this unique_ptr to a thread-safe ref-counted scoped_refptr.
    
    Fixed: 1458303,b:293289710
    Change-Id: I035f9447c6380e988fc4f796fe27740f604d997e
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4722086
    Commit-Queue: SÃ©bastien Lalancette <seblalancette@chromium.org>
    Code-Coverage: Findit <findit-for-me@appspot.gserviceaccount.com>
    Reviewed-by: Hamda Mare <hmare@google.com>
    Cr-Commit-Position: refs/heads/main@{#1175607}

diff --git a/chrome/browser/enterprise/connectors/device_trust/attestation/browser/device_attester_unittest.cc b/chrome/browser/enterprise/connectors/device_trust/attestation/browser/device_attester_unittest.cc
index 37b26dfcd1607..6e80455ecd094 100644
--- a/chrome/browser/enterprise/connectors/device_trust/attestation/browser/device_attester_unittest.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/attestation/browser/device_attester_unittest.cc
@@ -4,6 +4,7 @@
 
 #include "chrome/browser/enterprise/connectors/device_trust/attestation/browser/device_attester.h"
 
+#include "base/memory/scoped_refptr.h"
 #include "base/run_loop.h"
 #include "base/test/task_environment.h"
 #include "base/test/test_future.h"
@@ -86,7 +87,7 @@ class DeviceAttesterTest : public testing::Test {
 
   base::test::SingleThreadTaskEnvironment task_environment_;
   test::ScopedKeyPersistenceDelegateFactory persistence_delegate_factory_;
-  std::unique_ptr<SigningKeyPair> test_key_pair_;
+  scoped_refptr<SigningKeyPair> test_key_pair_;
   absl::optional<std::vector<uint8_t>> signature;
   std::string public_key_;
   testing::StrictMock<test::MockDeviceTrustKeyManager> mock_key_manager_;
diff --git a/chrome/browser/enterprise/connectors/device_trust/attestation/desktop/desktop_attestation_service_unittest.cc b/chrome/browser/enterprise/connectors/device_trust/attestation/desktop/desktop_attestation_service_unittest.cc
index f1ecbf15f356a..a147779bda33a 100644
--- a/chrome/browser/enterprise/connectors/device_trust/attestation/desktop/desktop_attestation_service_unittest.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/attestation/desktop/desktop_attestation_service_unittest.cc
@@ -9,6 +9,7 @@
 #include "base/base64.h"
 #include "base/command_line.h"
 #include "base/json/json_reader.h"
+#include "base/memory/scoped_refptr.h"
 #include "base/test/task_environment.h"
 #include "base/test/test_future.h"
 #include "base/values.h"
@@ -191,7 +192,7 @@ class DesktopAttestationServiceTest : public testing::Test {
   }
 
   base::test::TaskEnvironment task_environment_;
-  std::unique_ptr<SigningKeyPair> test_key_pair_;
+  scoped_refptr<SigningKeyPair> test_key_pair_;
   std::unique_ptr<DesktopAttestationService> attestation_service_;
   test::ScopedKeyPersistenceDelegateFactory persistence_delegate_factory_;
   std::unique_ptr<test::MockDeviceTrustKeyManager> mock_key_manager_;
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/device_trust_key_manager_impl.cc b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/device_trust_key_manager_impl.cc
index a2d2cb448f8d3..ed7f3847da8b8 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/device_trust_key_manager_impl.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/device_trust_key_manager_impl.cc
@@ -33,11 +33,11 @@ namespace {
 // was freed up (use-after-free), which is a security issue.
 absl::optional<std::vector<uint8_t>> SignString(
     const std::string& str,
-    crypto::UnexportableSigningKey* key) {
-  if (!key) {
+    scoped_refptr<SigningKeyPair> key_pair) {
+  if (!key_pair || !key_pair->key()) {
     return absl::nullopt;
   }
-  return key->SignSlowly(base::as_bytes(base::make_span(str)));
+  return key_pair->key()->SignSlowly(base::as_bytes(base::make_span(str)));
 }
 
 void OnSignatureGenerated(
@@ -179,7 +179,7 @@ void DeviceTrustKeyManagerImpl::SignStringAsync(const std::string& str,
 
   if (IsFullyInitialized()) {
     background_task_runner_->PostTaskAndReplyWithResult(
-        FROM_HERE, base::BindOnce(&SignString, str, key_pair_->key()),
+        FROM_HERE, base::BindOnce(&SignString, str, key_pair_),
         base::BindOnce(&OnSignatureGenerated, key_pair_->trust_level(),
                        base::TimeTicks::Now(), std::move(callback)));
     return;
@@ -239,7 +239,7 @@ void DeviceTrustKeyManagerImpl::LoadKey(bool create_on_fail) {
 
 void DeviceTrustKeyManagerImpl::OnKeyLoaded(
     bool create_on_fail,
-    std::unique_ptr<SigningKeyPair> loaded_key_pair) {
+    scoped_refptr<SigningKeyPair> loaded_key_pair) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
 
   if (loaded_key_pair && !loaded_key_pair->is_empty()) {
@@ -247,7 +247,7 @@ void DeviceTrustKeyManagerImpl::OnKeyLoaded(
 
     // Kick off key synchronization in the background as non-blocking.
     key_rotation_launcher_->SynchronizePublicKey(
-        *key_pair_,
+        key_pair_,
         base::BindOnce(&DeviceTrustKeyManagerImpl::OnSynchronizationFinished,
                        weak_factory_.GetWeakPtr()));
   } else {
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/device_trust_key_manager_impl.h b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/device_trust_key_manager_impl.h
index cc22fa25ce608..57206544874b3 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/device_trust_key_manager_impl.h
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/device_trust_key_manager_impl.h
@@ -61,7 +61,7 @@ class DeviceTrustKeyManagerImpl : public DeviceTrustKeyManager {
   // false, the manager will simply respond to all pending callbacks.
   void LoadKey(bool create_on_fail);
   void OnKeyLoaded(bool create_on_fail,
-                   std::unique_ptr<SigningKeyPair> loaded_key_pair);
+                   scoped_refptr<SigningKeyPair> loaded_key_pair);
 
   // Invoked when synchronization of the loaded key has been done with the
   // server. `response_code` will hold the HTTP response code of the key upload
@@ -114,7 +114,7 @@ class DeviceTrustKeyManagerImpl : public DeviceTrustKeyManager {
 
   // Currently loaded device-trust key pair. If nullptr, it effectively means
   // that a key hasn't been loaded into memory yet.
-  std::unique_ptr<SigningKeyPair> key_pair_;
+  scoped_refptr<SigningKeyPair> key_pair_;
 
   // When set, represents the response code for the synchronization request
   // of `key_pair_`.
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/device_trust_key_manager_impl_unittest.cc b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/device_trust_key_manager_impl_unittest.cc
index 210a683f0e809..e2b5ed5f31257 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/device_trust_key_manager_impl_unittest.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/device_trust_key_manager_impl_unittest.cc
@@ -9,6 +9,7 @@
 #include "base/barrier_closure.h"
 #include "base/functional/callback_forward.h"
 #include "base/memory/raw_ptr.h"
+#include "base/memory/scoped_refptr.h"
 #include "base/run_loop.h"
 #include "base/task/bind_post_task.h"
 #include "base/task/sequenced_task_runner.h"
@@ -137,7 +138,7 @@ class DeviceTrustKeyManagerImplTest : public testing::Test {
       absl::optional<int> response = kSuccessUploadCode) {
     EXPECT_CALL(*mock_launcher_, SynchronizePublicKey(_, _))
         .WillOnce(Invoke(
-            [response](const SigningKeyPair& key_pair,
+            [response](scoped_refptr<SigningKeyPair> key_pair,
                        KeyRotationLauncher::SynchronizationCallback callback) {
               std::move(callback).Run(response);
             }));
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher.h b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher.h
index 4ebb4fb1a8cf0..3af8b62c565f5 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher.h
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher.h
@@ -43,7 +43,7 @@ class KeyRotationLauncher {
 
   // Verifies if `key_pair`'s public key is known by the management server.
   // Invokes `callback` with the upload code if a request was made.
-  virtual void SynchronizePublicKey(const SigningKeyPair& key_pair,
+  virtual void SynchronizePublicKey(scoped_refptr<SigningKeyPair> key_pair,
                                     SynchronizationCallback callback) = 0;
 };
 
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher_impl.cc b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher_impl.cc
index fd7f6070c79bc..9c20a2039763d 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher_impl.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher_impl.cc
@@ -29,13 +29,14 @@ using SynchronizationCallback = KeyRotationLauncher::SynchronizationCallback;
 
 namespace {
 
-// Creating the request object involves generating a signature which may be
-// resource intensive. It is, therefore, on a background thread.
 absl::optional<const KeyUploadRequest> CreateRequest(
     const GURL& dm_server_url,
     const std::string& dm_token,
-    const SigningKeyPair& key_pair) {
-  return KeyUploadRequest::Create(dm_server_url, dm_token, key_pair);
+    scoped_refptr<SigningKeyPair> key_pair) {
+  if (!key_pair) {
+    return absl::nullopt;
+  }
+  return KeyUploadRequest::Create(dm_server_url, dm_token, *key_pair);
 }
 
 }  // namespace
@@ -85,10 +86,10 @@ void KeyRotationLauncherImpl::LaunchKeyRotation(
 }
 
 void KeyRotationLauncherImpl::SynchronizePublicKey(
-    const SigningKeyPair& key_pair,
+    scoped_refptr<SigningKeyPair> key_pair,
     SynchronizationCallback callback) {
   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
-  if (key_pair.is_empty()) {
+  if (!key_pair || key_pair->is_empty()) {
     LogSynchronizationError(DTSynchronizationError::kMissingKeyPair);
     std::move(callback).Run(absl::nullopt);
     return;
@@ -108,15 +109,14 @@ void KeyRotationLauncherImpl::SynchronizePublicKey(
     return;
   }
 
-  // Passing the key pair by reference is fine in this case as it is owned by
-  // a browser-level object (DeviceTrustKeyManager) and will outlive any task
-  // running on the ThreadPool.
+  // Creating the request object involves generating a signature which may be
+  // resource intensive. It will therefore be created on a background thread.
   base::ThreadPool::PostTaskAndReplyWithResult(
       FROM_HERE,
       {base::MayBlock(), base::TaskPriority::USER_BLOCKING,
        base::TaskShutdownBehavior::SKIP_ON_SHUTDOWN},
       base::BindOnce(&CreateRequest, GURL(dm_server_url.value()),
-                     dm_token.value(), std::ref(key_pair)),
+                     dm_token.value(), key_pair),
       base::BindOnce(&KeyRotationLauncherImpl::OnUploadRequestCreated,
                      weak_factory_.GetWeakPtr(), std::move(callback)));
 }
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher_impl.h b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher_impl.h
index a127d03507cb5..d521b7f7762ba 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher_impl.h
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher_impl.h
@@ -39,7 +39,7 @@ class KeyRotationLauncherImpl : public KeyRotationLauncher {
   // KeyRotationLauncher:
   void LaunchKeyRotation(const std::string& nonce,
                          KeyRotationCommand::Callback callback) override;
-  void SynchronizePublicKey(const SigningKeyPair& key_pair,
+  void SynchronizePublicKey(scoped_refptr<SigningKeyPair> key_pair,
                             SynchronizationCallback callback) override;
 
  private:
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher_unittest.cc b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher_unittest.cc
index a12bd12d1bf87..1ecd0d206a254 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher_unittest.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/key_rotation_launcher_unittest.cc
@@ -10,6 +10,7 @@
 #include "base/check.h"
 #include "base/functional/callback_helpers.h"
 #include "base/memory/raw_ptr.h"
+#include "base/memory/scoped_refptr.h"
 #include "base/test/bind.h"
 #include "base/test/metrics/histogram_tester.h"
 #include "base/test/task_environment.h"
@@ -58,13 +59,13 @@ constexpr char kSynchronizationErrorHistogram[] =
 constexpr char kSynchronizationUploadHistogram[] =
     "Enterprise.DeviceTrust.SyncSigningKey.UploadCode";
 
-std::unique_ptr<SigningKeyPair> CreateFakeKeyPair() {
+scoped_refptr<SigningKeyPair> CreateFakeKeyPair() {
   ECSigningKeyProvider provider;
   auto algorithm = {crypto::SignatureVerifier::ECDSA_SHA256};
   auto signing_key = provider.GenerateSigningKeySlowly(algorithm);
   DCHECK(signing_key);
-  return std::make_unique<SigningKeyPair>(std::move(signing_key),
-                                          BPKUR::CHROME_BROWSER_OS_KEY);
+  return base::MakeRefCounted<SigningKeyPair>(std::move(signing_key),
+                                              BPKUR::CHROME_BROWSER_OS_KEY);
 }
 
 }  // namespace
@@ -99,8 +100,9 @@ class KeyRotationLauncherTest : public testing::Test {
     task_environment_.RunUntilIdle();
   }
 
-  absl::optional<int> RunSynchronizePublicKey(const SigningKeyPair& key_pair,
-                                              bool fast_forward = false) {
+  absl::optional<int> RunSynchronizePublicKey(
+      scoped_refptr<SigningKeyPair> key_pair,
+      bool fast_forward = false) {
     base::test::TestFuture<absl::optional<int>> future;
     launcher_->SynchronizePublicKey(key_pair, future.GetCallback());
 
@@ -125,7 +127,7 @@ class KeyRotationLauncherTest : public testing::Test {
   scoped_refptr<network::SharedURLLoaderFactory> test_shared_loader_factory_ =
       base::MakeRefCounted<network::WeakWrapperSharedURLLoaderFactory>(
           &test_url_loader_factory_);
-  std::unique_ptr<SigningKeyPair> test_key_pair_;
+  scoped_refptr<SigningKeyPair> test_key_pair_;
   std::unique_ptr<KeyRotationLauncher> launcher_;
 };
 
@@ -164,10 +166,10 @@ TEST_F(KeyRotationLauncherTest, LaunchKeyRotation_InvalidDMToken) {
 }
 
 TEST_F(KeyRotationLauncherTest, SynchronizePublicKey_EmptyKey) {
-  auto empty_key_pair = std::make_unique<SigningKeyPair>(
+  auto empty_key_pair = base::MakeRefCounted<SigningKeyPair>(
       nullptr, BPKUR::KEY_TRUST_LEVEL_UNSPECIFIED);
 
-  auto response_code = RunSynchronizePublicKey(*empty_key_pair);
+  auto response_code = RunSynchronizePublicKey(empty_key_pair);
 
   EXPECT_FALSE(response_code);
   histogram_tester_.ExpectUniqueSample(kSynchronizationErrorHistogram,
@@ -178,7 +180,7 @@ TEST_F(KeyRotationLauncherTest, SynchronizePublicKey_EmptyKey) {
 TEST_F(KeyRotationLauncherTest, SynchronizePublicKey_InvalidDmToken) {
   fake_dm_token_storage_.SetDMToken("");
 
-  auto response_code = RunSynchronizePublicKey(*test_key_pair_);
+  auto response_code = RunSynchronizePublicKey(test_key_pair_);
 
   EXPECT_FALSE(response_code);
   histogram_tester_.ExpectUniqueSample(kSynchronizationErrorHistogram,
@@ -192,7 +194,7 @@ TEST_F(KeyRotationLauncherTest, SynchronizePublicKey_Success) {
   auto expected_code = net::HTTP_OK;
   SetUploadResponseCode(expected_code);
 
-  auto response_code = RunSynchronizePublicKey(*test_key_pair_);
+  auto response_code = RunSynchronizePublicKey(test_key_pair_);
 
   histogram_tester_.ExpectUniqueSample(kSynchronizationUploadHistogram,
                                        static_cast<int>(expected_code), 1);
@@ -205,7 +207,7 @@ TEST_F(KeyRotationLauncherTest, SynchronizePublicKey_Timeout) {
   SetDMToken();
 
   auto response_code =
-      RunSynchronizePublicKey(*test_key_pair_, /*fast_forward=*/true);
+      RunSynchronizePublicKey(test_key_pair_, /*fast_forward=*/true);
 
   // Zero is the http response code returned by the network service when hitting
   // a timeout.
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/mock_key_rotation_launcher.h b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/mock_key_rotation_launcher.h
index 23bb30e968bc0..0559b5f25eb27 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/browser/mock_key_rotation_launcher.h
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/browser/mock_key_rotation_launcher.h
@@ -24,7 +24,7 @@ class MockKeyRotationLauncher : public KeyRotationLauncher {
 
   MOCK_METHOD(void,
               SynchronizePublicKey,
-              (const SigningKeyPair&, SynchronizationCallback),
+              (scoped_refptr<SigningKeyPair>, SynchronizationCallback),
               (override));
 };
 
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/key_persistence_delegate.h b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/key_persistence_delegate.h
index 5bb82915255e0..8a0ea55f47633 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/key_persistence_delegate.h
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/key_persistence_delegate.h
@@ -8,6 +8,7 @@
 #include <memory>
 #include <vector>
 
+#include "base/memory/scoped_refptr.h"
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair.h"
 #include "components/policy/proto/device_management_backend.pb.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
@@ -38,14 +39,14 @@ class KeyPersistenceDelegate {
   // generated signing key with a trust level of BPKUR::CHROME_BROWSER_HW_KEY
   // if available, or a new EC signing key pair with
   // BPKUR::CHROME_BROWSER_OS_KEY trust level is returned if available.
-  virtual std::unique_ptr<SigningKeyPair> LoadKeyPair() = 0;
+  virtual scoped_refptr<SigningKeyPair> LoadKeyPair() = 0;
 
   // Creates a key pair composed of a hardware-backed signing key and trust
   // level BPKUR::CHROME_BROWSER_HW_KEY pair if available,
   // Otherwise an EC signing key pair with a and trust level
   // BPKUR::CHROME_BROWSER_OS_KEY is created if available. If neither are
   // available, a nullptr is returned.
-  virtual std::unique_ptr<SigningKeyPair> CreateKeyPair() = 0;
+  virtual scoped_refptr<SigningKeyPair> CreateKeyPair() = 0;
 
   // Deletes the signing key in the temporary key storage after a successful
   // key rotation. This method is only overridden in Mac platforms since signing
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/linux_key_persistence_delegate.cc b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/linux_key_persistence_delegate.cc
index 9d7620066b299..126e743551300 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/linux_key_persistence_delegate.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/linux_key_persistence_delegate.cc
@@ -18,6 +18,7 @@
 #include "base/files/file_util.h"
 #include "base/json/json_reader.h"
 #include "base/json/json_writer.h"
+#include "base/memory/scoped_refptr.h"
 #include "base/no_destructor.h"
 #include "base/notreached.h"
 #include "base/posix/eintr_wrapper.h"
@@ -177,7 +178,7 @@ bool LinuxKeyPersistenceDelegate::StoreKeyPair(
                        "the signing key storage.");
 }
 
-std::unique_ptr<SigningKeyPair> LinuxKeyPersistenceDelegate::LoadKeyPair() {
+scoped_refptr<SigningKeyPair> LinuxKeyPersistenceDelegate::LoadKeyPair() {
   std::string file_content;
   if (!base::ReadFileToStringWithMaxSize(GetSigningKeyFilePath(), &file_content,
                                          kMaxBufferSize)) {
@@ -251,11 +252,11 @@ std::unique_ptr<SigningKeyPair> LinuxKeyPersistenceDelegate::LoadKeyPair() {
     return nullptr;
   }
 
-  return std::make_unique<SigningKeyPair>(std::move(signing_key),
-                                          BPKUR::CHROME_BROWSER_OS_KEY);
+  return base::MakeRefCounted<SigningKeyPair>(std::move(signing_key),
+                                              BPKUR::CHROME_BROWSER_OS_KEY);
 }
 
-std::unique_ptr<SigningKeyPair> LinuxKeyPersistenceDelegate::CreateKeyPair() {
+scoped_refptr<SigningKeyPair> LinuxKeyPersistenceDelegate::CreateKeyPair() {
   // TODO (http://b/210343211): TPM support for linux.
   auto provider = std::make_unique<ECSigningKeyProvider>();
   auto algorithm = {crypto::SignatureVerifier::ECDSA_SHA256};
@@ -270,8 +271,8 @@ std::unique_ptr<SigningKeyPair> LinuxKeyPersistenceDelegate::CreateKeyPair() {
     return nullptr;
   }
 
-  return std::make_unique<SigningKeyPair>(std::move(signing_key),
-                                          BPKUR::CHROME_BROWSER_OS_KEY);
+  return base::MakeRefCounted<SigningKeyPair>(std::move(signing_key),
+                                              BPKUR::CHROME_BROWSER_OS_KEY);
 }
 
 // static
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/linux_key_persistence_delegate.h b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/linux_key_persistence_delegate.h
index a8d23c52dfdd6..a55ba3341a64f 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/linux_key_persistence_delegate.h
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/linux_key_persistence_delegate.h
@@ -30,8 +30,8 @@ class LinuxKeyPersistenceDelegate : public KeyPersistenceDelegate {
   bool CheckRotationPermissions() override;
   bool StoreKeyPair(KeyPersistenceDelegate::KeyTrustLevel trust_level,
                     std::vector<uint8_t> wrapped) override;
-  std::unique_ptr<SigningKeyPair> LoadKeyPair() override;
-  std::unique_ptr<SigningKeyPair> CreateKeyPair() override;
+  scoped_refptr<SigningKeyPair> LoadKeyPair() override;
+  scoped_refptr<SigningKeyPair> CreateKeyPair() override;
 
  private:
   friend class LinuxKeyPersistenceDelegateTest;
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mac_key_persistence_delegate.cc b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mac_key_persistence_delegate.cc
index b3425982a2da7..7e1ff33910e63 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mac_key_persistence_delegate.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mac_key_persistence_delegate.cc
@@ -7,6 +7,7 @@
 #include <utility>
 
 #include "base/check.h"
+#include "base/memory/scoped_refptr.h"
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/mac/secure_enclave_signing_key.h"
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/shared_command_constants.h"
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair.h"
@@ -56,7 +57,7 @@ bool MacKeyPersistenceDelegate::StoreKeyPair(KeyTrustLevel trust_level,
   return true;
 }
 
-std::unique_ptr<SigningKeyPair> MacKeyPersistenceDelegate::LoadKeyPair() {
+scoped_refptr<SigningKeyPair> MacKeyPersistenceDelegate::LoadKeyPair() {
   SecureEnclaveClient::KeyType key_type =
       SecureEnclaveClient::KeyType::kPermanent;
   std::vector<uint8_t> key_label;
@@ -70,11 +71,11 @@ std::unique_ptr<SigningKeyPair> MacKeyPersistenceDelegate::LoadKeyPair() {
     return nullptr;
   }
 
-  return std::make_unique<SigningKeyPair>(std::move(signing_key),
-                                          BPKUR::CHROME_BROWSER_HW_KEY);
+  return base::MakeRefCounted<SigningKeyPair>(std::move(signing_key),
+                                              BPKUR::CHROME_BROWSER_HW_KEY);
 }
 
-std::unique_ptr<SigningKeyPair> MacKeyPersistenceDelegate::CreateKeyPair() {
+scoped_refptr<SigningKeyPair> MacKeyPersistenceDelegate::CreateKeyPair() {
   // Moving a previous signing key to temporary key storage if a key exists.
   client_->UpdateStoredKeyLabel(SecureEnclaveClient::KeyType::kPermanent,
                                 SecureEnclaveClient::KeyType::kTemporary);
@@ -90,8 +91,8 @@ std::unique_ptr<SigningKeyPair> MacKeyPersistenceDelegate::CreateKeyPair() {
     return nullptr;
   }
 
-  return std::make_unique<SigningKeyPair>(std::move(signing_key),
-                                          BPKUR::CHROME_BROWSER_HW_KEY);
+  return base::MakeRefCounted<SigningKeyPair>(std::move(signing_key),
+                                              BPKUR::CHROME_BROWSER_HW_KEY);
 }
 
 void MacKeyPersistenceDelegate::CleanupTemporaryKeyData() {
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mac_key_persistence_delegate.h b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mac_key_persistence_delegate.h
index 0064a0587b59c..3a0aae8f0c464 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mac_key_persistence_delegate.h
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mac_key_persistence_delegate.h
@@ -26,8 +26,8 @@ class MacKeyPersistenceDelegate : public KeyPersistenceDelegate {
   bool CheckRotationPermissions() override;
   bool StoreKeyPair(KeyPersistenceDelegate::KeyTrustLevel trust_level,
                     std::vector<uint8_t> wrapped) override;
-  std::unique_ptr<SigningKeyPair> LoadKeyPair() override;
-  std::unique_ptr<SigningKeyPair> CreateKeyPair() override;
+  scoped_refptr<SigningKeyPair> LoadKeyPair() override;
+  scoped_refptr<SigningKeyPair> CreateKeyPair() override;
   void CleanupTemporaryKeyData() override;
 
  private:
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mock_key_persistence_delegate.h b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mock_key_persistence_delegate.h
index c549d12556a39..3935ebdf589df 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mock_key_persistence_delegate.h
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mock_key_persistence_delegate.h
@@ -24,11 +24,11 @@ class MockKeyPersistenceDelegate : public KeyPersistenceDelegate {
               StoreKeyPair,
               (KeyPersistenceDelegate::KeyTrustLevel, std::vector<uint8_t>),
               (override));
-  MOCK_METHOD(std::unique_ptr<enterprise_connectors::SigningKeyPair>,
+  MOCK_METHOD(scoped_refptr<enterprise_connectors::SigningKeyPair>,
               LoadKeyPair,
               (),
               (override));
-  MOCK_METHOD(std::unique_ptr<enterprise_connectors::SigningKeyPair>,
+  MOCK_METHOD(scoped_refptr<enterprise_connectors::SigningKeyPair>,
               CreateKeyPair,
               (),
               (override));
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/scoped_key_persistence_delegate_factory.cc b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/scoped_key_persistence_delegate_factory.cc
index 2db57ded62f07..0d5d008f82ee5 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/scoped_key_persistence_delegate_factory.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/scoped_key_persistence_delegate_factory.cc
@@ -5,6 +5,7 @@
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/scoped_key_persistence_delegate_factory.h"
 
 #include "base/check.h"
+#include "base/memory/scoped_refptr.h"
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/ec_signing_key.h"
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/mock_key_persistence_delegate.h"
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair.h"
@@ -63,13 +64,13 @@ ScopedKeyPersistenceDelegateFactory::
       .WillByDefault(testing::DoAll(
           testing::Invoke([&side_effect]() { side_effect.Run(); }),
           testing::Invoke([]() {
-            return std::make_unique<SigningKeyPair>(
+            return base::MakeRefCounted<SigningKeyPair>(
                 GenerateHardwareSigningKey(), BPKUR::CHROME_BROWSER_HW_KEY);
           })));
   ON_CALL(*mocked_delegate.get(), CreateKeyPair)
       .WillByDefault(testing::Invoke([]() {
-        return std::make_unique<SigningKeyPair>(GenerateHardwareSigningKey(),
-                                                BPKUR::CHROME_BROWSER_HW_KEY);
+        return base::MakeRefCounted<SigningKeyPair>(
+            GenerateHardwareSigningKey(), BPKUR::CHROME_BROWSER_HW_KEY);
       }));
   return mocked_delegate;
 }
@@ -83,13 +84,13 @@ ScopedKeyPersistenceDelegateFactory::CreateMockedECDelegate() {
   auto mocked_delegate = std::make_unique<MockKeyPersistenceDelegate>();
   ON_CALL(*mocked_delegate.get(), LoadKeyPair)
       .WillByDefault(testing::Invoke([]() {
-        return std::make_unique<SigningKeyPair>(GenerateECSigningKey(),
-                                                BPKUR::CHROME_BROWSER_OS_KEY);
+        return base::MakeRefCounted<SigningKeyPair>(
+            GenerateECSigningKey(), BPKUR::CHROME_BROWSER_OS_KEY);
       }));
   ON_CALL(*mocked_delegate.get(), CreateKeyPair)
       .WillByDefault(testing::Invoke([]() {
-        return std::make_unique<SigningKeyPair>(GenerateECSigningKey(),
-                                                BPKUR::CHROME_BROWSER_OS_KEY);
+        return base::MakeRefCounted<SigningKeyPair>(
+            GenerateECSigningKey(), BPKUR::CHROME_BROWSER_OS_KEY);
       }));
   return mocked_delegate;
 }
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/win_key_persistence_delegate.cc b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/win_key_persistence_delegate.cc
index bb45af8ae2699..5202a25fb2b36 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/win_key_persistence_delegate.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/win_key_persistence_delegate.cc
@@ -8,6 +8,7 @@
 #include <string>
 #include <utility>
 
+#include "base/memory/scoped_refptr.h"
 #include "base/no_destructor.h"
 #include "base/syslog_logging.h"
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/ec_signing_key.h"
@@ -96,7 +97,7 @@ bool WinKeyPersistenceDelegate::StoreKeyPair(
                        "the signing key storage.");
 }
 
-std::unique_ptr<SigningKeyPair> WinKeyPersistenceDelegate::LoadKeyPair() {
+scoped_refptr<SigningKeyPair> WinKeyPersistenceDelegate::LoadKeyPair() {
   base::win::RegKey key;
   std::wstring signingkey_name;
   std::wstring trustlevel_name;
@@ -172,10 +173,11 @@ std::unique_ptr<SigningKeyPair> WinKeyPersistenceDelegate::LoadKeyPair() {
     return nullptr;
   }
 
-  return std::make_unique<SigningKeyPair>(std::move(signing_key), trust_level);
+  return base::MakeRefCounted<SigningKeyPair>(std::move(signing_key),
+                                              trust_level);
 }
 
-std::unique_ptr<SigningKeyPair> WinKeyPersistenceDelegate::CreateKeyPair() {
+scoped_refptr<SigningKeyPair> WinKeyPersistenceDelegate::CreateKeyPair() {
   // Attempt to create a TPM signing key.
   KeyPersistenceDelegate::KeyTrustLevel trust_level =
       BPKUR::CHROME_BROWSER_HW_KEY;
@@ -200,7 +202,8 @@ std::unique_ptr<SigningKeyPair> WinKeyPersistenceDelegate::CreateKeyPair() {
     return nullptr;
   }
 
-  return std::make_unique<SigningKeyPair>(std::move(signing_key), trust_level);
+  return base::MakeRefCounted<SigningKeyPair>(std::move(signing_key),
+                                              trust_level);
 }
 
 }  // namespace enterprise_connectors
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/win_key_persistence_delegate.h b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/win_key_persistence_delegate.h
index 4ceb7ea1122d0..d9791795429c8 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/win_key_persistence_delegate.h
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/persistence/win_key_persistence_delegate.h
@@ -26,8 +26,8 @@ class WinKeyPersistenceDelegate : public KeyPersistenceDelegate {
   bool CheckRotationPermissions() override;
   bool StoreKeyPair(KeyPersistenceDelegate::KeyTrustLevel trust_level,
                     std::vector<uint8_t> wrapped) override;
-  std::unique_ptr<SigningKeyPair> LoadKeyPair() override;
-  std::unique_ptr<SigningKeyPair> CreateKeyPair() override;
+  scoped_refptr<SigningKeyPair> LoadKeyPair() override;
+  scoped_refptr<SigningKeyPair> CreateKeyPair() override;
 };
 
 }  // namespace enterprise_connectors
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair.h b/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair.h
index 374f7fdcabc44..53a1620316aea 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair.h
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair.h
@@ -7,6 +7,7 @@
 
 #include <memory>
 
+#include "base/memory/ref_counted.h"
 #include "components/policy/proto/device_management_backend.pb.h"
 #include "crypto/unexportable_key.h"
 
@@ -17,7 +18,7 @@ class UnexportableSigningKey;
 namespace enterprise_connectors {
 
 // Class in charge of storing a signing key and its trust level.
-class SigningKeyPair {
+class SigningKeyPair : public base::RefCountedThreadSafe<SigningKeyPair> {
  public:
   using KeyTrustLevel =
       enterprise_management::BrowserPublicKeyUploadRequest::KeyTrustLevel;
@@ -28,8 +29,6 @@ class SigningKeyPair {
   SigningKeyPair(const SigningKeyPair&) = delete;
   SigningKeyPair& operator=(const SigningKeyPair&) = delete;
 
-  ~SigningKeyPair();
-
   bool is_empty() const {
     return trust_level_ ==
                enterprise_management::BrowserPublicKeyUploadRequest::
@@ -44,6 +43,10 @@ class SigningKeyPair {
   KeyTrustLevel trust_level() const { return trust_level_; }
 
  private:
+  friend class base::RefCountedThreadSafe<SigningKeyPair>;
+
+  ~SigningKeyPair();
+
   std::unique_ptr<crypto::UnexportableSigningKey> signing_key_;
   KeyTrustLevel trust_level_;
 };
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair_unittest.cc b/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair_unittest.cc
index 078fa3a796f0e..075f39fd77c15 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair_unittest.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair_unittest.cc
@@ -7,6 +7,7 @@
 #include <memory>
 #include <vector>
 
+#include "base/memory/scoped_refptr.h"
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/ec_signing_key.h"
 #include "crypto/scoped_mock_unexportable_key_provider.h"
 #include "crypto/signature_verifier.h"
@@ -61,7 +62,7 @@ class SigningKeyPairTest : public testing::Test {
 // Tests that the SigningKeyPair instance is correctly initialized with a
 // hardware-backed SigningKeyPair if it was available.
 TEST_F(SigningKeyPairTest, SigningKeyPairInstance_WithHwKey) {
-  auto key_pair = std::make_unique<SigningKeyPair>(
+  auto key_pair = base::MakeRefCounted<SigningKeyPair>(
       GenerateSigningKey(BPKUR::CHROME_BROWSER_HW_KEY),
       BPKUR::CHROME_BROWSER_HW_KEY);
   ValidateSigningKey(key_pair.get(), BPKUR::CHROME_BROWSER_HW_KEY);
@@ -70,7 +71,7 @@ TEST_F(SigningKeyPairTest, SigningKeyPairInstance_WithHwKey) {
 // Tests that the SigningKeyPair instance is correctly initialized with a
 // crypto::ECPrivateKey-backed SigningKeyPair if it was available.
 TEST_F(SigningKeyPairTest, Create_WithECPrivateKey) {
-  auto key_pair = std::make_unique<SigningKeyPair>(
+  auto key_pair = base::MakeRefCounted<SigningKeyPair>(
       GenerateSigningKey(BPKUR::CHROME_BROWSER_OS_KEY),
       BPKUR::CHROME_BROWSER_OS_KEY);
   ValidateSigningKey(key_pair.get(), BPKUR::CHROME_BROWSER_OS_KEY);
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_util.cc b/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_util.cc
index 2d02cb3104df0..182bb4d7cd3d6 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_util.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_util.cc
@@ -10,7 +10,7 @@
 
 namespace enterprise_connectors {
 
-std::unique_ptr<SigningKeyPair> LoadPersistedKey() {
+scoped_refptr<SigningKeyPair> LoadPersistedKey() {
   auto* factory = KeyPersistenceDelegateFactory::GetInstance();
   DCHECK(factory);
   return factory->CreateKeyPersistenceDelegate()->LoadKeyPair();
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_util.h b/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_util.h
index 43552e90473e5..61565393c498c 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_util.h
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_util.h
@@ -5,8 +5,7 @@
 #ifndef CHROME_BROWSER_ENTERPRISE_CONNECTORS_DEVICE_TRUST_KEY_MANAGEMENT_CORE_SIGNING_KEY_UTIL_H_
 #define CHROME_BROWSER_ENTERPRISE_CONNECTORS_DEVICE_TRUST_KEY_MANAGEMENT_CORE_SIGNING_KEY_UTIL_H_
 
-#include <memory>
-
+#include "base/memory/scoped_refptr.h"
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair.h"
 
 namespace enterprise_connectors {
@@ -17,7 +16,7 @@ namespace enterprise_connectors {
 //
 // This function does IO and heavy cryptographic calculations, do not call
 // on the main thread.
-std::unique_ptr<SigningKeyPair> LoadPersistedKey();
+scoped_refptr<SigningKeyPair> LoadPersistedKey();
 
 }  // namespace enterprise_connectors
 
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/installer/key_rotation_manager_impl.cc b/chrome/browser/enterprise/connectors/device_trust/key_management/installer/key_rotation_manager_impl.cc
index 06a8fef8392ad..6e1ed63e8eea5 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/installer/key_rotation_manager_impl.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/installer/key_rotation_manager_impl.cc
@@ -136,7 +136,7 @@ void KeyRotationManagerImpl::Rotate(
 }
 
 void KeyRotationManagerImpl::OnDmServerResponse(
-    std::unique_ptr<SigningKeyPair> old_key_pair,
+    scoped_refptr<SigningKeyPair> old_key_pair,
     base::OnceCallback<void(KeyRotationResult)> result_callback,
     KeyNetworkDelegate::HttpResponseCode response_code) {
   const bool is_rotation = IsValidKey(old_key_pair.get());
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/installer/key_rotation_manager_impl.h b/chrome/browser/enterprise/connectors/device_trust/key_management/installer/key_rotation_manager_impl.h
index 7e99b4e7075b1..cbd350e30bb90 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/installer/key_rotation_manager_impl.h
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/installer/key_rotation_manager_impl.h
@@ -9,6 +9,7 @@
 #include <string>
 
 #include "base/functional/callback_forward.h"
+#include "base/memory/scoped_refptr.h"
 #include "base/memory/weak_ptr.h"
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/network/key_network_delegate.h"
 #include "chrome/browser/enterprise/connectors/device_trust/key_management/core/signing_key_pair.h"
@@ -38,7 +39,7 @@ class KeyRotationManagerImpl : public KeyRotationManager {
   // The `old_key_pair` is only required in key rotation flows and will be used
   // to restore local storage if upload failed.
   void OnDmServerResponse(
-      std::unique_ptr<SigningKeyPair> old_key_pair,
+      scoped_refptr<SigningKeyPair> old_key_pair,
       base::OnceCallback<void(KeyRotationResult)> result_callback,
       KeyNetworkDelegate::HttpResponseCode response_code);
 
diff --git a/chrome/browser/enterprise/connectors/device_trust/key_management/installer/key_rotation_manager_unittest.cc b/chrome/browser/enterprise/connectors/device_trust/key_management/installer/key_rotation_manager_unittest.cc
index 7e68b19ebee69..182f57b9aa319 100644
--- a/chrome/browser/enterprise/connectors/device_trust/key_management/installer/key_rotation_manager_unittest.cc
+++ b/chrome/browser/enterprise/connectors/device_trust/key_management/installer/key_rotation_manager_unittest.cc
@@ -10,6 +10,7 @@
 
 #include "base/check.h"
 #include "base/memory/raw_ptr.h"
+#include "base/memory/scoped_refptr.h"
 #include "base/test/metrics/histogram_tester.h"
 #include "base/test/task_environment.h"
 #include "base/test/test_future.h"
@@ -130,13 +131,12 @@ class KeyRotationManagerTest : public testing::Test {
 
   void SetUpOldKey(bool exists = true) {
     if (exists) {
-      auto old_key = std::make_unique<SigningKeyPair>(
+      old_key_pair_ = base::MakeRefCounted<SigningKeyPair>(
           CreateHardwareKey(), BPKUR::CHROME_BROWSER_HW_KEY);
-      old_key_pair_ = old_key.get();
       EXPECT_CALL(*mock_persistence_delegate_, LoadKeyPair())
-          .WillOnce(Return(ByMove(std::move(old_key))));
+          .WillOnce(Return(old_key_pair_));
     } else {
-      old_key_pair_ = nullptr;
+      old_key_pair_.reset();
       EXPECT_CALL(*mock_persistence_delegate_, LoadKeyPair())
           .WillOnce(Invoke([]() { return nullptr; }));
     }
@@ -149,11 +149,10 @@ class KeyRotationManagerTest : public testing::Test {
 
   void SetUpNewKeyCreation(bool success = true) {
     if (success) {
-      auto new_key = std::make_unique<SigningKeyPair>(
+      new_key_pair_ = base::MakeRefCounted<SigningKeyPair>(
           CreateHardwareKey(), BPKUR::CHROME_BROWSER_HW_KEY);
-      new_key_pair_ = new_key.get();
       EXPECT_CALL(*mock_persistence_delegate_, CreateKeyPair())
-          .WillOnce(Return(ByMove(std::move(new_key))));
+          .WillOnce(Return(new_key_pair_));
     } else {
       EXPECT_CALL(*mock_persistence_delegate_, CreateKeyPair())
           .WillOnce(Invoke([]() { return nullptr; }));
@@ -212,8 +211,8 @@ class KeyRotationManagerTest : public testing::Test {
   raw_ptr<StrictMock<MockKeyPersistenceDelegate>, DanglingUntriaged>
       mock_persistence_delegate_;
 
-  raw_ptr<SigningKeyPair, DanglingUntriaged> old_key_pair_;
-  raw_ptr<SigningKeyPair, DanglingUntriaged> new_key_pair_;
+  scoped_refptr<SigningKeyPair> old_key_pair_;
+  scoped_refptr<SigningKeyPair> new_key_pair_;
   absl::optional<std::string> captured_upload_body_;
 
   std::unique_ptr<KeyRotationManager> key_rotation_manager_;
