commit 444f737100c497f9ba3433b3a474b3c0f2cac23a	444f737100c497f9ba3433b3a474b3c0f2cac23a
Author: Juan Mojica <juanmojica@google.com>
Date:   Wed Oct 25 00:47:21 2023 +0000

    Fix region search controller using dangling browser pointer.
    
    Gets the browser on every start instead of storing it as a raw_ptr.
    
    Cq-Include-Trybots: luci.chrome.try:linux-chromeos-chrome,mac-chrome
    Bug: 1494565, b:307537320
    Change-Id: I1844ecaa0a66e439d49c8dd4c1c64ad28d796f7b
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4973698
    Commit-Queue: Juan Mojica <juanmojica@google.com>
    Reviewed-by: Duncan Mercer <mercerd@google.com>
    Reviewed-by: Avi Drissman <avi@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1214562}

diff --git a/chrome/browser/lens/region_search/lens_region_search_controller.cc b/chrome/browser/lens/region_search/lens_region_search_controller.cc
index 64b6a685521e1..62be8f76b3a5b 100644
--- a/chrome/browser/lens/region_search/lens_region_search_controller.cc
+++ b/chrome/browser/lens/region_search/lens_region_search_controller.cc
@@ -11,6 +11,7 @@
 #include "base/metrics/histogram_macros.h"
 #include "chrome/browser/image_editor/screenshot_flow.h"
 #include "chrome/browser/ui/browser.h"
+#include "chrome/browser/ui/browser_finder.h"
 #include "chrome/browser/ui/lens/lens_side_panel_helper.h"
 #include "chrome/browser/ui/tab_contents/core_tab_helper.h"
 #include "components/lens/lens_entrypoints.h"
@@ -32,8 +33,7 @@ LensRegionSearchControllerData::~LensRegionSearchControllerData() = default;
 RegionSearchCapturedData::RegionSearchCapturedData() = default;
 RegionSearchCapturedData::~RegionSearchCapturedData() = default;
 
-LensRegionSearchController::LensRegionSearchController(Browser* browser)
-    : browser_(browser) {
+LensRegionSearchController::LensRegionSearchController() {
   weak_this_ = weak_factory_.GetWeakPtr();
 }
 
@@ -50,7 +50,11 @@ void LensRegionSearchController::Start(
   is_google_default_search_provider_ = is_google_default_search_provider;
   // Return early if web contents/browser don't exist and if capture mode is
   // already active.
-  if (!web_contents || !browser_ || in_capture_mode_) {
+  if (!web_contents || in_capture_mode_) {
+    return;
+  }
+  Browser* browser = chrome::FindBrowserWithTab(web_contents);
+  if (!browser) {
     return;
   }
 
@@ -69,7 +73,7 @@ void LensRegionSearchController::Start(
     // Create user education bubble anchored to the toolbar container.
     // This is only done for non-fulllscreen capture.
     bubble_widget_ = lens::OpenLensRegionSearchInstructions(
-        browser_,
+        browser,
         base::BindOnce(&LensRegionSearchController::Close,
                        base::Unretained(this)),
         base::BindOnce(&LensRegionSearchController::Escape,
diff --git a/chrome/browser/lens/region_search/lens_region_search_controller.h b/chrome/browser/lens/region_search/lens_region_search_controller.h
index 056d6b2e118e6..88b15554245c4 100644
--- a/chrome/browser/lens/region_search/lens_region_search_controller.h
+++ b/chrome/browser/lens/region_search/lens_region_search_controller.h
@@ -13,8 +13,6 @@
 #include "ui/gfx/image/image.h"
 #include "ui/views/widget/widget.h"
 
-class Browser;
-
 namespace content {
 class WebContents;
 enum class Visibility;
@@ -28,7 +26,7 @@ namespace lens {
 
 class LensRegionSearchController : public content::WebContentsObserver {
  public:
-  explicit LensRegionSearchController(Browser* browser);
+  LensRegionSearchController();
   ~LensRegionSearchController() override;
 
   // Creates and runs the drag and capture flow. When run, the user enters into
@@ -104,8 +102,6 @@ class LensRegionSearchController : public content::WebContentsObserver {
 
   std::unique_ptr<image_editor::ScreenshotFlow> screenshot_flow_;
 
-  raw_ptr<Browser> browser_ = nullptr;
-
   raw_ptr<views::Widget> bubble_widget_ = nullptr;
 
   base::WeakPtr<LensRegionSearchController> weak_this_;
diff --git a/chrome/browser/renderer_context_menu/render_view_context_menu.cc b/chrome/browser/renderer_context_menu/render_view_context_menu.cc
index 235f120df5460..08b2b0b66133c 100644
--- a/chrome/browser/renderer_context_menu/render_view_context_menu.cc
+++ b/chrome/browser/renderer_context_menu/render_view_context_menu.cc
@@ -4054,7 +4054,7 @@ void RenderViewContextMenu::ExecRegionSearch(
 
   if (!lens_region_search_controller_) {
     lens_region_search_controller_ =
-        std::make_unique<lens::LensRegionSearchController>(browser);
+        std::make_unique<lens::LensRegionSearchController>();
   }
   const lens::AmbientSearchEntryPoint entry_point =
       is_google_default_search_provider
diff --git a/chrome/browser/ui/browser_commands.cc b/chrome/browser/ui/browser_commands.cc
index cb2d8ad9f3200..4d1ef132bb42e 100644
--- a/chrome/browser/ui/browser_commands.cc
+++ b/chrome/browser/ui/browser_commands.cc
@@ -2208,7 +2208,7 @@ void ExecLensRegionSearch(Browser* browser) {
     auto lens_region_search_controller_data =
         std::make_unique<lens::LensRegionSearchControllerData>();
     lens_region_search_controller_data->lens_region_search_controller =
-        std::make_unique<lens::LensRegionSearchController>(browser);
+        std::make_unique<lens::LensRegionSearchController>();
     lens_region_search_controller_data->lens_region_search_controller->Start(
         contents, lens::features::IsLensFullscreenSearchEnabled(),
         is_google_dsp, entry_point);
diff --git a/chrome/browser/ui/side_panel/companion/companion_tab_helper.cc b/chrome/browser/ui/side_panel/companion/companion_tab_helper.cc
index bf09604287ecd..880fdd8b6973a 100644
--- a/chrome/browser/ui/side_panel/companion/companion_tab_helper.cc
+++ b/chrome/browser/ui/side_panel/companion/companion_tab_helper.cc
@@ -188,12 +188,9 @@ void CompanionTabHelper::StartRegionSearch(
     bool use_fullscreen_capture,
     lens::AmbientSearchEntryPoint entry_point) {
 #if BUILDFLAG(ENABLE_LENS_DESKTOP_GOOGLE_BRANDED_FEATURES)
-  // TODO(shaktisahu): Pass a UI entry point for accurate metrics.
-  Browser* browser = companion::GetBrowserForWebContents(web_contents);
-  CHECK(browser);
   if (!lens_region_search_controller_) {
     lens_region_search_controller_ =
-        std::make_unique<lens::LensRegionSearchController>(browser);
+        std::make_unique<lens::LensRegionSearchController>();
   }
   lens_region_search_controller_->Start(web_contents, use_fullscreen_capture,
                                         /*is_google_default_search_provider=*/
diff --git a/chrome/browser/ui/views/lens/lens_region_search_controller_unittest.cc b/chrome/browser/ui/views/lens/lens_region_search_controller_unittest.cc
index ae820870cde30..c87acb596db82 100644
--- a/chrome/browser/ui/views/lens/lens_region_search_controller_unittest.cc
+++ b/chrome/browser/ui/views/lens/lens_region_search_controller_unittest.cc
@@ -25,8 +25,7 @@ class LensRegionSearchControllerTest : public TestWithBrowserView {
 
     // Create an active web contents.
     AddTab(browser_view()->browser(), GURL("about:blank"));
-    controller_ =
-        std::make_unique<LensRegionSearchController>(browser_view()->browser());
+    controller_ = std::make_unique<LensRegionSearchController>();
     controller_->SetWebContentsForTesting(
         browser_view()->GetActiveWebContents());
     controller_->SetEntryPointForTesting(
diff --git a/chrome/browser/ui/views/lens/lens_side_panel_helper.cc b/chrome/browser/ui/views/lens/lens_side_panel_helper.cc
index 274c7264d633c..0c34d662775f9 100644
--- a/chrome/browser/ui/views/lens/lens_side_panel_helper.cc
+++ b/chrome/browser/ui/views/lens/lens_side_panel_helper.cc
@@ -49,10 +49,11 @@ views::Widget* OpenLensRegionSearchInstructions(
     Browser* browser,
     base::OnceClosure close_callback,
     base::OnceClosure escape_callback) {
+  BrowserView* browser_view = BrowserView::GetBrowserViewForBrowser(browser);
+  CHECK(browser_view);
   // Our anchor should be the browser view's top container view. This makes sure
   // that we account for side panel width and the top container view.
-  views::View* anchor =
-      BrowserView::GetBrowserViewForBrowser(browser)->contents_web_view();
+  views::View* anchor = browser_view->contents_web_view();
   return views::BubbleDialogDelegateView::CreateBubble(
       std::make_unique<LensRegionSearchInstructionsView>(
           anchor, std::move(close_callback), std::move(escape_callback)));
diff --git a/chrome/browser/ui/views/lens/lens_static_page_controller.cc b/chrome/browser/ui/views/lens/lens_static_page_controller.cc
index 1bbd4b0c95aba..bb38a0b762224 100644
--- a/chrome/browser/ui/views/lens/lens_static_page_controller.cc
+++ b/chrome/browser/ui/views/lens/lens_static_page_controller.cc
@@ -81,7 +81,7 @@ void LensStaticPageController::StartRegionSearch(
   DCHECK(browser_);
   if (!lens_region_search_controller_) {
     lens_region_search_controller_ =
-        std::make_unique<lens::LensRegionSearchController>(browser_);
+        std::make_unique<lens::LensRegionSearchController>();
   }
   lens_region_search_controller_->Start(
       contents,
