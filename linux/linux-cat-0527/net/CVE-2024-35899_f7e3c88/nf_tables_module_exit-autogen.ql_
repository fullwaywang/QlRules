/**
 * @name linux-f7e3c88cc2a977c2b9a8aa52c1ce689e7b394e49-nf_tables_module_exit
 * @id cpp/linux/f7e3c88cc2a977c2b9a8aa52c1ce689e7b394e49/nf-tables-module-exit
 * @description linux-f7e3c88cc2a977c2b9a8aa52c1ce689e7b394e49-net/netfilter/nf_tables_api.c-nf_tables_module_exit CVE-2024-35899
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_1, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("nf_tables_trans_destroy_flush_work")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("unregister_pernet_subsys")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("pernet_operations")
	and target_1.getEnclosingFunction() = func
}

from Function func, ExprStmt target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
