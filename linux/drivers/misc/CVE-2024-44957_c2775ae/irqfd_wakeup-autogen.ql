/**
 * @name linux-c2775ae4d9227729f8ca9ee2a068f62a00d5ea9c-irqfd_wakeup
 * @id cpp/linux/c2775ae4d9227729f8ca9ee2a068f62a00d5ea9c/irqfd-wakeup
 * @description linux-c2775ae4d9227729f8ca9ee2a068f62a00d5ea9c-drivers/xen/privcmd.c-irqfd_wakeup CVE-2024-44957
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("mutex_lock_nested")
	and not target_0.getTarget().hasName("spin_unlock_irqrestore")
	and target_0.getArgument(0) instanceof AddressOfExpr
	and target_0.getArgument(1) instanceof Literal
	and target_0.getEnclosingFunction() = func
}

predicate func_1(BitwiseAndExpr target_10, Function func) {
exists(DoStmt target_1 |
	exists(BlockStmt obj_0 | obj_0=target_1.getStmt() |
		exists(DoStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(BlockStmt obj_2 | obj_2=obj_1.getStmt() |
				exists(ExprStmt obj_3 | obj_3=obj_2.getStmt(1) |
					exists(AssignExpr obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getLValue().(VariableAccess).getType().hasName("unsigned long")
						and obj_4.getRValue().(FunctionCall).getTarget().hasName("_raw_spin_lock_irqsave")
					)
				)
			)
			and obj_1.getCondition().(Literal).getValue()="0"
		)
	)
	and exists(BlockStmt obj_5 | obj_5=target_1.getParent() |
		exists(IfStmt obj_6 | obj_6=obj_5.getParent() |
			obj_6.getThen().(BlockStmt).getStmt(1)=target_1
			and obj_6.getCondition()=target_10
		)
	)
	and target_1.getCondition() instanceof Literal
	and target_1.getEnclosingFunction() = func
)
}

/*predicate func_2(Function func) {
exists(StmtExpr target_2 |
	exists(BlockStmt obj_0 | obj_0=target_2.getStmt() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(2) |
			exists(EqualityOperation obj_2 | obj_2=obj_1.getExpr() |
				obj_2.getLeftOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("unsigned long")
				and obj_2.getRightOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("unsigned long")
			)
		)
		and obj_0.getStmt(3).(ExprStmt).getExpr().(Literal).getValue()="1"
	)
	and target_2.getEnclosingFunction() = func
)
}

*/
/*predicate func_3(Function func) {
exists(EqualityOperation target_3 |
	target_3.getLeftOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("unsigned long")
	and target_3.getRightOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("unsigned long")
	and target_3.getEnclosingFunction() = func
)
}

*/
predicate func_4(BitwiseAndExpr target_10, Function func) {
exists(ExprStmt target_4 |
	exists(FunctionCall obj_0 | obj_0=target_4.getExpr() |
		obj_0.getTarget().hasName("spin_unlock_irqrestore")
		and obj_0.getArgument(0) instanceof AddressOfExpr
		and obj_0.getArgument(1).(VariableAccess).getType().hasName("unsigned long")
	)
	and exists(BlockStmt obj_1 | obj_1=target_4.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getThen().(BlockStmt).getStmt(3)=target_4
			and obj_2.getCondition()=target_10
		)
	)
	and target_4.getEnclosingFunction() = func
)
}

predicate func_6(Variable virqfds_lock, AddressOfExpr target_6) {
	target_6.getOperand().(VariableAccess).getTarget()=virqfds_lock
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_7(Variable virqfds_lock, AddressOfExpr target_7) {
	target_7.getOperand().(VariableAccess).getTarget()=virqfds_lock
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_9(Function func, FunctionCall target_9) {
	target_9.getTarget().hasName("mutex_unlock")
	and target_9.getArgument(0) instanceof AddressOfExpr
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Function func, BitwiseAndExpr target_10) {
	target_10.getLeftOperand().(VariableAccess).getTarget().getType().hasName("__poll_t")
	and target_10.getRightOperand().(Literal).getValue()="16"
	and target_10.getEnclosingFunction() = func
}

from Function func, Variable virqfds_lock, FunctionCall target_0, AddressOfExpr target_6, AddressOfExpr target_7, FunctionCall target_9, BitwiseAndExpr target_10
where
func_0(func, target_0)
and not func_1(target_10, func)
and not func_4(target_10, func)
and func_6(virqfds_lock, target_6)
and func_7(virqfds_lock, target_7)
and func_9(func, target_9)
and func_10(func, target_10)
and virqfds_lock.getType().hasName("mutex")
and not virqfds_lock.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
