commit 4e10787d18379d9b296290c2288097feddef16d4
Author: Daniel Bristot de Oliveira <bristot@kernel.org>
Date:   Wed Mar 9 14:13:02 2022 +0100

    tracing/osnoise: Do not unregister events twice
    
    commit f0cfe17bcc1dd2f0872966b554a148e888833ee9 upstream.
    
    Nicolas reported that using:
    
     # trace-cmd record -e all -M 10 -p osnoise --poll
    
    Resulted in the following kernel warning:
    
     ------------[ cut here ]------------
     WARNING: CPU: 0 PID: 1217 at kernel/tracepoint.c:404 tracepoint_probe_unregister+0x280/0x370
     [...]
     CPU: 0 PID: 1217 Comm: trace-cmd Not tainted 5.17.0-rc6-next-20220307-nico+ #19
     RIP: 0010:tracepoint_probe_unregister+0x280/0x370
     [...]
     CR2: 00007ff919b29497 CR3: 0000000109da4005 CR4: 0000000000170ef0
     Call Trace:
      <TASK>
      osnoise_workload_stop+0x36/0x90
      tracing_set_tracer+0x108/0x260
      tracing_set_trace_write+0x94/0xd0
      ? __check_object_size.part.0+0x10a/0x150
      ? selinux_file_permission+0x104/0x150
      vfs_write+0xb5/0x290
      ksys_write+0x5f/0xe0
      do_syscall_64+0x3b/0x90
      entry_SYSCALL_64_after_hwframe+0x44/0xae
     RIP: 0033:0x7ff919a18127
     [...]
     ---[ end trace 0000000000000000 ]---
    
    The warning complains about an attempt to unregister an
    unregistered tracepoint.
    
    This happens on trace-cmd because it first stops tracing, and
    then switches the tracer to nop. Which is equivalent to:
    
      # cd /sys/kernel/tracing/
      # echo osnoise > current_tracer
      # echo 0 > tracing_on
      # echo nop > current_tracer
    
    The osnoise tracer stops the workload when no trace instance
    is actually collecting data. This can be caused both by
    disabling tracing or disabling the tracer itself.
    
    To avoid unregistering events twice, use the existing
    trace_osnoise_callback_enabled variable to check if the events
    (and the workload) are actually active before trying to
    deactivate them.
    
    Link: https://lore.kernel.org/all/c898d1911f7f9303b7e14726e7cc9678fbfb4a0e.camel@redhat.com/
    Link: https://lkml.kernel.org/r/938765e17d5a781c2df429a98f0b2e7cc317b022.1646823913.git.bristot@kernel.org
    
    Cc: stable@vger.kernel.org
    Cc: Marcelo Tosatti <mtosatti@redhat.com>
    Fixes: 2fac8d6486d5 ("tracing/osnoise: Allow multiple instances of the same tracer")
    Reported-by: Nicolas Saenz Julienne <nsaenzju@redhat.com>
    Signed-off-by: Daniel Bristot de Oliveira <bristot@kernel.org>
    Signed-off-by: Steven Rostedt (Google) <rostedt@goodmis.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/kernel/trace/trace_osnoise.c b/kernel/trace/trace_osnoise.c
index c9c3355f982b..b6da7bd2383d 100644
--- a/kernel/trace/trace_osnoise.c
+++ b/kernel/trace/trace_osnoise.c
@@ -2222,6 +2222,17 @@ static void osnoise_workload_stop(void)
 	if (osnoise_has_registered_instances())
 		return;
 
+	/*
+	 * If callbacks were already disabled in a previous stop
+	 * call, there is no need to disable then again.
+	 *
+	 * For instance, this happens when tracing is stopped via:
+	 * echo 0 > tracing_on
+	 * echo nop > current_tracer.
+	 */
+	if (!trace_osnoise_callback_enabled)
+		return;
+
 	trace_osnoise_callback_enabled = false;
 	/*
 	 * Make sure that ftrace_nmi_enter/exit() see
