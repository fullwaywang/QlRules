/**
 * @name linux-21998a351512eba4ed5969006f0c55882d995ada-spectre_v2_user_select_mitigation
 * @id cpp/linux/21998a351512eba4ed5969006f0c55882d995ada/spectre-v2-user-select-mitigation
 * @description linux-21998a351512eba4ed5969006f0c55882d995ada-spectre_v2_user_select_mitigation CVE-2020-10767
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vspectre_v2_user, Variable vmode_612, VariableAccess target_0) {
		target_0.getTarget()=vspectre_v2_user
		and target_0.getParent().(AssignExpr).getLValue() = target_0
		and target_0.getParent().(AssignExpr).getRValue().(VariableAccess).getTarget()=vmode_612
}

predicate func_1(Variable vmode_612, ExprStmt target_7, ExprStmt target_8, Function func) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("spectre_v2_user_mitigation")
		and target_1.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vmode_612
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
		and target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_1.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation())
		and target_1.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation().isBefore(target_8.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation()))
}

predicate func_2(Variable vboot_cpu_data, BlockStmt target_9, ConditionalExpr target_2) {
		target_2.getCondition().(LogicalAndExpr).getValue()="0"
		and target_2.getThen().(Literal).getValue()="1"
		and target_2.getElse().(FunctionCall).getTarget().hasName("test_bit")
		and target_2.getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="250"
		and target_2.getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
		and target_2.getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
		and target_2.getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vboot_cpu_data
		and target_2.getParent().(IfStmt).getThen()=target_9
}

predicate func_3(Variable vspectre_v2_enabled, EqualityOperation target_3) {
		target_3.getAnOperand().(VariableAccess).getTarget()=vspectre_v2_enabled
		and target_3.getParent().(IfStmt).getThen() instanceof ReturnStmt
}

predicate func_4(Variable vsmt_possible_613, Variable vboot_cpu_data, ExprStmt target_7, NotExpr target_4) {
		target_4.getOperand().(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
		and target_4.getOperand().(ConditionalExpr).getThen().(Literal).getValue()="1"
		and target_4.getOperand().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("test_bit")
		and target_4.getOperand().(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="251"
		and target_4.getOperand().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
		and target_4.getOperand().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
		and target_4.getOperand().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vboot_cpu_data
		and target_4.getParent().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vsmt_possible_613
		and target_4.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen()=target_7
}

predicate func_5(Variable vspectre_v2_user_strings, Variable vmode_612, VariableAccess target_10, ExprStmt target_5) {
		target_5.getExpr().(FunctionCall).getTarget().hasName("printk")
		and target_5.getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="6Spectre V2 : %s\n"
		and target_5.getExpr().(FunctionCall).getArgument(1).(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vspectre_v2_user_strings
		and target_5.getExpr().(FunctionCall).getArgument(1).(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vmode_612
		and target_5.getParent().(IfStmt).getCondition()=target_10
}

predicate func_6(Variable vsmt_possible_613, Function func, IfStmt target_6) {
		target_6.getCondition().(VariableAccess).getTarget()=vsmt_possible_613
		and target_6.getThen() instanceof ExprStmt
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_6
}

predicate func_7(Variable vmode_612, ExprStmt target_7) {
		target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vmode_612
}

predicate func_8(Variable vspectre_v2_user, Variable vmode_612, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vspectre_v2_user
		and target_8.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vmode_612
}

predicate func_9(Function func, BlockStmt target_9) {
		target_9.getStmt(0).(DoStmt).getCondition().(Literal).getValue()="0"
		and target_9.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("set_bit")
		and target_9.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddExpr).getValue()="245"
		and target_9.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
		and target_9.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
		and target_9.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("set_bit")
		and target_9.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddExpr).getValue()="245"
		and target_9.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType() instanceof ArrayType
		and target_9.getEnclosingFunction() = func
}

predicate func_10(Variable vsmt_possible_613, ExprStmt target_5, VariableAccess target_10) {
		target_10.getTarget()=vsmt_possible_613
		and target_10.getParent().(IfStmt).getThen()=target_5
}

from Function func, Variable vsmt_possible_613, Variable vboot_cpu_data, Variable vspectre_v2_enabled, Variable vspectre_v2_user, Variable vspectre_v2_user_strings, Variable vmode_612, VariableAccess target_0, ConditionalExpr target_2, EqualityOperation target_3, NotExpr target_4, ExprStmt target_5, IfStmt target_6, ExprStmt target_7, ExprStmt target_8, BlockStmt target_9, VariableAccess target_10
where
func_0(vspectre_v2_user, vmode_612, target_0)
and not func_1(vmode_612, target_7, target_8, func)
and func_2(vboot_cpu_data, target_9, target_2)
and func_3(vspectre_v2_enabled, target_3)
and func_4(vsmt_possible_613, vboot_cpu_data, target_7, target_4)
and func_5(vspectre_v2_user_strings, vmode_612, target_10, target_5)
and func_6(vsmt_possible_613, func, target_6)
and func_7(vmode_612, target_7)
and func_8(vspectre_v2_user, vmode_612, target_8)
and func_9(func, target_9)
and func_10(vsmt_possible_613, target_5, target_10)
and vsmt_possible_613.getType().hasName("bool")
and vboot_cpu_data.getType().hasName("cpuinfo_x86")
and vspectre_v2_enabled.getType().hasName("spectre_v2_mitigation")
and vspectre_v2_user.getType().hasName("spectre_v2_user_mitigation")
and vspectre_v2_user_strings.getType() instanceof ArrayType
and vmode_612.getType().hasName("spectre_v2_user_mitigation")
and vsmt_possible_613.(LocalVariable).getFunction() = func
and not vboot_cpu_data.getParentScope+() = func
and not vspectre_v2_enabled.getParentScope+() = func
and not vspectre_v2_user.getParentScope+() = func
and not vspectre_v2_user_strings.getParentScope+() = func
and vmode_612.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
