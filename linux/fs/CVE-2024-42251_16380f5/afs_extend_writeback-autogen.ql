/**
 * @name linux-16380f52b72166d6a33b508cc2509716f436253f-afs_extend_writeback
 * @id cpp/linux/16380f52b72166d6a33b508cc2509716f436253f/afs-extend-writeback
 * @description linux-16380f52b72166d6a33b508cc2509716f436253f-fs/afs/write.c-afs_extend_writeback CVE-2024-42251
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vfolio_471, BlockStmt target_1, FunctionCall target_0) {
	target_0.getTarget().hasName("folio_try_get_rcu")
	and not target_0.getTarget().hasName("folio_try_get")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vfolio_471
	and target_0.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_1
}

predicate func_1(Function func, BlockStmt target_1) {
	exists(ExprStmt obj_0 | obj_0=target_1.getStmt(0) |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("xas_reset")
			and obj_1.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("xa_state")
		)
	)
	and target_1.getEnclosingFunction() = func
}

from Function func, Variable vfolio_471, FunctionCall target_0, BlockStmt target_1
where
func_0(vfolio_471, target_1, target_0)
and func_1(func, target_1)
and vfolio_471.getType().hasName("folio *")
and vfolio_471.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
