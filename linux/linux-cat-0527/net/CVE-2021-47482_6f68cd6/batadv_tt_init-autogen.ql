/**
 * @name linux-6f68cd634856f8ca93bafd623ba5357e0f648c68-batadv_tt_init
 * @id cpp/linux/6f68cd634856f8ca93bafd623ba5357e0f648c68/batadv-tt-init
 * @description linux-6f68cd634856f8ca93bafd623ba5357e0f648c68-net/batman-adv/translation-table.c-batadv_tt_init CVE-2021-47482
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vbat_priv_4153, RelationalOperation target_2, ExprStmt target_3, ExprStmt target_4) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("batadv_tt_local_table_free")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbat_priv_4153
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vret_4155, RelationalOperation target_2, ReturnStmt target_1) {
	target_1.getExpr().(VariableAccess).getTarget()=vret_4155
	and target_1.getParent().(IfStmt).getCondition()=target_2
}

predicate func_2(Variable vret_4155, ReturnStmt target_1, RelationalOperation target_2) {
	 (target_2 instanceof GTExpr or target_2 instanceof LTExpr)
	and target_2.getLesserOperand().(VariableAccess).getTarget()=vret_4155
	and target_2.getGreaterOperand().(Literal).getValue()="0"
	and target_2.getParent().(IfStmt).getThen()=target_1
}

predicate func_3(Variable vret_4155, Parameter vbat_priv_4153, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_4155
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("batadv_tt_global_init")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbat_priv_4153
}

predicate func_4(Parameter vbat_priv_4153, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("batadv_tvlv_handler_register")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbat_priv_4153
	and target_4.getExpr().(FunctionCall).getArgument(4).(Literal).getValue()="1"
	and target_4.getExpr().(FunctionCall).getArgument(5).(Literal).getValue()="0"
}

from Function func, Variable vret_4155, Parameter vbat_priv_4153, ReturnStmt target_1, RelationalOperation target_2, ExprStmt target_3, ExprStmt target_4
where
not func_0(vbat_priv_4153, target_2, target_3, target_4)
and func_1(vret_4155, target_2, target_1)
and func_2(vret_4155, target_1, target_2)
and func_3(vret_4155, vbat_priv_4153, target_3)
and func_4(vbat_priv_4153, target_4)
and vret_4155.getType().hasName("int")
and vbat_priv_4153.getType().hasName("batadv_priv *")
and vret_4155.(LocalVariable).getFunction() = func
and vbat_priv_4153.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
