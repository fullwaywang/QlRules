/**
 * @name linux-38d7b94e81d068b8d8c8392f421cfd2c3bbfd1a6-dpll_pin_registration_find
 * @id cpp/linux/38d7b94e81d068b8d8c8392f421cfd2c3bbfd1a6/dpll-pin-registration-find
 * @description linux-38d7b94e81d068b8d8c8392f421cfd2c3bbfd1a6-drivers/dpll/dpll_core.c-dpll_pin_registration_find CVE-2024-36002
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vreg_59, ReturnStmt target_2, ValueFieldAccess target_3, LogicalAndExpr target_1) {
exists(LogicalAndExpr target_0 |
	target_0.getLeftOperand() instanceof LogicalAndExpr
	and target_0.getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="cookie"
	and target_0.getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_59
	and target_0.getRightOperand().(EqualityOperation).getRightOperand().(VariableAccess).getType().hasName("void *")
	and target_0.getParent().(IfStmt).getThen()=target_2
	and target_3.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getLeftOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vops_57, Parameter vpriv_57, Variable vreg_59, ReturnStmt target_2, LogicalAndExpr target_1) {
	target_1.getLeftOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="ops"
	and target_1.getLeftOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_59
	and target_1.getLeftOperand().(EqualityOperation).getRightOperand().(VariableAccess).getTarget()=vops_57
	and target_1.getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="priv"
	and target_1.getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_59
	and target_1.getRightOperand().(EqualityOperation).getRightOperand().(VariableAccess).getTarget()=vpriv_57
	and target_1.getParent().(IfStmt).getThen()=target_2
}

predicate func_2(Variable vreg_59, ReturnStmt target_2) {
	target_2.getExpr().(VariableAccess).getTarget()=vreg_59
}

predicate func_3(Variable vreg_59, ValueFieldAccess target_3) {
	target_3.getTarget().getName()="next"
	and target_3.getQualifier().(PointerFieldAccess).getTarget().getName()="list"
	and target_3.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_59
}

from Function func, Parameter vops_57, Parameter vpriv_57, Variable vreg_59, LogicalAndExpr target_1, ReturnStmt target_2, ValueFieldAccess target_3
where
not func_0(vreg_59, target_2, target_3, target_1)
and func_1(vops_57, vpriv_57, vreg_59, target_2, target_1)
and func_2(vreg_59, target_2)
and func_3(vreg_59, target_3)
and vops_57.getType().hasName("const dpll_pin_ops *")
and vpriv_57.getType().hasName("void *")
and vreg_59.getType().hasName("dpll_pin_registration *")
and vops_57.getFunction() = func
and vpriv_57.getFunction() = func
and vreg_59.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
