/**
 * @name v8-bbea5909c797dec7c620b9fee43d80a1420c2e08-v8__internal__compiler____OperandForDeopt
 * @id cpp/v8/bbea5909c797dec7c620b9fee43d80a1420c2e08/v8internalcompileroperandfordeopt
 * @description v8-bbea5909c797dec7c620b9fee43d80a1420c2e08-src/compiler/backend/instruction-selector.cc-v8__internal__compiler____OperandForDeopt CVE-2022-1314
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Parameter vg_494, Parameter vinput_495, Parameter vrep_496, FunctionCall target_2, FunctionCall target_3, FunctionCall target_4, FunctionCall target_5, EqualityOperation target_6, NotExpr target_7) {
exists(IfStmt target_1 |
	target_1.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vrep_496
	and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("UseImmediate")
	and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(FunctionCall).getQualifier().(VariableAccess).getTarget()=vg_494
	and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("ptr")
	and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(FunctionCall).getQualifier().(VariableAccess).getType().hasName("Smi")
	and target_1.getElse().(BlockStmt).getStmt(0).(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("UseImmediate")
	and target_1.getElse().(BlockStmt).getStmt(0).(ReturnStmt).getExpr().(FunctionCall).getQualifier().(VariableAccess).getTarget()=vg_494
	and target_1.getElse().(BlockStmt).getStmt(0).(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vinput_495
	and target_1.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_2
	and target_3.getQualifier().(VariableAccess).getLocation().isBefore(target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(FunctionCall).getQualifier().(VariableAccess).getLocation())
	and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(FunctionCall).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getQualifier().(VariableAccess).getLocation())
	and target_1.getElse().(BlockStmt).getStmt(0).(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getQualifier().(VariableAccess).getLocation())
	and target_6.getLeftOperand().(VariableAccess).getLocation().isBefore(target_1.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation())
	and target_1.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_7.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Parameter vinput_495, FunctionCall target_2) {
	target_2.getTarget().hasName("opcode")
	and target_2.getQualifier().(VariableAccess).getTarget()=vinput_495
}

predicate func_3(Parameter vg_494, Parameter vinput_495, FunctionCall target_3) {
	target_3.getTarget().hasName("UseImmediate")
	and target_3.getQualifier().(VariableAccess).getTarget()=vg_494
	and target_3.getArgument(0).(VariableAccess).getTarget()=vinput_495
}

predicate func_4(Parameter vg_494, Parameter vinput_495, FunctionCall target_4) {
	target_4.getTarget().hasName("UseImmediate")
	and target_4.getQualifier().(VariableAccess).getTarget()=vg_494
	and target_4.getArgument(0).(VariableAccess).getTarget()=vinput_495
}

predicate func_5(Parameter vinput_495, FunctionCall target_5) {
	target_5.getTarget().hasName("op")
	and target_5.getQualifier().(VariableAccess).getTarget()=vinput_495
}

predicate func_6(Parameter vrep_496, EqualityOperation target_6) {
	target_6.getLeftOperand().(VariableAccess).getTarget()=vrep_496
}

predicate func_7(Parameter vrep_496, NotExpr target_7) {
	target_7.getOperand().(FunctionCall).getTarget().hasName("CanBeTaggedOrCompressedPointer")
	and target_7.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrep_496
}

from Function func, Parameter vg_494, Parameter vinput_495, Parameter vrep_496, FunctionCall target_2, FunctionCall target_3, FunctionCall target_4, FunctionCall target_5, EqualityOperation target_6, NotExpr target_7
where
not func_1(vg_494, vinput_495, vrep_496, target_2, target_3, target_4, target_5, target_6, target_7)
and func_2(vinput_495, target_2)
and func_3(vg_494, vinput_495, target_3)
and func_4(vg_494, vinput_495, target_4)
and func_5(vinput_495, target_5)
and func_6(vrep_496, target_6)
and func_7(vrep_496, target_7)
and vg_494.getType().hasName("OperandGenerator *")
and vinput_495.getType().hasName("Node *")
and vrep_496.getType().hasName("MachineRepresentation")
and vg_494.getFunction() = func
and vinput_495.getFunction() = func
and vrep_496.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
