/**
 * @name linux-0c17d1d2c61936401f4702e1846e2c19b200f958-check_mem_access
 * @id cpp/linux/0c17d1d2c61936401f4702e1846e2c19b200f958/check-mem-access
 * @description linux-0c17d1d2c61936401f4702e1846e2c19b200f958-kernel/bpf/verifier.c-check_mem_access CVE-2017-16996
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvalue_regno_1078, Variable vregs_1081, FunctionCall target_0) {
	target_0.getTarget().hasName("__update_reg_bounds")
	and not target_0.getTarget().hasName("coerce_reg_to_size")
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_1081
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vvalue_regno_1078
}

predicate func_1(Variable vsize_1083, VariableAccess target_1) {
	target_1.getTarget()=vsize_1083
	and target_1.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_2(Parameter vvalue_regno_1078, Variable vregs_1081, Variable vsize_1083, AssignExpr target_2) {
	target_2.getLValue().(ValueFieldAccess).getTarget().getName()="var_off"
	and target_2.getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_1081
	and target_2.getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vvalue_regno_1078
	and target_2.getRValue().(FunctionCall).getTarget().hasName("tnum_cast")
	and target_2.getRValue().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="var_off"
	and target_2.getRValue().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_1081
	and target_2.getRValue().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vvalue_regno_1078
	and target_2.getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vsize_1083
}

predicate func_3(LogicalAndExpr target_4, Function func, ExprStmt target_3) {
	target_3.getExpr() instanceof FunctionCall
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Parameter vvalue_regno_1078, Variable vregs_1081, Variable vsize_1083, LogicalAndExpr target_4) {
	target_4.getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_4.getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vsize_1083
	and target_4.getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(RelationalOperation).getGreaterOperand().(Literal).getValue()="8"
	and target_4.getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vvalue_regno_1078
	and target_4.getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(RelationalOperation).getLesserOperand().(Literal).getValue()="0"
	and target_4.getLeftOperand().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("bpf_access_type")
	and target_4.getRightOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getTarget().getName()="type"
	and target_4.getRightOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_1081
	and target_4.getRightOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vvalue_regno_1078
}

from Function func, Parameter vvalue_regno_1078, Variable vregs_1081, Variable vsize_1083, FunctionCall target_0, VariableAccess target_1, AssignExpr target_2, ExprStmt target_3, LogicalAndExpr target_4
where
func_0(vvalue_regno_1078, vregs_1081, target_0)
and func_1(vsize_1083, target_1)
and func_2(vvalue_regno_1078, vregs_1081, vsize_1083, target_2)
and func_3(target_4, func, target_3)
and func_4(vvalue_regno_1078, vregs_1081, vsize_1083, target_4)
and vvalue_regno_1078.getType().hasName("int")
and vregs_1081.getType().hasName("bpf_reg_state *")
and vsize_1083.getType().hasName("int")
and vvalue_regno_1078.getFunction() = func
and vregs_1081.(LocalVariable).getFunction() = func
and vsize_1083.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
