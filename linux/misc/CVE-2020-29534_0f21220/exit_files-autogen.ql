/**
 * @name linux-0f2122045b946241a9e549c2a76cea54fa58a7ff-exit_files
 * @id cpp/linux/0f2122045b946241a9e549c2a76cea54fa58a7ff/exit-files
 * @description linux-0f2122045b946241a9e549c2a76cea54fa58a7ff-exit_files CVE-2020-29534
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vfiles_452, VariableAccess target_1, IfStmt target_2, ExprStmt target_3) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("io_uring_files_cancel")
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vfiles_452
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_2.getCondition().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vfiles_452, BlockStmt target_4, VariableAccess target_1) {
		target_1.getTarget()=vfiles_452
		and target_1.getParent().(IfStmt).getThen()=target_4
}

predicate func_2(Variable vfiles_452, IfStmt target_2) {
		target_2.getCondition().(VariableAccess).getTarget()=vfiles_452
		and target_2.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("task_lock")
		and target_2.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("task_struct *")
		and target_2.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="files"
		and target_2.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("task_struct *")
		and target_2.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

predicate func_3(Variable vfiles_452, ExprStmt target_3) {
		target_3.getExpr().(FunctionCall).getTarget().hasName("put_files_struct")
		and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vfiles_452
}

predicate func_4(Function func, BlockStmt target_4) {
		target_4.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("task_lock")
		and target_4.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("task_struct *")
		and target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="files"
		and target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("task_struct *")
		and target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and target_4.getEnclosingFunction() = func
}

from Function func, Variable vfiles_452, VariableAccess target_1, IfStmt target_2, ExprStmt target_3, BlockStmt target_4
where
not func_0(vfiles_452, target_1, target_2, target_3)
and func_1(vfiles_452, target_4, target_1)
and func_2(vfiles_452, target_2)
and func_3(vfiles_452, target_3)
and func_4(func, target_4)
and vfiles_452.getType().hasName("files_struct *")
and vfiles_452.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
