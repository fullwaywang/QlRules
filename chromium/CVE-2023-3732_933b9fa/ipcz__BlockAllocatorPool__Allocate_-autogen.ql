/**
 * @name chromium-933b9fad3a5396495f52e44259bcbb61e7913311-ipcz__BlockAllocatorPool__Allocate_
 * @id cpp/chromium/933b9fad3a5396495f52e44259bcbb61e7913311/ipczblockallocatorpoolallocate
 * @description chromium-933b9fad3a5396495f52e44259bcbb61e7913311-third_party/ipcz/src/ipcz/buffer_pool.cc-ipcz__BlockAllocatorPool__Allocate_ CVE-2023-3732
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vblock_64, Variable vdescriptor_86) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("FromDescriptorUnsafe")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vdescriptor_86
	and target_0.getArgument(1).(VariableAccess).getTarget()=vblock_64
)
}

predicate func_1(Variable vdescriptor_86, VariableAccess target_1) {
	target_1.getTarget()=vdescriptor_86
	and target_1.getParent().(ConstructorCall).getParent().(ReturnStmt).getExpr() instanceof ConstructorCall
}

predicate func_2(Variable vblock_64, VariableAccess target_2) {
	target_2.getTarget()=vblock_64
	and target_2.getParent().(ConstructorCall).getParent().(ReturnStmt).getExpr() instanceof ConstructorCall
}

predicate func_3(Variable vblock_64, Variable vdescriptor_86, ConstructorCall target_3) {
	target_3.getArgument(0).(VariableAccess).getTarget()=vdescriptor_86
	and target_3.getArgument(1).(VariableAccess).getTarget()=vblock_64
}

from Function func, Variable vblock_64, Variable vdescriptor_86, VariableAccess target_1, VariableAccess target_2, ConstructorCall target_3
where
not func_0(vblock_64, vdescriptor_86)
and func_1(vdescriptor_86, target_1)
and func_2(vblock_64, target_2)
and func_3(vblock_64, vdescriptor_86, target_3)
and vblock_64.getType().hasName("void *")
and vdescriptor_86.getType().hasName("FragmentDescriptor")
and vblock_64.(LocalVariable).getFunction() = func
and vdescriptor_86.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
