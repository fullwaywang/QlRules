/**
 * @name linux-6062a8dc0517bce23e3c2f7d2fea5e22411269a3-sem_obtain_lock
 * @id cpp/linux/6062a8dc0517bce23e3c2f7d2fea5e22411269a3/sem-obtain-lock
 * @description linux-6062a8dc0517bce23e3c2f7d2fea5e22411269a3-ipc/sem.c-sem_obtain_lock CVE-2013-4483
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vipcp_198, FunctionCall target_0) {
	target_0.getTarget().hasName("spin_lock")
	and not target_0.getTarget().hasName("sem_unlock")
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="lock"
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vipcp_198
}

predicate func_1(Variable vsma_199, ExprStmt target_8) {
exists(AssignExpr target_1 |
	target_1.getLValue().(VariableAccess).getTarget()=vsma_199
	and target_1.getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getType().hasName("const kern_ipc_perm *")
	and target_1.getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(PointerArithmeticOperation).getRightOperand().(BuiltInOperationBuiltInOffsetOf).getValue()="0"
	and target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_1.getLValue().(VariableAccess).getLocation()))
}

predicate func_2(Variable vsma_199, IfStmt target_9, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getType().hasName("int *")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("sem_lock")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsma_199
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getType().hasName("sembuf *")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getType().hasName("int")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_9.getLocation()))
}

predicate func_4(Function func) {
exists(PointerDereferenceExpr target_4 |
	target_4.getOperand().(VariableAccess).getType().hasName("int *")
	and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
	and target_4.getEnclosingFunction() = func)
}

predicate func_5(Variable vipcp_198, VariableAccess target_5) {
	target_5.getTarget()=vipcp_198
	and target_5.getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_6(Variable vipcp_198, NotExpr target_10, PointerFieldAccess target_6) {
	target_6.getTarget().getName()="lock"
	and target_6.getQualifier().(VariableAccess).getTarget()=vipcp_198
	and target_6.getQualifier().(VariableAccess).getLocation().isBefore(target_10.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_7(Variable vipcp_198, FunctionCall target_7) {
	target_7.getTarget().hasName("spin_unlock")
	and target_7.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="lock"
	and target_7.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vipcp_198
}

predicate func_8(Variable vipcp_198, Variable vsma_199, ExprStmt target_8) {
	target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsma_199
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("ERR_CAST")
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vipcp_198
}

predicate func_9(Variable vipcp_198, IfStmt target_9) {
	target_9.getCondition().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="deleted"
	and target_9.getCondition().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vipcp_198
	and target_9.getThen().(ReturnStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("const kern_ipc_perm *")
}

predicate func_10(Variable vipcp_198, NotExpr target_10) {
	target_10.getOperand().(PointerFieldAccess).getTarget().getName()="deleted"
	and target_10.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vipcp_198
}

from Function func, Variable vipcp_198, Variable vsma_199, FunctionCall target_0, VariableAccess target_5, PointerFieldAccess target_6, FunctionCall target_7, ExprStmt target_8, IfStmt target_9, NotExpr target_10
where
func_0(vipcp_198, target_0)
and not func_1(vsma_199, target_8)
and not func_2(vsma_199, target_9, func)
and not func_4(func)
and func_5(vipcp_198, target_5)
and func_6(vipcp_198, target_10, target_6)
and func_7(vipcp_198, target_7)
and func_8(vipcp_198, vsma_199, target_8)
and func_9(vipcp_198, target_9)
and func_10(vipcp_198, target_10)
and vipcp_198.getType().hasName("kern_ipc_perm *")
and vsma_199.getType().hasName("sem_array *")
and vipcp_198.(LocalVariable).getFunction() = func
and vsma_199.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
