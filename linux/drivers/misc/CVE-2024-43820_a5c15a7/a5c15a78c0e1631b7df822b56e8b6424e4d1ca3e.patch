commit a5c15a78c0e1631b7df822b56e8b6424e4d1ca3e
Author: Benjamin Marzinski <bmarzins@redhat.com>
Date:   Tue Jul 2 17:02:48 2024 +0200

    dm-raid: Fix WARN_ON_ONCE check for sync_thread in raid_resume
    
    [ Upstream commit 3199a34bfaf7561410e0be1e33a61eba870768fc ]
    
    rm-raid devices will occasionally trigger the following warning when
    being resumed after a table load because DM_RECOVERY_RUNNING is set:
    
    WARNING: CPU: 7 PID: 5660 at drivers/md/dm-raid.c:4105 raid_resume+0xee/0x100 [dm_raid]
    
    The failing check is:
    WARN_ON_ONCE(test_bit(MD_RECOVERY_RUNNING, &mddev->recovery));
    
    This check is designed to make sure that the sync thread isn't
    registered, but md_check_recovery can set MD_RECOVERY_RUNNING without
    the sync_thread ever getting registered. Instead of checking if
    MD_RECOVERY_RUNNING is set, check if sync_thread is non-NULL.
    
    Fixes: 16c4770c75b1 ("dm-raid: really frozen sync_thread during suspend")
    Suggested-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Benjamin Marzinski <bmarzins@redhat.com>
    Reviewed-by: Yu Kuai <yukuai3@huawei.com>
    Signed-off-by: Mikulas Patocka <mpatocka@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/drivers/md/dm-raid.c b/drivers/md/dm-raid.c
index abe88d1e6735..b149ac46a990 100644
--- a/drivers/md/dm-raid.c
+++ b/drivers/md/dm-raid.c
@@ -4101,10 +4101,11 @@ static void raid_resume(struct dm_target *ti)
 		if (mddev->delta_disks < 0)
 			rs_set_capacity(rs);
 
+		mddev_lock_nointr(mddev);
 		WARN_ON_ONCE(!test_bit(MD_RECOVERY_FROZEN, &mddev->recovery));
-		WARN_ON_ONCE(test_bit(MD_RECOVERY_RUNNING, &mddev->recovery));
+		WARN_ON_ONCE(rcu_dereference_protected(mddev->sync_thread,
+						       lockdep_is_held(&mddev->reconfig_mutex)));
 		clear_bit(RT_FLAG_RS_FROZEN, &rs->runtime_flags);
-		mddev_lock_nointr(mddev);
 		mddev->ro = 0;
 		mddev->in_sync = 0;
 		md_unfrozen_sync_thread(mddev);
