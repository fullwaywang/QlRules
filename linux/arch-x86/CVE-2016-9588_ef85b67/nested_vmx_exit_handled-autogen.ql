/**
 * @name linux-ef85b67385436ddc1998f45f1d6a210f935b3388-nested_vmx_exit_handled
 * @id cpp/linux/ef85b67385436ddc1998f45f1d6a210f935b3388/nested-vmx-exit-handled
 * @description linux-ef85b67385436ddc1998f45f1d6a210f935b3388-arch/x86/kvm/vmx.c-nested_vmx_exit_handled CVE-2016-9588
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vintr_info_8150, ReturnStmt target_2, FunctionCall target_0) {
	target_0.getTarget().hasName("is_exception")
	and not target_0.getTarget().hasName("is_nmi")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vintr_info_8150
	and target_0.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_2
}

predicate func_1(ReturnStmt target_2, Function func, NotExpr target_1) {
	target_1.getOperand() instanceof FunctionCall
	and target_1.getParent().(IfStmt).getThen()=target_2
	and target_1.getEnclosingFunction() = func
}

predicate func_2(NotExpr target_1, Function func, ReturnStmt target_2) {
	target_2.getParent().(IfStmt).getCondition()=target_1
	and target_2.getEnclosingFunction() = func
}

from Function func, Variable vintr_info_8150, FunctionCall target_0, NotExpr target_1, ReturnStmt target_2
where
func_0(vintr_info_8150, target_2, target_0)
and func_1(target_2, func, target_1)
and func_2(target_1, func, target_2)
and vintr_info_8150.getType().hasName("u32")
and vintr_info_8150.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
