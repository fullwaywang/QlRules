commit 38607f3b15a2e8a0ac1af747b3588a7ee8013fc1	38607f3b15a2e8a0ac1af747b3588a7ee8013fc1
Author: Eugene Zemtsov <eugene@chromium.org>
Date:   Wed May 24 22:36:53 2023 +0000

    webcodecs: Fuzz all config params of VideoEncoder
    
    Bug: 1447568
    Change-Id: I485be69140065fd32520c749cd36882621fcffe4
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4561206
    Reviewed-by: Dale Curtis <dalecurtis@chromium.org>
    Commit-Queue: Eugene Zemtsov <eugene@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1148797}

diff --git a/third_party/blink/renderer/modules/webcodecs/fuzzer_inputs.proto b/third_party/blink/renderer/modules/webcodecs/fuzzer_inputs.proto
index 28e8c6abc281c..158ddafdabc72 100644
--- a/third_party/blink/renderer/modules/webcodecs/fuzzer_inputs.proto
+++ b/third_party/blink/renderer/modules/webcodecs/fuzzer_inputs.proto
@@ -88,6 +88,29 @@ message ConfigureVideoEncoder {
     DENY = 1;
     REQUIRE = 2;
   }
+
+  enum ScalabilityMode {
+    L1T1 = 0;
+    L1T2 = 1;
+    L1T3 = 2;
+  }
+
+  enum LatencyMode {
+    QUALITY = 0;
+    REALTIME = 1;
+  }
+
+  enum VideoEncoderBitrateMode {
+    CONSTANT = 0;
+    VARIABLE = 1;
+    QUANTIZER = 2;
+  }
+
+  enum AlphaOption {
+    KEEP = 0;
+    DISCARD = 1;
+  }
+
   optional EncoderAccelerationPreference acceleration = 2;
 
   optional uint64 bitrate = 3;
@@ -97,6 +120,18 @@ message ConfigureVideoEncoder {
   optional uint32 width = 5;
 
   optional uint32 height = 6;
+
+  optional uint32 display_width = 7;
+
+  optional uint32 display_height = 8;
+
+  optional ScalabilityMode scalability_mode = 9;
+
+  optional VideoEncoderBitrateMode bitrate_mode = 10;
+
+  optional LatencyMode latency_mode = 11;
+
+  optional AlphaOption alpha = 12;
 }
 
 message ConfigureAudioDecoder {
@@ -193,7 +228,17 @@ message AudioDataInit {
 
 message EncodeVideo {
   optional VideoFrameBitmapInit frame = 1;
-  message EncodeOptions { optional bool key_frame = 1; }
+  message EncodeOptionsForAv1 {
+    optional uint32 quantizer = 1;
+  };
+  message EncodeOptionsForVp9 {
+    optional uint32 quantizer = 1;
+  };
+  message EncodeOptions {
+    optional bool key_frame = 1;
+    optional EncodeOptionsForAv1 av1 = 2;
+    optional EncodeOptionsForVp9 vp9 = 3;
+  }
   optional EncodeOptions options = 2;
 }
 
diff --git a/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_av1.textproto b/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_av1.textproto
index 0043bf0eb951e..2c3f09d64f2de 100644
--- a/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_av1.textproto
+++ b/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_av1.textproto
@@ -15,7 +15,13 @@ invocations: [
       bitrate: 1500000,
       framerate: 25,
       width: 200,
-      height: 50
+      height: 50,
+      display_width: 200,
+      display_height: 50,
+      bitrate_mode: CONSTANT,
+      scalability_mode: L1T2,
+      alpha: DISCARD,
+      latency_mode: REALTIME
     }
   },
   {
@@ -42,6 +48,9 @@ invocations: [
       },
       options {
         key_frame: true,
+        av1 {
+          quantizer: 30
+        }
       }
     }
   },
diff --git a/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_h264.textproto b/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_h264.textproto
index 45bfc23f5dc7a..2b6accdc7178f 100644
--- a/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_h264.textproto
+++ b/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_h264.textproto
@@ -15,7 +15,14 @@ invocations: [
       bitrate: 1500000,
       framerate: 25,
       width: 200,
-      height: 50
+      height: 50,
+      display_width: 200,
+      display_height: 50,
+      bitrate_mode: CONSTANT,
+      scalability_mode: L1T3,
+      alpha: DISCARD,
+      latency_mode: QUALITY
+
     }
   },
   {
diff --git a/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_vp8.textproto b/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_vp8.textproto
index 7bfde87c75284..0949923da05ce 100644
--- a/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_vp8.textproto
+++ b/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_vp8.textproto
@@ -15,7 +15,13 @@ invocations: [
       bitrate: 1500000,
       framerate: 25,
       width: 200,
-      height: 50
+      height: 50,
+      display_width: 200,
+      display_height: 50,
+      bitrate_mode: VARIABLE,
+      scalability_mode: L1T3,
+      alpha: DISCARD,
+      latency_mode: QUALITY
     }
   },
   {
diff --git a/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_vp9.textproto b/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_vp9.textproto
index 334d3f560dd80..aa6158c89773a 100644
--- a/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_vp9.textproto
+++ b/third_party/blink/renderer/modules/webcodecs/fuzzer_seed_corpus/video_encoder/encode_vp9.textproto
@@ -15,7 +15,13 @@ invocations: [
       bitrate: 1500000,
       framerate: 25,
       width: 200,
-      height: 50
+      height: 50,
+      display_width: 200,
+      display_height: 50,
+      bitrate_mode: VARIABLE,
+      scalability_mode: L1T1,
+      alpha: KEEP,
+      latency_mode: QUALITY
     }
   },
   {
@@ -42,6 +48,9 @@ invocations: [
       },
       options {
         key_frame: true,
+        vp9 {
+          quantizer: 35
+        }
       }
     }
   },
diff --git a/third_party/blink/renderer/modules/webcodecs/fuzzer_utils.cc b/third_party/blink/renderer/modules/webcodecs/fuzzer_utils.cc
index c269043c03b8e..a48dfcc8bf79a 100644
--- a/third_party/blink/renderer/modules/webcodecs/fuzzer_utils.cc
+++ b/third_party/blink/renderer/modules/webcodecs/fuzzer_utils.cc
@@ -25,6 +25,8 @@
 #include "third_party/blink/renderer/bindings/modules/v8/v8_video_decoder_config.h"
 #include "third_party/blink/renderer/bindings/modules/v8/v8_video_decoder_init.h"
 #include "third_party/blink/renderer/bindings/modules/v8/v8_video_encoder_config.h"
+#include "third_party/blink/renderer/bindings/modules/v8/v8_video_encoder_encode_options_for_av_1.h"
+#include "third_party/blink/renderer/bindings/modules/v8/v8_video_encoder_encode_options_for_vp_9.h"
 #include "third_party/blink/renderer/bindings/modules/v8/v8_video_frame_buffer_init.h"
 #include "third_party/blink/renderer/bindings/modules/v8/v8_video_frame_init.h"
 #include "third_party/blink/renderer/core/html/canvas/image_data.h"
@@ -109,6 +111,21 @@ VideoEncoderConfig* MakeVideoEncoderConfig(
   config->setFramerate(proto.framerate());
   config->setWidth(proto.width());
   config->setHeight(proto.height());
+  config->setDisplayWidth(proto.display_width());
+  config->setDisplayHeight(proto.display_height());
+
+  if (proto.has_alpha()) {
+    config->setAlpha(ToAlphaOption(proto.alpha()));
+  }
+  if (proto.has_bitrate_mode()) {
+    config->setBitrateMode(ToBitrateMode(proto.bitrate_mode()));
+  }
+  if (proto.has_scalability_mode()) {
+    config->setScalabilityMode(ToScalabilityMode(proto.scalability_mode()));
+  }
+  if (proto.has_latency_mode()) {
+    config->setLatencyMode(ToLatencyMode(proto.latency_mode()));
+  }
 
   // Bitrate is truly optional, so don't just take the proto default value.
   if (proto.has_bitrate())
@@ -148,6 +165,48 @@ String ToAccelerationType(
   }
 }
 
+String ToBitrateMode(
+    wc_fuzzer::ConfigureVideoEncoder_VideoEncoderBitrateMode mode) {
+  switch (mode) {
+    case wc_fuzzer::ConfigureVideoEncoder_VideoEncoderBitrateMode_CONSTANT:
+      return "constant";
+    case wc_fuzzer::ConfigureVideoEncoder_VideoEncoderBitrateMode_VARIABLE:
+      return "variable";
+    case wc_fuzzer::ConfigureVideoEncoder_VideoEncoderBitrateMode_QUANTIZER:
+      return "quantizer";
+  }
+}
+
+String ToScalabilityMode(
+    wc_fuzzer::ConfigureVideoEncoder_ScalabilityMode mode) {
+  switch (mode) {
+    case wc_fuzzer::ConfigureVideoEncoder_ScalabilityMode_L1T1:
+      return "L1T1";
+    case wc_fuzzer::ConfigureVideoEncoder_ScalabilityMode_L1T2:
+      return "L1T2";
+    case wc_fuzzer::ConfigureVideoEncoder_ScalabilityMode_L1T3:
+      return "L1T3";
+  }
+}
+
+String ToLatencyMode(wc_fuzzer::ConfigureVideoEncoder_LatencyMode mode) {
+  switch (mode) {
+    case wc_fuzzer::ConfigureVideoEncoder_LatencyMode_QUALITY:
+      return "quality";
+    case wc_fuzzer::ConfigureVideoEncoder_LatencyMode_REALTIME:
+      return "realtime";
+  }
+}
+
+String ToAlphaOption(wc_fuzzer::ConfigureVideoEncoder_AlphaOption option) {
+  switch (option) {
+    case wc_fuzzer::ConfigureVideoEncoder_AlphaOption_KEEP:
+      return "keep";
+    case wc_fuzzer::ConfigureVideoEncoder_AlphaOption_DISCARD:
+      return "discard";
+  }
+}
+
 String ToAacFormat(wc_fuzzer::AacFormat format) {
   switch (format) {
     case wc_fuzzer::AAC:
@@ -247,6 +306,18 @@ VideoEncoderEncodeOptions* MakeEncodeOptions(
   if (proto.has_key_frame())
     options->setKeyFrame(proto.key_frame());
 
+  if (proto.has_av1() && proto.av1().has_quantizer()) {
+    auto* av1 = VideoEncoderEncodeOptionsForAv1::Create();
+    av1->setQuantizer(proto.av1().quantizer());
+    options->setAv1(av1);
+  }
+
+  if (proto.has_vp9() && proto.vp9().has_quantizer()) {
+    auto* vp9 = VideoEncoderEncodeOptionsForVp9::Create();
+    vp9->setQuantizer(proto.vp9().quantizer());
+    options->setVp9(vp9);
+  }
+
   return options;
 }
 
diff --git a/third_party/blink/renderer/modules/webcodecs/fuzzer_utils.h b/third_party/blink/renderer/modules/webcodecs/fuzzer_utils.h
index e53e5b0aca3e0..a630bf44c985d 100644
--- a/third_party/blink/renderer/modules/webcodecs/fuzzer_utils.h
+++ b/third_party/blink/renderer/modules/webcodecs/fuzzer_utils.h
@@ -85,6 +85,15 @@ AudioDataCopyToOptions* MakeAudioDataCopyToOptions(
 VideoEncoderEncodeOptions* MakeEncodeOptions(
     const wc_fuzzer::EncodeVideo_EncodeOptions& proto);
 
+String ToBitrateMode(
+    wc_fuzzer::ConfigureVideoEncoder_VideoEncoderBitrateMode mode);
+
+String ToScalabilityMode(wc_fuzzer::ConfigureVideoEncoder_ScalabilityMode mode);
+
+String ToLatencyMode(wc_fuzzer::ConfigureVideoEncoder_LatencyMode mode);
+
+String ToAlphaOption(wc_fuzzer::ConfigureVideoEncoder_AlphaOption option);
+
 String ToAacFormat(wc_fuzzer::AacFormat format);
 
 String ToAccelerationType(
diff --git a/third_party/blink/renderer/modules/webcodecs/video_encoder.cc b/third_party/blink/renderer/modules/webcodecs/video_encoder.cc
index a624fc22a876e..d152d64d6c57f 100644
--- a/third_party/blink/renderer/modules/webcodecs/video_encoder.cc
+++ b/third_party/blink/renderer/modules/webcodecs/video_encoder.cc
@@ -962,6 +962,11 @@ media::VideoEncoder::EncodeOptions VideoEncoder::CreateEncodeOptions(
                      request->encodeOpts->keyFrameNonNull();
   switch (active_config_->codec) {
     case media::VideoCodec::kAV1: {
+      if (!active_config_->options.bitrate.has_value() ||
+          active_config_->options.bitrate->mode() !=
+              media::Bitrate::Mode::kExternal) {
+        break;
+      }
       if (!request->encodeOpts->hasAv1() ||
           !request->encodeOpts->av1()->hasQuantizer()) {
         break;
@@ -970,6 +975,11 @@ media::VideoEncoder::EncodeOptions VideoEncoder::CreateEncodeOptions(
       break;
     }
     case media::VideoCodec::kVP9: {
+      if (!active_config_->options.bitrate.has_value() ||
+          active_config_->options.bitrate->mode() !=
+              media::Bitrate::Mode::kExternal) {
+        break;
+      }
       if (!request->encodeOpts->hasVp9() ||
           !request->encodeOpts->vp9()->hasQuantizer()) {
         break;
