/**
 * @name linux-208cd22ef5e57f82d38ec11c1a1703f9401d6dde-mptcp_stream_connect
 * @id cpp/linux/208cd22ef5e57f82d38ec11c1a1703f9401d6dde/mptcp-stream-connect
 * @description linux-208cd22ef5e57f82d38ec11c1a1703f9401d6dde-net/mptcp/protocol.c-mptcp_stream_connect CVE-2024-40931
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vmsk_2615, ExprStmt target_1, ExprStmt target_2, Function func) {
exists(ExprStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="snd_una"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vmsk_2615
			)
		)
		and exists(PointerFieldAccess obj_3 | obj_3=obj_0.getArgument(1) |
			obj_3.getTarget().getName()="write_seq"
			and obj_3.getQualifier().(VariableAccess).getTarget()=vmsk_2615
		)
		and obj_0.getTarget().hasName("atomic64_set")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Function func, ExprStmt target_1) {
	exists(AssignExpr obj_0 | obj_0=target_1.getExpr() |
		exists(VariableCall obj_1 | obj_1=obj_0.getRValue() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getExpr() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="ops"
					and obj_3.getQualifier().(VariableAccess).getTarget().getType().hasName("socket *")
				)
				and obj_2.getTarget().getName()="connect"
			)
			and obj_1.getArgument(0).(VariableAccess).getTarget().getType().hasName("socket *")
			and obj_1.getArgument(1).(VariableAccess).getTarget().getType().hasName("sockaddr *")
			and obj_1.getArgument(2).(VariableAccess).getTarget().getType().hasName("int")
			and obj_1.getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
		)
		and obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("int")
	)
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vmsk_2615, ExprStmt target_2) {
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(PointerDereferenceExpr obj_1 | obj_1=obj_0.getLValue() |
			exists(AddressOfExpr obj_2 | obj_2=obj_1.getOperand() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getOperand() |
					obj_3.getTarget().getName()="write_seq"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vmsk_2615
				)
			)
		)
		and exists(PointerFieldAccess obj_4 | obj_4=obj_0.getRValue() |
			obj_4.getTarget().getName()="idsn"
			and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("mptcp_subflow_context *")
		)
	)
}

from Function func, Variable vmsk_2615, ExprStmt target_1, ExprStmt target_2
where
not func_0(vmsk_2615, target_1, target_2, func)
and func_1(func, target_1)
and func_2(vmsk_2615, target_2)
and vmsk_2615.getType().hasName("mptcp_sock *")
and vmsk_2615.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
