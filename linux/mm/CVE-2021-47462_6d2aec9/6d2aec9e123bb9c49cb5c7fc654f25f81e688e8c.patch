commit 6d2aec9e123bb9c49cb5c7fc654f25f81e688e8c
Author: Eric Dumazet <edumazet@google.com>
Date:   Mon Oct 18 15:15:49 2021 -0700

    mm/mempolicy: do not allow illegal MPOL_F_NUMA_BALANCING | MPOL_LOCAL in mbind()
    
    syzbot reported access to unitialized memory in mbind() [1]
    
    Issue came with commit bda420b98505 ("numa balancing: migrate on fault
    among multiple bound nodes")
    
    This commit added a new bit in MPOL_MODE_FLAGS, but only checked valid
    combination (MPOL_F_NUMA_BALANCING can only be used with MPOL_BIND) in
    do_set_mempolicy()
    
    This patch moves the check in sanitize_mpol_flags() so that it is also
    used by mbind()
    
      [1]
      BUG: KMSAN: uninit-value in __mpol_equal+0x567/0x590 mm/mempolicy.c:2260
       __mpol_equal+0x567/0x590 mm/mempolicy.c:2260
       mpol_equal include/linux/mempolicy.h:105 [inline]
       vma_merge+0x4a1/0x1e60 mm/mmap.c:1190
       mbind_range+0xcc8/0x1e80 mm/mempolicy.c:811
       do_mbind+0xf42/0x15f0 mm/mempolicy.c:1333
       kernel_mbind mm/mempolicy.c:1483 [inline]
       __do_sys_mbind mm/mempolicy.c:1490 [inline]
       __se_sys_mbind+0x437/0xb80 mm/mempolicy.c:1486
       __x64_sys_mbind+0x19d/0x200 mm/mempolicy.c:1486
       do_syscall_x64 arch/x86/entry/common.c:51 [inline]
       do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
      Uninit was created at:
       slab_alloc_node mm/slub.c:3221 [inline]
       slab_alloc mm/slub.c:3230 [inline]
       kmem_cache_alloc+0x751/0xff0 mm/slub.c:3235
       mpol_new mm/mempolicy.c:293 [inline]
       do_mbind+0x912/0x15f0 mm/mempolicy.c:1289
       kernel_mbind mm/mempolicy.c:1483 [inline]
       __do_sys_mbind mm/mempolicy.c:1490 [inline]
       __se_sys_mbind+0x437/0xb80 mm/mempolicy.c:1486
       __x64_sys_mbind+0x19d/0x200 mm/mempolicy.c:1486
       do_syscall_x64 arch/x86/entry/common.c:51 [inline]
       do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82
       entry_SYSCALL_64_after_hwframe+0x44/0xae
      =====================================================
      Kernel panic - not syncing: panic_on_kmsan set ...
      CPU: 0 PID: 15049 Comm: syz-executor.0 Tainted: G    B             5.15.0-rc2-syzkaller #0
      Hardware name: Google Google Compute Engine/Google Compute Engine, BIOS Google 01/01/2011
      Call Trace:
       __dump_stack lib/dump_stack.c:88 [inline]
       dump_stack_lvl+0x1ff/0x28e lib/dump_stack.c:106
       dump_stack+0x25/0x28 lib/dump_stack.c:113
       panic+0x44f/0xdeb kernel/panic.c:232
       kmsan_report+0x2ee/0x300 mm/kmsan/report.c:186
       __msan_warning+0xd7/0x150 mm/kmsan/instrumentation.c:208
       __mpol_equal+0x567/0x590 mm/mempolicy.c:2260
       mpol_equal include/linux/mempolicy.h:105 [inline]
       vma_merge+0x4a1/0x1e60 mm/mmap.c:1190
       mbind_range+0xcc8/0x1e80 mm/mempolicy.c:811
       do_mbind+0xf42/0x15f0 mm/mempolicy.c:1333
       kernel_mbind mm/mempolicy.c:1483 [inline]
       __do_sys_mbind mm/mempolicy.c:1490 [inline]
       __se_sys_mbind+0x437/0xb80 mm/mempolicy.c:1486
       __x64_sys_mbind+0x19d/0x200 mm/mempolicy.c:1486
       do_syscall_x64 arch/x86/entry/common.c:51 [inline]
       do_syscall_64+0x54/0xd0 arch/x86/entry/common.c:82
       entry_SYSCALL_64_after_hwframe+0x44/0xae
    
    Link: https://lkml.kernel.org/r/20211001215630.810592-1-eric.dumazet@gmail.com
    Fixes: bda420b98505 ("numa balancing: migrate on fault among multiple bound nodes")
    Signed-off-by: Eric Dumazet <edumazet@google.com>
    Reported-by: syzbot <syzkaller@googlegroups.com>
    Acked-by: Mel Gorman <mgorman@suse.de>
    Cc: "Huang, Ying" <ying.huang@intel.com>
    Cc: Matthew Wilcox <willy@infradead.org>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/mm/mempolicy.c b/mm/mempolicy.c
index 1592b081c58e..d12e0608fced 100644
--- a/mm/mempolicy.c
+++ b/mm/mempolicy.c
@@ -856,16 +856,6 @@ static long do_set_mempolicy(unsigned short mode, unsigned short flags,
 		goto out;
 	}
 
-	if (flags & MPOL_F_NUMA_BALANCING) {
-		if (new && new->mode == MPOL_BIND) {
-			new->flags |= (MPOL_F_MOF | MPOL_F_MORON);
-		} else {
-			ret = -EINVAL;
-			mpol_put(new);
-			goto out;
-		}
-	}
-
 	ret = mpol_set_nodemask(new, nodes, scratch);
 	if (ret) {
 		mpol_put(new);
@@ -1458,7 +1448,11 @@ static inline int sanitize_mpol_flags(int *mode, unsigned short *flags)
 		return -EINVAL;
 	if ((*flags & MPOL_F_STATIC_NODES) && (*flags & MPOL_F_RELATIVE_NODES))
 		return -EINVAL;
-
+	if (*flags & MPOL_F_NUMA_BALANCING) {
+		if (*mode != MPOL_BIND)
+			return -EINVAL;
+		*flags |= (MPOL_F_MOF | MPOL_F_MORON);
+	}
 	return 0;
 }
 
