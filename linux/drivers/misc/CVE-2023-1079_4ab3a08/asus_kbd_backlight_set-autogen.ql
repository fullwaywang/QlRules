/**
 * @name linux-4ab3a086d10eeec1424f2e8a968827a6336203df-asus_kbd_backlight_set
 * @id cpp/linux/4ab3a086d10eeec1424f2e8a968827a6336203df/asus-kbd-backlight-set
 * @description linux-4ab3a086d10eeec1424f2e8a968827a6336203df-drivers/hid/hid-asus.c-asus_kbd_backlight_set CVE-2023-1079
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vled_497) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("asus_schedule_work")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vled_497)
}

predicate func_1(Variable vled_497, VariableAccess target_1) {
	target_1.getTarget()=vled_497
	and target_1.getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_2(Variable vled_497, FunctionCall target_2) {
	target_2.getTarget().hasName("schedule_work")
	and target_2.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="work"
	and target_2.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vled_497
}

from Function func, Variable vled_497, VariableAccess target_1, FunctionCall target_2
where
not func_0(vled_497)
and func_1(vled_497, target_1)
and func_2(vled_497, target_2)
and vled_497.getType().hasName("asus_kbd_leds *")
and vled_497.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
