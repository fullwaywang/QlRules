/**
 * @name linux-d5aa407f-ipip_init
 * @id cpp/linux/d5aa407f/ipip-init
 * @description linux-d5aa407f-net/ipv4/ipip.c-ipip_init CVE-2011-1767
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vipip_handler, VariableAccess target_0) {
		target_0.getTarget()=vipip_handler
		and target_0.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(IfStmt).getCondition().(FunctionCall).getTarget().hasName("xfrm4_tunnel_register")
		and target_0.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(IfStmt).getCondition().(FunctionCall).getArgument(1).(Literal).getValue()="2"
}

/*predicate func_1(Variable vipip_handler, Literal target_1) {
		target_1.getValue()="2"
		and not target_1.getValue()="10"
		and target_1.getParent().(FunctionCall).getParent().(IfStmt).getCondition().(FunctionCall).getTarget().hasName("xfrm4_tunnel_register")
		and target_1.getParent().(FunctionCall).getParent().(IfStmt).getCondition().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vipip_handler
}

*/
predicate func_2(Function func, StringLiteral target_2) {
		target_2.getValue()="<6>ipip init: can't register tunnel\n"
		and not target_2.getValue()="<6>IPv6 over IPv4 tunneling driver\n"
		and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vipip_net_ops, VariableAccess target_3) {
		target_3.getTarget()=vipip_net_ops
		and target_3.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("register_pernet_device")
}

predicate func_4(Function func, Literal target_4) {
		target_4.getValue()="11"
		and not target_4.getValue()="0"
		and target_4.getParent().(UnaryMinusExpr).getParent().(ReturnStmt).getExpr() instanceof UnaryMinusExpr
		and target_4.getEnclosingFunction() = func
}

predicate func_5(Function func, Literal target_5) {
		target_5.getValue()="2"
		and not target_5.getValue()="0"
		and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
		and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable verr_829, BlockStmt target_17) {
	exists(RelationalOperation target_6 |
		 (target_6 instanceof GTExpr or target_6 instanceof LTExpr)
		and target_6.getLesserOperand().(VariableAccess).getTarget()=verr_829
		and target_6.getGreaterOperand().(Literal).getValue()="0"
		and target_6.getParent().(IfStmt).getThen()=target_17)
}

predicate func_7(Variable verr_829, IfStmt target_18, ReturnStmt target_12) {
	exists(AssignExpr target_7 |
		target_7.getLValue().(VariableAccess).getTarget()=verr_829
		and target_7.getRValue().(FunctionCall).getTarget().hasName("xfrm4_tunnel_register")
		and target_7.getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("xfrm_tunnel")
		and target_7.getRValue().(FunctionCall).getArgument(1).(Literal).getValue()="10"
		and target_18.getCondition().(VariableAccess).getLocation().isBefore(target_7.getLValue().(VariableAccess).getLocation())
		and target_7.getLValue().(VariableAccess).getLocation().isBefore(target_12.getExpr().(VariableAccess).getLocation()))
}

predicate func_8(Variable verr_829, ExprStmt target_19, ExprStmt target_20, IfStmt target_18) {
	exists(RelationalOperation target_8 |
		 (target_8 instanceof GTExpr or target_8 instanceof LTExpr)
		and target_8.getLesserOperand().(VariableAccess).getTarget()=verr_829
		and target_8.getGreaterOperand().(Literal).getValue()="0"
		and target_8.getParent().(IfStmt).getThen()=target_19
		and target_20.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_8.getLesserOperand().(VariableAccess).getLocation())
		and target_8.getLesserOperand().(VariableAccess).getLocation().isBefore(target_18.getCondition().(VariableAccess).getLocation()))
}

predicate func_9(FunctionCall target_21, Function func) {
	exists(ExprStmt target_9 |
		target_9.getExpr().(FunctionCall).getTarget().hasName("unregister_pernet_device")
		and target_9.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("pernet_operations")
		and target_9.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_9
		and target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_21
		and target_9.getEnclosingFunction() = func)
}

predicate func_12(Variable verr_829, Function func, ReturnStmt target_12) {
		target_12.getExpr().(VariableAccess).getTarget()=verr_829
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_12
}

predicate func_13(Variable verr_829, ExprStmt target_19, VariableAccess target_13) {
		target_13.getTarget()=verr_829
		and target_13.getParent().(IfStmt).getThen()=target_19
}

predicate func_14(Variable vbanner, VariableAccess target_14) {
		target_14.getTarget()=vbanner
		and target_14.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("printk")
}

predicate func_15(Function func, UnaryMinusExpr target_15) {
		target_15.getValue()="-11"
		and target_15.getEnclosingFunction() = func
}

predicate func_16(Variable vipip_handler, FunctionCall target_16) {
		target_16.getTarget().hasName("xfrm4_tunnel_deregister")
		and target_16.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vipip_handler
		and target_16.getArgument(1) instanceof Literal
}

predicate func_17(Function func, BlockStmt target_17) {
		target_17.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("printk")
		and target_17.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0) instanceof StringLiteral
		and target_17.getStmt(1).(ReturnStmt).getExpr() instanceof UnaryMinusExpr
		and target_17.getEnclosingFunction() = func
}

predicate func_18(Variable verr_829, IfStmt target_18) {
		target_18.getCondition().(VariableAccess).getTarget()=verr_829
		and target_18.getThen().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_19(Function func, ExprStmt target_19) {
		target_19.getExpr() instanceof FunctionCall
		and target_19.getEnclosingFunction() = func
}

predicate func_20(Variable vipip_net_ops, Variable verr_829, ExprStmt target_20) {
		target_20.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_829
		and target_20.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("register_pernet_device")
		and target_20.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vipip_net_ops
}

predicate func_21(Variable vipip_handler, FunctionCall target_21) {
		target_21.getTarget().hasName("xfrm4_tunnel_register")
		and target_21.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vipip_handler
		and target_21.getArgument(1) instanceof Literal
}

from Function func, Variable vipip_handler, Variable vipip_net_ops, Variable vbanner, Variable verr_829, VariableAccess target_0, StringLiteral target_2, VariableAccess target_3, Literal target_4, Literal target_5, ReturnStmt target_12, VariableAccess target_13, VariableAccess target_14, UnaryMinusExpr target_15, FunctionCall target_16, BlockStmt target_17, IfStmt target_18, ExprStmt target_19, ExprStmt target_20, FunctionCall target_21
where
func_0(vipip_handler, target_0)
and func_2(func, target_2)
and func_3(vipip_net_ops, target_3)
and func_4(func, target_4)
and func_5(func, target_5)
and not func_6(verr_829, target_17)
and not func_7(verr_829, target_18, target_12)
and not func_8(verr_829, target_19, target_20, target_18)
and not func_9(target_21, func)
and func_12(verr_829, func, target_12)
and func_13(verr_829, target_19, target_13)
and func_14(vbanner, target_14)
and func_15(func, target_15)
and func_16(vipip_handler, target_16)
and func_17(func, target_17)
and func_18(verr_829, target_18)
and func_19(func, target_19)
and func_20(vipip_net_ops, verr_829, target_20)
and func_21(vipip_handler, target_21)
and vipip_handler.getType().hasName("xfrm_tunnel")
and vipip_net_ops.getType().hasName("pernet_operations")
and vbanner.getType() instanceof ArrayType
and verr_829.getType().hasName("int")
and not vipip_handler.getParentScope+() = func
and not vipip_net_ops.getParentScope+() = func
and not vbanner.getParentScope+() = func
and verr_829.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
