/**
 * @name linux-574823bfab82d9d8fa47f422778043fbb4b4f50e-mincore_pte_range
 * @id cpp/linux/574823bfab82d9d8fa47f422778043fbb4b4f50e/mincore-pte-range
 * @description linux-574823bfab82d9d8fa47f422778043fbb4b4f50e-mm/mincore.c-mincore_pte_range CVE-2019-5489
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vvec_120, ExprStmt target_11, ExprStmt target_9, Literal target_0) {
	target_0.getValue()="1"
	and not target_0.getValue()="0"
	and target_0.getParent().(AssignExpr).getParent().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vvec_120
	and target_11.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getLocation().isBefore(target_0.getParent().(AssignExpr).getParent().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getLocation())
	and target_0.getParent().(AssignExpr).getParent().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getLocation().isBefore(target_9.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getLocation())
}

predicate func_1(Function func, Literal target_1) {
	target_1.getValue()="12"
	and not target_1.getValue()="1"
	and target_1.getParent().(LShiftExpr).getParent().(AddExpr).getRightOperand() instanceof BinaryBitwiseOperation
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vvec_120, Variable vnr_121, ExprStmt target_13, ExprStmt target_14) {
exists(FunctionCall target_2 |
	target_2.getTarget().hasName("__memset")
	and target_2.getArgument(0).(VariableAccess).getTarget()=vvec_120
	and target_2.getArgument(1).(Literal).getValue()="1"
	and target_2.getArgument(2).(VariableAccess).getTarget()=vnr_121
	and target_13.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_2.getArgument(2).(VariableAccess).getLocation())
	and target_2.getArgument(2).(VariableAccess).getLocation().isBefore(target_14.getExpr().(AssignPointerAddExpr).getRValue().(VariableAccess).getLocation()))
}

predicate func_3(Variable vvec_120) {
exists(NotExpr target_3 |
	target_3.getOperand().(NotExpr).getOperand() instanceof FunctionCall
	and target_3.getParent().(AssignExpr).getRValue() = target_3
	and target_3.getParent().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vvec_120)
}

predicate func_4(Variable ventry_145, BlockStmt target_15, FunctionCall target_4) {
	target_4.getTarget().hasName("non_swap_entry")
	and target_4.getArgument(0).(VariableAccess).getTarget()=ventry_145
	and target_4.getParent().(IfStmt).getThen()=target_15
}

predicate func_5(Variable vvec_120, VariableAccess target_5) {
	target_5.getTarget()=vvec_120
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_6(Parameter vend_114, Variable vvma_118, Variable vvec_120, Parameter vaddr_114, FunctionCall target_6) {
	target_6.getTarget().hasName("__mincore_unmapped_range")
	and target_6.getArgument(0).(VariableAccess).getTarget()=vaddr_114
	and target_6.getArgument(1).(VariableAccess).getTarget()=vend_114
	and target_6.getArgument(2).(VariableAccess).getTarget()=vvma_118
	and target_6.getArgument(3).(VariableAccess).getTarget()=vvec_120
}

predicate func_7(Variable vvma_118, Variable vvec_120, Parameter vaddr_114, FunctionCall target_7) {
	target_7.getTarget().hasName("__mincore_unmapped_range")
	and target_7.getArgument(0).(VariableAccess).getTarget()=vaddr_114
	and target_7.getArgument(1).(AddExpr).getLeftOperand().(VariableAccess).getTarget()=vaddr_114
	and target_7.getArgument(1).(AddExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="4096"
	and target_7.getArgument(2).(VariableAccess).getTarget()=vvma_118
	and target_7.getArgument(3).(VariableAccess).getTarget()=vvec_120
}

predicate func_8(Variable vvec_120, Variable ventry_145, FunctionCall target_16, IfStmt target_8) {
	target_8.getCondition() instanceof FunctionCall
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vvec_120
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue() instanceof Literal
	and target_8.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vvec_120
	and target_8.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("mincore_page")
	and target_8.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(FunctionCall).getTarget().hasName("swp_offset")
	and target_8.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ventry_145
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_16
}

predicate func_9(Variable vvec_120, Variable ventry_145, Variable vswapper_spaces, ExprStmt target_9) {
	target_9.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vvec_120
	and target_9.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("mincore_page")
	and target_9.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vswapper_spaces
	and target_9.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(ArrayExpr).getArrayOffset().(FunctionCall).getTarget().hasName("swp_type")
	and target_9.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(BinaryBitwiseOperation).getLeftOperand().(FunctionCall).getTarget().hasName("swp_offset")
	and target_9.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(BinaryBitwiseOperation).getRightOperand().(Literal).getValue()="14"
	and target_9.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(FunctionCall).getTarget().hasName("swp_offset")
	and target_9.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ventry_145
}

/*predicate func_10(Variable vvec_120, Variable ventry_145, Variable vswapper_spaces, FunctionCall target_10) {
	target_10.getTarget().hasName("mincore_page")
	and target_10.getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vswapper_spaces
	and target_10.getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(ArrayExpr).getArrayOffset().(FunctionCall).getTarget().hasName("swp_type")
	and target_10.getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(ArrayExpr).getArrayOffset().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ventry_145
	and target_10.getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(BinaryBitwiseOperation).getLeftOperand().(FunctionCall).getTarget().hasName("swp_offset")
	and target_10.getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(BinaryBitwiseOperation).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ventry_145
	and target_10.getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(BinaryBitwiseOperation).getRightOperand().(Literal).getValue()="14"
	and target_10.getArgument(1).(FunctionCall).getTarget().hasName("swp_offset")
	and target_10.getArgument(1).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ventry_145
	and target_10.getParent().(AssignExpr).getRValue() = target_10
	and target_10.getParent().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vvec_120
}

*/
predicate func_11(Variable vvec_120, FunctionCall target_17, ExprStmt target_11) {
	target_11.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vvec_120
	and target_11.getExpr().(AssignExpr).getRValue().(Literal).getValue()="1"
	and target_11.getParent().(IfStmt).getParent().(IfStmt).getCondition()=target_17
}

predicate func_13(Variable vvec_120, Variable vnr_121, ExprStmt target_13) {
	target_13.getExpr().(FunctionCall).getTarget().hasName("__memset")
	and target_13.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvec_120
	and target_13.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="1"
	and target_13.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vnr_121
}

predicate func_14(Variable vnr_121, ExprStmt target_14) {
	target_14.getExpr().(AssignPointerAddExpr).getLValue().(PointerFieldAccess).getTarget().getName()="private"
	and target_14.getExpr().(AssignPointerAddExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("mm_walk *")
	and target_14.getExpr().(AssignPointerAddExpr).getRValue().(VariableAccess).getTarget()=vnr_121
}

predicate func_15(Variable vvec_120, BlockStmt target_15) {
	target_15.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vvec_120
	and target_15.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue() instanceof Literal
}

predicate func_16(Function func, FunctionCall target_16) {
	target_16.getTarget().hasName("pte_present")
	and target_16.getArgument(0).(VariableAccess).getTarget().getType().hasName("pte_t")
	and target_16.getEnclosingFunction() = func
}

predicate func_17(Function func, FunctionCall target_17) {
	target_17.getTarget().hasName("pte_none")
	and target_17.getArgument(0).(VariableAccess).getTarget().getType().hasName("pte_t")
	and target_17.getEnclosingFunction() = func
}

from Function func, Parameter vend_114, Variable vvma_118, Variable vvec_120, Variable vnr_121, Variable ventry_145, Variable vswapper_spaces, Parameter vaddr_114, Literal target_0, Literal target_1, FunctionCall target_4, VariableAccess target_5, FunctionCall target_6, FunctionCall target_7, IfStmt target_8, ExprStmt target_9, ExprStmt target_11, ExprStmt target_13, ExprStmt target_14, BlockStmt target_15, FunctionCall target_16, FunctionCall target_17
where
func_0(vvec_120, target_11, target_9, target_0)
and func_1(func, target_1)
and not func_2(vvec_120, vnr_121, target_13, target_14)
and not func_3(vvec_120)
and func_4(ventry_145, target_15, target_4)
and func_5(vvec_120, target_5)
and func_6(vend_114, vvma_118, vvec_120, vaddr_114, target_6)
and func_7(vvma_118, vvec_120, vaddr_114, target_7)
and func_8(vvec_120, ventry_145, target_16, target_8)
and func_9(vvec_120, ventry_145, vswapper_spaces, target_9)
and func_11(vvec_120, target_17, target_11)
and func_13(vvec_120, vnr_121, target_13)
and func_14(vnr_121, target_14)
and func_15(vvec_120, target_15)
and func_16(func, target_16)
and func_17(func, target_17)
and vend_114.getType().hasName("unsigned long")
and vvma_118.getType().hasName("vm_area_struct *")
and vvec_120.getType().hasName("unsigned char *")
and vnr_121.getType().hasName("int")
and ventry_145.getType().hasName("swp_entry_t")
and vswapper_spaces.getType() instanceof ArrayType
and vaddr_114.getType().hasName("unsigned long")
and vend_114.getFunction() = func
and vvma_118.(LocalVariable).getFunction() = func
and vvec_120.(LocalVariable).getFunction() = func
and vnr_121.(LocalVariable).getFunction() = func
and ventry_145.(LocalVariable).getFunction() = func
and not vswapper_spaces.getParentScope+() = func
and vaddr_114.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
