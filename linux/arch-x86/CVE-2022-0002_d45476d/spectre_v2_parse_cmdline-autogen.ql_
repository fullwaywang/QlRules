/**
 * @name linux-d45476d9832409371537013ebdd8dc1a7781f97a-spectre_v2_parse_cmdline
 * @id cpp/linux/d45476d9832409371537013ebdd8dc1a7781f97a/spectre-v2-parse-cmdline
 * @description linux-d45476d9832409371537013ebdd8dc1a7781f97a-arch/x86/kernel/cpu/bugs.c-spectre_v2_parse_cmdline CVE-2022-0001
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(BlockStmt target_6, Function func, AddExpr target_1) {
	target_1.getValue()="6"
	and target_1.getParent().(LTExpr).getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getParent().(LTExpr).getParent().(ForStmt).getStmt()=target_6
	and target_1.getEnclosingFunction() = func
}

predicate func_2(BlockStmt target_7, Function func, AddExpr target_2) {
	target_2.getValue()="6"
	and target_2.getParent().(GEExpr).getGreaterOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getParent().(GEExpr).getParent().(IfStmt).getThen()=target_7
	and target_2.getEnclosingFunction() = func
}

predicate func_5(Variable vcmd_853, ExprStmt target_8, LogicalAndExpr target_9, ReturnStmt target_10, Function func) {
exists(IfStmt target_5 |
	target_5.getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vcmd_853
	and target_5.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_5.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_5.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("test_bit")
	and target_5.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="114"
	and target_5.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
	and target_5.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_5.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(DoStmt).getCondition() instanceof Literal
	and target_5.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_printk")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
	and target_5.getLocation().isBefore(target_8.getLocation())
	and target_9.getLeftOperand().(LogicalOrExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_5.getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation())
	and target_5.getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_10.getExpr().(VariableAccess).getLocation()))
}

predicate func_6(Function func, BlockStmt target_6) {
	target_6.getStmt(0).(IfStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("match_option")
	and target_6.getStmt(0).(IfStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("char[20]")
	and target_6.getStmt(0).(IfStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("int")
	and target_6.getStmt(0).(IfStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(2).(ValueFieldAccess).getTarget().getName()="option"
	and target_6.getStmt(0).(IfStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(2).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_6.getStmt(0).(IfStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(2).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Function func, BlockStmt target_7) {
	target_7.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(DoStmt).getCondition() instanceof Literal
	and target_7.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_printk")
	and target_7.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="3Spectre V2 : unknown option (%s). Switching to AUTO select\n"
	and target_7.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("char[20]")
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Function func, ExprStmt target_8) {
	target_8.getExpr().(FunctionCall).getTarget().hasName("spec_v2_print_cond")
	and target_8.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="option"
	and target_8.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_8.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
	and target_8.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="secure"
	and target_8.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_8.getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Variable vcmd_853, LogicalAndExpr target_9) {
	target_9.getLeftOperand().(LogicalOrExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vcmd_853
	and target_9.getLeftOperand().(LogicalOrExpr).getLeftOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vcmd_853
	and target_9.getLeftOperand().(LogicalOrExpr).getLeftOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getRightOperand() instanceof EnumConstantAccess
	and target_9.getLeftOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vcmd_853
	and target_9.getRightOperand().(NotExpr).getValue()="0"
}

predicate func_10(Variable vcmd_853, ReturnStmt target_10) {
	target_10.getExpr().(VariableAccess).getTarget()=vcmd_853
}

from Function func, Variable vcmd_853, AddExpr target_1, AddExpr target_2, BlockStmt target_6, BlockStmt target_7, ExprStmt target_8, LogicalAndExpr target_9, ReturnStmt target_10
where
func_1(target_6, func, target_1)
and func_2(target_7, func, target_2)
and not func_5(vcmd_853, target_8, target_9, target_10, func)
and func_6(func, target_6)
and func_7(func, target_7)
and func_8(func, target_8)
and func_9(vcmd_853, target_9)
and func_10(vcmd_853, target_10)
and vcmd_853.getType().hasName("spectre_v2_mitigation_cmd")
and vcmd_853.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
