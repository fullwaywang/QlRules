/**
 * @name linux-7a5f01828edf152c144d27cf63de446fdf2dc222-start_per_cpu_kthreads
 * @id cpp/linux/7a5f01828edf152c144d27cf63de446fdf2dc222/start-per-cpu-kthreads
 * @description linux-7a5f01828edf152c144d27cf63de446fdf2dc222-kernel/trace/trace_osnoise.c-start_per_cpu_kthreads CVE-2024-46788
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vcpu_2038, PostfixIncrExpr target_2) {
exists(IfStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getCondition() |
		obj_0.getTarget().hasName("cpumask_test_and_clear_cpu")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vcpu_2038
		and obj_0.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("cpumask")
	)
	and exists(BlockStmt obj_1 | obj_1=target_0.getThen() |
		exists(ExprStmt obj_2 | obj_2=obj_1.getStmt(1) |
			exists(AssignExpr obj_3 | obj_3=obj_2.getExpr() |
				obj_3.getLValue().(VariableAccess).getType().hasName("task_struct *")
				and obj_3.getRValue().(ValueFieldAccess).getTarget().getName()="kthread"
			)
		)
		and exists(IfStmt obj_4 | obj_4=obj_1.getStmt(2) |
			exists(ExprStmt obj_5 | obj_5=obj_4.getThen() |
				exists(FunctionCall obj_6 | obj_6=obj_5.getExpr() |
					obj_6.getTarget().hasName("kthread_stop")
					and obj_6.getArgument(0).(VariableAccess).getType().hasName("task_struct *")
				)
			)
		)
	)
	and target_2.getOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_1(Function func, ExprStmt target_1) {
	exists(AssignExpr obj_0 | obj_0=target_1.getExpr() |
		obj_0.getLValue().(ValueFieldAccess).getTarget().getName()="kthread"
		and obj_0.getRValue().(Literal).getValue()="0"
	)
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vcpu_2038, PostfixIncrExpr target_2) {
	target_2.getOperand().(VariableAccess).getTarget()=vcpu_2038
}

from Function func, Variable vcpu_2038, ExprStmt target_1, PostfixIncrExpr target_2
where
not func_0(vcpu_2038, target_2)
and func_1(func, target_1)
and func_2(vcpu_2038, target_2)
and vcpu_2038.getType().hasName("int")
and vcpu_2038.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
