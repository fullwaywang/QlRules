commit 5ec1a5a7ef1dffe527a3381a155a17e3be02ce7e	5ec1a5a7ef1dffe527a3381a155a17e3be02ce7e
Author: Antonio Gomes <tonikitoo@igalia.com>
Date:   Thu Jan 19 02:55:50 2023 +0000

    [WebUITabStrip] Crash @TabDragDropDelegate::~TabDragDropDelegate()
    
    During an ongoing tab dragging on Lacros, with both WebUITabStrip
    and TabletMode features ON, Lacros crashes in case the dragged
    `exo::ShellSurface` (ie browser window) is deleted by JavaScript.
    
    What happens is that during a tab drag 'n drop, exo::TabDragDropDelegate
    store an `aura::Window` instance, and operates over it throughout its
    life cycle. However, during the drag operation, it is possible that this
    `aura::Window` instance gets deleted, and the pointer becomes dangling.
    
    Here is the pseudo stacktrace of the dragged `aura::Window` instance
    (and its respective exo::ShellSurface) being destroyed:
    
      #4  ~Window () at ../../ui/aura/window.cc:201
      #5  aura::Window::~Window() () at ../../ui/aura/window.cc:186
      #6  CloseNow () at ../../ui/views/widget/widget.cc:787
      #7  ~ShellSurfaceBase () at ../../components/exo/shell_surface_base.cc:347
      #8  ~ShellSurface () at ../../components/exo/shell_surface.cc:140
      #9  ~XdgShellSurface () at ../../components/exo/xdg_shell_surface.cc:27
      #10 ~XdgShellSurface () at ../../components/exo/xdg_shell_surface.cc:27
      #11 operator() () at (...)
      #12 reset () at (...)
      #13 ~unique_ptr () at (...)
      #14 ~WaylandXdgSurface () at ../../components/exo/wayland/xdg_shell.cc:783
      #15 operator() () at (...)
      #16 reset () at (...)
      #17 ~unique_ptr () at (...)
      #18 DestroyUserData<exo::wayland::WaylandXdgSurface> () at ../../components/exo/wayland/server_util.h:40
      #19 0x0000556095b8ae10 in destroy_resource () at ../../third_party/wayland/src/src/wayland-server.c:733
      #20 0x0000556095b8acb0 in wl_resource_destroy () at ../../third_party/wayland/src/src/wayland-server.c:750
      #21 0x00005560a6dc1d65 in ffi_call_unix64 ()
      #22 0x00005560a6dc12b9 in ffi_call_int ()
    
    ... and here is the stack trace of the crash, where this `aura::Window` is
    dereferenced:
    
      #0  is_destroying ui/aura/window.h:166:39
      #1  ash::TabDragDropDelegate::~TabDragDropDelegate() ash/drag_drop/tab_drag_drop_delegate.cc:117:23
      #2  ash::TabDragDropDelegate::~TabDragDropDelegate() ash/drag_drop/tab_drag_drop_delegate.cc:114:45
      #3  operator() (...)
      #4  reset (...)
      #5  ash::DragDropController::Cleanup() ash/drag_drop/drag_drop_controller.cc:800:27
      #6  ash::DragDropController::DoDragCancel(base::TimeDelta) ash/drag_drop/drag_drop_controller.cc:702:3
      #7  exo::DragDropOperation::~DragDropOperation() components/exo/drag_drop_operation.cc:277:28
      #8  exo::DragDropOperation::~DragDropOperation() components/exo/drag_drop_operation.cc:270:41
      #9  exo::Surface::~Surface() components/exo/surface.cc:286:14
      #10 operator() (...)
      #11 reset (...)
      #12 ~unique_ptr (...)
    
    This CL protects `exo::TabDragDropDelegate` dtor against this crash
    by making use of `aura::WindowObserver` logic and null-checking
    `TabDragDropDelegate::source_window_`.
    
    Last, this CL also extends exo::ExoTestBase class with an
    additional SetUp() method, that takes a TestShellDelegate as
    parameter.
    
    BUG=1348791
    
    Change-Id: Ic00886fda66d4150ce07d74d6aaccf31e77bc80b
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4174397
    Reviewed-by: Mitsuru Oshima <oshima@chromium.org>
    Commit-Queue: Antonio Gomes <tonikitoo@igalia.com>
    Cr-Commit-Position: refs/heads/main@{#1094249}

diff --git a/ash/drag_drop/tab_drag_drop_delegate.cc b/ash/drag_drop/tab_drag_drop_delegate.cc
index e8fc8930e74ba..edb291d1b177b 100644
--- a/ash/drag_drop/tab_drag_drop_delegate.cc
+++ b/ash/drag_drop/tab_drag_drop_delegate.cc
@@ -101,6 +101,7 @@ TabDragDropDelegate::TabDragDropDelegate(
       start_location_in_screen_(start_location_in_screen) {
   DCHECK(root_window_);
   DCHECK(source_window_);
+  source_window_->AddObserver(this);
   source_window_->SetProperty(kIsSourceWindowForDrag, true);
   split_view_drag_indicators_ =
       std::make_unique<SplitViewDragIndicators>(root_window_);
@@ -114,6 +115,12 @@ TabDragDropDelegate::TabDragDropDelegate(
 TabDragDropDelegate::~TabDragDropDelegate() {
   tab_dragging_recorder_.reset();
 
+  if (!source_window_) {
+    return;
+  }
+
+  source_window_->RemoveObserver(this);
+
   if (source_window_->is_destroying())
     return;
 
@@ -166,6 +173,14 @@ void TabDragDropDelegate::DropAndDeleteSelf(
       source_window_, drop_data, std::move(closure));
 }
 
+void TabDragDropDelegate::OnWindowDestroying(aura::Window* window) {
+  if (source_window_ == window) {
+    windows_hider_.reset();
+    source_window_->RemoveObserver(this);
+    source_window_ = nullptr;
+  }
+}
+
 void TabDragDropDelegate::OnNewBrowserWindowCreated(
     const gfx::Point& location_in_screen,
     aura::Window* new_window) {
diff --git a/ash/drag_drop/tab_drag_drop_delegate.h b/ash/drag_drop/tab_drag_drop_delegate.h
index 441eb99f56c0f..90f10133775f2 100644
--- a/ash/drag_drop/tab_drag_drop_delegate.h
+++ b/ash/drag_drop/tab_drag_drop_delegate.h
@@ -10,6 +10,7 @@
 #include "ash/ash_export.h"
 #include "ash/drag_drop/drag_drop_capture_delegate.h"
 #include "ash/wm/splitview/split_view_controller.h"
+#include "ui/aura/window_observer.h"
 #include "ui/gfx/geometry/point.h"
 
 namespace aura {
@@ -29,7 +30,8 @@ class TabletModeBrowserWindowDragSessionWindowsHider;
 // Provides special handling for Chrome tab drags on behalf of
 // DragDropController. This must be created at the beginning of a tab drag and
 // destroyed at the end.
-class ASH_EXPORT TabDragDropDelegate : public DragDropCaptureDelegate {
+class ASH_EXPORT TabDragDropDelegate : public DragDropCaptureDelegate,
+                                       public aura::WindowObserver {
  public:
   // Determines whether |drag_data| indicates a tab drag from a WebUI tab strip
   // (or simply returns false if the integration is disabled).
@@ -60,6 +62,9 @@ class ASH_EXPORT TabDragDropDelegate : public DragDropCaptureDelegate {
   void DropAndDeleteSelf(const gfx::Point& location_in_screen,
                          const ui::OSExchangeData& drop_data);
 
+  // Overridden from aura::WindowObserver.
+  void OnWindowDestroying(aura::Window* window) override;
+
  private:
   FRIEND_TEST_ALL_PREFIXES(TabDragDropDelegateTest, DropWithoutNewWindow);
 
@@ -96,7 +101,7 @@ class ASH_EXPORT TabDragDropDelegate : public DragDropCaptureDelegate {
   bool ShouldPreventSnapToTheEdge(const gfx::Point& location_in_screen);
 
   aura::Window* const root_window_;
-  aura::Window* const source_window_;
+  aura::Window* source_window_;
   const gfx::Point start_location_in_screen_;
 
   std::unique_ptr<SplitViewDragIndicators> split_view_drag_indicators_;
diff --git a/components/exo/drag_drop_operation_unittest.cc b/components/exo/drag_drop_operation_unittest.cc
index 3de378940674a..6f738f0a18d50 100644
--- a/components/exo/drag_drop_operation_unittest.cc
+++ b/components/exo/drag_drop_operation_unittest.cc
@@ -8,12 +8,14 @@
 
 #include "ash/drag_drop/drag_drop_controller.h"
 #include "ash/shell.h"
+#include "ash/test_shell_delegate.h"
 #include "base/containers/flat_map.h"
 #include "base/files/file_util.h"
 #include "base/functional/bind.h"
 #include "base/run_loop.h"
 #include "base/task/sequenced_task_runner.h"
 #include "base/test/bind.h"
+#include "base/test/scoped_feature_list.h"
 #include "components/exo/buffer.h"
 #include "components/exo/data_exchange_delegate.h"
 #include "components/exo/data_source.h"
@@ -36,10 +38,14 @@ namespace exo {
 namespace {
 
 using ::testing::_;
+using ::testing::NiceMock;
 using ::testing::Property;
+using ::testing::Return;
 
 constexpr char kTextMimeType[] = "text/plain";
 
+constexpr char kWindowDragMimeType[] = "chromium/x-window-drag";
+
 }  // namespace
 
 class DragDropOperationTest : public test::ExoTestBase,
@@ -101,7 +107,7 @@ class DragDropOperationTest : public test::ExoTestBase,
   int drag_end_count_ = 0;
 };
 
-TEST_F(DragDropOperationTest, DeleteDuringDragging) {
+TEST_F(DragDropOperationTest, DeleteDataSourceDuringDragging) {
   TestDataExchangeDelegate data_exchange_delegate;
 
   auto delegate = std::make_unique<TestDataSourceDelegate>();
@@ -140,6 +146,90 @@ TEST_F(DragDropOperationTest, DeleteDuringDragging) {
   EXPECT_FALSE(operation);
 }
 
+namespace {
+
+class MockShellDelegate : public ash::TestShellDelegate {
+ public:
+  MockShellDelegate() = default;
+  ~MockShellDelegate() override = default;
+
+  MOCK_METHOD(bool, IsTabDrag, (const ui::OSExchangeData&), (override));
+};
+
+}  // namespace
+
+class DragDropOperationTestWithWebUITabStripTest
+    : public DragDropOperationTest {
+ public:
+  DragDropOperationTestWithWebUITabStripTest() {
+    ash::features::SetWebUITabStripEnabled(true);
+    scoped_feature_list_.InitAndEnableFeature(
+        ash::features::kWebUITabStripTabDragIntegration);
+  }
+
+  // DragDropOperationTest:
+  void SetUp() override {
+    auto mock_shell_delegate = std::make_unique<NiceMock<MockShellDelegate>>();
+    mock_shell_delegate_ = mock_shell_delegate.get();
+
+    ExoTestBase::SetUp(std::move(mock_shell_delegate));
+    aura::client::GetDragDropClient(ash::Shell::GetPrimaryRootWindow())
+        ->AddObserver(this);
+  }
+
+  MockShellDelegate* mock_shell_delegate() { return mock_shell_delegate_; }
+
+ private:
+  NiceMock<MockShellDelegate>* mock_shell_delegate_ = nullptr;
+  base::test::ScopedFeatureList scoped_feature_list_;
+};
+
+TEST_F(DragDropOperationTestWithWebUITabStripTest,
+       DeleteSurfaceDuringDragging) {
+  TestDataExchangeDelegate data_exchange_delegate;
+
+  auto delegate = std::make_unique<TestDataSourceDelegate>();
+  auto data_source = std::make_unique<DataSource>(delegate.get());
+  data_source->Offer(kWindowDragMimeType);
+  delegate->SetData(kWindowDragMimeType, std::vector<uint8_t>());
+
+  ON_CALL(*mock_shell_delegate(), IsTabDrag(_)).WillByDefault(Return(true));
+
+  auto shell_surface =
+      test::ShellSurfaceBuilder({100, 100}).BuildShellSurface();
+  auto* origin_surface = shell_surface->surface_for_testing();
+
+  gfx::Size buffer_size(100, 100);
+  std::unique_ptr<Buffer> buffer(
+      new Buffer(exo_test_helper()->CreateGpuMemoryBuffer(buffer_size)));
+  auto icon_surface = std::make_unique<Surface>();
+  icon_surface->Attach(buffer.get());
+
+  auto operation = DragDropOperation::Create(
+      &data_exchange_delegate, data_source.get(), origin_surface,
+      icon_surface.get(), gfx::PointF(), ui::mojom::DragEventSource::kMouse);
+  icon_surface->Commit();
+
+  base::RunLoop run_loop;
+  set_drag_blocked_callback(base::BindOnce(
+      [](std::unique_ptr<DataSource> data_source,
+         std::unique_ptr<ShellSurface> shell_surface,
+         base::WeakPtr<DragDropOperation> operation,
+         base::OnceClosure quit_closure) {
+        // This function runs inside the nested RunLoop in
+        // ash::DragDropController::StartDragAndDrop().
+        EXPECT_TRUE(operation);
+        // Deleting ShellSurface causes DragDropOperation to be deleted as well.
+        shell_surface.reset();
+        EXPECT_FALSE(operation);
+        std::move(quit_closure).Run();
+      },
+      std::move(data_source), std::move(shell_surface), operation,
+      run_loop.QuitClosure()));
+  run_loop.Run();
+  EXPECT_FALSE(operation);
+}
+
 TEST_F(DragDropOperationTest, DragDropFromPopup) {
   static_cast<ash::DragDropController*>(
       aura::client::GetDragDropClient(ash::Shell::GetPrimaryRootWindow()))
diff --git a/components/exo/test/exo_test_base.cc b/components/exo/test/exo_test_base.cc
index 1570e8b1c1f2b..530a99332948a 100644
--- a/components/exo/test/exo_test_base.cc
+++ b/components/exo/test/exo_test_base.cc
@@ -5,6 +5,7 @@
 #include "components/exo/test/exo_test_base.h"
 
 #include "ash/shell.h"
+#include "ash/test_shell_delegate.h"
 #include "components/exo/buffer.h"
 #include "components/exo/shell_surface.h"
 #include "components/exo/surface.h"
@@ -49,10 +50,7 @@ ExoTestBase::ExoTestBase() = default;
 ExoTestBase::~ExoTestBase() = default;
 
 void ExoTestBase::SetUp() {
-  AshTestBase::SetUp();
-  wm_helper_ = std::make_unique<WMHelperChromeOS>();
-  wm_helper_->RegisterAppPropertyResolver(
-      base::WrapUnique(new TestPropertyResolver()));
+  SetUp(nullptr);
 }
 
 void ExoTestBase::TearDown() {
@@ -60,6 +58,14 @@ void ExoTestBase::TearDown() {
   AshTestBase::TearDown();
 }
 
+void ExoTestBase::SetUp(
+    std::unique_ptr<ash::TestShellDelegate> shell_delegate) {
+  AshTestBase::SetUp(std::move(shell_delegate));
+  wm_helper_ = std::make_unique<WMHelperChromeOS>();
+  wm_helper_->RegisterAppPropertyResolver(
+      base::WrapUnique(new TestPropertyResolver()));
+}
+
 viz::SurfaceManager* ExoTestBase::GetSurfaceManager() {
   return static_cast<ui::InProcessContextFactory*>(
              aura::Env::GetInstance()->context_factory())
diff --git a/components/exo/test/exo_test_base.h b/components/exo/test/exo_test_base.h
index aaadbfa23609d..3245cd6ca8d27 100644
--- a/components/exo/test/exo_test_base.h
+++ b/components/exo/test/exo_test_base.h
@@ -10,6 +10,10 @@
 #include "ash/test/ash_test_base.h"
 #include "components/exo/test/exo_test_helper.h"
 
+namespace ash {
+class TestShellDelegate;
+}
+
 namespace viz {
 class SurfaceManager;
 }
@@ -40,6 +44,8 @@ class ExoTestBase : public ash::AshTestBase {
   void SetUp() override;
   void TearDown() override;
 
+  void SetUp(std::unique_ptr<ash::TestShellDelegate> shell_delegate);
+
   viz::SurfaceManager* GetSurfaceManager();
 
   gfx::Point GetOriginOfShellSurface(const ShellSurfaceBase* shell_surface);
