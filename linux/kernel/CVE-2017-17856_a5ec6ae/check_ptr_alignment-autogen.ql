/**
 * @name linux-a5ec6ae161d72f01411169a938fa5f8baea16e8f-check_ptr_alignment
 * @id cpp/linux/a5ec6ae161d72f01411169a938fa5f8baea16e8f/check-ptr-alignment
 * @description linux-a5ec6ae161d72f01411169a938fa5f8baea16e8f-kernel/bpf/verifier.c-check_ptr_alignment CVE-2017-17856
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vstrict_1044, PointerFieldAccess target_1, FunctionCall target_2, FunctionCall target_3) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vstrict_1044
		and target_0.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_1
		and target_2.getArgument(4).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation())
		and target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_3.getArgument(5).(VariableAccess).getLocation()))
}

predicate func_1(Function func, PointerFieldAccess target_1) {
		target_1.getTarget().getName()="type"
		and target_1.getQualifier().(VariableAccess).getTarget().getType().hasName("const bpf_reg_state *")
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vstrict_1044, FunctionCall target_2) {
		target_2.getTarget().hasName("check_pkt_ptr_alignment")
		and target_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("bpf_verifier_env *")
		and target_2.getArgument(1).(VariableAccess).getTarget().getType().hasName("const bpf_reg_state *")
		and target_2.getArgument(2).(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getArgument(4).(VariableAccess).getTarget()=vstrict_1044
}

predicate func_3(Variable vstrict_1044, FunctionCall target_3) {
		target_3.getTarget().hasName("check_generic_ptr_alignment")
		and target_3.getArgument(0).(VariableAccess).getTarget().getType().hasName("bpf_verifier_env *")
		and target_3.getArgument(1).(VariableAccess).getTarget().getType().hasName("const bpf_reg_state *")
		and target_3.getArgument(2).(VariableAccess).getTarget().getType().hasName("const char *")
		and target_3.getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
		and target_3.getArgument(4).(VariableAccess).getTarget().getType().hasName("int")
		and target_3.getArgument(5).(VariableAccess).getTarget()=vstrict_1044
}

from Function func, Variable vstrict_1044, PointerFieldAccess target_1, FunctionCall target_2, FunctionCall target_3
where
not func_0(vstrict_1044, target_1, target_2, target_3)
and func_1(func, target_1)
and func_2(vstrict_1044, target_2)
and func_3(vstrict_1044, target_3)
and vstrict_1044.getType().hasName("bool")
and vstrict_1044.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
