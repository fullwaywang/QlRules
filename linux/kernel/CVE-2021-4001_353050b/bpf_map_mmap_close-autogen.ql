/**
 * @name linux-353050be4c19e102178ccc05988101887c25ae53-bpf_map_mmap_close
 * @id cpp/linux/353050be4c19e102178ccc05988101887c25ae53/bpf-map-mmap-close
 * @description linux-353050be4c19e102178ccc05988101887c25ae53-kernel/bpf/syscall.c-bpf_map_mmap_close CVE-2021-4001
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vmap_614, FunctionCall target_0) {
	target_0.getTarget().hasName("mutex_lock_nested")
	and not target_0.getTarget().hasName("bpf_map_write_active_dec")
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="freeze_mutex"
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmap_614
	and target_0.getArgument(1).(Literal).getValue()="0"
}

predicate func_1(Variable vmap_614, VariableAccess target_1) {
	target_1.getTarget()=vmap_614
	and target_1.getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_2(Variable vmap_614, ExprStmt target_3, PointerFieldAccess target_2) {
	target_2.getTarget().getName()="freeze_mutex"
	and target_2.getQualifier().(VariableAccess).getTarget()=vmap_614
	and target_2.getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(PostfixDecrExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_3(Variable vmap_614, BitwiseAndExpr target_5, ExprStmt target_3) {
	target_3.getExpr().(PostfixDecrExpr).getOperand().(PointerFieldAccess).getTarget().getName()="writecnt"
	and target_3.getExpr().(PostfixDecrExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmap_614
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_4(Variable vmap_614, BitwiseAndExpr target_5, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="freeze_mutex"
	and target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmap_614
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_5(Function func, BitwiseAndExpr target_5) {
	target_5.getLeftOperand().(PointerFieldAccess).getTarget().getName()="vm_flags"
	and target_5.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("vm_area_struct *")
	and target_5.getRightOperand().(Literal).getValue()="32"
	and target_5.getEnclosingFunction() = func
}

from Function func, Variable vmap_614, FunctionCall target_0, VariableAccess target_1, PointerFieldAccess target_2, ExprStmt target_3, ExprStmt target_4, BitwiseAndExpr target_5
where
func_0(vmap_614, target_0)
and func_1(vmap_614, target_1)
and func_2(vmap_614, target_3, target_2)
and func_3(vmap_614, target_5, target_3)
and func_4(vmap_614, target_5, target_4)
and func_5(func, target_5)
and vmap_614.getType().hasName("bpf_map *")
and vmap_614.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
