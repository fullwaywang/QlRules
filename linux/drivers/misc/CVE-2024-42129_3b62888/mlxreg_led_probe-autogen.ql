/**
 * @name linux-3b62888307ae44b68512d3f7735c26a4c8e45b51-mlxreg_led_probe
 * @id cpp/linux/3b62888307ae44b68512d3f7735c26a4c8e45b51/mlxreg-led-probe
 * @description linux-3b62888307ae44b68512d3f7735c26a4c8e45b51-drivers/leds/leds-mlxreg.c-mlxreg_led_probe CVE-2024-42129
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, StringLiteral target_0) {
	target_0.getValue()="&priv->access_lock"
	and not target_0.getValue()="mutex_"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(DoStmt target_5, Function func) {
exists(ExprStmt target_1 |
	exists(AssignExpr obj_0 | obj_0=target_1.getExpr() |
		exists(StmtExpr obj_1 | obj_1=obj_0.getRValue() |
			exists(BlockStmt obj_2 | obj_2=obj_1.getStmt() |
				exists(ExprStmt obj_3 | obj_3=obj_2.getStmt(2) |
					exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getTarget().hasName("__devm_mutex_init")
						and obj_4.getArgument(1).(VariableAccess).getType().hasName("mutex *")
					)
				)
				and obj_2.getStmt(1).(DoStmt).getCondition().(Literal).getValue()="0"
			)
		)
		and obj_0.getLValue().(VariableAccess).getType().hasName("int")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_5.getLocation())
)
}

predicate func_3(DoStmt target_5, Function func) {
exists(IfStmt target_3 |
	target_3.getCondition().(VariableAccess).getType().hasName("int")
	and target_3.getThen().(ReturnStmt).getExpr().(VariableAccess).getType().hasName("int")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
	and target_3.getLocation().isBefore(target_5.getLocation())
)
}

predicate func_4(Variable vpriv_258, AddressOfExpr target_4) {
	exists(PointerFieldAccess obj_0 | obj_0=target_4.getOperand() |
		obj_0.getTarget().getName()="access_lock"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vpriv_258
	)
	and exists(FunctionCall obj_1 | obj_1=target_4.getParent() |
		exists(ExprStmt obj_2 | obj_2=obj_1.getParent() |
			exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
				obj_3.getTarget().hasName("__mutex_init")
				and obj_3.getArgument(1) instanceof StringLiteral
				and obj_3.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("lock_class_key")
			)
		)
	)
}

predicate func_5(Function func, DoStmt target_5) {
	exists(BlockStmt obj_0 | obj_0=target_5.getStmt() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(1) |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				obj_2.getTarget().hasName("__mutex_init")
				and obj_2.getArgument(0) instanceof AddressOfExpr
				and obj_2.getArgument(1) instanceof StringLiteral
				and obj_2.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("lock_class_key")
			)
		)
	)
	and target_5.getCondition().(Literal).getValue()="0"
	and target_5.getEnclosingFunction() = func
}

from Function func, Variable vpriv_258, StringLiteral target_0, AddressOfExpr target_4, DoStmt target_5
where
func_0(func, target_0)
and not func_1(target_5, func)
and not func_3(target_5, func)
and func_4(vpriv_258, target_4)
and func_5(func, target_5)
and vpriv_258.getType().hasName("mlxreg_led_priv_data *")
and vpriv_258.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
