/**
 * @name chromium-4b9452a25735187b50c20d77e229b87d095f31d0-content__RenderFrameHostImpl__BindSerialService
 * @id cpp/chromium/4b9452a25735187b50c20d77e229b87d095f31d0/contentrenderframehostimplbindserialservice
 * @description chromium-4b9452a25735187b50c20d77e229b87d095f31d0-content/browser/renderer_host/render_frame_host_impl.cc-content__RenderFrameHostImpl__BindSerialService CVE-2023-2462
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_1, Function func) {
exists(IfStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getQualifier() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().hasName("GetOutermostMainFrame")
				and obj_2.getQualifier().(ThisExpr).getType() instanceof PointerType
			)
			and obj_1.getTarget().hasName("GetLastCommittedOrigin")
		)
		and obj_0.getTarget().hasName("opaque")
	)
	and exists(BlockStmt obj_3 | obj_3=target_0.getThen() |
		exists(ExprStmt obj_4 | obj_4=obj_3.getStmt(0) |
			exists(FunctionCall obj_5 | obj_5=obj_4.getExpr() |
				obj_5.getTarget().hasName("ReportBadMessage")
				and obj_5.getArgument(0).(ConstructorCall).getArgument(0).(StringLiteral).getValue()="Web Serial is not allowed when the top-level document has an opaque origin."
			)
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
)
}

predicate func_1(Function func, ExprStmt target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getQualifier() |
			obj_1.getTarget().hasName("GetOrCreateForCurrentDocument")
			and obj_1.getArgument(0).(ThisExpr).getType() instanceof PointerType
		)
		and exists(ConstructorCall obj_2 | obj_2=obj_0.getArgument(0) |
			exists(FunctionCall obj_3 | obj_3=obj_2.getArgument(0) |
				obj_3.getTarget().hasName("move")
				and obj_3.getArgument(0).(VariableAccess).getTarget().getType().hasName("PendingReceiver<SerialService>")
			)
		)
		and obj_0.getTarget().hasName("Bind")
	)
	and target_1.getEnclosingFunction() = func
}

from Function func, ExprStmt target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
