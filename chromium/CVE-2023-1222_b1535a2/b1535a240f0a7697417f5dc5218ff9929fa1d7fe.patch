commit b1535a240f0a7697417f5dc5218ff9929fa1d7fe	b1535a240f0a7697417f5dc5218ff9929fa1d7fe
Author: Hongchan Choi <hongchan@chromium.org>
Date:   Wed Jan 25 20:31:15 2023 +0000

    Handle a transitory state of context/destination correctly for AudioWorklet operation
    
    When the context resumes from a suspended state, it is possible for
    the internal (destination) and the external (context) state to be
    different in a rare case. This allows the non-worklet thread to
    touch the worklet-related objects, which can causes invalid access
    to the V8-managed memory space.
    
    This CL adds a check; if the context state is suspended it swaps
    the task runner right away without waiting until a resume() promise
    is resolved.
    
    Bug: 1403515
    Test: The provided repro case doesn't crash ASAN anymore.
    Change-Id: Ic2ea7b0337c444b7dc7d9d8b7195ed3e9ac3955f
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4150813
    Reviewed-by: Michael Wilson <mjwilson@chromium.org>
    Commit-Queue: Hongchan Choi <hongchan@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1096948}

diff --git a/third_party/blink/renderer/modules/webaudio/audio_destination_handler.h b/third_party/blink/renderer/modules/webaudio/audio_destination_handler.h
index 97c590e1caf48..9e0516fcda73a 100644
--- a/third_party/blink/renderer/modules/webaudio/audio_destination_handler.h
+++ b/third_party/blink/renderer/modules/webaudio/audio_destination_handler.h
@@ -36,6 +36,11 @@ class AudioDestinationHandler : public AudioHandler {
   // restart of the context.
   virtual void RestartRendering() = 0;
 
+  // The worklet thread change can happen when a context/destination is
+  // suspended. In that case, we prepare the worklet operation but do not start
+  // running.
+  virtual void PrepareTaskRunnerForWorklet() = 0;
+
   size_t CurrentSampleFrame() const {
     return current_sample_frame_.load(std::memory_order_acquire);
   }
diff --git a/third_party/blink/renderer/modules/webaudio/base_audio_context.cc b/third_party/blink/renderer/modules/webaudio/base_audio_context.cc
index 66cffa841b77e..2d37a7576e6eb 100644
--- a/third_party/blink/renderer/modules/webaudio/base_audio_context.cc
+++ b/third_party/blink/renderer/modules/webaudio/base_audio_context.cc
@@ -896,12 +896,24 @@ void BaseAudioContext::NotifyWorkletIsReady() {
         audioWorklet()->GetMessagingProxy()->GetBackingWorkerThread();
   }
 
-  // If the context is running, restart the destination to switch the render
-  // thread with the worklet thread. When the context is suspended, the next
-  // resume() call will start rendering with the worklet thread.
-  // Note that restarting can happen right after the context construction.
-  if (ContextState() == kRunning) {
-    destination()->GetAudioDestinationHandler().RestartRendering();
+  switch (ContextState()) {
+    case kRunning:
+      // If the context is running, restart the destination to switch the render
+      // thread with the worklet thread right away.
+      destination()->GetAudioDestinationHandler().RestartRendering();
+      break;
+    case kSuspended:
+      // For the suspended context, the destination will use the worklet task
+      // runner for rendering. This also prevents the regular audio thread from
+      // touching worklet-related objects by blocking an invalid transitory
+      // state where the context state is suspended and the destination state is
+      // running. See: crbug.com/1403515
+      destination()->GetAudioDestinationHandler().PrepareTaskRunnerForWorklet();
+      break;
+    case kClosed:
+      // When the context is closed, no preparation for the worklet operations
+      // is necessary.
+      return;
   }
 }
 
diff --git a/third_party/blink/renderer/modules/webaudio/offline_audio_destination_handler.h b/third_party/blink/renderer/modules/webaudio/offline_audio_destination_handler.h
index 88fb292b80ab3..461facfdf0bcf 100644
--- a/third_party/blink/renderer/modules/webaudio/offline_audio_destination_handler.h
+++ b/third_party/blink/renderer/modules/webaudio/offline_audio_destination_handler.h
@@ -47,6 +47,7 @@ class OfflineAudioDestinationHandler final : public AudioDestinationHandler {
   void Pause() override;
   void Resume() override;
   uint32_t MaxChannelCount() const override;
+  void PrepareTaskRunnerForWorklet() override {}
 
   void RestartRendering() override;
 
diff --git a/third_party/blink/renderer/modules/webaudio/realtime_audio_destination_handler.cc b/third_party/blink/renderer/modules/webaudio/realtime_audio_destination_handler.cc
index 19b5ea67c94bc..12b6b5ae1a354 100644
--- a/third_party/blink/renderer/modules/webaudio/realtime_audio_destination_handler.cc
+++ b/third_party/blink/renderer/modules/webaudio/realtime_audio_destination_handler.cc
@@ -364,6 +364,18 @@ void RealtimeAudioDestinationHandler::StopPlatformDestination() {
   }
 }
 
+void RealtimeAudioDestinationHandler::PrepareTaskRunnerForWorklet() {
+  DCHECK(IsMainThread());
+  DCHECK_EQ(Context()->ContextState(), BaseAudioContext::kSuspended);
+  DCHECK(Context()->audioWorklet());
+  DCHECK(Context()->audioWorklet()->IsReady());
+
+  platform_destination_->SetWorkletTaskRunner(
+      Context()->audioWorklet()->GetMessagingProxy()
+          ->GetBackingWorkerThread()
+          ->GetTaskRunner(TaskType::kInternalMediaRealTime));
+}
+
 void RealtimeAudioDestinationHandler::SetSinkDescriptor(
     const WebAudioSinkDescriptor& sink_descriptor,
     media::OutputDeviceStatusCB callback) {
diff --git a/third_party/blink/renderer/modules/webaudio/realtime_audio_destination_handler.h b/third_party/blink/renderer/modules/webaudio/realtime_audio_destination_handler.h
index e32019e3a9833..2e6b5dc0baad8 100644
--- a/third_party/blink/renderer/modules/webaudio/realtime_audio_destination_handler.h
+++ b/third_party/blink/renderer/modules/webaudio/realtime_audio_destination_handler.h
@@ -53,6 +53,7 @@ class RealtimeAudioDestinationHandler final
   void RestartRendering() override;
   uint32_t MaxChannelCount() const override;
   double SampleRate() const override;
+  void PrepareTaskRunnerForWorklet() override;
 
   // For AudioIOCallback. This is invoked by the platform audio destination to
   // get the next render quantum into `destination_bus` and update
diff --git a/third_party/blink/renderer/platform/audio/audio_destination.cc b/third_party/blink/renderer/platform/audio/audio_destination.cc
index ffa7038f2cacc..3bcf236280db6 100644
--- a/third_party/blink/renderer/platform/audio/audio_destination.cc
+++ b/third_party/blink/renderer/platform/audio/audio_destination.cc
@@ -216,22 +216,33 @@ void AudioDestination::Resume() {
   SetDeviceState(DeviceState::kRunning);
 }
 
-void AudioDestination::StartWithWorkletTaskRunner(
+void AudioDestination::SetWorkletTaskRunner(
     scoped_refptr<base::SingleThreadTaskRunner> worklet_task_runner) {
   DCHECK(IsMainThread());
-  DCHECK_EQ(worklet_task_runner_, nullptr);
-  TRACE_EVENT0("webaudio", "AudioDestination::StartWithWorkletTaskRunner");
-  SendLogMessage(String::Format("%s", __func__));
+  TRACE_EVENT0("webaudio", "AudioDestination::SetWorkletTaskRunner");
 
-  if (device_state_ != DeviceState::kStopped) {
+  if (worklet_task_runner_) {
+    DCHECK_EQ(worklet_task_runner_, worklet_task_runner);
     return;
   }
 
   // The dual-thread rendering kicks off, so update the earmark frames
   // accordingly.
   fifo_->SetEarmarkFrames(callback_buffer_size_);
-
   worklet_task_runner_ = std::move(worklet_task_runner);
+}
+
+void AudioDestination::StartWithWorkletTaskRunner(
+    scoped_refptr<base::SingleThreadTaskRunner> worklet_task_runner) {
+  DCHECK(IsMainThread());
+  TRACE_EVENT0("webaudio", "AudioDestination::StartWithWorkletTaskRunner");
+  SendLogMessage(String::Format("%s", __func__));
+
+  if (device_state_ != DeviceState::kStopped) {
+    return;
+  }
+
+  SetWorkletTaskRunner(worklet_task_runner);
   web_audio_device_->Start();
   SetDeviceState(DeviceState::kRunning);
 }
diff --git a/third_party/blink/renderer/platform/audio/audio_destination.h b/third_party/blink/renderer/platform/audio/audio_destination.h
index b0416038f96d8..f53bc7b861044 100644
--- a/third_party/blink/renderer/platform/audio/audio_destination.h
+++ b/third_party/blink/renderer/platform/audio/audio_destination.h
@@ -103,7 +103,11 @@ class PLATFORM_EXPORT AudioDestination final
   void Pause();
   void Resume();
 
-  // Starts the destination with the AudioWorklet support.
+  // Sets the destination for worklet operation, but does not start rendering.
+  void SetWorkletTaskRunner(
+      scoped_refptr<base::SingleThreadTaskRunner> worklet_task_runner);
+
+  // Starts rendering in the AudioWorklet mode.
   void StartWithWorkletTaskRunner(
       scoped_refptr<base::SingleThreadTaskRunner> worklet_task_runner);
 
