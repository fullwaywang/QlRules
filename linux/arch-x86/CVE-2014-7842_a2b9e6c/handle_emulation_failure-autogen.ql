/**
 * @name linux-a2b9e6c1a35afcc0973acb72e591c714e78885ff-handle_emulation_failure
 * @id cpp/linux/a2b9e6c1a35afcc0973acb72e591c714e78885ff/handle-emulation-failure
 * @description linux-a2b9e6c1a35afcc0973acb72e591c714e78885ff-arch/x86/kvm/x86.c-handle_emulation_failure CVE-2014-7842
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvcpu_4997, BlockStmt target_2, ExprStmt target_3, NotExpr target_1) {
exists(LogicalAndExpr target_0 |
	target_0.getLeftOperand() instanceof NotExpr
	and target_0.getRightOperand().(EqualityOperation).getLeftOperand().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="get_cpl"
	and target_0.getRightOperand().(EqualityOperation).getLeftOperand().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("kvm_x86_ops *")
	and target_0.getRightOperand().(EqualityOperation).getLeftOperand().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_4997
	and target_0.getRightOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_0.getParent().(IfStmt).getThen()=target_2
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getRightOperand().(EqualityOperation).getLeftOperand().(VariableCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getRightOperand().(EqualityOperation).getLeftOperand().(VariableCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vvcpu_4997, BlockStmt target_2, NotExpr target_1) {
	target_1.getOperand().(FunctionCall).getTarget().hasName("is_guest_mode")
	and target_1.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_4997
	and target_1.getParent().(IfStmt).getThen()=target_2
}

predicate func_2(Parameter vvcpu_4997, BlockStmt target_2) {
	target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="exit_reason"
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="run"
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_4997
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="17"
	and target_2.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="suberror"
	and target_2.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="internal"
	and target_2.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_2.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="run"
	and target_2.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="1"
}

predicate func_3(Parameter vvcpu_4997, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("trace_kvm_emulate_insn")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_4997
	and target_3.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="1"
}

from Function func, Parameter vvcpu_4997, NotExpr target_1, BlockStmt target_2, ExprStmt target_3
where
not func_0(vvcpu_4997, target_2, target_3, target_1)
and func_1(vvcpu_4997, target_2, target_1)
and func_2(vvcpu_4997, target_2)
and func_3(vvcpu_4997, target_3)
and vvcpu_4997.getType().hasName("kvm_vcpu *")
and vvcpu_4997.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
