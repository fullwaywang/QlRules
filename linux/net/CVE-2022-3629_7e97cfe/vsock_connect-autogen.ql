/**
 * @name linux-7e97cfed9929eaabc41829c395eb0d1350fccb9d-vsock_connect
 * @id cpp/linux/7e97cfed9929eaabc41829c395eb0d1350fccb9d/vsock-connect
 * @description linux-7e97cfed9929eaabc41829c395eb0d1350fccb9d-vsock_connect CVE-2022-3629
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vvsk_1303, Variable vtimeout_1306, FunctionCall target_0) {
		target_0.getTarget().hasName("schedule_delayed_work")
		and not target_0.getTarget().hasName("mod_delayed_work")
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="connect_work"
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvsk_1303
		and target_0.getArgument(1).(VariableAccess).getTarget()=vtimeout_1306
}

predicate func_1(Variable vsk_1302, Variable vvsk_1303, Variable vtimeout_1306, BitwiseAndExpr target_4, ExprStmt target_5, ExprStmt target_6, ExprStmt target_7, ExprStmt target_8) {
	exists(IfStmt target_1 |
		target_1.getCondition().(FunctionCall).getTarget().hasName("mod_delayed_work")
		and target_1.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("workqueue_struct *")
		and target_1.getCondition().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="connect_work"
		and target_1.getCondition().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvsk_1303
		and target_1.getCondition().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vtimeout_1306
		and target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("sock_put")
		and target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_1302
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
		and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_7.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getCondition().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_1.getCondition().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_8.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

/*predicate func_3(Variable vsk_1302, ExprStmt target_5, ExprStmt target_6) {
	exists(FunctionCall target_3 |
		target_3.getTarget().hasName("sock_put")
		and target_3.getArgument(0).(VariableAccess).getTarget()=vsk_1302
		and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getArgument(0).(VariableAccess).getLocation())
		and target_3.getArgument(0).(VariableAccess).getLocation().isBefore(target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

*/
predicate func_4(BlockStmt target_9, Function func, BitwiseAndExpr target_4) {
		target_4.getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_4.getRightOperand().(Literal).getValue()="2048"
		and target_4.getParent().(IfStmt).getThen()=target_9
		and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable vsk_1302, ExprStmt target_5) {
		target_5.getExpr().(FunctionCall).getTarget().hasName("sock_hold")
		and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_1302
}

predicate func_6(Variable vsk_1302, ExprStmt target_6) {
		target_6.getExpr().(FunctionCall).getTarget().hasName("release_sock")
		and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_1302
}

predicate func_7(Variable vvsk_1303, Variable vtimeout_1306, ExprStmt target_7) {
		target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vtimeout_1306
		and target_7.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="connect_timeout"
		and target_7.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvsk_1303
}

predicate func_8(Variable vvsk_1303, FunctionCall target_10, ExprStmt target_8) {
		target_8.getExpr().(FunctionCall).getTarget().hasName("vsock_transport_cancel_pkt")
		and target_8.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvsk_1303
		and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10
}

predicate func_9(Variable vsk_1302, BlockStmt target_9) {
		target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("sock_hold")
		and target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_1302
		and target_9.getStmt(1).(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_10(Function func, FunctionCall target_10) {
		target_10.getTarget().hasName("signal_pending")
		and target_10.getArgument(0).(FunctionCall).getTarget().hasName("get_current")
		and target_10.getEnclosingFunction() = func
}

from Function func, Variable vsk_1302, Variable vvsk_1303, Variable vtimeout_1306, FunctionCall target_0, BitwiseAndExpr target_4, ExprStmt target_5, ExprStmt target_6, ExprStmt target_7, ExprStmt target_8, BlockStmt target_9, FunctionCall target_10
where
func_0(vvsk_1303, vtimeout_1306, target_0)
and not func_1(vsk_1302, vvsk_1303, vtimeout_1306, target_4, target_5, target_6, target_7, target_8)
and func_4(target_9, func, target_4)
and func_5(vsk_1302, target_5)
and func_6(vsk_1302, target_6)
and func_7(vvsk_1303, vtimeout_1306, target_7)
and func_8(vvsk_1303, target_10, target_8)
and func_9(vsk_1302, target_9)
and func_10(func, target_10)
and vsk_1302.getType().hasName("sock *")
and vvsk_1303.getType().hasName("vsock_sock *")
and vtimeout_1306.getType().hasName("long")
and vsk_1302.(LocalVariable).getFunction() = func
and vvsk_1303.(LocalVariable).getFunction() = func
and vtimeout_1306.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
