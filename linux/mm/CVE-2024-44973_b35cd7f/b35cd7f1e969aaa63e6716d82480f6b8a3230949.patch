commit b35cd7f1e969aaa63e6716d82480f6b8a3230949
Author: Rik van Riel <riel@surriel.com>
Date:   Mon Jul 29 14:19:28 2024 -0400

    mm, slub: do not call do_slab_free for kfence object
    
    commit a371d558e6f3aed977a8a7346350557de5d25190 upstream.
    
    In 782f8906f805 the freeing of kfence objects was moved from deep
    inside do_slab_free to the wrapper functions outside. This is a nice
    change, but unfortunately it missed one spot in __kmem_cache_free_bulk.
    
    This results in a crash like this:
    
    BUG skbuff_head_cache (Tainted: G S  B       E     ): Padding overwritten. 0xffff88907fea0f00-0xffff88907fea0fff @offset=3840
    
    slab_err (mm/slub.c:1129)
    free_to_partial_list (mm/slub.c:? mm/slub.c:4036)
    slab_pad_check (mm/slub.c:864 mm/slub.c:1290)
    check_slab (mm/slub.c:?)
    free_to_partial_list (mm/slub.c:3171 mm/slub.c:4036)
    kmem_cache_alloc_bulk (mm/slub.c:? mm/slub.c:4495 mm/slub.c:4586 mm/slub.c:4635)
    napi_build_skb (net/core/skbuff.c:348 net/core/skbuff.c:527 net/core/skbuff.c:549)
    
    All the other callers to do_slab_free appear to be ok.
    
    Add a kfence_free check in __kmem_cache_free_bulk to avoid the crash.
    
    Reported-by: Chris Mason <clm@meta.com>
    Fixes: 782f8906f805 ("mm/slub: free KFENCE objects in slab_free_hook()")
    Cc: stable@kernel.org
    Signed-off-by: Rik van Riel <riel@surriel.com>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/mm/slub.c b/mm/slub.c
index 4927edec6a8c..849e8972e2ff 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -4655,6 +4655,9 @@ static void __kmem_cache_free_bulk(struct kmem_cache *s, size_t size, void **p)
 		if (!df.slab)
 			continue;
 
+		if (kfence_free(df.freelist))
+			continue;
+
 		do_slab_free(df.s, df.slab, df.freelist, df.tail, df.cnt,
 			     _RET_IP_);
 	} while (likely(size));
