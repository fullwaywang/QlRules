/**
 * @name linux-b8670c09f37bdf2847cc44f36511a53afc6161fd-llc_cmsg_rcv
 * @id cpp/linux/b8670c09f37bdf2847cc44f36511a53afc6161fd/llc-cmsg-rcv
 * @description linux-b8670c09f37bdf2847cc44f36511a53afc6161fd-net/llc/af_llc.c-llc_cmsg_rcv CVE-2016-4485
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vinfo_627, BitwiseAndExpr target_1) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("__memset")
		and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vinfo_627
		and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_0.getExpr().(FunctionCall).getArgument(2).(SizeofExprOperator).getValue()="12"
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1)
}

predicate func_1(Function func, BitwiseAndExpr target_1) {
		target_1.getLeftOperand().(PointerFieldAccess).getTarget().getName()="cmsg_flags"
		and target_1.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("llc_sock *")
		and target_1.getRightOperand().(Literal).getValue()="1"
		and target_1.getEnclosingFunction() = func
}

from Function func, Variable vinfo_627, BitwiseAndExpr target_1
where
not func_0(vinfo_627, target_1)
and func_1(func, target_1)
and vinfo_627.getType().hasName("llc_pktinfo")
and vinfo_627.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
