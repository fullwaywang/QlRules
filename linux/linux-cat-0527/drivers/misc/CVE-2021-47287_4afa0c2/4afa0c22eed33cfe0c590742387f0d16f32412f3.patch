commit 4afa0c22eed33cfe0c590742387f0d16f32412f3
Author: Peter Ujfalusi <peter.ujfalusi@linux.intel.com>
Date:   Tue Jul 13 12:34:38 2021 +0300

    driver core: auxiliary bus: Fix memory leak when driver_register() fail
    
    If driver_register() returns with error we need to free the memory
    allocated for auxdrv->driver.name before returning from
    __auxiliary_driver_register()
    
    Fixes: 7de3697e9cbd4 ("Add auxiliary bus support")
    Reviewed-by: Dan Williams <dan.j.williams@intel.com>
    Cc: stable <stable@vger.kernel.org>
    Signed-off-by: Peter Ujfalusi <peter.ujfalusi@linux.intel.com>
    Link: https://lore.kernel.org/r/20210713093438.3173-1-peter.ujfalusi@linux.intel.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/base/auxiliary.c b/drivers/base/auxiliary.c
index adc199dfba3c..6a30264ab2ba 100644
--- a/drivers/base/auxiliary.c
+++ b/drivers/base/auxiliary.c
@@ -231,6 +231,8 @@ EXPORT_SYMBOL_GPL(auxiliary_find_device);
 int __auxiliary_driver_register(struct auxiliary_driver *auxdrv,
 				struct module *owner, const char *modname)
 {
+	int ret;
+
 	if (WARN_ON(!auxdrv->probe) || WARN_ON(!auxdrv->id_table))
 		return -EINVAL;
 
@@ -246,7 +248,11 @@ int __auxiliary_driver_register(struct auxiliary_driver *auxdrv,
 	auxdrv->driver.bus = &auxiliary_bus_type;
 	auxdrv->driver.mod_name = modname;
 
-	return driver_register(&auxdrv->driver);
+	ret = driver_register(&auxdrv->driver);
+	if (ret)
+		kfree(auxdrv->driver.name);
+
+	return ret;
 }
 EXPORT_SYMBOL_GPL(__auxiliary_driver_register);
 
