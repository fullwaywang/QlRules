/**
 * @name linux-55e6d8037805b3400096d621091dfbf713f97e83-regcache_rbtree_insert_to_block
 * @id cpp/linux/55e6d8037805b3400096d621091dfbf713f97e83/regcache-rbtree-insert-to-block
 * @description linux-55e6d8037805b3400096d621091dfbf713f97e83-drivers/base/regmap/regcache-rbtree.c-regcache_rbtree_insert_to_block CVE-2021-47483
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vrbnode_263, Variable vblk_272, IfStmt target_3, ExprStmt target_0) {
	target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="block"
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vrbnode_263
	and target_0.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vblk_272
	and target_3.getLocation().isBefore(target_0.getLocation())
}

predicate func_1(NotExpr target_4, Function func, ReturnStmt target_1) {
	target_1.getExpr().(UnaryMinusExpr).getValue()="-12"
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vblk_272, NotExpr target_4, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("kfree")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vblk_272
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_3(Parameter vrbnode_263, Variable vblk_272, IfStmt target_3) {
	target_3.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_3.getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__memmove")
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=vblk_272
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerArithmeticOperation).getRightOperand().(MulExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerArithmeticOperation).getRightOperand().(MulExpr).getRightOperand().(PointerFieldAccess).getTarget().getName()="cache_word_size"
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vblk_272
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(MulExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="blklen"
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(MulExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vrbnode_263
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(MulExpr).getRightOperand().(PointerFieldAccess).getTarget().getName()="cache_word_size"
	and target_3.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(MulExpr).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("regmap *")
}

predicate func_4(Function func, NotExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget().getType().hasName("unsigned long *")
	and target_4.getEnclosingFunction() = func
}

from Function func, Parameter vrbnode_263, Variable vblk_272, ExprStmt target_0, ReturnStmt target_1, ExprStmt target_2, IfStmt target_3, NotExpr target_4
where
func_0(vrbnode_263, vblk_272, target_3, target_0)
and func_1(target_4, func, target_1)
and func_2(vblk_272, target_4, target_2)
and func_3(vrbnode_263, vblk_272, target_3)
and func_4(func, target_4)
and vrbnode_263.getType().hasName("regcache_rbtree_node *")
and vblk_272.getType().hasName("u8 *")
and vrbnode_263.getFunction() = func
and vblk_272.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
