/**
 * @name linux-e9edc188fc76499b0b9bd60364084037f6d03773-nf_conntrack_hash_resize
 * @id cpp/linux/e9edc188fc76499b0b9bd60364084037f6d03773/nf-conntrack-hash-resize
 * @description linux-e9edc188fc76499b0b9bd60364084037f6d03773-net/netfilter/nf_conntrack_core.c-nf_conntrack_hash_resize CVE-2021-47408
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_3, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
	and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_3.getLocation()))
}

predicate func_1(EqualityOperation target_4, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_1.getEnclosingFunction() = func)
}

predicate func_2(ExprStmt target_5, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_5.getLocation()))
}

predicate func_3(Function func, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_3.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
}

predicate func_4(Function func, EqualityOperation target_4) {
	target_4.getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_4.getRightOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Function func, ExprStmt target_5) {
	target_5.getExpr().(FunctionCall).getTarget().hasName("synchronize_net")
	and target_5.getEnclosingFunction() = func
}

from Function func, ExprStmt target_3, EqualityOperation target_4, ExprStmt target_5
where
not func_0(target_3, func)
and not func_1(target_4, func)
and not func_2(target_5, func)
and func_3(func, target_3)
and func_4(func, target_4)
and func_5(func, target_5)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
