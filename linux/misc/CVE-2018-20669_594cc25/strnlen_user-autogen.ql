/**
 * @name linux-594cc251fdd0d231d342d88b2fdff4bc42fb0690-strnlen_user
 * @id cpp/linux/594cc251fdd0d231d342d88b2fdff4bc42fb0690/strnlen-user
 * @description linux-594cc251fdd0d231d342d88b2fdff4bc42fb0690-lib/strnlen_user.c-strnlen_user CVE-2018-20669
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vstr_104, Variable vmax_114, FunctionCall target_5, ExprStmt target_6, ExprStmt target_1) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("user_access_begin")
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vstr_104
	and target_0.getCondition().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vmax_114
	and target_0.getThen().(BlockStmt).getStmt(0) instanceof ExprStmt
	and target_0.getThen().(BlockStmt).getStmt(1) instanceof ExprStmt
	and target_0.getThen().(BlockStmt).getStmt(2) instanceof ReturnStmt
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_6.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vstr_104, Parameter vcount_104, Variable vmax_114, Variable vretval_115, FunctionCall target_5, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vretval_115
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("do_strnlen_user")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vstr_104
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcount_104
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vmax_114
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_2(FunctionCall target_5, Function func, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("clac")
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vretval_115, FunctionCall target_5, ReturnStmt target_3) {
	target_3.getExpr().(VariableAccess).getTarget()=vretval_115
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_4(FunctionCall target_5, Function func, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("stac")
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Function func, FunctionCall target_5) {
	target_5.getTarget().hasName("__builtin_expect")
	and target_5.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_5.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_5.getArgument(1).(Literal).getValue()="1"
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Parameter vstr_104, ExprStmt target_6) {
	target_6.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_6.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vstr_104
}

from Function func, Parameter vstr_104, Parameter vcount_104, Variable vmax_114, Variable vretval_115, ExprStmt target_1, ExprStmt target_2, ReturnStmt target_3, ExprStmt target_4, FunctionCall target_5, ExprStmt target_6
where
not func_0(vstr_104, vmax_114, target_5, target_6, target_1)
and func_1(vstr_104, vcount_104, vmax_114, vretval_115, target_5, target_1)
and func_2(target_5, func, target_2)
and func_3(vretval_115, target_5, target_3)
and func_4(target_5, func, target_4)
and func_5(func, target_5)
and func_6(vstr_104, target_6)
and vstr_104.getType().hasName("const char *")
and vcount_104.getType().hasName("long")
and vmax_114.getType().hasName("unsigned long")
and vretval_115.getType().hasName("long")
and vstr_104.getFunction() = func
and vcount_104.getFunction() = func
and vmax_114.(LocalVariable).getFunction() = func
and vretval_115.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
