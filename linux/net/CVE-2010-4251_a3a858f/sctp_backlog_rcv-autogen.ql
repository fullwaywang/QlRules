/**
 * @name linux-a3a858ff18a72a8d388e31ab0d98f7e944841a62-sctp_backlog_rcv
 * @id cpp/linux/a3a858ff18a72a8d388e31ab0d98f7e944841a62/sctp-backlog-rcv
 * @description linux-a3a858ff18a72a8d388e31ab0d98f7e944841a62-net/sctp/input.c-sctp_backlog_rcv CVE-2010-4251
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vskb_310, Parameter vsk_310, ExprStmt target_1, FunctionCall target_0) {
		target_0.getTarget().hasName("sk_add_backlog_limited")
		and not target_0.getTarget().hasName("sk_add_backlog")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vsk_310
		and target_0.getArgument(1).(VariableAccess).getTarget()=vskb_310
		and target_0.getParent().(IfStmt).getThen()=target_1
}

predicate func_1(FunctionCall target_0, Function func, ExprStmt target_1) {
		target_1.getExpr().(FunctionCall).getTarget().hasName("sctp_chunk_free")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("sctp_chunk *")
		and target_1.getParent().(IfStmt).getCondition()=target_0
		and target_1.getEnclosingFunction() = func
}

from Function func, Parameter vskb_310, Parameter vsk_310, FunctionCall target_0, ExprStmt target_1
where
func_0(vskb_310, vsk_310, target_1, target_0)
and func_1(target_0, func, target_1)
and vskb_310.getType().hasName("sk_buff *")
and vsk_310.getType().hasName("sock *")
and vskb_310.getFunction() = func
and vsk_310.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
