/**
 * @name linux-5535be3099717646781ce1540cf725965d680e7b-follow_trans_huge_pmd
 * @id cpp/linux/5535be3099717646781ce1540cf725965d680e7b/follow-trans-huge-pmd
 * @description linux-5535be3099717646781ce1540cf725965d680e7b-mm/huge_memory.c-follow_trans_huge_pmd CVE-2022-2590
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
	target_0.getValue()="1005"
	and not target_0.getValue()="1001"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, Literal target_1) {
	target_1.getValue()="1006"
	and not target_1.getValue()="1002"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, Literal target_2) {
	target_2.getValue()="1007"
	and not target_2.getValue()="1003"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, Literal target_3) {
	target_3.getValue()="1008"
	and not target_3.getValue()="1004"
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Parameter vpmd_1410, Variable vpage_1414, Variable vvmemmap_base, IfStmt target_14, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vpage_1414
	and target_4.getExpr().(AssignExpr).getRValue().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=vvmemmap_base
	and target_4.getExpr().(AssignExpr).getRValue().(PointerArithmeticOperation).getRightOperand().(FunctionCall).getTarget().hasName("pmd_pfn")
	and target_4.getExpr().(AssignExpr).getRValue().(PointerArithmeticOperation).getRightOperand().(FunctionCall).getArgument(0).(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vpmd_1410
	and target_14.getLocation().isBefore(target_4.getLocation())
}

predicate func_5(Variable vpage_1414, IfStmt target_14, DoStmt target_5) {
	target_5.getCondition() instanceof Literal
	and target_5.getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_5.getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(FunctionCall).getArgument(1) instanceof Literal
	and target_5.getStmt().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("dump_page")
	and target_5.getStmt().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1414
	and target_5.getStmt().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="VM_BUG_ON_PAGE(!PageHead(page) && !is_zone_device_page(page))"
	and target_5.getStmt().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(1).(DoStmt).getCondition() instanceof Literal
	and target_14.getLocation().isBefore(target_5.getLocation())
}

predicate func_8(LogicalAndExpr target_15, Function func) {
exists(ReturnStmt target_8 |
	target_8.getExpr() instanceof Literal
	and target_8.getParent().(IfStmt).getCondition()=target_15
	and target_8.getEnclosingFunction() = func)
}

predicate func_9(LogicalAndExpr target_16, Function func) {
exists(ReturnStmt target_9 |
	target_9.getExpr().(Literal).getValue()="0"
	and target_9.getParent().(IfStmt).getCondition()=target_16
	and target_9.getEnclosingFunction() = func)
}

predicate func_11(Function func, Initializer target_11) {
	target_11.getExpr() instanceof Literal
	and target_11.getExpr().getEnclosingFunction() = func
}

predicate func_12(LogicalAndExpr target_15, Function func, GotoStmt target_12) {
	target_12.getName() ="out"
	and target_12.getParent().(IfStmt).getCondition()=target_15
	and target_12.getEnclosingFunction() = func
}

predicate func_13(LogicalAndExpr target_16, Function func, GotoStmt target_13) {
	target_13.getName() ="out"
	and target_13.getParent().(IfStmt).getCondition()=target_16
	and target_13.getEnclosingFunction() = func
}

predicate func_14(Parameter vpmd_1410, IfStmt target_14) {
	target_14.getCondition().(LogicalAndExpr).getLeftOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_14.getCondition().(LogicalAndExpr).getLeftOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="512"
	and target_14.getCondition().(LogicalAndExpr).getRightOperand().(FunctionCall).getTarget().hasName("pmd_protnone")
	and target_14.getCondition().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(0).(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vpmd_1410
	and target_14.getThen() instanceof GotoStmt
}

predicate func_15(Parameter vpmd_1410, LogicalAndExpr target_15) {
	target_15.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_15.getLeftOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="1"
	and target_15.getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("can_follow_write_pmd")
	and target_15.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vpmd_1410
	and target_15.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned int")
}

predicate func_16(Parameter vpmd_1410, LogicalAndExpr target_16) {
	target_16.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_16.getLeftOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="512"
	and target_16.getRightOperand().(FunctionCall).getTarget().hasName("pmd_protnone")
	and target_16.getRightOperand().(FunctionCall).getArgument(0).(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vpmd_1410
}

from Function func, Parameter vpmd_1410, Variable vpage_1414, Variable vvmemmap_base, Literal target_0, Literal target_1, Literal target_2, Literal target_3, ExprStmt target_4, DoStmt target_5, Initializer target_11, GotoStmt target_12, GotoStmt target_13, IfStmt target_14, LogicalAndExpr target_15, LogicalAndExpr target_16
where
func_0(func, target_0)
and func_1(func, target_1)
and func_2(func, target_2)
and func_3(func, target_3)
and func_4(vpmd_1410, vpage_1414, vvmemmap_base, target_14, target_4)
and func_5(vpage_1414, target_14, target_5)
and not func_8(target_15, func)
and not func_9(target_16, func)
and func_11(func, target_11)
and func_12(target_15, func, target_12)
and func_13(target_16, func, target_13)
and func_14(vpmd_1410, target_14)
and func_15(vpmd_1410, target_15)
and func_16(vpmd_1410, target_16)
and vpmd_1410.getType().hasName("pmd_t *")
and vpage_1414.getType().hasName("page *")
and vvmemmap_base.getType().hasName("unsigned long")
and vpmd_1410.getFunction() = func
and vpage_1414.(LocalVariable).getFunction() = func
and not vvmemmap_base.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
