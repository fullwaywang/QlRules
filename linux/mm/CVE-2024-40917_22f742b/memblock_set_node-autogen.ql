/**
 * @name linux-22f742b8f738918f683198a18ec3c691acda14c4-memblock_set_node
 * @id cpp/linux/22f742b8f738918f683198a18ec3c691acda14c4/memblock-set-node
 * @description linux-22f742b8f738918f683198a18ec3c691acda14c4-mm/memblock.c-memblock_set_node CVE-2024-40917
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vnid_1336, ExprStmt target_1, ExprStmt target_2, Function func) {
exists(IfStmt target_0 |
	exists(StmtExpr obj_0 | obj_0=target_0.getCondition() |
		exists(BlockStmt obj_1 | obj_1=obj_0.getStmt() |
			exists(ExprStmt obj_2 | obj_2=obj_1.getStmt(2) |
				exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
					obj_3.getTarget().hasName("__builtin_expect")
					and obj_3.getArgument(1) instanceof Literal
				)
			)
		)
	)
	and exists(ExprStmt obj_4 | obj_4=target_0.getThen() |
		exists(AssignExpr obj_5 | obj_5=obj_4.getExpr() |
			obj_5.getLValue().(VariableAccess).getTarget()=vnid_1336
			and obj_5.getRValue().(UnaryMinusExpr).getValue()="-1"
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_2.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
)
}

predicate func_1(Function func, ExprStmt target_1) {
	exists(AssignExpr obj_0 | obj_0=target_1.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("memblock_isolate_range")
			and obj_1.getArgument(0).(VariableAccess).getTarget().getType().hasName("memblock_type *")
			and obj_1.getArgument(1).(VariableAccess).getTarget().getType().hasName("phys_addr_t")
			and obj_1.getArgument(2).(VariableAccess).getTarget().getType().hasName("phys_addr_t")
			and obj_1.getArgument(3).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
			and obj_1.getArgument(4).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
		)
		and obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("int")
	)
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Parameter vnid_1336, ExprStmt target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(ArrayExpr obj_2 | obj_2=obj_1.getOperand() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getArrayBase() |
					obj_3.getTarget().getName()="regions"
					and obj_3.getQualifier().(VariableAccess).getTarget().getType().hasName("memblock_type *")
				)
				and obj_2.getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
			)
		)
		and obj_0.getTarget().hasName("memblock_set_region_node")
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vnid_1336
	)
}

from Function func, Parameter vnid_1336, ExprStmt target_1, ExprStmt target_2
where
not func_0(vnid_1336, target_1, target_2, func)
and func_1(func, target_1)
and func_2(vnid_1336, target_2)
and vnid_1336.getType().hasName("int")
and vnid_1336.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
