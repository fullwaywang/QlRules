/**
 * @name linux-66b2c338adce580dfce2199591e65e2bab889cff-tap_open
 * @id cpp/linux/66b2c338adce580dfce2199591e65e2bab889cff/tap-open
 * @description linux-66b2c338adce580dfce2199591e65e2bab889cff-tap_open CVE-2023-1076
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vq_513, FunctionCall target_0) {
		target_0.getTarget().hasName("sock_init_data")
		and not target_0.getTarget().hasName("sock_init_data_uid")
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="sock"
		and target_0.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vq_513
		and target_0.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="sk"
		and target_0.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vq_513
}

predicate func_1(Parameter vinode_509, FunctionCall target_2) {
	exists(PointerFieldAccess target_1 |
		target_1.getTarget().getName()="i_uid"
		and target_1.getQualifier().(VariableAccess).getTarget()=vinode_509
		and target_2.getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Parameter vinode_509, FunctionCall target_2) {
		target_2.getTarget().hasName("iminor")
		and target_2.getArgument(0).(VariableAccess).getTarget()=vinode_509
}

from Function func, Variable vq_513, Parameter vinode_509, FunctionCall target_0, FunctionCall target_2
where
func_0(vq_513, target_0)
and not func_1(vinode_509, target_2)
and func_2(vinode_509, target_2)
and vq_513.getType().hasName("tap_queue *")
and vinode_509.getType().hasName("inode *")
and vq_513.(LocalVariable).getFunction() = func
and vinode_509.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
