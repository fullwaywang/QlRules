/**
 * @name linux-6f68cd634856f8ca93bafd623ba5357e0f648c68-batadv_bla_init
 * @id cpp/linux/6f68cd634856f8ca93bafd623ba5357e0f648c68/batadv-bla-init
 * @description linux-6f68cd634856f8ca93bafd623ba5357e0f648c68-net/batman-adv/bridge_loop_avoidance.c-batadv_bla_init CVE-2021-47482
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_6, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition() instanceof NotExpr
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-12"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_6.getLocation()))
}

predicate func_1(Parameter vbat_priv_1526, LogicalOrExpr target_5, ValueFieldAccess target_7) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("batadv_hash_destroy")
	and target_1.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="claim_hash"
	and target_1.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="bla"
	and target_1.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbat_priv_1526
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_1.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_7.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(LogicalOrExpr target_5, Function func) {
exists(ReturnStmt target_2 |
	target_2.getExpr().(UnaryMinusExpr).getValue()="-12"
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_2
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_2.getEnclosingFunction() = func)
}

predicate func_3(Parameter vbat_priv_1526, ReturnStmt target_8, NotExpr target_3) {
	target_3.getOperand().(ValueFieldAccess).getTarget().getName()="claim_hash"
	and target_3.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="bla"
	and target_3.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbat_priv_1526
	and target_3.getParent().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(ValueFieldAccess).getTarget().getName()="backbone_hash"
	and target_3.getParent().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="bla"
	and target_3.getParent().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbat_priv_1526
	and target_3.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen()=target_8
}

/*predicate func_4(Parameter vbat_priv_1526, ReturnStmt target_8, NotExpr target_4) {
	target_4.getOperand().(ValueFieldAccess).getTarget().getName()="backbone_hash"
	and target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="bla"
	and target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbat_priv_1526
	and target_4.getParent().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(ValueFieldAccess).getTarget().getName()="claim_hash"
	and target_4.getParent().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="bla"
	and target_4.getParent().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbat_priv_1526
	and target_4.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen()=target_8
}

*/
predicate func_5(ReturnStmt target_8, Function func, LogicalOrExpr target_5) {
	target_5.getLeftOperand() instanceof NotExpr
	and target_5.getRightOperand() instanceof NotExpr
	and target_5.getParent().(IfStmt).getThen()=target_8
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Parameter vbat_priv_1526, ExprStmt target_6) {
	target_6.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="backbone_hash"
	and target_6.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="bla"
	and target_6.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbat_priv_1526
	and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("batadv_hash_new")
	and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(Literal).getValue()="32"
}

predicate func_7(Parameter vbat_priv_1526, ValueFieldAccess target_7) {
	target_7.getTarget().getName()="claim_hash"
	and target_7.getQualifier().(PointerFieldAccess).getTarget().getName()="bla"
	and target_7.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbat_priv_1526
}

predicate func_8(Function func, ReturnStmt target_8) {
	target_8.getExpr().(UnaryMinusExpr).getValue()="-12"
	and target_8.getEnclosingFunction() = func
}

from Function func, Parameter vbat_priv_1526, NotExpr target_3, LogicalOrExpr target_5, ExprStmt target_6, ValueFieldAccess target_7, ReturnStmt target_8
where
not func_0(target_6, func)
and not func_1(vbat_priv_1526, target_5, target_7)
and not func_2(target_5, func)
and func_3(vbat_priv_1526, target_8, target_3)
and func_5(target_8, func, target_5)
and func_6(vbat_priv_1526, target_6)
and func_7(vbat_priv_1526, target_7)
and func_8(func, target_8)
and vbat_priv_1526.getType().hasName("batadv_priv *")
and vbat_priv_1526.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
