/**
 * @name linux-3cf2b61eb06765e27fec6799292d9fb46d0b7e60-check_alu_op
 * @id cpp/linux/3cf2b61eb06765e27fec6799292d9fb46d0b7e60/check-alu-op
 * @description linux-3cf2b61eb06765e27fec6799292d9fb46d0b7e60-kernel/bpf/verifier.c-check_alu_op CVE-2021-45402
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdst_reg_8284, EqualityOperation target_3, ExprStmt target_4) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("__update_reg_bounds")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdst_reg_8284
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(2)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vdst_reg_8284, EqualityOperation target_3) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("__reg_deduce_bounds")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdst_reg_8284
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(3)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3)
}

predicate func_2(Variable vdst_reg_8284, EqualityOperation target_3) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("__reg_bound_offset")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdst_reg_8284
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(4)=target_2
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3)
}

predicate func_3(BlockStmt target_5, Function func, EqualityOperation target_3) {
	target_3.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="code"
	and target_3.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_insn *")
	and target_3.getLeftOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="7"
	and target_3.getRightOperand().(Literal).getValue()="7"
	and target_3.getParent().(IfStmt).getThen()=target_5
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vdst_reg_8284, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("zext_32_to_64")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdst_reg_8284
}

predicate func_5(Function func, BlockStmt target_5) {
	target_5.getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="type"
	and target_5.getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_reg_state *")
	and target_5.getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="id"
	and target_5.getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_reg_state *")
	and target_5.getStmt(0).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="id"
	and target_5.getStmt(0).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_reg_state *")
	and target_5.getStmt(0).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(PrefixIncrExpr).getOperand().(PointerFieldAccess).getTarget().getName()="id_gen"
	and target_5.getStmt(0).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(PrefixIncrExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_verifier_env *")
	and target_5.getEnclosingFunction() = func
}

from Function func, Variable vdst_reg_8284, EqualityOperation target_3, ExprStmt target_4, BlockStmt target_5
where
not func_0(vdst_reg_8284, target_3, target_4)
and not func_1(vdst_reg_8284, target_3)
and not func_2(vdst_reg_8284, target_3)
and func_3(target_5, func, target_3)
and func_4(vdst_reg_8284, target_4)
and func_5(func, target_5)
and vdst_reg_8284.getType().hasName("bpf_reg_state *")
and vdst_reg_8284.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
