/**
 * @name linux-934e1e4331859183a861f396d7dfaf33cb5afb02-bch_btree_insert_key
 * @id cpp/linux/934e1e4331859183a861f396d7dfaf33cb5afb02/bch-btree-insert-key
 * @description linux-934e1e4331859183a861f396d7dfaf33cb5afb02-drivers/md/bcache/bset.c-bch_btree_insert_key CVE-2024-39482
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Parameter vb_876, Variable viter_882, Variable vpreceding_key_p_884, FunctionCall target_1) {
	exists(AssignExpr obj_0 | obj_0=target_1.getParent() |
		obj_0.getRValue() = target_1
		and obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("bkey *")
	)
	and target_1.getTarget().hasName("bch_btree_iter_init")
	and not target_1.getTarget().hasName("bch_btree_iter_stack_init")
	and target_1.getArgument(0).(VariableAccess).getTarget()=vb_876
	and target_1.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=viter_882
	and target_1.getArgument(2).(VariableAccess).getTarget()=vpreceding_key_p_884
}

predicate func_2(Variable viter_882, AddressOfExpr target_4, AddressOfExpr target_5) {
exists(ValueFieldAccess target_2 |
	target_2.getTarget().getName()="iter"
	and target_2.getQualifier().(VariableAccess).getTarget()=viter_882
	and target_4.getOperand().(VariableAccess).getLocation().isBefore(target_2.getQualifier().(VariableAccess).getLocation())
	and target_2.getQualifier().(VariableAccess).getLocation().isBefore(target_5.getOperand().(VariableAccess).getLocation())
)
}

predicate func_3(Parameter vb_876, Variable viter_882, VariableAccess target_3) {
	exists(AddressOfExpr obj_0 | obj_0=target_3.getParent() |
		exists(VariableCall obj_1 | obj_1=obj_0.getParent() |
			exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
				exists(VariableCall obj_3 | obj_3=obj_2.getCondition() |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getExpr() |
						exists(PointerFieldAccess obj_5 | obj_5=obj_4.getQualifier() |
							obj_5.getTarget().getName()="ops"
							and obj_5.getQualifier().(VariableAccess).getTarget()=vb_876
						)
						and obj_4.getTarget().getName()="insert_fixup"
					)
					and obj_3.getArgument(0).(VariableAccess).getTarget()=vb_876
					and obj_3.getArgument(1).(VariableAccess).getTarget().getType().hasName("bkey *")
					and obj_3.getArgument(3).(VariableAccess).getTarget().getType().hasName("bkey *")
				)
			)
		)
	)
	and target_3.getTarget()=viter_882
}

predicate func_4(Variable viter_882, AddressOfExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget()=viter_882
}

predicate func_5(Variable viter_882, AddressOfExpr target_5) {
	target_5.getOperand().(VariableAccess).getTarget()=viter_882
}

from Function func, Parameter vb_876, Variable viter_882, Variable vpreceding_key_p_884, FunctionCall target_1, VariableAccess target_3, AddressOfExpr target_4, AddressOfExpr target_5
where
func_1(vb_876, viter_882, vpreceding_key_p_884, target_1)
and not func_2(viter_882, target_4, target_5)
and func_3(vb_876, viter_882, target_3)
and func_4(viter_882, target_4)
and func_5(viter_882, target_5)
and vb_876.getType().hasName("btree_keys *")
and viter_882.getType().hasName("btree_iter")
and vpreceding_key_p_884.getType().hasName("bkey *")
and vb_876.getFunction() = func
and viter_882.(LocalVariable).getFunction() = func
and vpreceding_key_p_884.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
