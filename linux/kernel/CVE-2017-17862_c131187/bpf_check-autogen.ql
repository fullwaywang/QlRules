/**
 * @name linux-c131187db2d3fa2f8bf32fdf4e9a4ef805168467-bpf_check
 * @id cpp/linux/c131187db2d3fa2f8bf32fdf4e9a4ef805168467/bpf-check
 * @description linux-c131187db2d3fa2f8bf32fdf4e9a4ef805168467-kernel/bpf/verifier.c-bpf_check CVE-2017-17862
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable venv_4481, Variable vret_4483, IfStmt target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, EqualityOperation target_5, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vret_4483
	and target_0.getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("sanitize_dead_code")
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_4481
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_5.getLeftOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable venv_4481, Variable vret_4483, IfStmt target_1) {
	target_1.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vret_4483
	and target_1.getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_1.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_4483
	and target_1.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("convert_ctx_accesses")
	and target_1.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_4481
}

predicate func_2(Variable venv_4481, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("free_states")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_4481
}

predicate func_3(Variable venv_4481, Variable vret_4483, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_4483
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("convert_ctx_accesses")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_4481
}

predicate func_4(Variable venv_4481, Variable vret_4483, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_4483
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("do_check")
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_4481
}

predicate func_5(Variable vret_4483, ExprStmt target_3, EqualityOperation target_5) {
	target_5.getLeftOperand().(VariableAccess).getTarget()=vret_4483
	and target_5.getRightOperand().(Literal).getValue()="0"
	and target_5.getParent().(IfStmt).getThen()=target_3
}

from Function func, Variable venv_4481, Variable vret_4483, IfStmt target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, EqualityOperation target_5
where
not func_0(venv_4481, vret_4483, target_1, target_2, target_3, target_4, target_5, func)
and func_1(venv_4481, vret_4483, target_1)
and func_2(venv_4481, target_2)
and func_3(venv_4481, vret_4483, target_3)
and func_4(venv_4481, vret_4483, target_4)
and func_5(vret_4483, target_3, target_5)
and venv_4481.getType().hasName("bpf_verifier_env *")
and vret_4483.getType().hasName("int")
and venv_4481.(LocalVariable).getFunction() = func
and vret_4483.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
