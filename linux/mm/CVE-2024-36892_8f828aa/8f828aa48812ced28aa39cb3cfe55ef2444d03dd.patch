commit 8f828aa48812ced28aa39cb3cfe55ef2444d03dd
Author: Nicolas Bouchinet <nicolas.bouchinet@ssi.gouv.fr>
Date:   Tue Apr 30 13:34:59 2024 +0200

    mm/slub: avoid zeroing outside-object freepointer for single free
    
    Commit 284f17ac13fe ("mm/slub: handle bulk and single object freeing
    separately") splits single and bulk object freeing in two functions
    slab_free() and slab_free_bulk() which leads slab_free() to call
    slab_free_hook() directly instead of slab_free_freelist_hook().
    
    If `init_on_free` is set, slab_free_hook() zeroes the object.
    Afterward, if `slub_debug=F` and `CONFIG_SLAB_FREELIST_HARDENED` are
    set, the do_slab_free() slowpath executes freelist consistency
    checks and try to decode a zeroed freepointer which leads to a
    "Freepointer corrupt" detection in check_object().
    
    During bulk free, slab_free_freelist_hook() isn't affected as it always
    sets it objects freepointer using set_freepointer() to maintain its
    reconstructed freelist after `init_on_free`.
    
    For single free, object's freepointer thus needs to be avoided when
    stored outside the object if `init_on_free` is set. The freepointer left
    as is, check_object() may later detect an invalid pointer value due to
    objects overflow.
    
    To reproduce, set `slub_debug=FU init_on_free=1 log_level=7` on the
    command line of a kernel build with `CONFIG_SLAB_FREELIST_HARDENED=y`.
    
    dmesg sample log:
    [   10.708715] =============================================================================
    [   10.710323] BUG kmalloc-rnd-05-32 (Tainted: G    B           T ): Freepointer corrupt
    [   10.712695] -----------------------------------------------------------------------------
    [   10.712695]
    [   10.712695] Slab 0xffffd8bdc400d580 objects=32 used=4 fp=0xffff9d9a80356f80 flags=0x200000000000a00(workingset|slab|node=0|zone=2)
    [   10.716698] Object 0xffff9d9a80356600 @offset=1536 fp=0x7ee4f480ce0ecd7c
    [   10.716698]
    [   10.716698] Bytes b4 ffff9d9a803565f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [   10.720703] Object   ffff9d9a80356600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [   10.720703] Object   ffff9d9a80356610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [   10.724696] Padding  ffff9d9a8035666c: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
    [   10.724696] Padding  ffff9d9a8035667c: 00 00 00 00                                      ....
    [   10.724696] FIX kmalloc-rnd-05-32: Object at 0xffff9d9a80356600 not freed
    
    Fixes: 284f17ac13fe ("mm/slub: handle bulk and single object freeing separately")
    Cc: <stable@vger.kernel.org>
    Co-developed-by: Chengming Zhou <chengming.zhou@linux.dev>
    Signed-off-by: Chengming Zhou <chengming.zhou@linux.dev>
    Signed-off-by: Nicolas Bouchinet <nicolas.bouchinet@ssi.gouv.fr>
    Signed-off-by: Vlastimil Babka <vbabka@suse.cz>

diff --git a/mm/slub.c b/mm/slub.c
index 1bb2a93cf7b6..24f702afd458 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -557,6 +557,26 @@ static inline void set_freepointer(struct kmem_cache *s, void *object, void *fp)
 	*(freeptr_t *)freeptr_addr = freelist_ptr_encode(s, fp, freeptr_addr);
 }
 
+/*
+ * See comment in calculate_sizes().
+ */
+static inline bool freeptr_outside_object(struct kmem_cache *s)
+{
+	return s->offset >= s->inuse;
+}
+
+/*
+ * Return offset of the end of info block which is inuse + free pointer if
+ * not overlapping with object.
+ */
+static inline unsigned int get_info_end(struct kmem_cache *s)
+{
+	if (freeptr_outside_object(s))
+		return s->inuse + sizeof(void *);
+	else
+		return s->inuse;
+}
+
 /* Loop over all objects in a slab */
 #define for_each_object(__p, __s, __addr, __objects) \
 	for (__p = fixup_red_left(__s, __addr); \
@@ -845,26 +865,6 @@ static void print_section(char *level, char *text, u8 *addr,
 	metadata_access_disable();
 }
 
-/*
- * See comment in calculate_sizes().
- */
-static inline bool freeptr_outside_object(struct kmem_cache *s)
-{
-	return s->offset >= s->inuse;
-}
-
-/*
- * Return offset of the end of info block which is inuse + free pointer if
- * not overlapping with object.
- */
-static inline unsigned int get_info_end(struct kmem_cache *s)
-{
-	if (freeptr_outside_object(s))
-		return s->inuse + sizeof(void *);
-	else
-		return s->inuse;
-}
-
 static struct track *get_track(struct kmem_cache *s, void *object,
 	enum track_item alloc)
 {
@@ -2092,15 +2092,20 @@ bool slab_free_hook(struct kmem_cache *s, void *x, bool init)
 	 *
 	 * The initialization memset's clear the object and the metadata,
 	 * but don't touch the SLAB redzone.
+	 *
+	 * The object's freepointer is also avoided if stored outside the
+	 * object.
 	 */
 	if (unlikely(init)) {
 		int rsize;
+		unsigned int inuse;
 
+		inuse = get_info_end(s);
 		if (!kasan_has_integrated_init())
 			memset(kasan_reset_tag(x), 0, s->object_size);
 		rsize = (s->flags & SLAB_RED_ZONE) ? s->red_left_pad : 0;
-		memset((char *)kasan_reset_tag(x) + s->inuse, 0,
-		       s->size - s->inuse - rsize);
+		memset((char *)kasan_reset_tag(x) + inuse, 0,
+		       s->size - inuse - rsize);
 	}
 	/* KASAN might put x into memory quarantine, delaying its reuse. */
 	return !kasan_slab_free(s, x, init);
@@ -3722,7 +3727,8 @@ static void *__slab_alloc_node(struct kmem_cache *s,
 static __always_inline void maybe_wipe_obj_freeptr(struct kmem_cache *s,
 						   void *obj)
 {
-	if (unlikely(slab_want_init_on_free(s)) && obj)
+	if (unlikely(slab_want_init_on_free(s)) && obj &&
+	    !freeptr_outside_object(s))
 		memset((void *)((char *)kasan_reset_tag(obj) + s->offset),
 			0, sizeof(void *));
 }
