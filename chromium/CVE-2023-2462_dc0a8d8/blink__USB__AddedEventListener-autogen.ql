/**
 * @name chromium-dc0a8d8a80e653e13af8ff8cab0bf44b0f0baad0-blink__USB__AddedEventListener
 * @id cpp/chromium/dc0a8d8a80e653e13af8ff8cab0bf44b0f0baad0/blinkusbaddedeventlistener
 * @description chromium-dc0a8d8a80e653e13af8ff8cab0bf44b0f0baad0-third_party/blink/renderer/modules/webusb/usb.cc-blink__USB__AddedEventListener CVE-2023-2462
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("IsContextSupported")
	and not target_0.getTarget().hasName("ShouldBlockUsbServiceCall")
	and target_0.getQualifier() instanceof ThisExpr
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func) {
exists(FunctionCall target_1 |
	exists(FunctionCall obj_0 | obj_0=target_1.getQualifier() |
		obj_0.getTarget().hasName("GetSupplementable")
		and obj_0.getQualifier() instanceof ThisExpr
	)
	and target_1.getTarget().hasName("DomWindow")
	and target_1.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(Function func) {
exists(FunctionCall target_2 |
	target_2.getTarget().hasName("GetExecutionContext")
	and target_2.getQualifier() instanceof ThisExpr
	and target_2.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
	and target_2.getEnclosingFunction() = func
)
}

predicate func_4(Function func, ThisExpr target_4) {
	target_4.getType() instanceof PointerType
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Function func, ThisExpr target_5) {
	target_5.getType() instanceof PointerType
	and target_5.getEnclosingFunction() = func
}

predicate func_6(LogicalOrExpr target_7, Function func, ReturnStmt target_6) {
	target_6.getParent().(IfStmt).getCondition()=target_7
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Function func, LogicalOrExpr target_7) {
	exists(NotExpr obj_0 | obj_0=target_7.getRightOperand() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().hasName("IsFeatureEnabled")
			and obj_1.getQualifier() instanceof ThisExpr
		)
	)
	and target_7.getLeftOperand().(NotExpr).getOperand() instanceof FunctionCall
	and target_7.getParent().(IfStmt).getThen() instanceof ReturnStmt
	and target_7.getEnclosingFunction() = func
}

from Function func, FunctionCall target_0, ThisExpr target_4, ThisExpr target_5, ReturnStmt target_6, LogicalOrExpr target_7
where
func_0(func, target_0)
and not func_1(func)
and not func_2(func)
and func_4(func, target_4)
and func_5(func, target_5)
and func_6(target_7, func, target_6)
and func_7(func, target_7)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
