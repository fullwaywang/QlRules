/**
 * @name linux-09b1d5dc6ce1c9151777f6c4e128a59457704c97-wiphy_new_nm
 * @id cpp/linux/09b1d5dc6ce1c9151777f6c4e128a59457704c97/wiphy-new-nm
 * @description linux-09b1d5dc6ce1c9151777f6c4e128a59457704c97-net/wireless/core.c-wiphy_new_nm CVE-2021-47494
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, SizeofExprOperator target_0) {
	target_0.getValue()="3840"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(ExprStmt target_2, Function func) {
exists(DoStmt target_1 |
	target_1.getCondition().(Literal).getValue()="0"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__raw_spin_lock_init")
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("spinlock_check")
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="mgmt_registrations_lock"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="&rdev->mgmt_registrations_lock"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("lock_class_key")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_2.getLocation()))
}

predicate func_2(Function func, ExprStmt target_2) {
	target_2.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getTarget().getName()="flags"
	and target_2.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="wiphy"
	and target_2.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("cfg80211_registered_device *")
	and target_2.getEnclosingFunction() = func
}

from Function func, SizeofExprOperator target_0, ExprStmt target_2
where
func_0(func, target_0)
and not func_1(target_2, func)
and func_2(func, target_2)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
