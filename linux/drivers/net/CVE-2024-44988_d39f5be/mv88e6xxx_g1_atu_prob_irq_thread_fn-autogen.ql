/**
 * @name linux-d39f5be62f098fe367d672b4dd4bc4b2b80e08e7-mv88e6xxx_g1_atu_prob_irq_thread_fn
 * @id cpp/linux/d39f5be62f098fe367d672b4dd4bc4b2b80e08e7/mv88e6xxx-g1-atu-prob-irq-thread-fn
 * @description linux-d39f5be62f098fe367d672b4dd4bc4b2b80e08e7-drivers/net/dsa/mv88e6xxx/global1_atu.c-mv88e6xxx_g1_atu_prob_irq_thread_fn CVE-2024-44988
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vspid_373, BitwiseAndExpr target_2, ExprStmt target_3, ExprStmt target_1) {
exists(IfStmt target_0 |
	exists(RelationalOperation obj_0 | obj_0=target_0.getCondition() |
		obj_0.getLesserOperand().(VariableAccess).getTarget()=vspid_373
		and obj_0.getGreaterOperand().(AddExpr).getValue()="12"
	)
	and exists(BlockStmt obj_1 | obj_1=target_0.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getThen().(BlockStmt).getStmt(1)=target_0
			and obj_2.getCondition()=target_2
		)
	)
	and target_0.getThen() instanceof ExprStmt
	and target_3.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_1.getExpr().(PostfixIncrExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vchip_371, Variable vspid_373, BitwiseAndExpr target_2, ExprStmt target_1) {
	exists(PostfixIncrExpr obj_0 | obj_0=target_1.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			exists(ArrayExpr obj_2 | obj_2=obj_1.getQualifier() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getArrayBase() |
					obj_3.getTarget().getName()="ports"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vchip_371
				)
				and obj_2.getArrayOffset().(VariableAccess).getTarget()=vspid_373
			)
			and obj_1.getTarget().getName()="atu_full_violation"
		)
	)
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
}

predicate func_2(Function func, BitwiseAndExpr target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget().getType().hasName("u16")
	and target_2.getRightOperand().(BinaryBitwiseOperation).getValue()="16"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vchip_371, Variable vspid_373, ExprStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().getName()="dev"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vchip_371
		)
		and exists(ValueFieldAccess obj_2 | obj_2=obj_0.getArgument(2) |
			obj_2.getTarget().getName()="portvec"
			and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("mv88e6xxx_atu_entry")
		)
		and exists(ValueFieldAccess obj_3 | obj_3=obj_0.getArgument(3) |
			obj_3.getTarget().getName()="mac"
			and obj_3.getQualifier().(VariableAccess).getTarget().getType().hasName("mv88e6xxx_atu_entry")
		)
		and obj_0.getTarget().hasName("trace_mv88e6xxx_atu_full_violation")
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vspid_373
		and obj_0.getArgument(4).(VariableAccess).getTarget().getType().hasName("u16")
	)
}

from Function func, Variable vchip_371, Variable vspid_373, ExprStmt target_1, BitwiseAndExpr target_2, ExprStmt target_3
where
not func_0(vspid_373, target_2, target_3, target_1)
and func_1(vchip_371, vspid_373, target_2, target_1)
and func_2(func, target_2)
and func_3(vchip_371, vspid_373, target_3)
and vchip_371.getType().hasName("mv88e6xxx_chip *")
and vspid_373.getType().hasName("int")
and vchip_371.(LocalVariable).getFunction() = func
and vspid_373.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
