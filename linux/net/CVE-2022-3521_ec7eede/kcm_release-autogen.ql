/**
 * @name linux-ec7eede369fe5b0d085ac51fdbb95184f87bfc6c-kcm_release
 * @id cpp/linux/ec7eede369fe5b0d085ac51fdbb95184f87bfc6c/kcm-release
 * @description linux-ec7eede369fe5b0d085ac51fdbb95184f87bfc6c-net/kcm/kcmsock.c-kcm_release CVE-2022-3521
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsk_1830, ExprStmt target_1, ExprStmt target_0) {
	target_0.getExpr().(FunctionCall).getTarget().hasName("lock_sock")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_1830
	and target_1.getLocation().isBefore(target_0.getLocation())
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("kfree_skb")
	and target_1.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="seq_skb"
	and target_1.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("kcm_sock *")
	and target_1.getEnclosingFunction() = func
}

from Function func, Variable vsk_1830, ExprStmt target_0, ExprStmt target_1
where
func_0(vsk_1830, target_1, target_0)
and func_1(func, target_1)
and vsk_1830.getType().hasName("sock *")
and vsk_1830.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
