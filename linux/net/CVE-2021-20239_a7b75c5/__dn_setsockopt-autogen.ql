/**
 * @name linux-a7b75c5a8c41445f33efb663887ff5f5c3b4454b-__dn_setsockopt
 * @id cpp/linux/a7b75c5a8c41445f33efb663887ff5f5c3b4454b/--dn-setsockopt
 * @description linux-a7b75c5a8c41445f33efb663887ff5f5c3b4454b-net/decnet/af_decnet.c-__dn_setsockopt CVE-2021-20239
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter voptval_1342, Parameter voptlen_1342, ReturnStmt target_6) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("sockptr_is_null")
	and target_0.getArgument(0).(VariableAccess).getTarget()=voptval_1342
	and target_0.getParent().(LogicalAndExpr).getLeftOperand().(VariableAccess).getTarget()=voptlen_1342
	and target_0.getParent().(LogicalAndExpr).getRightOperand() instanceof NotExpr
	and target_0.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_6)
}

predicate func_1(Parameter voptval_1342, Parameter voptlen_1342, ReturnStmt target_8, FunctionCall target_5, EqualityOperation target_10) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("copy_from_sockptr")
	and target_1.getArgument(0) instanceof AddressOfExpr
	and target_1.getArgument(1).(VariableAccess).getTarget()=voptval_1342
	and target_1.getArgument(2).(VariableAccess).getTarget()=voptlen_1342
	and target_1.getParent().(IfStmt).getThen()=target_8
	and target_1.getArgument(1).(VariableAccess).getLocation().isBefore(target_5.getArgument(1).(VariableAccess).getLocation())
	and target_1.getArgument(2).(VariableAccess).getLocation().isBefore(target_10.getLeftOperand().(VariableAccess).getLocation()))
}

predicate func_2(Parameter voptval_1342, Parameter voptlen_1342, Variable vu_1355, ReturnStmt target_8, AddressOfExpr target_2) {
	target_2.getOperand().(VariableAccess).getTarget()=vu_1355
	and target_2.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=voptval_1342
	and target_2.getParent().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=voptlen_1342
	and target_2.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_8
}

/*predicate func_3(Parameter voptval_1342, Parameter voptlen_1342, Variable vu_1355, ReturnStmt target_8, VariableAccess target_3) {
	target_3.getTarget()=voptlen_1342
	and target_3.getParent().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vu_1355
	and target_3.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=voptval_1342
	and target_3.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_8
}

*/
predicate func_4(Parameter voptval_1342, Parameter voptlen_1342, ReturnStmt target_6, NotExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget()=voptval_1342
	and target_4.getParent().(LogicalAndExpr).getLeftOperand().(VariableAccess).getTarget()=voptlen_1342
	and target_4.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_6
}

predicate func_5(Parameter voptval_1342, Parameter voptlen_1342, ReturnStmt target_8, FunctionCall target_5) {
	target_5.getTarget().hasName("copy_from_user")
	and target_5.getArgument(0) instanceof AddressOfExpr
	and target_5.getArgument(1).(VariableAccess).getTarget()=voptval_1342
	and target_5.getArgument(2).(VariableAccess).getTarget()=voptlen_1342
	and target_5.getParent().(IfStmt).getThen()=target_8
}

predicate func_6(LogicalAndExpr target_11, Function func, ReturnStmt target_6) {
	target_6.getExpr().(UnaryMinusExpr).getValue()="-22"
	and target_6.getParent().(IfStmt).getCondition()=target_11
	and target_6.getEnclosingFunction() = func
}

predicate func_8(Function func, ReturnStmt target_8) {
	target_8.getExpr().(UnaryMinusExpr).getValue()="-14"
	and target_8.getEnclosingFunction() = func
}

predicate func_10(Parameter voptlen_1342, ReturnStmt target_12, EqualityOperation target_10) {
	target_10.getLeftOperand().(VariableAccess).getTarget()=voptlen_1342
	and target_10.getRightOperand().(SizeofTypeOperator).getType() instanceof LongType
	and target_10.getRightOperand().(SizeofTypeOperator).getValue()="20"
	and target_10.getParent().(IfStmt).getThen()=target_12
}

predicate func_11(Parameter voptlen_1342, LogicalAndExpr target_11) {
	target_11.getLeftOperand().(VariableAccess).getTarget()=voptlen_1342
	and target_11.getRightOperand() instanceof NotExpr
}

predicate func_12(EqualityOperation target_10, Function func, ReturnStmt target_12) {
	target_12.getExpr().(UnaryMinusExpr).getValue()="-22"
	and target_12.getParent().(IfStmt).getCondition()=target_10
	and target_12.getEnclosingFunction() = func
}

from Function func, Parameter voptval_1342, Parameter voptlen_1342, Variable vu_1355, AddressOfExpr target_2, NotExpr target_4, FunctionCall target_5, ReturnStmt target_6, ReturnStmt target_8, EqualityOperation target_10, LogicalAndExpr target_11, ReturnStmt target_12
where
not func_0(voptval_1342, voptlen_1342, target_6)
and not func_1(voptval_1342, voptlen_1342, target_8, target_5, target_10)
and func_2(voptval_1342, voptlen_1342, vu_1355, target_8, target_2)
and func_4(voptval_1342, voptlen_1342, target_6, target_4)
and func_5(voptval_1342, voptlen_1342, target_8, target_5)
and func_6(target_11, func, target_6)
and func_8(func, target_8)
and func_10(voptlen_1342, target_12, target_10)
and func_11(voptlen_1342, target_11)
and func_12(target_10, func, target_12)
and voptval_1342.getType().hasName("char *")
and voptlen_1342.getType().hasName("unsigned int")
and vu_1355.getType().hasName("union <unnamed>")
and voptval_1342.getFunction() = func
and voptlen_1342.getFunction() = func
and vu_1355.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
