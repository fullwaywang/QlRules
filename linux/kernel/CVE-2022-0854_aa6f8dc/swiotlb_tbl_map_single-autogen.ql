/**
 * @name linux-aa6f8dcbab473f3a3c7454b74caa46d36cdc5d13-swiotlb_tbl_map_single
 * @id cpp/linux/aa6f8dcbab473f3a3c7454b74caa46d36cdc5d13/swiotlb-tbl-map-single
 * @description linux-aa6f8dcbab473f3a3c7454b74caa46d36cdc5d13-kernel/dma/swiotlb.c-swiotlb_tbl_map_single CVE-2022-0854
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vmapping_size_590, Variable vtlb_addr_598, Parameter vdev_589, LogicalAndExpr target_2, ExprStmt target_0) {
	target_0.getExpr().(FunctionCall).getTarget().hasName("swiotlb_bounce")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdev_589
	and target_0.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vtlb_addr_598
	and target_0.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vmapping_size_590
	and target_0.getParent().(IfStmt).getCondition()=target_2
}

predicate func_1(Parameter vdir_591, Parameter vattrs_592, Function func, IfStmt target_1) {
	target_1.getCondition().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vattrs_592
	and target_1.getCondition().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="32"
	and target_1.getCondition().(LogicalAndExpr).getRightOperand().(LogicalOrExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vattrs_592
	and target_1.getCondition().(LogicalAndExpr).getRightOperand().(LogicalOrExpr).getLeftOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vdir_591
	and target_1.getCondition().(LogicalAndExpr).getRightOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vdir_591
	and target_1.getThen() instanceof ExprStmt
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

predicate func_2(Function func, LogicalAndExpr target_2) {
	target_2.getLeftOperand() instanceof NotExpr
	and target_2.getRightOperand() instanceof LogicalOrExpr
	and target_2.getEnclosingFunction() = func
}

from Function func, Parameter vmapping_size_590, Parameter vdir_591, Parameter vattrs_592, Variable vtlb_addr_598, Parameter vdev_589, ExprStmt target_0, IfStmt target_1, LogicalAndExpr target_2
where
func_0(vmapping_size_590, vtlb_addr_598, vdev_589, target_2, target_0)
and func_1(vdir_591, vattrs_592, func, target_1)
and func_2(func, target_2)
and vmapping_size_590.getType().hasName("size_t")
and vdir_591.getType().hasName("dma_data_direction")
and vattrs_592.getType().hasName("unsigned long")
and vtlb_addr_598.getType().hasName("phys_addr_t")
and vdev_589.getType().hasName("device *")
and vmapping_size_590.getFunction() = func
and vdir_591.getFunction() = func
and vattrs_592.getFunction() = func
and vtlb_addr_598.(LocalVariable).getFunction() = func
and vdev_589.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
