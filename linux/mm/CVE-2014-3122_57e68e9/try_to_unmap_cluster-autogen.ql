/**
 * @name linux-57e68e9cd65b4b8eb4045a1e0d0746458502554c-try_to_unmap_cluster
 * @id cpp/linux/57e68e9cd65b4b8eb4045a1e0d0746458502554c/try-to-unmap-cluster
 * @description linux-57e68e9cd65b4b8eb4045a1e0d0746458502554c-mm/rmap.c-try_to_unmap_cluster CVE-2014-3122
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vpage_1290, EqualityOperation target_3, ValueFieldAccess target_4) {
	exists(IfStmt target_0 |
		target_0.getCondition().(FunctionCall).getTarget().hasName("trylock_page")
		and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1290
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mlock_vma_page")
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1290
		and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("unlock_page")
		and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1290
		and target_0.getParent().(IfStmt).getCondition()=target_3
		and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vpage_1290, VariableAccess target_5, ExprStmt target_1) {
		target_1.getExpr().(FunctionCall).getTarget().hasName("mlock_vma_page")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1290
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_2(Variable vret_1295, EqualityOperation target_3, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_1295
		and target_2.getExpr().(AssignExpr).getRValue().(Literal).getValue()="3"
		and target_2.getParent().(IfStmt).getCondition()=target_3
}

predicate func_3(Variable vpage_1290, EqualityOperation target_3) {
		target_3.getAnOperand().(VariableAccess).getTarget()=vpage_1290
		and target_3.getAnOperand().(VariableAccess).getTarget().getType().hasName("page *")
}

predicate func_4(Variable vpage_1290, ValueFieldAccess target_4) {
		target_4.getTarget().getName()="(unknown field)"
		and target_4.getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
		and target_4.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpage_1290
}

predicate func_5(Variable vlocked_vma_1296, BlockStmt target_6, VariableAccess target_5) {
		target_5.getTarget()=vlocked_vma_1296
		and target_5.getParent().(IfStmt).getThen()=target_6
}

predicate func_6(Variable vpage_1290, BlockStmt target_6) {
		target_6.getStmt(0) instanceof ExprStmt
		and target_6.getStmt(1).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getTarget()=vpage_1290
		and target_6.getStmt(1).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("page *")
		and target_6.getStmt(1).(IfStmt).getThen() instanceof ExprStmt
}

from Function func, Variable vpage_1290, Variable vret_1295, Variable vlocked_vma_1296, ExprStmt target_1, ExprStmt target_2, EqualityOperation target_3, ValueFieldAccess target_4, VariableAccess target_5, BlockStmt target_6
where
not func_0(vpage_1290, target_3, target_4)
and func_1(vpage_1290, target_5, target_1)
and func_2(vret_1295, target_3, target_2)
and func_3(vpage_1290, target_3)
and func_4(vpage_1290, target_4)
and func_5(vlocked_vma_1296, target_6, target_5)
and func_6(vpage_1290, target_6)
and vpage_1290.getType().hasName("page *")
and vret_1295.getType().hasName("int")
and vlocked_vma_1296.getType().hasName("int")
and vpage_1290.(LocalVariable).getFunction() = func
and vret_1295.(LocalVariable).getFunction() = func
and vlocked_vma_1296.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
