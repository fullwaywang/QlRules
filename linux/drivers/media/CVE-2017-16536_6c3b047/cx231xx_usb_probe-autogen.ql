/**
 * @name linux-6c3b047fa2d2286d5e438bcb470c7b1a49f415f6-cx231xx_usb_probe
 * @id cpp/linux/6c3b047fa2d2286d5e438bcb470c7b1a49f415f6/cx231xx-usb-probe
 * @description linux-6c3b047fa2d2286d5e438bcb470c7b1a49f415f6-drivers/media/usb/cx231xx/cx231xx-cards.c-cx231xx_usb_probe CVE-2017-16536
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vassoc_desc_1594, BlockStmt target_2, ExprStmt target_3, EqualityOperation target_1) {
exists(LogicalOrExpr target_0 |
	target_0.getLeftOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vassoc_desc_1594
	and target_0.getRightOperand() instanceof EqualityOperation
	and target_0.getParent().(IfStmt).getThen()=target_2
	and target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getLeftOperand().(NotExpr).getOperand().(VariableAccess).getLocation())
	and target_0.getLeftOperand().(NotExpr).getOperand().(VariableAccess).getLocation().isBefore(target_1.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vifnum_1590, Variable vassoc_desc_1594, BlockStmt target_2, EqualityOperation target_1) {
	target_1.getLeftOperand().(PointerFieldAccess).getTarget().getName()="bFirstInterface"
	and target_1.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vassoc_desc_1594
	and target_1.getRightOperand().(VariableAccess).getTarget()=vifnum_1590
	and target_1.getParent().(IfStmt).getThen()=target_2
}

predicate func_2(Function func, BlockStmt target_2) {
	target_2.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("dev_err")
	and target_2.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("device *")
	and target_2.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="Not found matching IAD interface\n"
	and target_2.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-19"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vassoc_desc_1594, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vassoc_desc_1594
	and target_3.getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="intf_assoc"
	and target_3.getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="actconfig"
	and target_3.getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("usb_device *")
	and target_3.getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayOffset().(Literal).getValue()="0"
}

from Function func, Variable vifnum_1590, Variable vassoc_desc_1594, EqualityOperation target_1, BlockStmt target_2, ExprStmt target_3
where
not func_0(vassoc_desc_1594, target_2, target_3, target_1)
and func_1(vifnum_1590, vassoc_desc_1594, target_2, target_1)
and func_2(func, target_2)
and func_3(vassoc_desc_1594, target_3)
and vifnum_1590.getType().hasName("int")
and vassoc_desc_1594.getType().hasName("usb_interface_assoc_descriptor *")
and vifnum_1590.(LocalVariable).getFunction() = func
and vassoc_desc_1594.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
