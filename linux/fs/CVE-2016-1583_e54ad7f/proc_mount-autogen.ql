/**
 * @name linux-e54ad7f1ee263ffa5a2de9c609d58dfa27b21cd9-proc_mount
 * @id cpp/linux/e54ad7f1ee263ffa5a2de9c609d58dfa27b21cd9/proc-mount
 * @description linux-e54ad7f1ee263ffa5a2de9c609d58dfa27b21cd9-fs/proc/root.c-proc_mount CVE-2016-1583
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsb_104, IfStmt target_1, FunctionCall target_2, ExprStmt target_3, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="s_stack_depth"
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsb_104
	and target_0.getExpr().(AssignExpr).getRValue().(Literal).getValue()="2"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vsb_104, IfStmt target_1) {
	target_1.getCondition().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("proc_parse_options")
	and target_1.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("char *")
	and target_1.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("pid_namespace *")
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("deactivate_locked_super")
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsb_104
	and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("ERR_PTR")
	and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(UnaryMinusExpr).getValue()="-22"
}

predicate func_2(Variable vsb_104, FunctionCall target_2) {
	target_2.getTarget().hasName("ERR_CAST")
	and target_2.getArgument(0).(VariableAccess).getTarget()=vsb_104
}

predicate func_3(Variable vsb_104, NotExpr target_4, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("deactivate_locked_super")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsb_104
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_4(Function func, NotExpr target_4) {
	target_4.getOperand().(FunctionCall).getTarget().hasName("proc_parse_options")
	and target_4.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("char *")
	and target_4.getOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("pid_namespace *")
	and target_4.getEnclosingFunction() = func
}

from Function func, Variable vsb_104, IfStmt target_1, FunctionCall target_2, ExprStmt target_3, NotExpr target_4
where
not func_0(vsb_104, target_1, target_2, target_3, func)
and func_1(vsb_104, target_1)
and func_2(vsb_104, target_2)
and func_3(vsb_104, target_4, target_3)
and func_4(func, target_4)
and vsb_104.getType().hasName("super_block *")
and vsb_104.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
