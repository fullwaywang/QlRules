/**
 * @name linux-45f6fad84cc305103b28d73482b344d7f5b76f39-inet6_destroy_sock
 * @id cpp/linux/45f6fad84cc305103b28d73482b344d7f5b76f39/inet6-destroy-sock
 * @description linux-45f6fad84cc305103b28d73482b344d7f5b76f39-net/ipv6/af_inet6.c-inet6_destroy_sock CVE-2016-3841
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vopt_414, Parameter vsk_410, FunctionCall target_0) {
	target_0.getTarget().hasName("sock_kfree_s")
	and not target_0.getTarget().hasName("atomic_sub")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vsk_410
	and target_0.getArgument(1).(VariableAccess).getTarget()=vopt_414
	and target_0.getArgument(2).(PointerFieldAccess).getTarget().getName()="tot_len"
	and target_0.getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vopt_414
}

predicate func_1(Parameter vsk_410) {
exists(AddressOfExpr target_1 |
	target_1.getOperand().(PointerFieldAccess).getTarget().getName()="sk_omem_alloc"
	and target_1.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_410
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall)
}

predicate func_2(Variable vopt_414, VariableAccess target_5) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("txopt_put")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vopt_414
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_2
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5)
}

predicate func_3(Parameter vsk_410, VariableAccess target_3) {
	target_3.getTarget()=vsk_410
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_4(Variable vopt_414, VariableAccess target_4) {
	target_4.getTarget()=vopt_414
	and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_5(Variable vopt_414, ExprStmt target_6, VariableAccess target_5) {
	target_5.getTarget()=vopt_414
	and target_5.getParent().(IfStmt).getThen()=target_6
}

predicate func_6(Function func, ExprStmt target_6) {
	target_6.getExpr() instanceof FunctionCall
	and target_6.getEnclosingFunction() = func
}

from Function func, Variable vopt_414, Parameter vsk_410, FunctionCall target_0, VariableAccess target_3, VariableAccess target_4, VariableAccess target_5, ExprStmt target_6
where
func_0(vopt_414, vsk_410, target_0)
and not func_1(vsk_410)
and not func_2(vopt_414, target_5)
and func_3(vsk_410, target_3)
and func_4(vopt_414, target_4)
and func_5(vopt_414, target_6, target_5)
and func_6(func, target_6)
and vopt_414.getType().hasName("ipv6_txoptions *")
and vsk_410.getType().hasName("sock *")
and vopt_414.(LocalVariable).getFunction() = func
and vsk_410.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
