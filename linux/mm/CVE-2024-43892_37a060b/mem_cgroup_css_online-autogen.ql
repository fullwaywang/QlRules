/**
 * @name linux-37a060b64ae83b76600d187d76591ce488ab836b-mem_cgroup_css_online
 * @id cpp/linux/37a060b64ae83b76600d187d76591ce488ab836b/mem-cgroup-css-online
 * @description linux-37a060b64ae83b76600d187d76591ce488ab836b-mm/memcontrol.c-mem_cgroup_css_online CVE-2024-43892
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_2, Function func) {
exists(ExprStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		obj_0.getTarget().hasName("spin_lock")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("spinlock_t")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
)
}

predicate func_1(Function func) {
exists(ExprStmt target_1 |
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		obj_0.getTarget().hasName("spin_unlock")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("spinlock_t")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getFollowingStmt() instanceof ReturnStmt
)
}

predicate func_2(Function func, ExprStmt target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getArgument(2) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="id"
				and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("mem_cgroup *")
			)
			and obj_1.getTarget().getName()="id"
		)
		and obj_0.getTarget().hasName("idr_replace")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("idr")
		and obj_0.getArgument(1).(VariableAccess).getTarget().getType().hasName("mem_cgroup *")
	)
	and target_2.getEnclosingFunction() = func
}

from Function func, ExprStmt target_2
where
not func_0(target_2, func)
and not func_1(func)
and func_2(func, target_2)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
