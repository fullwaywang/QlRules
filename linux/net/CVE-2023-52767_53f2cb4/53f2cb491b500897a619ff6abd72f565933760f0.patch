commit 53f2cb491b500897a619ff6abd72f565933760f0
Author: Jann Horn <jannh@google.com>
Date:   Wed Nov 22 22:44:47 2023 +0100

    tls: fix NULL deref on tls_sw_splice_eof() with empty record
    
    syzkaller discovered that if tls_sw_splice_eof() is executed as part of
    sendfile() when the plaintext/ciphertext sk_msg are empty, the send path
    gets confused because the empty ciphertext buffer does not have enough
    space for the encryption overhead. This causes tls_push_record() to go on
    the `split = true` path (which is only supposed to be used when interacting
    with an attached BPF program), and then get further confused and hit the
    tls_merge_open_record() path, which then assumes that there must be at
    least one populated buffer element, leading to a NULL deref.
    
    It is possible to have empty plaintext/ciphertext buffers if we previously
    bailed from tls_sw_sendmsg_locked() via the tls_trim_both_msgs() path.
    tls_sw_push_pending_record() already handles this case correctly; let's do
    the same check in tls_sw_splice_eof().
    
    Fixes: df720d288dbb ("tls/sw: Use splice_eof() to flush")
    Cc: stable@vger.kernel.org
    Reported-by: syzbot+40d43509a099ea756317@syzkaller.appspotmail.com
    Signed-off-by: Jann Horn <jannh@google.com>
    Link: https://lore.kernel.org/r/20231122214447.675768-1-jannh@google.com
    Signed-off-by: Jakub Kicinski <kuba@kernel.org>

diff --git a/net/tls/tls_sw.c b/net/tls/tls_sw.c
index a78e8e722409..316f76187962 100644
--- a/net/tls/tls_sw.c
+++ b/net/tls/tls_sw.c
@@ -1232,11 +1232,14 @@ void tls_sw_splice_eof(struct socket *sock)
 	lock_sock(sk);
 
 retry:
+	/* same checks as in tls_sw_push_pending_record() */
 	rec = ctx->open_rec;
 	if (!rec)
 		goto unlock;
 
 	msg_pl = &rec->msg_plaintext;
+	if (msg_pl->sg.size == 0)
+		goto unlock;
 
 	/* Check the BPF advisor and perform transmission. */
 	ret = bpf_exec_tx_verdict(msg_pl, sk, false, TLS_RECORD_TYPE_DATA,
