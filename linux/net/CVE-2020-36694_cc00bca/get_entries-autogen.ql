/**
 * @name linux-cc00bcaa589914096edef7fb87ca5cee4a166b5c-get_entries
 * @id cpp/linux/cc00bcaa589914096edef7fb87ca5cee4a166b5c/get-entries
 * @description linux-cc00bcaa589914096edef7fb87ca5cee4a166b5c-net/ipv4/netfilter/arp_tables.c-get_entries CVE-2020-36694
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vt_850, ExprStmt target_3) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("xt_table_get_private_protected")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vt_850
	and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation()))
}

predicate func_1(Variable vt_850, VariableAccess target_1) {
	target_1.getTarget()=vt_850
}

predicate func_2(Variable vt_850, PointerFieldAccess target_2) {
	target_2.getTarget().getName()="private"
	and target_2.getQualifier().(VariableAccess).getTarget()=vt_850
}

predicate func_3(Variable vt_850, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("copy_entries_to_user")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="size"
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("const xt_table_info *")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vt_850
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="entrytable"
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("arpt_get_entries *")
}

from Function func, Variable vt_850, VariableAccess target_1, PointerFieldAccess target_2, ExprStmt target_3
where
not func_0(vt_850, target_3)
and func_1(vt_850, target_1)
and func_2(vt_850, target_2)
and func_3(vt_850, target_3)
and vt_850.getType().hasName("xt_table *")
and vt_850.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
