/**
 * @name frr-9b855a692e68e0d16467e190b466b4ecb6853702-bgp_route_refresh_receive
 * @id cpp/frr/9b855a692e68e0d16467e190b466b4ecb6853702/bgp-route-refresh-receive
 * @description frr-9b855a692e68e0d16467e190b466b4ecb6853702-bgpd/bgp_packet.c-bgp_route_refresh_receive CVE-2023-41360
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vp_pnt_2450, Variable vp_end_2451, BlockStmt target_2, BitwiseAndExpr target_1, RelationalOperation target_5) {
	exists(LogicalAndExpr target_0 |
		target_0.getAnOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vp_pnt_2450
		and target_0.getAnOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vp_end_2451
		and target_0.getAnOperand() instanceof BitwiseAndExpr
		and target_0.getParent().(IfStmt).getThen()=target_2
		and target_0.getAnOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_1.getLeftOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getLocation())
		and target_0.getAnOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation().isBefore(target_5.getGreaterOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vp_pnt_2450, BlockStmt target_2, BitwiseAndExpr target_1) {
		target_1.getLeftOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vp_pnt_2450
		and target_1.getRightOperand().(Literal).getValue()="192"
		and target_1.getParent().(IfStmt).getThen()=target_2
}

predicate func_2(Function func, BlockStmt target_2) {
		target_2.getStmt(0).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("bgp_debug_neighbor_events")
		and target_2.getStmt(0).(IfStmt).getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("peer *")
		and target_2.getStmt(0).(IfStmt).getThen().(DoStmt).getCondition().(Literal).getValue()="0"
		and target_2.getStmt(0).(IfStmt).getThen().(DoStmt).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("zlog_ref")
		and target_2.getStmt(0).(IfStmt).getThen().(DoStmt).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%pBP rcvd Remove-All pfxlist ORF request"
		and target_2.getStmt(0).(IfStmt).getThen().(DoStmt).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("peer *")
		and target_2.getEnclosingFunction() = func
}

predicate func_5(Variable vp_pnt_2450, Variable vp_end_2451, RelationalOperation target_5) {
		 (target_5 instanceof GTExpr or target_5 instanceof LTExpr)
		and target_5.getLesserOperand().(VariableAccess).getTarget()=vp_pnt_2450
		and target_5.getGreaterOperand().(VariableAccess).getTarget()=vp_end_2451
}

from Function func, Variable vp_pnt_2450, Variable vp_end_2451, BitwiseAndExpr target_1, BlockStmt target_2, RelationalOperation target_5
where
not func_0(vp_pnt_2450, vp_end_2451, target_2, target_1, target_5)
and func_1(vp_pnt_2450, target_2, target_1)
and func_2(func, target_2)
and func_5(vp_pnt_2450, vp_end_2451, target_5)
and vp_pnt_2450.getType().hasName("uint8_t *")
and vp_end_2451.getType().hasName("uint8_t *")
and vp_pnt_2450.(LocalVariable).getFunction() = func
and vp_end_2451.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
