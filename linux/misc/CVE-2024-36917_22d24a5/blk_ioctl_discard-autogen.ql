/**
 * @name linux-22d24a544b0d49bbcbd61c8c0eaf77d3c9297155-blk_ioctl_discard
 * @id cpp/linux/22d24a544b0d49bbcbd61c8c0eaf77d3c9297155/blk-ioctl-discard
 * @description linux-22d24a544b0d49bbcbd61c8c0eaf77d3c9297155-block/ioctl.c-blk_ioctl_discard CVE-2024-36917
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Variable vstart_99, Variable vlen_99, Parameter vbdev_95, ReturnStmt target_6, ExprStmt target_7, SubExpr target_8, NotExpr target_9) {
exists(LogicalOrExpr target_1 |
	target_1.getLeftOperand().(FunctionCall).getTarget().hasName("__must_check_overflow")
	and target_1.getLeftOperand().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("__builtin_add_overflow")
	and target_1.getLeftOperand().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vstart_99
	and target_1.getLeftOperand().(FunctionCall).getArgument(0).(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vlen_99
	and target_1.getLeftOperand().(FunctionCall).getArgument(0).(FunctionCall).getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("uint64_t")
	and target_1.getRightOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getType().hasName("uint64_t")
	and target_1.getRightOperand().(RelationalOperation).getLesserOperand().(FunctionCall).getTarget().hasName("bdev_nr_bytes")
	and target_1.getRightOperand().(RelationalOperation).getLesserOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbdev_95
	and target_1.getParent().(IfStmt).getThen()=target_6
	and target_1.getLeftOperand().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getLocation())
	and target_1.getLeftOperand().(FunctionCall).getArgument(0).(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_8.getLeftOperand().(AddExpr).getRightOperand().(VariableAccess).getLocation())
	and target_9.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getRightOperand().(RelationalOperation).getLesserOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Variable vstart_99, VariableAccess target_3) {
	target_3.getTarget()=vstart_99
}

predicate func_4(Variable vlen_99, VariableAccess target_4) {
	target_4.getTarget()=vlen_99
}

predicate func_5(Variable vstart_99, Variable vlen_99, Parameter vbdev_95, ReturnStmt target_6, ExprStmt target_7, SubExpr target_8, NotExpr target_9, AddExpr target_5) {
	target_5.getLeftOperand().(VariableAccess).getTarget()=vstart_99
	and target_5.getRightOperand().(VariableAccess).getTarget()=vlen_99
	and target_5.getParent().(GTExpr).getLesserOperand().(FunctionCall).getTarget().hasName("bdev_nr_bytes")
	and target_5.getParent().(GTExpr).getLesserOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbdev_95
	and target_5.getParent().(GTExpr).getParent().(IfStmt).getThen()=target_6
	and target_5.getLeftOperand().(VariableAccess).getLocation().isBefore(target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getLocation())
	and target_5.getRightOperand().(VariableAccess).getLocation().isBefore(target_8.getLeftOperand().(AddExpr).getRightOperand().(VariableAccess).getLocation())
	and target_9.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getParent().(GTExpr).getLesserOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
}

predicate func_6(RelationalOperation target_10, Function func, ReturnStmt target_6) {
	target_6.getExpr().(UnaryMinusExpr).getValue()="-22"
	and target_6.getParent().(IfStmt).getCondition()=target_10
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Variable vstart_99, Variable vlen_99, Parameter vbdev_95, ExprStmt target_7) {
	target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("truncate_bdev_range")
	and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbdev_95
	and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("blk_mode_t")
	and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vstart_99
	and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(SubExpr).getLeftOperand().(AddExpr).getLeftOperand().(VariableAccess).getTarget()=vstart_99
	and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(SubExpr).getLeftOperand().(AddExpr).getRightOperand().(VariableAccess).getTarget()=vlen_99
	and target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(SubExpr).getRightOperand().(Literal).getValue()="1"
}

predicate func_8(Variable vstart_99, Variable vlen_99, SubExpr target_8) {
	target_8.getLeftOperand().(AddExpr).getLeftOperand().(VariableAccess).getTarget()=vstart_99
	and target_8.getLeftOperand().(AddExpr).getRightOperand().(VariableAccess).getTarget()=vlen_99
	and target_8.getRightOperand().(Literal).getValue()="1"
}

predicate func_9(Parameter vbdev_95, NotExpr target_9) {
	target_9.getOperand().(FunctionCall).getTarget().hasName("bdev_max_discard_sectors")
	and target_9.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbdev_95
}

predicate func_10(Parameter vbdev_95, RelationalOperation target_10) {
	 (target_10 instanceof GTExpr or target_10 instanceof LTExpr)
	and target_10.getGreaterOperand() instanceof AddExpr
	and target_10.getLesserOperand().(FunctionCall).getTarget().hasName("bdev_nr_bytes")
	and target_10.getLesserOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbdev_95
}

from Function func, Variable vstart_99, Variable vlen_99, Parameter vbdev_95, VariableAccess target_3, VariableAccess target_4, AddExpr target_5, ReturnStmt target_6, ExprStmt target_7, SubExpr target_8, NotExpr target_9, RelationalOperation target_10
where
not func_1(vstart_99, vlen_99, vbdev_95, target_6, target_7, target_8, target_9)
and func_3(vstart_99, target_3)
and func_4(vlen_99, target_4)
and func_5(vstart_99, vlen_99, vbdev_95, target_6, target_7, target_8, target_9, target_5)
and func_6(target_10, func, target_6)
and func_7(vstart_99, vlen_99, vbdev_95, target_7)
and func_8(vstart_99, vlen_99, target_8)
and func_9(vbdev_95, target_9)
and func_10(vbdev_95, target_10)
and vstart_99.getType().hasName("uint64_t")
and vlen_99.getType().hasName("uint64_t")
and vbdev_95.getType().hasName("block_device *")
and vstart_99.(LocalVariable).getFunction() = func
and vlen_99.(LocalVariable).getFunction() = func
and vbdev_95.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
