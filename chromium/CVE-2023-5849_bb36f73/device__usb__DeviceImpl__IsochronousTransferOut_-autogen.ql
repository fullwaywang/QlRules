/**
 * @name chromium-bb36f739e7e0a3722beeb2744744195c22fd6143-device__usb__DeviceImpl__IsochronousTransferOut_
 * @id cpp/chromium/bb36f739e7e0a3722beeb2744744195c22fd6143/deviceusbdeviceimplisochronoustransferout
 * @description chromium-bb36f739e7e0a3722beeb2744744195c22fd6143-third_party/blink/renderer/modules/webusb/usb_device.cc-device__usb__DeviceImpl__IsochronousTransferOut_ CVE-2023-5849
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vdata_408, Parameter vpacket_lengths_409, Parameter vcallback_411, FunctionCall target_1, ExprStmt target_2, FunctionCall target_3, FunctionCall target_4, Function func) {
exists(IfStmt target_0 |
	exists(LogicalOrExpr obj_0 | obj_0=target_0.getCondition() |
		exists(NotExpr obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().hasName("has_value")
				and obj_2.getQualifier().(VariableAccess).getType().hasName("optional<unsigned int>")
			)
		)
		and exists(EqualityOperation obj_3 | obj_3=obj_0.getRightOperand() |
			exists(FunctionCall obj_4 | obj_4=obj_3.getLeftOperand() |
				obj_4.getTarget().hasName("value")
				and obj_4.getQualifier().(VariableAccess).getType().hasName("optional<unsigned int>")
			)
			and exists(FunctionCall obj_5 | obj_5=obj_3.getRightOperand() |
				obj_5.getTarget().hasName("size")
				and obj_5.getQualifier().(VariableAccess).getTarget()=vdata_408
			)
		)
	)
	and exists(BlockStmt obj_6 | obj_6=target_0.getThen() |
		exists(ExprStmt obj_7 | obj_7=obj_6.getStmt(0) |
			exists(FunctionCall obj_8 | obj_8=obj_7.getExpr() |
				obj_8.getTarget().hasName("ReportBadMessage")
				and obj_8.getArgument(0).(ConstructorCall).getArgument(0).(StringLiteral).getValue()="Invalid isochronous packet lengths."
			)
		)
		and exists(ExprStmt obj_9 | obj_9=obj_6.getStmt(1) |
			exists(FunctionCall obj_10 | obj_10=obj_9.getExpr() |
				exists(FunctionCall obj_11 | obj_11=obj_10.getQualifier() |
					obj_11.getTarget().hasName("move")
					and obj_11.getArgument(0).(VariableAccess).getTarget()=vcallback_411
				)
				and exists(FunctionCall obj_12 | obj_12=obj_10.getArgument(0) |
					obj_12.getTarget().hasName("BuildIsochronousPacketArray")
					and obj_12.getArgument(0).(VariableAccess).getTarget()=vpacket_lengths_409
				)
				and obj_10.getTarget().hasName("Run")
			)
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getFollowingStmt() instanceof DeclStmt
	and target_0.getCondition().(LogicalOrExpr).getRightOperand().(EqualityOperation).getRightOperand().(FunctionCall).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getArgument(0).(VariableAccess).getLocation())
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_2.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation())
	and target_3.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_1(Parameter vdata_408, FunctionCall target_1) {
	target_1.getTarget().hasName("MakeRefCounted")
	and target_1.getArgument(0).(VariableAccess).getTarget()=vdata_408
}

predicate func_2(Parameter vpacket_lengths_409, Parameter vcallback_411, ExprStmt target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getQualifier() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="device_handle_"
				and obj_2.getQualifier().(ThisExpr).getType() instanceof PointerType
			)
		)
		and exists(FunctionCall obj_3 | obj_3=obj_0.getArgument(4) |
			exists(FunctionCall obj_4 | obj_4=obj_3.getArgument(1) |
				obj_4.getTarget().hasName("move")
				and obj_4.getArgument(0).(VariableAccess).getTarget()=vcallback_411
			)
			and obj_3.getTarget().hasName("BindOnce")
		)
		and obj_0.getTarget().hasName("IsochronousTransferOut")
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("uint8_t")
		and obj_0.getArgument(1).(ConstructorCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("scoped_refptr<RefCountedBytes>")
		and obj_0.getArgument(2).(VariableAccess).getTarget()=vpacket_lengths_409
		and obj_0.getArgument(3).(VariableAccess).getTarget().getType().hasName("uint32_t")
	)
}

predicate func_3(Parameter vcallback_411, FunctionCall target_3) {
	target_3.getTarget().hasName("move")
	and target_3.getArgument(0).(VariableAccess).getTarget()=vcallback_411
}

predicate func_4(Parameter vcallback_411, FunctionCall target_4) {
	target_4.getTarget().hasName("move")
	and target_4.getArgument(0).(VariableAccess).getTarget()=vcallback_411
	and target_4.getParent().(FunctionCall).getParent().(FunctionCall).getArgument(4).(FunctionCall).getTarget().hasName("BindOnce")
}

from Function func, Parameter vdata_408, Parameter vpacket_lengths_409, Parameter vcallback_411, FunctionCall target_1, ExprStmt target_2, FunctionCall target_3, FunctionCall target_4
where
not func_0(vdata_408, vpacket_lengths_409, vcallback_411, target_1, target_2, target_3, target_4, func)
and func_1(vdata_408, target_1)
and func_2(vpacket_lengths_409, vcallback_411, target_2)
and func_3(vcallback_411, target_3)
and func_4(vcallback_411, target_4)
and vdata_408.getType().hasName("span<const unsigned char, 18446744073709551615UL, const unsigned char *>")
and vpacket_lengths_409.getType().hasName("const vector<unsigned int, allocator<unsigned int>> &")
and vcallback_411.getType().hasName("IsochronousTransferOutCallback")
and vdata_408.getFunction() = func
and vpacket_lengths_409.getFunction() = func
and vcallback_411.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
