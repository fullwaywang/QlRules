/**
 * @name linux-b22faa21b6230d5eccd233e1b7e0026a5002b287-dup_user_cpus_ptr
 * @id cpp/linux/b22faa21b6230d5eccd233e1b7e0026a5002b287/dup-user-cpus-ptr
 * @description linux-b22faa21b6230d5eccd233e1b7e0026a5002b287-kernel/sched/core.c-dup_user_cpus_ptr CVE-2022-48892
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vdst_2501, IfStmt target_13, Function func) {
exists(ExprStmt target_0 |
	exists(AssignExpr obj_0 | obj_0=target_0.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="user_cpus_ptr"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vdst_2501
		)
		and obj_0.getRValue().(Literal).getValue()="0"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_13.getLocation())
)
}

predicate func_2(ReturnStmt target_14, Function func) {
exists(StmtExpr target_2 |
	exists(BlockStmt obj_0 | obj_0=target_2.getStmt() |
		obj_0.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__kcsan_enable_current")
		and obj_0.getStmt(2).(ExprStmt).getExpr().(VariableAccess).getType().hasName("signed int")
	)
	and target_2.getParent().(IfStmt).getThen()=target_14
	and target_2.getEnclosingFunction() = func
)
}

predicate func_3(ExprStmt target_15, Function func) {
exists(ExprStmt target_3 |
	exists(AssignExpr obj_0 | obj_0=target_3.getExpr() |
		obj_0.getLValue().(VariableAccess).getType().hasName("cpumask_t *")
		and obj_0.getRValue() instanceof FunctionCall
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
	and target_3.getLocation().isBefore(target_15.getLocation())
)
}

predicate func_5(IfStmt target_16, Function func) {
exists(DoStmt target_5 |
	exists(BlockStmt obj_0 | obj_0=target_5.getStmt() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(1) |
			exists(AssignExpr obj_2 | obj_2=obj_1.getExpr() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getRValue() |
					obj_3.getTarget().hasName("_raw_spin_lock_irqsave")
					and obj_3.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="pi_lock"
				)
				and obj_2.getLValue().(VariableAccess).getType().hasName("unsigned long")
			)
		)
		and obj_0.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(Literal).getValue()="1"
	)
	and target_5.getCondition().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
	and target_5.getLocation().isBefore(target_16.getLocation())
)
}

predicate func_6(Parameter vsrc_2501, IfStmt target_16, Function func) {
exists(IfStmt target_6 |
	exists(PointerFieldAccess obj_0 | obj_0=target_6.getCondition() |
		obj_0.getTarget().getName()="user_cpus_ptr"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vsrc_2501
	)
	and exists(BlockStmt obj_1 | obj_1=target_6.getThen() |
		exists(DoStmt obj_2 | obj_2=obj_1.getStmt(0) |
			exists(BlockStmt obj_3 | obj_3=obj_2.getStmt() |
				exists(ExprStmt obj_4 | obj_4=obj_3.getStmt(1) |
					exists(AssignExpr obj_5 | obj_5=obj_4.getExpr() |
						obj_5.getLValue().(PointerFieldAccess).getTarget().getName()="user_cpus_ptr"
						and obj_5.getRValue().(VariableAccess).getType().hasName("cpumask_t *")
					)
				)
				and exists(ExprStmt obj_6 | obj_6=obj_3.getStmt(2) |
					exists(AssignExpr obj_7 | obj_7=obj_6.getExpr() |
						obj_7.getLValue().(VariableAccess).getType().hasName("cpumask_t *")
						and obj_7.getRValue().(VariableAccess).getType().hasName("cpumask_t *")
					)
				)
			)
			and obj_2.getCondition().(Literal).getValue()="0"
		)
		and obj_1.getStmt(1) instanceof ExprStmt
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_6
	and target_6.getLocation().isBefore(target_16.getLocation())
)
}

predicate func_7(Parameter vsrc_2501, IfStmt target_16, ExprStmt target_12, Function func) {
exists(DoStmt target_7 |
	exists(BlockStmt obj_0 | obj_0=target_7.getStmt() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(1) |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				exists(AddressOfExpr obj_3 | obj_3=obj_2.getArgument(0) |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getOperand() |
						obj_4.getTarget().getName()="pi_lock"
						and obj_4.getQualifier().(VariableAccess).getTarget()=vsrc_2501
					)
				)
				and obj_2.getTarget().hasName("_raw_spin_unlock_irqrestore")
				and obj_2.getArgument(1).(VariableAccess).getType().hasName("unsigned long")
			)
		)
		and obj_0.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(Literal).getValue()="1"
	)
	and target_7.getCondition().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_7
	and target_7.getLocation().isBefore(target_16.getLocation())
	and target_7.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_12.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_8(IfStmt target_16, Function func) {
exists(IfStmt target_8 |
	exists(FunctionCall obj_0 | obj_0=target_8.getCondition() |
		obj_0.getTarget().hasName("__builtin_expect")
		and obj_0.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getType().hasName("cpumask_t *")
		and obj_0.getArgument(1).(Literal).getValue()="0"
	)
	and exists(ExprStmt obj_1 | obj_1=target_8.getThen() |
		exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
			obj_2.getTarget().hasName("kfree")
			and obj_2.getArgument(0).(VariableAccess).getType().hasName("cpumask_t *")
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_8
	and target_8.getLocation().isBefore(target_16.getLocation())
)
}

predicate func_9(Parameter vdst_2501, Parameter vnode_2502, FunctionCall target_9) {
	exists(AssignExpr obj_0 | obj_0=target_9.getParent() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="user_cpus_ptr"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vdst_2501
		)
		and obj_0.getRValue() = target_9
	)
	and target_9.getTarget().hasName("kmalloc_node")
	and target_9.getArgument(0).(FunctionCall).getTarget().hasName("cpumask_size")
	and target_9.getArgument(1).(BitwiseOrExpr).getValue()="3264"
	and target_9.getArgument(2).(VariableAccess).getTarget()=vnode_2502
}

predicate func_10(Parameter vsrc_2501, ReturnStmt target_14, NotExpr target_10) {
	exists(PointerFieldAccess obj_0 | obj_0=target_10.getOperand() |
		obj_0.getTarget().getName()="user_cpus_ptr"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vsrc_2501
	)
	and target_10.getParent().(IfStmt).getThen()=target_14
}

predicate func_11(Parameter vdst_2501, ReturnStmt target_17, PointerFieldAccess target_11) {
	target_11.getTarget().getName()="user_cpus_ptr"
	and target_11.getQualifier().(VariableAccess).getTarget()=vdst_2501
	and target_11.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_17
}

predicate func_12(Parameter vdst_2501, Parameter vsrc_2501, Function func, ExprStmt target_12) {
	exists(FunctionCall obj_0 | obj_0=target_12.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().getName()="user_cpus_ptr"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vdst_2501
		)
		and exists(PointerFieldAccess obj_2 | obj_2=obj_0.getArgument(1) |
			obj_2.getTarget().getName()="user_cpus_ptr"
			and obj_2.getQualifier().(VariableAccess).getTarget()=vsrc_2501
		)
		and obj_0.getTarget().hasName("cpumask_copy")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_12
}

predicate func_13(Function func, IfStmt target_13) {
	target_13.getCondition() instanceof NotExpr
	and target_13.getThen().(ReturnStmt).getExpr().(Literal).getValue()="0"
	and target_13.getEnclosingFunction() = func
}

predicate func_14(NotExpr target_10, Function func, ReturnStmt target_14) {
	target_14.getExpr().(Literal).getValue()="0"
	and target_14.getParent().(IfStmt).getCondition()=target_10
	and target_14.getEnclosingFunction() = func
}

predicate func_15(Parameter vdst_2501, ExprStmt target_15) {
	exists(AssignExpr obj_0 | obj_0=target_15.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="user_cpus_ptr"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vdst_2501
		)
		and obj_0.getRValue() instanceof FunctionCall
	)
}

predicate func_16(Parameter vdst_2501, IfStmt target_16) {
	exists(NotExpr obj_0 | obj_0=target_16.getCondition() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().getName()="user_cpus_ptr"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vdst_2501
		)
	)
	and target_16.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-12"
}

predicate func_17(Function func, ReturnStmt target_17) {
	target_17.getExpr().(UnaryMinusExpr).getValue()="-12"
	and target_17.getEnclosingFunction() = func
}

from Function func, Parameter vdst_2501, Parameter vsrc_2501, Parameter vnode_2502, FunctionCall target_9, NotExpr target_10, PointerFieldAccess target_11, ExprStmt target_12, IfStmt target_13, ReturnStmt target_14, ExprStmt target_15, IfStmt target_16, ReturnStmt target_17
where
not func_0(vdst_2501, target_13, func)
and not func_2(target_14, func)
and not func_3(target_15, func)
and not func_5(target_16, func)
and not func_6(vsrc_2501, target_16, func)
and not func_7(vsrc_2501, target_16, target_12, func)
and not func_8(target_16, func)
and func_9(vdst_2501, vnode_2502, target_9)
and func_10(vsrc_2501, target_14, target_10)
and func_11(vdst_2501, target_17, target_11)
and func_12(vdst_2501, vsrc_2501, func, target_12)
and func_13(func, target_13)
and func_14(target_10, func, target_14)
and func_15(vdst_2501, target_15)
and func_16(vdst_2501, target_16)
and func_17(func, target_17)
and vdst_2501.getType().hasName("task_struct *")
and vsrc_2501.getType().hasName("task_struct *")
and vnode_2502.getType().hasName("int")
and vdst_2501.getFunction() = func
and vsrc_2501.getFunction() = func
and vnode_2502.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
