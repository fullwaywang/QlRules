commit 425ab488f26e70965a5109675a57ef38e504d344	425ab488f26e70965a5109675a57ef38e504d344
Author: Jack Hsieh <chengweih@chromium.org>
Date:   Mon Mar 13 21:19:03 2023 +0000

    usb: Reject using WebUSB API in an opaque origin
    
    Rejects renderer's request of using WebUSB API when the top-level
    document has an opaque origin.
    
    Bug: 1375133
    Change-Id: I1b449389e55ea8ead412ea9e87fc99971997b491
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4237626
    Reviewed-by: Hiroki Nakagawa <nhiroki@chromium.org>
    Commit-Queue: Jack Hsieh <chengweih@chromium.org>
    Reviewed-by: Alex Moshchuk <alexmos@chromium.org>
    Reviewed-by: Reilly Grant <reillyg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1116595}

diff --git a/content/browser/renderer_host/render_frame_host_impl.cc b/content/browser/renderer_host/render_frame_host_impl.cc
index bcf786d7232ce..305cb9fc87c10 100644
--- a/content/browser/renderer_host/render_frame_host_impl.cc
+++ b/content/browser/renderer_host/render_frame_host_impl.cc
@@ -10764,6 +10764,12 @@ void RenderFrameHostImpl::CreateWebUsbService(
     mojo::ReportBadMessage("Permissions policy blocks access to USB.");
     return;
   }
+  if (GetOutermostMainFrame()->GetLastCommittedOrigin().opaque()) {
+    mojo::ReportBadMessage(
+        "WebUSB is not allowed when the top-level document has an opaque "
+        "origin.");
+    return;
+  }
   BackForwardCache::DisableForRenderFrameHost(
       this, BackForwardCacheDisable::DisabledReason(
                 BackForwardCacheDisable::DisabledReasonId::kWebUSB));
diff --git a/content/browser/service_worker/service_worker_host.cc b/content/browser/service_worker/service_worker_host.cc
index 1ecb0e556ca9b..6bf5c722fdeab 100644
--- a/content/browser/service_worker/service_worker_host.cc
+++ b/content/browser/service_worker/service_worker_host.cc
@@ -129,8 +129,19 @@ void ServiceWorkerHost::BindHidService(
 void ServiceWorkerHost::BindUsbService(
     mojo::PendingReceiver<blink::mojom::WebUsbService> receiver) {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
-  version_->embedded_worker()->BindUsbService(version_->key().origin(),
-                                              std::move(receiver));
+  DCHECK(container_host_->top_frame_origin());
+  if (container_host_->top_frame_origin()->opaque()) {
+    // Service worker should not be available to a window/worker client whose
+    // origin is opaque according to Service Worker specification. However, this
+    // can possibly be triggered by a compromised renderer, so reject it and
+    // report a bad mojo message.
+    mojo::ReportBadMessage(
+        "WebUSB is not allowed for the service worker scope when the top-level "
+        "frame has an opaque origin.");
+    return;
+  }
+  version_->embedded_worker()->BindUsbService(
+      *container_host_->top_frame_origin(), std::move(receiver));
 }
 
 net::NetworkIsolationKey ServiceWorkerHost::GetNetworkIsolationKey() const {
diff --git a/content/browser/usb/web_usb_service_impl_unittest.cc b/content/browser/usb/web_usb_service_impl_unittest.cc
index ba6015a0be036..24c2e16f6a6e6 100644
--- a/content/browser/usb/web_usb_service_impl_unittest.cc
+++ b/content/browser/usb/web_usb_service_impl_unittest.cc
@@ -20,6 +20,7 @@
 #include "content/public/browser/web_contents_observer.h"
 #include "content/public/test/back_forward_cache_util.h"
 #include "content/public/test/mock_web_contents_observer.h"
+#include "content/public/test/navigation_simulator.h"
 #include "content/public/test/test_browser_context.h"
 #include "content/public/test/test_renderer_host.h"
 #include "content/public/test/test_web_contents_factory.h"
@@ -28,6 +29,8 @@
 #include "mojo/public/cpp/bindings/associated_receiver.h"
 #include "mojo/public/cpp/bindings/pending_remote.h"
 #include "mojo/public/cpp/bindings/remote.h"
+#include "mojo/public/cpp/test_support/fake_message_dispatch_context.h"
+#include "mojo/public/cpp/test_support/test_utils.h"
 #include "services/device/public/cpp/test/fake_usb_device_info.h"
 #include "services/device/public/cpp/test/fake_usb_device_manager.h"
 #include "services/device/public/mojom/usb_device.mojom.h"
@@ -245,6 +248,12 @@ class WebUsbServiceImplBaseTest : public testing::Test {
 
   MockUsbDelegate& delegate() { return test_client_.delegate(); }
 
+  TestWebContentsFactory& web_contents_factory() {
+    return web_contents_factory_;
+  }
+
+  TestBrowserContext& browser_context() { return browser_context_; }
+
  private:
   BrowserTaskEnvironment task_environment_;
   mojo::Remote<blink::mojom::WebUsbService> service_;
@@ -375,6 +384,73 @@ TEST_F(WebUsbServiceImplFrameTest, OpenAndNavigateCrossOrigin) {
   CheckIsConnected(false);
 }
 
+TEST_F(WebUsbServiceImplFrameTest, RejectOpaqueOrigin) {
+  // Create a fake dispatch context to trigger a bad message in.
+  mojo::FakeMessageDispatchContext fake_dispatch_context;
+  mojo::test::BadMessageObserver bad_message_observer;
+
+  auto response_headers =
+      base::MakeRefCounted<net::HttpResponseHeaders>(std::string());
+  response_headers->SetHeader("Content-Security-Policy",
+                              "sandbox allow-scripts");
+  auto* web_contents = static_cast<TestWebContents*>(
+      web_contents_factory().CreateWebContents(&browser_context()));
+  auto navigation_simulator = NavigationSimulator::CreateRendererInitiated(
+      GURL("https://opaque.com"), web_contents->GetPrimaryMainFrame());
+  navigation_simulator->SetResponseHeaders(response_headers);
+  navigation_simulator->Start();
+  navigation_simulator->Commit();
+  EXPECT_TRUE(
+      web_contents->GetPrimaryMainFrame()->GetLastCommittedOrigin().opaque());
+
+  mojo::Remote<blink::mojom::WebUsbService> service;
+  web_contents->GetPrimaryMainFrame()->CreateWebUsbService(
+      service.BindNewPipeAndPassReceiver());
+  EXPECT_EQ(bad_message_observer.WaitForBadMessage(),
+            "WebUSB is not allowed when the top-level document has an "
+            "opaque origin.");
+}
+
+TEST_F(WebUsbServiceImplFrameTest, RejectOpaqueOriginEmbeddedFrame) {
+  // Create a fake dispatch context to trigger a bad message in.
+  mojo::FakeMessageDispatchContext fake_dispatch_context;
+  mojo::test::BadMessageObserver bad_message_observer;
+  auto* web_contents = static_cast<TestWebContents*>(
+      web_contents_factory().CreateWebContents(&browser_context()));
+
+  auto response_headers =
+      base::MakeRefCounted<net::HttpResponseHeaders>(std::string());
+  response_headers->SetHeader("Content-Security-Policy",
+                              "sandbox allow-scripts");
+  auto navigation_simulator = NavigationSimulator::CreateRendererInitiated(
+      GURL("https://opaque.com"), web_contents->GetPrimaryMainFrame());
+  navigation_simulator->SetResponseHeaders(response_headers);
+  navigation_simulator->Start();
+  navigation_simulator->Commit();
+  EXPECT_TRUE(
+      web_contents->GetPrimaryMainFrame()->GetLastCommittedOrigin().opaque());
+
+  const GURL kEmbeddedUrl("https://non-opaque");
+  RenderFrameHost* embedded_rfh =
+      RenderFrameHostTester::For(web_contents->GetPrimaryMainFrame())
+          ->AppendChildWithPolicy(
+              "embedded_frame",
+              {{blink::mojom::PermissionsPolicyFeature::kUsb,
+                std::vector{blink::OriginWithPossibleWildcards(
+                    url::Origin::Create(kEmbeddedUrl),
+                    /*has_subdomain_wildcard=*/false)},
+                /*matches_all_origins=*/false, /*matches_opaque_src=*/true}});
+  embedded_rfh = NavigationSimulator::NavigateAndCommitFromDocument(
+      kEmbeddedUrl, embedded_rfh);
+
+  mojo::Remote<blink::mojom::WebUsbService> service;
+  static_cast<TestRenderFrameHost*>(embedded_rfh)
+      ->CreateWebUsbService(service.BindNewPipeAndPassReceiver());
+  EXPECT_EQ(bad_message_observer.WaitForBadMessage(),
+            "WebUSB is not allowed when the top-level document has an "
+            "opaque origin.");
+}
+
 class WebUsbServiceImplProtectedInterfaceTest
     : public WebUsbServiceImplBaseTest,
       public WithParamInterface<std::tuple<ServiceCreationType, uint8_t>> {};
