/**
 * @name openssl-a004e72b95835136d3f1ea90517f706c24c03da7-ssl_scan_clienthello_tlsext
 * @id cpp/openssl/a004e72b95835136d3f1ea90517f706c24c03da7/ssl-scan-clienthello-tlsext
 * @description openssl-a004e72b95835136d3f1ea90517f706c24c03da7-ssl/t1_lib.c-ssl_scan_clienthello_tlsext CVE-2016-2177
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vlimit_2005, Variable vdata_2010, EqualityOperation target_20, EqualityOperation target_21, ExprStmt target_22) {
	exists(RelationalOperation target_0 |
		 (target_0 instanceof GTExpr or target_0 instanceof LTExpr)
		and target_0.getLesserOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=vlimit_2005
		and target_0.getLesserOperand().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getTarget()=vdata_2010
		and target_0.getGreaterOperand() instanceof Literal
		and target_0.getParent().(IfStmt).getThen() instanceof GotoStmt
		and target_20.getAnOperand().(VariableAccess).getLocation().isBefore(target_0.getLesserOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation())
		and target_0.getLesserOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_21.getAnOperand().(VariableAccess).getLocation())
		and target_0.getLesserOperand().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getLocation().isBefore(target_22.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getLeftOperand().(ArrayExpr).getArrayBase().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vlimit_2005, Variable vdata_2010, EqualityOperation target_21, RelationalOperation target_19, ExprStmt target_22, RelationalOperation target_18) {
	exists(PointerArithmeticOperation target_1 |
		target_1.getLeftOperand().(VariableAccess).getTarget()=vlimit_2005
		and target_1.getRightOperand().(VariableAccess).getTarget()=vdata_2010
		and target_1.getParent().(NEExpr).getAnOperand() instanceof PointerArithmeticOperation
		and target_1.getParent().(NEExpr).getAnOperand().(VariableAccess).getTarget()=vlimit_2005
		and target_1.getParent().(NEExpr).getParent().(IfStmt).getThen() instanceof GotoStmt
		and target_21.getAnOperand().(VariableAccess).getLocation().isBefore(target_1.getLeftOperand().(VariableAccess).getLocation())
		and target_1.getLeftOperand().(VariableAccess).getLocation().isBefore(target_19.getLesserOperand().(VariableAccess).getLocation())
		and target_22.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getLeftOperand().(ArrayExpr).getArrayBase().(VariableAccess).getLocation().isBefore(target_1.getRightOperand().(VariableAccess).getLocation())
		and target_1.getRightOperand().(VariableAccess).getLocation().isBefore(target_18.getLesserOperand().(VariableAccess).getLocation()))
}

predicate func_2(Parameter vlimit_2005, Variable vdata_2010, RelationalOperation target_16, RelationalOperation target_18, EqualityOperation target_21, ExprStmt target_23) {
	exists(RelationalOperation target_2 |
		 (target_2 instanceof GEExpr or target_2 instanceof LEExpr)
		and target_2.getGreaterOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=vlimit_2005
		and target_2.getGreaterOperand().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getTarget()=vdata_2010
		and target_2.getLesserOperand() instanceof Literal
		and target_16.getLesserOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_2.getGreaterOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation())
		and target_2.getGreaterOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_18.getGreaterOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation())
		and target_2.getGreaterOperand().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getLocation().isBefore(target_23.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getLeftOperand().(ArrayExpr).getArrayBase().(VariableAccess).getLocation()))
}

predicate func_3(Parameter vlimit_2005, Variable vsize_2008, Variable vdata_2010, RelationalOperation target_18, EqualityOperation target_24, ExprStmt target_25, ExprStmt target_26) {
	exists(RelationalOperation target_3 |
		 (target_3 instanceof GTExpr or target_3 instanceof LTExpr)
		and target_3.getLesserOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=vlimit_2005
		and target_3.getLesserOperand().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getTarget()=vdata_2010
		and target_3.getGreaterOperand().(VariableAccess).getTarget()=vsize_2008
		and target_3.getParent().(IfStmt).getThen() instanceof GotoStmt
		and target_18.getGreaterOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_3.getLesserOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation())
		and target_3.getLesserOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_24.getAnOperand().(VariableAccess).getLocation())
		and target_25.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_3.getGreaterOperand().(VariableAccess).getLocation())
		and target_3.getGreaterOperand().(VariableAccess).getLocation().isBefore(target_26.getExpr().(VariableCall).getArgument(4).(VariableAccess).getLocation()))
}

predicate func_4(Parameter vlimit_2005, VariableAccess target_4) {
		target_4.getTarget()=vlimit_2005
}

predicate func_5(Variable vlen_2009, VariableAccess target_5) {
		target_5.getTarget()=vlen_2009
}

predicate func_6(Parameter vlimit_2005, VariableAccess target_6) {
		target_6.getTarget()=vlimit_2005
}

predicate func_7(Variable vdata_2010, VariableAccess target_7) {
		target_7.getTarget()=vdata_2010
		and target_7.getParent().(GTExpr).getLesserOperand() instanceof PointerArithmeticOperation
		and target_7.getParent().(GTExpr).getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_9(Variable vdata_2010, VariableAccess target_9) {
		target_9.getTarget()=vdata_2010
}

predicate func_10(Parameter vlimit_2005, VariableAccess target_10) {
		target_10.getTarget()=vlimit_2005
		and target_10.getParent().(NEExpr).getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_11(Variable vdata_2010, VariableAccess target_11) {
		target_11.getTarget()=vdata_2010
		and target_11.getParent().(LEExpr).getGreaterOperand() instanceof PointerArithmeticOperation
}

predicate func_13(Variable vdata_2010, VariableAccess target_13) {
		target_13.getTarget()=vdata_2010
}

predicate func_14(Variable vsize_2008, VariableAccess target_14) {
		target_14.getTarget()=vsize_2008
}

predicate func_15(Parameter vlimit_2005, VariableAccess target_15) {
		target_15.getTarget()=vlimit_2005
		and target_15.getParent().(GTExpr).getGreaterOperand() instanceof PointerArithmeticOperation
		and target_15.getParent().(GTExpr).getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_16(Parameter vlimit_2005, Variable vdata_2010, RelationalOperation target_16) {
		 (target_16 instanceof GTExpr or target_16 instanceof LTExpr)
		and target_16.getGreaterOperand().(VariableAccess).getTarget()=vdata_2010
		and target_16.getLesserOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=vlimit_2005
		and target_16.getLesserOperand().(PointerArithmeticOperation).getRightOperand() instanceof Literal
		and target_16.getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_17(Parameter vlimit_2005, Variable vlen_2009, Variable vdata_2010, PointerArithmeticOperation target_17) {
		target_17.getAnOperand().(VariableAccess).getTarget()=vdata_2010
		and target_17.getAnOperand().(VariableAccess).getTarget()=vlen_2009
		and target_17.getParent().(NEExpr).getAnOperand().(VariableAccess).getTarget()=vlimit_2005
		and target_17.getParent().(NEExpr).getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_18(Parameter vlimit_2005, Variable vdata_2010, RelationalOperation target_18) {
		 (target_18 instanceof GEExpr or target_18 instanceof LEExpr)
		and target_18.getLesserOperand().(VariableAccess).getTarget()=vdata_2010
		and target_18.getGreaterOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=vlimit_2005
		and target_18.getGreaterOperand().(PointerArithmeticOperation).getRightOperand() instanceof Literal
}

predicate func_19(Parameter vlimit_2005, Variable vsize_2008, Variable vdata_2010, RelationalOperation target_19) {
		 (target_19 instanceof GTExpr or target_19 instanceof LTExpr)
		and target_19.getGreaterOperand().(PointerArithmeticOperation).getAnOperand().(VariableAccess).getTarget()=vdata_2010
		and target_19.getGreaterOperand().(PointerArithmeticOperation).getAnOperand().(VariableAccess).getTarget()=vsize_2008
		and target_19.getLesserOperand().(VariableAccess).getTarget()=vlimit_2005
		and target_19.getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_20(Parameter vlimit_2005, Variable vdata_2010, EqualityOperation target_20) {
		target_20.getAnOperand().(VariableAccess).getTarget()=vdata_2010
		and target_20.getAnOperand().(VariableAccess).getTarget()=vlimit_2005
}

predicate func_21(Parameter vlimit_2005, EqualityOperation target_21) {
		target_21.getAnOperand() instanceof PointerArithmeticOperation
		and target_21.getAnOperand().(VariableAccess).getTarget()=vlimit_2005
}

predicate func_22(Variable vlen_2009, Variable vdata_2010, ExprStmt target_22) {
		target_22.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getLValue().(VariableAccess).getTarget()=vlen_2009
		and target_22.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getLeftOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vdata_2010
		and target_22.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getLeftOperand().(ArrayExpr).getArrayOffset().(Literal).getValue()="0"
		and target_22.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getRightOperand().(Literal).getValue()="8"
		and target_22.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getRightOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vdata_2010
		and target_22.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getRightOperand().(ArrayExpr).getArrayOffset().(Literal).getValue()="1"
		and target_22.getExpr().(CommaExpr).getRightOperand().(AssignPointerAddExpr).getLValue().(VariableAccess).getTarget()=vdata_2010
		and target_22.getExpr().(CommaExpr).getRightOperand().(AssignPointerAddExpr).getRValue().(Literal).getValue()="2"
}

predicate func_23(Variable vdata_2010, ExprStmt target_23) {
		target_23.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned short")
		and target_23.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getLeftOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vdata_2010
		and target_23.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getLeftOperand().(ArrayExpr).getArrayOffset().(Literal).getValue()="0"
		and target_23.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getRightOperand().(Literal).getValue()="8"
		and target_23.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getRightOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vdata_2010
		and target_23.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getRightOperand().(ArrayExpr).getArrayOffset().(Literal).getValue()="1"
		and target_23.getExpr().(CommaExpr).getRightOperand().(AssignPointerAddExpr).getLValue().(VariableAccess).getTarget()=vdata_2010
		and target_23.getExpr().(CommaExpr).getRightOperand().(AssignPointerAddExpr).getRValue().(Literal).getValue()="2"
}

predicate func_24(Parameter vlimit_2005, Variable vdata_2010, EqualityOperation target_24) {
		target_24.getAnOperand().(VariableAccess).getTarget()=vdata_2010
		and target_24.getAnOperand().(VariableAccess).getTarget()=vlimit_2005
}

predicate func_25(Variable vsize_2008, Variable vdata_2010, ExprStmt target_25) {
		target_25.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsize_2008
		and target_25.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getLeftOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vdata_2010
		and target_25.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getLeftOperand().(ArrayExpr).getArrayOffset().(Literal).getValue()="0"
		and target_25.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getRightOperand().(Literal).getValue()="8"
		and target_25.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getRightOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vdata_2010
		and target_25.getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(BitwiseOrExpr).getRightOperand().(ArrayExpr).getArrayOffset().(Literal).getValue()="1"
		and target_25.getExpr().(CommaExpr).getRightOperand().(AssignPointerAddExpr).getLValue().(VariableAccess).getTarget()=vdata_2010
		and target_25.getExpr().(CommaExpr).getRightOperand().(AssignPointerAddExpr).getRValue().(Literal).getValue()="2"
}

predicate func_26(Variable vsize_2008, Variable vdata_2010, ExprStmt target_26) {
		target_26.getExpr().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="tlsext_debug_cb"
		and target_26.getExpr().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("SSL *")
		and target_26.getExpr().(VariableCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("SSL *")
		and target_26.getExpr().(VariableCall).getArgument(1).(Literal).getValue()="0"
		and target_26.getExpr().(VariableCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("unsigned short")
		and target_26.getExpr().(VariableCall).getArgument(3).(VariableAccess).getTarget()=vdata_2010
		and target_26.getExpr().(VariableCall).getArgument(4).(VariableAccess).getTarget()=vsize_2008
		and target_26.getExpr().(VariableCall).getArgument(5).(PointerFieldAccess).getTarget().getName()="tlsext_debug_arg"
		and target_26.getExpr().(VariableCall).getArgument(5).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("SSL *")
}

from Function func, Parameter vlimit_2005, Variable vsize_2008, Variable vlen_2009, Variable vdata_2010, VariableAccess target_4, VariableAccess target_5, VariableAccess target_6, VariableAccess target_7, VariableAccess target_9, VariableAccess target_10, VariableAccess target_11, VariableAccess target_13, VariableAccess target_14, VariableAccess target_15, RelationalOperation target_16, PointerArithmeticOperation target_17, RelationalOperation target_18, RelationalOperation target_19, EqualityOperation target_20, EqualityOperation target_21, ExprStmt target_22, ExprStmt target_23, EqualityOperation target_24, ExprStmt target_25, ExprStmt target_26
where
not func_0(vlimit_2005, vdata_2010, target_20, target_21, target_22)
and not func_1(vlimit_2005, vdata_2010, target_21, target_19, target_22, target_18)
and not func_2(vlimit_2005, vdata_2010, target_16, target_18, target_21, target_23)
and not func_3(vlimit_2005, vsize_2008, vdata_2010, target_18, target_24, target_25, target_26)
and func_4(vlimit_2005, target_4)
and func_5(vlen_2009, target_5)
and func_6(vlimit_2005, target_6)
and func_7(vdata_2010, target_7)
and func_9(vdata_2010, target_9)
and func_10(vlimit_2005, target_10)
and func_11(vdata_2010, target_11)
and func_13(vdata_2010, target_13)
and func_14(vsize_2008, target_14)
and func_15(vlimit_2005, target_15)
and func_16(vlimit_2005, vdata_2010, target_16)
and func_17(vlimit_2005, vlen_2009, vdata_2010, target_17)
and func_18(vlimit_2005, vdata_2010, target_18)
and func_19(vlimit_2005, vsize_2008, vdata_2010, target_19)
and func_20(vlimit_2005, vdata_2010, target_20)
and func_21(vlimit_2005, target_21)
and func_22(vlen_2009, vdata_2010, target_22)
and func_23(vdata_2010, target_23)
and func_24(vlimit_2005, vdata_2010, target_24)
and func_25(vsize_2008, vdata_2010, target_25)
and func_26(vsize_2008, vdata_2010, target_26)
and vlimit_2005.getType().hasName("unsigned char *")
and vsize_2008.getType().hasName("unsigned short")
and vlen_2009.getType().hasName("unsigned short")
and vdata_2010.getType().hasName("unsigned char *")
and vlimit_2005.getFunction() = func
and vsize_2008.(LocalVariable).getFunction() = func
and vlen_2009.(LocalVariable).getFunction() = func
and vdata_2010.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
