/**
 * @name linux-50b1a782f845140f4138f14a1ce8a4a6dd0cc82f-sctp_backlog_rcv
 * @id cpp/linux/50b1a782f845140f4138f14a1ce8a4a6dd0cc82f/sctp-backlog-rcv
 * @description linux-50b1a782f845140f4138f14a1ce8a4a6dd0cc82f-net/sctp/input.c-sctp_backlog_rcv CVE-2010-4251
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsk_305, Parameter vskb_305, ValueFieldAccess target_6, AddressOfExpr target_7, AddressOfExpr target_8, FunctionCall target_0) {
		target_0.getTarget().hasName("sk_add_backlog")
		and not target_0.getTarget().hasName("sctp_chunk_free")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vsk_305
		and target_0.getArgument(1).(VariableAccess).getTarget()=vskb_305
		and target_6.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getArgument(0).(VariableAccess).getLocation())
		and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_7.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_8.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getArgument(1).(VariableAccess).getLocation())
}

predicate func_1(Variable vchunk_307, Parameter vsk_305, Parameter vskb_305, ValueFieldAccess target_6, ExprStmt target_9, ExprStmt target_10, AddressOfExpr target_7, AddressOfExpr target_8) {
	exists(IfStmt target_1 |
		target_1.getCondition().(FunctionCall).getTarget().hasName("sk_add_backlog_limited")
		and target_1.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_305
		and target_1.getCondition().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vskb_305
		and target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("sctp_chunk_free")
		and target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vchunk_307
		and target_1.getElse() instanceof ExprStmt
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
		and target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_10.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
		and target_1.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_7.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_8.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getCondition().(FunctionCall).getArgument(1).(VariableAccess).getLocation()))
}

predicate func_3(Variable vbackloged_310, ValueFieldAccess target_6, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vbackloged_310
		and target_3.getExpr().(AssignExpr).getRValue().(Literal).getValue()="1"
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_4(Parameter vsk_305, VariableAccess target_4) {
		target_4.getTarget()=vsk_305
		and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_5(Parameter vskb_305, VariableAccess target_5) {
		target_5.getTarget()=vskb_305
		and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_6(Parameter vsk_305, ValueFieldAccess target_6) {
		target_6.getTarget().getName()="owned"
		and target_6.getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
		and target_6.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_305
}

predicate func_7(Parameter vsk_305, AddressOfExpr target_7) {
		target_7.getOperand().(ValueFieldAccess).getTarget().getName()="slock"
		and target_7.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
		and target_7.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_305
		and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
}

predicate func_8(Parameter vskb_305, AddressOfExpr target_8) {
		target_8.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="cb"
		and target_8.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vskb_305
		and target_8.getOperand().(ArrayExpr).getArrayOffset().(Literal).getValue()="0"
}

predicate func_9(Variable vchunk_307, ExprStmt target_9) {
		target_9.getExpr().(FunctionCall).getTarget().hasName("sctp_chunk_free")
		and target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vchunk_307
}

predicate func_10(Variable vchunk_307, ValueFieldAccess target_6, ExprStmt target_10) {
		target_10.getExpr().(FunctionCall).getTarget().hasName("sctp_inq_push")
		and target_10.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("sctp_inq *")
		and target_10.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vchunk_307
		and target_10.getParent().(IfStmt).getCondition()=target_6
}

from Function func, Variable vchunk_307, Variable vbackloged_310, Parameter vsk_305, Parameter vskb_305, FunctionCall target_0, ExprStmt target_3, VariableAccess target_4, VariableAccess target_5, ValueFieldAccess target_6, AddressOfExpr target_7, AddressOfExpr target_8, ExprStmt target_9, ExprStmt target_10
where
func_0(vsk_305, vskb_305, target_6, target_7, target_8, target_0)
and not func_1(vchunk_307, vsk_305, vskb_305, target_6, target_9, target_10, target_7, target_8)
and func_3(vbackloged_310, target_6, target_3)
and func_4(vsk_305, target_4)
and func_5(vskb_305, target_5)
and func_6(vsk_305, target_6)
and func_7(vsk_305, target_7)
and func_8(vskb_305, target_8)
and func_9(vchunk_307, target_9)
and func_10(vchunk_307, target_6, target_10)
and vchunk_307.getType().hasName("sctp_chunk *")
and vbackloged_310.getType().hasName("int")
and vsk_305.getType().hasName("sock *")
and vskb_305.getType().hasName("sk_buff *")
and vchunk_307.(LocalVariable).getFunction() = func
and vbackloged_310.(LocalVariable).getFunction() = func
and vsk_305.getFunction() = func
and vskb_305.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
