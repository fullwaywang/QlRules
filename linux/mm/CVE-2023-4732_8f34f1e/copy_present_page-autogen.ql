/**
 * @name linux-8f34f1eac3820fc2722e5159acceb22545b30b0d-copy_present_page
 * @id cpp/linux/8f34f1eac3820fc2722e5159acceb22545b30b0d/copy-present-page
 * @description linux-8f34f1eac3820fc2722e5159acceb22545b30b0d-mm/memory.c-copy_present_page CVE-2023-4732
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vdst_vma_807, Parameter vsrc_pte_808, Parameter vpte_809, ExprStmt target_1, ExprStmt target_2, FunctionCall target_3, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("userfaultfd_pte_wp")
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdst_vma_807
	and target_0.getCondition().(FunctionCall).getArgument(1).(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vsrc_pte_808
	and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vpte_809
	and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("pte_wrprotect")
	and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("pte_mkuffd_wp")
	and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpte_809
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_3.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vdst_vma_807, Parameter vpte_809, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("set_pte_at")
	and target_1.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="vm_mm"
	and target_1.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_vma_807
	and target_1.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_1.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("pte_t *")
	and target_1.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget()=vpte_809
}

predicate func_2(Parameter vdst_vma_807, Parameter vpte_809, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vpte_809
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("maybe_mkwrite")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("pte_mkdirty")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpte_809
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vdst_vma_807
}

predicate func_3(Parameter vpte_809, FunctionCall target_3) {
	target_3.getTarget().hasName("pte_mkdirty")
	and target_3.getArgument(0).(VariableAccess).getTarget()=vpte_809
}

from Function func, Parameter vdst_vma_807, Parameter vsrc_pte_808, Parameter vpte_809, ExprStmt target_1, ExprStmt target_2, FunctionCall target_3
where
not func_0(vdst_vma_807, vsrc_pte_808, vpte_809, target_1, target_2, target_3, func)
and func_1(vdst_vma_807, vpte_809, target_1)
and func_2(vdst_vma_807, vpte_809, target_2)
and func_3(vpte_809, target_3)
and vdst_vma_807.getType().hasName("vm_area_struct *")
and vsrc_pte_808.getType().hasName("pte_t *")
and vpte_809.getType().hasName("pte_t")
and vdst_vma_807.getFunction() = func
and vsrc_pte_808.getFunction() = func
and vpte_809.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
