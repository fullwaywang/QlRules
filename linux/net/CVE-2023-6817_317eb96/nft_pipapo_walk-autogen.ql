/**
 * @name linux-317eb9685095678f2c9f5a8189de698c5354316a-nft_pipapo_walk
 * @id cpp/linux/317eb9685095678f2c9f5a8189de698c5354316a/nft-pipapo-walk
 * @description linux-317eb9685095678f2c9f5a8189de698c5354316a-net/netfilter/nft_set_pipapo.c-nft_pipapo_walk CVE-2023-6817
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter viter_2015, Variable ve_2036, ExprStmt target_1, RelationalOperation target_2, ExprStmt target_3, AddressOfExpr target_4) {
exists(IfStmt target_0 |
	target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("nft_set_elem_active")
	and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="ext"
	and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_2036
	and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="genmask"
	and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=viter_2015
	and target_0.getThen().(GotoStmt).getName() ="cont"
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Parameter viter_2015, Variable ve_2036, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="err"
	and target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=viter_2015
	and target_1.getExpr().(AssignExpr).getRValue().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="fn"
	and target_1.getExpr().(AssignExpr).getRValue().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=viter_2015
	and target_1.getExpr().(AssignExpr).getRValue().(VariableCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("const nft_ctx *")
	and target_1.getExpr().(AssignExpr).getRValue().(VariableCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("nft_set *")
	and target_1.getExpr().(AssignExpr).getRValue().(VariableCall).getArgument(2).(VariableAccess).getTarget()=viter_2015
	and target_1.getExpr().(AssignExpr).getRValue().(VariableCall).getArgument(3).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="priv"
	and target_1.getExpr().(AssignExpr).getRValue().(VariableCall).getArgument(3).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_2036
}

predicate func_2(Parameter viter_2015, RelationalOperation target_2) {
	 (target_2 instanceof GTExpr or target_2 instanceof LTExpr)
	and target_2.getLesserOperand().(PointerFieldAccess).getTarget().getName()="count"
	and target_2.getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=viter_2015
	and target_2.getGreaterOperand().(PointerFieldAccess).getTarget().getName()="skip"
	and target_2.getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=viter_2015
}

predicate func_3(Variable ve_2036, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=ve_2036
	and target_3.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getTarget().getName()="e"
	and target_3.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="mt"
	and target_3.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("nft_pipapo_field *")
	and target_3.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_4(Variable ve_2036, AddressOfExpr target_4) {
	target_4.getOperand().(PointerFieldAccess).getTarget().getName()="priv"
	and target_4.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_2036
}

from Function func, Parameter viter_2015, Variable ve_2036, ExprStmt target_1, RelationalOperation target_2, ExprStmt target_3, AddressOfExpr target_4
where
not func_0(viter_2015, ve_2036, target_1, target_2, target_3, target_4)
and func_1(viter_2015, ve_2036, target_1)
and func_2(viter_2015, target_2)
and func_3(ve_2036, target_3)
and func_4(ve_2036, target_4)
and viter_2015.getType().hasName("nft_set_iter *")
and ve_2036.getType().hasName("nft_pipapo_elem *")
and viter_2015.getFunction() = func
and ve_2036.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
