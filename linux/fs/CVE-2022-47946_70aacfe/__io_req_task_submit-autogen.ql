/**
 * @name linux-70aacfe66136809d7f080f89c492c278298719f4-__io_req_task_submit
 * @id cpp/linux/70aacfe66136809d7f080f89c492c278298719f4/--io-req-task-submit
 * @description linux-70aacfe66136809d7f080f89c492c278298719f4-fs/io_uring.c-__io_req_task_submit CVE-2022-47946
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, NotExpr target_0) {
	target_0.getOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="flags"
	and target_0.getOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("get_current")
	and target_0.getOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="4"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vctx_1966, ExprStmt target_2, LogicalAndExpr target_1) {
	target_1.getLeftOperand().(NotExpr).getOperand().(ValueFieldAccess).getTarget().getName()="sqo_dead"
	and target_1.getLeftOperand().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_1.getLeftOperand().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_1966
	and target_1.getRightOperand() instanceof NotExpr
	and target_1.getParent().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="in_execve"
	and target_1.getParent().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("get_current")
	and target_1.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_2
}

predicate func_2(Function func, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("__io_queue_sqe")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("io_kiocb *")
	and target_2.getEnclosingFunction() = func
}

from Function func, Variable vctx_1966, NotExpr target_0, LogicalAndExpr target_1, ExprStmt target_2
where
func_0(func, target_0)
and func_1(vctx_1966, target_2, target_1)
and func_2(func, target_2)
and vctx_1966.getType().hasName("io_ring_ctx *")
and vctx_1966.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
