/**
 * @name linux-9acf636215a6ce9362fe618e7da4913b8bfe84c8-isotp_sendmsg
 * @id cpp/linux/9acf636215a6ce9362fe618e7da4913b8bfe84c8/isotp-sendmsg
 * @description linux-9acf636215a6ce9362fe618e7da4913b8bfe84c8-net/can/isotp.c-isotp_sendmsg CVE-2021-47457
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable verr_857, LogicalOrExpr target_12) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_857
	and target_0.getExpr().(AssignExpr).getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(1) instanceof DoStmt
	and target_0.getExpr().(AssignExpr).getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(IfStmt).getCondition() instanceof NotExpr
	and target_0.getExpr().(AssignExpr).getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(3) instanceof ExprStmt
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12)
}

predicate func_1(Variable verr_857, LogicalOrExpr target_12) {
exists(IfStmt target_1 |
	target_1.getCondition().(VariableAccess).getTarget()=verr_857
	and target_1.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=verr_857
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12)
}

predicate func_3(Function func, DoStmt target_3) {
	target_3.getCondition() instanceof Literal
	and target_3.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__might_sleep")
	and target_3.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0) instanceof StringLiteral
	and target_3.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1) instanceof Literal
	and target_3.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2) instanceof Literal
	and target_3.getStmt().(BlockStmt).getStmt(1).(DoStmt).getCondition() instanceof Literal
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vso_850, ExprStmt target_14, NotExpr target_4) {
	target_4.getOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getTarget().getName()="state"
	and target_4.getOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="tx"
	and target_4.getOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vso_850
	and target_4.getParent().(IfStmt).getThen()=target_14
}

predicate func_7(Variable v__wq_entry_868, ExprStmt target_7) {
	target_7.getExpr().(FunctionCall).getTarget().hasName("init_wait_entry")
	and target_7.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=v__wq_entry_868
	and target_7.getExpr().(FunctionCall).getArgument(1).(ConditionalExpr).getValue()="0"
}

predicate func_8(Variable vso_850, Variable v__ret_1_868, Variable v__int_868, ForStmt target_8) {
	target_8.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getTarget().getName()="state"
	and target_8.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="tx"
	and target_8.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vso_850
	and target_8.getStmt().(BlockStmt).getStmt(2).(IfStmt).getCondition().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getValue()="1"
	and target_8.getStmt().(BlockStmt).getStmt(2).(IfStmt).getCondition().(LogicalAndExpr).getRightOperand().(VariableAccess).getTarget()=v__int_868
	and target_8.getStmt().(BlockStmt).getStmt(2).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=v__ret_1_868
	and target_8.getStmt().(BlockStmt).getStmt(2).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=v__int_868
	and target_8.getStmt().(BlockStmt).getStmt(2).(IfStmt).getThen().(BlockStmt).getStmt(1).(GotoStmt).getName() ="__out"
	and target_8.getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("schedule")
}

predicate func_9(Variable vso_850, Variable v__wq_entry_868, ExprStmt target_9) {
	target_9.getExpr().(FunctionCall).getTarget().hasName("finish_wait")
	and target_9.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="wait"
	and target_9.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vso_850
	and target_9.getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=v__wq_entry_868
}

predicate func_10(Variable v__ret_1_868, ExprStmt target_10) {
	target_10.getExpr().(VariableAccess).getTarget()=v__ret_1_868
}

predicate func_11(Variable v__ret_868, ExprStmt target_11) {
	target_11.getExpr().(VariableAccess).getTarget()=v__ret_868
}

predicate func_12(Variable vso_850, LogicalOrExpr target_12) {
	target_12.getLeftOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getTarget().getName()="state"
	and target_12.getLeftOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="tx"
	and target_12.getLeftOperand().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vso_850
	and target_12.getRightOperand().(FunctionCall).getTarget().hasName("wq_has_sleeper")
	and target_12.getRightOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="wait"
	and target_12.getRightOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vso_850
}

predicate func_14(Variable v__ret_868, ExprStmt target_14) {
	target_14.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=v__ret_868
	and target_14.getExpr().(AssignExpr).getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(2) instanceof ExprStmt
	and target_14.getExpr().(AssignExpr).getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(3) instanceof ForStmt
	and target_14.getExpr().(AssignExpr).getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(5) instanceof ExprStmt
	and target_14.getExpr().(AssignExpr).getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(7) instanceof ExprStmt
}

from Function func, Variable vso_850, Variable verr_857, Variable v__ret_868, Variable v__wq_entry_868, Variable v__ret_1_868, Variable v__int_868, DoStmt target_3, NotExpr target_4, ExprStmt target_7, ForStmt target_8, ExprStmt target_9, ExprStmt target_10, ExprStmt target_11, LogicalOrExpr target_12, ExprStmt target_14
where
not func_0(verr_857, target_12)
and not func_1(verr_857, target_12)
and func_3(func, target_3)
and func_4(vso_850, target_14, target_4)
and func_7(v__wq_entry_868, target_7)
and func_8(vso_850, v__ret_1_868, v__int_868, target_8)
and func_9(vso_850, v__wq_entry_868, target_9)
and func_10(v__ret_1_868, target_10)
and func_11(v__ret_868, target_11)
and func_12(vso_850, target_12)
and func_14(v__ret_868, target_14)
and vso_850.getType().hasName("isotp_sock *")
and verr_857.getType().hasName("int")
and v__ret_868.getType().hasName("int")
and v__wq_entry_868.getType().hasName("wait_queue_entry")
and v__ret_1_868.getType().hasName("long")
and v__int_868.getType().hasName("long")
and vso_850.(LocalVariable).getFunction() = func
and verr_857.(LocalVariable).getFunction() = func
and v__ret_868.(LocalVariable).getFunction() = func
and v__wq_entry_868.(LocalVariable).getFunction() = func
and v__ret_1_868.(LocalVariable).getFunction() = func
and v__int_868.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
