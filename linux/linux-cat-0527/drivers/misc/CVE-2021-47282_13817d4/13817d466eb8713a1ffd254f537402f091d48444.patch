commit 13817d466eb8713a1ffd254f537402f091d48444
Author: Lukas Wunner <lukas@wunner.de>
Date:   Sat May 22 19:49:50 2021 +0200

    spi: bcm2835: Fix out-of-bounds access with more than 4 slaves
    
    Commit 571e31fa60b3 ("spi: bcm2835: Cache CS register value for
    ->prepare_message()") limited the number of slaves to 3 at compile-time.
    The limitation was necessitated by a statically-sized array prepare_cs[]
    in the driver private data which contains a per-slave register value.
    
    The commit sought to enforce the limitation at run-time by setting the
    controller's num_chipselect to 3:  Slaves with a higher chipselect are
    rejected by spi_add_device().
    
    However the commit neglected that num_chipselect only limits the number
    of *native* chipselects.  If GPIO chipselects are specified in the
    device tree for more than 3 slaves, num_chipselect is silently raised by
    of_spi_get_gpio_numbers() and the result are out-of-bounds accesses to
    the statically-sized array prepare_cs[].
    
    As a bandaid fix which is backportable to stable, raise the number of
    allowed slaves to 24 (which "ought to be enough for anybody"), enforce
    the limitation on slave ->setup and revert num_chipselect to 3 (which is
    the number of native chipselects supported by the controller).
    An upcoming for-next commit will allow an arbitrary number of slaves.
    
    Fixes: 571e31fa60b3 ("spi: bcm2835: Cache CS register value for ->prepare_message()")
    Reported-by: Joe Burmeister <joe.burmeister@devtank.co.uk>
    Signed-off-by: Lukas Wunner <lukas@wunner.de>
    Cc: stable@vger.kernel.org # v5.4+
    Cc: Phil Elwell <phil@raspberrypi.com>
    Link: https://lore.kernel.org/r/75854affc1923309fde05e47494263bde73e5592.1621703210.git.lukas@wunner.de
    Signed-off-by: Mark Brown <broonie@kernel.org>

diff --git a/drivers/spi/spi-bcm2835.c b/drivers/spi/spi-bcm2835.c
index 8965fe61c8b4..fe40626e45aa 100644
--- a/drivers/spi/spi-bcm2835.c
+++ b/drivers/spi/spi-bcm2835.c
@@ -68,7 +68,7 @@
 #define BCM2835_SPI_FIFO_SIZE		64
 #define BCM2835_SPI_FIFO_SIZE_3_4	48
 #define BCM2835_SPI_DMA_MIN_LENGTH	96
-#define BCM2835_SPI_NUM_CS		4   /* raise as necessary */
+#define BCM2835_SPI_NUM_CS		24  /* raise as necessary */
 #define BCM2835_SPI_MODE_BITS	(SPI_CPOL | SPI_CPHA | SPI_CS_HIGH \
 				| SPI_NO_CS | SPI_3WIRE)
 
@@ -1195,6 +1195,12 @@ static int bcm2835_spi_setup(struct spi_device *spi)
 	struct gpio_chip *chip;
 	u32 cs;
 
+	if (spi->chip_select >= BCM2835_SPI_NUM_CS) {
+		dev_err(&spi->dev, "only %d chip-selects supported\n",
+			BCM2835_SPI_NUM_CS - 1);
+		return -EINVAL;
+	}
+
 	/*
 	 * Precalculate SPI slave's CS register value for ->prepare_message():
 	 * The driver always uses software-controlled GPIO chip select, hence
@@ -1288,7 +1294,7 @@ static int bcm2835_spi_probe(struct platform_device *pdev)
 	ctlr->use_gpio_descriptors = true;
 	ctlr->mode_bits = BCM2835_SPI_MODE_BITS;
 	ctlr->bits_per_word_mask = SPI_BPW_MASK(8);
-	ctlr->num_chipselect = BCM2835_SPI_NUM_CS;
+	ctlr->num_chipselect = 3;
 	ctlr->setup = bcm2835_spi_setup;
 	ctlr->transfer_one = bcm2835_spi_transfer_one;
 	ctlr->handle_err = bcm2835_spi_handle_err;
