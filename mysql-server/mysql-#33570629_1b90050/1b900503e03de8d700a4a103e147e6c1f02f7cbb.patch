commit 1b900503e03de8d700a4a103e147e6c1f02f7cbb	1b900503e03de8d700a4a103e147e6c1f02f7cbb
Author: Annamalai Gurusami <annamalai.gurusami@oracle.com>
Date:   Wed Nov 17 08:39:56 2021 +0100

    Bug #33570629 [InnoDB] MySQL Server crash - assertion failure: ddl0builder.cc:1495:n >= IO_BLOCK_SIZE
    
    Problem:
    
    During create index operation, the minimum io buffer size is calculated as
    srv_page_size / 2.  But this doesn't take into account the alignment
    requirement of IO_BLOCK_SIZE.  Because of this the record is written crossing
    the buffer boundary.
    
    Solution:
    
    The minimum io buffer size should be srv_page_size/2 + IO_BLOCK_SIZE.
    
    rb#27328 approved by Sunny Bains <sunny.bains@oracle.com>

diff --git a/storage/innobase/ddl/ddl0buffer.cc b/storage/innobase/ddl/ddl0buffer.cc
index f53e4857a2c..eb51f036594 100644
--- a/storage/innobase/ddl/ddl0buffer.cc
+++ b/storage/innobase/ddl/ddl0buffer.cc
@@ -142,6 +142,9 @@ dberr_t Key_sort_buffer::serialize(IO_buffer io_buffer, Function &&f) noexcept {
     memmove(ptr, ptr + n_written, n_move);
     ptr += n_move;
 
+    /* Remaining contents of buffer must be less than the needed alignment.*/
+    ut_ad(n_move < IO_BLOCK_SIZE);
+
     return DB_SUCCESS;
   };
 
@@ -187,6 +190,7 @@ dberr_t Key_sort_buffer::serialize(IO_buffer io_buffer, Function &&f) noexcept {
       if (err != DB_SUCCESS) {
         return err;
       }
+      ut_a(ptr + rec_size < bounds.second);
     }
 
     memcpy(ptr, prefix, need);
diff --git a/storage/innobase/ddl/ddl0ctx.cc b/storage/innobase/ddl/ddl0ctx.cc
index bad249f8b89..50845e92cc6 100644
--- a/storage/innobase/ddl/ddl0ctx.cc
+++ b/storage/innobase/ddl/ddl0ctx.cc
@@ -157,11 +157,19 @@ Context::Scan_buffer_size Context::scan_buffer_size(
     n_buffers *= m_indexes.size();
   }
 
+  /* The maximum size of the record is considered to be srv_page_size/2,
+  because one B-tree node should be able to hold atleast 2 records. But there
+  is also an i/o alignment requirement of IO_BLOCK_SIZE.  This means that the
+  min io buffer size should be the sum of these two.  Refer to
+  Key_sort_buffer::serialize() function and its write() lambda function to
+  understand the reasoning behind this.  */
+  const auto min_io_size = (srv_page_size / 2) + IO_BLOCK_SIZE;
+
   /* A single row *must* fit into an IO block. The IO buffer should be
   greater than the IO physical size buffer makes it easier to handle
   FS block aligned writes. */
   const auto io_block_size = IO_BLOCK_SIZE + ((IO_BLOCK_SIZE * 25) / 100);
-  const auto io_size = std::max(size_t(srv_page_size / 2), io_block_size);
+  const auto io_size = std::max(size_t(min_io_size), io_block_size);
 
   Scan_buffer_size size{m_max_buffer_size / n_buffers, io_size};
 
