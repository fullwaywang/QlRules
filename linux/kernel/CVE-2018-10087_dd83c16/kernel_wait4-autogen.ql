/**
 * @name linux-dd83c161fbcc5d8be637ab159c0de015cbff5ba4-kernel_wait4
 * @id cpp/linux/dd83c161fbcc5d8be637ab159c0de015cbff5ba4/kernel-wait4
 * @description linux-dd83c161fbcc5d8be637ab159c0de015cbff5ba4-kernel/exit.c-kernel_wait4 CVE-2018-10087
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vupid_1630, IfStmt target_1, EqualityOperation target_2, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vupid_1630
	and target_0.getCondition().(EqualityOperation).getRightOperand().(SubExpr).getValue()="-2147483648"
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-3"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_2.getLeftOperand().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vupid_1630, IfStmt target_1) {
	target_1.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vupid_1630
	and target_1.getCondition().(EqualityOperation).getRightOperand().(UnaryMinusExpr).getValue()="-1"
	and target_1.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("pid_type")
	and target_1.getElse().(IfStmt).getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vupid_1630
	and target_1.getElse().(IfStmt).getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_1.getElse().(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("pid_type")
	and target_1.getElse().(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("pid *")
	and target_1.getElse().(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("find_get_pid")
	and target_1.getElse().(IfStmt).getElse().(IfStmt).getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vupid_1630
	and target_1.getElse().(IfStmt).getElse().(IfStmt).getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_1.getElse().(IfStmt).getElse().(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("pid_type")
	and target_1.getElse().(IfStmt).getElse().(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("pid *")
	and target_1.getElse().(IfStmt).getElse().(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("get_task_pid")
	and target_1.getElse().(IfStmt).getElse().(IfStmt).getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("pid_type")
	and target_1.getElse().(IfStmt).getElse().(IfStmt).getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("pid *")
	and target_1.getElse().(IfStmt).getElse().(IfStmt).getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("find_get_pid")
}

predicate func_2(Parameter vupid_1630, EqualityOperation target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget()=vupid_1630
	and target_2.getRightOperand().(UnaryMinusExpr).getValue()="-1"
}

from Function func, Parameter vupid_1630, IfStmt target_1, EqualityOperation target_2
where
not func_0(vupid_1630, target_1, target_2, func)
and func_1(vupid_1630, target_1)
and func_2(vupid_1630, target_2)
and vupid_1630.getType().hasName("pid_t")
and vupid_1630.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
