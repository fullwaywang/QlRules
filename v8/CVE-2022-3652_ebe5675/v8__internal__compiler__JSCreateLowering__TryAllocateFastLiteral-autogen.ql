/**
 * @name v8-ebe5675360e4735589a92a8836303822da79a8f4-v8__internal__compiler__JSCreateLowering__TryAllocateFastLiteral
 * @id cpp/v8/ebe5675360e4735589a92a8836303822da79a8f4/v8internalcompilerjscreateloweringtryallocatefastliteral
 * @description v8-ebe5675360e4735589a92a8836303822da79a8f4-src/compiler/js-create-lowering.cc-v8__internal__compiler__JSCreateLowering__TryAllocateFastLiteral CVE-2022-3652
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vboilerplate_1663, Variable vboilerplate_map_1675, BlockStmt target_1, FunctionCall target_2, FunctionCall target_3, LogicalOrExpr target_5, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("DependOnObjectSlotValue")
	and target_0.getExpr().(FunctionCall).getQualifier().(FunctionCall).getTarget().hasName("dependencies")
	and target_0.getExpr().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vboilerplate_1663
	and target_0.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vboilerplate_map_1675
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_5.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vboilerplate_map_1675, BlockStmt target_1) {
	target_1.getStmt(1).(IfStmt).getCondition().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("has_value")
	and target_1.getStmt(1).(IfStmt).getCondition().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getQualifier().(VariableAccess).getTarget().getType().hasName("Optional<MapRef>")
	and target_1.getStmt(1).(IfStmt).getCondition().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("equals")
	and target_1.getStmt(1).(IfStmt).getCondition().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(VariableAccess).getTarget().getType().hasName("Optional<MapRef>")
	and target_1.getStmt(1).(IfStmt).getCondition().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vboilerplate_map_1675
	and target_1.getStmt(1).(IfStmt).getThen().(BlockStmt).getStmt(0).(ReturnStmt).getExpr().(ConstructorCall).getType() instanceof VoidType
	and target_1.getStmt(1).(IfStmt).getThen().(BlockStmt).getStmt(0).(ReturnStmt).getImplicitDestructorCall(0).(DestructorCall).getQualifier().(VariableAccess).getTarget().getType().hasName("BoilerplateMigrationGuardIfNeeded")
}

predicate func_2(Parameter vboilerplate_1663, FunctionCall target_2) {
	target_2.getTarget().hasName("map")
	and target_2.getQualifier().(VariableAccess).getTarget()=vboilerplate_1663
}

predicate func_3(Parameter vboilerplate_1663, FunctionCall target_3) {
	target_3.getTarget().hasName("map_direct_read")
	and target_3.getQualifier().(VariableAccess).getTarget()=vboilerplate_1663
}

predicate func_5(Variable vboilerplate_map_1675, LogicalOrExpr target_5) {
	target_5.getLeftOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("has_value")
	and target_5.getLeftOperand().(NotExpr).getOperand().(FunctionCall).getQualifier().(VariableAccess).getTarget().getType().hasName("Optional<MapRef>")
	and target_5.getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("equals")
	and target_5.getRightOperand().(NotExpr).getOperand().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(VariableAccess).getTarget().getType().hasName("Optional<MapRef>")
	and target_5.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vboilerplate_map_1675
}

from Function func, Parameter vboilerplate_1663, Variable vboilerplate_map_1675, BlockStmt target_1, FunctionCall target_2, FunctionCall target_3, LogicalOrExpr target_5
where
not func_0(vboilerplate_1663, vboilerplate_map_1675, target_1, target_2, target_3, target_5, func)
and func_1(vboilerplate_map_1675, target_1)
and func_2(vboilerplate_1663, target_2)
and func_3(vboilerplate_1663, target_3)
and func_5(vboilerplate_map_1675, target_5)
and vboilerplate_1663.getType().hasName("JSObjectRef")
and vboilerplate_map_1675.getType().hasName("MapRef")
and vboilerplate_1663.getFunction() = func
and vboilerplate_map_1675.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
