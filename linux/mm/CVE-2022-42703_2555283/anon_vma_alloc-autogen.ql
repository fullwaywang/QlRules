/**
 * @name linux-2555283eb40df89945557273121e9393ef9b542b-anon_vma_alloc
 * @id cpp/linux/2555283eb40df89945557273121e9393ef9b542b/anon-vma-alloc
 * @description linux-2555283eb40df89945557273121e9393ef9b542b-anon_vma_alloc CVE-2022-42703
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
		target_0.getValue()="1"
		and not target_0.getValue()="0"
		and target_0.getParent().(AssignExpr).getParent().(ExprStmt).getExpr() instanceof AssignExpr
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vanon_vma_91, AddressOfExpr target_5) {
	exists(AssignExpr target_1 |
		target_1.getLValue().(PointerFieldAccess).getTarget().getName()="num_children"
		and target_1.getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vanon_vma_91
		and target_1.getRValue().(Literal).getValue()="0"
		and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vanon_vma_91, VariableAccess target_6, ExprStmt target_8) {
	exists(ExprStmt target_2 |
		target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="num_active_vmas"
		and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vanon_vma_91
		and target_2.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_2
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
		and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_3(Variable vanon_vma_91, VariableAccess target_3) {
		target_3.getTarget()=vanon_vma_91
}

predicate func_4(Variable vanon_vma_91, AssignExpr target_4) {
		target_4.getLValue().(PointerFieldAccess).getTarget().getName()="degree"
		and target_4.getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vanon_vma_91
		and target_4.getRValue() instanceof Literal
}

predicate func_5(Variable vanon_vma_91, AddressOfExpr target_5) {
		target_5.getOperand().(PointerFieldAccess).getTarget().getName()="refcount"
		and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vanon_vma_91
}

predicate func_6(Variable vanon_vma_91, BlockStmt target_9, VariableAccess target_6) {
		target_6.getTarget()=vanon_vma_91
		and target_6.getParent().(IfStmt).getThen()=target_9
}

predicate func_8(Variable vanon_vma_91, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="parent"
		and target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vanon_vma_91
		and target_8.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vanon_vma_91
}

predicate func_9(Variable vanon_vma_91, BlockStmt target_9) {
		target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("atomic_set")
		and target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="refcount"
		and target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vanon_vma_91
		and target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="1"
		and target_9.getStmt(1).(ExprStmt).getExpr() instanceof AssignExpr
}

from Function func, Variable vanon_vma_91, Literal target_0, VariableAccess target_3, AssignExpr target_4, AddressOfExpr target_5, VariableAccess target_6, ExprStmt target_8, BlockStmt target_9
where
func_0(func, target_0)
and not func_1(vanon_vma_91, target_5)
and not func_2(vanon_vma_91, target_6, target_8)
and func_3(vanon_vma_91, target_3)
and func_4(vanon_vma_91, target_4)
and func_5(vanon_vma_91, target_5)
and func_6(vanon_vma_91, target_9, target_6)
and func_8(vanon_vma_91, target_8)
and func_9(vanon_vma_91, target_9)
and vanon_vma_91.getType().hasName("anon_vma *")
and vanon_vma_91.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
