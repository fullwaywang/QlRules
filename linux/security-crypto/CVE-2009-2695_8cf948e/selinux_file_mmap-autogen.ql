/**
 * @name linux-8cf948e744e0218af604c32edecde10006dc8e9e-selinux_file_mmap
 * @id cpp/linux/8cf948e744e0218af604c32edecde10006dc8e9e/selinux-file-mmap
 * @description linux-8cf948e744e0218af604c32edecde10006dc8e9e-security/selinux/hooks.c-selinux_file_mmap CVE-2009-2695
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vrc_3030, RelationalOperation target_3) {
	exists(IfStmt target_0 |
		target_0.getCondition().(VariableAccess).getTarget()=vrc_3030
		and target_0.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=vrc_3030
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3)
}

predicate func_1(Parameter vprot_3027, Parameter vflags_3027, Parameter vaddr_3028, Parameter vaddr_only_3028, Variable vrc_3030, Parameter vfile_3026, Parameter vreqprot_3026, EqualityOperation target_5, RelationalOperation target_3, LogicalOrExpr target_6, ExprStmt target_2, FunctionCall target_7, ExprStmt target_8, Function func) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vrc_3030
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("cap_file_mmap")
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vfile_3026
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vreqprot_3026
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vprot_3027
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget()=vflags_3027
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getTarget()=vaddr_3028
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(5).(VariableAccess).getTarget()=vaddr_only_3028
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getLocation().isBefore(target_5.getAnOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getLocation())
		and target_3.getLesserOperand().(VariableAccess).getLocation().isBefore(target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getLocation())
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(5).(VariableAccess).getLocation().isBefore(target_6.getAnOperand().(VariableAccess).getLocation())
		and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation())
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_7.getArgument(0).(VariableAccess).getLocation())
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_8.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation()))
}

predicate func_2(Variable vrc_3030, Variable vsid_3031, RelationalOperation target_3, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vrc_3030
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("avc_has_perm")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsid_3031
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vsid_3031
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(Literal).getValue()="61"
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(Literal).getValue()="1"
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(Literal).getValue()="0"
		and target_2.getParent().(IfStmt).getCondition()=target_3
}

predicate func_3(Parameter vaddr_3028, RelationalOperation target_3) {
		 (target_3 instanceof GTExpr or target_3 instanceof LTExpr)
		and target_3.getLesserOperand().(VariableAccess).getTarget()=vaddr_3028
		and target_3.getGreaterOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
}

predicate func_5(Parameter vflags_3027, EqualityOperation target_5) {
		target_5.getAnOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vflags_3027
		and target_5.getAnOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="15"
		and target_5.getAnOperand().(Literal).getValue()="1"
}

predicate func_6(Parameter vaddr_only_3028, Variable vrc_3030, LogicalOrExpr target_6) {
		target_6.getAnOperand().(VariableAccess).getTarget()=vrc_3030
		and target_6.getAnOperand().(VariableAccess).getTarget()=vaddr_only_3028
}

predicate func_7(Parameter vprot_3027, Parameter vflags_3027, Parameter vfile_3026, FunctionCall target_7) {
		target_7.getTarget().hasName("file_map_prot_check")
		and target_7.getArgument(0).(VariableAccess).getTarget()=vfile_3026
		and target_7.getArgument(1).(VariableAccess).getTarget()=vprot_3027
		and target_7.getArgument(2).(EqualityOperation).getAnOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vflags_3027
		and target_7.getArgument(2).(EqualityOperation).getAnOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="15"
		and target_7.getArgument(2).(EqualityOperation).getAnOperand().(Literal).getValue()="1"
}

predicate func_8(Parameter vprot_3027, Parameter vreqprot_3026, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vprot_3027
		and target_8.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vreqprot_3026
}

from Function func, Parameter vprot_3027, Parameter vflags_3027, Parameter vaddr_3028, Parameter vaddr_only_3028, Variable vrc_3030, Variable vsid_3031, Parameter vfile_3026, Parameter vreqprot_3026, ExprStmt target_2, RelationalOperation target_3, EqualityOperation target_5, LogicalOrExpr target_6, FunctionCall target_7, ExprStmt target_8
where
not func_0(vrc_3030, target_3)
and not func_1(vprot_3027, vflags_3027, vaddr_3028, vaddr_only_3028, vrc_3030, vfile_3026, vreqprot_3026, target_5, target_3, target_6, target_2, target_7, target_8, func)
and func_2(vrc_3030, vsid_3031, target_3, target_2)
and func_3(vaddr_3028, target_3)
and func_5(vflags_3027, target_5)
and func_6(vaddr_only_3028, vrc_3030, target_6)
and func_7(vprot_3027, vflags_3027, vfile_3026, target_7)
and func_8(vprot_3027, vreqprot_3026, target_8)
and vprot_3027.getType().hasName("unsigned long")
and vflags_3027.getType().hasName("unsigned long")
and vaddr_3028.getType().hasName("unsigned long")
and vaddr_only_3028.getType().hasName("unsigned long")
and vrc_3030.getType().hasName("int")
and vsid_3031.getType().hasName("u32")
and vfile_3026.getType().hasName("file *")
and vreqprot_3026.getType().hasName("unsigned long")
and vprot_3027.getFunction() = func
and vflags_3027.getFunction() = func
and vaddr_3028.getFunction() = func
and vaddr_only_3028.getFunction() = func
and vrc_3030.(LocalVariable).getFunction() = func
and vsid_3031.(LocalVariable).getFunction() = func
and vfile_3026.getFunction() = func
and vreqprot_3026.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
