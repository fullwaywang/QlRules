/**
 * @name linux-5038a66dad0199de60e5671603ea6623eb9e5c79-pinctrl_enable
 * @id cpp/linux/5038a66dad0199de60e5671603ea6623eb9e5c79/pinctrl-enable
 * @description linux-5038a66dad0199de60e5671603ea6623eb9e5c79-drivers/pinctrl/core.c-pinctrl_enable CVE-2024-36940
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vpctldev_2121, VariableAccess target_3, ExprStmt target_0) {
	target_0.getExpr().(FunctionCall).getTarget().hasName("pinctrl_free_pindescs")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpctldev_2121
	and target_0.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="pins"
	and target_0.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="desc"
	and target_0.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpctldev_2121
	and target_0.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="npins"
	and target_0.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="desc"
	and target_0.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpctldev_2121
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
}

predicate func_1(Parameter vpctldev_2121, VariableAccess target_3, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("mutex_destroy")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="mutex"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpctldev_2121
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
}

predicate func_2(Parameter vpctldev_2121, VariableAccess target_3, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("kfree")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpctldev_2121
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
}

predicate func_3(Variable verror_2123, BlockStmt target_4, VariableAccess target_3) {
	target_3.getTarget()=verror_2123
	and target_3.getParent().(IfStmt).getThen()=target_4
}

predicate func_4(Variable verror_2123, BlockStmt target_4) {
	target_4.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(DoStmt).getCondition() instanceof Literal
	and target_4.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_dev_err")
	and target_4.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="dev"
	and target_4.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="could not claim hogs: %i\n"
	and target_4.getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=verror_2123
}

from Function func, Variable verror_2123, Parameter vpctldev_2121, ExprStmt target_0, ExprStmt target_1, ExprStmt target_2, VariableAccess target_3, BlockStmt target_4
where
func_0(vpctldev_2121, target_3, target_0)
and func_1(vpctldev_2121, target_3, target_1)
and func_2(vpctldev_2121, target_3, target_2)
and func_3(verror_2123, target_4, target_3)
and func_4(verror_2123, target_4)
and verror_2123.getType().hasName("int")
and vpctldev_2121.getType().hasName("pinctrl_dev *")
and verror_2123.(LocalVariable).getFunction() = func
and vpctldev_2121.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
