/**
 * @name linux-21998a351512eba4ed5969006f0c55882d995ada-ib_prctl_set
 * @id cpp/linux/21998a351512eba4ed5969006f0c55882d995ada/ib-prctl-set
 * @description linux-21998a351512eba4ed5969006f0c55882d995ada-arch/x86/kernel/cpu/bugs.c-ib_prctl_set CVE-2020-10767
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vspectre_v2_user, ReturnStmt target_12, VariableAccess target_0) {
	target_0.getTarget()=vspectre_v2_user
	and target_0.getParent().(EQExpr).getParent().(IfStmt).getThen()=target_12
}

predicate func_1(Variable vspectre_v2_user, VariableAccess target_1) {
	target_1.getTarget()=vspectre_v2_user
}

predicate func_2(Variable vspectre_v2_user, VariableAccess target_2) {
	target_2.getTarget()=vspectre_v2_user
}

predicate func_4(Variable vspectre_v2_user, ReturnStmt target_13, VariableAccess target_4) {
	target_4.getTarget()=vspectre_v2_user
	and target_4.getParent().(EQExpr).getParent().(IfStmt).getThen()=target_13
}

predicate func_5(Variable vspectre_v2_user, VariableAccess target_5) {
	target_5.getTarget()=vspectre_v2_user
}

predicate func_6(Variable vspectre_v2_user, VariableAccess target_6) {
	target_6.getTarget()=vspectre_v2_user
}

predicate func_8(ReturnStmt target_12, Function func) {
exists(LogicalAndExpr target_8 |
	target_8.getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("spectre_v2_user_mitigation")
	and target_8.getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("spectre_v2_user_mitigation")
	and target_8.getParent().(IfStmt).getThen()=target_12
	and target_8.getEnclosingFunction() = func)
}

predicate func_9(ReturnStmt target_14, Function func) {
exists(LogicalOrExpr target_9 |
	target_9.getLeftOperand().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("spectre_v2_user_mitigation")
	and target_9.getLeftOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("spectre_v2_user_mitigation")
	and target_9.getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("spectre_v2_user_mitigation")
	and target_9.getParent().(IfStmt).getThen()=target_14
	and target_9.getEnclosingFunction() = func)
}

predicate func_10(ReturnStmt target_13, Function func) {
exists(LogicalAndExpr target_10 |
	target_10.getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("spectre_v2_user_mitigation")
	and target_10.getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("spectre_v2_user_mitigation")
	and target_10.getParent().(IfStmt).getThen()=target_13
	and target_10.getEnclosingFunction() = func)
}

predicate func_11(ReturnStmt target_15, Function func) {
exists(LogicalOrExpr target_11 |
	target_11.getLeftOperand().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("spectre_v2_user_mitigation")
	and target_11.getLeftOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("spectre_v2_user_mitigation")
	and target_11.getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("spectre_v2_user_mitigation")
	and target_11.getParent().(IfStmt).getThen()=target_15
	and target_11.getEnclosingFunction() = func)
}

predicate func_12(EqualityOperation target_16, Function func, ReturnStmt target_12) {
	target_12.getExpr().(Literal).getValue()="0"
	and target_12.getParent().(IfStmt).getCondition()=target_16
	and target_12.getEnclosingFunction() = func
}

predicate func_13(EqualityOperation target_17, Function func, ReturnStmt target_13) {
	target_13.getExpr().(UnaryMinusExpr).getValue()="-1"
	and target_13.getParent().(IfStmt).getCondition()=target_17
	and target_13.getEnclosingFunction() = func
}

predicate func_14(LogicalOrExpr target_18, Function func, ReturnStmt target_14) {
	target_14.getExpr().(UnaryMinusExpr).getValue()="-1"
	and target_14.getParent().(IfStmt).getCondition()=target_18
	and target_14.getEnclosingFunction() = func
}

predicate func_15(LogicalOrExpr target_19, Function func, ReturnStmt target_15) {
	target_15.getExpr().(Literal).getValue()="0"
	and target_15.getParent().(IfStmt).getCondition()=target_19
	and target_15.getEnclosingFunction() = func
}

predicate func_16(Variable vspectre_v2_user, ReturnStmt target_12, EqualityOperation target_16) {
	target_16.getLeftOperand().(VariableAccess).getTarget()=vspectre_v2_user
	and target_16.getParent().(IfStmt).getThen()=target_12
}

predicate func_17(Variable vspectre_v2_user, ReturnStmt target_13, EqualityOperation target_17) {
	target_17.getLeftOperand().(VariableAccess).getTarget()=vspectre_v2_user
	and target_17.getParent().(IfStmt).getThen()=target_13
}

predicate func_18(Variable vspectre_v2_user, ReturnStmt target_14, LogicalOrExpr target_18) {
	target_18.getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vspectre_v2_user
	and target_18.getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vspectre_v2_user
	and target_18.getRightOperand().(EqualityOperation).getRightOperand() instanceof EnumConstantAccess
	and target_18.getParent().(IfStmt).getThen()=target_14
}

predicate func_19(Variable vspectre_v2_user, ReturnStmt target_15, LogicalOrExpr target_19) {
	target_19.getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vspectre_v2_user
	and target_19.getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vspectre_v2_user
	and target_19.getRightOperand().(EqualityOperation).getRightOperand() instanceof EnumConstantAccess
	and target_19.getParent().(IfStmt).getThen()=target_15
}

from Function func, Variable vspectre_v2_user, VariableAccess target_0, VariableAccess target_1, VariableAccess target_2, VariableAccess target_4, VariableAccess target_5, VariableAccess target_6, ReturnStmt target_12, ReturnStmt target_13, ReturnStmt target_14, ReturnStmt target_15, EqualityOperation target_16, EqualityOperation target_17, LogicalOrExpr target_18, LogicalOrExpr target_19
where
func_0(vspectre_v2_user, target_12, target_0)
and func_1(vspectre_v2_user, target_1)
and func_2(vspectre_v2_user, target_2)
and func_4(vspectre_v2_user, target_13, target_4)
and func_5(vspectre_v2_user, target_5)
and func_6(vspectre_v2_user, target_6)
and not func_8(target_12, func)
and not func_9(target_14, func)
and not func_10(target_13, func)
and not func_11(target_15, func)
and func_12(target_16, func, target_12)
and func_13(target_17, func, target_13)
and func_14(target_18, func, target_14)
and func_15(target_19, func, target_15)
and func_16(vspectre_v2_user, target_12, target_16)
and func_17(vspectre_v2_user, target_13, target_17)
and func_18(vspectre_v2_user, target_14, target_18)
and func_19(vspectre_v2_user, target_15, target_19)
and vspectre_v2_user.getType().hasName("spectre_v2_user_mitigation")
and not vspectre_v2_user.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
