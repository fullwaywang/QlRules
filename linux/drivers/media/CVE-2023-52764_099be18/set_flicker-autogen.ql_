/**
 * @name linux-099be1822d1f095433f4b08af9cc9d6308ec1953-set_flicker
 * @id cpp/linux/099be1822d1f095433f4b08af9cc9d6308ec1953/set-flicker
 * @description linux-099be1822d1f095433f4b08af9cc9d6308ec1953-drivers/media/usb/gspca/cpia1.c-set_flicker CVE-2023-52764
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsd_1018, VariableAccess target_1, ExprStmt target_2, ExprStmt target_3) {
exists(IfStmt target_0 |
	target_0.getCondition().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getTarget().getName()="gain"
	and target_0.getCondition().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="exposure"
	and target_0.getCondition().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="params"
	and target_0.getCondition().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsd_1018
	and target_0.getCondition().(RelationalOperation).getLesserOperand().(MulExpr).getValue()="32"
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-22"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(4)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getRValue().(BinaryBitwiseOperation).getRightOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Parameter von_1000, VariableAccess target_1) {
	target_1.getTarget()=von_1000
}

predicate func_2(Variable vsd_1018, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="exposure_status"
	and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsd_1018
	and target_2.getExpr().(AssignExpr).getRValue().(Literal).getValue()="2"
}

predicate func_3(Variable vsd_1018, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getExpr().(AssignExpr).getRValue().(BinaryBitwiseOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getExpr().(AssignExpr).getRValue().(BinaryBitwiseOperation).getRightOperand().(ValueFieldAccess).getTarget().getName()="gain"
	and target_3.getExpr().(AssignExpr).getRValue().(BinaryBitwiseOperation).getRightOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="exposure"
	and target_3.getExpr().(AssignExpr).getRValue().(BinaryBitwiseOperation).getRightOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="params"
	and target_3.getExpr().(AssignExpr).getRValue().(BinaryBitwiseOperation).getRightOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsd_1018
}

from Function func, Parameter von_1000, Variable vsd_1018, VariableAccess target_1, ExprStmt target_2, ExprStmt target_3
where
not func_0(vsd_1018, target_1, target_2, target_3)
and func_1(von_1000, target_1)
and func_2(vsd_1018, target_2)
and func_3(vsd_1018, target_3)
and von_1000.getType().hasName("int")
and vsd_1018.getType().hasName("sd *")
and von_1000.getFunction() = func
and vsd_1018.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
