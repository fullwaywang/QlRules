/**
 * @name linux-1cb6f0bae50441f4b4b32a28315853b279c7404e-clsact_destroy
 * @id cpp/linux/1cb6f0bae50441f4b4b32a28315853b279c7404e/clsact-destroy
 * @description linux-1cb6f0bae50441f4b4b32a28315853b279c7404e-net/sched/sch_ingress.c-clsact_destroy CVE-2024-41010
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vingress_entry_295, FunctionCall target_0) {
	target_0.getTarget().hasName("tcx_miniq_set_active")
	and not target_0.getTarget().hasName("tcx_miniq_dec")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vingress_entry_295
}

predicate func_1(Variable vegress_entry_296, FunctionCall target_1) {
	target_1.getTarget().hasName("tcx_miniq_set_active")
	and not target_1.getTarget().hasName("tcx_miniq_dec")
	and target_1.getArgument(0).(VariableAccess).getTarget()=vegress_entry_296
}

from Function func, Variable vingress_entry_295, Variable vegress_entry_296, FunctionCall target_0, FunctionCall target_1
where
func_0(vingress_entry_295, target_0)
and func_1(vegress_entry_296, target_1)
and vingress_entry_295.getType().hasName("bpf_mprog_entry *")
and vegress_entry_296.getType().hasName("bpf_mprog_entry *")
and vingress_entry_295.(LocalVariable).getFunction() = func
and vegress_entry_296.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
