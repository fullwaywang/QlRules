/**
 * @name chromium-8449e3cc217ed4b7fa95be8cb20508e367aba71d-browser_sync__ForeignSessionHandler__OpenForeignSessionWindows
 * @id cpp/chromium/8449e3cc217ed4b7fa95be8cb20508e367aba71d/browsersyncforeignsessionhandleropenforeignsessionwindows
 * @description chromium-8449e3cc217ed4b7fa95be8cb20508e367aba71d-chrome/browser/ui/webui/history/foreign_session_handler.cc-browser_sync__ForeignSessionHandler__OpenForeignSessionWindows CVE-2023-1820
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vwindows_160, FunctionCall target_0) {
	target_0.getTarget().hasName("begin")
	and target_0.getQualifier().(VariableAccess).getTarget()=vwindows_160
}

predicate func_1(Variable vwindows_160, FunctionCall target_1) {
	target_1.getTarget().hasName("end")
	and target_1.getQualifier().(VariableAccess).getTarget()=vwindows_160
	and target_1.getParent().(FunctionCall).getParent().(Initializer).getExpr() instanceof FunctionCall
}

predicate func_2(Variable vmessage_on_fail_169, Function func, SwitchStmt target_2) {
	exists(BlockStmt obj_0 | obj_0=target_2.getStmt() |
		exists(IfStmt obj_1 | obj_1=obj_0.getStmt(2) |
			exists(ExprStmt obj_2 | obj_2=obj_1.getElse() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
					obj_3.getTarget().hasName("CheckOp")
					and obj_3.getArgument(0).(VariableAccess).getTarget()=vmessage_on_fail_169
				)
			)
			and obj_1.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vmessage_on_fail_169
		)
		and obj_0.getStmt(0).(SwitchCase).getExpr().(Literal).getValue()="0"
		and obj_0.getStmt(1).(SwitchCase).toString() = "default: "
	)
	and target_2.getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
}

/*predicate func_3(Function func, SwitchCase target_3) {
	target_3.getExpr().(Literal).getValue()="0"
	and target_3.getEnclosingFunction() = func
}

*/
/*predicate func_4(Function func, SwitchCase target_4) {
	target_4.toString() = "default: "
	and target_4.getEnclosingFunction() = func
}

*/
/*predicate func_5(Variable vmessage_on_fail_169, Literal target_14, IfStmt target_5) {
	exists(ExprStmt obj_0 | obj_0=target_5.getElse() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("CheckOp")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vmessage_on_fail_169
		)
	)
	and target_5.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vmessage_on_fail_169
	and target_5.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_14
}

*/
predicate func_6(Function func, DeclStmt target_6) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_6
}

predicate func_7(Variable vchecky_bool_lol_171, Function func, SwitchStmt target_7) {
	exists(BlockStmt obj_0 | obj_0=target_7.getStmt() |
		exists(IfStmt obj_1 | obj_1=obj_0.getStmt(2) |
			exists(FunctionCall obj_2 | obj_2=obj_1.getCondition() |
				obj_2.getTarget().hasName("__builtin_expect")
				and obj_2.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vchecky_bool_lol_171
				and obj_2.getArgument(1).(Literal).getValue()="1"
			)
			and exists(ExprStmt obj_3 | obj_3=obj_1.getElse() |
				exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
					exists(FunctionCall obj_5 | obj_5=obj_4.getQualifier() |
						obj_5.getTarget().hasName("DCheck")
						and obj_5.getArgument(0).(StringLiteral).getValue()="iter_begin != windows.end()"
					)
					and obj_4.getTarget().hasName("operator<<")
					and obj_4.getArgument(0).(StringLiteral).getValue()="Because we CHECKed that windows_num is less than the size."
				)
			)
		)
		and obj_0.getStmt(0).(SwitchCase).getExpr().(Literal).getValue()="0"
		and obj_0.getStmt(1).(SwitchCase).toString() = "default: "
	)
	and target_7.getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_7
}

/*predicate func_8(Function func, SwitchCase target_8) {
	target_8.getExpr().(Literal).getValue()="0"
	and target_8.getEnclosingFunction() = func
}

*/
/*predicate func_9(Function func, SwitchCase target_9) {
	target_9.toString() = "default: "
	and target_9.getEnclosingFunction() = func
}

*/
/*predicate func_10(Variable vchecky_bool_lol_171, Literal target_15, IfStmt target_10) {
	exists(FunctionCall obj_0 | obj_0=target_10.getCondition() |
		obj_0.getTarget().hasName("__builtin_expect")
		and obj_0.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vchecky_bool_lol_171
		and obj_0.getArgument(1).(Literal).getValue()="1"
	)
	and exists(ExprStmt obj_1 | obj_1=target_10.getElse() |
		exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
			exists(FunctionCall obj_3 | obj_3=obj_2.getQualifier() |
				obj_3.getTarget().hasName("DCheck")
				and obj_3.getArgument(0).(StringLiteral).getValue()="iter_begin != windows.end()"
			)
			and obj_2.getTarget().hasName("operator<<")
			and obj_2.getArgument(0).(StringLiteral).getValue()="Because we CHECKed that windows_num is less than the size."
		)
	)
	and target_10.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_15
}

*/
predicate func_11(Function func, DeclStmt target_11) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_11
}

predicate func_12(Variable viter_begin_170, FunctionCall target_16, VariableAccess target_12) {
	target_12.getTarget()=viter_begin_170
	and target_16.getQualifier().(VariableAccess).getLocation().isBefore(target_12.getLocation())
}

predicate func_13(Variable viter_end_173, VariableAccess target_13) {
	target_13.getTarget()=viter_end_173
}

predicate func_16(Variable viter_begin_170, FunctionCall target_16) {
	target_16.getTarget().hasName("operator+")
	and target_16.getQualifier().(VariableAccess).getTarget()=viter_begin_170
	and target_16.getArgument(0) instanceof Literal
}

from Function func, Variable vwindows_160, Variable vmessage_on_fail_169, Variable viter_begin_170, Variable vchecky_bool_lol_171, Variable viter_end_173, FunctionCall target_0, FunctionCall target_1, SwitchStmt target_2, DeclStmt target_6, SwitchStmt target_7, DeclStmt target_11, VariableAccess target_12, VariableAccess target_13, FunctionCall target_16
where
func_0(vwindows_160, target_0)
and func_1(vwindows_160, target_1)
and func_2(vmessage_on_fail_169, func, target_2)
and func_6(func, target_6)
and func_7(vchecky_bool_lol_171, func, target_7)
and func_11(func, target_11)
and func_12(viter_begin_170, target_16, target_12)
and func_13(viter_end_173, target_13)
and func_16(viter_begin_170, target_16)
and vwindows_160.getType().hasName("vector<const SessionWindow *, allocator<const SessionWindow *>>")
and vmessage_on_fail_169.getType().hasName("char *const")
and viter_begin_170.getType().hasName("__wrap_iter<const SessionWindow **>")
and vchecky_bool_lol_171.getType().hasName("const bool")
and viter_end_173.getType().hasName("__wrap_iter<const SessionWindow **>")
and vwindows_160.(LocalVariable).getFunction() = func
and vmessage_on_fail_169.(LocalVariable).getFunction() = func
and viter_begin_170.(LocalVariable).getFunction() = func
and vchecky_bool_lol_171.(LocalVariable).getFunction() = func
and viter_end_173.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
