/**
 * @name linux-4969c06a0d83c9c3dc50b8efcdc8eeedfce896f6-f2fs_read_single_page
 * @id cpp/linux/4969c06a0d83c9c3dc50b8efcdc8eeedfce896f6/f2fs-read-single-page
 * @description linux-4969c06a0d83c9c3dc50b8efcdc8eeedfce896f6-fs/f2fs/data.c-f2fs_read_single_page CVE-2019-19815
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vpage_1572, FunctionCall target_0) {
	target_0.getTarget().hasName("PageUptodate")
	and not target_0.getTarget().hasName("PageSwapCache")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vpage_1572
}

predicate func_1(Parameter vpage_1572, ExprStmt target_7) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("page_index")
	and target_1.getArgument(0).(VariableAccess).getTarget()=vpage_1572
	and target_1.getParent().(AssignExpr).getRValue() = target_1
	and target_1.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("sector_t")
	and target_1.getArgument(0).(VariableAccess).getLocation().isBefore(target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Parameter vpage_1572, BlockStmt target_8, ExprStmt target_9) {
exists(LogicalAndExpr target_2 |
	target_2.getLeftOperand() instanceof NotExpr
	and target_2.getRightOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("PageSwapCache")
	and target_2.getRightOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1572
	and target_2.getRightOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("cleancache_get_page")
	and target_2.getRightOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1572
	and target_2.getParent().(IfStmt).getThen()=target_8
	and target_2.getRightOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

/*predicate func_3(Parameter vpage_1572, BlockStmt target_8) {
exists(NotExpr target_3 |
	target_3.getOperand().(FunctionCall).getTarget().hasName("PageSwapCache")
	and target_3.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1572
	and target_3.getParent().(LogicalAndExpr).getLeftOperand() instanceof NotExpr
	and target_3.getParent().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("cleancache_get_page")
	and target_3.getParent().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1572
	and target_3.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_8)
}

*/
predicate func_4(Parameter vpage_1572, BlockStmt target_8, NotExpr target_4) {
	target_4.getOperand() instanceof FunctionCall
	and target_4.getParent().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("cleancache_get_page")
	and target_4.getParent().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1572
	and target_4.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_8
}

predicate func_5(Parameter vpage_1572, VariableAccess target_5) {
	target_5.getTarget()=vpage_1572
}

predicate func_6(Parameter vpage_1572, ValueFieldAccess target_6) {
	target_6.getTarget().getName()="index"
	and target_6.getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
	and target_6.getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_6.getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpage_1572
	and target_6.getParent().(AssignExpr).getRValue() = target_6
	and target_6.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("sector_t")
}

predicate func_7(Parameter vpage_1572, ExprStmt target_7) {
	target_7.getExpr().(FunctionCall).getTarget().hasName("SetPageMappedToDisk")
	and target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1572
}

predicate func_8(Parameter vpage_1572, BlockStmt target_8) {
	target_8.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("SetPageUptodate")
	and target_8.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1572
	and target_8.getStmt(1).(GotoStmt).getName() ="confused"
}

predicate func_9(Parameter vpage_1572, LogicalAndExpr target_10, ExprStmt target_9) {
	target_9.getExpr().(FunctionCall).getTarget().hasName("SetPageUptodate")
	and target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1572
	and target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10
}

predicate func_10(Parameter vpage_1572, LogicalAndExpr target_10) {
	target_10.getLeftOperand() instanceof NotExpr
	and target_10.getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("cleancache_get_page")
	and target_10.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_1572
}

from Function func, Parameter vpage_1572, FunctionCall target_0, NotExpr target_4, VariableAccess target_5, ValueFieldAccess target_6, ExprStmt target_7, BlockStmt target_8, ExprStmt target_9, LogicalAndExpr target_10
where
func_0(vpage_1572, target_0)
and not func_1(vpage_1572, target_7)
and not func_2(vpage_1572, target_8, target_9)
and func_4(vpage_1572, target_8, target_4)
and func_5(vpage_1572, target_5)
and func_6(vpage_1572, target_6)
and func_7(vpage_1572, target_7)
and func_8(vpage_1572, target_8)
and func_9(vpage_1572, target_10, target_9)
and func_10(vpage_1572, target_10)
and vpage_1572.getType().hasName("page *")
and vpage_1572.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
