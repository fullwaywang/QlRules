/**
 * @name linux-5d0495473ee4c1d041b5a917f10446a22c047f47-null_add_dev
 * @id cpp/linux/5d0495473ee4c1d041b5a917f10446a22c047f47/null-add-dev
 * @description linux-5d0495473ee4c1d041b5a917f10446a22c047f47-drivers/block/null_blk/main.c-null_add_dev CVE-2024-36478
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(RelationalOperation target_6, Function func, GotoStmt target_0) {
	target_0.getName() ="out_cleanup_disk"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vlock, AddressOfExpr target_7, Function func, ExprStmt target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		obj_0.getTarget().hasName("mutex_lock_nested")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vlock
		and obj_0.getArgument(1).(Literal).getValue()="0"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_7.getOperand().(VariableAccess).getLocation())
}

predicate func_2(Variable vlock, RelationalOperation target_6, AddressOfExpr target_8, AddressOfExpr target_9, ExprStmt target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		obj_0.getTarget().hasName("mutex_unlock")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vlock
	)
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
	and target_8.getOperand().(VariableAccess).getLocation().isBefore(target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_9.getOperand().(VariableAccess).getLocation())
}

predicate func_3(Variable vlock, AddressOfExpr target_7, AddressOfExpr target_10, Function func, ExprStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		obj_0.getTarget().hasName("mutex_unlock")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vlock
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
	and target_7.getOperand().(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
	and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_10.getOperand().(VariableAccess).getLocation())
}

predicate func_4(Variable vlock, AddressOfExpr target_9, AddressOfExpr target_11, Function func, ExprStmt target_4) {
	exists(FunctionCall obj_0 | obj_0=target_4.getExpr() |
		obj_0.getTarget().hasName("mutex_lock_nested")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vlock
		and obj_0.getArgument(1).(Literal).getValue()="0"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
	and target_9.getOperand().(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
	and target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_11.getOperand().(VariableAccess).getLocation())
}

predicate func_5(Variable vlock, AddressOfExpr target_10, Function func, ExprStmt target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getExpr() |
		obj_0.getTarget().hasName("mutex_unlock")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vlock
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
	and target_10.getOperand().(VariableAccess).getLocation().isBefore(target_5.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
}

predicate func_6(Function func, RelationalOperation target_6) {
	 (target_6 instanceof GTExpr or target_6 instanceof LTExpr)
	and target_6.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_6.getGreaterOperand().(Literal).getValue()="0"
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Variable vlock, AddressOfExpr target_7) {
	target_7.getOperand().(VariableAccess).getTarget()=vlock
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_8(Variable vlock, AddressOfExpr target_8) {
	target_8.getOperand().(VariableAccess).getTarget()=vlock
	and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_9(Variable vlock, AddressOfExpr target_9) {
	target_9.getOperand().(VariableAccess).getTarget()=vlock
	and target_9.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_10(Variable vlock, AddressOfExpr target_10) {
	target_10.getOperand().(VariableAccess).getTarget()=vlock
	and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_11(Variable vlock, AddressOfExpr target_11) {
	target_11.getOperand().(VariableAccess).getTarget()=vlock
	and target_11.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

from Function func, Variable vlock, GotoStmt target_0, ExprStmt target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, ExprStmt target_5, RelationalOperation target_6, AddressOfExpr target_7, AddressOfExpr target_8, AddressOfExpr target_9, AddressOfExpr target_10, AddressOfExpr target_11
where
func_0(target_6, func, target_0)
and func_1(vlock, target_7, func, target_1)
and func_2(vlock, target_6, target_8, target_9, target_2)
and func_3(vlock, target_7, target_10, func, target_3)
and func_4(vlock, target_9, target_11, func, target_4)
and func_5(vlock, target_10, func, target_5)
and func_6(func, target_6)
and func_7(vlock, target_7)
and func_8(vlock, target_8)
and func_9(vlock, target_9)
and func_10(vlock, target_10)
and func_11(vlock, target_11)
and vlock.getType().hasName("mutex")
and not vlock.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
