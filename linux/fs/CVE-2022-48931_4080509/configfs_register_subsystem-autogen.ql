/**
 * @name linux-40805099af11f68c5ca7dbcfacf455da8f99f622-configfs_register_subsystem
 * @id cpp/linux/40805099af11f68c5ca7dbcfacf455da8f99f622/configfs-register-subsystem
 * @description linux-40805099af11f68c5ca7dbcfacf455da8f99f622-fs/configfs/dir.c-configfs_register_subsystem CVE-2022-48931
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_4, Function func) {
exists(ExprStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		obj_0.getTarget().hasName("mutex_lock_nested")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
		and obj_0.getArgument(1).(Literal).getValue()="0"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_4.getLocation())
)
}

predicate func_1(ExprStmt target_5, Function func) {
exists(ExprStmt target_1 |
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		obj_0.getTarget().hasName("mutex_unlock")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_5.getLocation())
)
}

predicate func_2(VariableAccess target_6, Function func) {
exists(ExprStmt target_2 |
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		obj_0.getTarget().hasName("mutex_lock_nested")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
		and obj_0.getArgument(1).(Literal).getValue()="0"
	)
	and exists(BlockStmt obj_1 | obj_1=target_2.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getThen().(BlockStmt).getStmt(0)=target_2
			and obj_2.getCondition()=target_6
		)
	)
	and target_2.getEnclosingFunction() = func
)
}

predicate func_3(VariableAccess target_6, Function func) {
exists(ExprStmt target_3 |
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		obj_0.getTarget().hasName("mutex_unlock")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
	)
	and exists(BlockStmt obj_1 | obj_1=target_3.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getThen().(BlockStmt).getStmt(2)=target_3
			and obj_2.getCondition()=target_6
		)
	)
	and target_3.getEnclosingFunction() = func
)
}

predicate func_4(Function func, ExprStmt target_4) {
	exists(FunctionCall obj_0 | obj_0=target_4.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getArgument(0) |
				obj_2.getTarget().getName()="s_element"
				and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("configfs_dirent *")
			)
			and obj_1.getTarget().hasName("to_config_group")
		)
		and obj_0.getTarget().hasName("link_group")
		and obj_0.getArgument(1).(VariableAccess).getTarget().getType().hasName("config_group *")
	)
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Function func, ExprStmt target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().hasName("d_inode")
			and obj_1.getArgument(0).(VariableAccess).getTarget().getType().hasName("dentry *")
		)
		and obj_0.getTarget().hasName("inode_lock_nested")
	)
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable verr_1919, BlockStmt target_7, VariableAccess target_6) {
	target_6.getTarget()=verr_1919
	and target_6.getParent().(IfStmt).getThen()=target_7
}

predicate func_7(Function func, BlockStmt target_7) {
	exists(ExprStmt obj_0 | obj_0=target_7.getStmt(0) |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("unlink_group")
			and obj_1.getArgument(0).(VariableAccess).getTarget().getType().hasName("config_group *")
		)
	)
	and target_7.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("configfs_release_fs")
	and target_7.getEnclosingFunction() = func
}

from Function func, Variable verr_1919, ExprStmt target_4, ExprStmt target_5, VariableAccess target_6, BlockStmt target_7
where
not func_0(target_4, func)
and not func_1(target_5, func)
and not func_2(target_6, func)
and not func_3(target_6, func)
and func_4(func, target_4)
and func_5(func, target_5)
and func_6(verr_1919, target_7, target_6)
and func_7(func, target_7)
and verr_1919.getType().hasName("int")
and verr_1919.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
