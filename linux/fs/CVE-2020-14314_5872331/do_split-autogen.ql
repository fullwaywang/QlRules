/**
 * @name linux-5872331b3d91820e14716632ebb56b1399b34fe1-do_split
 * @id cpp/linux/5872331b3d91820e14716632ebb56b1399b34fe1/do-split
 * @description linux-5872331b3d91820e14716632ebb56b1399b34fe1-fs/ext4/namei.c-do_split CVE-2020-14314
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vcount_1822, Variable vsplit_1828, Variable vi_1831, ExprStmt target_1, ExprStmt target_2, ExprStmt target_4, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vi_1831
	and target_0.getCondition().(RelationalOperation).getLesserOperand().(Literal).getValue()="0"
	and target_0.getThen() instanceof ExprStmt
	and target_0.getElse().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsplit_1828
	and target_0.getElse().(ExprStmt).getExpr().(AssignExpr).getRValue().(DivExpr).getLeftOperand().(VariableAccess).getTarget()=vcount_1822
	and target_0.getElse().(ExprStmt).getExpr().(AssignExpr).getRValue().(DivExpr).getRightOperand().(Literal).getValue()="2"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getRValue().(SubExpr).getLeftOperand().(VariableAccess).getLocation().isBefore(target_0.getElse().(ExprStmt).getExpr().(AssignExpr).getRValue().(DivExpr).getLeftOperand().(VariableAccess).getLocation())
	and target_4.getExpr().(AssignAddExpr).getRValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation().isBefore(target_0.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vcount_1822, Variable vsplit_1828, Variable vmove_1828, Function func, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsplit_1828
	and target_1.getExpr().(AssignExpr).getRValue().(SubExpr).getLeftOperand().(VariableAccess).getTarget()=vcount_1822
	and target_1.getExpr().(AssignExpr).getRValue().(SubExpr).getRightOperand().(VariableAccess).getTarget()=vmove_1828
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

predicate func_2(Variable vcount_1822, Variable vi_1831, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vi_1831
	and target_2.getExpr().(AssignExpr).getRValue().(SubExpr).getLeftOperand().(VariableAccess).getTarget()=vcount_1822
	and target_2.getExpr().(AssignExpr).getRValue().(SubExpr).getRightOperand().(Literal).getValue()="1"
}

predicate func_4(Variable vi_1831, ExprStmt target_4) {
	target_4.getExpr().(AssignAddExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_4.getExpr().(AssignAddExpr).getRValue().(ValueFieldAccess).getTarget().getName()="size"
	and target_4.getExpr().(AssignAddExpr).getRValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("dx_map_entry *")
	and target_4.getExpr().(AssignAddExpr).getRValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_1831
}

from Function func, Variable vcount_1822, Variable vsplit_1828, Variable vmove_1828, Variable vi_1831, ExprStmt target_1, ExprStmt target_2, ExprStmt target_4
where
not func_0(vcount_1822, vsplit_1828, vi_1831, target_1, target_2, target_4, func)
and func_1(vcount_1822, vsplit_1828, vmove_1828, func, target_1)
and func_2(vcount_1822, vi_1831, target_2)
and func_4(vi_1831, target_4)
and vcount_1822.getType().hasName("unsigned int")
and vsplit_1828.getType().hasName("unsigned int")
and vmove_1828.getType().hasName("unsigned int")
and vi_1831.getType().hasName("int")
and vcount_1822.(LocalVariable).getFunction() = func
and vsplit_1828.(LocalVariable).getFunction() = func
and vmove_1828.(LocalVariable).getFunction() = func
and vi_1831.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
