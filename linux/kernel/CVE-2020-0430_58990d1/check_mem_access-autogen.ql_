/**
 * @name linux-58990d1ff3f7896ee341030e9a7c2e4002570683-check_mem_access
 * @id cpp/linux/58990d1ff3f7896ee341030e9a7c2e4002570683/check-mem-access
 * @description linux-58990d1ff3f7896ee341030e9a7c2e4002570683-kernel/bpf/verifier.c-check_mem_access CVE-2020-0430
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter voff_1650, ExprStmt target_17, VariableAccess target_0) {
	target_0.getTarget()=voff_1650
	and voff_1650.getIndex() = 3
	and target_0.getParent().(SubExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
	and target_17.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_0.getLocation())
}

predicate func_1(Parameter voff_1650, SubExpr target_19, ExprStmt target_20, VariableAccess target_1) {
	target_1.getTarget()=voff_1650
	and voff_1650.getIndex() = 3
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
	and target_19.getLeftOperand().(VariableAccess).getLocation().isBefore(target_1.getLocation())
	and target_1.getLocation().isBefore(target_20.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getLocation())
}

predicate func_2(Parameter vregno_1649, Variable vreg_1654, Variable verr_1656, Parameter venv_1649, ExprStmt target_21, ExprStmt target_13, LogicalAndExpr target_22) {
exists(AssignExpr target_2 |
	target_2.getLValue().(VariableAccess).getTarget()=verr_1656
	and target_2.getRValue().(FunctionCall).getTarget().hasName("check_ctx_reg")
	and target_2.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_1649
	and target_2.getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vreg_1654
	and target_2.getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vregno_1649
	and target_2.getRValue().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_21.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
	and target_2.getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_13.getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_22.getLeftOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(VariableAccess).getLocation().isBefore(target_2.getLValue().(VariableAccess).getLocation()))
}

predicate func_3(BlockStmt target_24, Function func) {
exists(RelationalOperation target_3 |
	 (target_3 instanceof GTExpr or target_3 instanceof LTExpr)
	and target_3.getLesserOperand().(VariableAccess).getType().hasName("int")
	and target_3.getGreaterOperand().(Literal).getValue()="0"
	and target_3.getParent().(IfStmt).getThen()=target_24
	and target_3.getEnclosingFunction() = func)
}

predicate func_4(Function func, UnaryMinusExpr target_4) {
	target_4.getValue()="-13"
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable vreg_1654, PointerFieldAccess target_5) {
	target_5.getTarget().getName()="var_off"
	and target_5.getQualifier().(VariableAccess).getTarget()=vreg_1654
	and target_5.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
}

predicate func_6(LogicalOrExpr target_25, Function func, DeclStmt target_6) {
	target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_25
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Variable vreg_1654, Variable vtn_buf_1699, LogicalOrExpr target_25, ExprStmt target_7) {
	target_7.getExpr().(FunctionCall).getTarget().hasName("tnum_strn")
	and target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vtn_buf_1699
	and target_7.getExpr().(FunctionCall).getArgument(1).(SizeofExprOperator).getValue()="48"
	and target_7.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="var_off"
	and target_7.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_1654
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_25
}

predicate func_8(Function func, UnaryMinusExpr target_8) {
	target_8.getValue()="-13"
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Parameter venv_1649, VariableAccess target_9) {
	target_9.getTarget()=venv_1649
	and target_9.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_10(Parameter vregno_1649, VariableAccess target_10) {
	target_10.getTarget()=vregno_1649
	and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_11(Variable vreg_1654, BlockStmt target_24, VariableAccess target_11) {
	target_11.getTarget()=vreg_1654
	and target_11.getParent().(PointerFieldAccess).getParent().(IfStmt).getThen()=target_24
}

predicate func_12(Variable vreg_1654, ExprStmt target_13, PointerFieldAccess target_12) {
	target_12.getTarget().getName()="off"
	and target_12.getQualifier().(VariableAccess).getTarget()=vreg_1654
	and target_12.getQualifier().(VariableAccess).getLocation().isBefore(target_13.getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_13(Parameter vregno_1649, Parameter voff_1650, Variable vreg_1654, Parameter venv_1649, PointerFieldAccess target_12, ExprStmt target_13) {
	target_13.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_13.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_1649
	and target_13.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="dereference of modified ctx ptr R%d off=%d+%d, ctx+const is allowed, ctx+const+const is not\n"
	and target_13.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vregno_1649
	and target_13.getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getTarget().getName()="off"
	and target_13.getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_1654
	and target_13.getExpr().(FunctionCall).getArgument(4).(SubExpr).getLeftOperand().(VariableAccess).getTarget()=voff_1650
	and target_13.getExpr().(FunctionCall).getArgument(4).(SubExpr).getRightOperand().(PointerFieldAccess).getTarget().getName()="off"
	and target_13.getExpr().(FunctionCall).getArgument(4).(SubExpr).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_1654
	and target_13.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12
}

predicate func_14(Parameter voff_1650, Variable vreg_1654, Variable vsize_1656, Variable vtn_buf_1699, Parameter venv_1649, EqualityOperation target_26, IfStmt target_14) {
	target_14.getCondition().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("tnum_is_const")
	and target_14.getCondition().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="var_off"
	and target_14.getCondition().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_1654
	and target_14.getCondition().(LogicalOrExpr).getRightOperand().(ValueFieldAccess).getTarget().getName()="value"
	and target_14.getCondition().(LogicalOrExpr).getRightOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="var_off"
	and target_14.getCondition().(LogicalOrExpr).getRightOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_1654
	and target_14.getThen().(BlockStmt).getStmt(1) instanceof ExprStmt
	and target_14.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_14.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_1649
	and target_14.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="variable ctx access var_off=%s off=%d size=%d"
	and target_14.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vtn_buf_1699
	and target_14.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget()=voff_1650
	and target_14.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(4).(VariableAccess).getTarget()=vsize_1656
	and target_14.getThen().(BlockStmt).getStmt(3).(ReturnStmt).getExpr() instanceof UnaryMinusExpr
	and target_14.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_26
}

/*predicate func_15(Parameter voff_1650, Variable vsize_1656, Variable vtn_buf_1699, Parameter venv_1649, FunctionCall target_15) {
	target_15.getTarget().hasName("verbose")
	and target_15.getArgument(0).(VariableAccess).getTarget()=venv_1649
	and target_15.getArgument(1).(StringLiteral).getValue()="variable ctx access var_off=%s off=%d size=%d"
	and target_15.getArgument(2).(VariableAccess).getTarget()=vtn_buf_1699
	and target_15.getArgument(3).(VariableAccess).getTarget()=voff_1650
	and target_15.getArgument(4).(VariableAccess).getTarget()=vsize_1656
}

*/
/*predicate func_16(LogicalOrExpr target_25, Function func, ReturnStmt target_16) {
	target_16.getExpr() instanceof UnaryMinusExpr
	and target_16.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_25
	and target_16.getEnclosingFunction() = func
}

*/
predicate func_17(Parameter vregno_1649, Parameter voff_1650, Variable vsize_1656, Variable verr_1656, Parameter venv_1649, ExprStmt target_17) {
	target_17.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1656
	and target_17.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("check_map_access")
	and target_17.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_1649
	and target_17.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vregno_1649
	and target_17.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=voff_1650
	and target_17.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget()=vsize_1656
}

predicate func_19(Parameter voff_1650, Variable vreg_1654, SubExpr target_19) {
	target_19.getLeftOperand().(VariableAccess).getTarget()=voff_1650
	and target_19.getRightOperand().(PointerFieldAccess).getTarget().getName()="off"
	and target_19.getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_1654
}

predicate func_20(Parameter voff_1650, Variable vsize_1656, Variable verr_1656, Parameter venv_1649, ExprStmt target_20) {
	target_20.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1656
	and target_20.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("check_ctx_access")
	and target_20.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_1649
	and target_20.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("int")
	and target_20.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=voff_1650
	and target_20.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget()=vsize_1656
	and target_20.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("bpf_access_type")
	and target_20.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(5).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("bpf_reg_type")
}

predicate func_21(Parameter vregno_1649, Parameter voff_1650, Variable vsize_1656, Variable verr_1656, Parameter venv_1649, ExprStmt target_21) {
	target_21.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1656
	and target_21.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("check_packet_access")
	and target_21.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_1649
	and target_21.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vregno_1649
	and target_21.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=voff_1650
	and target_21.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget()=vsize_1656
}

predicate func_22(Variable verr_1656, ExprStmt target_27, LogicalAndExpr target_22) {
	target_22.getLeftOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=verr_1656
	and target_22.getLeftOperand().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("bpf_access_type")
	and target_22.getRightOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_22.getRightOperand().(RelationalOperation).getLesserOperand().(Literal).getValue()="0"
	and target_22.getParent().(IfStmt).getThen()=target_27
}

predicate func_24(Function func, BlockStmt target_24) {
	target_24.getStmt(0) instanceof ExprStmt
	and target_24.getStmt(1).(ReturnStmt).getExpr() instanceof UnaryMinusExpr
	and target_24.getEnclosingFunction() = func
}

predicate func_25(Function func, LogicalOrExpr target_25) {
	target_25.getLeftOperand() instanceof NotExpr
	and target_25.getRightOperand() instanceof ValueFieldAccess
	and target_25.getEnclosingFunction() = func
}

predicate func_26(Variable vreg_1654, EqualityOperation target_26) {
	target_26.getLeftOperand().(PointerFieldAccess).getTarget().getName()="type"
	and target_26.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_1654
}

predicate func_27(Parameter venv_1649, LogicalAndExpr target_22, ExprStmt target_27) {
	target_27.getExpr().(FunctionCall).getTarget().hasName("mark_reg_unknown")
	and target_27.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_1649
	and target_27.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("bpf_reg_state *")
	and target_27.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("int")
	and target_27.getParent().(IfStmt).getCondition()=target_22
}

from Function func, Parameter vregno_1649, Parameter voff_1650, Variable vreg_1654, Variable vsize_1656, Variable verr_1656, Variable vtn_buf_1699, Parameter venv_1649, VariableAccess target_0, VariableAccess target_1, UnaryMinusExpr target_4, PointerFieldAccess target_5, DeclStmt target_6, ExprStmt target_7, UnaryMinusExpr target_8, VariableAccess target_9, VariableAccess target_10, VariableAccess target_11, PointerFieldAccess target_12, ExprStmt target_13, IfStmt target_14, ExprStmt target_17, SubExpr target_19, ExprStmt target_20, ExprStmt target_21, LogicalAndExpr target_22, BlockStmt target_24, LogicalOrExpr target_25, EqualityOperation target_26, ExprStmt target_27
where
func_0(voff_1650, target_17, target_0)
and func_1(voff_1650, target_19, target_20, target_1)
and not func_2(vregno_1649, vreg_1654, verr_1656, venv_1649, target_21, target_13, target_22)
and not func_3(target_24, func)
and func_4(func, target_4)
and func_5(vreg_1654, target_5)
and func_6(target_25, func, target_6)
and func_7(vreg_1654, vtn_buf_1699, target_25, target_7)
and func_8(func, target_8)
and func_9(venv_1649, target_9)
and func_10(vregno_1649, target_10)
and func_11(vreg_1654, target_24, target_11)
and func_12(vreg_1654, target_13, target_12)
and func_13(vregno_1649, voff_1650, vreg_1654, venv_1649, target_12, target_13)
and func_14(voff_1650, vreg_1654, vsize_1656, vtn_buf_1699, venv_1649, target_26, target_14)
and func_17(vregno_1649, voff_1650, vsize_1656, verr_1656, venv_1649, target_17)
and func_19(voff_1650, vreg_1654, target_19)
and func_20(voff_1650, vsize_1656, verr_1656, venv_1649, target_20)
and func_21(vregno_1649, voff_1650, vsize_1656, verr_1656, venv_1649, target_21)
and func_22(verr_1656, target_27, target_22)
and func_24(func, target_24)
and func_25(func, target_25)
and func_26(vreg_1654, target_26)
and func_27(venv_1649, target_22, target_27)
and vregno_1649.getType().hasName("u32")
and voff_1650.getType().hasName("int")
and vreg_1654.getType().hasName("bpf_reg_state *")
and vsize_1656.getType().hasName("int")
and verr_1656.getType().hasName("int")
and vtn_buf_1699.getType().hasName("char[48]")
and venv_1649.getType().hasName("bpf_verifier_env *")
and vregno_1649.getFunction() = func
and voff_1650.getFunction() = func
and vreg_1654.(LocalVariable).getFunction() = func
and vsize_1656.(LocalVariable).getFunction() = func
and verr_1656.(LocalVariable).getFunction() = func
and vtn_buf_1699.(LocalVariable).getFunction() = func
and venv_1649.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
