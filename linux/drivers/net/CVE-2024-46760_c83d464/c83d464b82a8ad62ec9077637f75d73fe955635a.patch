commit c83d464b82a8ad62ec9077637f75d73fe955635a
Author: Marcin Ślusarz <mslusarz@renau.com>
Date:   Tue May 28 13:02:46 2024 +0200

    wifi: rtw88: usb: schedule rx work after everything is set up
    
    [ Upstream commit adc539784c98a7cc602cbf557debfc2e7b9be8b3 ]
    
    Right now it's possible to hit NULL pointer dereference in
    rtw_rx_fill_rx_status on hw object and/or its fields because
    initialization routine can start getting USB replies before
    rtw_dev is fully setup.
    
    The stack trace looks like this:
    
    rtw_rx_fill_rx_status
    rtw8821c_query_rx_desc
    rtw_usb_rx_handler
    ...
    queue_work
    rtw_usb_read_port_complete
    ...
    usb_submit_urb
    rtw_usb_rx_resubmit
    rtw_usb_init_rx
    rtw_usb_probe
    
    So while we do the async stuff rtw_usb_probe continues and calls
    rtw_register_hw, which does all kinds of initialization (e.g.
    via ieee80211_register_hw) that rtw_rx_fill_rx_status relies on.
    
    Fix this by moving the first usb_submit_urb after everything
    is set up.
    
    For me, this bug manifested as:
    [    8.893177] rtw_8821cu 1-1:1.2: band wrong, packet dropped
    [    8.910904] rtw_8821cu 1-1:1.2: hw->conf.chandef.chan NULL in rtw_rx_fill_rx_status
    because I'm using Larry's backport of rtw88 driver with the NULL
    checks in rtw_rx_fill_rx_status.
    
    Link: https://lore.kernel.org/linux-wireless/CA+shoWQ7P49jhQasofDcTdQhiuarPTjYEDa--NiVVx494WcuQw@mail.gmail.com/
    Signed-off-by: Marcin Ślusarz <mslusarz@renau.com>
    Cc: Tim K <tpkuester@gmail.com>
    Cc: Ping-Ke Shih <pkshih@realtek.com>
    Cc: Larry Finger <Larry.Finger@lwfinger.net>
    Cc: Kalle Valo <kvalo@kernel.org>
    Cc: linux-wireless@vger.kernel.org
    Cc: linux-kernel@vger.kernel.org
    Signed-off-by: Ping-Ke Shih <pkshih@realtek.com>
    Link: https://patch.msgid.link/20240528110246.477321-1-marcin.slusarz@gmail.com
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/drivers/net/wireless/realtek/rtw88/usb.c b/drivers/net/wireless/realtek/rtw88/usb.c
index efd0c2915a05..04a64afcbf8a 100644
--- a/drivers/net/wireless/realtek/rtw88/usb.c
+++ b/drivers/net/wireless/realtek/rtw88/usb.c
@@ -742,7 +742,6 @@ static struct rtw_hci_ops rtw_usb_ops = {
 static int rtw_usb_init_rx(struct rtw_dev *rtwdev)
 {
 	struct rtw_usb *rtwusb = rtw_get_usb_priv(rtwdev);
-	int i;
 
 	rtwusb->rxwq = create_singlethread_workqueue("rtw88_usb: rx wq");
 	if (!rtwusb->rxwq) {
@@ -754,13 +753,19 @@ static int rtw_usb_init_rx(struct rtw_dev *rtwdev)
 
 	INIT_WORK(&rtwusb->rx_work, rtw_usb_rx_handler);
 
+	return 0;
+}
+
+static void rtw_usb_setup_rx(struct rtw_dev *rtwdev)
+{
+	struct rtw_usb *rtwusb = rtw_get_usb_priv(rtwdev);
+	int i;
+
 	for (i = 0; i < RTW_USB_RXCB_NUM; i++) {
 		struct rx_usb_ctrl_block *rxcb = &rtwusb->rx_cb[i];
 
 		rtw_usb_rx_resubmit(rtwusb, rxcb);
 	}
-
-	return 0;
 }
 
 static void rtw_usb_deinit_rx(struct rtw_dev *rtwdev)
@@ -897,6 +902,8 @@ int rtw_usb_probe(struct usb_interface *intf, const struct usb_device_id *id)
 		goto err_destroy_rxwq;
 	}
 
+	rtw_usb_setup_rx(rtwdev);
+
 	return 0;
 
 err_destroy_rxwq:
