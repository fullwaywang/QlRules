/**
 * @name linux-99e9c5bd27ddefa0f9db88625bf5e31c1e833d62-cachefiles_ondemand_send_req
 * @id cpp/linux/99e9c5bd27ddefa0f9db88625bf5e31c1e833d62/cachefiles-ondemand-send-req
 * @description linux-99e9c5bd27ddefa0f9db88625bf5e31c1e833d62-fs/cachefiles/ondemand.c-cachefiles_ondemand_send_req CVE-2024-40899
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vreq_412, FunctionCall target_0) {
	target_0.getTarget().hasName("kfree")
	and not target_0.getTarget().hasName("cachefiles_req_put")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vreq_412
}

predicate func_1(Parameter vobject_405, Parameter vopcode_406, Function func, IfStmt target_1) {
	exists(ExprStmt obj_0 | obj_0=target_1.getThen() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("cachefiles_ondemand_set_object_close")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vobject_405
		)
	)
	and target_1.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vopcode_406
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

predicate func_2(ReturnStmt target_5, Function func, ExprStmt target_2) {
	target_2.getExpr() instanceof FunctionCall
	and target_5.getLocation().isBefore(target_2.getLocation())
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vret_414, ReturnStmt target_5, ReturnStmt target_3) {
	target_3.getExpr().(VariableAccess).getTarget()=vret_414
	and target_5.getLocation().isBefore(target_3.getLocation())
}

predicate func_4(Variable vreq_412, ExprStmt target_6, NotExpr target_7, Function func) {
exists(ExprStmt target_4 |
	exists(FunctionCall obj_0 | obj_0=target_4.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="ref"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vreq_412
			)
		)
		and obj_0.getTarget().hasName("refcount_set")
		and obj_0.getArgument(1).(Literal).getValue()="1"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
	and target_4.getLocation().isBefore(target_6.getLocation())
	and target_7.getOperand().(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_5(Variable vret_414, ReturnStmt target_5) {
	target_5.getExpr().(VariableAccess).getTarget()=vret_414
}

predicate func_6(Parameter vobject_405, Variable vreq_412, ExprStmt target_6) {
	exists(AssignExpr obj_0 | obj_0=target_6.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="object"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vreq_412
		)
		and obj_0.getRValue().(VariableAccess).getTarget()=vobject_405
	)
}

predicate func_7(Variable vreq_412, NotExpr target_7) {
	target_7.getOperand().(VariableAccess).getTarget()=vreq_412
}

from Function func, Parameter vobject_405, Parameter vopcode_406, Variable vreq_412, Variable vret_414, FunctionCall target_0, IfStmt target_1, ExprStmt target_2, ReturnStmt target_3, ReturnStmt target_5, ExprStmt target_6, NotExpr target_7
where
func_0(vreq_412, target_0)
and func_1(vobject_405, vopcode_406, func, target_1)
and func_2(target_5, func, target_2)
and func_3(vret_414, target_5, target_3)
and not func_4(vreq_412, target_6, target_7, func)
and func_5(vret_414, target_5)
and func_6(vobject_405, vreq_412, target_6)
and func_7(vreq_412, target_7)
and vobject_405.getType().hasName("cachefiles_object *")
and vopcode_406.getType().hasName("cachefiles_opcode")
and vreq_412.getType().hasName("cachefiles_req *")
and vret_414.getType().hasName("int")
and vobject_405.getFunction() = func
and vopcode_406.getFunction() = func
and vreq_412.(LocalVariable).getFunction() = func
and vret_414.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
