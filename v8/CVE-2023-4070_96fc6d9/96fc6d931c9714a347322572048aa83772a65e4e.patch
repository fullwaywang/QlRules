commit 96fc6d931c9714a347322572048aa83772a65e4e	96fc6d931c9714a347322572048aa83772a65e4e
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Jul 11 13:40:26 2023 +0200

    [wasm-gc] Merge a few fixes
    
    This commit cherry-picks small parts of:
    crrev.com/c/4669597
    crrev.com/c/4675296
    crrev.com/c/4677170
    that are suitable for backmerging.
    
    Bug: chromium:1462951
    Change-Id: Ic8994753c3bdbf9676701ce3ab8c98ae9700156b
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4677663
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Cr-Commit-Position: refs/branch-heads/11.5@{#35}
    Cr-Branched-From: 0c4044b7336787781646e48b2f98f0c7d1b400a5-refs/heads/11.5.150@{#1}
    Cr-Branched-From: b71d3038a7d99c79e1c21239e8ae07da5fc8c90b-refs/heads/main@{#87781}

diff --git a/src/wasm/baseline/liftoff-compiler.cc b/src/wasm/baseline/liftoff-compiler.cc
index 7d9c7d66c16..3a5975a86cf 100644
--- a/src/wasm/baseline/liftoff-compiler.cc
+++ b/src/wasm/baseline/liftoff-compiler.cc
@@ -1971,7 +1971,7 @@ class LiftoffCompiler {
       }
       case kExprExternExternalize: {
         LiftoffRegList pinned;
-        LiftoffRegister ref = pinned.set(__ PopToRegister(pinned));
+        LiftoffRegister ref = pinned.set(__ PopToModifiableRegister(pinned));
         LiftoffRegister null = __ GetUnusedRegister(kGpReg, pinned);
         LoadNullValueForCompare(null.gp(), pinned, kWasmAnyRef);
         Label label;
diff --git a/src/wasm/function-body-decoder-impl.h b/src/wasm/function-body-decoder-impl.h
index 1a3cc8952d8..72f89c29d2f 100644
--- a/src/wasm/function-body-decoder-impl.h
+++ b/src/wasm/function-body-decoder-impl.h
@@ -3124,7 +3124,7 @@ class WasmFullDecoder : public WasmDecoder<ValidationTag, decoding_mode> {
   }
 
   DECODE(BrOnNonNull) {
-    CHECK_PROTOTYPE_OPCODE(gc);
+    CHECK_PROTOTYPE_OPCODE(typed_funcref);
     BranchDepthImmediate imm(this, this->pc_ + 1, validate);
     if (!this->Validate(this->pc_ + 1, imm, control_.size())) return 0;
     Value ref_object = Pop();
@@ -3647,6 +3647,11 @@ class WasmFullDecoder : public WasmDecoder<ValidationTag, decoding_mode> {
     CHECK_PROTOTYPE_OPCODE(return_call);
     SigIndexImmediate imm(this, this->pc_ + 1, validate);
     if (!this->Validate(this->pc_ + 1, imm)) return 0;
+    if (!VALIDATE(this->CanReturnCall(imm.sig))) {
+      this->DecodeError("%s: %s", WasmOpcodes::OpcodeName(kExprReturnCallRef),
+                        "tail call return types mismatch");
+      return 0;
+    }
     Value func_ref = Pop(ValueType::RefNull(imm.index));
     PoppedArgVector args = PopArgs(imm.sig);
     CALL_INTERFACE_IF_OK_AND_REACHABLE(ReturnCallRef, func_ref, imm.sig,
@@ -4621,6 +4626,15 @@ class WasmFullDecoder : public WasmDecoder<ValidationTag, decoding_mode> {
         if (!this->ValidateElementSegment(elem_index_pc, elem_segment)) {
           return 0;
         }
+        ValueType segment_type =
+            this->module_->elem_segments[elem_segment.index].type;
+        if (!VALIDATE(IsSubtypeOf(segment_type, element_type, this->module_))) {
+          this->DecodeError(
+              "array.init_elem: segment type %s is not a subtype of array "
+              "element type %s",
+              segment_type.name().c_str(), element_type.name().c_str());
+          return 0;
+        }
 
         auto [array, array_index, elem_offset, length] = Pop(
             ValueType::RefNull(array_imm.index), kWasmI32, kWasmI32, kWasmI32);
diff --git a/src/wasm/wasm-objects.cc b/src/wasm/wasm-objects.cc
index 4fe528ccbe3..e0104e840d0 100644
--- a/src/wasm/wasm-objects.cc
+++ b/src/wasm/wasm-objects.cc
@@ -278,7 +278,7 @@ void WasmTableObject::SetFunctionTableEntry(Isolate* isolate,
                                             Handle<FixedArray> entries,
                                             int entry_index,
                                             Handle<Object> entry) {
-  if (entry->IsWasmNull(isolate)) {
+  if (entry->IsWasmNull(isolate) || entry->IsNull(isolate)) {
     ClearDispatchTables(isolate, table, entry_index);  // Degenerate case.
     entries->set(entry_index, ReadOnlyRoots(isolate).wasm_null());
     return;
diff --git a/test/unittests/wasm/function-body-decoder-unittest.cc b/test/unittests/wasm/function-body-decoder-unittest.cc
index 249bf468843..a5b45a70655 100644
--- a/test/unittests/wasm/function-body-decoder-unittest.cc
+++ b/test/unittests/wasm/function-body-decoder-unittest.cc
@@ -1129,7 +1129,7 @@ TEST_F(FunctionBodyDecoderTest, UnreachableRefTypes) {
   ExpectValidates(sigs.i_v(), {WASM_UNREACHABLE, kExprCallRef, sig_index});
   ExpectValidates(sigs.i_v(), {WASM_UNREACHABLE, WASM_REF_FUNC(function_index),
                                kExprCallRef, sig_index});
-  ExpectValidates(sigs.v_v(),
+  ExpectValidates(sigs.i_v(),
                   {WASM_UNREACHABLE, kExprReturnCallRef, sig_index});
 
   ExpectValidates(sigs.v_v(),
