/**
 * @name linux-b41b0018e8ca06e985e87220a618ec633988fd13-do_map_benchmark
 * @id cpp/linux/b41b0018e8ca06e985e87220a618ec633988fd13/do-map-benchmark
 * @description linux-b41b0018e8ca06e985e87220a618ec633988fd13-kernel/dma/map_benchmark.c-do_map_benchmark CVE-2024-39277
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vnode_126, FunctionCall target_0) {
	target_0.getTarget().hasName("cpumask_of_node")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vnode_126
}

predicate func_1(Function func, DeclStmt target_1) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

predicate func_2(Variable vcpu_mask_127, VariableAccess target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getParent() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				exists(ArrayExpr obj_3 | obj_3=obj_2.getArgument(0) |
					obj_3.getArrayBase().(VariableAccess).getTarget().getType().hasName("task_struct **")
					and obj_3.getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
				)
				and obj_2.getTarget().hasName("kthread_bind_mask")
			)
		)
	)
	and target_2.getTarget()=vcpu_mask_127
}

from Function func, Variable vnode_126, Variable vcpu_mask_127, FunctionCall target_0, DeclStmt target_1, VariableAccess target_2
where
func_0(vnode_126, target_0)
and func_1(func, target_1)
and func_2(vcpu_mask_127, target_2)
and vnode_126.getType().hasName("int")
and vcpu_mask_127.getType().hasName("const cpumask_t *")
and vnode_126.(LocalVariable).getFunction() = func
and vcpu_mask_127.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
