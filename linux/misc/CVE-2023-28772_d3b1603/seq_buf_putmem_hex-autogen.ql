/**
 * @name linux-d3b16034a24a112bb83aeb669ac5b9b01f744bb7-seq_buf_putmem_hex
 * @id cpp/linux/d3b16034a24a112bb83aeb669ac5b9b01f744bb7/seq-buf-putmem-hex
 * @description linux-d3b16034a24a112bb83aeb669ac5b9b01f744bb7-seq_buf_putmem_hex CVE-2023-28772
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vlen_223, Initializer target_0) {
		target_0.getExpr().(VariableAccess).getTarget()=vlen_223
}

predicate func_1(Variable v__UNIQUE_ID___x1000_233, Variable v__UNIQUE_ID___y1001_233, VariableAccess target_1) {
		target_1.getTarget()=v__UNIQUE_ID___x1000_233
		and target_1.getParent().(LTExpr).getGreaterOperand().(VariableAccess).getTarget()=v__UNIQUE_ID___y1001_233
}

/*predicate func_2(Variable v__UNIQUE_ID___x1000_233, Variable v__UNIQUE_ID___y1001_233, VariableAccess target_2) {
		target_2.getTarget()=v__UNIQUE_ID___y1001_233
		and target_2.getParent().(LTExpr).getLesserOperand().(VariableAccess).getTarget()=v__UNIQUE_ID___x1000_233
}

*/
predicate func_3(Variable v__UNIQUE_ID___x1000_233, VariableAccess target_3) {
		target_3.getTarget()=v__UNIQUE_ID___x1000_233
}

predicate func_4(Variable v__UNIQUE_ID___y1001_233, VariableAccess target_4) {
		target_4.getTarget()=v__UNIQUE_ID___y1001_233
}

predicate func_5(Function func, Literal target_5) {
		target_5.getValue()="1002"
		and not target_5.getValue()="1003"
		and target_5.getEnclosingFunction() = func
}

predicate func_6(Function func, Literal target_6) {
		target_6.getValue()="1003"
		and not target_6.getValue()="1004"
		and target_6.getEnclosingFunction() = func
}

predicate func_7(Function func, Literal target_7) {
		target_7.getValue()="1004"
		and not target_7.getValue()="1005"
		and target_7.getEnclosingFunction() = func
}

predicate func_8(Function func, Literal target_8) {
		target_8.getValue()="2"
		and not target_8.getValue()="0"
		and target_8.getParent().(MulExpr).getParent().(AddExpr).getAnOperand() instanceof MulExpr
		and target_8.getEnclosingFunction() = func
}

predicate func_9(Function func, Literal target_9) {
		target_9.getValue()="1"
		and not target_9.getValue()="1005"
		and target_9.getParent().(AddExpr).getParent().(SubExpr).getLeftOperand() instanceof AddExpr
		and target_9.getEnclosingFunction() = func
}

predicate func_10(Function func, Initializer target_10) {
		target_10.getExpr().(SubExpr).getValue()="16"
		and target_10.getExpr().getEnclosingFunction() = func
}

predicate func_11(Function func) {
	exists(DoStmt target_11 |
		target_11.getCondition().(Literal).getValue()="0"
		and target_11.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(NotExpr).getValue()="0"
		and target_11.getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__compiletime_assert_1000")
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_11)
}

/*predicate func_12(Function func) {
	exists(IfStmt target_12 |
		target_12.getCondition().(NotExpr).getValue()="0"
		and target_12.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__compiletime_assert_1000")
		and target_12.getEnclosingFunction() = func)
}

*/
predicate func_15(Function func) {
	exists(ExprStmt target_15 |
		target_15.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(AsmStmt).getChild(0).(Literal).getValue()="1005"
		and target_15.getEnclosingFunction() = func)
}

predicate func_16(Function func, AddExpr target_16) {
		target_16.getValue()="17"
		and target_16.getEnclosingFunction() = func
}

predicate func_17(Function func, MulExpr target_17) {
		target_17.getValue()="16"
		and target_17.getEnclosingFunction() = func
}

predicate func_20(Function func, SubExpr target_20) {
		target_20.getLeftOperand().(AddExpr).getAnOperand().(MulExpr).getLeftOperand() instanceof Literal
		and target_20.getLeftOperand().(AddExpr).getAnOperand().(MulExpr).getRightOperand() instanceof Literal
		and target_20.getLeftOperand().(AddExpr).getAnOperand() instanceof Literal
		and target_20.getRightOperand().(Literal).getValue()="1"
		and target_20.getEnclosingFunction() = func
}

predicate func_21(Parameter vlen_223, SubExpr target_21) {
		target_21.getValue()="16"
		and target_21.getParent().(LTExpr).getLesserOperand().(VariableAccess).getTarget()=vlen_223
}

predicate func_22(Function func, SubExpr target_22) {
		target_22.getValue()="16"
		and target_22.getEnclosingFunction() = func
}

predicate func_23(Function func, AddExpr target_23) {
		target_23.getValue()="17"
		and target_23.getEnclosingFunction() = func
}

from Function func, Parameter vlen_223, Variable v__UNIQUE_ID___x1000_233, Variable v__UNIQUE_ID___y1001_233, Initializer target_0, VariableAccess target_1, VariableAccess target_3, VariableAccess target_4, Literal target_5, Literal target_6, Literal target_7, Literal target_8, Literal target_9, Initializer target_10, AddExpr target_16, MulExpr target_17, SubExpr target_20, SubExpr target_21, SubExpr target_22, AddExpr target_23
where
func_0(vlen_223, target_0)
and func_1(v__UNIQUE_ID___x1000_233, v__UNIQUE_ID___y1001_233, target_1)
and func_3(v__UNIQUE_ID___x1000_233, target_3)
and func_4(v__UNIQUE_ID___y1001_233, target_4)
and func_5(func, target_5)
and func_6(func, target_6)
and func_7(func, target_7)
and func_8(func, target_8)
and func_9(func, target_9)
and func_10(func, target_10)
and not func_11(func)
and not func_15(func)
and func_16(func, target_16)
and func_17(func, target_17)
and func_20(func, target_20)
and func_21(vlen_223, target_21)
and func_22(func, target_22)
and func_23(func, target_23)
and vlen_223.getType().hasName("unsigned int")
and v__UNIQUE_ID___x1000_233.getType().hasName("unsigned int")
and v__UNIQUE_ID___y1001_233.getType().hasName("unsigned int")
and vlen_223.getFunction() = func
and v__UNIQUE_ID___x1000_233.(LocalVariable).getFunction() = func
and v__UNIQUE_ID___y1001_233.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
