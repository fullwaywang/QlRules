/**
 * @name linux-7ff9554bb578ba02166071d2d487b7fc7d860d62-console_unlock
 * @id cpp/linux/7ff9554bb578ba02166071d2d487b7fc7d860d62/console-unlock
 * @description linux-7ff9554bb578ba02166071d2d487b7fc7d860d62-kernel/printk.c-console_unlock CVE-2013-1772
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
	target_0.getValue()="0"
	and not target_0.getValue()="7"
	and target_0.getParent() instanceof Initializer
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, Literal target_1) {
	target_1.getValue()="0"
	and not target_1.getValue()="1"
	and target_1.getParent() instanceof Initializer
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable v_con_start_1273, Variable v_log_end_1273, ExprStmt target_46, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("call_console_drivers")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=v_con_start_1273
	and target_2.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=v_log_end_1273
	and target_2.getLocation().isBefore(target_46.getLocation())
}

predicate func_8(Variable vwake_klogd_1_1274, IfStmt target_48) {
exists(AssignExpr target_8 |
	target_8.getLValue().(VariableAccess).getTarget()=vwake_klogd_1_1274
	and target_8.getLValue().(VariableAccess).getLocation().isBefore(target_48.getCondition().(VariableAccess).getLocation()))
}

predicate func_9(Function func) {
exists(AssignExpr target_9 |
	target_9.getLValue().(VariableAccess).getType().hasName("u64")
	and target_9.getRValue().(VariableAccess).getType().hasName("u64")
	and target_9.getEnclosingFunction() = func)
}

predicate func_10(ExprStmt target_49, Function func) {
exists(RelationalOperation target_10 |
	 (target_10 instanceof GTExpr or target_10 instanceof LTExpr)
	and target_10.getLesserOperand().(VariableAccess).getType().hasName("u64")
	and target_10.getGreaterOperand().(VariableAccess).getType().hasName("u64")
	and target_10.getParent().(IfStmt).getThen()=target_49
	and target_10.getEnclosingFunction() = func)
}

predicate func_11(Function func) {
exists(AssignExpr target_11 |
	target_11.getLValue().(VariableAccess).getType().hasName("u64")
	and target_11.getRValue().(VariableAccess).getType().hasName("u64")
	and target_11.getEnclosingFunction() = func)
}

predicate func_12(EqualityOperation target_50, Function func) {
exists(ExprStmt target_12 |
	target_12.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("u32")
	and target_12.getExpr().(AssignExpr).getRValue().(VariableAccess).getType().hasName("u32")
	and target_12.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_12
	and target_12.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_50
	and target_12.getEnclosingFunction() = func)
}

predicate func_13(ExprStmt target_51, Function func) {
exists(IfStmt target_13 |
	target_13.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("u64")
	and target_13.getCondition().(EqualityOperation).getRightOperand().(VariableAccess).getType().hasName("u64")
	and target_13.getLocation().isBefore(target_51.getLocation())
	and target_13.getEnclosingFunction() = func)
}

predicate func_16(Function func) {
exists(AssignExpr target_16 |
	target_16.getLValue().(VariableAccess).getType().hasName("log *")
	and target_16.getRValue().(FunctionCall).getTarget().hasName("log_from_idx")
	and target_16.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("u32")
	and target_16.getEnclosingFunction() = func)
}

predicate func_17(ExprStmt target_52, Function func) {
exists(ExprStmt target_17 |
	target_17.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
	and target_17.getExpr().(AssignExpr).getRValue().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="level"
	and target_17.getExpr().(AssignExpr).getRValue().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("log *")
	and target_17.getExpr().(AssignExpr).getRValue().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="7"
	and target_17.getLocation().isBefore(target_52.getLocation())
	and target_17.getEnclosingFunction() = func)
}

predicate func_18(ExprStmt target_52, Function func) {
exists(ExprStmt target_18 |
	target_18.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("size_t")
	and target_18.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="text_len"
	and target_18.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("log *")
	and target_18.getLocation().isBefore(target_52.getLocation())
	and target_18.getEnclosingFunction() = func)
}

predicate func_19(ExprStmt target_52, Function func) {
exists(IfStmt target_19 |
	target_19.getCondition().(RelationalOperation).getGreaterOperand().(AddExpr).getLeftOperand().(VariableAccess).getType().hasName("size_t")
	and target_19.getCondition().(RelationalOperation).getGreaterOperand().(AddExpr).getRightOperand() instanceof Literal
	and target_19.getCondition().(RelationalOperation).getLesserOperand().(SizeofExprOperator).getValue()="1024"
	and target_19.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("size_t")
	and target_19.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(SubExpr).getValue()="1023"
	and target_19.getLocation().isBefore(target_52.getLocation())
	and target_19.getEnclosingFunction() = func)
}

/*predicate func_20(Function func) {
exists(AssignExpr target_20 |
	target_20.getLValue().(VariableAccess).getType().hasName("size_t")
	and target_20.getRValue().(SubExpr).getValue()="1023"
	and target_20.getEnclosingFunction() = func)
}

*/
predicate func_21(ExprStmt target_52, Function func) {
exists(ExprStmt target_21 |
	target_21.getExpr().(FunctionCall).getTarget().hasName("memcpy")
	and target_21.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("char[1024]")
	and target_21.getExpr().(FunctionCall).getArgument(1).(FunctionCall).getTarget().hasName("log_text")
	and target_21.getExpr().(FunctionCall).getArgument(1).(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("log *")
	and target_21.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getType().hasName("size_t")
	and target_21.getLocation().isBefore(target_52.getLocation())
	and target_21.getEnclosingFunction() = func)
}

predicate func_22(ExprStmt target_52, Function func) {
exists(ExprStmt target_22 |
	target_22.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(VariableAccess).getType().hasName("char[1024]")
	and target_22.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(PostfixIncrExpr).getOperand().(VariableAccess).getType().hasName("size_t")
	and target_22.getExpr().(AssignExpr).getRValue().(CharLiteral).getValue()="10"
	and target_22.getLocation().isBefore(target_52.getLocation())
	and target_22.getEnclosingFunction() = func)
}

predicate func_23(ExprStmt target_52, Function func) {
exists(ExprStmt target_23 |
	target_23.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("u32")
	and target_23.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("log_next")
	and target_23.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("u32")
	and target_23.getLocation().isBefore(target_52.getLocation())
	and target_23.getEnclosingFunction() = func)
}

predicate func_24(Function func) {
exists(PostfixIncrExpr target_24 |
	target_24.getOperand().(VariableAccess).getType().hasName("u64")
	and target_24.getEnclosingFunction() = func)
}

predicate func_25(ExprStmt target_53, Function func) {
exists(ExprStmt target_25 |
	target_25.getExpr().(FunctionCall).getTarget().hasName("call_console_drivers")
	and target_25.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("int")
	and target_25.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getType().hasName("char[1024]")
	and target_25.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getType().hasName("size_t")
	and target_25.getLocation().isBefore(target_53.getLocation())
	and target_25.getEnclosingFunction() = func)
}

predicate func_29(Variable vretry_1_1274, IfStmt target_54, Function func) {
exists(ExprStmt target_29 |
	target_29.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vretry_1_1274
	and target_29.getExpr().(AssignExpr).getRValue().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("u64")
	and target_29.getExpr().(AssignExpr).getRValue().(EqualityOperation).getRightOperand().(VariableAccess).getType().hasName("u64")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_29
	and target_29.getLocation().isBefore(target_54.getLocation()))
}

predicate func_35(Variable vwake_klogd_1_1274, Variable vlog_start, Variable vlog_end, AssignOrExpr target_35) {
	target_35.getLValue().(VariableAccess).getTarget()=vwake_klogd_1_1274
	and target_35.getRValue().(SubExpr).getLeftOperand().(VariableAccess).getTarget()=vlog_start
	and target_35.getRValue().(SubExpr).getRightOperand().(VariableAccess).getTarget()=vlog_end
}

predicate func_36(Variable vlog_end, Variable vcon_start, ExprStmt target_52, ExprStmt target_51, VariableAccess target_36) {
	target_36.getTarget()=vcon_start
	and target_36.getParent().(EQExpr).getRightOperand().(VariableAccess).getTarget()=vlog_end
	and target_36.getParent().(EQExpr).getParent().(IfStmt).getThen() instanceof BreakStmt
}

/*predicate func_37(Variable vlog_end, Variable vcon_start, ExprStmt target_52, ExprStmt target_51, VariableAccess target_37) {
	target_37.getTarget()=vlog_end
	and target_37.getParent().(EQExpr).getLeftOperand().(VariableAccess).getTarget()=vcon_start
	and target_37.getParent().(EQExpr).getParent().(IfStmt).getThen() instanceof BreakStmt
}

*/
predicate func_38(Variable v_con_start_1273, Variable vcon_start, AssignExpr target_38) {
	target_38.getLValue().(VariableAccess).getTarget()=v_con_start_1273
	and target_38.getRValue().(VariableAccess).getTarget()=vcon_start
}

predicate func_39(Variable v_log_end_1273, Variable vlog_end, AssignExpr target_39) {
	target_39.getLValue().(VariableAccess).getTarget()=v_log_end_1273
	and target_39.getRValue().(VariableAccess).getTarget()=vlog_end
}

predicate func_40(Variable vlog_end, Variable vcon_start, AssignExpr target_40) {
	target_40.getLValue().(VariableAccess).getTarget()=vcon_start
	and target_40.getRValue().(VariableAccess).getTarget()=vlog_end
}

predicate func_41(Variable v_con_start_1273, Variable v_log_end_1273, VariableAccess target_41) {
	target_41.getTarget()=v_con_start_1273
	and target_41.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("call_console_drivers")
	and target_41.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=v_log_end_1273
}

/*predicate func_42(Variable v_con_start_1273, Variable v_log_end_1273, VariableAccess target_42) {
	target_42.getTarget()=v_log_end_1273
	and target_42.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("call_console_drivers")
	and target_42.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=v_con_start_1273
}

*/
predicate func_43(Variable vlog_end, Variable vcon_start, ExprStmt target_49, VariableAccess target_43) {
	target_43.getTarget()=vcon_start
	and target_43.getParent().(NEExpr).getRightOperand().(VariableAccess).getTarget()=vlog_end
	and target_43.getParent().(NEExpr).getParent().(IfStmt).getThen()=target_49
}

/*predicate func_44(Variable vlog_end, Variable vcon_start, ExprStmt target_49, VariableAccess target_44) {
	target_44.getTarget()=vlog_end
	and target_44.getParent().(NEExpr).getLeftOperand().(VariableAccess).getTarget()=vcon_start
	and target_44.getParent().(NEExpr).getParent().(IfStmt).getThen()=target_49
}

*/
predicate func_45(Variable vretry_1_1274, AssignExpr target_45) {
	target_45.getLValue().(VariableAccess).getTarget()=vretry_1_1274
	and target_45.getRValue() instanceof Literal
}

predicate func_46(Function func, ExprStmt target_46) {
	target_46.getExpr().(FunctionCall).getTarget().hasName("start_critical_timings")
	and target_46.getEnclosingFunction() = func
}

predicate func_48(Variable vwake_klogd_1_1274, IfStmt target_48) {
	target_48.getCondition().(VariableAccess).getTarget()=vwake_klogd_1_1274
	and target_48.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("wake_up_klogd")
}

predicate func_49(Function func, ExprStmt target_49) {
	target_49.getExpr() instanceof AssignExpr
	and target_49.getEnclosingFunction() = func
}

predicate func_50(Variable vlog_end, Variable vcon_start, EqualityOperation target_50) {
	target_50.getLeftOperand().(VariableAccess).getTarget()=vcon_start
	and target_50.getRightOperand().(VariableAccess).getTarget()=vlog_end
}

predicate func_51(Function func, ExprStmt target_51) {
	target_51.getExpr() instanceof AssignExpr
	and target_51.getEnclosingFunction() = func
}

predicate func_52(Function func, ExprStmt target_52) {
	target_52.getExpr() instanceof AssignExpr
	and target_52.getEnclosingFunction() = func
}

predicate func_53(Function func, ExprStmt target_53) {
	target_53.getExpr().(FunctionCall).getTarget().hasName("stop_critical_timings")
	and target_53.getEnclosingFunction() = func
}

predicate func_54(Variable vlog_end, Variable vcon_start, IfStmt target_54) {
	target_54.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vcon_start
	and target_54.getCondition().(EqualityOperation).getRightOperand().(VariableAccess).getTarget()=vlog_end
	and target_54.getThen().(ExprStmt).getExpr() instanceof AssignExpr
}

from Function func, Variable v_con_start_1273, Variable v_log_end_1273, Variable vwake_klogd_1_1274, Variable vretry_1_1274, Variable vlog_start, Variable vlog_end, Variable vcon_start, Literal target_0, Literal target_1, ExprStmt target_2, AssignOrExpr target_35, VariableAccess target_36, AssignExpr target_38, AssignExpr target_39, AssignExpr target_40, VariableAccess target_41, VariableAccess target_43, AssignExpr target_45, ExprStmt target_46, IfStmt target_48, ExprStmt target_49, EqualityOperation target_50, ExprStmt target_51, ExprStmt target_52, ExprStmt target_53, IfStmt target_54
where
func_0(func, target_0)
and func_1(func, target_1)
and func_2(v_con_start_1273, v_log_end_1273, target_46, target_2)
and not func_8(vwake_klogd_1_1274, target_48)
and not func_9(func)
and not func_10(target_49, func)
and not func_11(func)
and not func_12(target_50, func)
and not func_13(target_51, func)
and not func_16(func)
and not func_17(target_52, func)
and not func_18(target_52, func)
and not func_19(target_52, func)
and not func_21(target_52, func)
and not func_22(target_52, func)
and not func_23(target_52, func)
and not func_24(func)
and not func_25(target_53, func)
and not func_29(vretry_1_1274, target_54, func)
and func_35(vwake_klogd_1_1274, vlog_start, vlog_end, target_35)
and func_36(vlog_end, vcon_start, target_52, target_51, target_36)
and func_38(v_con_start_1273, vcon_start, target_38)
and func_39(v_log_end_1273, vlog_end, target_39)
and func_40(vlog_end, vcon_start, target_40)
and func_41(v_con_start_1273, v_log_end_1273, target_41)
and func_43(vlog_end, vcon_start, target_49, target_43)
and func_45(vretry_1_1274, target_45)
and func_46(func, target_46)
and func_48(vwake_klogd_1_1274, target_48)
and func_49(func, target_49)
and func_50(vlog_end, vcon_start, target_50)
and func_51(func, target_51)
and func_52(func, target_52)
and func_53(func, target_53)
and func_54(vlog_end, vcon_start, target_54)
and v_con_start_1273.getType().hasName("unsigned int")
and v_log_end_1273.getType().hasName("unsigned int")
and vwake_klogd_1_1274.getType().hasName("unsigned int")
and vretry_1_1274.getType().hasName("unsigned int")
and vlog_start.getType().hasName("unsigned int")
and vlog_end.getType().hasName("unsigned int")
and vcon_start.getType().hasName("unsigned int")
and v_con_start_1273.(LocalVariable).getFunction() = func
and v_log_end_1273.(LocalVariable).getFunction() = func
and vwake_klogd_1_1274.(LocalVariable).getFunction() = func
and vretry_1_1274.(LocalVariable).getFunction() = func
and not vlog_start.getParentScope+() = func
and not vlog_end.getParentScope+() = func
and not vcon_start.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
