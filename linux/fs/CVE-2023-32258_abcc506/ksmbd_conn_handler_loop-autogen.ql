/**
 * @name linux-abcc506a9a71976a8b4c9bf3ee6efd13229c1e19-ksmbd_conn_handler_loop
 * @id cpp/linux/abcc506a9a71976a8b4c9bf3ee6efd13229c1e19/ksmbd-conn-handler-loop
 * @description linux-abcc506a9a71976a8b4c9bf3ee6efd13229c1e19-fs/ksmbd/connection.c-ksmbd_conn_handler_loop CVE-2023-32258
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

/*predicate func_0(Function func, FunctionDeclarationEntry target_0) {
		target_0.getType() instanceof VoidType
		and target_0.getEnclosingFunction() = func
}

*/
predicate func_1(Function func, FunctionCall target_1) {
		target_1.getTarget().hasName("__compiletime_assert_1537")
		and not target_1.getTarget().hasName("__compiletime_assert_1540")
		and target_1.getParent().(ExprStmt).getParent().(IfStmt).getParent().(BlockStmt).getParent().(DoStmt).getParent().(BlockStmt).getParent().(StmtExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_printk")
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, StringLiteral target_2) {
		target_2.getValue()="field \"conn->request_buf\" at fs/ksmbd/connection.c:331"
		and not target_2.getValue()="field \"conn->request_buf\" at fs/ksmbd/connection.c:359"
		and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vconn_279, VariableCall target_4, AddressOfExpr target_5, Function func) {
	exists(ExprStmt target_3 |
		target_3.getExpr().(FunctionCall).getTarget().hasName("ksmbd_conn_set_releasing")
		and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vconn_279
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
		and target_4.getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_4(Variable vconn_279, VariableCall target_4) {
		target_4.getExpr().(ValueFieldAccess).getTarget().getName()="process_fn"
		and target_4.getExpr().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("ksmbd_conn_ops")
		and target_4.getArgument(0).(VariableAccess).getTarget()=vconn_279
}

predicate func_5(Variable vconn_279, AddressOfExpr target_5) {
		target_5.getOperand().(PointerFieldAccess).getTarget().getName()="r_count"
		and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vconn_279
		and target_5.getParent().(FunctionCall).getParent().(EQExpr).getAnOperand().(FunctionCall).getTarget().hasName("atomic_read")
}

from Function func, Variable vconn_279, FunctionCall target_1, StringLiteral target_2, VariableCall target_4, AddressOfExpr target_5
where
func_1(func, target_1)
and func_2(func, target_2)
and not func_3(vconn_279, target_4, target_5, func)
and func_4(vconn_279, target_4)
and func_5(vconn_279, target_5)
and vconn_279.getType().hasName("ksmbd_conn *")
and vconn_279.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
