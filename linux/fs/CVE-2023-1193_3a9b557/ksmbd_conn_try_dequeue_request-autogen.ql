/**
 * @name linux-3a9b557f44ea8f216aab515a7db20e23f0eb51b9-ksmbd_conn_try_dequeue_request
 * @id cpp/linux/3a9b557f44ea8f216aab515a7db20e23f0eb51b9/ksmbd-conn-try-dequeue-request
 * @description linux-3a9b557f44ea8f216aab515a7db20e23f0eb51b9-fs/ksmbd/connection.c-ksmbd_conn_try_dequeue_request CVE-2023-1193
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vwork_128, PointerFieldAccess target_0) {
	target_0.getTarget().getName()="synchronous"
	and target_0.getQualifier().(VariableAccess).getTarget()=vwork_128
}

predicate func_1(Parameter vwork_128, FunctionCall target_1) {
	target_1.getTarget().hasName("list_del_init")
	and not target_1.getTarget().hasName("release_async_work")
	and target_1.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="async_request_entry"
	and target_1.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vwork_128
}

predicate func_2(Variable vconn_130, Function func, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("spin_lock")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="request_lock"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vconn_130
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
}

predicate func_3(Variable vconn_130, Function func, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
	and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="request_lock"
	and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vconn_130
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
}

predicate func_4(Parameter vwork_128, VariableAccess target_4) {
	target_4.getTarget()=vwork_128
	and target_4.getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_5(Parameter vwork_128, ExprStmt target_7, NotExpr target_5) {
	target_5.getOperand().(PointerFieldAccess).getTarget().getName()="synchronous"
	and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vwork_128
	and target_5.getParent().(IfStmt).getThen()=target_7
}

predicate func_6(Parameter vwork_128, PointerFieldAccess target_6) {
	target_6.getTarget().getName()="async_request_entry"
	and target_6.getQualifier().(VariableAccess).getTarget()=vwork_128
}

predicate func_7(Function func, ExprStmt target_7) {
	target_7.getExpr() instanceof FunctionCall
	and target_7.getEnclosingFunction() = func
}

from Function func, Parameter vwork_128, Variable vconn_130, PointerFieldAccess target_0, FunctionCall target_1, ExprStmt target_2, ExprStmt target_3, VariableAccess target_4, NotExpr target_5, PointerFieldAccess target_6, ExprStmt target_7
where
func_0(vwork_128, target_0)
and func_1(vwork_128, target_1)
and func_2(vconn_130, func, target_2)
and func_3(vconn_130, func, target_3)
and func_4(vwork_128, target_4)
and func_5(vwork_128, target_7, target_5)
and func_6(vwork_128, target_6)
and func_7(func, target_7)
and vwork_128.getType().hasName("ksmbd_work *")
and vconn_130.getType().hasName("ksmbd_conn *")
and vwork_128.getFunction() = func
and vconn_130.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
