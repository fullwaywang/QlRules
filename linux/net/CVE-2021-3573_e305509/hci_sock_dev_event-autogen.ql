/**
 * @name linux-e305509e678b3a4af2b3cfd410f409f7cdaabb52-hci_sock_dev_event
 * @id cpp/linux/e305509e678b3a4af2b3cfd410f409f7cdaabb52/hci-sock-dev-event
 * @description linux-e305509e678b3a4af2b3cfd410f409f7cdaabb52-net/bluetooth/hci_sock.c-hci_sock_dev_event CVE-2021-3573
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("_raw_spin_lock_nested")
	and not target_0.getTarget().hasName("lock_sock")
	and target_0.getArgument(0).(FunctionCall).getTarget().hasName("spinlock_check")
	and target_0.getArgument(0).(FunctionCall).getArgument(0) instanceof AddressOfExpr
	and target_0.getArgument(1).(Literal).getValue()="1"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, FunctionCall target_1) {
	target_1.getTarget().hasName("spin_unlock")
	and not target_1.getTarget().hasName("release_sock")
	and target_1.getArgument(0).(AddressOfExpr).getOperand() instanceof ValueFieldAccess
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vsk_760, VariableAccess target_2) {
	target_2.getTarget()=vsk_760
	and target_2.getParent().(PointerFieldAccess).getParent().(ValueFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("spinlock_check")
	and target_2.getParent().(PointerFieldAccess).getParent().(ValueFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0) instanceof AddressOfExpr
}

predicate func_3(Variable vsk_760, VariableAccess target_3) {
	target_3.getTarget()=vsk_760
	and target_3.getParent().(PointerFieldAccess).getParent().(ValueFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_4(Function func, DoStmt target_4) {
	target_4.getCondition().(Literal).getValue()="0"
	and target_4.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr() instanceof FunctionCall
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable vsk_760, EqualityOperation target_7, AddressOfExpr target_5) {
	target_5.getOperand().(ValueFieldAccess).getTarget().getName()="slock"
	and target_5.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
	and target_5.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_760
	and target_5.getParent().(FunctionCall).getParent().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("spinlock_check")
	and target_5.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_7.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_6(Variable vsk_760, ValueFieldAccess target_6) {
	target_6.getTarget().getName()="slock"
	and target_6.getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
	and target_6.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_760
	and target_6.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_7(Variable vsk_760, EqualityOperation target_7) {
	target_7.getLeftOperand().(PointerFieldAccess).getTarget().getName()="hdev"
	and target_7.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_760
	and target_7.getRightOperand().(VariableAccess).getTarget().getType().hasName("hci_dev *")
}

from Function func, Variable vsk_760, FunctionCall target_0, FunctionCall target_1, VariableAccess target_2, VariableAccess target_3, DoStmt target_4, AddressOfExpr target_5, ValueFieldAccess target_6, EqualityOperation target_7
where
func_0(func, target_0)
and func_1(func, target_1)
and func_2(vsk_760, target_2)
and func_3(vsk_760, target_3)
and func_4(func, target_4)
and func_5(vsk_760, target_7, target_5)
and func_6(vsk_760, target_6)
and func_7(vsk_760, target_7)
and vsk_760.getType().hasName("sock *")
and vsk_760.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
