/**
 * @name linux-cefa91b2332d7009bc0be5d951d6cbbf349f90f8-reserve_sfa_size
 * @id cpp/linux/cefa91b2332d7009bc0be5d951d6cbbf349f90f8/reserve-sfa-size
 * @description linux-cefa91b2332d7009bc0be5d951d6cbbf349f90f8-reserve_sfa_size CVE-2022-2639
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vreq_size_2458, Variable vnext_offset_2459, BlockStmt target_5, AddExpr target_6, ExprStmt target_7, PointerArithmeticOperation target_8) {
	exists(RelationalOperation target_0 |
		 (target_0 instanceof GTExpr or target_0 instanceof LTExpr)
		and target_0.getGreaterOperand().(AddExpr).getAnOperand().(VariableAccess).getTarget()=vnext_offset_2459
		and target_0.getGreaterOperand().(AddExpr).getAnOperand().(VariableAccess).getTarget()=vreq_size_2458
		and target_0.getLesserOperand() instanceof MulExpr
		and target_0.getParent().(IfStmt).getThen()=target_5
		and target_6.getAnOperand().(VariableAccess).getLocation().isBefore(target_0.getGreaterOperand().(AddExpr).getAnOperand().(VariableAccess).getLocation())
		and target_0.getGreaterOperand().(AddExpr).getAnOperand().(VariableAccess).getLocation().isBefore(target_7.getExpr().(AssignAddExpr).getRValue().(VariableAccess).getLocation())
		and target_0.getGreaterOperand().(AddExpr).getAnOperand().(VariableAccess).getLocation().isBefore(target_8.getAnOperand().(VariableAccess).getLocation()))
}

predicate func_1(Function func, MulExpr target_1) {
		target_1.getValue()="32768"
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vnext_offset_2459, VariableAccess target_2) {
		target_2.getTarget()=vnext_offset_2459
}

predicate func_3(Variable vreq_size_2458, BlockStmt target_5, VariableAccess target_3) {
		target_3.getTarget()=vreq_size_2458
		and target_3.getParent().(LTExpr).getLesserOperand() instanceof SubExpr
		and target_3.getParent().(LTExpr).getParent().(IfStmt).getThen()=target_5
}

predicate func_4(Variable vreq_size_2458, Variable vnext_offset_2459, BlockStmt target_5, RelationalOperation target_4) {
		 (target_4 instanceof GTExpr or target_4 instanceof LTExpr)
		and target_4.getLesserOperand().(SubExpr).getLeftOperand() instanceof MulExpr
		and target_4.getLesserOperand().(SubExpr).getRightOperand().(VariableAccess).getTarget()=vnext_offset_2459
		and target_4.getGreaterOperand().(VariableAccess).getTarget()=vreq_size_2458
		and target_4.getParent().(IfStmt).getThen()=target_5
}

predicate func_5(Function func, BlockStmt target_5) {
		target_5.getStmt(0).(DoStmt).getCondition() instanceof Literal
		and target_5.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(VariableAccess).getTarget().getType().hasName("bool")
		and target_5.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getAnOperand().(FunctionCall).getTarget().hasName("net_ratelimit")
		and target_5.getStmt(1).(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("ERR_PTR")
		and target_5.getStmt(1).(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(UnaryMinusExpr).getValue()="-90"
		and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable vreq_size_2458, Variable vnext_offset_2459, AddExpr target_6) {
		target_6.getAnOperand().(VariableAccess).getTarget()=vnext_offset_2459
		and target_6.getAnOperand().(VariableAccess).getTarget()=vreq_size_2458
}

predicate func_7(Variable vreq_size_2458, ExprStmt target_7) {
		target_7.getExpr().(AssignAddExpr).getLValue().(PointerFieldAccess).getTarget().getName()="actions_len"
		and target_7.getExpr().(AssignAddExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget().getType().hasName("sw_flow_actions **")
		and target_7.getExpr().(AssignAddExpr).getRValue().(VariableAccess).getTarget()=vreq_size_2458
}

predicate func_8(Variable vnext_offset_2459, PointerArithmeticOperation target_8) {
		target_8.getAnOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget().getType().hasName("sw_flow_actions **")
		and target_8.getAnOperand().(VariableAccess).getTarget()=vnext_offset_2459
}

from Function func, Variable vreq_size_2458, Variable vnext_offset_2459, MulExpr target_1, VariableAccess target_2, VariableAccess target_3, RelationalOperation target_4, BlockStmt target_5, AddExpr target_6, ExprStmt target_7, PointerArithmeticOperation target_8
where
not func_0(vreq_size_2458, vnext_offset_2459, target_5, target_6, target_7, target_8)
and func_1(func, target_1)
and func_2(vnext_offset_2459, target_2)
and func_3(vreq_size_2458, target_5, target_3)
and func_4(vreq_size_2458, vnext_offset_2459, target_5, target_4)
and func_5(func, target_5)
and func_6(vreq_size_2458, vnext_offset_2459, target_6)
and func_7(vreq_size_2458, target_7)
and func_8(vnext_offset_2459, target_8)
and vreq_size_2458.getType().hasName("size_t")
and vnext_offset_2459.getType().hasName("int")
and vreq_size_2458.(LocalVariable).getFunction() = func
and vnext_offset_2459.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
