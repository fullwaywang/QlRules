/**
 * @name linux-4f11ada10d0ad3fd53e2bd67806351de63a4f9c3-ovl_copy_up_one
 * @id cpp/linux/4f11ada10d0ad3fd53e2bd67806351de63a4f9c3/ovl-copy-up-one
 * @description linux-4f11ada10d0ad3fd53e2bd67806351de63a4f9c3-fs/overlayfs/copy_up.c-ovl_copy_up_one CVE-2023-0386
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vctx_999, ExprStmt target_1, AddressOfExpr target_2, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("kuid_has_mapping")
	and target_0.getCondition().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="uid"
	and target_0.getCondition().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="stat"
	and target_0.getCondition().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_999
	and target_0.getCondition().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("kgid_has_mapping")
	and target_0.getCondition().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="gid"
	and target_0.getCondition().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="stat"
	and target_0.getCondition().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_999
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-75"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vctx_999, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="metacopy"
	and target_1.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_999
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("ovl_need_meta_copy_up")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("dentry *")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="mode"
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="stat"
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_999
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_2(Variable vctx_999, AddressOfExpr target_2) {
	target_2.getOperand().(ValueFieldAccess).getTarget().getName()="stat"
	and target_2.getOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_999
}

from Function func, Variable vctx_999, ExprStmt target_1, AddressOfExpr target_2
where
not func_0(vctx_999, target_1, target_2, func)
and func_1(vctx_999, target_1)
and func_2(vctx_999, target_2)
and vctx_999.getType().hasName("ovl_copy_up_ctx")
and vctx_999.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
