commit 680d04e0ba7e926233e3b9cee59125ce181f66ba
Author: Mathias Krause <minipli@googlemail.com>
Date:   Sun Apr 7 01:52:01 2013 +0000

    VSOCK: vmci - fix possible info leak in vmci_transport_dgram_dequeue()
    
    In case we received no data on the call to skb_recv_datagram(), i.e.
    skb->data is NULL, vmci_transport_dgram_dequeue() will return with 0
    without updating msg_namelen leading to net/socket.c leaking the local,
    uninitialized sockaddr_storage variable to userland -- 128 bytes of
    kernel stack memory.
    
    Fix this by moving the already existing msg_namelen assignment a few
    lines above.
    
    Cc: Andy King <acking@vmware.com>
    Cc: Dmitry Torokhov <dtor@vmware.com>
    Cc: George Zhang <georgezhang@vmware.com>
    Signed-off-by: Mathias Krause <minipli@googlemail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/vmw_vsock/vmci_transport.c b/net/vmw_vsock/vmci_transport.c
index 1f6508e..5e04d3d 100644
--- a/net/vmw_vsock/vmci_transport.c
+++ b/net/vmw_vsock/vmci_transport.c
@@ -1736,6 +1736,8 @@ static int vmci_transport_dgram_dequeue(struct kiocb *kiocb,
 	if (flags & MSG_OOB || flags & MSG_ERRQUEUE)
 		return -EOPNOTSUPP;
 
+	msg->msg_namelen = 0;
+
 	/* Retrieve the head sk_buff from the socket's receive queue. */
 	err = 0;
 	skb = skb_recv_datagram(&vsk->sk, flags, noblock, &err);
@@ -1768,7 +1770,6 @@ static int vmci_transport_dgram_dequeue(struct kiocb *kiocb,
 	if (err)
 		goto out;
 
-	msg->msg_namelen = 0;
 	if (msg->msg_name) {
 		struct sockaddr_vm *vm_addr;
 
