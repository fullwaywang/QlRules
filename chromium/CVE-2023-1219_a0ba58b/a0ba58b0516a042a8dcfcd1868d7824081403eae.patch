commit a0ba58b0516a042a8dcfcd1868d7824081403eae	a0ba58b0516a042a8dcfcd1868d7824081403eae
Author: Joe Mason <joenotcharles@google.com>
Date:   Wed Feb 22 20:46:29 2023 +0000

    Remove browser_watcher (3/3): Remove activity_tracker.h and all refs
    
    Also fix IWYU errors in files that transitively included
    activity_tracker.h.
    
    This does not remove the Try() call in LockImpl::Lock() because
    base/allocator/partition_allocator/spinning_mutex.h is implemented
    using the try-and-then-acquire pattern so its performance is well
    known. Also removes the LIKELY annotation to match the
    spinning_mutex.h implementation.
    
    Bug: 1415328
    Change-Id: Ia68184c931d8b13ae3cee46048338fdfc4242e0b
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4273206
    Reviewed-by: Will Harris <wfh@chromium.org>
    Reviewed-by: Austin Sullivan <asully@chromium.org>
    Reviewed-by: Ken Rockot <rockot@google.com>
    Reviewed-by: Daniel Cheng <dcheng@chromium.org>
    Reviewed-by: Colin Blundell <blundell@chromium.org>
    Commit-Queue: Joe Mason <joenotcharles@google.com>
    Cr-Commit-Position: refs/heads/main@{#1108550}

diff --git a/base/BUILD.gn b/base/BUILD.gn
index a68647788e884..791cf67bb3a2a 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -308,7 +308,6 @@ component("base") {
     "cxx20_is_constant_evaluated.h",
     "cxx20_to_address.h",
     "dcheck_is_on.h",
-    "debug/activity_tracker.h",
     "debug/alias.cc",
     "debug/alias.h",
     "debug/asan_invalid_access.cc",
diff --git a/base/debug/activity_tracker.h b/base/debug/activity_tracker.h
deleted file mode 100644
index 0c553bdb3c70e..0000000000000
--- a/base/debug/activity_tracker.h
+++ /dev/null
@@ -1,182 +0,0 @@
-// Copyright 2016 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
-// found in the LICENSE file.
-
-// Activity tracking originally provided a low-overhead method of collecting
-// information about the state of the application for analysis both while it was
-// running and after it had terminated unexpectedly. To keep overhead low, a
-// GlobalActivityTracker object was only created when the ExtendedCrashReporting
-// feature was enabled. If no GlobalActivityTracker object existed, the
-// ActivityUserData and ScopedActivity classes, and all subclasses, would
-// discard any data passed to them.
-//
-// All classes related to activity tracking have been deleted except for those
-// in activity_tracker.h, which have callers throughout the code base. This file
-// now contains only stub versions of the classes and methods that are
-// referenced in other files. These will compile and link but do nothing if
-// called.
-//
-// TODO(crbug.com/1415328): Clean up all callers and delete activity_tracker.h.
-
-#ifndef BASE_DEBUG_ACTIVITY_TRACKER_H_
-#define BASE_DEBUG_ACTIVITY_TRACKER_H_
-
-#include <atomic>
-
-#include "base/base_export.h"
-#include "base/files/file_path.h"
-#include "base/location.h"
-#include "base/pending_task.h"
-#include "base/process/process_handle.h"
-#include "base/strings/string_piece.h"
-#include "build/build_config.h"
-
-// These headers are no longer needed by activity_tracker.h, but many files that
-// transitively include it have hidden dependencies on them.
-// TODO(crbug.com/1415328): Fix all IWYU errors and delete activity_tracker.h.
-#include "base/memory/ptr_util.h"
-#include "base/strings/utf_string_conversions.h"
-#include "base/task/sequenced_task_runner.h"
-
-namespace base {
-
-class PlatformThreadHandle;
-class Process;
-class WaitableEvent;
-
-namespace internal {
-class LockImpl;
-}  // namespace internal
-
-namespace debug {
-
-class BASE_EXPORT ActivityUserData {
- public:
-  ActivityUserData() = default;
-  ~ActivityUserData() = default;
-
-  ActivityUserData(const ActivityUserData&) = delete;
-  ActivityUserData& operator=(const ActivityUserData&) = delete;
-
-  void SetInt(StringPiece name, int64_t value) {}
-
-  std::atomic<uint64_t>* SetUint(StringPiece name, uint64_t value) {
-    // Only one caller (mojo/core/channel_win.cc) uses the return value of this
-    // method, expecting a pointer into ActivityUserData memory where it can
-    // write a running count. It checks for nullptr before writing to the
-    // uint64_t, so this is safe.
-    return nullptr;
-  }
-
-  void SetString(StringPiece name, StringPiece value) {}
-};
-
-class BASE_EXPORT GlobalActivityTracker {
- public:
-  enum ProcessPhase : int {
-    PROCESS_PHASE_UNKNOWN = 0,
-    PROCESS_LAUNCHED = 1,
-    PROCESS_LAUNCH_FAILED = 2,
-    PROCESS_EXITED_CLEANLY = 10,
-    PROCESS_EXITED_WITH_CODE = 11,
-    PROCESS_SHUTDOWN_STARTED = 100,
-    PROCESS_MAIN_LOOP_STARTED = 101,
-  };
-
-  // The deleted constructor ensures that there is no way to create a
-  // GlobalActivityTracker object. This class and all its methods exist only
-  // keep existing callers compiling.
-  GlobalActivityTracker() = delete;
-  ~GlobalActivityTracker() = delete;
-
-  GlobalActivityTracker(const GlobalActivityTracker&) = delete;
-  GlobalActivityTracker& operator=(const GlobalActivityTracker&) = delete;
-
-  // Always return nullptr. All callers check the return value of Get(), or
-  // use the static IfEnabled() functions that were always no-ops if Get()
-  // returned nullptr. Originally Get() returned a value iff the
-  // ExtendedCrashReporting feature was enabled. Since it was disabled by
-  // default all callers can cleanly handle a nullptr return value.
-  static GlobalActivityTracker* Get() { return nullptr; }
-
-  void RecordProcessLaunch(ProcessId process_id,
-                           const FilePath::StringType& cmd) {}
-  static void RecordProcessLaunchIfEnabled(ProcessId process_id,
-                                           const FilePath::StringType& cmd) {}
-  static void RecordProcessLaunchIfEnabled(ProcessId process_id,
-                                           const FilePath::StringType& exe,
-                                           const FilePath::StringType& args) {}
-  static void RecordProcessExitIfEnabled(ProcessId process_id, int exit_code) {}
-
-  void SetProcessPhase(ProcessPhase phase) {}
-  static void SetProcessPhaseIfEnabled(ProcessPhase phase) {}
-
-  void RecordLogMessage(StringPiece message) {}
-
-  ActivityUserData& process_data() { return process_data_; }
-
- private:
-  ActivityUserData process_data_;
-};
-
-// Record entry in to and out of an arbitrary block of code. This class and its
-// subclasses are instantiated by many callers, and are expected to record the
-// data passed to them in the object returned by GlobalActivityTracker::Get(),
-// or do nothing if Get() returns nullptr. Since Get() now always returns
-// nullptr, they now always do nothing.
-class BASE_EXPORT ScopedActivity {
- public:
-  ScopedActivity() = default;
-  ~ScopedActivity() = default;
-
-  ScopedActivity(uint8_t action, uint32_t id, int32_t info) {}
-  ScopedActivity(Location from_here,
-                 uint8_t action,
-                 uint32_t id,
-                 int32_t info) {}
-
-  ScopedActivity(const ScopedActivity&) = delete;
-  ScopedActivity& operator=(const ScopedActivity&) = delete;
-
-  bool IsRecorded() { return false; }
-
-  ActivityUserData& user_data() { return user_data_; }
-
- private:
-  ActivityUserData user_data_;
-};
-
-// These "scoped" classes provide easy tracking of various blocking actions.
-
-class BASE_EXPORT ScopedTaskRunActivity : public ScopedActivity {
- public:
-  explicit ScopedTaskRunActivity(const PendingTask& task) {}
-};
-
-class BASE_EXPORT ScopedLockAcquireActivity : public ScopedActivity {
- public:
-  explicit ScopedLockAcquireActivity(const base::internal::LockImpl* lock) {}
-};
-
-class BASE_EXPORT ScopedEventWaitActivity : public ScopedActivity {
- public:
-  explicit ScopedEventWaitActivity(const WaitableEvent* event) {}
-};
-
-class BASE_EXPORT ScopedThreadJoinActivity : public ScopedActivity {
- public:
-  explicit ScopedThreadJoinActivity(const PlatformThreadHandle* thread) {}
-};
-
-// Some systems don't have base::Process
-#if !BUILDFLAG(IS_NACL) && !BUILDFLAG(IS_IOS)
-class BASE_EXPORT ScopedProcessWaitActivity : public ScopedActivity {
- public:
-  explicit ScopedProcessWaitActivity(const Process* process) {}
-};
-#endif
-
-}  // namespace debug
-}  // namespace base
-
-#endif  // BASE_DEBUG_ACTIVITY_TRACKER_H_
diff --git a/base/logging.cc b/base/logging.cc
index 615b432d43f7c..496e68dfcd33a 100644
--- a/base/logging.cc
+++ b/base/logging.cc
@@ -88,7 +88,6 @@ typedef FILE* FileHandle;
 #include "base/base_switches.h"
 #include "base/command_line.h"
 #include "base/containers/stack.h"
-#include "base/debug/activity_tracker.h"
 #include "base/debug/alias.h"
 #include "base/debug/debugger.h"
 #include "base/debug/stack_trace.h"
@@ -933,12 +932,6 @@ LogMessage::~LogMessage() {
   }
 
   if (severity_ == LOGGING_FATAL) {
-    // Write the log message to the global activity tracker, if running.
-    base::debug::GlobalActivityTracker* tracker =
-        base::debug::GlobalActivityTracker::Get();
-    if (tracker)
-      tracker->RecordLogMessage(str_newline);
-
     char str_stack[1024];
     base::strlcpy(str_stack, str_newline.data(), std::size(str_stack));
     base::debug::Alias(&str_stack);
diff --git a/base/metrics/field_trial.cc b/base/metrics/field_trial.cc
index 8ebcd47c67dc7..98f387dbadfdc 100644
--- a/base/metrics/field_trial.cc
+++ b/base/metrics/field_trial.cc
@@ -10,7 +10,6 @@
 #include "base/auto_reset.h"
 #include "base/base_switches.h"
 #include "base/command_line.h"
-#include "base/debug/activity_tracker.h"
 #include "base/logging.h"
 #include "base/metrics/field_trial_param_associator.h"
 #include "base/metrics/histogram_macros.h"
diff --git a/base/process/kill_posix.cc b/base/process/kill_posix.cc
index 60d2a277ebdc8..88bb190287694 100644
--- a/base/process/kill_posix.cc
+++ b/base/process/kill_posix.cc
@@ -10,7 +10,6 @@
 #include <sys/wait.h>
 #include <unistd.h>
 
-#include "base/debug/activity_tracker.h"
 #include "base/files/file_util.h"
 #include "base/logging.h"
 #include "base/posix/eintr_wrapper.h"
diff --git a/base/process/launch_win.cc b/base/process/launch_win.cc
index 615d74d1d4b5a..3e1516cf8b905 100644
--- a/base/process/launch_win.cc
+++ b/base/process/launch_win.cc
@@ -17,7 +17,6 @@
 #include <ios>
 #include <limits>
 
-#include "base/debug/activity_tracker.h"
 #include "base/debug/stack_trace.h"
 #include "base/functional/bind.h"
 #include "base/functional/callback_helpers.h"
@@ -97,10 +96,6 @@ bool GetAppOutputInternal(CommandLine::StringPieceType cl,
   }
 
   win::ScopedProcessInformation proc_info(temp_process_info);
-  debug::GlobalActivityTracker* tracker = debug::GlobalActivityTracker::Get();
-  if (tracker)
-    tracker->RecordProcessLaunch(proc_info.process_id(),
-                                 CommandLine::StringType(cl));
 
   // Close our writing end of pipe now. Otherwise later read would not be able
   // to detect end of child's output.
@@ -131,8 +126,6 @@ bool GetAppOutputInternal(CommandLine::StringPieceType cl,
 
   TerminationStatus status =
       GetTerminationStatus(proc_info.process_handle(), exit_code);
-  debug::GlobalActivityTracker::RecordProcessExitIfEnabled(
-      proc_info.process_id(), *exit_code);
   return status != TERMINATION_STATUS_PROCESS_CRASHED &&
          status != TERMINATION_STATUS_ABNORMAL_TERMINATION;
 }
@@ -165,8 +158,6 @@ Process LaunchElevatedProcess(const CommandLine& cmdline,
     WaitForSingleObject(shex_info.hProcess, INFINITE);
   }
 
-  debug::GlobalActivityTracker::RecordProcessLaunchIfEnabled(
-      GetProcessId(shex_info.hProcess), file, arguments);
   return Process(shex_info.hProcess);
 }
 
@@ -436,8 +427,6 @@ Process LaunchProcess(const CommandLine::StringType& cmdline,
     WaitForSingleObject(process_info.process_handle(), INFINITE);
   }
 
-  debug::GlobalActivityTracker::RecordProcessLaunchIfEnabled(
-      process_info.process_id(), cmdline);
   return Process(process_info.TakeProcessHandle());
 }
 
diff --git a/base/process/process_fuchsia.cc b/base/process/process_fuchsia.cc
index 92bdc0eba1f08..d88dd1fc5d5a0 100644
--- a/base/process/process_fuchsia.cc
+++ b/base/process/process_fuchsia.cc
@@ -9,12 +9,10 @@
 #include <zircon/syscalls.h>
 
 #include "base/clang_profiling_buildflags.h"
-#include "base/debug/activity_tracker.h"
 #include "base/fuchsia/default_job.h"
 #include "base/fuchsia/fuchsia_logging.h"
 #include "base/threading/thread_restrictions.h"
 #include "base/trace_event/base_tracing.h"
-#include "third_party/abseil-cpp/absl/types/optional.h"
 
 #if BUILDFLAG(CLANG_PROFILING)
 #include "base/test/clang_profiling.h"
@@ -233,10 +231,7 @@ bool Process::WaitForExitWithTimeout(TimeDelta timeout, int* exit_code) const {
 
   TRACE_EVENT0("base", "Process::WaitForExitWithTimeout");
 
-  // Record the event that this thread is blocking upon (for hang diagnosis).
-  absl::optional<debug::ScopedProcessWaitActivity> process_activity;
   if (!timeout.is_zero()) {
-    process_activity.emplace(this);
     // Assert that this thread is allowed to wait below. This intentionally
     // doesn't use ScopedBlockingCallWithBaseSyncPrimitives because the process
     // being waited upon tends to itself be using the CPU and considering this
diff --git a/base/process/process_metrics_win.cc b/base/process/process_metrics_win.cc
index c8b79fe47f374..41bd51e39caf7 100644
--- a/base/process/process_metrics_win.cc
+++ b/base/process/process_metrics_win.cc
@@ -15,6 +15,7 @@
 
 #include "base/logging.h"
 #include "base/memory/ptr_util.h"
+#include "base/notreached.h"
 #include "base/process/process_metrics_iocounters.h"
 #include "base/system/sys_info.h"
 #include "base/threading/scoped_blocking_call.h"
diff --git a/base/process/process_posix.cc b/base/process/process_posix.cc
index 91cd35b7fd7f8..94d5c931e8c6d 100644
--- a/base/process/process_posix.cc
+++ b/base/process/process_posix.cc
@@ -13,7 +13,6 @@
 #include <utility>
 
 #include "base/clang_profiling_buildflags.h"
-#include "base/debug/activity_tracker.h"
 #include "base/files/scoped_file.h"
 #include "base/logging.h"
 #include "base/notreached.h"
@@ -23,7 +22,6 @@
 #include "base/time/time.h"
 #include "base/trace_event/base_tracing.h"
 #include "build/build_config.h"
-#include "third_party/abseil-cpp/absl/types/optional.h"
 
 #if BUILDFLAG(IS_MAC)
 #include <sys/event.h>
@@ -363,10 +361,7 @@ bool Process::WaitForExit(int* exit_code) const {
 }
 
 bool Process::WaitForExitWithTimeout(TimeDelta timeout, int* exit_code) const {
-  // Record the event that this thread is blocking upon (for hang diagnosis).
-  absl::optional<debug::ScopedProcessWaitActivity> process_activity;
   if (!timeout.is_zero()) {
-    process_activity.emplace(this);
     // Assert that this thread is allowed to wait below. This intentionally
     // doesn't use ScopedBlockingCallWithBaseSyncPrimitives because the process
     // being waited upon tends to itself be using the CPU and considering this
diff --git a/base/process/process_win.cc b/base/process/process_win.cc
index a92fe6d1a6556..dc4db5a13b06f 100644
--- a/base/process/process_win.cc
+++ b/base/process/process_win.cc
@@ -5,14 +5,12 @@
 #include "base/process/process.h"
 
 #include "base/clang_profiling_buildflags.h"
-#include "base/debug/activity_tracker.h"
 #include "base/logging.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/process/kill.h"
 #include "base/threading/thread_restrictions.h"
 #include "base/trace_event/base_tracing.h"
 #include "base/win/windows_version.h"
-#include "third_party/abseil-cpp/absl/types/optional.h"
 
 #include <windows.h>
 
@@ -193,9 +191,6 @@ bool Process::Terminate(int exit_code, bool wait) const {
 Process::WaitExitStatus Process::WaitForExitOrEvent(
     const base::win::ScopedHandle& stop_event_handle,
     int* exit_code) const {
-  // Record the event that this thread is blocking upon (for hang diagnosis).
-  base::debug::ScopedProcessWaitActivity process_activity(this);
-
   HANDLE events[] = {Handle(), stop_event_handle.get()};
   DWORD wait_result =
       ::WaitForMultipleObjects(std::size(events), events, FALSE, INFINITE);
@@ -226,10 +221,7 @@ bool Process::WaitForExit(int* exit_code) const {
 bool Process::WaitForExitWithTimeout(TimeDelta timeout, int* exit_code) const {
   TRACE_EVENT0("base", "Process::WaitForExitWithTimeout");
 
-  // Record the event that this thread is blocking upon (for hang diagnosis).
-  absl::optional<debug::ScopedProcessWaitActivity> process_activity;
   if (!timeout.is_zero()) {
-    process_activity.emplace(this);
     // Assert that this thread is allowed to wait below. This intentionally
     // doesn't use ScopedBlockingCallWithBaseSyncPrimitives because the process
     // being waited upon tends to itself be using the CPU and considering this
@@ -253,10 +245,7 @@ bool Process::WaitForExitWithTimeout(TimeDelta timeout, int* exit_code) const {
   return true;
 }
 
-void Process::Exited(int exit_code) const {
-  base::debug::GlobalActivityTracker::RecordProcessExitIfEnabled(Pid(),
-                                                                 exit_code);
-}
+void Process::Exited(int exit_code) const {}
 
 bool Process::IsProcessBackgrounded() const {
   DCHECK(IsValid());
diff --git a/base/sync_socket_win.cc b/base/sync_socket_win.cc
index 9144cd310f2b7..187cd9225a6df 100644
--- a/base/sync_socket_win.cc
+++ b/base/sync_socket_win.cc
@@ -8,6 +8,7 @@
 #include <stddef.h>
 
 #include "base/logging.h"
+#include "base/notreached.h"
 #include "base/rand_util.h"
 #include "base/threading/scoped_blocking_call.h"
 #include "base/win/scoped_handle.h"
diff --git a/base/synchronization/lock_impl.h b/base/synchronization/lock_impl.h
index 33d9e9df6b5ba..b983547adaadc 100644
--- a/base/synchronization/lock_impl.h
+++ b/base/synchronization/lock_impl.h
@@ -75,25 +75,22 @@ class BASE_EXPORT LockImpl {
   static bool PriorityInheritanceAvailable();
 #endif
 
-  void LockInternalWithTracking();
+  void LockInternal();
   NativeHandle native_handle_;
 };
 
 void LockImpl::Lock() {
-  // The ScopedLockAcquireActivity in LockInternalWithTracking() (not inlined
-  // here because of circular includes) is relatively expensive and so its
-  // actions can become significant due to the very large number of locks that
-  // tend to be used throughout the build. It is also not needed unless the lock
-  // is contended.
-  //
-  // To avoid this cost in the vast majority of the calls, simply "try" the lock
-  // first and only do the (tracked) blocking call if that fails. |Try()| is
+  // Try the lock first to acquire it cheaply if it's not contended. Try() is
   // cheap on platforms with futex-type locks, as it doesn't call into the
-  // kernel.
-  if (LIKELY(Try()))
+  // kernel. Not marked LIKELY(), as:
+  // 1. We don't know how much contention the lock would experience
+  // 2. This may lead to weird-looking code layout when inlined into a caller
+  // with (UN)LIKELY() annotations.
+  if (Try()) {
     return;
+  }
 
-  LockInternalWithTracking();
+  LockInternal();
 }
 
 #if BUILDFLAG(IS_WIN)
diff --git a/base/synchronization/lock_impl_posix.cc b/base/synchronization/lock_impl_posix.cc
index ccfda70c2eca9..cdaebd74e1748 100644
--- a/base/synchronization/lock_impl_posix.cc
+++ b/base/synchronization/lock_impl_posix.cc
@@ -4,10 +4,10 @@
 
 #include "base/synchronization/lock_impl.h"
 
+#include <ostream>
 #include <string>
 
 #include "base/check_op.h"
-#include "base/debug/activity_tracker.h"
 #include "base/posix/safe_strerror.h"
 #include "base/synchronization/lock.h"
 #include "base/synchronization/synchronization_buildflags.h"
@@ -91,8 +91,7 @@ LockImpl::~LockImpl() {
   DCHECK_EQ(rv, 0) << ". " << SystemErrorCodeToString(rv);
 }
 
-void LockImpl::LockInternalWithTracking() {
-  base::debug::ScopedLockAcquireActivity lock_activity(this);
+void LockImpl::LockInternal() {
   int rv = pthread_mutex_lock(&native_handle_);
   DCHECK_EQ(rv, 0) << ". " << SystemErrorCodeToString(rv);
 }
diff --git a/base/synchronization/lock_impl_win.cc b/base/synchronization/lock_impl_win.cc
index 2c201a3085819..6819c23356c3e 100644
--- a/base/synchronization/lock_impl_win.cc
+++ b/base/synchronization/lock_impl_win.cc
@@ -4,8 +4,6 @@
 
 #include "base/synchronization/lock_impl.h"
 
-#include "base/debug/activity_tracker.h"
-
 #include <windows.h>
 
 namespace base {
@@ -15,8 +13,7 @@ LockImpl::LockImpl() : native_handle_(SRWLOCK_INIT) {}
 
 LockImpl::~LockImpl() = default;
 
-void LockImpl::LockInternalWithTracking() {
-  base::debug::ScopedLockAcquireActivity lock_activity(this);
+void LockImpl::LockInternal() {
   ::AcquireSRWLockExclusive(reinterpret_cast<PSRWLOCK>(&native_handle_));
 }
 
diff --git a/base/synchronization/waitable_event.cc b/base/synchronization/waitable_event.cc
index c01677c1a960e..643ead3f052d7 100644
--- a/base/synchronization/waitable_event.cc
+++ b/base/synchronization/waitable_event.cc
@@ -4,7 +4,6 @@
 
 #include "base/synchronization/waitable_event.h"
 
-#include "base/debug/activity_tracker.h"
 #include "base/threading/scoped_blocking_call.h"
 #include "base/trace_event/base_tracing.h"
 
@@ -29,14 +28,11 @@ bool WaitableEvent::TimedWait(TimeDelta wait_delta) {
   if (wait_delta <= TimeDelta())
     return IsSignaled();
 
-  // Record the event that this thread is blocking upon (for hang diagnosis) and
-  // consider it blocked for scheduling purposes. Ignore this for non-blocking
-  // WaitableEvents.
-  absl::optional<debug::ScopedEventWaitActivity> event_activity;
+  // Consider this thread blocked for scheduling purposes. Ignore this for
+  // non-blocking WaitableEvents.
   absl::optional<internal::ScopedBlockingCallWithBaseSyncPrimitives>
       scoped_blocking_call;
   if (!only_used_while_idle_) {
-    event_activity.emplace(this);
     scoped_blocking_call.emplace(FROM_HERE, BlockingType::MAY_BLOCK);
   }
 
diff --git a/base/synchronization/waitable_event_mac.cc b/base/synchronization/waitable_event_mac.cc
index 1c3d9922dd157..40007969c9372 100644
--- a/base/synchronization/waitable_event_mac.cc
+++ b/base/synchronization/waitable_event_mac.cc
@@ -10,9 +10,9 @@
 #include <limits>
 #include <memory>
 
-#include "base/debug/activity_tracker.h"
 #include "base/files/scoped_file.h"
 #include "base/mac/mach_logging.h"
+#include "base/notreached.h"
 #include "base/posix/eintr_wrapper.h"
 #include "base/threading/scoped_blocking_call.h"
 #include "base/threading/thread_restrictions.h"
@@ -126,9 +126,6 @@ size_t WaitableEvent::WaitMany(WaitableEvent** raw_waitables, size_t count) {
   DCHECK(count) << "Cannot wait on no events";
   internal::ScopedBlockingCallWithBaseSyncPrimitives scoped_blocking_call(
       FROM_HERE, BlockingType::MAY_BLOCK);
-  // Record an event (the first) that this thread is blocking upon.
-  debug::ScopedEventWaitActivity event_activity(raw_waitables[0]);
-
   // On macOS 10.11+, using Mach port sets may cause system instability, per
   // https://crbug.com/756102. On macOS 10.12+, a kqueue can be used
   // instead to work around that.
diff --git a/base/synchronization/waitable_event_posix.cc b/base/synchronization/waitable_event_posix.cc
index ad59be8870a39..bb290d3c6e0b9 100644
--- a/base/synchronization/waitable_event_posix.cc
+++ b/base/synchronization/waitable_event_posix.cc
@@ -8,7 +8,6 @@
 #include <vector>
 
 #include "base/check_op.h"
-#include "base/debug/activity_tracker.h"
 #include "base/memory/raw_ptr.h"
 #include "base/ranges/algorithm.h"
 #include "base/synchronization/condition_variable.h"
@@ -235,9 +234,6 @@ size_t WaitableEvent::WaitMany(WaitableEvent** raw_waitables,
   DCHECK(count) << "Cannot wait on no events";
   internal::ScopedBlockingCallWithBaseSyncPrimitives scoped_blocking_call(
       FROM_HERE, BlockingType::MAY_BLOCK);
-  // Record an event (the first) that this thread is blocking upon.
-  debug::ScopedEventWaitActivity event_activity(raw_waitables[0]);
-
   // We need to acquire the locks in a globally consistent order. Thus we sort
   // the array of waitables by address. We actually sort a pairs so that we can
   // map back to the original index values later.
diff --git a/base/synchronization/waitable_event_win.cc b/base/synchronization/waitable_event_win.cc
index 3141cf81d9ec2..611e252903c2e 100644
--- a/base/synchronization/waitable_event_win.cc
+++ b/base/synchronization/waitable_event_win.cc
@@ -11,7 +11,6 @@
 #include <algorithm>
 #include <utility>
 
-#include "base/debug/activity_tracker.h"
 #include "base/logging.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/threading/scoped_blocking_call.h"
@@ -94,8 +93,6 @@ size_t WaitableEvent::WaitMany(WaitableEvent** events, size_t count) {
   DCHECK(count) << "Cannot wait on no events";
   internal::ScopedBlockingCallWithBaseSyncPrimitives scoped_blocking_call(
       FROM_HERE, BlockingType::MAY_BLOCK);
-  // Record an event (the first) that this thread is blocking upon.
-  debug::ScopedEventWaitActivity event_activity(events[0]);
 
   HANDLE handles[MAXIMUM_WAIT_OBJECTS];
   CHECK_LE(count, static_cast<size_t>(MAXIMUM_WAIT_OBJECTS))
diff --git a/base/task/common/task_annotator.cc b/base/task/common/task_annotator.cc
index cb3295724e53b..67d27741610fd 100644
--- a/base/task/common/task_annotator.cc
+++ b/base/task/common/task_annotator.cc
@@ -9,7 +9,6 @@
 #include <array>
 
 #include "base/check_op.h"
-#include "base/debug/activity_tracker.h"
 #include "base/debug/alias.h"
 #include "base/hash/md5.h"
 #include "base/logging.h"
@@ -121,8 +120,6 @@ void TaskAnnotator::WillQueueTask(perfetto::StaticString trace_event_name,
 }
 
 void TaskAnnotator::RunTaskImpl(PendingTask& pending_task) {
-  debug::ScopedTaskRunActivity task_activity(pending_task);
-
   TRACE_HEAP_PROFILER_API_SCOPED_TASK_EXECUTION(
       pending_task.posted_from.file_name());
 
diff --git a/base/threading/platform_thread_posix.cc b/base/threading/platform_thread_posix.cc
index bd15adbcd2058..6743b440207cf 100644
--- a/base/threading/platform_thread_posix.cc
+++ b/base/threading/platform_thread_posix.cc
@@ -19,7 +19,6 @@
 
 #include "base/allocator/partition_allocator/partition_alloc_buildflags.h"
 #include "base/compiler_specific.h"
-#include "base/debug/activity_tracker.h"
 #include "base/lazy_instance.h"
 #include "base/logging.h"
 #include "base/memory/raw_ptr.h"
@@ -335,9 +334,6 @@ bool PlatformThread::CreateNonJoinableWithType(size_t stack_size,
 
 // static
 void PlatformThread::Join(PlatformThreadHandle thread_handle) {
-  // Record the event that this thread is blocking upon (for hang diagnosis).
-  base::debug::ScopedThreadJoinActivity thread_activity(&thread_handle);
-
   // Joining another thread may block the current thread for a long time, since
   // the thread referred to by |thread_handle| may still be running long-lived /
   // blocking tasks.
diff --git a/base/threading/platform_thread_win.cc b/base/threading/platform_thread_win.cc
index d603260b5a31b..e41758de5346d 100644
--- a/base/threading/platform_thread_win.cc
+++ b/base/threading/platform_thread_win.cc
@@ -9,7 +9,6 @@
 #include <string>
 
 #include "base/allocator/partition_allocator/partition_alloc_buildflags.h"
-#include "base/debug/activity_tracker.h"
 #include "base/debug/alias.h"
 #include "base/debug/crash_logging.h"
 #include "base/debug/profiler.h"
@@ -349,9 +348,6 @@ void PlatformThread::Join(PlatformThreadHandle thread_handle) {
   base::debug::Alias(&thread_id);
   base::debug::Alias(&last_error);
 
-  // Record the event that this thread is blocking upon (for hang diagnosis).
-  base::debug::ScopedThreadJoinActivity thread_activity(&thread_handle);
-
   base::internal::ScopedBlockingCallWithBaseSyncPrimitives scoped_blocking_call(
       FROM_HERE, base::BlockingType::MAY_BLOCK);
 
diff --git a/base/threading/scoped_blocking_call.cc b/base/threading/scoped_blocking_call.cc
index d1ab8942b523e..fa46f7b192c56 100644
--- a/base/threading/scoped_blocking_call.cc
+++ b/base/threading/scoped_blocking_call.cc
@@ -33,7 +33,6 @@ LazyInstance<ThreadLocalBoolean>::Leaky tls_construction_in_progress =
 ScopedBlockingCall::ScopedBlockingCall(const Location& from_here,
                                        BlockingType blocking_type)
     : UncheckedScopedBlockingCall(
-          from_here,
           blocking_type,
           UncheckedScopedBlockingCall::BlockingCallType::kRegular) {
 #if DCHECK_IS_ON()
@@ -63,7 +62,6 @@ ScopedBlockingCallWithBaseSyncPrimitives::
     ScopedBlockingCallWithBaseSyncPrimitives(const Location& from_here,
                                              BlockingType blocking_type)
     : UncheckedScopedBlockingCall(
-          from_here,
           blocking_type,
           UncheckedScopedBlockingCall::BlockingCallType::kBaseSyncPrimitives) {
 #if DCHECK_IS_ON()
diff --git a/base/threading/scoped_blocking_call_internal.cc b/base/threading/scoped_blocking_call_internal.cc
index 3128c90751485..e7addd47e44aa 100644
--- a/base/threading/scoped_blocking_call_internal.cc
+++ b/base/threading/scoped_blocking_call_internal.cc
@@ -27,10 +27,6 @@ namespace internal {
 
 namespace {
 
-// The first 8 characters of sha1 of "ScopedBlockingCall".
-// echo -n "ScopedBlockingCall" | sha1sum
-constexpr uint32_t kActivityTrackerId = 0x11be9915;
-
 LazyInstance<ThreadLocalPointer<BlockingObserver>>::Leaky
     tls_blocking_observer = LAZY_INSTANCE_INITIALIZER;
 
@@ -300,15 +296,13 @@ IOJankReportingCallback& IOJankMonitoringWindow::reporting_callback_storage() {
 }
 
 UncheckedScopedBlockingCall::UncheckedScopedBlockingCall(
-    const Location& from_here,
     BlockingType blocking_type,
     BlockingCallType blocking_call_type)
     : blocking_observer_(tls_blocking_observer.Get().Get()),
       previous_scoped_blocking_call_(tls_last_scoped_blocking_call.Get().Get()),
       is_will_block_(blocking_type == BlockingType::WILL_BLOCK ||
                      (previous_scoped_blocking_call_ &&
-                      previous_scoped_blocking_call_->is_will_block_)),
-      scoped_activity_(from_here, 0, kActivityTrackerId, 0) {
+                      previous_scoped_blocking_call_->is_will_block_)) {
   tls_last_scoped_blocking_call.Get().Set(this);
 
   // Only monitor non-nested ScopedBlockingCall(MAY_BLOCK) calls on foreground
@@ -335,15 +329,6 @@ UncheckedScopedBlockingCall::UncheckedScopedBlockingCall(
       blocking_observer_->BlockingTypeUpgraded();
     }
   }
-
-  if (scoped_activity_.IsRecorded()) {
-    // Also record the data for extended crash reporting.
-    const TimeTicks now = TimeTicks::Now();
-    auto& user_data = scoped_activity_.user_data();
-    user_data.SetUint("timestamp_us", static_cast<uint64_t>(
-                                          now.since_origin().InMicroseconds()));
-    user_data.SetUint("blocking_type", static_cast<uint64_t>(blocking_type));
-  }
 }
 
 UncheckedScopedBlockingCall::~UncheckedScopedBlockingCall() {
diff --git a/base/threading/scoped_blocking_call_internal.h b/base/threading/scoped_blocking_call_internal.h
index 99c7ab03214da..b50905f3c547e 100644
--- a/base/threading/scoped_blocking_call_internal.h
+++ b/base/threading/scoped_blocking_call_internal.h
@@ -6,7 +6,6 @@
 #define BASE_THREADING_SCOPED_BLOCKING_CALL_INTERNAL_H_
 
 #include "base/base_export.h"
-#include "base/debug/activity_tracker.h"
 #include "base/functional/callback_forward.h"
 #include "base/memory/raw_ptr.h"
 #include "base/memory/ref_counted.h"
@@ -176,9 +175,8 @@ class BASE_EXPORT UncheckedScopedBlockingCall {
     kBaseSyncPrimitives,
   };
 
-  explicit UncheckedScopedBlockingCall(const Location& from_here,
-                                       BlockingType blocking_type,
-                                       BlockingCallType blocking_call_type);
+  UncheckedScopedBlockingCall(BlockingType blocking_type,
+                              BlockingCallType blocking_call_type);
 
   UncheckedScopedBlockingCall(const UncheckedScopedBlockingCall&) = delete;
   UncheckedScopedBlockingCall& operator=(const UncheckedScopedBlockingCall&) =
@@ -196,8 +194,6 @@ class BASE_EXPORT UncheckedScopedBlockingCall {
   // ScopedBlockingCall was instantiated.
   const bool is_will_block_;
 
-  base::debug::ScopedActivity scoped_activity_;
-
   // Non-nullopt for non-nested blocking calls of type MAY_BLOCK on foreground
   // threads which we monitor for I/O jank.
   absl::optional<IOJankMonitoringWindow::ScopedMonitoredCall> monitored_call_;
diff --git a/chrome/browser/ash/app_list/search/local_images/annotation_storage.cc b/chrome/browser/ash/app_list/search/local_images/annotation_storage.cc
index 7725f0d73204c..ef555006b8a8a 100644
--- a/chrome/browser/ash/app_list/search/local_images/annotation_storage.cc
+++ b/chrome/browser/ash/app_list/search/local_images/annotation_storage.cc
@@ -9,6 +9,7 @@
 #include "base/logging.h"
 #include "base/memory/scoped_refptr.h"
 #include "base/strings/strcat.h"
+#include "base/strings/utf_string_conversions.h"
 #include "base/task/sequenced_task_runner.h"
 #include "base/task/thread_pool.h"
 #include "chrome/browser/ash/app_list/search/local_images/image_annotation_worker.h"
diff --git a/chrome/browser/extensions/api/downloads/downloads_api.cc b/chrome/browser/extensions/api/downloads/downloads_api.cc
index cac5d95690519..c7233b3f767b2 100644
--- a/chrome/browser/extensions/api/downloads/downloads_api.cc
+++ b/chrome/browser/extensions/api/downloads/downloads_api.cc
@@ -25,6 +25,7 @@
 #include "base/metrics/histogram_macros.h"
 #include "base/strings/string_split.h"
 #include "base/strings/string_util.h"
+#include "base/strings/utf_string_conversions.h"
 #include "base/task/cancelable_task_tracker.h"
 #include "base/task/current_thread.h"
 #include "base/task/single_thread_task_runner.h"
diff --git a/chrome/browser/fast_checkout/fast_checkout_personal_data_helper_impl.cc b/chrome/browser/fast_checkout/fast_checkout_personal_data_helper_impl.cc
index 64c8bab800968..b9bbe75d27ee5 100644
--- a/chrome/browser/fast_checkout/fast_checkout_personal_data_helper_impl.cc
+++ b/chrome/browser/fast_checkout/fast_checkout_personal_data_helper_impl.cc
@@ -4,6 +4,7 @@
 
 #include "chrome/browser/fast_checkout/fast_checkout_personal_data_helper_impl.h"
 
+#include "base/strings/utf_string_conversions.h"
 #include "chrome/browser/autofill/personal_data_manager_factory.h"
 #include "chrome/browser/profiles/profile.h"
 #include "components/autofill/core/browser/geo/autofill_country.h"
diff --git a/chrome/browser/media_galleries/win/mtp_device_operations_util.cc b/chrome/browser/media_galleries/win/mtp_device_operations_util.cc
index 1a708f5f5113a..9491a0111d6f9 100644
--- a/chrome/browser/media_galleries/win/mtp_device_operations_util.cc
+++ b/chrome/browser/media_galleries/win/mtp_device_operations_util.cc
@@ -17,6 +17,7 @@
 #include "base/logging.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/strings/string_util.h"
+#include "base/strings/utf_string_conversions.h"
 #include "base/threading/scoped_blocking_call.h"
 #include "base/time/time.h"
 #include "base/win/scoped_co_mem.h"
diff --git a/chrome/browser/metrics/thread_watcher_report_hang.cc b/chrome/browser/metrics/thread_watcher_report_hang.cc
index 023cd67510f07..4a1c51d8ab83d 100644
--- a/chrome/browser/metrics/thread_watcher_report_hang.cc
+++ b/chrome/browser/metrics/thread_watcher_report_hang.cc
@@ -4,10 +4,8 @@
 
 #include "chrome/browser/metrics/thread_watcher_report_hang.h"
 
-#include "base/debug/activity_tracker.h"
 #include "base/debug/debugger.h"
 #include "base/debug/dump_without_crashing.h"
-#include "base/time/time.h"
 #include "build/build_config.h"
 
 namespace metrics {
@@ -19,15 +17,6 @@ namespace metrics {
 NOINLINE NOT_TAIL_CALLED void ReportThreadHang() {
   [[maybe_unused]] volatile const char* inhibit_comdat = __func__;
 
-  // The first 8 characters of sha1 of "ReportThreadHang".
-  // echo -n "ReportThreadHang" | sha1sum
-  static constexpr uint32_t kActivityTrackerId = 0xceec103d;
-
-  base::debug::ScopedActivity scoped_activity(0, kActivityTrackerId, 0);
-  auto& user_data = scoped_activity.user_data();
-  const base::TimeTicks now = base::TimeTicks::Now();
-  user_data.SetUint("timestamp_us", now.since_origin().InMicroseconds());
-
 #if defined(NDEBUG)
   base::debug::DumpWithoutCrashing();
 #else
diff --git a/chrome/browser/process_singleton_win.cc b/chrome/browser/process_singleton_win.cc
index 046764b67c989..844b1814ba832 100644
--- a/chrome/browser/process_singleton_win.cc
+++ b/chrome/browser/process_singleton_win.cc
@@ -10,7 +10,6 @@
 
 #include "base/base_paths.h"
 #include "base/command_line.h"
-#include "base/debug/activity_tracker.h"
 #include "base/files/file_path.h"
 #include "base/functional/bind.h"
 #include "base/logging.h"
@@ -205,8 +204,6 @@ void TerminateProcessWithHistograms(const base::Process& process,
       internal::SendRemoteProcessInteractionResultHistogram(
           ProcessSingleton::TERMINATE_SUCCEEDED);
     }
-    base::debug::GlobalActivityTracker::RecordProcessExitIfEnabled(
-        process.Pid(), exit_code);
     UMA_HISTOGRAM_TIMES("Chrome.ProcessSingleton.TerminateProcessTime",
                         base::TimeTicks::Now() - start_time);
     base::UmaHistogramSparse(
diff --git a/chrome/browser/ui/ash/clipboard_util.cc b/chrome/browser/ui/ash/clipboard_util.cc
index c0b03e0157206..eb6526e215614 100644
--- a/chrome/browser/ui/ash/clipboard_util.cc
+++ b/chrome/browser/ui/ash/clipboard_util.cc
@@ -17,6 +17,7 @@
 #include "base/memory/scoped_refptr.h"
 #include "base/metrics/user_metrics.h"
 #include "base/strings/strcat.h"
+#include "base/strings/utf_string_conversions.h"
 #include "base/threading/scoped_blocking_call.h"
 #include "content/public/browser/browser_task_traits.h"
 #include "content/public/browser/browser_thread.h"
diff --git a/chrome/browser/ui/webui/side_panel/search_companion/search_companion_page_handler.cc b/chrome/browser/ui/webui/side_panel/search_companion/search_companion_page_handler.cc
index 578e0406c6627..b2ce6101dc4ea 100644
--- a/chrome/browser/ui/webui/side_panel/search_companion/search_companion_page_handler.cc
+++ b/chrome/browser/ui/webui/side_panel/search_companion/search_companion_page_handler.cc
@@ -4,6 +4,7 @@
 
 #include "chrome/browser/ui/webui/side_panel/search_companion/search_companion_page_handler.h"
 
+#include "base/strings/utf_string_conversions.h"
 #include "chrome/browser/autocomplete/zero_suggest_cache_service_factory.h"
 #include "chrome/browser/optimization_guide/optimization_guide_keyed_service.h"
 #include "chrome/browser/optimization_guide/optimization_guide_keyed_service_factory.h"
diff --git a/chrome/browser/web_applications/preinstalled_web_app_manager.cc b/chrome/browser/web_applications/preinstalled_web_app_manager.cc
index 1fb3cb95b47f0..50a0ad8e4f837 100644
--- a/chrome/browser/web_applications/preinstalled_web_app_manager.cc
+++ b/chrome/browser/web_applications/preinstalled_web_app_manager.cc
@@ -26,6 +26,7 @@
 #include "base/observer_list.h"
 #include "base/scoped_observation.h"
 #include "base/strings/strcat.h"
+#include "base/strings/utf_string_conversions.h"
 #include "base/task/sequenced_task_runner.h"
 #include "base/task/thread_pool.h"
 #include "base/threading/scoped_blocking_call.h"
diff --git a/chrome/common/printing/printer_capabilities.cc b/chrome/common/printing/printer_capabilities.cc
index 0a87f91e2f748..6f60ad5facba9 100644
--- a/chrome/common/printing/printer_capabilities.cc
+++ b/chrome/common/printing/printer_capabilities.cc
@@ -14,6 +14,7 @@
 #include "base/metrics/histogram_macros.h"
 #include "base/strings/strcat.h"
 #include "base/strings/string_piece.h"
+#include "base/strings/utf_string_conversions.h"
 #include "base/threading/scoped_blocking_call.h"
 #include "base/types/optional_util.h"
 #include "base/values.h"
diff --git a/chrome/services/util_win/av_products.cc b/chrome/services/util_win/av_products.cc
index 73986b1e0a9a8..e29f36d107ec1 100644
--- a/chrome/services/util_win/av_products.cc
+++ b/chrome/services/util_win/av_products.cc
@@ -26,6 +26,7 @@
 #include "base/strings/string_split.h"
 #include "base/strings/string_util.h"
 #include "base/strings/sys_string_conversions.h"
+#include "base/strings/utf_string_conversions.h"
 #include "base/threading/scoped_blocking_call.h"
 #include "base/win/com_init_util.h"
 #include "base/win/scoped_bstr.h"
diff --git a/components/autofill/core/browser/autofill_suggestion_generator.cc b/components/autofill/core/browser/autofill_suggestion_generator.cc
index e3c94d4c2e0f3..f447d1a28378c 100644
--- a/components/autofill/core/browser/autofill_suggestion_generator.cc
+++ b/components/autofill/core/browser/autofill_suggestion_generator.cc
@@ -10,6 +10,7 @@
 #include "base/feature_list.h"
 #include "base/guid.h"
 #include "base/strings/strcat.h"
+#include "base/strings/utf_string_conversions.h"
 #include "build/build_config.h"
 #include "components/autofill/core/browser/autofill_browser_util.h"
 #include "components/autofill/core/browser/autofill_client.h"
diff --git a/components/autofill/core/browser/payments/iban_save_manager.cc b/components/autofill/core/browser/payments/iban_save_manager.cc
index 5e73692b44eb3..c168339589574 100644
--- a/components/autofill/core/browser/payments/iban_save_manager.cc
+++ b/components/autofill/core/browser/payments/iban_save_manager.cc
@@ -4,6 +4,7 @@
 
 #include "components/autofill/core/browser/payments/iban_save_manager.h"
 
+#include "base/strings/utf_string_conversions.h"
 #include "components/autofill/core/browser/data_model/iban.h"
 #include "components/autofill/core/browser/metrics/autofill_metrics.h"
 #include "components/autofill/core/browser/metrics/payments/iban_metrics.h"
diff --git a/components/history/core/browser/url_database.cc b/components/history/core/browser/url_database.cc
index 35dac528505ec..bcb37bc0cd68b 100644
--- a/components/history/core/browser/url_database.cc
+++ b/components/history/core/browser/url_database.cc
@@ -9,6 +9,7 @@
 
 #include "base/i18n/case_conversion.h"
 #include "base/logging.h"
+#include "base/memory/ptr_util.h"
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
 #include "base/time/time.h"
diff --git a/components/metrics/machine_id_provider_win.cc b/components/metrics/machine_id_provider_win.cc
index 4e2ad726cc66a..c92ad1f2eabd0 100644
--- a/components/metrics/machine_id_provider_win.cc
+++ b/components/metrics/machine_id_provider_win.cc
@@ -10,6 +10,7 @@
 
 #include "base/base_paths.h"
 #include "base/files/file_path.h"
+#include "base/notreached.h"
 #include "base/path_service.h"
 #include "base/threading/scoped_blocking_call.h"
 #include "base/win/scoped_handle.h"
diff --git a/components/omnibox/browser/shortcuts_backend.cc b/components/omnibox/browser/shortcuts_backend.cc
index ed3ff4b9685c6..7518018f056ca 100644
--- a/components/omnibox/browser/shortcuts_backend.cc
+++ b/components/omnibox/browser/shortcuts_backend.cc
@@ -21,6 +21,7 @@
 #include "base/ranges/algorithm.h"
 #include "base/strings/strcat.h"
 #include "base/strings/string_util.h"
+#include "base/strings/utf_string_conversions.h"
 #include "base/task/single_thread_task_runner.h"
 #include "base/task/thread_pool.h"
 #include "components/omnibox/browser/autocomplete_input.h"
diff --git a/components/policy/core/common/policy_loader_common_unittest.cc b/components/policy/core/common/policy_loader_common_unittest.cc
index 3d6d62c5025ce..559bbc73bc0d2 100644
--- a/components/policy/core/common/policy_loader_common_unittest.cc
+++ b/components/policy/core/common/policy_loader_common_unittest.cc
@@ -5,7 +5,6 @@
 #include "components/policy/core/common/policy_loader_common.h"
 #include <algorithm>
 
-#include "base/debug/activity_tracker.h"
 #include "base/json/json_reader.h"
 #include "base/logging.h"
 #include "base/values.h"
diff --git a/components/power_bookmarks/storage/power_bookmark_backend.cc b/components/power_bookmarks/storage/power_bookmark_backend.cc
index 606bb50dff4d2..75a26d9b14f53 100644
--- a/components/power_bookmarks/storage/power_bookmark_backend.cc
+++ b/components/power_bookmarks/storage/power_bookmark_backend.cc
@@ -4,6 +4,7 @@
 
 #include "components/power_bookmarks/storage/power_bookmark_backend.h"
 
+#include "base/task/sequenced_task_runner.h"
 #include "components/power_bookmarks/common/power_bookmark_metrics.h"
 #include "components/power_bookmarks/common/search_params.h"
 #include "components/power_bookmarks/storage/empty_power_bookmark_database.h"
diff --git a/components/segmentation_platform/internal/database/ukm_database_backend.h b/components/segmentation_platform/internal/database/ukm_database_backend.h
index c2037785fa1f2..2cf9106398661 100644
--- a/components/segmentation_platform/internal/database/ukm_database_backend.h
+++ b/components/segmentation_platform/internal/database/ukm_database_backend.h
@@ -10,6 +10,7 @@
 #include <vector>
 
 #include "base/containers/flat_map.h"
+#include "base/files/file_path.h"
 #include "base/functional/callback.h"
 #include "base/memory/weak_ptr.h"
 #include "base/sequence_checker.h"
diff --git a/components/services/storage/shared_storage/shared_storage_database.cc b/components/services/storage/shared_storage/shared_storage_database.cc
index 1a6658ebb88ec..1b02cec4fb0f3 100644
--- a/components/services/storage/shared_storage/shared_storage_database.cc
+++ b/components/services/storage/shared_storage/shared_storage_database.cc
@@ -15,6 +15,7 @@
 
 #include "base/files/file_util.h"
 #include "base/metrics/histogram_functions.h"
+#include "base/strings/utf_string_conversions.h"
 #include "base/time/default_clock.h"
 #include "base/time/time.h"
 #include "components/services/storage/public/mojom/storage_usage_info.mojom.h"
diff --git a/components/services/storage/shared_storage/shared_storage_database.h b/components/services/storage/shared_storage/shared_storage_database.h
index 85ab57d74e55b..382bd8414c260 100644
--- a/components/services/storage/shared_storage/shared_storage_database.h
+++ b/components/services/storage/shared_storage/shared_storage_database.h
@@ -12,6 +12,7 @@
 #include <utility>
 #include <vector>
 
+#include "base/files/file_path.h"
 #include "base/functional/callback.h"
 #include "base/memory/raw_ptr.h"
 #include "base/memory/scoped_refptr.h"
diff --git a/components/services/storage/shared_storage/shared_storage_test_utils.cc b/components/services/storage/shared_storage/shared_storage_test_utils.cc
index bd450542e4e10..50ae9764cef38 100644
--- a/components/services/storage/shared_storage/shared_storage_test_utils.cc
+++ b/components/services/storage/shared_storage/shared_storage_test_utils.cc
@@ -17,6 +17,7 @@
 #include "base/strings/strcat.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/stringprintf.h"
+#include "base/strings/utf_string_conversions.h"
 #include "base/task/sequenced_task_runner.h"
 #include "components/services/storage/public/mojom/storage_usage_info.mojom.h"
 #include "sql/database.h"
diff --git a/content/app/content_main.cc b/content/app/content_main.cc
index 2c8b63c15cf44..a3cc7fabebb07 100644
--- a/content/app/content_main.cc
+++ b/content/app/content_main.cc
@@ -10,7 +10,6 @@
 #include "base/base_switches.h"
 #include "base/command_line.h"
 #include "base/compiler_specific.h"
-#include "base/debug/activity_tracker.h"
 #include "base/debug/debugger.h"
 #include "base/debug/stack_trace.h"
 #include "base/feature_list.h"
@@ -186,7 +185,6 @@ RunContentProcess(ContentMainParams params,
   base::PlatformThread::SetCurrentThreadType(base::ThreadType::kDefault);
 #endif
   int exit_code = -1;
-  base::debug::GlobalActivityTracker* tracker = nullptr;
 #if BUILDFLAG(IS_MAC)
   std::unique_ptr<base::mac::ScopedNSAutoreleasePool> autorelease_pool;
 #endif
@@ -298,15 +296,9 @@ RunContentProcess(ContentMainParams params,
 #endif
 
     ui::RegisterPathProvider();
-    tracker = base::debug::GlobalActivityTracker::Get();
     exit_code = content_main_runner->Initialize(std::move(params));
 
     if (exit_code >= 0) {
-      if (tracker) {
-        tracker->SetProcessPhase(
-            base::debug::GlobalActivityTracker::PROCESS_LAUNCH_FAILED);
-        tracker->process_data().SetInt("exit-code", exit_code);
-      }
       return exit_code;
     }
 
@@ -331,17 +323,6 @@ RunContentProcess(ContentMainParams params,
     CommonSubprocessInit();
   exit_code = content_main_runner->Run();
 
-  if (tracker) {
-    if (exit_code == 0) {
-      tracker->SetProcessPhaseIfEnabled(
-          base::debug::GlobalActivityTracker::PROCESS_EXITED_CLEANLY);
-    } else {
-      tracker->SetProcessPhaseIfEnabled(
-          base::debug::GlobalActivityTracker::PROCESS_EXITED_WITH_CODE);
-      tracker->process_data().SetInt("exit-code", exit_code);
-    }
-  }
-
 #if BUILDFLAG(IS_MAC)
   autorelease_pool.reset();
 #endif
diff --git a/mojo/core/channel_win.cc b/mojo/core/channel_win.cc
index b09eb8b4bfe02..f75273f92c209 100644
--- a/mojo/core/channel_win.cc
+++ b/mojo/core/channel_win.cc
@@ -13,11 +13,9 @@
 #include <tuple>
 
 #include "base/containers/queue.h"
-#include "base/debug/activity_tracker.h"
 #include "base/functional/bind.h"
 #include "base/location.h"
 #include "base/logging.h"
-#include "base/memory/raw_ptr.h"
 #include "base/memory/ref_counted.h"
 #include "base/message_loop/message_pump_for_io.h"
 #include "base/process/process_handle.h"
@@ -33,40 +31,18 @@ namespace core {
 
 namespace {
 
-std::atomic<uint64_t>* MaybeGetExtendedCrashAnnotation() {
-  base::debug::GlobalActivityTracker* activity_tracker =
-      base::debug::GlobalActivityTracker::Get();
-  if (!activity_tracker)
-    return nullptr;
-
-  static std::atomic<uint64_t>* sum = activity_tracker->process_data().SetUint(
-      "channel_win_total_outgoing_messages", 0u);
-
-  return sum;
-}
-
 class ChannelWinMessageQueue {
  public:
-  explicit ChannelWinMessageQueue()
-      : queue_size_sum_(MaybeGetExtendedCrashAnnotation()) {}
-  ~ChannelWinMessageQueue() {
-    if (queue_size_sum_) {
-      queue_size_sum_->fetch_sub(queue_.size(), std::memory_order_relaxed);
-    }
-  }
+  ChannelWinMessageQueue() = default;
+  ~ChannelWinMessageQueue() = default;
 
   void Append(Channel::MessagePtr message) {
     queue_.emplace_back(std::move(message));
-    if (queue_size_sum_)
-      ++(*queue_size_sum_);
   }
 
   Channel::Message* GetFirst() const { return queue_.front().get(); }
 
   Channel::MessagePtr TakeFirst() {
-    if (queue_size_sum_)
-      --(*queue_size_sum_);
-
     Channel::MessagePtr message = std::move(queue_.front());
     queue_.pop_front();
     return message;
@@ -76,7 +52,6 @@ class ChannelWinMessageQueue {
 
  private:
   base::circular_deque<Channel::MessagePtr> queue_;
-  raw_ptr<std::atomic<uint64_t>> queue_size_sum_ = nullptr;
 };
 
 class ChannelWin : public Channel,
diff --git a/sandbox/policy/win/sandbox_win.cc b/sandbox/policy/win/sandbox_win.cc
index ab87f74e3e409..fe0394187eae7 100644
--- a/sandbox/policy/win/sandbox_win.cc
+++ b/sandbox/policy/win/sandbox_win.cc
@@ -13,7 +13,6 @@
 #include <vector>
 
 #include "base/command_line.h"
-#include "base/debug/activity_tracker.h"
 #include "base/feature_list.h"
 #include "base/files/file_path.h"
 #include "base/files/file_util.h"
@@ -1048,13 +1047,6 @@ ResultCode SandboxWin::StartSandboxedProcess(
     return result;
   }
 
-  base::debug::GlobalActivityTracker* tracker =
-      base::debug::GlobalActivityTracker::Get();
-  if (tracker) {
-    tracker->RecordProcessLaunch(target.process_id(),
-                                 cmd_line.GetCommandLineString());
-  }
-
   delegate->PostSpawnTarget(target.process_handle());
   CHECK(ResumeThread(target.thread_handle()) != static_cast<DWORD>(-1));
 
diff --git a/sql/internal_api_token.h b/sql/internal_api_token.h
index 9335c5eb4543d..4560cf414dcd6 100644
--- a/sql/internal_api_token.h
+++ b/sql/internal_api_token.h
@@ -5,6 +5,10 @@
 #ifndef SQL_INTERNAL_API_TOKEN_H_
 #define SQL_INTERNAL_API_TOKEN_H_
 
+namespace base {
+class FilePath;
+}  // namespace base
+
 namespace sql {
 
 namespace test {
