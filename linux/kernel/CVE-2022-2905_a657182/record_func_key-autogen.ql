/**
 * @name linux-a657182a5c5150cdfacb6640aad1d2712571a409-record_func_key
 * @id cpp/linux/a657182a5c5150cdfacb6640aad1d2712571a409/record-func-key
 * @description linux-a657182a5c5150cdfacb6640aad1d2712571a409-kernel/bpf/verifier.c-record_func_key CVE-2022-2905
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vregs_7034, Variable vreg_7034, ExprStmt target_12, ExprStmt target_0) {
	target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vreg_7034
	and target_0.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_7034
	and target_12.getLocation().isBefore(target_0.getLocation())
}

predicate func_1(Variable vreg_7034, Variable vval_7037, IfStmt target_13, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vval_7037
	and target_1.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getTarget().getName()="value"
	and target_1.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="var_off"
	and target_1.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_7034
	and target_13.getLocation().isBefore(target_1.getLocation())
}

predicate func_3(Variable vmap_7035) {
exists(AssignExpr target_3 |
	target_3.getLValue().(VariableAccess).getType().hasName("u64")
	and target_3.getRValue().(PointerFieldAccess).getTarget().getName()="max_entries"
	and target_3.getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmap_7035)
}

predicate func_4(Function func) {
exists(LogicalAndExpr target_4 |
	target_4.getLeftOperand() instanceof FunctionCall
	and target_4.getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getType().hasName("u64")
	and target_4.getRightOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getType().hasName("u64")
	and target_4.getEnclosingFunction() = func)
}

predicate func_5(Variable vmap_7035, PointerFieldAccess target_5) {
	target_5.getTarget().getName()="max_entries"
	and target_5.getQualifier().(VariableAccess).getTarget()=vmap_7035
	and target_5.getParent().(SubExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_6(Variable vreg_7034, FunctionCall target_6) {
	target_6.getTarget().hasName("register_is_const")
	and target_6.getArgument(0).(VariableAccess).getTarget()=vreg_7034
}

predicate func_9(Function func, DeclStmt target_9) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_9
}

predicate func_10(Variable vmap_7035, Variable vrange_7036, AssignExpr target_10) {
	target_10.getLValue().(VariableAccess).getTarget()=vrange_7036
	and target_10.getRValue().(FunctionCall).getTarget().hasName("tnum_range")
	and target_10.getRValue().(FunctionCall).getArgument(0).(Literal).getValue()="0"
	and target_10.getRValue().(FunctionCall).getArgument(1).(SubExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="max_entries"
	and target_10.getRValue().(FunctionCall).getArgument(1).(SubExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmap_7035
	and target_10.getRValue().(FunctionCall).getArgument(1).(SubExpr).getRightOperand().(Literal).getValue()="1"
}

predicate func_11(Variable vreg_7034, Variable vrange_7036, BlockStmt target_14, LogicalOrExpr target_11) {
	target_11.getLeftOperand().(NotExpr).getOperand() instanceof FunctionCall
	and target_11.getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("tnum_in")
	and target_11.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrange_7036
	and target_11.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="var_off"
	and target_11.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_7034
	and target_11.getParent().(IfStmt).getThen()=target_14
}

predicate func_12(Function func, ExprStmt target_12) {
	target_12.getExpr() instanceof AssignExpr
	and target_12.getEnclosingFunction() = func
}

predicate func_13(Function func, IfStmt target_13) {
	target_13.getCondition().(VariableAccess).getTarget().getType().hasName("int")
	and target_13.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget().getType().hasName("int")
	and target_13.getEnclosingFunction() = func
}

predicate func_14(Function func, BlockStmt target_14) {
	target_14.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("bpf_map_key_store")
	and target_14.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("bpf_insn_aux_data *")
	and target_14.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(BinaryBitwiseOperation).getValue()="9223372036854775808"
	and target_14.getStmt(1).(ReturnStmt).getExpr().(Literal).getValue()="0"
	and target_14.getEnclosingFunction() = func
}

from Function func, Variable vregs_7034, Variable vreg_7034, Variable vmap_7035, Variable vrange_7036, Variable vval_7037, ExprStmt target_0, ExprStmt target_1, PointerFieldAccess target_5, FunctionCall target_6, DeclStmt target_9, AssignExpr target_10, LogicalOrExpr target_11, ExprStmt target_12, IfStmt target_13, BlockStmt target_14
where
func_0(vregs_7034, vreg_7034, target_12, target_0)
and func_1(vreg_7034, vval_7037, target_13, target_1)
and not func_3(vmap_7035)
and not func_4(func)
and func_5(vmap_7035, target_5)
and func_6(vreg_7034, target_6)
and func_9(func, target_9)
and func_10(vmap_7035, vrange_7036, target_10)
and func_11(vreg_7034, vrange_7036, target_14, target_11)
and func_12(func, target_12)
and func_13(func, target_13)
and func_14(func, target_14)
and vregs_7034.getType().hasName("bpf_reg_state *")
and vreg_7034.getType().hasName("bpf_reg_state *")
and vmap_7035.getType().hasName("bpf_map *")
and vrange_7036.getType().hasName("tnum")
and vval_7037.getType().hasName("u64")
and vregs_7034.(LocalVariable).getFunction() = func
and vreg_7034.(LocalVariable).getFunction() = func
and vmap_7035.(LocalVariable).getFunction() = func
and vrange_7036.(LocalVariable).getFunction() = func
and vval_7037.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
