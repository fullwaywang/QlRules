/**
 * @name linux-90cbed5247439a966b645b34eb0a2e037836ea8e-ipvlan_process_v6_outbound
 * @id cpp/linux/90cbed5247439a966b645b34eb0a2e037836ea8e/ipvlan-process-v6-outbound
 * @description linux-90cbed5247439a966b645b34eb0a2e037836ea8e-drivers/net/ipvlan/ipvlan_core.c-ipvlan_process_v6_outbound CVE-2023-3090
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_1, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(CommaExpr).getLeftOperand().(FunctionCall).getTarget().hasName("fortify_memset_chk")
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(CommaExpr).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("size_t")
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(CommaExpr).getLeftOperand().(FunctionCall).getArgument(1).(FunctionCall).getTarget().hasName("__builtin_object_size")
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(CommaExpr).getLeftOperand().(FunctionCall).getArgument(2).(FunctionCall).getTarget().hasName("__builtin_object_size")
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(CommaExpr).getRightOperand().(FunctionCall).getTarget().hasName("__builtin_memset")
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(CommaExpr).getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="cb"
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(CommaExpr).getRightOperand().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(CommaExpr).getRightOperand().(FunctionCall).getArgument(2).(VariableAccess).getType().hasName("size_t")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("ip6_local_out")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("net *")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="sk"
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("sk_buff *")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("sk_buff *")
	and target_1.getEnclosingFunction() = func
}

from Function func, ExprStmt target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
