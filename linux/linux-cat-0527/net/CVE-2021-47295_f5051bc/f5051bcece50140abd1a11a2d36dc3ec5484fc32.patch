commit f5051bcece50140abd1a11a2d36dc3ec5484fc32
Author: Pavel Skripkin <paskripkin@gmail.com>
Date:   Sat Jul 17 14:29:33 2021 +0300

    net: sched: fix memory leak in tcindex_partial_destroy_work
    
    Syzbot reported memory leak in tcindex_set_parms(). The problem was in
    non-freed perfect hash in tcindex_partial_destroy_work().
    
    In tcindex_set_parms() new tcindex_data is allocated and some fields from
    old one are copied to new one, but not the perfect hash. Since
    tcindex_partial_destroy_work() is the destroy function for old
    tcindex_data, we need to free perfect hash to avoid memory leak.
    
    Reported-and-tested-by: syzbot+f0bbb2287b8993d4fa74@syzkaller.appspotmail.com
    Fixes: 331b72922c5f ("net: sched: RCU cls_tcindex")
    Signed-off-by: Pavel Skripkin <paskripkin@gmail.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/sched/cls_tcindex.c b/net/sched/cls_tcindex.c
index 5b274534264c..e9a8a2c86bbd 100644
--- a/net/sched/cls_tcindex.c
+++ b/net/sched/cls_tcindex.c
@@ -278,6 +278,8 @@ static int tcindex_filter_result_init(struct tcindex_filter_result *r,
 			     TCA_TCINDEX_POLICE);
 }
 
+static void tcindex_free_perfect_hash(struct tcindex_data *cp);
+
 static void tcindex_partial_destroy_work(struct work_struct *work)
 {
 	struct tcindex_data *p = container_of(to_rcu_work(work),
@@ -285,7 +287,8 @@ static void tcindex_partial_destroy_work(struct work_struct *work)
 					      rwork);
 
 	rtnl_lock();
-	kfree(p->perfect);
+	if (p->perfect)
+		tcindex_free_perfect_hash(p);
 	kfree(p);
 	rtnl_unlock();
 }
