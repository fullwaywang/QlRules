/**
 * @name linux-8423f0b6d513b259fdab9c9bf4aaa6188d054c2d-snd_pcm_oss_sync
 * @id cpp/linux/8423f0b6d513b259fdab9c9bf4aaa6188d054c2d/snd-pcm-oss-sync
 * @description linux-8423f0b6d513b259fdab9c9bf4aaa6188d054c2d-snd_pcm_oss_sync CVE-2022-3303
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable verr_1662, Variable vsubstream_1664, EqualityOperation target_4, ReturnStmt target_5, ExprStmt target_2, ExprStmt target_6) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1662
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("snd_pcm_oss_make_ready_locked")
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsubstream_1664
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(4)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
		and target_5.getExpr().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation())
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable verr_1662, EqualityOperation target_4) {
	exists(IfStmt target_1 |
		target_1.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=verr_1662
		and target_1.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(5)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4)
}

predicate func_2(Variable verr_1662, Variable vsubstream_1664, EqualityOperation target_4, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1662
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("snd_pcm_oss_make_ready")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsubstream_1664
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_3(Variable verr_1662, EqualityOperation target_4, IfStmt target_3) {
		target_3.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=verr_1662
		and target_3.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
		and target_3.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=verr_1662
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_4(Variable vsubstream_1664, BlockStmt target_7, EqualityOperation target_4) {
		target_4.getAnOperand().(VariableAccess).getTarget()=vsubstream_1664
		and target_4.getAnOperand().(Literal).getValue()="0"
		and target_4.getParent().(IfStmt).getThen()=target_7
}

predicate func_5(Variable verr_1662, RelationalOperation target_8, ReturnStmt target_5) {
		target_5.getExpr().(VariableAccess).getTarget()=verr_1662
		and target_5.getParent().(IfStmt).getCondition()=target_8
}

predicate func_6(Variable verr_1662, Variable vsubstream_1664, ExprStmt target_6) {
		target_6.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1662
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("snd_pcm_oss_sync1")
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsubstream_1664
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="period_bytes"
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="oss"
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("snd_pcm_runtime *")
}

predicate func_7(Variable vsubstream_1664, BlockStmt target_7) {
		target_7.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("snd_pcm_runtime *")
		and target_7.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="runtime"
		and target_7.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsubstream_1664
		and target_7.getStmt(1).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("atomic_read")
		and target_7.getStmt(1).(IfStmt).getCondition().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="mmap_count"
		and target_7.getStmt(1).(IfStmt).getCondition().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsubstream_1664
}

predicate func_8(Variable verr_1662, ReturnStmt target_5, RelationalOperation target_8) {
		 (target_8 instanceof GTExpr or target_8 instanceof LTExpr)
		and target_8.getLesserOperand().(VariableAccess).getTarget()=verr_1662
		and target_8.getGreaterOperand().(Literal).getValue()="0"
		and target_8.getParent().(IfStmt).getThen()=target_5
}

from Function func, Variable verr_1662, Variable vsubstream_1664, ExprStmt target_2, IfStmt target_3, EqualityOperation target_4, ReturnStmt target_5, ExprStmt target_6, BlockStmt target_7, RelationalOperation target_8
where
not func_0(verr_1662, vsubstream_1664, target_4, target_5, target_2, target_6)
and not func_1(verr_1662, target_4)
and func_2(verr_1662, vsubstream_1664, target_4, target_2)
and func_3(verr_1662, target_4, target_3)
and func_4(vsubstream_1664, target_7, target_4)
and func_5(verr_1662, target_8, target_5)
and func_6(verr_1662, vsubstream_1664, target_6)
and func_7(vsubstream_1664, target_7)
and func_8(verr_1662, target_5, target_8)
and verr_1662.getType().hasName("int")
and vsubstream_1664.getType().hasName("snd_pcm_substream *")
and verr_1662.(LocalVariable).getFunction() = func
and vsubstream_1664.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
