/**
 * @name linux-be8de49bea505e7777a69ef63d60e02ac1712683-cpu_set_bug_bits
 * @id cpp/linux/be8de49bea505e7777a69ef63d60e02ac1712683/cpu-set-bug-bits
 * @description linux-be8de49bea505e7777a69ef63d60e02ac1712683-arch/x86/kernel/cpu/common.c-cpu_set_bug_bits CVE-2022-27672
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vcpu_caps_set, Variable vcpu_vuln_blacklist, IfStmt target_1, ExprStmt target_2, ExprStmt target_3, LogicalOrExpr target_4, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("cpu_matches")
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vcpu_vuln_blacklist
	and target_0.getCondition().(FunctionCall).getArgument(1).(BinaryBitwiseOperation).getValue()="16"
	and target_0.getThen().(DoStmt).getCondition().(Literal).getValue()="0"
	and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("set_bit")
	and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddExpr).getValue()="669"
	and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
	and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("set_bit")
	and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddExpr).getValue()="669"
	and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcpu_caps_set
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
	and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
	and target_4.getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Function func, IfStmt target_1) {
	target_1.getCondition().(FunctionCall).getTarget().hasName("cpu_matches")
	and target_1.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType() instanceof ArrayType
	and target_1.getCondition().(FunctionCall).getArgument(1).(BinaryBitwiseOperation).getValue()="2"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vcpu_caps_set, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("set_bit")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddExpr).getValue()="668"
	and target_2.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcpu_caps_set
}

predicate func_3(Variable vcpu_caps_set, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("set_bit")
	and target_3.getExpr().(FunctionCall).getArgument(0).(AddExpr).getValue()="654"
	and target_3.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcpu_caps_set
}

predicate func_4(Variable vcpu_vuln_blacklist, LogicalOrExpr target_4) {
	target_4.getLeftOperand().(FunctionCall).getTarget().hasName("cpu_matches")
	and target_4.getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vcpu_vuln_blacklist
	and target_4.getLeftOperand().(FunctionCall).getArgument(1).(BinaryBitwiseOperation).getValue()="8"
	and target_4.getRightOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("u64")
	and target_4.getRightOperand().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="4"
}

from Function func, Variable vcpu_caps_set, Variable vcpu_vuln_blacklist, IfStmt target_1, ExprStmt target_2, ExprStmt target_3, LogicalOrExpr target_4
where
not func_0(vcpu_caps_set, vcpu_vuln_blacklist, target_1, target_2, target_3, target_4, func)
and func_1(func, target_1)
and func_2(vcpu_caps_set, target_2)
and func_3(vcpu_caps_set, target_3)
and func_4(vcpu_vuln_blacklist, target_4)
and vcpu_caps_set.getType() instanceof ArrayType
and vcpu_vuln_blacklist.getType() instanceof ArrayType
and not vcpu_caps_set.getParentScope+() = func
and not vcpu_vuln_blacklist.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
