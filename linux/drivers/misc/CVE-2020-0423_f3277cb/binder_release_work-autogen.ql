/**
 * @name linux-f3277cbfba763cd2826396521b9296de67cf1bbc-binder_release_work
 * @id cpp/linux/f3277cbfba763cd2826396521b9296de67cf1bbc/binder-release-work
 * @description linux-f3277cbfba763cd2826396521b9296de67cf1bbc-binder_release_work CVE-2020-0423
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vlist_4585, Variable vw_4587, Parameter vproc_4584, FunctionCall target_0) {
		target_0.getTarget().hasName("binder_dequeue_work_head")
		and not target_0.getTarget().hasName("binder_dequeue_work_head_ilocked")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vproc_4584
		and target_0.getArgument(1).(VariableAccess).getTarget()=vlist_4585
		and target_0.getParent().(AssignExpr).getRValue() = target_0
		and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vw_4587
}

predicate func_1(Parameter vproc_4584) {
	exists(FunctionCall target_1 |
		target_1.getTarget().hasName("_binder_inner_proc_lock")
		and target_1.getArgument(0).(VariableAccess).getTarget()=vproc_4584
		and target_1.getArgument(1) instanceof Literal)
}

predicate func_2(Parameter vlist_4585, Variable vw_4587, NotExpr target_14) {
	exists(ExprStmt target_2 |
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vw_4587
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("binder_dequeue_work_head_ilocked")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vlist_4585
		and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_14.getOperand().(VariableAccess).getLocation()))
}

predicate func_3(Variable vw_4587) {
	exists(ExprStmt target_3 |
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("binder_work_type")
		and target_3.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(VariableAccess).getTarget()=vw_4587
		and target_3.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getThen().(PointerFieldAccess).getTarget().getName()="type"
		and target_3.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getThen().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vw_4587
		and target_3.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getElse().(Literal).getValue()="0")
}

predicate func_4(Parameter vproc_4584) {
	exists(ExprStmt target_4 |
		target_4.getExpr().(FunctionCall).getTarget().hasName("_binder_inner_proc_unlock")
		and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vproc_4584
		and target_4.getExpr().(FunctionCall).getArgument(1) instanceof Literal)
}

predicate func_8(PointerFieldAccess target_9, Function func) {
	exists(BreakStmt target_8 |
		target_8.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_9
		and target_8.getEnclosingFunction() = func)
}

predicate func_9(Variable vw_4587, PointerFieldAccess target_9) {
		target_9.getTarget().getName()="type"
		and target_9.getQualifier().(VariableAccess).getTarget()=vw_4587
}

predicate func_10(Parameter vproc_4584, VariableAccess target_10) {
		target_10.getTarget()=vproc_4584
		and target_10.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_11(Variable vw_4587, VariableAccess target_11) {
		target_11.getTarget()=vw_4587
		and target_11.getParent().(PointerFieldAccess).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("printk")
		and target_11.getParent().(PointerFieldAccess).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="3binder: unexpected work type, %d, not freed\n"
		and target_11.getParent().(PointerFieldAccess).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="type"
}

predicate func_12(Variable vw_4587, PointerFieldAccess target_12) {
		target_12.getTarget().getName()="type"
		and target_12.getQualifier().(VariableAccess).getTarget()=vw_4587
}

predicate func_14(Variable vw_4587, NotExpr target_14) {
		target_14.getOperand().(VariableAccess).getTarget()=vw_4587
}

from Function func, Parameter vlist_4585, Variable vw_4587, Parameter vproc_4584, FunctionCall target_0, PointerFieldAccess target_9, VariableAccess target_10, VariableAccess target_11, PointerFieldAccess target_12, NotExpr target_14
where
func_0(vlist_4585, vw_4587, vproc_4584, target_0)
and not func_1(vproc_4584)
and not func_2(vlist_4585, vw_4587, target_14)
and not func_3(vw_4587)
and not func_4(vproc_4584)
and not func_8(target_9, func)
and func_9(vw_4587, target_9)
and func_10(vproc_4584, target_10)
and func_11(vw_4587, target_11)
and func_12(vw_4587, target_12)
and func_14(vw_4587, target_14)
and vlist_4585.getType().hasName("list_head *")
and vw_4587.getType().hasName("binder_work *")
and vproc_4584.getType().hasName("binder_proc *")
and vlist_4585.getFunction() = func
and vw_4587.(LocalVariable).getFunction() = func
and vproc_4584.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
