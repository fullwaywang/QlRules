/**
 * @name chromium-17f73200c066158330542c19d521c517586533a2-media__VideoFrame__WrapExternalDataWithLayout_
 * @id cpp/chromium/17f73200c066158330542c19d521c517586533a2/mediavideoframewrapexternaldatawithlayout
 * @description chromium-17f73200c066158330542c19d521c517586533a2-media/mojo/mojom/video_frame_mojom_traits.cc-media__VideoFrame__WrapExternalDataWithLayout_ CVE-2023-1532
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vLOGGING_ERROR, Literal target_0) {
	exists(ConstructorCall obj_0 | obj_0=target_0.getParent() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getParent() |
			exists(ConstructorCall obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getArgument(0).(StringLiteral).getValue()="../../media/base/video_frame.cc"
				and obj_2.getArgument(2).(VariableAccess).getTarget()=vLOGGING_ERROR
			)
		)
	)
	and target_0.getValue()="453"
	and not target_0.getValue()="454"
}

predicate func_1(Function func, StringLiteral target_1) {
	target_1.getValue()=" Invalid config."
	and not target_1.getValue()="Invalid config: "
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vLOGGING_ERROR, FunctionCall target_2) {
	target_2.getTarget().hasName("ShouldCreateLogMessage")
	and not target_2.getTarget().hasName("FitsInContiguousBufferOfSize")
	and target_2.getArgument(0).(VariableAccess).getTarget()=vLOGGING_ERROR
}

predicate func_3(Parameter vdata_size_447, Parameter vlayout_443, BlockStmt target_13) {
exists(LogicalOrExpr target_3 |
	exists(NotExpr obj_0 | obj_0=target_3.getRightOperand() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().hasName("FitsInContiguousBufferOfSize")
			and obj_1.getQualifier().(VariableAccess).getTarget()=vlayout_443
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vdata_size_447
		)
	)
	and target_3.getLeftOperand() instanceof NotExpr
	and target_3.getParent().(IfStmt).getThen()=target_13
)
}

predicate func_4(Parameter vvisible_rect_444, Parameter vnatural_size_445, Variable vstorage_type_449, Parameter vlayout_443, BlockStmt target_13, NotExpr target_4) {
	exists(FunctionCall obj_0 | obj_0=target_4.getOperand() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().hasName("format")
			and obj_1.getQualifier().(VariableAccess).getTarget()=vlayout_443
		)
		and exists(FunctionCall obj_2 | obj_2=obj_0.getArgument(2) |
			obj_2.getTarget().hasName("coded_size")
			and obj_2.getQualifier().(VariableAccess).getTarget()=vlayout_443
		)
		and obj_0.getTarget().hasName("IsValidConfig")
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vstorage_type_449
		and obj_0.getArgument(3).(VariableAccess).getTarget()=vvisible_rect_444
		and obj_0.getArgument(4).(VariableAccess).getTarget()=vnatural_size_445
	)
	and target_4.getParent().(IfStmt).getThen()=target_13
}

predicate func_5(Parameter vlayout_443, VariableAccess target_5) {
	target_5.getTarget()=vlayout_443
}

predicate func_6(Parameter vdata_size_447, VariableAccess target_6) {
	target_6.getTarget()=vdata_size_447
	and target_6.getParent().(FunctionCall).getParent().(FunctionCall).getArgument(0) instanceof FunctionCall
}

predicate func_7(Variable vLOGGING_ERROR, Variable v__func__, FunctionCall target_7) {
	exists(FunctionCall obj_0 | obj_0=target_7.getArgument(0) |
		exists(ConstructorCall obj_1 | obj_1=obj_0.getQualifier() |
			obj_1.getArgument(0).(StringLiteral).getValue()="../../media/base/video_frame.cc"
			and obj_1.getArgument(1) instanceof Literal
			and obj_1.getArgument(2).(VariableAccess).getTarget()=vLOGGING_ERROR
		)
		and obj_0.getTarget().hasName("stream")
	)
	and exists(FunctionCall obj_2 | obj_2=target_7.getParent() |
		exists(FunctionCall obj_3 | obj_3=obj_2.getParent() |
			exists(FunctionCall obj_4 | obj_4=obj_3.getArgument(0) |
				obj_4.getTarget().hasName("operator<<")
				and obj_4.getArgument(1) instanceof StringLiteral
			)
		)
	)
	and target_7.getTarget().hasName("operator<<")
	and target_7.getArgument(1).(VariableAccess).getTarget()=v__func__
}

predicate func_8(Function func, DeclStmt target_8) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_8
}

predicate func_9(Function func, DeclStmt target_9) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_9
}

predicate func_10(Parameter vdata_size_447, Variable vrequired_size_461, Function func, IfStmt target_10) {
	exists(RelationalOperation obj_0 | obj_0=target_10.getCondition() |
		obj_0.getLesserOperand().(VariableAccess).getTarget()=vdata_size_447
		and obj_0.getGreaterOperand().(VariableAccess).getTarget()=vrequired_size_461
	)
	and exists(BlockStmt obj_1 | obj_1=target_10.getThen() |
		exists(ExprStmt obj_2 | obj_2=obj_1.getStmt(0) |
			exists(ConditionalExpr obj_3 | obj_3=obj_2.getExpr() |
				exists(FunctionCall obj_4 | obj_4=obj_3.getElse() |
					exists(FunctionCall obj_5 | obj_5=obj_4.getArgument(0) |
						obj_5.getTarget().hasName("operator<<")
						and obj_5.getArgument(0).(FunctionCall).getTarget().hasName("operator<<")
						and obj_5.getArgument(1).(FunctionCall).getTarget().hasName("ConfigToString")
					)
					and obj_4.getTarget().hasName("operator&")
					and obj_4.getQualifier().(Literal).getValue()="0"
				)
				and obj_3.getCondition().(NotExpr).getOperand() instanceof FunctionCall
				and obj_3.getThen().(Literal).getValue()="0"
			)
		)
		and obj_1.getStmt(1).(ReturnStmt).getExpr().(ConstructorCall).getArgument(0).(Literal).getValue()="0"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_10
}

/*predicate func_11(Parameter vvisible_rect_444, Parameter vnatural_size_445, Variable vstorage_type_449, Variable vrequired_size_461, Parameter vlayout_443, RelationalOperation target_14, ExprStmt target_11) {
	exists(ConditionalExpr obj_0 | obj_0=target_11.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getElse() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getArgument(0) |
				exists(FunctionCall obj_3 | obj_3=obj_2.getArgument(0) |
					exists(FunctionCall obj_4 | obj_4=obj_3.getArgument(0) |
						obj_4.getTarget().hasName("operator<<")
						and obj_4.getQualifier().(FunctionCall).getTarget().hasName("operator<<")
						and obj_4.getArgument(0).(VariableAccess).getTarget()=vrequired_size_461
					)
					and obj_3.getTarget().hasName("operator<<")
					and obj_3.getArgument(1).(StringLiteral).getValue()=" bytes are required."
				)
				and exists(FunctionCall obj_5 | obj_5=obj_2.getArgument(1) |
					exists(FunctionCall obj_6 | obj_6=obj_5.getArgument(0) |
						obj_6.getTarget().hasName("format")
						and obj_6.getQualifier().(VariableAccess).getTarget()=vlayout_443
					)
					and exists(FunctionCall obj_7 | obj_7=obj_5.getArgument(2) |
						obj_7.getTarget().hasName("coded_size")
						and obj_7.getQualifier().(VariableAccess).getTarget()=vlayout_443
					)
					and obj_5.getTarget().hasName("ConfigToString")
					and obj_5.getArgument(1).(VariableAccess).getTarget()=vstorage_type_449
					and obj_5.getArgument(3).(VariableAccess).getTarget()=vvisible_rect_444
					and obj_5.getArgument(4).(VariableAccess).getTarget()=vnatural_size_445
				)
				and obj_2.getTarget().hasName("operator<<")
			)
			and obj_1.getTarget().hasName("operator&")
			and obj_1.getQualifier().(Literal).getValue()="0"
		)
		and obj_0.getCondition().(NotExpr).getOperand() instanceof FunctionCall
		and obj_0.getThen().(Literal).getValue()="0"
	)
	and target_11.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_14
}

*/
/*predicate func_12(RelationalOperation target_14, Function func, ReturnStmt target_12) {
	target_12.getExpr().(ConstructorCall).getArgument(0).(Literal).getValue()="0"
	and target_12.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_14
	and target_12.getEnclosingFunction() = func
}

*/
predicate func_13(Parameter vvisible_rect_444, Parameter vnatural_size_445, Variable vstorage_type_449, Variable vLOGGING_ERROR, BlockStmt target_13) {
	exists(ExprStmt obj_0 | obj_0=target_13.getStmt(0) |
		exists(ConditionalExpr obj_1 | obj_1=obj_0.getExpr() |
			exists(NotExpr obj_2 | obj_2=obj_1.getCondition() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getOperand() |
					obj_3.getTarget().hasName("ShouldCreateLogMessage")
					and obj_3.getArgument(0).(VariableAccess).getTarget()=vLOGGING_ERROR
				)
			)
			and exists(FunctionCall obj_4 | obj_4=obj_1.getElse() |
				exists(FunctionCall obj_5 | obj_5=obj_4.getArgument(0) |
					exists(FunctionCall obj_6 | obj_6=obj_5.getArgument(0) |
						obj_6.getTarget().hasName("operator<<")
						and obj_6.getArgument(0) instanceof FunctionCall
						and obj_6.getArgument(1) instanceof StringLiteral
					)
					and exists(FunctionCall obj_7 | obj_7=obj_5.getArgument(1) |
						obj_7.getTarget().hasName("ConfigToString")
						and obj_7.getArgument(0).(FunctionCall).getTarget().hasName("format")
						and obj_7.getArgument(1).(VariableAccess).getTarget()=vstorage_type_449
						and obj_7.getArgument(2).(FunctionCall).getTarget().hasName("coded_size")
						and obj_7.getArgument(3).(VariableAccess).getTarget()=vvisible_rect_444
						and obj_7.getArgument(4).(VariableAccess).getTarget()=vnatural_size_445
					)
					and obj_5.getTarget().hasName("operator<<")
				)
				and obj_4.getTarget().hasName("operator&")
				and obj_4.getQualifier().(Literal).getValue()="0"
			)
			and obj_1.getThen().(Literal).getValue()="0"
		)
	)
}

predicate func_14(Parameter vdata_size_447, Variable vrequired_size_461, RelationalOperation target_14) {
	 (target_14 instanceof GTExpr or target_14 instanceof LTExpr)
	and target_14.getLesserOperand().(VariableAccess).getTarget()=vdata_size_447
	and target_14.getGreaterOperand().(VariableAccess).getTarget()=vrequired_size_461
}

from Function func, Parameter vvisible_rect_444, Parameter vnatural_size_445, Parameter vdata_size_447, Variable vstorage_type_449, Variable vLOGGING_ERROR, Variable v__func__, Variable vrequired_size_461, Parameter vlayout_443, Literal target_0, StringLiteral target_1, FunctionCall target_2, NotExpr target_4, VariableAccess target_5, VariableAccess target_6, FunctionCall target_7, DeclStmt target_8, DeclStmt target_9, IfStmt target_10, BlockStmt target_13, RelationalOperation target_14
where
func_0(vLOGGING_ERROR, target_0)
and func_1(func, target_1)
and func_2(vLOGGING_ERROR, target_2)
and not func_3(vdata_size_447, vlayout_443, target_13)
and func_4(vvisible_rect_444, vnatural_size_445, vstorage_type_449, vlayout_443, target_13, target_4)
and func_5(vlayout_443, target_5)
and func_6(vdata_size_447, target_6)
and func_7(vLOGGING_ERROR, v__func__, target_7)
and func_8(func, target_8)
and func_9(func, target_9)
and func_10(vdata_size_447, vrequired_size_461, func, target_10)
and func_13(vvisible_rect_444, vnatural_size_445, vstorage_type_449, vLOGGING_ERROR, target_13)
and func_14(vdata_size_447, vrequired_size_461, target_14)
and vvisible_rect_444.getType().hasName("const Rect &")
and vnatural_size_445.getType().hasName("const Size &")
and vdata_size_447.getType().hasName("size_t")
and vstorage_type_449.getType().hasName("StorageType")
and vLOGGING_ERROR.getType().hasName("LogSeverity")
and v__func__.getType() instanceof ArrayType
and vrequired_size_461.getType().hasName("const size_t")
and vlayout_443.getType().hasName("const VideoFrameLayout &")
and vvisible_rect_444.getFunction() = func
and vnatural_size_445.getFunction() = func
and vdata_size_447.getFunction() = func
and vstorage_type_449.(LocalVariable).getFunction() = func
and not vLOGGING_ERROR.getParentScope+() = func
and not v__func__.getParentScope+() = func
and vrequired_size_461.(LocalVariable).getFunction() = func
and vlayout_443.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
