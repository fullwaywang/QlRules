/**
 * @name openssl-5f69f5c65e483928c4b28ed16af6e5742929f1ee-evp_cipher_init_internal
 * @id cpp/openssl/5f69f5c65e483928c4b28ed16af6e5742929f1ee/evp-cipher-init-internal
 * @description openssl-5f69f5c65e483928c4b28ed16af6e5742929f1ee-crypto/evp/evp_enc.c-evp_cipher_init_internal CVE-2023-5363
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vparams_93, VariableCall target_1, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getTarget()=vparams_93
		and target_0.getCondition().(EqualityOperation).getAnOperand().(Literal).getValue()="0"
		and target_0.getThen().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("const OSSL_PARAM *")
		and target_0.getThen().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("OSSL_PARAM_locate_const")
		and target_0.getThen().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vparams_93
		and target_0.getThen().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(StringLiteral).getValue()="keylen"
		and target_0.getThen().(BlockStmt).getStmt(4).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getType().hasName("const OSSL_PARAM *")
		and target_0.getThen().(BlockStmt).getStmt(4).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(Literal).getValue()="0"
		and target_0.getThen().(BlockStmt).getStmt(4).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("memcpy")
		and target_0.getThen().(BlockStmt).getStmt(4).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PostfixIncrExpr).getOperand().(VariableAccess).getType().hasName("OSSL_PARAM *")
		and target_0.getThen().(BlockStmt).getStmt(4).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getType().hasName("const OSSL_PARAM *")
		and target_0.getThen().(BlockStmt).getStmt(4).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(SizeofExprOperator).getValue()="40"
		and target_0.getThen().(BlockStmt).getStmt(5).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("const OSSL_PARAM *")
		and target_0.getThen().(BlockStmt).getStmt(5).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("OSSL_PARAM_locate_const")
		and target_0.getThen().(BlockStmt).getStmt(5).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vparams_93
		and target_0.getThen().(BlockStmt).getStmt(5).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(StringLiteral).getValue()="ivlen"
		and target_0.getThen().(BlockStmt).getStmt(6).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getType().hasName("const OSSL_PARAM *")
		and target_0.getThen().(BlockStmt).getStmt(6).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(Literal).getValue()="0"
		and target_0.getThen().(BlockStmt).getStmt(6).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("memcpy")
		and target_0.getThen().(BlockStmt).getStmt(6).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PostfixIncrExpr).getOperand().(VariableAccess).getType().hasName("OSSL_PARAM *")
		and target_0.getThen().(BlockStmt).getStmt(6).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getType().hasName("const OSSL_PARAM *")
		and target_0.getThen().(BlockStmt).getStmt(6).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(SizeofExprOperator).getValue()="40"
		and target_0.getThen().(BlockStmt).getStmt(7).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getType().hasName("OSSL_PARAM *")
		and target_0.getThen().(BlockStmt).getStmt(7).(IfStmt).getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getType().hasName("OSSL_PARAM[3]")
		and target_0.getThen().(BlockStmt).getStmt(7).(IfStmt).getThen().(BlockStmt).getStmt(0).(IfStmt).getCondition().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("EVP_CIPHER_CTX_set_params")
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_0.getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getLocation().isBefore(target_1.getArgument(5).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vparams_93, VariableCall target_1) {
		target_1.getExpr().(PointerFieldAccess).getTarget().getName()="einit"
		and target_1.getExpr().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="cipher"
		and target_1.getExpr().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("EVP_CIPHER_CTX *")
		and target_1.getArgument(0).(PointerFieldAccess).getTarget().getName()="algctx"
		and target_1.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("EVP_CIPHER_CTX *")
		and target_1.getArgument(1).(VariableAccess).getTarget().getType().hasName("const unsigned char *")
		and target_1.getArgument(2).(ConditionalExpr).getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("const unsigned char *")
		and target_1.getArgument(2).(ConditionalExpr).getCondition().(EqualityOperation).getAnOperand().(Literal).getValue()="0"
		and target_1.getArgument(2).(ConditionalExpr).getThen().(Literal).getValue()="0"
		and target_1.getArgument(2).(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("EVP_CIPHER_CTX_get_key_length")
		and target_1.getArgument(2).(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("EVP_CIPHER_CTX *")
		and target_1.getArgument(3).(VariableAccess).getTarget().getType().hasName("const unsigned char *")
		and target_1.getArgument(4).(ConditionalExpr).getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("const unsigned char *")
		and target_1.getArgument(4).(ConditionalExpr).getCondition().(EqualityOperation).getAnOperand().(Literal).getValue()="0"
		and target_1.getArgument(4).(ConditionalExpr).getThen().(Literal).getValue()="0"
		and target_1.getArgument(4).(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("EVP_CIPHER_CTX_get_iv_length")
		and target_1.getArgument(4).(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("EVP_CIPHER_CTX *")
		and target_1.getArgument(5).(VariableAccess).getTarget()=vparams_93
}

from Function func, Parameter vparams_93, VariableCall target_1
where
not func_0(vparams_93, target_1, func)
and func_1(vparams_93, target_1)
and vparams_93.getType().hasName("const OSSL_PARAM[]")
and vparams_93.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
