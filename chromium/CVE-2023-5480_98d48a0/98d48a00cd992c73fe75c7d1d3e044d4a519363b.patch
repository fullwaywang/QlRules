commit 98d48a00cd992c73fe75c7d1d3e044d4a519363b	98d48a00cd992c73fe75c7d1d3e044d4a519363b
Author: Stephen McGruer <smcgruer@chromium.org>
Date:   Thu Nov 2 16:24:14 2023 +0000

    [PaymentHandler] Require Link header when fetching payment method manifests
    
    This is a manual cherry-pick of https://crrev.com/8eddc1354,
    modified for the M114 LTS branch.
    
    Bug: 1492698
    Change-Id: I21d18d1ef0811d78208276e6ae8d546a9dc10473
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4985681
    Reviewed-by: Rouslan Solomakhin <rouslan@chromium.org>
    Commit-Queue: Zakhar Voit <voit@google.com>
    Reviewed-by: Victor Gabriel Savu <vsavu@google.com>
    Cr-Commit-Position: refs/branch-heads/5735@{#1636}
    Cr-Branched-From: 2f562e4ddbaf79a3f3cb338b4d1bd4398d49eb67-refs/heads/main@{#1135570}

diff --git a/chrome/browser/ui/views/payments/payment_request_can_make_payment_metrics_browsertest.cc b/chrome/browser/ui/views/payments/payment_request_can_make_payment_metrics_browsertest.cc
index ec8bcfc2022b1..4f424dac89070 100644
--- a/chrome/browser/ui/views/payments/payment_request_can_make_payment_metrics_browsertest.cc
+++ b/chrome/browser/ui/views/payments/payment_request_can_make_payment_metrics_browsertest.cc
@@ -39,7 +39,7 @@ class PaymentRequestCanMakePaymentMetricsTest
 
     // Choosing nickpay for its JIT installation support.
     nickpay_server_.ServeFilesFromSourceDirectory(
-        "components/test/data/payments/nickpay.test/");
+        "components/test/data/payments/");
 
     ASSERT_TRUE(nickpay_server_.Start());
   }
@@ -205,9 +205,9 @@ IN_PROC_BROWSER_TEST_F(PaymentRequestCanMakePaymentMetricsTest,
   base::HistogramTester histogram_tester;
 
   std::string nickpay_method_name =
-      nickpay_server_.GetURL("nickpay.test", "/pay").spec();
+      nickpay_server_.GetURL("nickpay.test", "/nickpay.test/pay").spec();
   std::string nickpay2_method_name =
-      nickpay_server_.GetURL("nickpay2.test", "/pay").spec();
+      nickpay_server_.GetURL("nickpay2.test", "/nickpay.test/pay").spec();
 
   ResetEventWaiterForSequence({DialogEvent::CAN_MAKE_PAYMENT_CALLED,
                                DialogEvent::CAN_MAKE_PAYMENT_RETURNED,
@@ -267,9 +267,9 @@ IN_PROC_BROWSER_TEST_F(PaymentRequestCanMakePaymentMetricsTest,
   base::HistogramTester histogram_tester;
 
   std::string nickpay_method_name =
-      nickpay_server_.GetURL("nickpay.test", "/pay").spec();
+      nickpay_server_.GetURL("nickpay.test", "/nickpay.test/pay").spec();
   std::string nickpay2_method_name =
-      nickpay_server_.GetURL("nickpay2.test", "/pay").spec();
+      nickpay_server_.GetURL("nickpay2.test", "/nickpay.test/pay").spec();
 
   ResetEventWaiterForSequence({DialogEvent::CAN_MAKE_PAYMENT_CALLED,
                                DialogEvent::CAN_MAKE_PAYMENT_RETURNED,
@@ -334,9 +334,9 @@ IN_PROC_BROWSER_TEST_F(PaymentRequestCanMakePaymentMetricsTest,
   base::HistogramTester histogram_tester;
 
   std::string nickpay_method_name =
-      nickpay_server_.GetURL("nickpay.test", "/pay").spec();
+      nickpay_server_.GetURL("nickpay.test", "/nickpay.test/pay").spec();
   std::string nickpay2_method_name =
-      nickpay_server_.GetURL("nickpay2.test", "/pay").spec();
+      nickpay_server_.GetURL("nickpay2.test", "/nickpay.test/pay").spec();
 
   ResetEventWaiterForSequence({DialogEvent::CAN_MAKE_PAYMENT_CALLED,
                                DialogEvent::CAN_MAKE_PAYMENT_RETURNED,
diff --git a/components/payments/core/features.cc b/components/payments/core/features.cc
index ebc1b744dcacc..37ac1341c2a49 100644
--- a/components/payments/core/features.cc
+++ b/components/payments/core/features.cc
@@ -68,5 +68,9 @@ BASE_FEATURE(kPaymentHandlerMinimalHeaderUX,
              "PaymentHandlerMinimalHeaderUX",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
+BASE_FEATURE(kPaymentHandlerRequireLinkHeader,
+             "PaymentHandlerRequireLinkHeader",
+             base::FEATURE_ENABLED_BY_DEFAULT);
+
 }  // namespace features
 }  // namespace payments
diff --git a/components/payments/core/features.h b/components/payments/core/features.h
index 860db566656fc..06a62cb674afe 100644
--- a/components/payments/core/features.h
+++ b/components/payments/core/features.h
@@ -51,6 +51,10 @@ BASE_DECLARE_FEATURE(kSecurePaymentConfirmationUseCredentialStoreAPIs);
 // See https://crbug.com/1385136.
 BASE_DECLARE_FEATURE(kPaymentHandlerMinimalHeaderUX);
 
+// If enabled, the payment method manifest fetch for Payment Handler must go via
+// a Link header with rel="payment-method-manifest".
+BASE_DECLARE_FEATURE(kPaymentHandlerRequireLinkHeader);
+
 }  // namespace features
 }  // namespace payments
 
diff --git a/components/payments/core/native_error_strings.cc b/components/payments/core/native_error_strings.cc
index fde06417370ad..db809b8365963 100644
--- a/components/payments/core/native_error_strings.cc
+++ b/components/payments/core/native_error_strings.cc
@@ -186,6 +186,9 @@ const char kCanMakePaymentEventNoExplicitlyVerifiedMethods[] =
 const char kGenericPaymentMethodNotSupportedMessage[] =
     "Payment method not supported.";
 
+const char kNoLinkHeader[] =
+    "No \"Link: rel=payment-method-manifest\" HTTP header found at \"$1\".";
+
 const char kNoContentAndNoLinkHeader[] =
     "No content and no \"Link: rel=payment-method-manifest\" HTTP header found "
     "at \"$1\".";
diff --git a/components/payments/core/native_error_strings.h b/components/payments/core/native_error_strings.h
index 2f164bf3d76b2..66616dff51dd8 100644
--- a/components/payments/core/native_error_strings.h
+++ b/components/payments/core/native_error_strings.h
@@ -214,6 +214,10 @@ extern const char kCanMakePaymentEventNoExplicitlyVerifiedMethods[];
 // A message about unsupported payment method.
 extern const char kGenericPaymentMethodNotSupportedMessage[];
 
+// Used for errors downloading the payment method manifest. This format should
+// be used with base::ReplaceStringPlaceholders(fmt, {A}, nullptr).
+extern const char kNoLinkHeader[];
+
 // Used for errors downloading the payment method manifest. This format should
 // be used with base::ReplaceStringPlaceholders(fmt, {A}, nullptr).
 extern const char kNoContentAndNoLinkHeader[];
diff --git a/components/payments/core/payment_manifest_downloader.cc b/components/payments/core/payment_manifest_downloader.cc
index e8c5036444e7f..0e6d7d0b4a4db 100644
--- a/components/payments/core/payment_manifest_downloader.cc
+++ b/components/payments/core/payment_manifest_downloader.cc
@@ -9,6 +9,7 @@
 
 #include "base/check_op.h"
 #include "base/containers/contains.h"
+#include "base/feature_list.h"
 #include "base/functional/bind.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_piece.h"
@@ -17,6 +18,7 @@
 #include "components/link_header_util/link_header_util.h"
 #include "components/payments/core/csp_checker.h"
 #include "components/payments/core/error_logger.h"
+#include "components/payments/core/features.h"
 #include "components/payments/core/native_error_strings.h"
 #include "components/payments/core/url_util.h"
 #include "net/base/load_flags.h"
@@ -250,8 +252,16 @@ void PaymentManifestDownloader::OnURLLoaderCompleteInternal(
   DCHECK_EQ(Download::Type::RESPONSE_BODY_OR_LINK_HEADER, download->type);
 
   if (!headers) {
-    RespondWithContent(response_body, errors::kNoContentAndNoLinkHeader,
-                       final_url, *log_, std::move(download->callback));
+    if (base::FeatureList::IsEnabled(
+            features::kPaymentHandlerRequireLinkHeader)) {
+      // HTTP GET response has no headers; respond with error because the
+      // payment method manifest load must have a Link header.
+      RespondWithError(errors::kNoLinkHeader, final_url, *log_,
+                       std::move(download->callback));
+    } else {
+      RespondWithContent(response_body, errors::kNoContentAndNoLinkHeader,
+                         final_url, *log_, std::move(download->callback));
+    }
     return;
   }
 
@@ -265,8 +275,16 @@ void PaymentManifestDownloader::OnURLLoaderCompleteInternal(
   std::string link_header;
   headers->GetNormalizedHeader("link", &link_header);
   if (link_header.empty()) {
-    RespondWithContent(response_body, errors::kNoContentAndNoLinkHeader,
-                       final_url, *log_, std::move(download->callback));
+    if (base::FeatureList::IsEnabled(
+            features::kPaymentHandlerRequireLinkHeader)) {
+      // HTTP GET response has no "Link" header; respond with error because the
+      // payment method manifest load must have a Link header.
+      RespondWithError(errors::kNoLinkHeader, final_url, *log_,
+                       std::move(download->callback));
+    } else {
+      RespondWithContent(response_body, errors::kNoContentAndNoLinkHeader,
+                         final_url, *log_, std::move(download->callback));
+    }
     return;
   }
 
@@ -317,8 +335,17 @@ void PaymentManifestDownloader::OnURLLoaderCompleteInternal(
     }
   }
 
-  RespondWithContent(response_body, errors::kNoContentAndNoLinkHeader,
-                     final_url, *log_, std::move(download->callback));
+  if (base::FeatureList::IsEnabled(
+          features::kPaymentHandlerRequireLinkHeader)) {
+    // HTTP GET response has no "Link" header that has a
+    // rel="payment-method-manifest" entry; respond with error because the
+    // payment method manifest load must have a Link header.
+    RespondWithError(errors::kNoLinkHeader, final_url, *log_,
+                     std::move(download->callback));
+  } else {
+    RespondWithContent(response_body, errors::kNoContentAndNoLinkHeader,
+                       final_url, *log_, std::move(download->callback));
+  }
 }
 
 network::SimpleURLLoader* PaymentManifestDownloader::GetLoaderForTesting() {
diff --git a/components/payments/core/payment_manifest_downloader_unittest.cc b/components/payments/core/payment_manifest_downloader_unittest.cc
index 8cab806661ac1..0b743c620a469 100644
--- a/components/payments/core/payment_manifest_downloader_unittest.cc
+++ b/components/payments/core/payment_manifest_downloader_unittest.cc
@@ -9,9 +9,11 @@
 
 #include "base/functional/bind.h"
 #include "base/strings/stringprintf.h"
+#include "base/test/scoped_feature_list.h"
 #include "base/test/task_environment.h"
 #include "components/payments/core/const_csp_checker.h"
 #include "components/payments/core/error_logger.h"
+#include "components/payments/core/features.h"
 #include "net/base/net_errors.h"
 #include "net/http/http_response_headers.h"
 #include "services/network/public/cpp/simple_url_loader.h"
@@ -143,33 +145,41 @@ TEST_F(PaymentMethodManifestDownloaderTest,
   EXPECT_CALL(*this,
               OnManifestDownload(
                   _, kNoContent,
-                  "No content and no \"Link: rel=payment-method-manifest\" "
-                  "HTTP header found at \"https://bobpay.test/\"."));
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
   ServerResponse(200, Headers::kOmit, kNoLinkHeader, kNoResponseBody, net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
-       NoHttpHeadersButWithResponseBodyIsSuccess) {
-  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+       NoHttpHeadersButWithResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
   ServerResponse(200, Headers::kOmit, kNoLinkHeader, "response body", net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
        EmptyHttpHeaderAndEmptyResponseBodyIsFailure) {
-  EXPECT_CALL(
-      *this, OnManifestDownload(
-                 _, kNoContent,
-                 "No content and no \"Link: rel=payment-method-manifest\" HTTP "
-                 "header found at \"https://bobpay.test/\"."));
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
   ServerResponse(200, Headers::kSend, kNoLinkHeader, kNoResponseBody, net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
-       EmptyHttpHeaderButWithResponseBodyIsSuccess) {
-  EXPECT_CALL(*this, OnManifestDownload(_, "response content", kNoError));
+       EmptyHttpHeaderButWithResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
   ServerResponse(200, Headers::kSend, kNoLinkHeader, "response content",
                  net::OK);
@@ -180,16 +190,20 @@ TEST_F(PaymentMethodManifestDownloaderTest,
   EXPECT_CALL(*this,
               OnManifestDownload(
                   _, kNoContent,
-                  "No content and no \"Link: rel=payment-method-manifest\" "
-                  "HTTP header found at \"https://bobpay.test/\"."));
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
   ServerResponse(200, Headers::kSend, kEmptyLinkHeader, kNoResponseBody,
                  net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
-       EmptyHttpLinkHeaderButWithResponseBodyIsSuccess) {
-  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+       EmptyHttpLinkHeaderButWithResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
   ServerResponse(200, Headers::kSend, kEmptyLinkHeader, "response body",
                  net::OK);
@@ -200,16 +214,20 @@ TEST_F(PaymentMethodManifestDownloaderTest,
   EXPECT_CALL(*this,
               OnManifestDownload(
                   _, std::string(),
-                  "No content and no \"Link: rel=payment-method-manifest\" "
-                  "HTTP header found at \"https://bobpay.test/\"."));
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
   ServerResponse(200, Headers::kSend, "<manifest.json>", kNoResponseBody,
                  net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
-       NoRelInHttpLinkHeaderButWithResponseBodyIsSuccess) {
-  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+       NoRelInHttpLinkHeaderButWithResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
   ServerResponse(200, Headers::kSend, "<manifest.json>", "response body",
                  net::OK);
@@ -220,16 +238,20 @@ TEST_F(PaymentMethodManifestDownloaderTest,
   EXPECT_CALL(*this,
               OnManifestDownload(
                   _, kNoContent,
-                  "No content and no \"Link: rel=payment-method-manifest\" "
-                  "HTTP header found at \"https://bobpay.test/\"."));
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
   ServerResponse(200, Headers::kSend, "rel=payment-method-manifest",
                  kNoResponseBody, net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
-       NoUrlInHttpLinkHeaderButWithResponseBodyIsSuccess) {
-  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+       NoUrlInHttpLinkHeaderButWithResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
   ServerResponse(200, Headers::kSend, "rel=payment-method-manifest",
                  "response body", net::OK);
@@ -240,16 +262,20 @@ TEST_F(PaymentMethodManifestDownloaderTest,
   EXPECT_CALL(*this,
               OnManifestDownload(
                   _, kNoContent,
-                  "No content and no \"Link: rel=payment-method-manifest\" "
-                  "HTTP header found at \"https://bobpay.test/\"."));
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
   ServerResponse(200, Headers::kSend, "<manifest.json>; rel=web-app-manifest",
                  kNoResponseBody, net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
-       NoManifestRellInHttpLinkHeaderButWithResponseBodyIsSuccess) {
-  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+       NoManifestRellInHttpLinkHeaderButWithResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
   ServerResponse(200, Headers::kSend, "<manifest.json>; rel=web-app-manifest",
                  "response body", net::OK);
@@ -560,6 +586,142 @@ TEST_F(PaymentMethodManifestDownloaderTest, NotAllowCrossSiteRedirects) {
   ServerRedirect(301, GURL("https://alicepay.test"));
 }
 
+// Variant of PaymentMethodManifestDownloaderTest covering the logic when
+// kPaymentHandlerRequireLinkHeader is set to false.
+class PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest
+    : public PaymentManifestDownloaderTestBase {
+ public:
+  PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest() {
+    scoped_feature_list_.InitAndDisableFeature(
+        features::kPaymentHandlerRequireLinkHeader);
+    InitDownloader();
+    downloader_->DownloadPaymentMethodManifest(
+        url::Origin::Create(GURL("https://chromium.org")), test_url_,
+        base::BindOnce(&PaymentManifestDownloaderTestBase::OnManifestDownload,
+                       base::Unretained(this)));
+  }
+
+ private:
+  base::test::ScopedFeatureList scoped_feature_list_;
+};
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoHttpHeadersAndEmptyResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No content and no \"Link: rel=payment-method-manifest\" "
+                  "HTTP header found at \"https://bobpay.test/\"."));
+
+  ServerResponse(200, Headers::kOmit, kNoLinkHeader, kNoResponseBody, net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoHttpHeadersButWithResponseBodyIsSuccess) {
+  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+
+  ServerResponse(200, Headers::kOmit, kNoLinkHeader, "response body", net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       EmptyHttpHeaderAndEmptyResponseBodyIsFailure) {
+  EXPECT_CALL(
+      *this, OnManifestDownload(
+                 _, kNoContent,
+                 "No content and no \"Link: rel=payment-method-manifest\" HTTP "
+                 "header found at \"https://bobpay.test/\"."));
+
+  ServerResponse(200, Headers::kSend, kNoLinkHeader, kNoResponseBody, net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       EmptyHttpHeaderButWithResponseBodyIsSuccess) {
+  EXPECT_CALL(*this, OnManifestDownload(_, "response content", kNoError));
+
+  ServerResponse(200, Headers::kSend, kNoLinkHeader, "response content",
+                 net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       EmptyHttpLinkHeaderWithoutResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No content and no \"Link: rel=payment-method-manifest\" "
+                  "HTTP header found at \"https://bobpay.test/\"."));
+
+  ServerResponse(200, Headers::kSend, kEmptyLinkHeader, kNoResponseBody,
+                 net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       EmptyHttpLinkHeaderButWithResponseBodyIsSuccess) {
+  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+
+  ServerResponse(200, Headers::kSend, kEmptyLinkHeader, "response body",
+                 net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoRelInHttpLinkHeaderAndNoResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, std::string(),
+                  "No content and no \"Link: rel=payment-method-manifest\" "
+                  "HTTP header found at \"https://bobpay.test/\"."));
+
+  ServerResponse(200, Headers::kSend, "<manifest.json>", kNoResponseBody,
+                 net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoUrlInHttpLinkHeaderButWithResponseBodyIsSuccess) {
+  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+
+  ServerResponse(200, Headers::kSend, "rel=payment-method-manifest",
+                 "response body", net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoManifestRellInHttpLinkHeaderAndNoResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No content and no \"Link: rel=payment-method-manifest\" "
+                  "HTTP header found at \"https://bobpay.test/\"."));
+
+  ServerResponse(200, Headers::kSend, "<manifest.json>; rel=web-app-manifest",
+                 kNoResponseBody, net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoManifestRellInHttpLinkHeaderButWithResponseBodyIsSuccess) {
+  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+
+  ServerResponse(200, Headers::kSend, "<manifest.json>; rel=web-app-manifest",
+                 "response body", net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoRelInHttpLinkHeaderButWithResponseBodyIsSuccess) {
+  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+
+  ServerResponse(200, Headers::kSend, "<manifest.json>", "response body",
+                 net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoUrlInHttpLinkHeaderAndNoResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No content and no \"Link: rel=payment-method-manifest\" "
+                  "HTTP header found at \"https://bobpay.test/\"."));
+
+  ServerResponse(200, Headers::kSend, "rel=payment-method-manifest",
+                 kNoResponseBody, net::OK);
+}
+
 class WebAppManifestDownloaderTest : public PaymentManifestDownloaderTestBase {
  public:
   WebAppManifestDownloaderTest() {
diff --git a/components/test/data/payments/abort_responder_app.json.mock-http-headers b/components/test/data/payments/abort_responder_app.json.mock-http-headers
new file mode 100644
index 0000000000000..78aabaaaabc24
--- /dev/null
+++ b/components/test/data/payments/abort_responder_app.json.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </abort_responder_app.json>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/app_store_billing_tests/method_manifest.json.mock-http-headers b/components/test/data/payments/app_store_billing_tests/method_manifest.json.mock-http-headers
new file mode 100644
index 0000000000000..5c7b789cb6ef3
--- /dev/null
+++ b/components/test/data/payments/app_store_billing_tests/method_manifest.json.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </app_store_billing_tests/method_manifest.json>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/can_make_payment_event_fields/app/pay.mock-http-headers b/components/test/data/payments/can_make_payment_event_fields/app/pay.mock-http-headers
new file mode 100644
index 0000000000000..535c9c6b97bbd
--- /dev/null
+++ b/components/test/data/payments/can_make_payment_event_fields/app/pay.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </can_make_payment_event_fields/app/pay>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/just-in-time/pay.json.mock-http-headers b/components/test/data/payments/just-in-time/pay.json.mock-http-headers
new file mode 100644
index 0000000000000..0e9b0436a49bd
--- /dev/null
+++ b/components/test/data/payments/just-in-time/pay.json.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </just-in-time/pay.json>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/nickpay.test/pay.mock-http-headers b/components/test/data/payments/nickpay.test/pay.mock-http-headers
new file mode 100644
index 0000000000000..3cb57df5bfb24
--- /dev/null
+++ b/components/test/data/payments/nickpay.test/pay.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </nickpay.test/pay>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/orenpay.test/pay.mock-http-headers b/components/test/data/payments/orenpay.test/pay.mock-http-headers
new file mode 100644
index 0000000000000..8ae498f6326db
--- /dev/null
+++ b/components/test/data/payments/orenpay.test/pay.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </orenpay.test/pay>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/paulpay.test/pay.mock-http-headers b/components/test/data/payments/paulpay.test/pay.mock-http-headers
new file mode 100644
index 0000000000000..4f9fd4bcd6e3d
--- /dev/null
+++ b/components/test/data/payments/paulpay.test/pay.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </paulpay.test/pay>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/redirect/destination/pay.mock-http-headers b/components/test/data/payments/redirect/destination/pay.mock-http-headers
new file mode 100644
index 0000000000000..7e50be70bafd7
--- /dev/null
+++ b/components/test/data/payments/redirect/destination/pay.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </redirect/destination/pay>; rel="payment-method-manifest"
