/**
 * @name linux-934e1e4331859183a861f396d7dfaf33cb5afb02-bch_btree_map_nodes_recurse
 * @id cpp/linux/934e1e4331859183a861f396d7dfaf33cb5afb02/bch-btree-map-nodes-recurse
 * @description linux-934e1e4331859183a861f396d7dfaf33cb5afb02-drivers/md/bcache/btree.c-bch_btree_map_nodes_recurse CVE-2024-39482
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Parameter vfrom_2517, Variable viter_2524, Parameter vb_2516, FunctionCall target_1) {
	exists(AddressOfExpr obj_0 | obj_0=target_1.getArgument(0) |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().getName()="keys"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vb_2516
		)
	)
	and target_1.getTarget().hasName("bch_btree_iter_init")
	and not target_1.getTarget().hasName("bch_btree_iter_stack_init")
	and target_1.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=viter_2524
	and target_1.getArgument(2).(VariableAccess).getTarget()=vfrom_2517
}

predicate func_2(Variable viter_2524, AddressOfExpr target_4, AddressOfExpr target_5) {
exists(ValueFieldAccess target_2 |
	target_2.getTarget().getName()="iter"
	and target_2.getQualifier().(VariableAccess).getTarget()=viter_2524
	and target_4.getOperand().(VariableAccess).getLocation().isBefore(target_2.getQualifier().(VariableAccess).getLocation())
	and target_2.getQualifier().(VariableAccess).getLocation().isBefore(target_5.getOperand().(VariableAccess).getLocation())
)
}

predicate func_3(Variable viter_2524, Parameter vb_2516, AddressOfExpr target_6, SubExpr target_7, VariableAccess target_3) {
	exists(AddressOfExpr obj_0 | obj_0=target_3.getParent() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getParent() |
			exists(AssignExpr obj_2 | obj_2=obj_1.getParent() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getRValue() |
					exists(AddressOfExpr obj_4 | obj_4=obj_3.getArgument(1) |
						exists(PointerFieldAccess obj_5 | obj_5=obj_4.getOperand() |
							obj_5.getTarget().getName()="keys"
							and obj_5.getQualifier().(VariableAccess).getTarget()=vb_2516
						)
					)
					and obj_3.getTarget().hasName("bch_btree_iter_next_filter")
				)
			)
		)
	)
	and target_3.getTarget()=viter_2524
	and target_6.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_3.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_7.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_4(Variable viter_2524, AddressOfExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget()=viter_2524
}

predicate func_5(Variable viter_2524, AddressOfExpr target_5) {
	target_5.getOperand().(VariableAccess).getTarget()=viter_2524
}

predicate func_6(Parameter vb_2516, AddressOfExpr target_6) {
	exists(PointerFieldAccess obj_0 | obj_0=target_6.getOperand() |
		obj_0.getTarget().getName()="keys"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vb_2516
	)
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_7(Parameter vb_2516, SubExpr target_7) {
	exists(PointerFieldAccess obj_0 | obj_0=target_7.getLeftOperand() |
		obj_0.getTarget().getName()="level"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vb_2516
	)
	and target_7.getRightOperand().(Literal).getValue()="1"
}

from Function func, Parameter vfrom_2517, Variable viter_2524, Parameter vb_2516, FunctionCall target_1, VariableAccess target_3, AddressOfExpr target_4, AddressOfExpr target_5, AddressOfExpr target_6, SubExpr target_7
where
func_1(vfrom_2517, viter_2524, vb_2516, target_1)
and not func_2(viter_2524, target_4, target_5)
and func_3(viter_2524, vb_2516, target_6, target_7, target_3)
and func_4(viter_2524, target_4)
and func_5(viter_2524, target_5)
and func_6(vb_2516, target_6)
and func_7(vb_2516, target_7)
and vfrom_2517.getType().hasName("bkey *")
and viter_2524.getType().hasName("btree_iter")
and vb_2516.getType().hasName("btree *")
and vfrom_2517.getFunction() = func
and viter_2524.(LocalVariable).getFunction() = func
and vb_2516.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
