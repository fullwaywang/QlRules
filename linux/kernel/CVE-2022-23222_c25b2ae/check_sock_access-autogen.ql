/**
 * @name linux-c25b2ae136039ffa820c26138ed4a5e5f3ab3841-check_sock_access
 * @id cpp/linux/c25b2ae136039ffa820c26138ed4a5e5f3ab3841/check-sock-access
 * @description linux-c25b2ae136039ffa820c26138ed4a5e5f3ab3841-kernel/bpf/verifier.c-check_sock_access CVE-2022-23222
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_3(Variable vreg_3669, Parameter venv_3664, ExprStmt target_6) {
exists(FunctionCall target_3 |
	target_3.getTarget().hasName("reg_type_str")
	and target_3.getArgument(0).(VariableAccess).getTarget()=venv_3664
	and target_3.getArgument(1).(PointerFieldAccess).getTarget().getName()="type"
	and target_3.getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_3669
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_3664
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="R%d invalid %s access off=%d size=%d\n"
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("u32")
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3) instanceof ArrayExpr
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(5).(VariableAccess).getTarget().getType().hasName("int")
	and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_4(Variable vreg_3669, Variable vreg_type_str, PointerFieldAccess target_4) {
	target_4.getTarget().getName()="type"
	and target_4.getQualifier().(VariableAccess).getTarget()=vreg_3669
	and target_4.getParent().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vreg_type_str
}

predicate func_5(Variable vreg_3669, Variable vreg_type_str, Parameter venv_3664, ArrayExpr target_5) {
	target_5.getArrayBase().(VariableAccess).getTarget()=vreg_type_str
	and target_5.getArrayOffset().(PointerFieldAccess).getTarget().getName()="type"
	and target_5.getArrayOffset().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreg_3669
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_3664
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="R%d invalid %s access off=%d size=%d\n"
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("u32")
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("int")
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(5).(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_6(Parameter venv_3664, ExprStmt target_6) {
	target_6.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_3664
	and target_6.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="R%d invalid %s access off=%d size=%d\n"
	and target_6.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("u32")
	and target_6.getExpr().(FunctionCall).getArgument(3) instanceof ArrayExpr
	and target_6.getExpr().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("int")
	and target_6.getExpr().(FunctionCall).getArgument(5).(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Variable vreg_3669, Variable vreg_type_str, Parameter venv_3664, PointerFieldAccess target_4, ArrayExpr target_5, ExprStmt target_6
where
not func_3(vreg_3669, venv_3664, target_6)
and func_4(vreg_3669, vreg_type_str, target_4)
and func_5(vreg_3669, vreg_type_str, venv_3664, target_5)
and func_6(venv_3664, target_6)
and vreg_3669.getType().hasName("bpf_reg_state *")
and vreg_type_str.getType() instanceof ArrayType
and venv_3664.getType().hasName("bpf_verifier_env *")
and vreg_3669.(LocalVariable).getFunction() = func
and not vreg_type_str.getParentScope+() = func
and venv_3664.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
