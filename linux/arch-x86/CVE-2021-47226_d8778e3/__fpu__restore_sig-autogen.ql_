/**
 * @name linux-d8778e393afa421f1f117471144f8ce6deb6953a-__fpu__restore_sig
 * @id cpp/linux/d8778e393afa421f1f117471144f8ce6deb6953a/--fpu--restore-sig
 * @description linux-d8778e393afa421f1f117471144f8ce6deb6953a-arch/x86/kernel/fpu/signal.c-__fpu__restore_sig CVE-2021-47226
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(NotExpr target_1, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("test_ti_thread_flag")
	and target_0.getCondition().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("get_current")
	and target_0.getCondition().(FunctionCall).getArgument(1).(Literal).getValue()="14"
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__cpu_invalidate_fpregs_state")
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(5)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_0.getEnclosingFunction() = func)
}

predicate func_1(Function func, NotExpr target_1) {
	target_1.getOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getEnclosingFunction() = func
}

from Function func, NotExpr target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
