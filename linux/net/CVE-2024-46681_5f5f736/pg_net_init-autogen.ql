/**
 * @name linux-5f5f7366dda8ae870e8305d6e7b3c0c2686cd2cf-pg_net_init
 * @id cpp/linux/5f5f7366dda8ae870e8305d6e7b3c0c2686cd2cf/pg-net-init
 * @description linux-5f5f7366dda8ae870e8305d6e7b3c0c2686cd2cf-net/core/pktgen.c-pg_net_init CVE-2024-46681
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ForStmt target_2, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("cpus_read_lock")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
)
}

predicate func_1(IfStmt target_3, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("cpus_read_unlock")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_3.getLocation())
)
}

predicate func_2(Function func, ForStmt target_2) {
	exists(ExprStmt obj_0 | obj_0=target_2.getInitialization() |
		exists(AssignExpr obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getLValue().(VariableAccess).getTarget().getType().hasName("int")
			and obj_1.getRValue().(Literal).getValue()="0"
		)
	)
	and exists(CommaExpr obj_2 | obj_2=target_2.getCondition() |
		exists(AssignExpr obj_3 | obj_3=obj_2.getLeftOperand() |
			exists(FunctionCall obj_4 | obj_4=obj_3.getRValue() |
				exists(PointerFieldAccess obj_5 | obj_5=obj_4.getArgument(0) |
					obj_5.getTarget().getName()="bits"
					and obj_5.getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("cpumask")
				)
				and obj_4.getTarget().hasName("find_next_bit")
				and obj_4.getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned int")
				and obj_4.getArgument(2).(VariableAccess).getTarget().getType().hasName("int")
			)
			and obj_3.getLValue().(VariableAccess).getTarget().getType().hasName("int")
		)
		and exists(RelationalOperation obj_6 | obj_6=obj_2.getRightOperand() |
			obj_6.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
			and obj_6.getGreaterOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
		)
	)
	and exists(BlockStmt obj_7 | obj_7=target_2.getStmt() |
		exists(ExprStmt obj_8 | obj_8=obj_7.getStmt(1) |
			exists(AssignExpr obj_9 | obj_9=obj_8.getExpr() |
				exists(FunctionCall obj_10 | obj_10=obj_9.getRValue() |
					obj_10.getTarget().hasName("pktgen_create_thread")
					and obj_10.getArgument(0).(VariableAccess).getTarget().getType().hasName("int")
					and obj_10.getArgument(1).(VariableAccess).getTarget().getType().hasName("pktgen_net *")
				)
				and obj_9.getLValue().(VariableAccess).getTarget().getType().hasName("int")
			)
		)
		and obj_7.getStmt(2).(IfStmt).getCondition().(VariableAccess).getTarget().getType().hasName("int")
	)
	and target_2.getUpdate().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, IfStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getCondition() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="pktgen_threads"
				and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("pktgen_net *")
			)
		)
		and obj_0.getTarget().hasName("list_empty")
	)
	and exists(BlockStmt obj_3 | obj_3=target_3.getThen() |
		exists(ExprStmt obj_4 | obj_4=obj_3.getStmt(0) |
			exists(StmtExpr obj_5 | obj_5=obj_4.getExpr() |
				exists(BlockStmt obj_6 | obj_6=obj_5.getStmt() |
					obj_6.getStmt(0).(DoStmt).getCondition() instanceof Literal
					and obj_6.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_printk")
				)
			)
		)
		and exists(ExprStmt obj_7 | obj_7=obj_3.getStmt(1) |
			exists(AssignExpr obj_8 | obj_8=obj_7.getExpr() |
				obj_8.getLValue().(VariableAccess).getTarget().getType().hasName("int")
				and obj_8.getRValue().(UnaryMinusExpr).getValue()="-19"
			)
		)
		and obj_3.getStmt(2).(GotoStmt).getName() ="remove_entry"
	)
	and target_3.getEnclosingFunction() = func
}

from Function func, ForStmt target_2, IfStmt target_3
where
not func_0(target_2, func)
and not func_1(target_3, func)
and func_2(func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
