/**
 * @name linux-35556bed836f8dc07ac55f69c8d17dce3e7f0e25-hid_map_usage_clear
 * @id cpp/linux/35556bed836f8dc07ac55f69c8d17dce3e7f0e25/hid-map-usage-clear
 * @description linux-35556bed836f8dc07ac55f69c8d17dce3e7f0e25-include/linux/hid.h-hid_map_usage_clear CVE-2020-0465
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vusage_999, Parameter vbit_999, ExprStmt target_3, ExprStmt target_4, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vbit_999
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("clear_bit")
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="code"
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vusage_999
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vbit_999
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_3.getLocation())
	and target_4.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

/*predicate func_1(Parameter vusage_999, ExprStmt target_4) {
exists(PointerFieldAccess target_1 |
	target_1.getTarget().getName()="code"
	and target_1.getQualifier().(VariableAccess).getTarget()=vusage_999
	and target_4.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_1.getQualifier().(VariableAccess).getLocation()))
}

*/
predicate func_2(Parameter vbit_999, Parameter vc_1000, ExprStmt target_4, VariableAccess target_2) {
	target_2.getTarget()=vc_1000
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("clear_bit")
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vbit_999
	and target_4.getExpr().(FunctionCall).getArgument(5).(VariableAccess).getLocation().isBefore(target_2.getLocation())
}

predicate func_3(Parameter vbit_999, Parameter vc_1000, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("clear_bit")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vc_1000
	and target_3.getExpr().(FunctionCall).getArgument(1).(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vbit_999
}

predicate func_4(Parameter vusage_999, Parameter vbit_999, Parameter vc_1000, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("hid_map_usage")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("hid_input *")
	and target_4.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vusage_999
	and target_4.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vbit_999
	and target_4.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("int *")
	and target_4.getExpr().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("__u8")
	and target_4.getExpr().(FunctionCall).getArgument(5).(VariableAccess).getTarget()=vc_1000
}

from Function func, Parameter vusage_999, Parameter vbit_999, Parameter vc_1000, VariableAccess target_2, ExprStmt target_3, ExprStmt target_4
where
not func_0(vusage_999, vbit_999, target_3, target_4, func)
and func_2(vbit_999, vc_1000, target_4, target_2)
and func_3(vbit_999, vc_1000, target_3)
and func_4(vusage_999, vbit_999, vc_1000, target_4)
and vusage_999.getType().hasName("hid_usage *")
and vbit_999.getType().hasName("unsigned long **")
and vc_1000.getType().hasName("__u16")
and vusage_999.getFunction() = func
and vbit_999.getFunction() = func
and vc_1000.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
