/**
 * @name linux-32927393dc1ccd60fb2bdc05b9e8e88753761469-read_reset_stat
 * @id cpp/linux/32927393dc1ccd60fb2bdc05b9e8e88753761469/read-reset-stat
 * @description linux-32927393dc1ccd60fb2bdc05b9e8e88753761469-net/sunrpc/xprtrdma/svc_rdma.c-read_reset_stat CVE-2021-4218
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vbuffer_83, Variable vstr_buf_94, Variable vlen_95, LogicalAndExpr target_5, ExprStmt target_7) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("__memcpy")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbuffer_83
	and target_0.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vstr_buf_94
	and target_0.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vlen_95
	and target_0.getParent().(IfStmt).getCondition()=target_5
	and target_0.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_7.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vbuffer_83, VariableAccess target_1) {
	target_1.getTarget()=vbuffer_83
	and target_1.getParent().(FunctionCall).getParent().(LogicalAndExpr).getRightOperand() instanceof FunctionCall
}

predicate func_2(Variable vstr_buf_94, VariableAccess target_2) {
	target_2.getTarget()=vstr_buf_94
	and target_2.getParent().(FunctionCall).getParent().(LogicalAndExpr).getRightOperand() instanceof FunctionCall
}

predicate func_3(Variable vlen_95, VariableAccess target_3) {
	target_3.getTarget()=vlen_95
	and target_3.getParent().(FunctionCall).getParent().(LogicalAndExpr).getRightOperand() instanceof FunctionCall
}

predicate func_4(Variable vlen_95, ReturnStmt target_6, VariableAccess target_4) {
	target_4.getTarget()=vlen_95
	and target_4.getParent().(LogicalAndExpr).getRightOperand() instanceof FunctionCall
	and target_4.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_6
}

predicate func_5(Parameter vbuffer_83, Variable vstr_buf_94, Variable vlen_95, ReturnStmt target_6, LogicalAndExpr target_5) {
	target_5.getLeftOperand().(VariableAccess).getTarget()=vlen_95
	and target_5.getRightOperand().(FunctionCall).getTarget().hasName("copy_to_user")
	and target_5.getRightOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vbuffer_83
	and target_5.getRightOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vstr_buf_94
	and target_5.getRightOperand().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vlen_95
	and target_5.getParent().(IfStmt).getThen()=target_6
}

predicate func_6(LogicalAndExpr target_5, Function func, ReturnStmt target_6) {
	target_6.getExpr().(UnaryMinusExpr).getValue()="-14"
	and target_6.getParent().(IfStmt).getCondition()=target_5
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Variable vlen_95, ExprStmt target_7) {
	target_7.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget().getType().hasName("size_t *")
	and target_7.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vlen_95
}

from Function func, Parameter vbuffer_83, Variable vstr_buf_94, Variable vlen_95, VariableAccess target_1, VariableAccess target_2, VariableAccess target_3, VariableAccess target_4, LogicalAndExpr target_5, ReturnStmt target_6, ExprStmt target_7
where
not func_0(vbuffer_83, vstr_buf_94, vlen_95, target_5, target_7)
and func_1(vbuffer_83, target_1)
and func_2(vstr_buf_94, target_2)
and func_3(vlen_95, target_3)
and func_4(vlen_95, target_6, target_4)
and func_5(vbuffer_83, vstr_buf_94, vlen_95, target_6, target_5)
and func_6(target_5, func, target_6)
and func_7(vlen_95, target_7)
and vbuffer_83.getType().hasName("void *")
and vstr_buf_94.getType().hasName("char[32]")
and vlen_95.getType().hasName("int")
and vbuffer_83.getFunction() = func
and vstr_buf_94.(LocalVariable).getFunction() = func
and vlen_95.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
