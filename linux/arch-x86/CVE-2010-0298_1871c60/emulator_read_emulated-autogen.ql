/**
 * @name linux-1871c6020d7308afb99127bba51f04548e7ca84e-emulator_read_emulated
 * @id cpp/linux/1871c6020d7308afb99127bba51f04548e7ca84e/emulator-read-emulated
 * @description linux-1871c6020d7308afb99127bba51f04548e7ca84e-arch/x86/kvm/x86.c-emulator_read_emulated CVE-2010-0298
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvcpu_3106, Variable vgpa_3108, Parameter vaddr_3103, ValueFieldAccess target_9, EqualityOperation target_10) {
	exists(FunctionCall target_0 |
		target_0.getTarget().hasName("kvm_mmu_gva_to_gpa_read")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vvcpu_3106
		and target_0.getArgument(1).(VariableAccess).getTarget()=vaddr_3103
		and target_0.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("u32")
		and target_0.getParent().(AssignExpr).getRValue() = target_0
		and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vgpa_3108
		and target_9.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getArgument(0).(VariableAccess).getLocation())
		and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_10.getAnOperand().(FunctionCall).getArgument(3).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vvcpu_3106, Parameter vaddr_3103, EqualityOperation target_10, ExprStmt target_11) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(FunctionCall).getTarget().hasName("kvm_inject_page_fault")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_3106
		and target_1.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vaddr_3103
		and target_1.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getType().hasName("u32")
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10
		and target_11.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Variable vgpa_3108, ReturnStmt target_4, EqualityOperation target_3) {
		target_3.getAnOperand().(VariableAccess).getTarget()=vgpa_3108
		and target_3.getAnOperand().(ComplementExpr).getValue()="18446744073709551615"
		and target_3.getParent().(IfStmt).getThen()=target_4
}

predicate func_4(EqualityOperation target_3, Function func, ReturnStmt target_4) {
		target_4.getExpr().(Literal).getValue()="2"
		and target_4.getParent().(IfStmt).getCondition()=target_3
		and target_4.getEnclosingFunction() = func
}

predicate func_5(Parameter vvcpu_3106, VariableAccess target_5) {
		target_5.getTarget()=vvcpu_3106
		and target_5.getParent().(VariableCall).getParent().(AssignExpr).getRValue() instanceof VariableCall
}

predicate func_6(Parameter vaddr_3103, VariableAccess target_6) {
		target_6.getTarget()=vaddr_3103
		and target_6.getParent().(VariableCall).getParent().(AssignExpr).getRValue() instanceof VariableCall
}

predicate func_7(Parameter vvcpu_3106, VariableAccess target_7) {
		target_7.getTarget()=vvcpu_3106
}

predicate func_8(Parameter vvcpu_3106, Parameter vaddr_3103, VariableCall target_8) {
		target_8.getExpr().(ValueFieldAccess).getTarget().getName()="gva_to_gpa"
		and target_8.getExpr().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="mmu"
		and target_8.getExpr().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="arch"
		and target_8.getExpr().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_3106
		and target_8.getArgument(0).(VariableAccess).getTarget()=vvcpu_3106
		and target_8.getArgument(1).(VariableAccess).getTarget()=vaddr_3103
}

predicate func_9(Parameter vvcpu_3106, ValueFieldAccess target_9) {
		target_9.getTarget().getName()="mmu"
		and target_9.getQualifier().(PointerFieldAccess).getTarget().getName()="arch"
		and target_9.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_3106
}

predicate func_10(Parameter vvcpu_3106, Parameter vaddr_3103, EqualityOperation target_10) {
		target_10.getAnOperand().(FunctionCall).getTarget().hasName("kvm_read_guest_virt")
		and target_10.getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vaddr_3103
		and target_10.getAnOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("void *")
		and target_10.getAnOperand().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("unsigned int")
		and target_10.getAnOperand().(FunctionCall).getArgument(3).(VariableAccess).getTarget()=vvcpu_3106
		and target_10.getAnOperand().(Literal).getValue()="0"
}

predicate func_11(Parameter vvcpu_3106, ExprStmt target_11) {
		target_11.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="mmio_read_completed"
		and target_11.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_3106
		and target_11.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

from Function func, Parameter vvcpu_3106, Variable vgpa_3108, Parameter vaddr_3103, EqualityOperation target_3, ReturnStmt target_4, VariableAccess target_5, VariableAccess target_6, VariableAccess target_7, VariableCall target_8, ValueFieldAccess target_9, EqualityOperation target_10, ExprStmt target_11
where
not func_0(vvcpu_3106, vgpa_3108, vaddr_3103, target_9, target_10)
and not func_1(vvcpu_3106, vaddr_3103, target_10, target_11)
and func_3(vgpa_3108, target_4, target_3)
and func_4(target_3, func, target_4)
and func_5(vvcpu_3106, target_5)
and func_6(vaddr_3103, target_6)
and func_7(vvcpu_3106, target_7)
and func_8(vvcpu_3106, vaddr_3103, target_8)
and func_9(vvcpu_3106, target_9)
and func_10(vvcpu_3106, vaddr_3103, target_10)
and func_11(vvcpu_3106, target_11)
and vvcpu_3106.getType().hasName("kvm_vcpu *")
and vgpa_3108.getType().hasName("gpa_t")
and vaddr_3103.getType().hasName("unsigned long")
and vvcpu_3106.getFunction() = func
and vgpa_3108.(LocalVariable).getFunction() = func
and vaddr_3103.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
