/**
 * @name linux-ee6c88bb754e3d363e568da78086adfedb692447-inet_diag_msg_sctpladdrs_fill
 * @id cpp/linux/ee6c88bb754e3d363e568da78086adfedb692447/inet-diag-msg-sctpladdrs-fill
 * @description linux-ee6c88bb754e3d363e568da78086adfedb692447-net/sctp/sctp_diag.c-inet_diag_msg_sctpladdrs_fill CVE-2017-7558
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func) {
exists(SizeofExprOperator target_0 |
	target_0.getValue()="28"
	and target_0.getEnclosingFunction() = func)
}

predicate func_1(Variable vaddrlen_59, Variable vinfo_62, ExprStmt target_3, ExprStmt target_4) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("__memset")
	and target_1.getExpr().(FunctionCall).getArgument(0).(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=vinfo_62
	and target_1.getExpr().(FunctionCall).getArgument(0).(PointerArithmeticOperation).getRightOperand().(SizeofExprOperator).getValue()="28"
	and target_1.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_1.getExpr().(FunctionCall).getArgument(2).(SubExpr).getLeftOperand().(VariableAccess).getTarget()=vaddrlen_59
	and target_1.getExpr().(FunctionCall).getArgument(2).(SubExpr).getRightOperand().(SizeofExprOperator).getValue()="28"
	and target_1.getLocation().isBefore(target_3.getLocation())
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation()))
}

predicate func_2(Variable vaddrlen_59, Variable vinfo_62, VariableAccess target_2) {
	target_2.getTarget()=vaddrlen_59
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__memcpy")
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vinfo_62
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="a"
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("sctp_sockaddr_entry *")
}

predicate func_3(Variable vaddrlen_59, Variable vinfo_62, ExprStmt target_3) {
	target_3.getExpr().(AssignPointerAddExpr).getLValue().(VariableAccess).getTarget()=vinfo_62
	and target_3.getExpr().(AssignPointerAddExpr).getRValue().(VariableAccess).getTarget()=vaddrlen_59
}

predicate func_4(Variable vaddrlen_59, Variable vinfo_62, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("__memcpy")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vinfo_62
	and target_4.getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="a"
	and target_4.getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("sctp_sockaddr_entry *")
	and target_4.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vaddrlen_59
}

from Function func, Variable vaddrlen_59, Variable vinfo_62, VariableAccess target_2, ExprStmt target_3, ExprStmt target_4
where
not func_0(func)
and not func_1(vaddrlen_59, vinfo_62, target_3, target_4)
and func_2(vaddrlen_59, vinfo_62, target_2)
and func_3(vaddrlen_59, vinfo_62, target_3)
and func_4(vaddrlen_59, vinfo_62, target_4)
and vaddrlen_59.getType().hasName("int")
and vinfo_62.getType().hasName("void *")
and vaddrlen_59.(LocalVariable).getFunction() = func
and vinfo_62.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
