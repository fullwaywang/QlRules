commit 871997bc9e423f05c7da7c9178e62dde5df2a7f8
Author: Jan Beulich <jbeulich@suse.com>
Date:   Mon Feb 15 08:56:44 2021 +0100

    xen-blkback: fix error handling in xen_blkbk_map()
    
    The function uses a goto-based loop, which may lead to an earlier error
    getting discarded by a later iteration. Exit this ad-hoc loop when an
    error was encountered.
    
    The out-of-memory error path additionally fails to fill a structure
    field looked at by xen_blkbk_unmap_prepare() before inspecting the
    handle which does get properly set (to BLKBACK_INVALID_HANDLE).
    
    Since the earlier exiting from the ad-hoc loop requires the same field
    filling (invalidation) as that on the out-of-memory path, fold both
    paths. While doing so, drop the pr_alert(), as extra log messages aren't
    going to help the situation (the kernel will log oom conditions already
    anyway).
    
    This is XSA-365.
    
    Signed-off-by: Jan Beulich <jbeulich@suse.com>
    Reviewed-by: Juergen Gross <jgross@suse.com>
    Reviewed-by: Julien Grall <julien@xen.org>
    Signed-off-by: Juergen Gross <jgross@suse.com>

diff --git a/drivers/block/xen-blkback/blkback.c b/drivers/block/xen-blkback/blkback.c
index ee62b3c0b55a..da16121140ca 100644
--- a/drivers/block/xen-blkback/blkback.c
+++ b/drivers/block/xen-blkback/blkback.c
@@ -794,8 +794,13 @@ static int xen_blkbk_map(struct xen_blkif_ring *ring,
 			pages[i]->persistent_gnt = persistent_gnt;
 		} else {
 			if (gnttab_page_cache_get(&ring->free_pages,
-						  &pages[i]->page))
-				goto out_of_memory;
+						  &pages[i]->page)) {
+				gnttab_page_cache_put(&ring->free_pages,
+						      pages_to_gnt,
+						      segs_to_map);
+				ret = -ENOMEM;
+				goto out;
+			}
 			addr = vaddr(pages[i]->page);
 			pages_to_gnt[segs_to_map] = pages[i]->page;
 			pages[i]->persistent_gnt = NULL;
@@ -880,17 +885,18 @@ static int xen_blkbk_map(struct xen_blkif_ring *ring,
 	}
 	segs_to_map = 0;
 	last_map = map_until;
-	if (map_until != num)
+	if (!ret && map_until != num)
 		goto again;
 
-	return ret;
-
-out_of_memory:
-	pr_alert("%s: out of memory\n", __func__);
-	gnttab_page_cache_put(&ring->free_pages, pages_to_gnt, segs_to_map);
-	for (i = last_map; i < num; i++)
+out:
+	for (i = last_map; i < num; i++) {
+		/* Don't zap current batch's valid persistent grants. */
+		if(i >= last_map + segs_to_map)
+			pages[i]->persistent_gnt = NULL;
 		pages[i]->handle = BLKBACK_INVALID_HANDLE;
-	return -ENOMEM;
+	}
+
+	return ret;
 }
 
 static int xen_blkbk_map_seg(struct pending_req *pending_req)
