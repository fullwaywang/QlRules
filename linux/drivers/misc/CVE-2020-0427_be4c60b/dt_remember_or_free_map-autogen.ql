/**
 * @name linux-be4c60b563edee3712d392aaeb0943a768df7023-dt_remember_or_free_map
 * @id cpp/linux/be4c60b563edee3712d392aaeb0943a768df7023/dt-remember-or-free-map
 * @description linux-be4c60b563edee3712d392aaeb0943a768df7023-drivers/pinctrl/devicetree.c-dt_remember_or_free_map CVE-2020-0427
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Function func) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("kstrdup_const")
	and target_1.getArgument(0) instanceof FunctionCall
	and target_1.getArgument(1).(BitwiseOrExpr).getValue()="3264"
	and target_1.getParent().(AssignExpr).getRValue() = target_1
	and target_1.getParent().(AssignExpr).getLValue() instanceof ValueFieldAccess
	and target_1.getEnclosingFunction() = func)
}

predicate func_2(ExprStmt target_9, Function func) {
exists(IfStmt target_2 |
	target_2.getCondition().(NotExpr).getOperand().(VariableAccess).getType().hasName("const char *")
	and target_2.getThen().(GotoStmt).getName() ="err_free_map"
	and target_2.getLocation().isBefore(target_9.getLocation())
	and target_2.getEnclosingFunction() = func)
}

predicate func_3(ExprStmt target_9, Function func) {
exists(ExprStmt target_3 |
	target_3.getExpr().(AssignExpr).getLValue() instanceof ValueFieldAccess
	and target_3.getExpr().(AssignExpr).getRValue().(VariableAccess).getType().hasName("const char *")
	and target_3.getLocation().isBefore(target_9.getLocation())
	and target_3.getEnclosingFunction() = func)
}

predicate func_4(NotExpr target_10, Function func) {
exists(GotoStmt target_4 |
	target_4.getName() ="err_free_map"
	and target_4.getParent().(IfStmt).getCondition()=target_10
	and target_4.getEnclosingFunction() = func)
}

/*predicate func_5(Parameter vmap_59, Variable vi_61, ValueFieldAccess target_5) {
	target_5.getTarget().getName()="dev_name"
	and target_5.getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vmap_59
	and target_5.getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_61
}

*/
predicate func_6(Parameter vpctldev_58, Parameter vmap_59, Parameter vnum_maps_59, NotExpr target_10, ExprStmt target_6) {
	target_6.getExpr().(FunctionCall).getTarget().hasName("dt_free_map")
	and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpctldev_58
	and target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vmap_59
	and target_6.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vnum_maps_59
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10
}

predicate func_7(NotExpr target_10, Function func, ReturnStmt target_7) {
	target_7.getExpr().(UnaryMinusExpr).getValue()="-12"
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Parameter vp_57, Parameter vmap_59, Variable vi_61, FunctionCall target_8) {
	target_8.getTarget().hasName("dev_name")
	and target_8.getArgument(0).(PointerFieldAccess).getTarget().getName()="dev"
	and target_8.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vp_57
	and target_8.getParent().(AssignExpr).getRValue() = target_8
	and target_8.getParent().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="dev_name"
	and target_8.getParent().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vmap_59
	and target_8.getParent().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_61
}

predicate func_9(Parameter vmap_59, Variable vi_61, ExprStmt target_9) {
	target_9.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="name"
	and target_9.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vmap_59
	and target_9.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_61
	and target_9.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("const char *")
}

predicate func_10(Function func, NotExpr target_10) {
	target_10.getOperand().(VariableAccess).getTarget().getType().hasName("pinctrl_dt_map *")
	and target_10.getEnclosingFunction() = func
}

from Function func, Parameter vp_57, Parameter vpctldev_58, Parameter vmap_59, Parameter vnum_maps_59, Variable vi_61, ExprStmt target_6, ReturnStmt target_7, FunctionCall target_8, ExprStmt target_9, NotExpr target_10
where
not func_1(func)
and not func_2(target_9, func)
and not func_3(target_9, func)
and not func_4(target_10, func)
and func_6(vpctldev_58, vmap_59, vnum_maps_59, target_10, target_6)
and func_7(target_10, func, target_7)
and func_8(vp_57, vmap_59, vi_61, target_8)
and func_9(vmap_59, vi_61, target_9)
and func_10(func, target_10)
and vp_57.getType().hasName("pinctrl *")
and vpctldev_58.getType().hasName("pinctrl_dev *")
and vmap_59.getType().hasName("pinctrl_map *")
and vnum_maps_59.getType().hasName("unsigned int")
and vi_61.getType().hasName("int")
and vp_57.getFunction() = func
and vpctldev_58.getFunction() = func
and vmap_59.getFunction() = func
and vnum_maps_59.getFunction() = func
and vi_61.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
