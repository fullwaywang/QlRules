/**
 * @name linux-afaaf3a0f647a24a7bf6a2145d8ade37baaf75ad-fops_vcodec_release
 * @id cpp/linux/afaaf3a0f647a24a7bf6a2145d8ade37baaf75ad/fops-vcodec-release
 * @description linux-afaaf3a0f647a24a7bf6a2145d8ade37baaf75ad-drivers/media/platform/mediatek/vcodec/encoder/mtk_vcodec_enc_drv.c-fops_vcodec_release CVE-2024-35919
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdev_203, ExprStmt target_2, AddressOfExpr target_3, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="dev_ctx_lock"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_203
	and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
	and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vdev_203, ExprStmt target_4, AddressOfExpr target_5, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="dev_ctx_lock"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_203
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_4.getLocation())
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Function func, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("list_del_init")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="list"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("mtk_vcodec_enc_ctx *")
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vdev_203, AddressOfExpr target_3) {
	target_3.getOperand().(PointerFieldAccess).getTarget().getName()="dev_mutex"
	and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_203
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
}

predicate func_4(Function func, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("kfree")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("mtk_vcodec_enc_ctx *")
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable vdev_203, AddressOfExpr target_5) {
	target_5.getOperand().(PointerFieldAccess).getTarget().getName()="dev_mutex"
	and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_203
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
}

from Function func, Variable vdev_203, ExprStmt target_2, AddressOfExpr target_3, ExprStmt target_4, AddressOfExpr target_5
where
not func_0(vdev_203, target_2, target_3, func)
and not func_1(vdev_203, target_4, target_5, func)
and func_2(func, target_2)
and func_3(vdev_203, target_3)
and func_4(func, target_4)
and func_5(vdev_203, target_5)
and vdev_203.getType().hasName("mtk_vcodec_enc_dev *")
and vdev_203.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
