/**
 * @name linux-9dde27de3e5efa0d032f3c891a0ca833a0d31911-sctp_skb_set_owner_r
 * @id cpp/linux/9dde27de3e5efa0d032f3c891a0ca833a0d31911/sctp-skb-set-owner-r
 * @description linux-9dde27de3e5efa0d032f3c891a0ca833a0d31911-include/net/sctp/sctp.h-sctp_skb_set_owner_r CVE-2019-3874
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsk_413, Variable vevent_415, AddressOfExpr target_4, ExprStmt target_5) {
	exists(FunctionCall target_0 |
		target_0.getTarget().hasName("sk_mem_charge")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vsk_413
		and target_0.getArgument(1).(PointerFieldAccess).getTarget().getName()="rmem_len"
		and target_0.getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vevent_415
		and target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getArgument(0).(VariableAccess).getLocation())
		and target_5.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vsk_413, Variable vevent_415, PointerFieldAccess target_1) {
		target_1.getTarget().getName()="rmem_len"
		and target_1.getQualifier().(VariableAccess).getTarget()=vevent_415
		and target_1.getParent().(AssignSubExpr).getRValue() = target_1
		and target_1.getParent().(AssignSubExpr).getLValue().(PointerFieldAccess).getTarget().getName()="sk_forward_alloc"
		and target_1.getParent().(AssignSubExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_413
}

/*predicate func_2(Parameter vsk_413, VariableAccess target_2) {
		target_2.getTarget()=vsk_413
}

*/
predicate func_3(Parameter vsk_413, Variable vevent_415, AssignSubExpr target_3) {
		target_3.getLValue().(PointerFieldAccess).getTarget().getName()="sk_forward_alloc"
		and target_3.getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_413
		and target_3.getRValue().(PointerFieldAccess).getTarget().getName()="rmem_len"
		and target_3.getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vevent_415
}

predicate func_4(Parameter vsk_413, AddressOfExpr target_4) {
		target_4.getOperand().(ValueFieldAccess).getTarget().getName()="rmem_alloc"
		and target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_backlog"
		and target_4.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_413
}

predicate func_5(Parameter vsk_413, Variable vevent_415, ExprStmt target_5) {
		target_5.getExpr().(FunctionCall).getTarget().hasName("atomic_add")
		and target_5.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="rmem_len"
		and target_5.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vevent_415
		and target_5.getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="rmem_alloc"
		and target_5.getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_backlog"
		and target_5.getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_413
}

from Function func, Parameter vsk_413, Variable vevent_415, PointerFieldAccess target_1, AssignSubExpr target_3, AddressOfExpr target_4, ExprStmt target_5
where
not func_0(vsk_413, vevent_415, target_4, target_5)
and func_1(vsk_413, vevent_415, target_1)
and func_3(vsk_413, vevent_415, target_3)
and func_4(vsk_413, target_4)
and func_5(vsk_413, vevent_415, target_5)
and vsk_413.getType().hasName("sock *")
and vevent_415.getType().hasName("sctp_ulpevent *")
and vsk_413.getFunction() = func
and vevent_415.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
