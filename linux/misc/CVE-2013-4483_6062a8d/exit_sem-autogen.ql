/**
 * @name linux-6062a8dc0517bce23e3c2f7d2fea5e22411269a3-exit_sem
 * @id cpp/linux/6062a8dc0517bce23e3c2f7d2fea5e22411269a3/exit-sem
 * @description linux-6062a8dc0517bce23e3c2f7d2fea5e22411269a3-ipc/sem.c-exit_sem CVE-2013-4483
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsma_1716, Variable vun_1717, Parameter vtsk_1703, FunctionCall target_0) {
	target_0.getTarget().hasName("sem_lock_check")
	and not target_0.getTarget().hasName("sem_obtain_object_check")
	and target_0.getArgument(0).(PointerFieldAccess).getTarget().getName()="ipc_ns"
	and target_0.getArgument(0).(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="nsproxy"
	and target_0.getArgument(0).(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vtsk_1703
	and target_0.getArgument(1).(PointerFieldAccess).getTarget().getName()="semid"
	and target_0.getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vun_1717
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsma_1716
}

predicate func_1(Variable vsma_1716, FunctionCall target_1) {
	target_1.getTarget().hasName("ipc_unlock")
	and not target_1.getTarget().hasName("rcu_read_unlock")
	and target_1.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="sem_perm"
	and target_1.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsma_1716
}

predicate func_2(Variable vsma_1716, FunctionCall target_2) {
	target_2.getTarget().hasName("ipc_unlock")
	and not target_2.getTarget().hasName("sem_unlock")
	and target_2.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="sem_perm"
	and target_2.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsma_1716
}

predicate func_3(Variable vsma_1716, IfStmt target_21, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsma_1716
	and target_3.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
	and target_21.getLocation().isBefore(target_3.getLocation())
}

predicate func_4(IfStmt target_21, Function func, IfStmt target_4) {
	target_4.getCondition() instanceof FunctionCall
	and target_4.getThen() instanceof ContinueStmt
	and target_21.getLocation().isBefore(target_4.getLocation())
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable vsma_1716, ExprStmt target_22) {
exists(ExprStmt target_5 |
	target_5.getExpr().(FunctionCall).getTarget().hasName("sem_lock")
	and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsma_1716
	and target_5.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_5.getExpr().(FunctionCall).getArgument(2).(UnaryMinusExpr).getValue()="-1"
	and target_5.getLocation().isBefore(target_22.getLocation()))
}

predicate func_6(Variable vsma_1716, EqualityOperation target_24) {
exists(ExprStmt target_6 |
	target_6.getExpr().(FunctionCall).getTarget().hasName("sem_unlock")
	and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsma_1716
	and target_6.getExpr().(FunctionCall).getArgument(1).(UnaryMinusExpr).getValue()="-1"
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_6
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_24)
}

predicate func_8(Variable vsma_1716, ExprStmt target_25, AddressOfExpr target_26) {
exists(FunctionCall target_8 |
	target_8.getTarget().hasName("sem_unlock")
	and target_8.getArgument(0).(VariableAccess).getTarget()=vsma_1716
	and target_8.getArgument(1).(UnaryMinusExpr).getValue()="-1"
	and target_25.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_8.getArgument(0).(VariableAccess).getLocation())
	and target_8.getArgument(0).(VariableAccess).getLocation().isBefore(target_26.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_9(Function func, ExprStmt target_9) {
	target_9.getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Variable vsemid_1719, EqualityOperation target_10) {
	target_10.getLeftOperand().(VariableAccess).getTarget()=vsemid_1719
	and target_10.getRightOperand().(UnaryMinusExpr).getValue()="-1"
	and target_10.getParent().(IfStmt).getThen() instanceof BreakStmt
}

predicate func_11(Variable vsma_1716, FunctionCall target_11) {
	target_11.getTarget().hasName("IS_ERR")
	and target_11.getArgument(0).(VariableAccess).getTarget()=vsma_1716
	and target_11.getParent().(IfStmt).getThen() instanceof ContinueStmt
}

predicate func_13(EqualityOperation target_24, Function func, ContinueStmt target_13) {
	target_13.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_24
	and target_13.getEnclosingFunction() = func
}

predicate func_14(EqualityOperation target_10, Function func, BreakStmt target_14) {
	target_14.getParent().(IfStmt).getCondition()=target_10
	and target_14.getEnclosingFunction() = func
}

predicate func_15(FunctionCall target_11, Function func, ContinueStmt target_15) {
	target_15.getParent().(IfStmt).getCondition()=target_11
	and target_15.getEnclosingFunction() = func
}

predicate func_16(Variable vsma_1716, VariableAccess target_16) {
	target_16.getTarget()=vsma_1716
	and target_16.getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_17(Variable vsma_1716, VariableAccess target_17) {
	target_17.getTarget()=vsma_1716
	and target_17.getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_19(Variable vsma_1716, PointerFieldAccess target_19) {
	target_19.getTarget().getName()="sem_perm"
	and target_19.getQualifier().(VariableAccess).getTarget()=vsma_1716
}

predicate func_20(Variable vsma_1716, PointerFieldAccess target_20) {
	target_20.getTarget().getName()="sem_perm"
	and target_20.getQualifier().(VariableAccess).getTarget()=vsma_1716
}

predicate func_21(Function func, IfStmt target_21) {
	target_21.getCondition() instanceof EqualityOperation
	and target_21.getThen() instanceof BreakStmt
	and target_21.getEnclosingFunction() = func
}

predicate func_22(Variable vun_1717, Variable vsemid_1719, ExprStmt target_22) {
	target_22.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vun_1717
	and target_22.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("__lookup_undo")
	and target_22.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("sem_undo_list *")
	and target_22.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vsemid_1719
}

predicate func_24(Variable vun_1717, EqualityOperation target_24) {
	target_24.getLeftOperand().(VariableAccess).getTarget()=vun_1717
	and target_24.getRightOperand().(Literal).getValue()="0"
}

predicate func_25(Variable vsma_1716, ExprStmt target_25) {
	target_25.getExpr().(FunctionCall).getTarget().hasName("do_smart_update")
	and target_25.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsma_1716
	and target_25.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_25.getExpr().(FunctionCall).getArgument(2).(Literal).getValue()="0"
	and target_25.getExpr().(FunctionCall).getArgument(3).(Literal).getValue()="1"
	and target_25.getExpr().(FunctionCall).getArgument(4).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("list_head")
}

predicate func_26(Variable vsma_1716, AddressOfExpr target_26) {
	target_26.getOperand().(PointerFieldAccess).getTarget().getName()="sem_perm"
	and target_26.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsma_1716
	and target_26.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

from Function func, Variable vsma_1716, Variable vun_1717, Variable vsemid_1719, Parameter vtsk_1703, FunctionCall target_0, FunctionCall target_1, FunctionCall target_2, ExprStmt target_3, IfStmt target_4, ExprStmt target_9, EqualityOperation target_10, FunctionCall target_11, ContinueStmt target_13, BreakStmt target_14, ContinueStmt target_15, VariableAccess target_16, VariableAccess target_17, PointerFieldAccess target_19, PointerFieldAccess target_20, IfStmt target_21, ExprStmt target_22, EqualityOperation target_24, ExprStmt target_25, AddressOfExpr target_26
where
func_0(vsma_1716, vun_1717, vtsk_1703, target_0)
and func_1(vsma_1716, target_1)
and func_2(vsma_1716, target_2)
and func_3(vsma_1716, target_21, target_3)
and func_4(target_21, func, target_4)
and not func_5(vsma_1716, target_22)
and not func_6(vsma_1716, target_24)
and not func_8(vsma_1716, target_25, target_26)
and func_9(func, target_9)
and func_10(vsemid_1719, target_10)
and func_11(vsma_1716, target_11)
and func_13(target_24, func, target_13)
and func_14(target_10, func, target_14)
and func_15(target_11, func, target_15)
and func_16(vsma_1716, target_16)
and func_17(vsma_1716, target_17)
and func_19(vsma_1716, target_19)
and func_20(vsma_1716, target_20)
and func_21(func, target_21)
and func_22(vun_1717, vsemid_1719, target_22)
and func_24(vun_1717, target_24)
and func_25(vsma_1716, target_25)
and func_26(vsma_1716, target_26)
and vsma_1716.getType().hasName("sem_array *")
and vun_1717.getType().hasName("sem_undo *")
and vsemid_1719.getType().hasName("int")
and vtsk_1703.getType().hasName("task_struct *")
and vsma_1716.(LocalVariable).getFunction() = func
and vun_1717.(LocalVariable).getFunction() = func
and vsemid_1719.(LocalVariable).getFunction() = func
and vtsk_1703.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
