commit 44e4da61d1d1341ecf2b74a99acbc357ca3357cf	44e4da61d1d1341ecf2b74a99acbc357ca3357cf
Author: Samar Pratap Singh <samar.pratap.singh@oracle.com>
Date:   Tue Aug 23 10:47:59 2022 +0000

    BUG#34274914  Failure to parse RSA private key (file exists): ... no start line
    
    PROBLEM:
    If server crashes while creating RSA key files during startup, keys
    might not be written properly and the generated key files could be empty
    or incomplete. This causes failure during server restart.
    
    ========================================================================
    
    FIX:
    Now key files are created in a crash safe manner. Keys are first written
    to temp files and after a flush & sync renamed to respective key files.
    During startup, if temp files are found, they are discarded. In case
    only a private key file and a public temp file are present, the private
    key file is also discarded. Lastly, if no key file is present server
    generates them.
    
    Change-Id: Idca441a2a3ccef65a57d5392069ac6f8f42b28a1

diff --git a/mysql-test/suite/auth_sec/t/openssl_cert_generation_debug.test b/mysql-test/suite/auth_sec/t/openssl_cert_generation_debug.test
index 301ca6e8dd7..118c3ff98d3 100644
--- a/mysql-test/suite/auth_sec/t/openssl_cert_generation_debug.test
+++ b/mysql-test/suite/auth_sec/t/openssl_cert_generation_debug.test
@@ -86,14 +86,14 @@ let debug_pattern= "d,key_file_write_error";
 let error_pattern= Could not write private key file: ;
 --source include/openssl_cert_generation_debug_test.inc
 
---remove_file $MYSQLTEST_VARDIR/mysqld.1/data/private_key.pem
+--remove_file $MYSQLTEST_VARDIR/mysqld.1/data/private_key.pem.temp
 
 let debug_pattern= "d,cert_pub_key_write_error";
 let error_pattern= Could not write public key file: ;
 --source include/openssl_cert_generation_debug_test.inc
 
---remove_file $MYSQLTEST_VARDIR/mysqld.1/data/private_key.pem
---remove_file $MYSQLTEST_VARDIR/mysqld.1/data/public_key.pem
+--remove_file $MYSQLTEST_VARDIR/mysqld.1/data/private_key.pem.temp
+--remove_file $MYSQLTEST_VARDIR/mysqld.1/data/public_key.pem.temp
 
 --echo # 4. Restart the server and cleanup
 
diff --git a/sql/auth/sql_authentication.cc b/sql/auth/sql_authentication.cc
index e78b3987410..4b52bb369a2 100644
--- a/sql/auth/sql_authentication.cc
+++ b/sql/auth/sql_authentication.cc
@@ -1205,7 +1205,7 @@ bool Rsa_authentication_keys::read_key_file(RSA **key_ptr, bool is_priv_key,
         OpenSSL thread's error queue.
       */
       ERR_clear_error();
-
+      fclose(key_file);
       return true;
     }
 
@@ -4580,6 +4580,30 @@ class FileCloser {
 */
 
 bool init_rsa_keys(void) {
+  if ((strcmp(auth_rsa_private_key_path, AUTH_DEFAULT_RSA_PRIVATE_KEY) == 0 &&
+       strcmp(auth_rsa_public_key_path, AUTH_DEFAULT_RSA_PUBLIC_KEY) == 0) ||
+      (strcmp(caching_sha2_rsa_private_key_path,
+              AUTH_DEFAULT_RSA_PRIVATE_KEY) == 0 &&
+       strcmp(caching_sha2_rsa_public_key_path, AUTH_DEFAULT_RSA_PUBLIC_KEY) ==
+           0)) {
+    /**
+      Presence of only a private key file and a public temp file implies that
+      server crashed after creating the private key file and could not create a
+      public key file. Hence removing the private key file.
+    */
+    if (access(AUTH_DEFAULT_RSA_PRIVATE_KEY, F_OK) == 0 &&
+        access(AUTH_DEFAULT_RSA_PUBLIC_KEY, F_OK) == -1) {
+      if (access((std::string{AUTH_DEFAULT_RSA_PUBLIC_KEY} + ".temp").c_str(),
+                 F_OK) == 0 &&
+          access((std::string{AUTH_DEFAULT_RSA_PRIVATE_KEY} + ".temp").c_str(),
+                 F_OK) == -1)
+        remove(AUTH_DEFAULT_RSA_PRIVATE_KEY);
+    }
+    // Removing temp files
+    remove((std::string{AUTH_DEFAULT_RSA_PRIVATE_KEY} + ".temp").c_str());
+    remove((std::string{AUTH_DEFAULT_RSA_PUBLIC_KEY} + ".temp").c_str());
+  }
+
   if (!do_auto_rsa_keys_generation()) return true;
 
   if (!(g_sha256_rsa_keys = new Rsa_authentication_keys(
@@ -5071,6 +5095,8 @@ File_IO &File_IO::operator<<(const Sql_string_t &output_string) {
                    reinterpret_cast<const uchar *>(output_string.data()),
                    output_string.length(), MYF(MY_NABP | MY_WME)))
     set_error();
+  else
+    my_sync(m_file, MYF(MY_WME));
 
   close();
   return *this;
@@ -5620,13 +5646,15 @@ bool create_RSA_key_pair(RSA_generator_func &rsa_gen,
                          const Sql_string_t priv_key_filename,
                          const Sql_string_t pub_key_filename,
                          File_creation_func &filecr) {
+  std::string temp_priv_key_filename = priv_key_filename + ".temp";
+  std::string temp_pub_key_filename = pub_key_filename + ".temp";
   bool ret_val = true;
   File_IO *priv_key_file_ostream = nullptr;
   File_IO *pub_key_file_ostream = nullptr;
   MY_MODE file_creation_mode = get_file_perm(USER_READ | USER_WRITE);
   MY_MODE saved_umask = umask(~(file_creation_mode));
 
-  assert(priv_key_filename.size() && pub_key_filename.size());
+  assert(temp_priv_key_filename.size() && temp_pub_key_filename.size());
 
 #if OPENSSL_VERSION_NUMBER >= 0x30000000L
   EVP_PKEY *rsa;
@@ -5652,10 +5680,12 @@ bool create_RSA_key_pair(RSA_generator_func &rsa_gen,
     ret_val = false;
     goto end;
   }
+  DBUG_EXECUTE_IF("no_key_files", DBUG_SUICIDE(););
 
-  priv_key_file_ostream = filecr(priv_key_filename, file_creation_mode);
-  (*priv_key_file_ostream) << rsa_priv_key_write(rsa);
+  priv_key_file_ostream = filecr(temp_priv_key_filename, file_creation_mode);
+  DBUG_EXECUTE_IF("empty_priv_key_temp_file", DBUG_SUICIDE(););
 
+  (*priv_key_file_ostream) << rsa_priv_key_write(rsa);
   DBUG_EXECUTE_IF("key_file_write_error",
                   { priv_key_file_ostream->set_error(); });
   if (priv_key_file_ostream->get_error()) {
@@ -5663,15 +5693,20 @@ bool create_RSA_key_pair(RSA_generator_func &rsa_gen,
     ret_val = false;
     goto end;
   }
-  if (my_chmod(priv_key_filename.c_str(), USER_READ | USER_WRITE,
+  if (my_chmod(temp_priv_key_filename.c_str(), USER_READ | USER_WRITE,
                MYF(MY_FAE + MY_WME))) {
     LogErr(ERROR_LEVEL, ER_X509_CANT_CHMOD_KEY, priv_key_filename.c_str());
     ret_val = false;
     goto end;
   }
+  DBUG_EXECUTE_IF("valid_priv_key_temp_file", DBUG_SUICIDE(););
+
+  pub_key_file_ostream = filecr(temp_pub_key_filename);
+  DBUG_EXECUTE_IF("valid_priv_key_temp_file_empty_pub_key_temp_file",
+                  DBUG_SUICIDE(););
 
-  pub_key_file_ostream = filecr(pub_key_filename);
   (*pub_key_file_ostream) << rsa_pub_key_write(rsa);
+
   DBUG_EXECUTE_IF("cert_pub_key_write_error",
                   { pub_key_file_ostream->set_error(); });
 
@@ -5680,13 +5715,20 @@ bool create_RSA_key_pair(RSA_generator_func &rsa_gen,
     ret_val = false;
     goto end;
   }
-  if (my_chmod(pub_key_filename.c_str(),
+  if (my_chmod(temp_pub_key_filename.c_str(),
                USER_READ | USER_WRITE | GROUP_READ | OTHERS_READ,
                MYF(MY_FAE + MY_WME))) {
     LogErr(ERROR_LEVEL, ER_X509_CANT_CHMOD_KEY, pub_key_filename.c_str());
     ret_val = false;
     goto end;
   }
+  DBUG_EXECUTE_IF("valid_key_temp_files", DBUG_SUICIDE(););
+
+  rename(temp_priv_key_filename.c_str(), priv_key_filename.c_str());
+  DBUG_EXECUTE_IF("valid_pub_key_temp_file_valid_priv_key_file",
+                  DBUG_SUICIDE(););
+  rename(temp_pub_key_filename.c_str(), pub_key_filename.c_str());
+  DBUG_EXECUTE_IF("valid_key_files", DBUG_SUICIDE(););
 
 end:
   if (rsa)
