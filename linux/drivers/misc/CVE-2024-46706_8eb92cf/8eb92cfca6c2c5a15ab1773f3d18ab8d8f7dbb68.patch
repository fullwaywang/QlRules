commit 8eb92cfca6c2c5a15ab1773f3d18ab8d8f7dbb68
Author: Peng Fan <peng.fan@nxp.com>
Date:   Thu Aug 8 22:03:25 2024 +0800

    tty: serial: fsl_lpuart: mark last busy before uart_add_one_port
    
    commit dc98d76a15bc29a9a4e76f2f65f39f3e590fb15c upstream.
    
    With "earlycon initcall_debug=1 loglevel=8" in bootargs, kernel
    sometimes boot hang. It is because normal console still is not ready,
    but runtime suspend is called, so early console putchar will hang
    in waiting TRDE set in UARTSTAT.
    
    The lpuart driver has auto suspend delay set to 3000ms, but during
    uart_add_one_port, a child device serial ctrl will added and probed with
    its pm runtime enabled(see serial_ctrl.c).
    The runtime suspend call path is:
    device_add
         |-> bus_probe_device
               |->device_initial_probe
                       |->__device_attach
                             |-> pm_runtime_get_sync(dev->parent);
                             |-> pm_request_idle(dev);
                             |-> pm_runtime_put(dev->parent);
    
    So in the end, before normal console ready, the lpuart get runtime
    suspended. And earlycon putchar will hang.
    
    To address the issue, mark last busy just after pm_runtime_enable,
    three seconds is long enough to switch from bootconsole to normal
    console.
    
    Fixes: 43543e6f539b ("tty: serial: fsl_lpuart: Add runtime pm support")
    Cc: stable <stable@kernel.org>
    Signed-off-by: Peng Fan <peng.fan@nxp.com>
    Link: https://lore.kernel.org/r/20240808140325.580105-1-peng.fan@oss.nxp.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/tty/serial/fsl_lpuart.c b/drivers/tty/serial/fsl_lpuart.c
index 385b41275e8b..8bd0f8e45b14 100644
--- a/drivers/tty/serial/fsl_lpuart.c
+++ b/drivers/tty/serial/fsl_lpuart.c
@@ -2930,6 +2930,7 @@ static int lpuart_probe(struct platform_device *pdev)
 	pm_runtime_set_autosuspend_delay(&pdev->dev, UART_AUTOSUSPEND_TIMEOUT);
 	pm_runtime_set_active(&pdev->dev);
 	pm_runtime_enable(&pdev->dev);
+	pm_runtime_mark_last_busy(&pdev->dev);
 
 	ret = lpuart_global_reset(sport);
 	if (ret)
