/**
 * @name linux-768d612f79822d30a1e7d132a4d4b05337ce42ec-ext4_es_insert_delayed_block
 * @id cpp/linux/768d612f79822d30a1e7d132a4d4b05337ce42ec/ext4-es-insert-delayed-block
 * @description linux-768d612f79822d30a1e7d132a4d4b05337ce42ec-fs/ext4/extents_status.c-ext4_es_insert_delayed_block CVE-2023-45898
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable ves1_2024, LogicalAndExpr target_9, LogicalAndExpr target_8) {
	exists(IfStmt target_0 |
		target_0.getCondition() instanceof NotExpr
		and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__es_free_extent")
		and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ves1_2024
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
		and target_8.getAnOperand().(VariableAccess).getLocation().isBefore(target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable ves1_2024, LogicalAndExpr target_9, ExprStmt target_10) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=ves1_2024
		and target_1.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
		and target_10.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation()))
}

predicate func_2(Variable ves2_2025, LogicalAndExpr target_8, LogicalAndExpr target_9) {
	exists(IfStmt target_2 |
		target_2.getCondition() instanceof NotExpr
		and target_2.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__es_free_extent")
		and target_2.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ves2_2025
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_2
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8
		and target_9.getAnOperand().(VariableAccess).getLocation().isBefore(target_2.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Variable ves2_2025, LogicalAndExpr target_8, ExprStmt target_11, LogicalAndExpr target_9) {
	exists(ExprStmt target_3 |
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=ves2_2025
		and target_3.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_3
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8
		and target_11.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation())
		and target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_9.getAnOperand().(VariableAccess).getLocation()))
}

predicate func_4(Variable ves1_2024, ExprStmt target_10, NotExpr target_4) {
		target_4.getOperand().(PointerFieldAccess).getTarget().getName()="es_len"
		and target_4.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ves1_2024
		and target_4.getParent().(LogicalAndExpr).getAnOperand().(VariableAccess).getTarget()=ves1_2024
		and target_4.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_10
}

predicate func_5(Variable ves2_2025, ExprStmt target_12, NotExpr target_5) {
		target_5.getOperand().(PointerFieldAccess).getTarget().getName()="es_len"
		and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ves2_2025
		and target_5.getParent().(LogicalAndExpr).getAnOperand().(VariableAccess).getTarget()=ves2_2025
		and target_5.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_12
}

/*predicate func_6(Variable ves1_2024, ExprStmt target_10, VariableAccess target_6) {
		target_6.getTarget()=ves1_2024
		and target_6.getParent().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="es_len"
		and target_6.getParent().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ves1_2024
		and target_6.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_10
}

*/
/*predicate func_7(Variable ves2_2025, ExprStmt target_12, VariableAccess target_7) {
		target_7.getTarget()=ves2_2025
		and target_7.getParent().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="es_len"
		and target_7.getParent().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ves2_2025
		and target_7.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_12
}

*/
predicate func_8(Variable ves1_2024, ExprStmt target_10, LogicalAndExpr target_8) {
		target_8.getAnOperand().(VariableAccess).getTarget()=ves1_2024
		and target_8.getAnOperand() instanceof NotExpr
		and target_8.getParent().(IfStmt).getThen()=target_10
}

predicate func_9(Variable ves2_2025, ExprStmt target_12, LogicalAndExpr target_9) {
		target_9.getAnOperand().(VariableAccess).getTarget()=ves2_2025
		and target_9.getAnOperand() instanceof NotExpr
		and target_9.getParent().(IfStmt).getThen()=target_12
}

predicate func_10(Variable ves1_2024, ExprStmt target_10) {
		target_10.getExpr().(FunctionCall).getTarget().hasName("__es_free_extent")
		and target_10.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ves1_2024
}

predicate func_11(Variable ves2_2025, ExprStmt target_11) {
		target_11.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_11.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("__es_insert_extent")
		and target_11.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("inode *")
		and target_11.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("extent_status")
		and target_11.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=ves2_2025
}

predicate func_12(Variable ves2_2025, ExprStmt target_12) {
		target_12.getExpr().(FunctionCall).getTarget().hasName("__es_free_extent")
		and target_12.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ves2_2025
}

from Function func, Variable ves1_2024, Variable ves2_2025, NotExpr target_4, NotExpr target_5, LogicalAndExpr target_8, LogicalAndExpr target_9, ExprStmt target_10, ExprStmt target_11, ExprStmt target_12
where
not func_0(ves1_2024, target_9, target_8)
and not func_1(ves1_2024, target_9, target_10)
and not func_2(ves2_2025, target_8, target_9)
and not func_3(ves2_2025, target_8, target_11, target_9)
and func_4(ves1_2024, target_10, target_4)
and func_5(ves2_2025, target_12, target_5)
and func_8(ves1_2024, target_10, target_8)
and func_9(ves2_2025, target_12, target_9)
and func_10(ves1_2024, target_10)
and func_11(ves2_2025, target_11)
and func_12(ves2_2025, target_12)
and ves1_2024.getType().hasName("extent_status *")
and ves2_2025.getType().hasName("extent_status *")
and ves1_2024.(LocalVariable).getFunction() = func
and ves2_2025.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
