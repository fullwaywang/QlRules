/**
 * @name linux-2896900e22f8212606a1837d89a6bbce314ceeda-ovl_mmap
 * @id cpp/linux/2896900e22f8212606a1837d89a6bbce314ceeda/ovl-mmap
 * @description linux-2896900e22f8212606a1837d89a6bbce314ceeda-fs/overlayfs/file.c-ovl_mmap CVE-2019-15794
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vrealfile_423, FunctionCall target_0) {
	target_0.getTarget().hasName("fput")
	and not target_0.getTarget().hasName("vma_set_file")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vrealfile_423
}

predicate func_1(Parameter vvma_421, VariableAccess target_1) {
	target_1.getTarget()=vvma_421
}

predicate func_2(Variable vrealfile_423, VariableAccess target_2) {
	target_2.getTarget()=vrealfile_423
	and target_2.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_3(Parameter vvma_421, Variable vrealfile_423, AssignExpr target_3) {
	target_3.getLValue().(PointerFieldAccess).getTarget().getName()="vm_file"
	and target_3.getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_421
	and target_3.getRValue().(FunctionCall).getTarget().hasName("get_file")
	and target_3.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrealfile_423
}

predicate func_4(Parameter vfile_421, Variable vret_425, Function func, IfStmt target_4) {
	target_4.getCondition().(VariableAccess).getTarget()=vret_425
	and target_4.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr() instanceof FunctionCall
	and target_4.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("fput")
	and target_4.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vfile_421
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
}

/*predicate func_5(VariableAccess target_7, Function func, ExprStmt target_5) {
	target_5.getExpr() instanceof FunctionCall
	and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
	and target_5.getEnclosingFunction() = func
}

*/
/*predicate func_6(Parameter vfile_421, VariableAccess target_7, ExprStmt target_6) {
	target_6.getExpr().(FunctionCall).getTarget().hasName("fput")
	and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vfile_421
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
}

*/
predicate func_7(Variable vret_425, BlockStmt target_8, VariableAccess target_7) {
	target_7.getTarget()=vret_425
	and target_7.getParent().(IfStmt).getThen()=target_8
}

predicate func_8(Function func, BlockStmt target_8) {
	target_8.getStmt(0) instanceof ExprStmt
	and target_8.getEnclosingFunction() = func
}

from Function func, Parameter vfile_421, Parameter vvma_421, Variable vrealfile_423, Variable vret_425, FunctionCall target_0, VariableAccess target_1, VariableAccess target_2, AssignExpr target_3, IfStmt target_4, VariableAccess target_7, BlockStmt target_8
where
func_0(vrealfile_423, target_0)
and func_1(vvma_421, target_1)
and func_2(vrealfile_423, target_2)
and func_3(vvma_421, vrealfile_423, target_3)
and func_4(vfile_421, vret_425, func, target_4)
and func_7(vret_425, target_8, target_7)
and func_8(func, target_8)
and vfile_421.getType().hasName("file *")
and vvma_421.getType().hasName("vm_area_struct *")
and vrealfile_423.getType().hasName("file *")
and vret_425.getType().hasName("int")
and vfile_421.getFunction() = func
and vvma_421.getFunction() = func
and vrealfile_423.(LocalVariable).getFunction() = func
and vret_425.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
