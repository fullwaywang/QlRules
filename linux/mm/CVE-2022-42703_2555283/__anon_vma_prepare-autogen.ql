/**
 * @name linux-2555283eb40df89945557273121e9393ef9b542b-__anon_vma_prepare
 * @id cpp/linux/2555283eb40df89945557273121e9393ef9b542b/--anon-vma-prepare
 * @description linux-2555283eb40df89945557273121e9393ef9b542b-__anon_vma_prepare CVE-2022-42703
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vanon_vma_189, ExprStmt target_4) {
	exists(PostfixIncrExpr target_0 |
		target_0.getOperand().(PointerFieldAccess).getTarget().getName()="num_children"
		and target_0.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vanon_vma_189
		and target_0.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vanon_vma_189, FunctionCall target_5, ExprStmt target_6) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(PostfixIncrExpr).getOperand().(PointerFieldAccess).getTarget().getName()="num_active_vmas"
		and target_1.getExpr().(PostfixIncrExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vanon_vma_189
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
		and target_6.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_1.getExpr().(PostfixIncrExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vanon_vma_189, VariableAccess target_2) {
		target_2.getTarget()=vanon_vma_189
}

predicate func_3(Variable vanon_vma_189, PostfixIncrExpr target_3) {
		target_3.getOperand().(PointerFieldAccess).getTarget().getName()="degree"
		and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vanon_vma_189
}

predicate func_4(Variable vanon_vma_189, ExprStmt target_4) {
		target_4.getExpr().(FunctionCall).getTarget().hasName("anon_vma_unlock_write")
		and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vanon_vma_189
}

predicate func_5(Function func, FunctionCall target_5) {
		target_5.getTarget().hasName("__builtin_expect")
		and target_5.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="anon_vma"
		and target_5.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("vm_area_struct *")
		and target_5.getArgument(1).(Literal).getValue()="1"
		and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable vanon_vma_189, ExprStmt target_6) {
		target_6.getExpr().(FunctionCall).getTarget().hasName("anon_vma_chain_link")
		and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("vm_area_struct *")
		and target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("anon_vma_chain *")
		and target_6.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vanon_vma_189
}

from Function func, Variable vanon_vma_189, VariableAccess target_2, PostfixIncrExpr target_3, ExprStmt target_4, FunctionCall target_5, ExprStmt target_6
where
not func_0(vanon_vma_189, target_4)
and not func_1(vanon_vma_189, target_5, target_6)
and func_2(vanon_vma_189, target_2)
and func_3(vanon_vma_189, target_3)
and func_4(vanon_vma_189, target_4)
and func_5(func, target_5)
and func_6(vanon_vma_189, target_6)
and vanon_vma_189.getType().hasName("anon_vma *")
and vanon_vma_189.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
