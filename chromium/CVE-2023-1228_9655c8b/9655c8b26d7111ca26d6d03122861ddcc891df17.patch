commit 9655c8b26d7111ca26d6d03122861ddcc891df17	9655c8b26d7111ca26d6d03122861ddcc891df17
Author: Michael Thiessen <mthiesse@chromium.org>
Date:   Fri Jan 13 21:06:33 2023 +0000

    Support fallback URLs in subframes
    
    If a subframe external navigation fails and a fallback URL is used, that
    fallback URL should redirect the frame that performed the navigation.
    
    A followup change will support async actions using fallback URLs as
    well.
    
    Functionality changes are flag-guarded in case things unexpectedly
    break.
    
    Bug: 1365100
    Change-Id: Id1b6120c51a0961fe524bff671c791ff3ea2c498
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4068379
    Commit-Queue: Michael Thiessen <mthiesse@chromium.org>
    Reviewed-by: Yaron Friedman <yfriedman@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1092610}

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateClientImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateClientImpl.java
index b13cd6b15afe0..f5437aefb71c7 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateClientImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateClientImpl.java
@@ -28,6 +28,10 @@ public class InterceptNavigationDelegateClientImpl implements InterceptNavigatio
     private final TabObserver mTabObserver;
     private InterceptNavigationDelegateImpl mInterceptNavigationDelegate;
 
+    public static InterceptNavigationDelegateClientImpl createForTesting(Tab tab) {
+        return new InterceptNavigationDelegateClientImpl(tab);
+    }
+
     InterceptNavigationDelegateClientImpl(Tab tab) {
         mTab = (TabImpl) tab;
         mTabObserver = new EmptyTabObserver() {
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTabHelper.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTabHelper.java
index 883795a7ab54f..fca3664dc6572 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTabHelper.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTabHelper.java
@@ -14,8 +14,14 @@ public class InterceptNavigationDelegateTabHelper implements UserData {
     private static final Class<InterceptNavigationDelegateTabHelper> USER_DATA_KEY =
             InterceptNavigationDelegateTabHelper.class;
 
-    private final InterceptNavigationDelegateImpl mInterceptNavigationDelegate;
-    private final InterceptNavigationDelegateClientImpl mInterceptNavigationDelegateClient;
+    private InterceptNavigationDelegateImpl mInterceptNavigationDelegate;
+    private InterceptNavigationDelegateClientImpl mInterceptNavigationDelegateClient;
+
+    public static void setDelegateForTesting(Tab tab, InterceptNavigationDelegateImpl delegate) {
+        InterceptNavigationDelegateTabHelper helper =
+                tab.getUserDataHost().getUserData(USER_DATA_KEY);
+        helper.mInterceptNavigationDelegate = delegate;
+    }
 
     public static void createForTab(Tab tab) {
         assert get(tab) == null;
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
index 93d0c36d830c9..58f64e334ab68 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
@@ -69,6 +69,7 @@ import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.flags.ChromeSwitches;
 import org.chromium.chrome.browser.init.AsyncInitializationActivity;
 import org.chromium.chrome.browser.tab.EmptyTabObserver;
+import org.chromium.chrome.browser.tab.InterceptNavigationDelegateClientImpl;
 import org.chromium.chrome.browser.tab.InterceptNavigationDelegateTabHelper;
 import org.chromium.chrome.browser.tab.RedirectHandlerTabHelper;
 import org.chromium.chrome.browser.tab.Tab;
@@ -78,6 +79,7 @@ import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
 import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
 import org.chromium.chrome.test.util.browser.Features;
 import org.chromium.components.embedder_support.util.UrlConstants;
+import org.chromium.components.external_intents.ExternalIntentsFeatures;
 import org.chromium.components.external_intents.ExternalNavigationHandler;
 import org.chromium.components.external_intents.ExternalNavigationHandler.OverrideUrlLoadingResult;
 import org.chromium.components.external_intents.ExternalNavigationHandler.OverrideUrlLoadingResultType;
@@ -188,13 +190,11 @@ public class UrlOverridingTest {
 
     private static class TestTabObserver extends EmptyTabObserver {
         private final CallbackHelper mFinishCallback;
-        private final CallbackHelper mFailCallback;
         private final CallbackHelper mDestroyedCallback;
 
-        TestTabObserver(final CallbackHelper finishCallback, final CallbackHelper failCallback,
-                final CallbackHelper destroyedCallback) {
+        TestTabObserver(
+                final CallbackHelper finishCallback, final CallbackHelper destroyedCallback) {
             mFinishCallback = finishCallback;
-            mFailCallback = failCallback;
             mDestroyedCallback = destroyedCallback;
         }
 
@@ -393,15 +393,14 @@ public class UrlOverridingTest {
 
         latestDelegateHolder[0].setResultCallbackForTesting(resultCallback);
         TestThreadUtils.runOnUiThreadBlocking(() -> {
-            tab.addObserver(new TestTabObserver(finishCallback, failCallback, destroyedCallback));
+            tab.addObserver(new TestTabObserver(finishCallback, destroyedCallback));
 
             TabModelSelectorObserver selectorObserver = new TabModelSelectorObserver() {
                 @Override
                 public void onNewTabCreated(Tab newTab, @TabCreationState int creationState) {
                     Assert.assertTrue(createsNewTab);
                     newTabCallback.notifyCalled();
-                    newTab.addObserver(
-                            new TestTabObserver(finishCallback, failCallback, destroyedCallback));
+                    newTab.addObserver(new TestTabObserver(finishCallback, destroyedCallback));
                     latestTabHolder[0] = newTab;
                     latestDelegateHolder[0].setResultCallbackForTesting(null);
                     latestDelegateHolder[0] = getInterceptNavigationDelegate(newTab);
@@ -490,6 +489,7 @@ public class UrlOverridingTest {
         // from the ExternalNavigationHandler. As a result, there is no guarantee
         // when url override result would come.
         CriteriaHelper.pollUiThread(() -> {
+            Criteria.checkThat(lastResultValue.get(), Matchers.notNullValue());
             // Note that we do not distinguish between OVERRIDE_WITH_NAVIGATE_TAB
             // and NO_OVERRIDE since tab clobbering will eventually lead to NO_OVERRIDE.
             // in the tab. Rather, we check the final URL to distinguish between
@@ -649,7 +649,8 @@ public class UrlOverridingTest {
 
     @Test
     @SmallTest
-    public void testNavigationWithFallbackURLInSubFrame() {
+    @Features.DisableFeatures({ExternalIntentsFeatures.EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS_NAME})
+    public void testNavigationWithFallbackURLInSubFrame_FallbackDisabled() {
         mActivityTestRule.startMainActivityOnBlankPage();
         // The replace_text parameters for NAVIGATION_WITH_FALLBACK_URL_PAGE, which is loaded in
         // the iframe in NAVIGATION_WITH_FALLBACK_URL_PARENT_FRAME_PAGE, have to go through the
@@ -675,6 +676,55 @@ public class UrlOverridingTest {
         Assert.assertEquals(fallbackUrl, result.getTargetUrl().getSpec());
     }
 
+    @Test
+    @SmallTest
+    @Features.EnableFeatures({ExternalIntentsFeatures.EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS_NAME})
+    public void testNavigationWithFallbackURLInSubFrame_FallbackEnabled() throws Exception {
+        mActivityTestRule.startMainActivityOnBlankPage();
+        // The replace_text parameters for NAVIGATION_WITH_FALLBACK_URL_PAGE, which is loaded in
+        // the iframe in NAVIGATION_WITH_FALLBACK_URL_PARENT_FRAME_PAGE, have to go through the
+        // embedded test server twice and, as such, have to be base64-encoded twice.
+        String fallbackUrl = mTestServer.getURL(FALLBACK_LANDING_PATH);
+        byte[] paramBase64Name = ApiCompatibilityUtils.getBytesUtf8("PARAM_BASE64_NAME");
+        byte[] base64ParamFallbackUrl = Base64.encode(
+                ApiCompatibilityUtils.getBytesUtf8("PARAM_FALLBACK_URL"), Base64.URL_SAFE);
+        byte[] paramBase64Value = ApiCompatibilityUtils.getBytesUtf8("PARAM_BASE64_VALUE");
+        byte[] base64FallbackUrl =
+                Base64.encode(ApiCompatibilityUtils.getBytesUtf8(fallbackUrl), Base64.URL_SAFE);
+
+        String originalUrl = mTestServer.getURL(NAVIGATION_WITH_FALLBACK_URL_PARENT_FRAME_PAGE
+                + "?replace_text=" + Base64.encodeToString(paramBase64Name, Base64.URL_SAFE) + ":"
+                + Base64.encodeToString(base64ParamFallbackUrl, Base64.URL_SAFE)
+                + "&replace_text=" + Base64.encodeToString(paramBase64Value, Base64.URL_SAFE) + ":"
+                + Base64.encodeToString(base64FallbackUrl, Base64.URL_SAFE));
+
+        final Tab tab = mActivityTestRule.getActivity().getActivityTab();
+
+        final CallbackHelper subframeRedirect = new CallbackHelper();
+        EmptyTabObserver observer = new EmptyTabObserver() {
+            @Override
+            public void onDidStartNavigationInPrimaryMainFrame(
+                    Tab tab, NavigationHandle navigation) {
+                Assert.assertEquals(originalUrl, navigation.getUrl().getSpec());
+            }
+
+            @Override
+            public void onDidRedirectNavigation(Tab tab, NavigationHandle navigation) {
+                Assert.assertFalse(navigation.isInPrimaryMainFrame());
+                Assert.assertEquals(fallbackUrl, navigation.getUrl().getSpec());
+                subframeRedirect.notifyCalled();
+            }
+        };
+        TestThreadUtils.runOnUiThreadBlocking(() -> { tab.addObserver(observer); });
+
+        // Fallback URL from a subframe will not trigger main navigation.
+        OverrideUrlLoadingResult result =
+                loadUrlAndWaitForIntentUrl(originalUrl, true, false, false, originalUrl, false);
+        Assert.assertEquals(
+                OverrideUrlLoadingResultType.OVERRIDE_WITH_NAVIGATE_TAB, result.getResultType());
+        subframeRedirect.waitForFirst();
+    }
+
     @Test
     @SmallTest
     public void testOpenWindowFromUserGesture() {
@@ -825,7 +875,8 @@ public class UrlOverridingTest {
 
     @Test
     @LargeTest
-    public void testSubframeLoadCannotLaunchPlayApp() throws TimeoutException {
+    @Features.DisableFeatures({ExternalIntentsFeatures.EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS_NAME})
+    public void testSubframeLoadCannotLaunchPlayApp_FallbackDisabled() throws TimeoutException {
         mActivityTestRule.startMainActivityOnBlankPage();
         // TODO(https://crbug.com/1365100): Verify the fallback URL is loaded once implemented.
         OverrideUrlLoadingResult result = loadUrlAndWaitForIntentUrl(
@@ -835,6 +886,66 @@ public class UrlOverridingTest {
         Assert.assertEquals(FALLBACK_URL, result.getTargetUrl().getSpec());
     }
 
+    @Test
+    @LargeTest
+    @Features.EnableFeatures({ExternalIntentsFeatures.EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS_NAME})
+    public void testSubframeLoadCannotLaunchPlayApp_FallbackEnabled() throws TimeoutException {
+        String fallbackUrl = "https://play.google.com/store/apps/details?id=com.android.chrome";
+        String mainUrl = mTestServer.getURL(SUBFRAME_REDIRECT_WITH_PLAY_FALLBACK);
+        String redirectUrl = mTestServer.getURL(HELLO_PAGE);
+        mActivityTestRule.startMainActivityOnBlankPage();
+
+        final Tab tab = mActivityTestRule.getActivity().getActivityTab();
+
+        final CallbackHelper subframeExternalProtocol = new CallbackHelper();
+        final CallbackHelper subframeRedirect = new CallbackHelper();
+        EmptyTabObserver observer = new EmptyTabObserver() {
+            @Override
+            public void onDidStartNavigationInPrimaryMainFrame(
+                    Tab tab, NavigationHandle navigation) {
+                Assert.assertEquals(mainUrl, navigation.getUrl().getSpec());
+            }
+
+            @Override
+            public void onDidRedirectNavigation(Tab tab, NavigationHandle navigation) {
+                Assert.assertFalse(navigation.isInPrimaryMainFrame());
+                Assert.assertEquals(redirectUrl, navigation.getUrl().getSpec());
+                subframeRedirect.notifyCalled();
+            }
+        };
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            tab.addObserver(observer);
+
+            InterceptNavigationDelegateClientImpl client =
+                    InterceptNavigationDelegateClientImpl.createForTesting(tab);
+            InterceptNavigationDelegateImpl delegate = new InterceptNavigationDelegateImpl(client) {
+                @Override
+                public GURL handleSubframeExternalProtocol(GURL escapedUrl,
+                        @PageTransition int transition, boolean hasUserGesture,
+                        Origin initiatorOrigin) {
+                    GURL target = super.handleSubframeExternalProtocol(
+                            escapedUrl, transition, hasUserGesture, initiatorOrigin);
+                    Assert.assertEquals(fallbackUrl, target.getSpec());
+                    subframeExternalProtocol.notifyCalled();
+                    // We can't actually load the play store URL in tests.
+                    return new GURL(redirectUrl);
+                }
+            };
+            client.initializeWithDelegate(delegate);
+            delegate.setExternalNavigationHandler(
+                    new ExternalNavigationHandler(new ExternalNavigationDelegateImpl(tab)));
+            delegate.associateWithWebContents(tab.getWebContents());
+            InterceptNavigationDelegateTabHelper.setDelegateForTesting(tab, delegate);
+        });
+
+        OverrideUrlLoadingResult result =
+                loadUrlAndWaitForIntentUrl(mainUrl, false, false, false, mainUrl, false);
+        Assert.assertEquals(
+                OverrideUrlLoadingResultType.OVERRIDE_WITH_NAVIGATE_TAB, result.getResultType());
+        subframeExternalProtocol.waitForFirst();
+        subframeRedirect.waitForFirst();
+    }
+
     private void runRedirectToOtherBrowserTest(Instrumentation.ActivityResult chooserResult) {
         Context context = ContextUtils.getApplicationContext();
         String targetUrl = getRedirectToOtherBrowserUrl();
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java
index c3486164fc378..56aba3733da4e 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/tab/InterceptNavigationDelegateTest.java
@@ -35,7 +35,6 @@ import org.chromium.components.external_intents.ExternalNavigationHandler;
 import org.chromium.components.external_intents.ExternalNavigationParams;
 import org.chromium.components.external_intents.InterceptNavigationDelegateImpl;
 import org.chromium.content_public.browser.NavigationHandle;
-import org.chromium.content_public.browser.WebContentsObserver;
 import org.chromium.content_public.browser.test.util.TestThreadUtils;
 import org.chromium.content_public.browser.test.util.TouchCommon;
 import org.chromium.net.test.EmbeddedTestServer;
@@ -245,35 +244,4 @@ public class InterceptNavigationDelegateTest {
         Assert.assertEquals(2, mNavParamHistory.size());
         Assert.assertEquals(2, mExternalNavParamHistory.size());
     }
-
-    @Test
-    @MediumTest
-    public void testIframeUrlRedirection() throws TimeoutException {
-        // Will cause handleSubframeExternalProtocol to return this GURL.
-        mSubframeRedirectTarget = new GURL(mTestServer.getURL(HELLO_PAGE));
-        String mainFrameUrl = mTestServer.getURL(IFRAME_CONTAINER_PAGE);
-
-        final Tab tab = sActivityTestRule.getActivity().getActivityTab();
-
-        final CallbackHelper subframeRedirect = new CallbackHelper();
-        WebContentsObserver observer = new WebContentsObserver() {
-            @Override
-            public void didStartNavigationInPrimaryMainFrame(NavigationHandle navigation) {
-                Assert.assertEquals(mainFrameUrl, navigation.getUrl().getSpec());
-            }
-
-            @Override
-            public void didRedirectNavigation(NavigationHandle navigation) {
-                if (navigation.isInPrimaryMainFrame()) return;
-                Assert.assertEquals(mSubframeRedirectTarget, navigation.getUrl());
-                subframeRedirect.notifyCalled();
-            }
-        };
-        TestThreadUtils.runOnUiThreadBlocking(
-                () -> { tab.getWebContents().addObserver(observer); });
-
-        sActivityTestRule.loadUrl(mainFrameUrl);
-        mSubframeExternalProtocolCalled.waitForFirst();
-        subframeRedirect.waitForFirst();
-    }
 }
diff --git a/components/external_intents/android/external_intents_features.cc b/components/external_intents/android/external_intents_features.cc
index e5478c00deec6..8f695d60ff1df 100644
--- a/components/external_intents/android/external_intents_features.cc
+++ b/components/external_intents/android/external_intents_features.cc
@@ -18,7 +18,8 @@ namespace {
 
 // Array of features exposed through the Java ExternalIntentsFeatures API.
 const base::Feature* kFeaturesExposedToJava[] = {
-    &kBlockExternalFormSubmitWithoutGesture, &kExternalNavigationDebugLogs};
+    &kBlockExternalFormSubmitWithoutGesture, &kExternalNavigationDebugLogs,
+    &kExternalNavigationSubframeRedirects};
 
 }  // namespace
 
@@ -34,6 +35,10 @@ BASE_FEATURE(kExternalNavigationDebugLogs,
              "ExternalNavigationDebugLogs",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
+BASE_FEATURE(kExternalNavigationSubframeRedirects,
+             "ExternalNavigationSubframeRedirects",
+             base::FEATURE_ENABLED_BY_DEFAULT);
+
 static jlong JNI_ExternalIntentsFeatures_GetFeature(JNIEnv* env, jint ordinal) {
   return reinterpret_cast<jlong>(kFeaturesExposedToJava[ordinal]);
 }
diff --git a/components/external_intents/android/external_intents_features.h b/components/external_intents/android/external_intents_features.h
index b3ecd4d928301..bab62ff97f151 100644
--- a/components/external_intents/android/external_intents_features.h
+++ b/components/external_intents/android/external_intents_features.h
@@ -12,6 +12,7 @@ namespace external_intents {
 // Alphabetical:
 BASE_DECLARE_FEATURE(kBlockExternalFormSubmitWithoutGesture);
 BASE_DECLARE_FEATURE(kExternalNavigationDebugLogs);
+BASE_DECLARE_FEATURE(kExternalNavigationSubframeRedirects);
 
 }  // namespace external_intents
 
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
index 99e1a64fc3114..fddd0dd09557a 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
@@ -20,6 +20,8 @@ public class ExternalIntentsFeatures extends Features {
     public static final String BLOCK_EXTERNAL_FORM_SUBMIT_WITHOUT_GESTURE_NAME =
             "BlockExternalFormSubmitWithoutGesture";
     public static final String EXTERNAL_NAVIGATION_DEBUG_LOGS_NAME = "ExternalNavigationDebugLogs";
+    public static final String EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS_NAME =
+            "ExternalNavigationSubframeRedirects";
 
     public static final ExternalIntentsFeatures BLOCK_EXTERNAL_FORM_SUBMIT_WITHOUT_GESTURE =
             new ExternalIntentsFeatures(0, BLOCK_EXTERNAL_FORM_SUBMIT_WITHOUT_GESTURE_NAME);
@@ -27,6 +29,9 @@ public class ExternalIntentsFeatures extends Features {
     public static final ExternalIntentsFeatures EXTERNAL_NAVIGATION_DEBUG_LOGS =
             new ExternalIntentsFeatures(1, EXTERNAL_NAVIGATION_DEBUG_LOGS_NAME);
 
+    public static final ExternalIntentsFeatures EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS =
+            new ExternalIntentsFeatures(2, EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS_NAME);
+
     private final int mOrdinal;
 
     private ExternalIntentsFeatures(int ordinal, String name) {
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
index 39643e2bde34b..3dab3ee4b838b 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
@@ -208,9 +208,12 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
             case OverrideUrlLoadingResultType.OVERRIDE_WITH_EXTERNAL_INTENT:
                 return null;
             case OverrideUrlLoadingResultType.OVERRIDE_WITH_NAVIGATE_TAB:
-                // TODO(https://crbug.com/1365100): Pass the clobbering URL to native and do a
-                // redirect rather than clobbering the tab.
-                return null;
+                if (ExternalIntentsFeatures.EXTERNAL_NAVIGATION_SUBFRAME_REDIRECTS.isEnabled()) {
+                    assert result.getTargetUrl() != null;
+                    return result.getTargetUrl();
+                } else {
+                    return null;
+                }
             case OverrideUrlLoadingResultType.OVERRIDE_WITH_ASYNC_ACTION:
                 return null;
             case OverrideUrlLoadingResultType.NO_OVERRIDE:
