/**
 * @name linux-181e448d8709e517c9c7b523fcd209f24eb38ca7-io_sq_thread
 * @id cpp/linux/181e448d8709e517c9c7b523fcd209f24eb38ca7/io-sq-thread
 * @description linux-181e448d8709e517c9c7b523fcd209f24eb38ca7-fs/io_uring.c-io_sq_thread CVE-2019-19241
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vctx_3268, ExprStmt target_2, AddressOfExpr target_3, BitwiseAndExpr target_4, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("const cred *")
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("override_creds")
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="creds"
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_3268
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
	and target_3.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(ExprStmt target_5, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("revert_creds")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("const cred *")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_5.getLocation()))
}

predicate func_2(Function func, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getExpr().(AssignExpr).getRValue().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_2.getExpr().(AssignExpr).getRValue().(AssignExpr).getRValue().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_2.getExpr().(AssignExpr).getRValue().(AssignExpr).getRValue().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vctx_3268, AddressOfExpr target_3) {
	target_3.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="completions"
	and target_3.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_3268
	and target_3.getOperand().(ArrayExpr).getArrayOffset().(Literal).getValue()="1"
}

predicate func_4(Variable vctx_3268, BitwiseAndExpr target_4) {
	target_4.getLeftOperand().(ValueFieldAccess).getTarget().getName()="flags"
	and target_4.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_4.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_3268
	and target_4.getRightOperand().(BinaryBitwiseOperation).getValue()="1"
}

predicate func_5(Function func, ExprStmt target_5) {
	target_5.getExpr().(FunctionCall).getTarget().hasName("kthread_parkme")
	and target_5.getEnclosingFunction() = func
}

from Function func, Variable vctx_3268, ExprStmt target_2, AddressOfExpr target_3, BitwiseAndExpr target_4, ExprStmt target_5
where
not func_0(vctx_3268, target_2, target_3, target_4, func)
and not func_1(target_5, func)
and func_2(func, target_2)
and func_3(vctx_3268, target_3)
and func_4(vctx_3268, target_4)
and func_5(func, target_5)
and vctx_3268.getType().hasName("io_ring_ctx *")
and vctx_3268.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
