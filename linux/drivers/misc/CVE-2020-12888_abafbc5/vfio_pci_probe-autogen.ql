/**
 * @name linux-abafbc551fddede3e0a08dee1dcde08fc0eb8476-vfio_pci_probe
 * @id cpp/linux/abafbc551fddede3e0a08dee1dcde08fc0eb8476/vfio-pci-probe
 * @description linux-abafbc551fddede3e0a08dee1dcde08fc0eb8476-drivers/vfio/pci/vfio_pci.c-vfio_pci_probe CVE-2020-12888
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, SizeofExprOperator target_0) {
	target_0.getValue()="848"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vvdev_1645, ExprStmt target_2, AddressOfExpr target_3, Function func) {
exists(DoStmt target_1 |
	target_1.getCondition().(Literal).getValue()="0"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__init_rwsem")
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="memory_lock"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvdev_1645
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="&vdev->memory_lock"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("lock_class_key")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_2.getLocation())
	and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vvdev_1645, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("vfio_add_group_dev")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="dev"
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("pci_dev *")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("const vfio_device_ops")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vvdev_1645
}

predicate func_3(Variable vvdev_1645, AddressOfExpr target_3) {
	target_3.getOperand().(PointerFieldAccess).getTarget().getName()="vma_list"
	and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvdev_1645
}

from Function func, Variable vvdev_1645, SizeofExprOperator target_0, ExprStmt target_2, AddressOfExpr target_3
where
func_0(func, target_0)
and not func_1(vvdev_1645, target_2, target_3, func)
and func_2(vvdev_1645, target_2)
and func_3(vvdev_1645, target_3)
and vvdev_1645.getType().hasName("vfio_pci_device *")
and vvdev_1645.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
