commit a6531d4f20eb5cbd1a2f20d65b7a41986f4febd9	a6531d4f20eb5cbd1a2f20d65b7a41986f4febd9
Author: Jinsuk Kim <jinsukkim@chromium.org>
Date:   Thu Aug 3 23:34:03 2023 +0000

    [CCT] Prevent taps from the overlay activity
    
    Uses the activity state to proceed or discard touch event processing.
    This can prevent taps coming down from overlay activity running
    on top of the CCT.
    
    Bug: 1430867
    Change-Id: I471471dbbebf4528a01f1114e4317f252af7bbc3
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4729026
    Commit-Queue: Jinsuk Kim <jinsukkim@chromium.org>
    Reviewed-by: Theresa Sullivan <twellington@chromium.org>
    Code-Coverage: Findit <findit-for-me@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#1179343}

diff --git a/chrome/android/chrome_junit_test_java_sources.gni b/chrome/android/chrome_junit_test_java_sources.gni
index 1b81db07f8c2c..4210973b20ea8 100644
--- a/chrome/android/chrome_junit_test_java_sources.gni
+++ b/chrome/android/chrome_junit_test_java_sources.gni
@@ -133,6 +133,7 @@ chrome_junit_test_java_sources = [
   "junit/src/org/chromium/chrome/browser/customtabs/CustomTabNightModeStateControllerTest.java",
   "junit/src/org/chromium/chrome/browser/customtabs/CustomTabStatusBarColorProviderTest.java",
   "junit/src/org/chromium/chrome/browser/customtabs/CustomTabsConnectionUnitTest.java",
+  "junit/src/org/chromium/chrome/browser/customtabs/CustomTabsFilterTouchUnitTest.java",
   "junit/src/org/chromium/chrome/browser/customtabs/CustomTabsOpenTimeRecorderTest.java",
   "junit/src/org/chromium/chrome/browser/customtabs/IncognitoCustomTabSnapshotControllerTest.java",
   "junit/src/org/chromium/chrome/browser/customtabs/LaunchesWithColorSchemeTest.java",
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivity.java b/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivity.java
index 242d554f5a032..751d08b293452 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/customtabs/CustomTabActivity.java
@@ -4,6 +4,7 @@
 
 package org.chromium.chrome.browser.customtabs;
 
+import static androidx.annotation.VisibleForTesting.PRIVATE;
 import static androidx.browser.customtabs.CustomTabsIntent.COLOR_SCHEME_DARK;
 import static androidx.browser.customtabs.CustomTabsIntent.COLOR_SCHEME_LIGHT;
 
@@ -15,15 +16,20 @@ import android.graphics.Color;
 import android.graphics.drawable.ColorDrawable;
 import android.graphics.drawable.Drawable;
 import android.net.Uri;
+import android.os.Build;
 import android.os.Bundle;
 import android.provider.Browser;
+import android.view.MotionEvent;
 import android.view.ViewGroup;
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.VisibleForTesting;
 import androidx.browser.customtabs.CustomTabsIntent;
 import androidx.browser.customtabs.CustomTabsSessionToken;
 
+import org.chromium.base.ActivityState;
+import org.chromium.base.ApplicationStatus;
 import org.chromium.base.IntentUtils;
 import org.chromium.base.metrics.RecordUserAction;
 import org.chromium.chrome.R;
@@ -41,6 +47,7 @@ import org.chromium.chrome.browser.flags.AllCachedFieldTrialParameters;
 import org.chromium.chrome.browser.flags.ChromeFeatureList;
 import org.chromium.chrome.browser.fonts.FontPreloader;
 import org.chromium.chrome.browser.infobar.InfoBarContainer;
+import org.chromium.chrome.browser.multiwindow.MultiWindowUtils;
 import org.chromium.chrome.browser.night_mode.NightModeStateProvider;
 import org.chromium.chrome.browser.page_info.ChromePageInfo;
 import org.chromium.chrome.browser.page_info.ChromePageInfoHighlight;
@@ -65,8 +72,19 @@ public class CustomTabActivity extends BaseCustomTabActivity {
     public static final AllCachedFieldTrialParameters EXPERIMENTS_FOR_AGSA_PARAMS =
             new AllCachedFieldTrialParameters(ChromeFeatureList.EXPERIMENTS_FOR_AGSA);
 
+    private boolean mPreventTouchFeatureEnabled;
+
     private CustomTabsOpenTimeRecorder mOpenTimeRecorder;
 
+    /**
+     * The last MotionEvent object blocked due to the activity being in paused state.  We're
+     * interested in MotionEvent#ACTION_DOWN which is likely the very first event received when
+     * multi-window mode is entered. We inject this one after the activity is resumed (or
+     * it regains the focus) in order to recover the corresponding user gesture which otherwise
+     * would have gone missing.
+     */
+    private MotionEvent mBlockedEvent;
+
     private CustomTabActivityTabProvider.Observer mTabChangeObserver =
             new CustomTabActivityTabProvider.Observer() {
         @Override
@@ -170,10 +188,16 @@ public class CustomTabActivity extends BaseCustomTabActivity {
                             && urlPackage.equals(
                                     mConnection.getClientPackageNameForSession(mSession));
                 });
-
+        initPreventTouchFeatureFlag();
         super.finishNativeInitialization();
     }
 
+    @VisibleForTesting(otherwise = PRIVATE)
+    void initPreventTouchFeatureFlag() {
+        mPreventTouchFeatureEnabled = Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU
+                && ChromeFeatureList.isEnabled(ChromeFeatureList.CCT_PREVENT_TOUCHES);
+    }
+
     @Override
     protected void handleFinishAndClose() {
         mOpenTimeRecorder.updateCloseCause();
@@ -257,6 +281,37 @@ public class CustomTabActivity extends BaseCustomTabActivity {
         return super.onMenuOrKeyboardAction(id, fromMenu);
     }
 
+    @Override
+    public boolean dispatchTouchEvent(MotionEvent ev) {
+        if (mPreventTouchFeatureEnabled && shouldPreventTouch(ev)) {
+            // Discard the events which may be trickling down from an overlay activity above.
+            return true;
+        }
+        return super.dispatchTouchEvent(ev);
+    }
+
+    @VisibleForTesting(otherwise = PRIVATE)
+    boolean shouldPreventTouch(MotionEvent ev) {
+        if (ApplicationStatus.getStateForActivity(this) == ActivityState.RESUMED) return false;
+        mBlockedEvent = ev;
+        return true;
+    }
+
+    @Override
+    public void onWindowFocusChanged(boolean hasFocus) {
+        super.onWindowFocusChanged(hasFocus);
+        // No need to do the following from Q and onward where multi-resume state is supported
+        // in split screen mode.
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) return;
+
+        if (hasFocus && mBlockedEvent != null
+                && MultiWindowUtils.getInstance().isInMultiWindowMode(this)) {
+            mBlockedEvent.setAction(MotionEvent.ACTION_DOWN);
+            super.dispatchTouchEvent(mBlockedEvent); // Inject the blocked event
+            mBlockedEvent = null;
+        }
+    }
+
     @Override
     protected BrowserServicesIntentDataProvider buildIntentDataProvider(
             Intent intent, @CustomTabsIntent.ColorScheme int colorScheme) {
diff --git a/chrome/android/junit/src/org/chromium/chrome/browser/customtabs/CustomTabsFilterTouchUnitTest.java b/chrome/android/junit/src/org/chromium/chrome/browser/customtabs/CustomTabsFilterTouchUnitTest.java
new file mode 100644
index 0000000000000..7b81b4356e3a3
--- /dev/null
+++ b/chrome/android/junit/src/org/chromium/chrome/browser/customtabs/CustomTabsFilterTouchUnitTest.java
@@ -0,0 +1,85 @@
+// Copyright 2023 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+package org.chromium.chrome.browser.customtabs;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.Mockito.atLeast;
+import static org.mockito.Mockito.verify;
+
+import android.view.MotionEvent;
+
+import androidx.test.ext.junit.rules.ActivityScenarioRule;
+import androidx.test.filters.SmallTest;
+
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.rules.TestRule;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import org.chromium.base.ActivityState;
+import org.chromium.base.ApplicationStatus;
+import org.chromium.base.test.BaseRobolectricTestRunner;
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.chrome.browser.flags.ChromeFeatureList;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.browser.multiwindow.MultiWindowUtils;
+import org.chromium.chrome.test.util.browser.Features;
+
+/**
+ * Tests {@link CustomTabActivity} filters touch events from overlay activity.
+ */
+// clang-format off
+@RunWith(BaseRobolectricTestRunner.class)
+@Features.EnableFeatures(ChromeFeatureList.CCT_PREVENT_TOUCHES)
+@CommandLineFlags.Add({
+    ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+    ChromeSwitches.DISABLE_NATIVE_INITIALIZATION
+})
+// clang-format on
+public class CustomTabsFilterTouchUnitTest {
+    @Rule
+    public ActivityScenarioRule<CustomTabActivity> mActivityScenarioRule =
+            new ActivityScenarioRule<>(CustomTabActivity.class);
+    @Rule
+    public TestRule mProcessor = new Features.JUnitProcessor();
+
+    @Mock
+    private MotionEvent mMotionEvent;
+
+    private CustomTabActivity mActivity;
+
+    @Before
+    public void setUp() throws Exception {
+        mActivityScenarioRule.getScenario().onActivity((activity) -> mActivity = activity);
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    @SmallTest
+    public void testShouldPreventTouch() {
+        ApplicationStatus.onStateChangeForTesting(mActivity, ActivityState.RESUMED);
+        assertFalse("Events should be accepted.", mActivity.shouldPreventTouch(mMotionEvent));
+        ApplicationStatus.onStateChangeForTesting(mActivity, ActivityState.PAUSED);
+        assertTrue("Events should be discarded.", mActivity.shouldPreventTouch(mMotionEvent));
+    }
+
+    @Test
+    @SmallTest
+    public void testInjectMissingEventInMultiWindowMode() {
+        mActivity.initPreventTouchFeatureFlag();
+        ApplicationStatus.onStateChangeForTesting(mActivity, ActivityState.PAUSED);
+        assertTrue("Events should be consumed", mActivity.dispatchTouchEvent(mMotionEvent));
+
+        MultiWindowUtils.getInstance().setIsInMultiWindowModeForTesting(true);
+        ApplicationStatus.onStateChangeForTesting(mActivity, ActivityState.RESUMED);
+        mActivity.onWindowFocusChanged(/*hasFocus=*/true);
+        verify(mMotionEvent, atLeast(1)).setAction(eq(MotionEvent.ACTION_DOWN));
+    }
+}
diff --git a/chrome/browser/about_flags.cc b/chrome/browser/about_flags.cc
index dfbd0f82776fd..2935dc5417931 100644
--- a/chrome/browser/about_flags.cc
+++ b/chrome/browser/about_flags.cc
@@ -7149,6 +7149,10 @@ const FeatureEntry kFeatureEntries[] = {
      flag_descriptions::kCCTPageInsightsHubDescription, kOsAndroid,
      FEATURE_VALUE_TYPE(chrome::android::kCCTPageInsightsHub)},
 
+    {"cct-prevent-touches", flag_descriptions::kCCTPreventTouchesName,
+     flag_descriptions::kCCTPreventTouchesDescription, kOsAndroid,
+     FEATURE_VALUE_TYPE(chrome::android::kCCTPreventTouches)},
+
     {"cct-resizable-90-maximum-height",
      flag_descriptions::kCCTResizable90MaximumHeightName,
      flag_descriptions::kCCTResizable90MaximumHeightDescription, kOsAndroid,
diff --git a/chrome/browser/flag-metadata.json b/chrome/browser/flag-metadata.json
index d19241b364e49..6e06e1ad1d37d 100644
--- a/chrome/browser/flag-metadata.json
+++ b/chrome/browser/flag-metadata.json
@@ -1070,6 +1070,11 @@
     "owners": [ "jinsukkim", "kgrosu@google.com", "twellington" ],
     "expiry_milestone": 130
   },
+  {
+    "name": "cct-prevent-touches",
+    "owners": [ "jinsukkim", "kgrosu@google.com", "twellington" ],
+    "expiry_milestone": 140
+  },
   {
     "name": "cct-real-time-engagement-signals",
     "owners": ["sinansahin@google.com", "jinsukkim"],
diff --git a/chrome/browser/flag_descriptions.cc b/chrome/browser/flag_descriptions.cc
index 408e9216472fe..c1129c5d7723e 100644
--- a/chrome/browser/flag_descriptions.cc
+++ b/chrome/browser/flag_descriptions.cc
@@ -3782,6 +3782,11 @@ const char kCCTPageInsightsHubName[] = "PageInsights Hub";
 const char kCCTPageInsightsHubDescription[] =
     "Show PageInsights Hub on Chrome Custom Tabs.";
 
+const char kCCTPreventTouchesName[] = "Prevent touches from overlay";
+const char kCCTPreventTouchesDescription[] =
+    "Prevent touches from being processed if they are coming from an overlay "
+    "activity.";
+
 const char kCCTResizable90MaximumHeightName[] =
     "Bottom sheet Custom Tabs maximum height";
 const char kCCTResizable90MaximumHeightDescription[] =
diff --git a/chrome/browser/flag_descriptions.h b/chrome/browser/flag_descriptions.h
index 7d66f318c1ffd..b041a9d1c9325 100644
--- a/chrome/browser/flag_descriptions.h
+++ b/chrome/browser/flag_descriptions.h
@@ -2200,6 +2200,9 @@ extern const char kCCTIncognitoAvailableToThirdPartyDescription[];
 extern const char kCCTPageInsightsHubName[];
 extern const char kCCTPageInsightsHubDescription[];
 
+extern const char kCCTPreventTouchesName[];
+extern const char kCCTPreventTouchesDescription[];
+
 extern const char kCCTResizable90MaximumHeightName[];
 extern const char kCCTResizable90MaximumHeightDescription[];
 extern const char kCCTResizableForThirdPartiesName[];
diff --git a/chrome/browser/flags/android/chrome_feature_list.cc b/chrome/browser/flags/android/chrome_feature_list.cc
index 6f791bbee46d9..c89831a0d45b0 100644
--- a/chrome/browser/flags/android/chrome_feature_list.cc
+++ b/chrome/browser/flags/android/chrome_feature_list.cc
@@ -194,6 +194,7 @@ const base::Feature* const kFeaturesExposedToJava[] = {
     &kCCTPageInsightsHub,
     &kCCTPostMessageAPI,
     &kCCTPrefetchDelayShowOnStart,
+    &kCCTPreventTouches,
     &kCCTRealTimeEngagementSignals,
     &kCCTRealTimeEngagementSignalsAlternativeImpl,
     &kCCTRedirectPreconnect,
@@ -566,6 +567,10 @@ BASE_FEATURE(kCCTPrefetchDelayShowOnStart,
              "CCTPrefetchDelayShowOnStart",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
+BASE_FEATURE(kCCTPreventTouches,
+             "CCTPreventTouches",
+             base::FEATURE_ENABLED_BY_DEFAULT);
+
 BASE_FEATURE(kCCTRealTimeEngagementSignals,
              "CCTRealTimeEngagementSignals",
              base::FEATURE_ENABLED_BY_DEFAULT);
diff --git a/chrome/browser/flags/android/chrome_feature_list.h b/chrome/browser/flags/android/chrome_feature_list.h
index d8f053c1a858a..552c22eec117f 100644
--- a/chrome/browser/flags/android/chrome_feature_list.h
+++ b/chrome/browser/flags/android/chrome_feature_list.h
@@ -52,6 +52,7 @@ BASE_DECLARE_FEATURE(kCCTNewDownloadTab);
 BASE_DECLARE_FEATURE(kCCTPageInsightsHub);
 BASE_DECLARE_FEATURE(kCCTPostMessageAPI);
 BASE_DECLARE_FEATURE(kCCTPrefetchDelayShowOnStart);
+BASE_DECLARE_FEATURE(kCCTPreventTouches);
 BASE_DECLARE_FEATURE(kCCTRealTimeEngagementSignals);
 BASE_DECLARE_FEATURE(kCCTRealTimeEngagementSignalsAlternativeImpl);
 BASE_DECLARE_FEATURE(kCCTRedirectPreconnect);
diff --git a/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/ChromeFeatureList.java b/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/ChromeFeatureList.java
index dabed78b9f91b..b30083efee332 100644
--- a/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/ChromeFeatureList.java
+++ b/chrome/browser/flags/android/java/src/org/chromium/chrome/browser/flags/ChromeFeatureList.java
@@ -180,6 +180,7 @@ public abstract class ChromeFeatureList {
     public static final String CCT_PAGE_INSIGHTS_HUB = "CCTPageInsightsHub";
     public static final String CCT_POST_MESSAGE_API = "CCTPostMessageAPI";
     public static final String CCT_PREFETCH_DELAY_SHOW_ON_START = "CCTPrefetchDelayShowOnStart";
+    public static final String CCT_PREVENT_TOUCHES = "CCTPreventTouches";
     public static final String CCT_REAL_TIME_ENGAGEMENT_SIGNALS = "CCTRealTimeEngagementSignals";
     public static final String CCT_REAL_TIME_ENGAGEMENT_SIGNALS_ALTERNATIVE_IMPL =
             "CCTRealTimeEngagementSignalsAlternativeImpl";
diff --git a/tools/metrics/histograms/enums.xml b/tools/metrics/histograms/enums.xml
index 9f042bdcee789..a0bb022cf4bf8 100644
--- a/tools/metrics/histograms/enums.xml
+++ b/tools/metrics/histograms/enums.xml
@@ -60291,6 +60291,7 @@ from previous Chrome versions.
   <int value="-1911918596" label="WebviewAccelerateSmallCanvases:disabled"/>
   <int value="-1911316813" label="BlockTabUnders:disabled"/>
   <int value="-1911153473" label="enable-easy-signin"/>
+  <int value="-1910984835" label="CCTPreventTouches:enabled"/>
   <int value="-1910725149" label="kFastPairHID:enabled"/>
   <int value="-1910427915" label="HttpsOnlyMode:enabled"/>
   <int value="-1910305102" label="EnhancedDeskAnimations:enabled"/>
@@ -65611,6 +65612,7 @@ from previous Chrome versions.
   <int value="801865174" label="NetworkServiceInProcess2:enabled"/>
   <int value="802463708" label="WebViewSurfaceControl:enabled"/>
   <int value="802930463" label="ThrottleForegroundTimers:disabled"/>
+  <int value="803085289" label="CCTPreventTouches:disabled"/>
   <int value="803282885" label="PreferHtmlOverPlugins:disabled"/>
   <int value="803877391" label="NotificationsRefresh:enabled"/>
   <int value="803982925" label="CellularForbidAttachApn:disabled"/>
