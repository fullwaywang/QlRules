/**
 * @name linux-fd4d9c7d0c71866ec0c2825189ebd2ce35bd95b8-kmem_cache_alloc_bulk
 * @id cpp/linux/fd4d9c7d0c71866ec0c2825189ebd2ce35bd95b8/kmem-cache-alloc-bulk
 * @description linux-fd4d9c7d0c71866ec0c2825189ebd2ce35bd95b8-mm/slub.c-kmem_cache_alloc_bulk CVE-2020-29370
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vc_3158, FunctionCall target_1, ExprStmt target_2) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="tid"
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vc_3158
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("next_tid")
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="tid"
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vc_3158
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getLocation()))
}

predicate func_1(Function func, FunctionCall target_1) {
	target_1.getTarget().hasName("__builtin_expect")
	and target_1.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getTarget().getType().hasName("void *")
	and target_1.getArgument(1).(Literal).getValue()="0"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vc_3158, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("void **")
	and target_2.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("___slab_alloc")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("kmem_cache *")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("gfp_t")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(UnaryMinusExpr).getValue()="-1"
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(FunctionCall).getTarget().hasName("__builtin_return_address")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(FunctionCall).getArgument(0).(Literal).getValue()="0"
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getTarget()=vc_3158
}

from Function func, Variable vc_3158, FunctionCall target_1, ExprStmt target_2
where
not func_0(vc_3158, target_1, target_2)
and func_1(func, target_1)
and func_2(vc_3158, target_2)
and vc_3158.getType().hasName("kmem_cache_cpu *")
and vc_3158.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
