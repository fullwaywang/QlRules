/**
 * @name linux-e0e50401cc3921c9eaf1b0e667db174519ea939f-cifs_signal_cifsd_for_reconnect
 * @id cpp/linux/e0e50401cc3921c9eaf1b0e667db174519ea939f/cifs-signal-cifsd-for-reconnect
 * @description linux-e0e50401cc3921c9eaf1b0e667db174519ea939f-fs/smb/client/connect.c-cifs_signal_cifsd_for_reconnect CVE-2024-35861
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vses_161, ExprStmt target_1, ValueFieldAccess target_2, AddressOfExpr target_3) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("cifs_ses_exiting")
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vses_161
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vses_161, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("spin_lock")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="chan_lock"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vses_161
}

predicate func_2(Variable vses_161, ValueFieldAccess target_2) {
	target_2.getTarget().getName()="next"
	and target_2.getQualifier().(PointerFieldAccess).getTarget().getName()="smb_ses_list"
	and target_2.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vses_161
}

predicate func_3(Variable vses_161, AddressOfExpr target_3) {
	target_3.getOperand().(PointerFieldAccess).getTarget().getName()="chan_lock"
	and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vses_161
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_lock")
}

from Function func, Variable vses_161, ExprStmt target_1, ValueFieldAccess target_2, AddressOfExpr target_3
where
not func_0(vses_161, target_1, target_2, target_3)
and func_1(vses_161, target_1)
and func_2(vses_161, target_2)
and func_3(vses_161, target_3)
and vses_161.getType().hasName("cifs_ses *")
and vses_161.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
