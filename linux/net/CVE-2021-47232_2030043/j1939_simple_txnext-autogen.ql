/**
 * @name linux-2030043e616cab40f510299f09b636285e0a3678-j1939_simple_txnext
 * @id cpp/linux/2030043e616cab40f510299f09b636285e0a3678/j1939-simple-txnext
 * @description linux-2030043e616cab40f510299f09b636285e0a3678-net/can/j1939/transport.c-j1939_simple_txnext CVE-2021-47232
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsession_1007, FunctionCall target_0) {
	target_0.getTarget().hasName("j1939_session_skb_find")
	and not target_0.getTarget().hasName("j1939_session_skb_get")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vsession_1007
}

predicate func_1(Variable vret_1012, NotExpr target_9) {
exists(ExprStmt target_1 |
	target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_1012
	and target_1.getExpr().(AssignExpr).getRValue() instanceof UnaryMinusExpr
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9)
}

predicate func_2(NotExpr target_9, Function func) {
exists(GotoStmt target_2 |
	target_2.getName() ="out_free"
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_2
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
	and target_2.getEnclosingFunction() = func)
}

predicate func_3(VariableAccess target_11, Function func) {
exists(GotoStmt target_3 |
	target_3.getName() ="out_free"
	and target_3.getParent().(IfStmt).getCondition()=target_11
	and target_3.getEnclosingFunction() = func)
}

predicate func_4(Variable vse_skb_1010, Variable vret_1012, ValueFieldAccess target_12, ReturnStmt target_6, Function func) {
exists(IfStmt target_4 |
	target_4.getCondition().(VariableAccess).getTarget()=vret_1012
	and target_4.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("kfree_skb")
	and target_4.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vse_skb_1010
	and target_4.getElse().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("consume_skb")
	and target_4.getElse().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vse_skb_1010
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
	and target_4.getFollowingStmt() instanceof ReturnStmt
	and target_12.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_6.getExpr().(VariableAccess).getLocation().isBefore(target_4.getCondition().(VariableAccess).getLocation()))
}

predicate func_5(Function func, UnaryMinusExpr target_5) {
	target_5.getValue()="-12"
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable vret_1012, VariableAccess target_11, ReturnStmt target_6) {
	target_6.getExpr().(VariableAccess).getTarget()=vret_1012
	and target_6.getParent().(IfStmt).getCondition()=target_11
}

predicate func_7(NotExpr target_9, Function func, ReturnStmt target_7) {
	target_7.getExpr() instanceof UnaryMinusExpr
	and target_7.getParent().(IfStmt).getCondition()=target_9
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Function func, ReturnStmt target_8) {
	target_8.getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_8
}

predicate func_9(Function func, NotExpr target_9) {
	target_9.getOperand().(VariableAccess).getTarget().getType().hasName("sk_buff *")
	and target_9.getEnclosingFunction() = func
}

predicate func_11(Variable vret_1012, VariableAccess target_11) {
	target_11.getTarget()=vret_1012
}

predicate func_12(Variable vse_skb_1010, ValueFieldAccess target_12) {
	target_12.getTarget().getName()="sk"
	and target_12.getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_12.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vse_skb_1010
}

from Function func, Parameter vsession_1007, Variable vse_skb_1010, Variable vret_1012, FunctionCall target_0, UnaryMinusExpr target_5, ReturnStmt target_6, ReturnStmt target_7, ReturnStmt target_8, NotExpr target_9, VariableAccess target_11, ValueFieldAccess target_12
where
func_0(vsession_1007, target_0)
and not func_1(vret_1012, target_9)
and not func_2(target_9, func)
and not func_3(target_11, func)
and not func_4(vse_skb_1010, vret_1012, target_12, target_6, func)
and func_5(func, target_5)
and func_6(vret_1012, target_11, target_6)
and func_7(target_9, func, target_7)
and func_8(func, target_8)
and func_9(func, target_9)
and func_11(vret_1012, target_11)
and func_12(vse_skb_1010, target_12)
and vsession_1007.getType().hasName("j1939_session *")
and vse_skb_1010.getType().hasName("sk_buff *")
and vret_1012.getType().hasName("int")
and vsession_1007.getFunction() = func
and vse_skb_1010.(LocalVariable).getFunction() = func
and vret_1012.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
