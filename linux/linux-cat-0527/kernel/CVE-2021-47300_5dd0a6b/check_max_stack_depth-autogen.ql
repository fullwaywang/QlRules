/**
 * @name linux-5dd0a6b8582ffbfa88351949d50eccd5b6694ade-check_max_stack_depth
 * @id cpp/linux/5dd0a6b8582ffbfa88351949d50eccd5b6694ade/check-max-stack-depth
 * @description linux-5dd0a6b8582ffbfa88351949d50eccd5b6694ade-kernel/bpf/verifier.c-check_max_stack_depth CVE-2021-47300
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsubprog_3601, Parameter venv_3598, IfStmt target_1, ExprStmt target_2, ExprStmt target_4, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(ValueFieldAccess).getTarget().getName()="tail_call_reachable"
	and target_0.getCondition().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vsubprog_3601
	and target_0.getCondition().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(Literal).getValue()="0"
	and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="tail_call_reachable"
	and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="aux"
	and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="prog"
	and target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=venv_3598
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getLocation().isBefore(target_0.getCondition().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getLocation())
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Function func, IfStmt target_1) {
	target_1.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_1.getThen().(ReturnStmt).getExpr().(Literal).getValue()="0"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vsubprog_3601, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="tail_call_reachable"
	and target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vsubprog_3601
	and target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("int[8]")
	and target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_4(Parameter venv_3598, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_3598
	and target_4.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="the call stack of %d frames is too deep !\n"
	and target_4.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Variable vsubprog_3601, Parameter venv_3598, IfStmt target_1, ExprStmt target_2, ExprStmt target_4
where
not func_0(vsubprog_3601, venv_3598, target_1, target_2, target_4, func)
and func_1(func, target_1)
and func_2(vsubprog_3601, target_2)
and func_4(venv_3598, target_4)
and vsubprog_3601.getType().hasName("bpf_subprog_info *")
and venv_3598.getType().hasName("bpf_verifier_env *")
and vsubprog_3601.(LocalVariable).getFunction() = func
and venv_3598.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
