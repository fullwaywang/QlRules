commit af6bd5c9901b13a26eaf4d57d97a813297791596
Author: Breno Leitao <leitao@debian.org>
Date:   Wed Jul 24 01:05:23 2024 -0700

    net: mediatek: Fix potential NULL pointer dereference in dummy net_device handling
    
    [ Upstream commit 16f3a28cf5f876a7f3550d8f4c870a7b41bcfaef ]
    
    Move the freeing of the dummy net_device from mtk_free_dev() to
    mtk_remove().
    
    Previously, if alloc_netdev_dummy() failed in mtk_probe(),
    eth->dummy_dev would be NULL. The error path would then call
    mtk_free_dev(), which in turn called free_netdev() assuming dummy_dev
    was allocated (but it was not), potentially causing a NULL pointer
    dereference.
    
    By moving free_netdev() to mtk_remove(), we ensure it's only called when
    mtk_probe() has succeeded and dummy_dev is fully allocated. This
    addresses a potential NULL pointer dereference detected by Smatch[1].
    
    Fixes: b209bd6d0bff ("net: mediatek: mtk_eth_sock: allocate dummy net_device dynamically")
    Reported-by: Dan Carpenter <dan.carpenter@linaro.org>
    Closes: https://lore.kernel.org/all/4160f4e0-cbef-4a22-8b5d-42c4d399e1f7@stanley.mountain/ [1]
    Suggested-by: Dan Carpenter <dan.carpenter@linaro.org>
    Reviewed-by: Dan Carpenter <dan.carpenter@linaro.org>
    Signed-off-by: Breno Leitao <leitao@debian.org>
    Reviewed-by: Simon Horman <horms@kernel.org>
    Link: https://patch.msgid.link/20240724080524.2734499-1-leitao@debian.org
    Signed-off-by: Paolo Abeni <pabeni@redhat.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.c b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
index c84ce54a84a0..c11bb0f0b8c4 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@ -4198,8 +4198,6 @@ static int mtk_free_dev(struct mtk_eth *eth)
 		metadata_dst_free(eth->dsa_meta[i]);
 	}
 
-	free_netdev(eth->dummy_dev);
-
 	return 0;
 }
 
@@ -5048,6 +5046,7 @@ static void mtk_remove(struct platform_device *pdev)
 	netif_napi_del(&eth->tx_napi);
 	netif_napi_del(&eth->rx_napi);
 	mtk_cleanup(eth);
+	free_netdev(eth->dummy_dev);
 	mtk_mdio_cleanup(eth);
 }
 
