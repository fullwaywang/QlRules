/**
 * @name openssl-610b66267e41a32805ab54cbc580c5a6d5826cb4-asn1_item_embed_d2i
 * @id cpp/openssl/610b66267e41a32805ab54cbc580c5a6d5826cb4/asn1-item-embed-d2i
 * @description openssl-610b66267e41a32805ab54cbc580c5a6d5826cb4-crypto/asn1/tasn_dec.c-asn1_item_embed_d2i CVE-2016-7053
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vtt_129, Variable vpchptr_140, ExprStmt target_2, ExprStmt target_3) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("asn1_template_free")
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpchptr_140
		and target_0.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vtt_129
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
		and target_0.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vpval_125, Parameter vit_126, Variable vi_137, ExprStmt target_1) {
		target_1.getExpr().(FunctionCall).getTarget().hasName("asn1_set_choice_selector")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpval_125
		and target_1.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vi_137
		and target_1.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vit_126
}

predicate func_2(Variable vtt_129, Variable vpchptr_140, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("asn1_template_ex_d2i")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpchptr_140
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("const unsigned char *")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("long")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget()=vtt_129
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(Literal).getValue()="1"
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(5).(VariableAccess).getTarget().getType().hasName("ASN1_TLC *")
}

predicate func_3(Variable vtt_129, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("const ASN1_TEMPLATE *")
		and target_3.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vtt_129
}

from Function func, Parameter vpval_125, Parameter vit_126, Variable vtt_129, Variable vi_137, Variable vpchptr_140, ExprStmt target_1, ExprStmt target_2, ExprStmt target_3
where
not func_0(vtt_129, vpchptr_140, target_2, target_3)
and func_1(vpval_125, vit_126, vi_137, target_1)
and func_2(vtt_129, vpchptr_140, target_2)
and func_3(vtt_129, target_3)
and vpval_125.getType().hasName("ASN1_VALUE **")
and vit_126.getType().hasName("const ASN1_ITEM *")
and vtt_129.getType().hasName("const ASN1_TEMPLATE *")
and vi_137.getType().hasName("int")
and vpchptr_140.getType().hasName("ASN1_VALUE **")
and vpval_125.getFunction() = func
and vit_126.getFunction() = func
and vtt_129.(LocalVariable).getFunction() = func
and vi_137.(LocalVariable).getFunction() = func
and vpchptr_140.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
