/**
 * @name v8-f58b1da35ee8ce5c7a4aebe270c9e00c09330f96-v8__internal__compiler__MachineOperatorBuilder__StackPointerGreaterThan_
 * @id cpp/v8/f58b1da35ee8ce5c7a4aebe270c9e00c09330f96/v8internalcompilermachineoperatorbuilderstackpointergreaterthan
 * @description v8-f58b1da35ee8ce5c7a4aebe270c9e00c09330f96-src/debug/debug-evaluate.cc-v8__internal__compiler__MachineOperatorBuilder__StackPointerGreaterThan_ CVE-2023-3420
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
	target_0.getValue()="2051"
	and not target_0.getValue()="2048"
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("V8_Fatal")
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="../../src/compiler/machine-operator.cc"
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("const char *")
	and target_0.getEnclosingFunction() = func
}

predicate func_2(ExprStmt target_4, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("V8_Fatal")
	and target_2.getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="../../src/compiler/machine-operator.cc"
	and target_2.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="2050"
	and target_2.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getType().hasName("const char *")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_4.getLocation()))
}

predicate func_3(VariableAccess target_5, Function func, ReturnStmt target_3) {
	target_3.getExpr().(AddressOfExpr).getOperand().(ReferenceFieldAccess).getTarget().getName()="kStackPointerGreaterThanJSIterationBody"
	and target_3.getExpr().(AddressOfExpr).getOperand().(ReferenceFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="cache_"
	and target_3.getExpr().(AddressOfExpr).getOperand().(ReferenceFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_3.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_5
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Function func, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("V8_Fatal")
	and target_4.getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="../../src/compiler/machine-operator.cc"
	and target_4.getExpr().(FunctionCall).getArgument(1) instanceof Literal
	and target_4.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("const char *")
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Parameter vkind_2040, VariableAccess target_5) {
	target_5.getTarget()=vkind_2040
}

from Function func, Parameter vkind_2040, Literal target_0, ReturnStmt target_3, ExprStmt target_4, VariableAccess target_5
where
func_0(func, target_0)
and not func_2(target_4, func)
and func_3(target_5, func, target_3)
and func_4(func, target_4)
and func_5(vkind_2040, target_5)
and vkind_2040.getType().hasName("StackCheckKind")
and vkind_2040.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
