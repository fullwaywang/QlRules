/**
 * @name linux-5594971e02764aa1c8210ffb838cb4e7897716e8-sdma_v4_0_process_trap_irq
 * @id cpp/linux/5594971e02764aa1c8210ffb838cb4e7897716e8/sdma-v4-0-process-trap-irq
 * @description linux-5594971e02764aa1c8210ffb838cb4e7897716e8-drivers/gpu/drm/amd/amdgpu/sdma_v4_0.c-sdma_v4_0_process_trap_irq CVE-2024-39471
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vinstance_2006, SwitchStmt target_1, ExprStmt target_2, AddressOfExpr target_3, Function func) {
exists(IfStmt target_0 |
	exists(RelationalOperation obj_0 | obj_0=target_0.getCondition() |
		obj_0.getLesserOperand().(VariableAccess).getTarget()=vinstance_2006
		and obj_0.getGreaterOperand().(Literal).getValue()="0"
	)
	and target_0.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=vinstance_2006
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_3.getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation())
)
}

predicate func_1(Function func, SwitchStmt target_1) {
	exists(PointerFieldAccess obj_0 | obj_0=target_1.getExpr() |
		obj_0.getTarget().getName()="ring_id"
		and obj_0.getQualifier().(VariableAccess).getTarget().getType().hasName("amdgpu_iv_entry *")
	)
	and exists(BlockStmt obj_1 | obj_1=target_1.getStmt() |
		exists(ExprStmt obj_2 | obj_2=obj_1.getStmt(1) |
			exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
				obj_3.getTarget().hasName("amdgpu_fence_process")
				and obj_3.getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="ring"
			)
		)
		and exists(IfStmt obj_4 | obj_4=obj_1.getStmt(4) |
			exists(EqualityOperation obj_5 | obj_5=obj_4.getCondition() |
				exists(PointerFieldAccess obj_6 | obj_6=obj_5.getLeftOperand() |
					obj_6.getTarget().getName()="asic_type"
					and obj_6.getQualifier().(VariableAccess).getTarget().getType().hasName("amdgpu_device *")
				)
			)
			and exists(ExprStmt obj_7 | obj_7=obj_4.getThen() |
				exists(FunctionCall obj_8 | obj_8=obj_7.getExpr() |
					obj_8.getTarget().hasName("amdgpu_fence_process")
					and obj_8.getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="page"
				)
			)
		)
		and obj_1.getStmt(0).(SwitchCase).getExpr().(Literal).getValue()="0"
		and obj_1.getStmt(3).(SwitchCase).getExpr().(Literal).getValue()="1"
	)
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vinstance_2006, ExprStmt target_2) {
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getArgument(0) |
				obj_2.getTarget().getName()="client_id"
				and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("amdgpu_iv_entry *")
			)
			and obj_1.getTarget().hasName("sdma_v4_0_irq_id_to_seq")
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vinstance_2006
	)
}

predicate func_3(Variable vinstance_2006, AddressOfExpr target_3) {
	exists(ValueFieldAccess obj_0 | obj_0=target_3.getOperand() |
		exists(ArrayExpr obj_1 | obj_1=obj_0.getQualifier() |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getArrayBase() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="sdma"
					and obj_3.getQualifier().(VariableAccess).getTarget().getType().hasName("amdgpu_device *")
				)
				and obj_2.getTarget().getName()="instance"
			)
			and obj_1.getArrayOffset().(VariableAccess).getTarget()=vinstance_2006
		)
		and obj_0.getTarget().getName()="ring"
	)
}

from Function func, Variable vinstance_2006, SwitchStmt target_1, ExprStmt target_2, AddressOfExpr target_3
where
not func_0(vinstance_2006, target_1, target_2, target_3, func)
and func_1(func, target_1)
and func_2(vinstance_2006, target_2)
and func_3(vinstance_2006, target_3)
and vinstance_2006.getType().hasName("uint32_t")
and vinstance_2006.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
