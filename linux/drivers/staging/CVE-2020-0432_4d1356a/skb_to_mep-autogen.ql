/**
 * @name linux-4d1356ac12f4d5180d0df345d85ff0ee42b89c72-skb_to_mep
 * @id cpp/linux/4d1356ac12f4d5180d0df345d85ff0ee42b89c72/skb-to-mep
 * @description linux-4d1356ac12f4d5180d0df345d85ff0ee42b89c72-drivers/staging/most/net/net.c-skb_to_mep CVE-2020-0432
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vmep_len_130, Parameter vskb_127, RelationalOperation target_2, AddExpr target_3, ExprStmt target_4, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vmep_len_130
		and target_0.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getTarget().getName()="len"
		and target_0.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vskb_127
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("printk")
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="3most_net: drop: too large packet! (%u)\n"
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="len"
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vskb_127
		and target_0.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-22"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_2.getGreaterOperand().(VariableAccess).getLocation())
		and target_3.getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_0.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vmep_len_130, RelationalOperation target_2) {
		 (target_2 instanceof GTExpr or target_2 instanceof LTExpr)
		and target_2.getLesserOperand().(PointerFieldAccess).getTarget().getName()="buffer_length"
		and target_2.getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("mbo *")
		and target_2.getGreaterOperand().(VariableAccess).getTarget()=vmep_len_130
}

predicate func_3(Parameter vskb_127, AddExpr target_3) {
		target_3.getAnOperand().(PointerFieldAccess).getTarget().getName()="len"
		and target_3.getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vskb_127
		and target_3.getAnOperand().(Literal).getValue()="8"
}

predicate func_4(Parameter vskb_127, ExprStmt target_4) {
		target_4.getExpr().(FunctionCall).getTarget().hasName("memcpy")
		and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("u8 *")
		and target_4.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="data"
		and target_4.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vskb_127
		and target_4.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="len"
		and target_4.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vskb_127
}

from Function func, Variable vmep_len_130, Parameter vskb_127, RelationalOperation target_2, AddExpr target_3, ExprStmt target_4
where
not func_0(vmep_len_130, vskb_127, target_2, target_3, target_4, func)
and func_2(vmep_len_130, target_2)
and func_3(vskb_127, target_3)
and func_4(vskb_127, target_4)
and vmep_len_130.getType().hasName("unsigned int")
and vskb_127.getType().hasName("const sk_buff *")
and vmep_len_130.(LocalVariable).getFunction() = func
and vskb_127.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
