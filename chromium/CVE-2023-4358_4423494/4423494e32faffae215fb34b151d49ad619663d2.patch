commit 4423494e32faffae215fb34b151d49ad619663d2	4423494e32faffae215fb34b151d49ad619663d2
Author: Matthew Denton <mpdenton@chromium.org>
Date:   Thu Aug 3 10:08:58 2023 +0000

    HostResolverSystemTask::OnLookupComplete() should not run synchronously
    
    HostResolverSystemTask::OnLookupComplete() can delete many objects and
    no functions expect it to run synchronously when
    HostResolverSystemTask::StartLookupAttempt() is called.
    
    Bug: 1466415, 1449497
    Change-Id: If17f62961ec46c85b21fe85b8e3c321dc10cdd15
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4727671
    Reviewed-by: Tsuyoshi Horo <horo@chromium.org>
    Commit-Queue: Matthew Denton <mpdenton@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1178936}

diff --git a/net/dns/host_resolver_system_task.cc b/net/dns/host_resolver_system_task.cc
index e3e65d4a44b8e..47da6593726cb 100644
--- a/net/dns/host_resolver_system_task.cc
+++ b/net/dns/host_resolver_system_task.cc
@@ -164,8 +164,6 @@ SystemDnsResolverOverrideCallback& GetSystemDnsResolverOverride() {
 
 void SetSystemDnsResolverOverride(
     SystemDnsResolverOverrideCallback dns_override) {
-  // TODO(crbug.com/1312224): for now, only allow this override to be set once.
-  DCHECK(!GetSystemDnsResolverOverride());
   GetSystemDnsResolverOverride() = std::move(dns_override);
 }
 
diff --git a/net/dns/host_resolver_system_task.h b/net/dns/host_resolver_system_task.h
index 58ba3ee9130b7..c094c828f14f9 100644
--- a/net/dns/host_resolver_system_task.h
+++ b/net/dns/host_resolver_system_task.h
@@ -207,6 +207,7 @@ NET_EXPORT_PRIVATE void SetSystemDnsResolutionTaskRunnerForTesting(
 // HostResolverSystemTask. This override will be called instead of posting
 // SystemHostResolverCall() to a worker thread. The override will only be
 // invoked on the main thread.
+// The override should never invoke `results_cb` synchronously.
 NET_EXPORT void SetSystemDnsResolverOverride(
     base::RepeatingCallback<void(const absl::optional<std::string>& host,
                                  AddressFamily address_family,
diff --git a/services/network/network_service.cc b/services/network/network_service.cc
index e50a0c10494a8..f708afc71dd3f 100644
--- a/services/network/network_service.cc
+++ b/services/network/network_service.cc
@@ -20,11 +20,14 @@
 #include "base/files/file_util.h"
 #include "base/functional/bind.h"
 #include "base/functional/callback.h"
+#include "base/functional/callback_helpers.h"
+#include "base/location.h"
 #include "base/logging.h"
 #include "base/memory/ptr_util.h"
 #include "base/memory/raw_ptr.h"
 #include "base/metrics/histogram_functions.h"
 #include "base/metrics/histogram_macros.h"
+#include "base/task/sequenced_task_runner.h"
 #include "base/task/task_traits.h"
 #include "base/task/thread_pool.h"
 #include "base/timer/timer.h"
@@ -225,6 +228,16 @@ void HandleBadMessage(const std::string& error) {
   network::debug::ClearDeserializationCrashKeyString();
 }
 
+// Runs `results_cb` on `sequenced_task_runner` with an empty result and
+// net::ERR_ABORTED.
+void AsyncResolveSystemDnsWithEmptyResult(
+    scoped_refptr<base::SequencedTaskRunner> sequenced_task_runner,
+    net::SystemDnsResultsCallback results_cb) {
+  sequenced_task_runner->PostTask(
+      FROM_HERE, base::BindOnce(std::move(results_cb), net::AddressList(), 0,
+                                net::ERR_ABORTED));
+}
+
 void ResolveSystemDnsWithMojo(
     const mojo::Remote<mojom::SystemDnsResolver>& system_dns_override,
     const absl::optional<std::string>& hostname,
@@ -232,10 +245,17 @@ void ResolveSystemDnsWithMojo(
     net::HostResolverFlags flags,
     net::SystemDnsResultsCallback results_cb,
     net::handles::NetworkHandle network) {
-  auto results_cb_with_default_invoke =
-      mojo::WrapCallbackWithDefaultInvokeIfNotRun(
-          std::move(results_cb), net::AddressList(), 0,
-          net::ERR_DNS_REQUEST_CANCELLED);
+  std::pair<net::SystemDnsResultsCallback, net::SystemDnsResultsCallback>
+      duplicated_results_cbs = base::SplitOnceCallback(std::move(results_cb));
+  // In the case that the callback is dropped without ever being run (if
+  // `system_dns_override` disconnects), `results_cb` should run asynchronously
+  // with an empty result. `results_cb` should never be run synchronously.
+  base::OnceClosure drop_handler =
+      base::BindOnce(&AsyncResolveSystemDnsWithEmptyResult,
+                     base::SequencedTaskRunner::GetCurrentDefault(),
+                     std::move(duplicated_results_cbs.second));
+  auto results_cb_with_default_invoke = mojo::WrapCallbackWithDropHandler(
+      std::move(duplicated_results_cbs.first), std::move(drop_handler));
   system_dns_override->Resolve(hostname, addr_family, flags, network,
                                std::move(results_cb_with_default_invoke));
 }
@@ -492,6 +512,8 @@ NetworkService::~NetworkService() {
 
   if (initialized_)
     trace_net_log_observer_.StopWatchForTraceStart();
+
+  net::SetSystemDnsResolverOverride(base::NullCallback());
 }
 
 void NetworkService::ReplaceSystemDnsConfigForTesting(
diff --git a/services/network/network_service_unittest.cc b/services/network/network_service_unittest.cc
index 9c9e726e7b1fc..d39a9d5db1908 100644
--- a/services/network/network_service_unittest.cc
+++ b/services/network/network_service_unittest.cc
@@ -57,10 +57,12 @@
 #include "services/network/network_context.h"
 #include "services/network/public/cpp/features.h"
 #include "services/network/public/cpp/network_switches.h"
+#include "services/network/public/mojom/host_resolver.mojom.h"
 #include "services/network/public/mojom/net_log.mojom.h"
 #include "services/network/public/mojom/network_change_manager.mojom.h"
 #include "services/network/public/mojom/network_context.mojom.h"
 #include "services/network/public/mojom/network_service.mojom.h"
+#include "services/network/public/mojom/system_dns_resolution.mojom.h"
 #include "services/network/test/fake_test_cert_verifier_params_factory.h"
 #include "services/network/test/test_network_context_client.h"
 #include "services/network/test/test_url_loader_client.h"
@@ -1077,11 +1079,17 @@ class NetworkServiceTestWithService : public testing::Test {
 
   ~NetworkServiceTestWithService() override = default;
 
+  virtual mojom::NetworkServiceParamsPtr GetParams() {
+    return mojom::NetworkServiceParams::New();
+  }
+
   void SetUp() override {
     test_server_.AddDefaultHandlers(base::FilePath(kServicesTestData));
     ASSERT_TRUE(test_server_.Start());
-    service_ = NetworkService::CreateForTesting();
-    service_->Bind(network_service_.BindNewPipeAndPassReceiver());
+    service_ = std::make_unique<NetworkService>(
+        nullptr, network_service_.BindNewPipeAndPassReceiver(),
+        /*delay_initialization_until_set_client=*/true);
+    service_->Initialize(GetParams());
   }
 
   void CreateNetworkContext() {
@@ -1711,6 +1719,96 @@ TEST_F(NetworkServiceNetworkDelegateTest, HandleClearSiteDataHeaders) {
   }
 }
 
+class NetworkServiceTestWithSystemDnsResolver
+    : public NetworkServiceTestWithService {
+ public:
+  NetworkServiceTestWithSystemDnsResolver() = default;
+  NetworkServiceTestWithSystemDnsResolver(
+      const NetworkServiceTestWithSystemDnsResolver&) = delete;
+  NetworkServiceTestWithSystemDnsResolver& operator=(
+      const NetworkServiceTestWithSystemDnsResolver&) = delete;
+  ~NetworkServiceTestWithSystemDnsResolver() override = default;
+
+  mojom::NetworkServiceParamsPtr GetParams() override {
+    auto params = mojom::NetworkServiceParams::New();
+    params->system_dns_resolver =
+        system_dns_resolver_pending_receiver_.InitWithNewPipeAndPassRemote();
+    return params;
+  }
+
+ protected:
+  mojo::PendingReceiver<mojom::SystemDnsResolver>
+      system_dns_resolver_pending_receiver_;
+};
+
+class StubHostResolverClient : public mojom::ResolveHostClient {
+ public:
+  using ResolveHostCallback = base::OnceCallback<void(net::AddressList)>;
+
+  explicit StubHostResolverClient(
+      mojo::PendingReceiver<mojom::ResolveHostClient> receiver,
+      ResolveHostCallback resolve_host_callback)
+      : receiver_(this, std::move(receiver)),
+        resolve_host_callback_(std::move(resolve_host_callback)) {}
+
+  StubHostResolverClient(const StubHostResolverClient&) = delete;
+  StubHostResolverClient& operator=(const StubHostResolverClient&) = delete;
+  ~StubHostResolverClient() override = default;
+
+  void OnTextResults(const std::vector<std::string>& text_results) override {}
+  void OnHostnameResults(const std::vector<net::HostPortPair>& hosts) override {
+  }
+  void OnComplete(int result,
+                  const net::ResolveErrorInfo& resolve_error_info,
+                  const absl::optional<net::AddressList>& resolved_addresses,
+                  const absl::optional<net::HostResolverEndpointResults>&
+                      endpoint_results_with_metadata) override {
+    std::move(resolve_host_callback_)
+        .Run(resolved_addresses.value_or(net::AddressList()));
+  }
+
+ private:
+  mojo::Receiver<network::mojom::ResolveHostClient> receiver_;
+  ResolveHostCallback resolve_host_callback_;
+};
+
+TEST_F(NetworkServiceTestWithSystemDnsResolver,
+       HandlesDeadSystemDnsResolverService) {
+  CreateNetworkContext();
+
+  // Kill the SystemDnsResolver pipe.
+  system_dns_resolver_pending_receiver_.reset();
+
+  // Call ResolveHost() and force it to use the SYSTEM dns resolver without
+  // cache or DoH. This will attempt to call back into the SystemDnsResolver,
+  // whose pipe is dead.
+  network::mojom::ResolveHostParametersPtr parameters =
+      network::mojom::ResolveHostParameters::New();
+  parameters->initial_priority = net::RequestPriority::HIGHEST;
+  // Use the SYSTEM resolver, and don't allow the cache or attempt DoH.
+  parameters->source = net::HostResolverSource::SYSTEM;
+  parameters->cache_usage =
+      network::mojom::ResolveHostParameters::CacheUsage::DISALLOWED;
+  parameters->secure_dns_policy = network::mojom::SecureDnsPolicy::DISABLE;
+  mojo::PendingReceiver<network::mojom::ResolveHostClient> receiver;
+  network_context_->ResolveHost(
+      network::mojom::HostResolverHost::NewHostPortPair(
+          net::HostPortPair("hostname1", 80)),
+      net::NetworkAnonymizationKey::CreateTransient(), std::move(parameters),
+      receiver.InitWithNewPipeAndPassRemote());
+
+  // Wait until the ResolveHost() call is done and make sure it returns an empty
+  // AddressList.
+  base::RunLoop run_loop;
+  auto stub_host_resolver_client = std::make_unique<StubHostResolverClient>(
+      std::move(receiver),
+      base::BindLambdaForTesting([&run_loop](net::AddressList address_list) {
+        ASSERT_TRUE(address_list.empty());
+        run_loop.Quit();
+      }));
+  run_loop.Run();
+}
+
 }  // namespace
 
 }  // namespace network
