commit 073278eae6d6ce07cc40107567907e545ec56157	073278eae6d6ce07cc40107567907e545ec56157
Author: Thomas Nguyen <tungnh@google.com>
Date:   Wed May 10 10:38:26 2023 +0000

    Ignore button pressed event if button row intersects with PiP window
    
    Bug: 1394410
    
    Change-Id: I215826daabe6476f57613ec4f53417e4b16659fe
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4498354
    Reviewed-by: Elias Klim <elklm@chromium.org>
    Reviewed-by: Thomas Lukaszewicz <tluk@chromium.org>
    Commit-Queue: Thomas Nguyen <tungnh@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1141985}

diff --git a/chrome/browser/ui/views/permissions/permission_prompt_bubble_base_view.cc b/chrome/browser/ui/views/permissions/permission_prompt_bubble_base_view.cc
index 4615ec44595e6..080bfd802f65e 100644
--- a/chrome/browser/ui/views/permissions/permission_prompt_bubble_base_view.cc
+++ b/chrome/browser/ui/views/permissions/permission_prompt_bubble_base_view.cc
@@ -11,6 +11,7 @@
 #include "base/strings/string_util.h"
 #include "base/time/time.h"
 #include "chrome/browser/extensions/extension_ui_util.h"
+#include "chrome/browser/picture_in_picture/picture_in_picture_window_manager.h"
 #include "chrome/browser/platform_util.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/ui/browser.h"
@@ -33,12 +34,14 @@
 #include "components/url_formatter/elide_url.h"
 #include "components/vector_icons/vector_icons.h"
 #include "extensions/common/constants.h"
+#include "third_party/abseil-cpp/absl/types/optional.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/metadata/metadata_impl_macros.h"
 #include "ui/base/models/image_model.h"
 #include "ui/base/ui_base_features.h"
 #include "ui/color/color_id.h"
 #include "ui/gfx/geometry/insets.h"
+#include "ui/gfx/geometry/rect.h"
 #include "ui/gfx/paint_vector_icon.h"
 #include "ui/gfx/text_constants.h"
 #include "ui/views/bubble/bubble_frame_view.h"
@@ -261,6 +264,23 @@ std::u16string PermissionPromptBubbleBaseView::GetAccessibleWindowTitle()
   return accessible_window_title_;
 }
 
+bool PermissionPromptBubbleBaseView::ShouldIgnoreButtonPressedEventHandling(
+    View* button,
+    const ui::Event& event) const {
+  // Ignore the key pressed event if the button row bounds intersect with PiP
+  // windows bounds.
+  if (!event.IsKeyEvent()) {
+    return false;
+  }
+
+  absl::optional<gfx::Rect> pip_window_bounds =
+      PictureInPictureWindowManager::GetInstance()
+          ->GetPictureInPictureWindowBounds();
+
+  return pip_window_bounds &&
+         pip_window_bounds->Intersects(button->GetBoundsInScreen());
+}
+
 void PermissionPromptBubbleBaseView::AcceptPermission() {
   RecordDecision(permissions::PermissionAction::GRANTED);
   if (delegate_) {
diff --git a/chrome/browser/ui/views/permissions/permission_prompt_bubble_base_view.h b/chrome/browser/ui/views/permissions/permission_prompt_bubble_base_view.h
index 50182367bc72a..10864d28d77a7 100644
--- a/chrome/browser/ui/views/permissions/permission_prompt_bubble_base_view.h
+++ b/chrome/browser/ui/views/permissions/permission_prompt_bubble_base_view.h
@@ -69,6 +69,11 @@ class PermissionPromptBubbleBaseView : public views::BubbleDialogDelegateView {
   std::u16string GetAccessibleWindowTitle() const override;
   std::u16string GetWindowTitle() const override;
 
+  // views::DialogDelegate:
+  bool ShouldIgnoreButtonPressedEventHandling(
+      View* button,
+      const ui::Event& event) const override;
+
   void AcceptPermission();
   void AcceptPermissionThisTime();
   void DenyPermission();
diff --git a/ui/views/window/dialog_client_view.cc b/ui/views/window/dialog_client_view.cc
index 6b17ddce3bc32..e57e76d8d789e 100644
--- a/ui/views/window/dialog_client_view.cc
+++ b/ui/views/window/dialog_client_view.cc
@@ -304,15 +304,27 @@ void DialogClientView::UpdateDialogButton(MdTextButton** member,
 void DialogClientView::ButtonPressed(ui::DialogButton type,
                                      const ui::Event& event) {
   DialogDelegate* const delegate = GetDialogDelegate();
-  if (delegate && !input_protector_->IsPossiblyUnintendedInteraction(event)) {
-    (type == ui::DIALOG_BUTTON_OK) ? delegate->AcceptDialog()
-                                   : delegate->CancelDialog();
+  if (!delegate || input_protector_->IsPossiblyUnintendedInteraction(event)) {
+    return;
+  }
+
+  DCHECK(type == ui::DIALOG_BUTTON_OK || type == ui::DIALOG_BUTTON_CANCEL);
+  if (type == ui::DIALOG_BUTTON_OK &&
+      !delegate->ShouldIgnoreButtonPressedEventHandling(ok_button_, event)) {
+    delegate->AcceptDialog();
+  }
+
+  if (type == ui::DIALOG_BUTTON_CANCEL &&
+      !delegate->ShouldIgnoreButtonPressedEventHandling(cancel_button_,
+                                                        event)) {
+    delegate->CancelDialog();
   }
 }
 
 int DialogClientView::GetExtraViewSpacing() const {
-  if (!ShouldShow(extra_view_) || !(ok_button_ || cancel_button_))
+  if (!ShouldShow(extra_view_) || !(ok_button_ || cancel_button_)) {
     return 0;
+  }
 
   return LayoutProvider::Get()->GetDistanceMetric(
       views::DISTANCE_RELATED_BUTTON_HORIZONTAL);
diff --git a/ui/views/window/dialog_delegate.cc b/ui/views/window/dialog_delegate.cc
index 159b30ab291d5..806d0b19dd3ca 100644
--- a/ui/views/window/dialog_delegate.cc
+++ b/ui/views/window/dialog_delegate.cc
@@ -161,6 +161,12 @@ bool DialogDelegate::IsDialogButtonEnabled(ui::DialogButton button) const {
   return params_.enabled_buttons & button;
 }
 
+bool DialogDelegate::ShouldIgnoreButtonPressedEventHandling(
+    View* button,
+    const ui::Event& event) const {
+  return false;
+}
+
 bool DialogDelegate::Cancel() {
   DCHECK(!already_started_close_);
   if (cancel_callback_)
diff --git a/ui/views/window/dialog_delegate.h b/ui/views/window/dialog_delegate.h
index f6a7596566c79..37661f6492033 100644
--- a/ui/views/window/dialog_delegate.h
+++ b/ui/views/window/dialog_delegate.h
@@ -139,6 +139,11 @@ class VIEWS_EXPORT DialogDelegate : public WidgetDelegate {
   // Returns whether the specified dialog button is enabled.
   virtual bool IsDialogButtonEnabled(ui::DialogButton button) const;
 
+  // Returns true if we should ignore key pressed event handling of `button`.
+  virtual bool ShouldIgnoreButtonPressedEventHandling(
+      View* button,
+      const ui::Event& event) const;
+
   // For Dialog boxes, if there is a "Cancel" button or no dialog button at all,
   // this is called when the user presses the "Cancel" button.  This function
   // should return true if the window can be closed after it returns, or false
