/**
 * @name linux-ebaa7d3c26332330a48f9a15f8e518d526cc0f21-tcp_ao_info_cmd
 * @id cpp/linux/ebaa7d3c26332330a48f9a15f8e518d526cc0f21/tcp-ao-info-cmd
 * @description linux-ebaa7d3c26332330a48f9a15f8e518d526cc0f21-net/ipv4/tcp_ao.c-tcp_ao_info_cmd CVE-2024-40985
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable verr_1942, LogicalAndExpr target_4, ReturnStmt target_5) {
exists(ExprStmt target_0 |
	exists(AssignExpr obj_0 | obj_0=target_0.getExpr() |
		obj_0.getLValue().(VariableAccess).getTarget()=verr_1942
		and obj_0.getRValue() instanceof UnaryMinusExpr
	)
	and exists(BlockStmt obj_1 | obj_1=target_0.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getThen().(BlockStmt).getStmt(0)=target_0
			and obj_2.getCondition()=target_4
		)
	)
	and target_5.getExpr().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation())
)
}

predicate func_1(LogicalAndExpr target_4, Function func) {
exists(GotoStmt target_1 |
	exists(BlockStmt obj_0 | obj_0=target_1.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(1)=target_1
			and obj_1.getCondition()=target_4
		)
	)
	and target_1.getName() ="out"
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(Function func, UnaryMinusExpr target_2) {
	target_2.getValue()="-129"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(LogicalAndExpr target_4, Function func, ReturnStmt target_3) {
	target_3.getExpr() instanceof UnaryMinusExpr
	and target_3.getParent().(IfStmt).getCondition()=target_4
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Function func, LogicalAndExpr target_4) {
	exists(ValueFieldAccess obj_0 | obj_0=target_4.getLeftOperand() |
		obj_0.getTarget().getName()="ao_required"
		and obj_0.getQualifier().(VariableAccess).getTarget().getType().hasName("tcp_ao_info_opt")
	)
	and exists(FunctionCall obj_1 | obj_1=target_4.getRightOperand() |
		obj_1.getTarget().hasName("tcp_ao_required_verify")
		and obj_1.getArgument(0).(VariableAccess).getTarget().getType().hasName("sock *")
	)
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable verr_1942, VariableAccess target_6, ReturnStmt target_5) {
	target_5.getExpr().(VariableAccess).getTarget()=verr_1942
	and target_5.getParent().(IfStmt).getCondition()=target_6
}

predicate func_6(Variable verr_1942, ReturnStmt target_5, VariableAccess target_6) {
	target_6.getTarget()=verr_1942
	and target_6.getParent().(IfStmt).getThen()=target_5
}

from Function func, Variable verr_1942, UnaryMinusExpr target_2, ReturnStmt target_3, LogicalAndExpr target_4, ReturnStmt target_5, VariableAccess target_6
where
not func_0(verr_1942, target_4, target_5)
and not func_1(target_4, func)
and func_2(func, target_2)
and func_3(target_4, func, target_3)
and func_4(func, target_4)
and func_5(verr_1942, target_6, target_5)
and func_6(verr_1942, target_5, target_6)
and verr_1942.getType().hasName("int")
and verr_1942.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
