/**
 * @name linux-47f3860c4931175f112f28dcac66eacca9b1040f-tcp_sendmsg_locked
 * @id cpp/linux/47f3860c4931175f112f28dcac66eacca9b1040f/tcp-sendmsg-locked
 * @description linux-47f3860c4931175f112f28dcac66eacca9b1040f-net/ipv4/tcp.c-tcp_sendmsg_locked CVE-2022-48819
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsk_1175, Variable vskb_1179, Variable vcopy_1262, BlockStmt target_15, NotExpr target_3, SubExpr target_16) {
exists(LogicalOrExpr target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getLeftOperand() |
		obj_0.getTarget().hasName("tcp_downgrade_zcopy_pure")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vsk_1175
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vskb_1179
	)
	and exists(NotExpr obj_1 | obj_1=target_0.getRightOperand() |
		exists(FunctionCall obj_2 | obj_2=obj_1.getOperand() |
			obj_2.getTarget().hasName("sk_wmem_schedule")
			and obj_2.getArgument(0).(VariableAccess).getTarget()=vsk_1175
			and obj_2.getArgument(1).(VariableAccess).getTarget()=vcopy_1262
		)
	)
	and exists(FunctionCall obj_3 | obj_3=target_0.getLeftOperand() |
		obj_3.getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and obj_3.getArgument(1).(VariableAccess).getLocation().isBefore(target_16.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	)
	and target_0.getParent().(IfStmt).getThen()=target_15
)
}

predicate func_2(Variable vskb_1179, FunctionCall target_2) {
	target_2.getTarget().hasName("skb_end_pointer")
	and target_2.getArgument(0).(VariableAccess).getTarget()=vskb_1179
}

predicate func_3(Parameter vsk_1175, Variable vcopy_1262, NotExpr target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getOperand() |
		obj_0.getTarget().hasName("sk_wmem_schedule")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vsk_1175
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vcopy_1262
	)
	and target_3.getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_4(Parameter vsk_1175, Variable vextra_1324, VariableAccess target_4) {
	exists(FunctionCall obj_0 | obj_0=target_4.getParent() |
		exists(NotExpr obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().hasName("sk_wmem_schedule")
				and obj_2.getArgument(1).(VariableAccess).getTarget()=vextra_1324
			)
		)
	)
	and target_4.getTarget()=vsk_1175
}

predicate func_5(Parameter vsk_1175, VariableAccess target_5) {
	target_5.getTarget()=vsk_1175
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_6(Variable vskb_1179, VariableAccess target_6) {
	target_6.getTarget()=vskb_1179
	and target_6.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
}

predicate func_7(Variable vskb_1179, BlockStmt target_15, FunctionCall target_7) {
	exists(NotExpr obj_0 | obj_0=target_7.getArgument(0) |
		exists(NotExpr obj_1 | obj_1=obj_0.getOperand() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().hasName("skb_zcopy_pure")
				and obj_2.getArgument(0).(VariableAccess).getTarget()=vskb_1179
			)
		)
	)
	and target_7.getTarget().hasName("__builtin_expect")
	and target_7.getArgument(1).(Literal).getValue()="0"
	and target_7.getParent().(IfStmt).getThen()=target_15
}

/*predicate func_8(Variable vskb_1179, SubExpr target_16, NotExpr target_8) {
	exists(FunctionCall obj_0 | obj_0=target_8.getOperand() |
		obj_0.getTarget().hasName("skb_zcopy_pure")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vskb_1179
	)
	and exists(NotExpr obj_1 | obj_1=target_8.getParent() |
		exists(FunctionCall obj_2 | obj_2=obj_1.getParent() |
			exists(IfStmt obj_3 | obj_3=obj_2.getParent() |
				exists(FunctionCall obj_4 | obj_4=obj_3.getCondition() |
					obj_4.getTarget().hasName("__builtin_expect")
					and obj_4.getArgument(1).(Literal).getValue()="0"
				)
			)
		)
	)
	and target_8.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_16.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

*/
predicate func_9(FunctionCall target_7, Function func, DeclStmt target_9) {
	target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Parameter vsk_1175, Variable vextra_1324, FunctionCall target_7, IfStmt target_10) {
	exists(NotExpr obj_0 | obj_0=target_10.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().hasName("sk_wmem_schedule")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vsk_1175
			and obj_1.getArgument(1).(VariableAccess).getTarget()=vextra_1324
		)
	)
	and target_10.getThen().(GotoStmt).getName() ="wait_for_space"
	and target_10.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
}

/*predicate func_11(Parameter vsk_1175, Variable vextra_1324, ExprStmt target_12, DeclStmt target_9, VariableAccess target_11) {
	exists(FunctionCall obj_0 | obj_0=target_11.getParent() |
		exists(NotExpr obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getOperand() |
				exists(VariableAccess obj_3 | obj_3=obj_2.getArgument(0) |
					obj_3.getTarget()=vsk_1175
					and obj_3.getLocation().isBefore(target_12.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
				)
				and obj_2.getTarget().hasName("sk_wmem_schedule")
			)
		)
	)
	and target_11.getTarget()=vextra_1324
}

*/
predicate func_12(Parameter vsk_1175, Variable vextra_1324, FunctionCall target_7, ExprStmt target_12) {
	exists(FunctionCall obj_0 | obj_0=target_12.getExpr() |
		obj_0.getTarget().hasName("sk_mem_charge")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vsk_1175
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vextra_1324
	)
	and target_12.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
}

predicate func_13(FunctionCall target_7, Function func, ExprStmt target_13) {
	exists(AssignAndExpr obj_0 | obj_0=target_13.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="flags"
			and obj_1.getQualifier() instanceof FunctionCall
		)
		and obj_0.getRValue().(ComplementExpr).getValue()="-5"
	)
	and target_13.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
	and target_13.getEnclosingFunction() = func
}

predicate func_14(NotExpr target_17, Function func, IfStmt target_14) {
	target_14.getCondition() instanceof NotExpr
	and target_14.getThen().(GotoStmt).getName() ="wait_for_space"
	and target_14.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_17
	and target_14.getEnclosingFunction() = func
}

predicate func_15(Function func, BlockStmt target_15) {
	target_15.getStmt(1) instanceof IfStmt
	and target_15.getStmt(2) instanceof ExprStmt
	and target_15.getStmt(3) instanceof ExprStmt
	and target_15.getEnclosingFunction() = func
}

predicate func_16(Variable vskb_1179, SubExpr target_16) {
	exists(PointerFieldAccess obj_0 | obj_0=target_16.getLeftOperand() |
		obj_0.getTarget().getName()="truesize"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vskb_1179
	)
	and target_16.getRightOperand() instanceof AddExpr
}

predicate func_17(BlockStmt target_18, Function func, NotExpr target_17) {
	target_17.getOperand().(VariableAccess).getTarget().getType().hasName("bool")
	and target_17.getParent().(IfStmt).getThen()=target_18
	and target_17.getEnclosingFunction() = func
}

predicate func_18(Parameter vsk_1175, Variable vskb_1179, BlockStmt target_18) {
	exists(IfStmt obj_0 | obj_0=target_18.getStmt(3) |
		exists(NotExpr obj_1 | obj_1=obj_0.getCondition() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().hasName("sk_page_frag_refill")
				and obj_2.getArgument(0).(VariableAccess).getTarget()=vsk_1175
				and obj_2.getArgument(1).(VariableAccess).getTarget().getType().hasName("page_frag *")
			)
		)
		and obj_0.getThen().(GotoStmt).getName() ="wait_for_space"
	)
	and exists(IfStmt obj_3 | obj_3=target_18.getStmt(4) |
		exists(NotExpr obj_4 | obj_4=obj_3.getCondition() |
			exists(FunctionCall obj_5 | obj_5=obj_4.getOperand() |
				exists(PointerFieldAccess obj_6 | obj_6=obj_5.getArgument(2) |
					obj_6.getTarget().getName()="page"
					and obj_6.getQualifier().(VariableAccess).getTarget().getType().hasName("page_frag *")
				)
				and exists(PointerFieldAccess obj_7 | obj_7=obj_5.getArgument(3) |
					obj_7.getTarget().getName()="offset"
					and obj_7.getQualifier().(VariableAccess).getTarget().getType().hasName("page_frag *")
				)
				and obj_5.getTarget().hasName("skb_can_coalesce")
				and obj_5.getArgument(0).(VariableAccess).getTarget()=vskb_1179
				and obj_5.getArgument(1).(VariableAccess).getTarget().getType().hasName("int")
			)
		)
		and exists(BlockStmt obj_8 | obj_8=obj_3.getThen() |
			exists(IfStmt obj_9 | obj_9=obj_8.getStmt(0) |
				exists(RelationalOperation obj_10 | obj_10=obj_9.getCondition() |
					obj_10.getGreaterOperand().(VariableAccess).getTarget().getType().hasName("int")
					and obj_10.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
				)
				and exists(BlockStmt obj_11 | obj_11=obj_9.getThen() |
					obj_11.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("tcp_mark_push")
					and obj_11.getStmt(1).(GotoStmt).getName() ="new_segment"
				)
			)
			and obj_8.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("bool")
		)
	)
}

from Function func, Parameter vsk_1175, Variable vskb_1179, Variable vcopy_1262, Variable vextra_1324, FunctionCall target_2, NotExpr target_3, VariableAccess target_4, VariableAccess target_5, VariableAccess target_6, FunctionCall target_7, DeclStmt target_9, IfStmt target_10, ExprStmt target_12, ExprStmt target_13, IfStmt target_14, BlockStmt target_15, SubExpr target_16, NotExpr target_17, BlockStmt target_18
where
not func_0(vsk_1175, vskb_1179, vcopy_1262, target_15, target_3, target_16)
and func_2(vskb_1179, target_2)
and func_3(vsk_1175, vcopy_1262, target_3)
and func_4(vsk_1175, vextra_1324, target_4)
and func_5(vsk_1175, target_5)
and func_6(vskb_1179, target_6)
and func_7(vskb_1179, target_15, target_7)
and func_9(target_7, func, target_9)
and func_10(vsk_1175, vextra_1324, target_7, target_10)
and func_12(vsk_1175, vextra_1324, target_7, target_12)
and func_13(target_7, func, target_13)
and func_14(target_17, func, target_14)
and func_15(func, target_15)
and func_16(vskb_1179, target_16)
and func_17(target_18, func, target_17)
and func_18(vsk_1175, vskb_1179, target_18)
and vsk_1175.getType().hasName("sock *")
and vskb_1179.getType().hasName("sk_buff *")
and vcopy_1262.getType().hasName("int")
and vextra_1324.getType().hasName("u32")
and vsk_1175.getFunction() = func
and vskb_1179.(LocalVariable).getFunction() = func
and vcopy_1262.(LocalVariable).getFunction() = func
and vextra_1324.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
