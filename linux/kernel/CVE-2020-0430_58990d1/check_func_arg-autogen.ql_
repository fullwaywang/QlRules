/**
 * @name linux-58990d1ff3f7896ee341030e9a7c2e4002570683-check_func_arg
 * @id cpp/linux/58990d1ff3f7896ee341030e9a7c2e4002570683/check-func-arg
 * @description linux-58990d1ff3f7896ee341030e9a7c2e4002570683-kernel/bpf/verifier.c-check_func_arg CVE-2020-0430
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vreg_1942, Variable verr_1944, Parameter venv_1938, Parameter vregno_1938, EqualityOperation target_2, LogicalAndExpr target_3, ReturnStmt target_4, ExprStmt target_5, ExprStmt target_6, ExprStmt target_7, ExprStmt target_8) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1944
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("check_ctx_reg")
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_1938
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vreg_1942
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vregno_1938
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_3.getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_4.getExpr().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation())
	and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_7.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getLocation())
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation()))
}

predicate func_1(Variable verr_1944, EqualityOperation target_2) {
exists(IfStmt target_1 |
	target_1.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=verr_1944
	and target_1.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_1.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=verr_1944
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(3)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2)
}

predicate func_2(Function func, EqualityOperation target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget().getType().hasName("bpf_arg_type")
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vreg_1942, LogicalAndExpr target_3) {
	target_3.getLeftOperand().(FunctionCall).getTarget().hasName("register_is_null")
	and target_3.getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vreg_1942
	and target_3.getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("bpf_arg_type")
}

predicate func_4(Variable verr_1944, VariableAccess target_9, ReturnStmt target_4) {
	target_4.getExpr().(VariableAccess).getTarget()=verr_1944
	and target_4.getParent().(IfStmt).getCondition()=target_9
}

predicate func_5(Parameter venv_1938, ExprStmt target_5) {
	target_5.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_1938
	and target_5.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="helper access to the packet is not allowed\n"
}

predicate func_6(Parameter venv_1938, ExprStmt target_6) {
	target_6.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_1938
	and target_6.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="unsupported arg_type %d\n"
	and target_6.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("bpf_arg_type")
}

predicate func_7(Parameter venv_1938, Parameter vregno_1938, ExprStmt target_7) {
	target_7.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_1938
	and target_7.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="R%d leaks addr into helper function\n"
	and target_7.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vregno_1938
}

predicate func_8(Variable verr_1944, Parameter venv_1938, Parameter vregno_1938, ExprStmt target_8) {
	target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1944
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("check_helper_mem_access")
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_1938
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vregno_1938
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="key_size"
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="map_ptr"
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_call_arg_meta *")
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(Literal).getValue()="0"
}

predicate func_9(Variable verr_1944, ReturnStmt target_4, VariableAccess target_9) {
	target_9.getTarget()=verr_1944
	and target_9.getParent().(IfStmt).getThen()=target_4
}

from Function func, Variable vreg_1942, Variable verr_1944, Parameter venv_1938, Parameter vregno_1938, EqualityOperation target_2, LogicalAndExpr target_3, ReturnStmt target_4, ExprStmt target_5, ExprStmt target_6, ExprStmt target_7, ExprStmt target_8, VariableAccess target_9
where
not func_0(vreg_1942, verr_1944, venv_1938, vregno_1938, target_2, target_3, target_4, target_5, target_6, target_7, target_8)
and not func_1(verr_1944, target_2)
and func_2(func, target_2)
and func_3(vreg_1942, target_3)
and func_4(verr_1944, target_9, target_4)
and func_5(venv_1938, target_5)
and func_6(venv_1938, target_6)
and func_7(venv_1938, vregno_1938, target_7)
and func_8(verr_1944, venv_1938, vregno_1938, target_8)
and func_9(verr_1944, target_4, target_9)
and vreg_1942.getType().hasName("bpf_reg_state *")
and verr_1944.getType().hasName("int")
and venv_1938.getType().hasName("bpf_verifier_env *")
and vregno_1938.getType().hasName("u32")
and vreg_1942.(LocalVariable).getFunction() = func
and verr_1944.(LocalVariable).getFunction() = func
and venv_1938.getFunction() = func
and vregno_1938.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
