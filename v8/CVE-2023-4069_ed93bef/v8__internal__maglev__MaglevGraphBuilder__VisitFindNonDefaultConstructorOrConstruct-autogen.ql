/**
 * @name v8-ed93bef7ab786d5367c2ae7882922c23aa0eda64-v8__internal__maglev__MaglevGraphBuilder__VisitFindNonDefaultConstructorOrConstruct
 * @id cpp/v8/ed93bef7ab786d5367c2ae7882922c23aa0eda64/v8internalmaglevmaglevgraphbuildervisitfindnondefaultconstructororconstruct
 * @description v8-ed93bef7ab786d5367c2ae7882922c23aa0eda64-src/maglev/maglev-graph-builder.cc-v8__internal__maglev__MaglevGraphBuilder__VisitFindNonDefaultConstructorOrConstruct CVE-2023-4069
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vcurrent_function_5364, Variable vnew_target_function_5379, BlockStmt target_2, ConstructorCall target_3, FunctionCall target_4, LogicalAndExpr target_1) {
exists(LogicalAndExpr target_0 |
	target_0.getLeftOperand() instanceof LogicalAndExpr
	and target_0.getRightOperand().(FunctionCall).getTarget().hasName("HasValidInitialMap")
	and target_0.getRightOperand().(FunctionCall).getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_0.getRightOperand().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("AsJSFunction")
	and target_0.getRightOperand().(FunctionCall).getArgument(0).(FunctionCall).getQualifier().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(VariableAccess).getTarget()=vnew_target_function_5379
	and target_0.getRightOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcurrent_function_5364
	and target_0.getParent().(IfStmt).getThen()=target_2
	and target_3.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getRightOperand().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
	and target_0.getRightOperand().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_4.getArgument(0).(VariableAccess).getLocation())
	and target_0.getRightOperand().(FunctionCall).getArgument(0).(FunctionCall).getQualifier().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getLeftOperand().(FunctionCall).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vnew_target_function_5379, BlockStmt target_2, LogicalAndExpr target_1) {
	target_1.getLeftOperand().(FunctionCall).getTarget().hasName("operator bool")
	and target_1.getLeftOperand().(FunctionCall).getQualifier().(VariableAccess).getTarget()=vnew_target_function_5379
	and target_1.getRightOperand().(FunctionCall).getTarget().hasName("IsJSFunction")
	and target_1.getRightOperand().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(VariableAccess).getTarget()=vnew_target_function_5379
	and target_1.getParent().(IfStmt).getThen()=target_2
}

predicate func_2(Function func, BlockStmt target_2) {
	target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("ValueNode *")
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("BuildAllocateFastObject")
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(ConstructorCall).getArgument(0).(FunctionCall).getTarget().hasName("AsJSFunction")
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(ConstructorCall).getArgument(1).(FunctionCall).getTarget().hasName("zone")
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(ConstructorCall).getArgument(1).(FunctionCall).getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(ConstructorCall).getArgument(2).(FunctionCall).getTarget().hasName("broker")
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(ConstructorCall).getArgument(2).(FunctionCall).getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vcurrent_function_5364, ConstructorCall target_3) {
	target_3.getArgument(0).(VariableAccess).getTarget()=vcurrent_function_5364
}

predicate func_4(Variable vcurrent_function_5364, FunctionCall target_4) {
	target_4.getTarget().hasName("GetConstant")
	and target_4.getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_4.getArgument(0).(VariableAccess).getTarget()=vcurrent_function_5364
}

from Function func, Variable vcurrent_function_5364, Variable vnew_target_function_5379, LogicalAndExpr target_1, BlockStmt target_2, ConstructorCall target_3, FunctionCall target_4
where
not func_0(vcurrent_function_5364, vnew_target_function_5379, target_2, target_3, target_4, target_1)
and func_1(vnew_target_function_5379, target_2, target_1)
and func_2(func, target_2)
and func_3(vcurrent_function_5364, target_3)
and func_4(vcurrent_function_5364, target_4)
and vcurrent_function_5364.getType().hasName("JSFunctionRef")
and vnew_target_function_5379.getType().hasName("OptionalHeapObjectRef")
and vcurrent_function_5364.(LocalVariable).getFunction() = func
and vnew_target_function_5379.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
