/**
 * @name linux-c8401dda2f0a00cd25c0af6a95ed50e478d25de4-x86_emulate_instruction
 * @id cpp/linux/c8401dda2f0a00cd25c0af6a95ed50e478d25de4/x86-emulate-instruction
 * @description linux-c8401dda2f0a00cd25c0af6a95ed50e478d25de4-arch/x86/kvm/x86.c-x86_emulate_instruction CVE-2017-7518
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vr_5620, Variable vrflags_5725, Parameter vvcpu_5614, FunctionCall target_0) {
	target_0.getTarget().hasName("kvm_vcpu_check_singlestep")
	and not target_0.getTarget().hasName("kvm_vcpu_do_singlestep")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vvcpu_5614
	and target_0.getArgument(1).(VariableAccess).getTarget()=vrflags_5725
	and target_0.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vr_5620
}

predicate func_1(Variable vctxt_5621, Parameter vvcpu_5614, ExprStmt target_3, ExprStmt target_4, LogicalOrExpr target_5) {
exists(LogicalAndExpr target_1 |
	target_1.getLeftOperand() instanceof EqualityOperation
	and target_1.getRightOperand().(LogicalOrExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="tf"
	and target_1.getRightOperand().(LogicalOrExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctxt_5621
	and target_1.getRightOperand().(LogicalOrExpr).getRightOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="guest_debug"
	and target_1.getRightOperand().(LogicalOrExpr).getRightOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_5614
	and target_1.getRightOperand().(LogicalOrExpr).getRightOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="2"
	and target_1.getParent().(IfStmt).getThen()=target_3
	and target_4.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getRightOperand().(LogicalOrExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_1.getRightOperand().(LogicalOrExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_5.getLeftOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vr_5620, ExprStmt target_3, EqualityOperation target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget()=vr_5620
	and target_2.getParent().(IfStmt).getThen()=target_3
}

predicate func_3(Function func, ExprStmt target_3) {
	target_3.getExpr() instanceof FunctionCall
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vctxt_5621, Parameter vvcpu_5614, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("kvm_rip_write")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_5614
	and target_4.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="eip"
	and target_4.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctxt_5621
}

predicate func_5(Variable vctxt_5621, LogicalOrExpr target_5) {
	target_5.getLeftOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="have_exception"
	and target_5.getLeftOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctxt_5621
	and target_5.getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getTarget().hasName("exception_type")
	and target_5.getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="vector"
	and target_5.getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="exception"
	and target_5.getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctxt_5621
	and target_5.getRightOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="1"
}

from Function func, Variable vr_5620, Variable vctxt_5621, Variable vrflags_5725, Parameter vvcpu_5614, FunctionCall target_0, EqualityOperation target_2, ExprStmt target_3, ExprStmt target_4, LogicalOrExpr target_5
where
func_0(vr_5620, vrflags_5725, vvcpu_5614, target_0)
and not func_1(vctxt_5621, vvcpu_5614, target_3, target_4, target_5)
and func_2(vr_5620, target_3, target_2)
and func_3(func, target_3)
and func_4(vctxt_5621, vvcpu_5614, target_4)
and func_5(vctxt_5621, target_5)
and vr_5620.getType().hasName("int")
and vctxt_5621.getType().hasName("x86_emulate_ctxt *")
and vrflags_5725.getType().hasName("unsigned long")
and vvcpu_5614.getType().hasName("kvm_vcpu *")
and vr_5620.(LocalVariable).getFunction() = func
and vctxt_5621.(LocalVariable).getFunction() = func
and vrflags_5725.(LocalVariable).getFunction() = func
and vvcpu_5614.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
