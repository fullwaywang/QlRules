/**
 * @name linux-705318a99a138c29a512a72c3e0043b3cd7f55f4-scm_fp_copy
 * @id cpp/linux/705318a99a138c29a512a72c3e0043b3cd7f55f4/scm-fp-copy
 * @description linux-705318a99a138c29a512a72c3e0043b3cd7f55f4-net/core/scm.c-scm_fp_copy CVE-2023-52654
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vfile_102, ExprStmt target_1, LogicalOrExpr target_2) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("io_uring_get_socket")
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vfile_102
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("fput")
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vfile_102
	and target_0.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-22"
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getRightOperand().(NotExpr).getOperand().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vfile_102, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget().getType().hasName("file **")
	and target_1.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vfile_102
}

predicate func_2(Variable vfile_102, LogicalOrExpr target_2) {
	target_2.getLeftOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getLeftOperand().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_2.getRightOperand().(NotExpr).getOperand().(AssignExpr).getLValue().(VariableAccess).getTarget()=vfile_102
	and target_2.getRightOperand().(NotExpr).getOperand().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("fget_raw")
	and target_2.getRightOperand().(NotExpr).getOperand().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Variable vfile_102, ExprStmt target_1, LogicalOrExpr target_2
where
not func_0(vfile_102, target_1, target_2)
and func_1(vfile_102, target_1)
and func_2(vfile_102, target_2)
and vfile_102.getType().hasName("file *")
and vfile_102.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
