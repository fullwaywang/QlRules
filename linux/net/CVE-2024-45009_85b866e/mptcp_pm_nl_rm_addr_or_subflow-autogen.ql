/**
 * @name linux-85b866e4c4e63a1d7afb58f1e24273caad03d0b7-mptcp_pm_nl_rm_addr_or_subflow
 * @id cpp/linux/85b866e4c4e63a1d7afb58f1e24273caad03d0b7/mptcp-pm-nl-rm-addr-or-subflow
 * @description linux-85b866e4c4e63a1d7afb58f1e24273caad03d0b7-net/mptcp/pm_netlink.c-mptcp_pm_nl_rm_addr_or_subflow CVE-2024-45009
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsubflow_794, Variable vremoved_814, ExprStmt target_5, NotExpr target_6) {
exists(AssignOrExpr target_0 |
	exists(ValueFieldAccess obj_0 | obj_0=target_0.getRValue() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getQualifier() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="(unknown field)"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vsubflow_794
			)
			and obj_1.getTarget().getName()="(unknown field)"
		)
		and obj_0.getTarget().getName()="request_join"
	)
	and target_0.getLValue().(VariableAccess).getTarget()=vremoved_814
	and target_5.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_0.getRValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getLValue().(VariableAccess).getLocation().isBefore(target_6.getOperand().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vrm_id_813, BlockStmt target_7, ConditionalExpr target_8) {
exists(LogicalAndExpr target_1 |
	exists(LogicalAndExpr obj_0 | obj_0=target_1.getLeftOperand() |
		obj_0.getLeftOperand() instanceof EqualityOperation
		and obj_0.getRightOperand().(VariableAccess).getTarget()=vrm_id_813
	)
	and exists(NotExpr obj_1 | obj_1=target_1.getRightOperand() |
		exists(StmtExpr obj_2 | obj_2=obj_1.getOperand() |
			exists(BlockStmt obj_3 | obj_3=obj_2.getStmt() |
				exists(IfStmt obj_4 | obj_4=obj_3.getStmt(1) |
					exists(FunctionCall obj_5 | obj_5=obj_4.getCondition() |
						obj_5.getTarget().hasName("__builtin_expect")
						and obj_5.getArgument(1) instanceof Literal
					)
					and obj_4.getThen().(DoStmt).getCondition() instanceof Literal
				)
				and exists(ExprStmt obj_6 | obj_6=obj_3.getStmt(2) |
					exists(FunctionCall obj_7 | obj_7=obj_6.getExpr() |
						obj_7.getTarget().hasName("__builtin_expect")
						and obj_7.getArgument(1) instanceof Literal
					)
				)
			)
		)
	)
	and target_1.getParent().(IfStmt).getThen()=target_7
	and target_8.getCondition().(VariableAccess).getLocation().isBefore(target_1.getLeftOperand().(LogicalAndExpr).getRightOperand().(VariableAccess).getLocation())
)
}

predicate func_2(Parameter vrm_type_792, BlockStmt target_7, EqualityOperation target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget()=vrm_type_792
	and target_2.getParent().(IfStmt).getThen()=target_7
}

predicate func_3(Variable vremoved_814, VariableAccess target_3) {
	exists(AssignExpr obj_0 | obj_0=target_3.getParent() |
		obj_0.getLValue() = target_3
		and obj_0.getRValue() instanceof EnumConstantAccess
	)
	and target_3.getTarget()=vremoved_814
}

predicate func_4(Variable vremoved_814, AssignExpr target_4) {
	target_4.getLValue().(VariableAccess).getTarget()=vremoved_814
}

predicate func_5(Variable vsubflow_794, ExprStmt target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getExpr() |
		obj_0.getTarget().hasName("mptcp_close_ssk")
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("sock *")
		and obj_0.getArgument(1).(VariableAccess).getTarget().getType().hasName("sock *")
		and obj_0.getArgument(2).(VariableAccess).getTarget()=vsubflow_794
	)
}

predicate func_6(Variable vremoved_814, NotExpr target_6) {
	target_6.getOperand().(VariableAccess).getTarget()=vremoved_814
}

predicate func_7(Function func, BlockStmt target_7) {
	exists(ExprStmt obj_0 | obj_0=target_7.getStmt(0) |
		exists(PostfixDecrExpr obj_1 | obj_1=obj_0.getExpr() |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="pm"
					and obj_3.getQualifier().(VariableAccess).getTarget().getType().hasName("mptcp_sock *")
				)
				and obj_2.getTarget().getName()="add_addr_accepted"
			)
		)
	)
	and exists(DoStmt obj_4 | obj_4=target_7.getStmt(1) |
		exists(BlockStmt obj_5 | obj_5=obj_4.getStmt() |
			obj_5.getStmt(0).(DoStmt).getCondition().(Literal).getValue()="0"
			and obj_5.getStmt(1).(DoStmt).getCondition().(Literal).getValue()="0"
		)
		and obj_4.getCondition().(Literal).getValue()="0"
	)
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Variable vrm_id_813, ConditionalExpr target_8) {
	exists(PointerFieldAccess obj_0 | obj_0=target_8.getElse() |
		obj_0.getTarget().getName()="mpc_endpoint_id"
		and obj_0.getQualifier().(VariableAccess).getTarget().getType().hasName("mptcp_sock *")
	)
	and exists(FunctionCall obj_1 | obj_1=target_8.getParent() |
		exists(ConditionalExpr obj_2 | obj_2=obj_1.getParent() |
			exists(FunctionCall obj_3 | obj_3=obj_2.getElse() |
				exists(ValueFieldAccess obj_4 | obj_4=obj_3.getArgument(1) |
					exists(PointerFieldAccess obj_5 | obj_5=obj_4.getQualifier() |
						obj_5.getTarget().getName()="pm"
						and obj_5.getQualifier().(VariableAccess).getTarget().getType().hasName("mptcp_sock *")
					)
					and obj_4.getTarget().getName()="id_avail_bitmap"
				)
				and obj_3.getTarget().hasName("___set_bit")
			)
		)
	)
	and target_8.getCondition().(VariableAccess).getTarget()=vrm_id_813
	and target_8.getThen().(VariableAccess).getTarget()=vrm_id_813
}

from Function func, Parameter vrm_type_792, Variable vsubflow_794, Variable vrm_id_813, Variable vremoved_814, EqualityOperation target_2, VariableAccess target_3, AssignExpr target_4, ExprStmt target_5, NotExpr target_6, BlockStmt target_7, ConditionalExpr target_8
where
not func_0(vsubflow_794, vremoved_814, target_5, target_6)
and not func_1(vrm_id_813, target_7, target_8)
and func_2(vrm_type_792, target_7, target_2)
and func_3(vremoved_814, target_3)
and func_4(vremoved_814, target_4)
and func_5(vsubflow_794, target_5)
and func_6(vremoved_814, target_6)
and func_7(func, target_7)
and func_8(vrm_id_813, target_8)
and vrm_type_792.getType().hasName("linux_mptcp_mib_field")
and vsubflow_794.getType().hasName("mptcp_subflow_context *")
and vrm_id_813.getType().hasName("u8")
and vremoved_814.getType().hasName("bool")
and vrm_type_792.getFunction() = func
and vsubflow_794.(LocalVariable).getFunction() = func
and vrm_id_813.(LocalVariable).getFunction() = func
and vremoved_814.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
