commit 92dd7495086c0b91c1a9db170e812d51dfec825c	92dd7495086c0b91c1a9db170e812d51dfec825c
Author: Frank Liberato <liberato@chromium.org>
Date:   Thu Aug 3 06:13:38 2023 +0000

    Disallow document pip for non-https / file resources.
    
    Only https / file resources should be able to open document pip
    windows.  Anything else, like javascript or about://blank, is
    hard to describe.
    
    This CL implements the renderer-side checks to fail fast.  A follow-
    up CL will add browser-side checks.
    
    Bug: 1451543
    Change-Id: I2a66768d8116b16adbf19ab1c76acbce6034963a
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4595397
    Reviewed-by: Tommy Steimel <steimel@chromium.org>
    Commit-Queue: Frank Liberato <liberato@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1178832}

diff --git a/third_party/blink/renderer/modules/document_picture_in_picture/picture_in_picture_controller_impl.cc b/third_party/blink/renderer/modules/document_picture_in_picture/picture_in_picture_controller_impl.cc
index 760fa22d13eb4..fff688c37442b 100644
--- a/third_party/blink/renderer/modules/document_picture_in_picture/picture_in_picture_controller_impl.cc
+++ b/third_party/blink/renderer/modules/document_picture_in_picture/picture_in_picture_controller_impl.cc
@@ -361,6 +361,15 @@ void PictureInPictureControllerImpl::CreateDocumentPictureInPictureWindow(
     return;
   }
 
+  if (!opener.Url().ProtocolIs(WTF::g_https_atom) &&
+      !opener.Url().IsLocalFile()) {
+    exception_state.ThrowDOMException(DOMExceptionCode::kNotAllowedError,
+                                      "Opening a PiP window requires https "
+                                      "or file protocol");
+    resolver->Reject(exception_state);
+    return;
+  }
+
   WebPictureInPictureWindowOptions web_options;
   web_options.width = options->width();
   web_options.height = options->height();
diff --git a/third_party/blink/renderer/modules/document_picture_in_picture/picture_in_picture_controller_test.cc b/third_party/blink/renderer/modules/document_picture_in_picture/picture_in_picture_controller_test.cc
index e1300510f0b22..60dc5a996f5f2 100644
--- a/third_party/blink/renderer/modules/document_picture_in_picture/picture_in_picture_controller_test.cc
+++ b/third_party/blink/renderer/modules/document_picture_in_picture/picture_in_picture_controller_test.cc
@@ -62,6 +62,9 @@ LocalDOMWindow* OpenDocumentPictureInPictureWindow(
   // Enable the DocumentPictureInPictureAPI flag.
   ScopedDocumentPictureInPictureAPIForTest scoped_feature(true);
 
+  // Make sure that the document URL is set, since it's required.
+  document.SetURL(opener_url);
+
   // Get past the LocalDOMWindow::isSecureContext() check.
   document.domWindow()->GetSecurityContext().SetSecurityOriginForTesting(
       nullptr);
@@ -644,6 +647,32 @@ TEST_F(PictureInPictureControllerTestWithWidget,
   // window is closed.
 }
 
+TEST_F(PictureInPictureControllerTestWithWidget,
+       DocumentPiPDoesNotOpenWithBlankUrl) {
+  V8TestingScope v8_scope;
+  ScriptState* script_state =
+      ToScriptStateForMainWorld(GetDocument().GetFrame());
+  ScriptState::Scope entered_context_scope(script_state);
+  LocalFrame::NotifyUserActivation(
+      &GetFrame(), mojom::UserActivationNotificationType::kTest);
+  auto* pip =
+      OpenDocumentPictureInPictureWindow(v8_scope, GetDocument(), BlankURL());
+  EXPECT_FALSE(pip);
+}
+
+TEST_F(PictureInPictureControllerTestWithWidget,
+       DocumentPiPDoesOpenWithFileUrl) {
+  V8TestingScope v8_scope;
+  ScriptState* script_state =
+      ToScriptStateForMainWorld(GetDocument().GetFrame());
+  ScriptState::Scope entered_context_scope(script_state);
+  LocalFrame::NotifyUserActivation(
+      &GetFrame(), mojom::UserActivationNotificationType::kTest);
+  auto* pip = OpenDocumentPictureInPictureWindow(v8_scope, GetDocument(),
+                                                 KURL("file://my/file.html"));
+  EXPECT_TRUE(pip);
+}
+
 class PictureInPictureControllerChromeClient
     : public RenderingTestChromeClient {
  public:
@@ -778,8 +807,8 @@ TEST_F(PictureInPictureControllerTestWithChromeClient,
       DocumentPictureInPictureOptions::Create(promise.GetIsolate(), v8_object,
                                               exception_state);
 
-  // Set a base URL for the opener window.
-  document.SetBaseURLOverride(opener_url);
+  // Set a URL for the opener window.
+  document.SetURL(opener_url);
   EXPECT_EQ(opener_url.GetString(), document.BaseURL().GetString());
 
   // Create document picture in picture window.
