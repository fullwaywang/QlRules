/**
 * @name linux-8ce39eb5a67aee25d9f05b40b673c95b23502e3e-nfp_flower_spawn_vnic_reprs
 * @id cpp/linux/8ce39eb5a67aee25d9f05b40b673c95b23502e3e/nfp-flower-spawn-vnic-reprs
 * @description linux-8ce39eb5a67aee25d9f05b40b673c95b23502e3e-drivers/net/ethernet/netronome/nfp/flower/main.c-nfp_flower_spawn_vnic_reprs CVE-2019-19081
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vrepr_390, NotExpr target_3, NotExpr target_4, ExprStmt target_5) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("nfp_repr_free")
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_390
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
		and target_4.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vrepr_priv_375, FunctionCall target_6, ExprStmt target_7) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(FunctionCall).getTarget().hasName("kfree")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_priv_375
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
		and target_7.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable vrepr_priv_375, VariableAccess target_8) {
	exists(ExprStmt target_2 |
		target_2.getExpr().(FunctionCall).getTarget().hasName("kfree")
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_priv_375
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_2
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8)
}

predicate func_3(Variable vrepr_priv_375, NotExpr target_3) {
		target_3.getOperand().(VariableAccess).getTarget()=vrepr_priv_375
}

predicate func_4(Variable vrepr_390, NotExpr target_4) {
		target_4.getOperand().(VariableAccess).getTarget()=vrepr_390
}

predicate func_5(Variable vrepr_390, ExprStmt target_5) {
		target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("nfp_repr *")
		and target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("netdev_priv")
		and target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_390
}

predicate func_6(Function func, FunctionCall target_6) {
		target_6.getTarget().hasName("IS_ERR")
		and target_6.getArgument(0).(VariableAccess).getTarget().getType().hasName("nfp_port *")
		and target_6.getEnclosingFunction() = func
}

predicate func_7(Variable vrepr_priv_375, ExprStmt target_7) {
		target_7.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="nfp_repr"
		and target_7.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vrepr_priv_375
		and target_7.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("nfp_repr *")
}

predicate func_8(Variable verr_379, BlockStmt target_9, VariableAccess target_8) {
		target_8.getTarget()=verr_379
		and target_8.getParent().(IfStmt).getThen()=target_9
}

predicate func_9(Variable vrepr_390, BlockStmt target_9) {
		target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("nfp_port_free")
		and target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("nfp_port *")
		and target_9.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("nfp_repr_free")
		and target_9.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_390
}

from Function func, Variable vrepr_priv_375, Variable verr_379, Variable vrepr_390, NotExpr target_3, NotExpr target_4, ExprStmt target_5, FunctionCall target_6, ExprStmt target_7, VariableAccess target_8, BlockStmt target_9
where
not func_0(vrepr_390, target_3, target_4, target_5)
and not func_1(vrepr_priv_375, target_6, target_7)
and not func_2(vrepr_priv_375, target_8)
and func_3(vrepr_priv_375, target_3)
and func_4(vrepr_390, target_4)
and func_5(vrepr_390, target_5)
and func_6(func, target_6)
and func_7(vrepr_priv_375, target_7)
and func_8(verr_379, target_9, target_8)
and func_9(vrepr_390, target_9)
and vrepr_priv_375.getType().hasName("nfp_flower_repr_priv *")
and verr_379.getType().hasName("int")
and vrepr_390.getType().hasName("net_device *")
and vrepr_priv_375.(LocalVariable).getFunction() = func
and verr_379.(LocalVariable).getFunction() = func
and vrepr_390.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
