/**
 * @name linux-1fc9af813b25e146d3607669247d0f970f5a87c3-panfrost_mmu_map_fault_addr
 * @id cpp/linux/1fc9af813b25e146d3607669247d0f970f5a87c3/panfrost-mmu-map-fault-addr
 * @description linux-1fc9af813b25e146d3607669247d0f970f5a87c3-drivers/gpu/drm/panfrost/panfrost_mmu.c-panfrost_mmu_map_fault_addr CVE-2024-35951
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vpages_451, Variable vi_444, ExprStmt target_2, ArrayExpr target_3, PostfixIncrExpr target_4) {
exists(IfStmt target_0 |
	target_0.getCondition().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vpages_451
	and target_0.getCondition().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_444
	and target_0.getLocation().isBefore(target_2.getLocation())
	and target_3.getArrayBase().(VariableAccess).getLocation().isBefore(target_0.getCondition().(ArrayExpr).getArrayBase().(VariableAccess).getLocation())
	and target_4.getOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation()))
}

predicate func_1(Variable vbo_446, Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("drm_gem_shmem_put_pages")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="base"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbo_446
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

predicate func_2(Variable vpages_451, Variable vi_444, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vpages_451
	and target_2.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_444
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("shmem_read_mapping_page")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("address_space *")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vi_444
}

predicate func_3(Variable vpages_451, ArrayExpr target_3) {
	target_3.getArrayBase().(VariableAccess).getTarget()=vpages_451
	and target_3.getArrayOffset().(VariableAccess).getTarget().getType().hasName("unsigned long")
}

predicate func_4(Variable vi_444, PostfixIncrExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget()=vi_444
}

from Function func, Variable vbo_446, Variable vpages_451, Variable vi_444, ExprStmt target_1, ExprStmt target_2, ArrayExpr target_3, PostfixIncrExpr target_4
where
not func_0(vpages_451, vi_444, target_2, target_3, target_4)
and func_1(vbo_446, func, target_1)
and func_2(vpages_451, vi_444, target_2)
and func_3(vpages_451, target_3)
and func_4(vi_444, target_4)
and vbo_446.getType().hasName("panfrost_gem_object *")
and vpages_451.getType().hasName("page **")
and vi_444.getType().hasName("int")
and vbo_446.(LocalVariable).getFunction() = func
and vpages_451.(LocalVariable).getFunction() = func
and vi_444.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
