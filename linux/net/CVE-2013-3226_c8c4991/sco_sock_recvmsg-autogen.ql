/**
 * @name linux-c8c499175f7d295ef867335bceb9a76a2c3cdc38-sco_sock_recvmsg
 * @id cpp/linux/c8c499175f7d295ef867335bceb9a76a2c3cdc38/sco-sock-recvmsg
 * @description linux-c8c499175f7d295ef867335bceb9a76a2c3cdc38-net/bluetooth/sco.c-sco_sock_recvmsg CVE-2013-3226
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vmsg_657, LogicalAndExpr target_1, FunctionCall target_2) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="msg_namelen"
		and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmsg_657
		and target_0.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getArgument(2).(VariableAccess).getLocation()))
}

predicate func_1(Function func, LogicalAndExpr target_1) {
		target_1.getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getTarget().getName()="skc_state"
		and target_1.getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="__sk_common"
		and target_1.getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("sock *")
		and target_1.getAnOperand().(ConditionalExpr).getCondition().(Literal).getValue()="1"
		and target_1.getAnOperand().(ConditionalExpr).getThen().(FunctionCall).getTarget().hasName("constant_test_bit")
		and target_1.getAnOperand().(ConditionalExpr).getThen().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="flags"
		and target_1.getAnOperand().(ConditionalExpr).getThen().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("sock *")
		and target_1.getAnOperand().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("variable_test_bit")
		and target_1.getAnOperand().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="flags"
		and target_1.getAnOperand().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("sock *")
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Parameter vmsg_657, FunctionCall target_2) {
		target_2.getTarget().hasName("bt_sock_recvmsg")
		and target_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("kiocb *")
		and target_2.getArgument(1).(VariableAccess).getTarget().getType().hasName("socket *")
		and target_2.getArgument(2).(VariableAccess).getTarget()=vmsg_657
		and target_2.getArgument(3).(VariableAccess).getTarget().getType().hasName("size_t")
		and target_2.getArgument(4).(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Parameter vmsg_657, LogicalAndExpr target_1, FunctionCall target_2
where
not func_0(vmsg_657, target_1, target_2)
and func_1(func, target_1)
and func_2(vmsg_657, target_2)
and vmsg_657.getType().hasName("msghdr *")
and vmsg_657.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
