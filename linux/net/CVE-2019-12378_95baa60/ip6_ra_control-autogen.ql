/**
 * @name linux-95baa60a0da80a0143e3ddd4d3725758b4513825-ip6_ra_control
 * @id cpp/linux/95baa60a0da80a0143e3ddd4d3725758b4513825/ip6-ra-control
 * @description linux-95baa60a0da80a0143e3ddd4d3725758b4513825-net/ipv6/ipv6_sockglue.c-ip6_ra_control CVE-2019-12378
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsel_62, Variable vnew_ra_64, ExprStmt target_1, ExprStmt target_2, RelationalOperation target_3, ExprStmt target_5, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(LogicalAndExpr).getLeftOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vsel_62
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(RelationalOperation).getLesserOperand().(Literal).getValue()="0"
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vnew_ra_64
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-12"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getLeftOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation().isBefore(target_3.getGreaterOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(VariableAccess).getLocation().isBefore(target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("_raw_write_lock_bh")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("rwlock_t")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Parameter vsel_62, Variable vnew_ra_64, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vnew_ra_64
	and target_2.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vsel_62
	and target_2.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(RelationalOperation).getLesserOperand().(Literal).getValue()="0"
	and target_2.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getThen().(FunctionCall).getTarget().hasName("kmalloc")
	and target_2.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getThen().(FunctionCall).getArgument(0).(SizeofExprOperator).getValue()="32"
	and target_2.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getThen().(FunctionCall).getArgument(1).(BitwiseOrExpr).getValue()="3264"
	and target_2.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getElse().(Literal).getValue()="0"
}

predicate func_3(Parameter vsel_62, BlockStmt target_6, RelationalOperation target_3) {
	 (target_3 instanceof GEExpr or target_3 instanceof LEExpr)
	and target_3.getGreaterOperand().(VariableAccess).getTarget()=vsel_62
	and target_3.getLesserOperand().(Literal).getValue()="0"
	and target_3.getParent().(IfStmt).getThen()=target_6
}

predicate func_5(Variable vnew_ra_64, ExprStmt target_5) {
	target_5.getExpr().(FunctionCall).getTarget().hasName("kfree")
	and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vnew_ra_64
}

predicate func_6(Variable vnew_ra_64, BlockStmt target_6) {
	target_6.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_raw_write_unlock_bh")
	and target_6.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("rwlock_t")
	and target_6.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("kfree")
	and target_6.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vnew_ra_64
	and target_6.getStmt(2).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-98"
}

from Function func, Parameter vsel_62, Variable vnew_ra_64, ExprStmt target_1, ExprStmt target_2, RelationalOperation target_3, ExprStmt target_5, BlockStmt target_6
where
not func_0(vsel_62, vnew_ra_64, target_1, target_2, target_3, target_5, func)
and func_1(func, target_1)
and func_2(vsel_62, vnew_ra_64, target_2)
and func_3(vsel_62, target_6, target_3)
and func_5(vnew_ra_64, target_5)
and func_6(vnew_ra_64, target_6)
and vsel_62.getType().hasName("int")
and vnew_ra_64.getType().hasName("ip6_ra_chain *")
and vsel_62.getFunction() = func
and vnew_ra_64.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
