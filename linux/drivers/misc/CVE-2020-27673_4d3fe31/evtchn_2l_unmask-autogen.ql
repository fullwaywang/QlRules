/**
 * @name linux-4d3fe31bd993ef504350989786858aefdb877daa-evtchn_2l_unmask
 * @id cpp/linux/4d3fe31bd993ef504350989786858aefdb877daa/evtchn-2l-unmask
 * @description linux-4d3fe31bd993ef504350989786858aefdb877daa-drivers/xen/events/events_2l.c-evtchn_2l_unmask CVE-2020-27673
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(IfStmt target_1, Function func) {
exists(AsmStmt target_0 |
	func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation()))
}

predicate func_1(Function func, IfStmt target_1) {
	target_1.getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_1.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_1.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(EqualityOperation).getRightOperand().(FunctionCall).getTarget().hasName("cpu_from_evtchn")
	and target_1.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(EqualityOperation).getRightOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("evtchn_port_t")
	and target_1.getCondition().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_1.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="1"
	and target_1.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("sync_clear_bit")
	and target_1.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("evtchn_port_t")
	and target_1.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="evtchn_mask"
	and target_1.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(Literal).getValue()="0"
	and target_1.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("test_bit")
	and target_1.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("evtchn_port_t")
	and target_1.getEnclosingFunction() = func
}

from Function func, IfStmt target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
