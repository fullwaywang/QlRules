commit b550a32e60a4941994b437a8d662432a486235a5
Author: Ari Kauppi <ari@synopsys.com>
Date:   Fri May 5 16:07:55 2017 -0400

    nfsd: fix undefined behavior in nfsd4_layout_verify
    
      UBSAN: Undefined behaviour in fs/nfsd/nfs4proc.c:1262:34
      shift exponent 128 is too large for 32-bit type 'int'
    
    Depending on compiler+architecture, this may cause the check for
    layout_type to succeed for overly large values (which seems to be the
    case with amd64). The large value will be later used in de-referencing
    nfsd4_layout_ops for function pointers.
    
    Reported-by: Jani Tuovila <tuovila@synopsys.com>
    Signed-off-by: Ari Kauppi <ari@synopsys.com>
    [colin.king@canonical.com: use LAYOUT_TYPE_MAX instead of 32]
    Cc: stable@vger.kernel.org
    Reviewed-by: Dan Carpenter <dan.carpenter@oracle.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Signed-off-by: J. Bruce Fields <bfields@redhat.com>

diff --git a/fs/nfsd/nfs4proc.c b/fs/nfsd/nfs4proc.c
index d86031b..c453a19 100644
--- a/fs/nfsd/nfs4proc.c
+++ b/fs/nfsd/nfs4proc.c
@@ -1259,7 +1259,8 @@ static int fill_in_write_vector(struct kvec *vec, struct nfsd4_write *write)
 		return NULL;
 	}
 
-	if (!(exp->ex_layout_types & (1 << layout_type))) {
+	if (layout_type >= LAYOUT_TYPE_MAX ||
+	    !(exp->ex_layout_types & (1 << layout_type))) {
 		dprintk("%s: layout type %d not supported\n",
 			__func__, layout_type);
 		return NULL;
