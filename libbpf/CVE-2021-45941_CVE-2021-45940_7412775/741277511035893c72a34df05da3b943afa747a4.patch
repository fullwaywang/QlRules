commit 741277511035893c72a34df05da3b943afa747a4
Author: Shung-Hsi Yu <shung-hsi.yu@suse.com>
Date:   Wed Oct 12 10:23:51 2022 +0800

    libbpf: Use elf_getshdrnum() instead of e_shnum
    
    This commit replace e_shnum with the elf_getshdrnum() helper to fix two
    oss-fuzz-reported heap-buffer overflow in __bpf_object__open. Both
    reports are incorrectly marked as fixed and while still being
    reproducible in the latest libbpf.
    
      # clusterfuzz-testcase-minimized-bpf-object-fuzzer-5747922482888704
      libbpf: loading object 'fuzz-object' from buffer
      libbpf: sec_cnt is 0
      libbpf: elf: section(1) .data, size 0, link 538976288, flags 2020202020202020, type=2
      libbpf: elf: section(2) .data, size 32, link 538976288, flags 202020202020ff20, type=1
      =================================================================
      ==13==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6020000000c0 at pc 0x0000005a7b46 bp 0x7ffd12214af0 sp 0x7ffd12214ae8
      WRITE of size 4 at 0x6020000000c0 thread T0
      SCARINESS: 46 (4-byte-write-heap-buffer-overflow-far-from-bounds)
          #0 0x5a7b45 in bpf_object__elf_collect /src/libbpf/src/libbpf.c:3414:24
          #1 0x5733c0 in bpf_object_open /src/libbpf/src/libbpf.c:7223:16
          #2 0x5739fd in bpf_object__open_mem /src/libbpf/src/libbpf.c:7263:20
          ...
    
    The issue lie in libbpf's direct use of e_shnum field in ELF header as
    the section header count. Where as libelf implemented an extra logic
    that, when e_shnum == 0 && e_shoff != 0, will use sh_size member of the
    initial section header as the real section header count (part of ELF
    spec to accommodate situation where section header counter is larger
    than SHN_LORESERVE).
    
    The above inconsistency lead to libbpf writing into a zero-entry calloc
    area. So intead of using e_shnum directly, use the elf_getshdrnum()
    helper provided by libelf to retrieve the section header counter into
    sec_cnt.
    
    Fixes: 0d6988e16a12 ("libbpf: Fix section counting logic")
    Fixes: 25bbbd7a444b ("libbpf: Remove assumptions about uniqueness of .rodata/.data/.bss maps")
    Signed-off-by: Shung-Hsi Yu <shung-hsi.yu@suse.com>
    Signed-off-by: Andrii Nakryiko <andrii@kernel.org>
    Link: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40868
    Link: https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=40957
    Link: https://lore.kernel.org/bpf/20221012022353.7350-2-shung-hsi.yu@suse.com

diff --git a/src/libbpf.c b/src/libbpf.c
index 184ce16..2e8ac13 100644
--- a/src/libbpf.c
+++ b/src/libbpf.c
@@ -597,7 +597,7 @@ struct elf_state {
 	size_t shstrndx; /* section index for section name strings */
 	size_t strtabidx;
 	struct elf_sec_desc *secs;
-	int sec_cnt;
+	size_t sec_cnt;
 	int btf_maps_shndx;
 	__u32 btf_maps_sec_btf_id;
 	int text_shndx;
@@ -3312,10 +3312,15 @@ static int bpf_object__elf_collect(struct bpf_object *obj)
 	Elf64_Shdr *sh;
 
 	/* ELF section indices are 0-based, but sec #0 is special "invalid"
-	 * section. e_shnum does include sec #0, so e_shnum is the necessary
-	 * size of an array to keep all the sections.
+	 * section. Since section count retrieved by elf_getshdrnum() does
+	 * include sec #0, it is already the necessary size of an array to keep
+	 * all the sections.
 	 */
-	obj->efile.sec_cnt = obj->efile.ehdr->e_shnum;
+	if (elf_getshdrnum(obj->efile.elf, &obj->efile.sec_cnt)) {
+		pr_warn("elf: failed to get the number of sections for %s: %s\n",
+			obj->path, elf_errmsg(-1));
+		return -LIBBPF_ERRNO__FORMAT;
+	}
 	obj->efile.secs = calloc(obj->efile.sec_cnt, sizeof(*obj->efile.secs));
 	if (!obj->efile.secs)
 		return -ENOMEM;
