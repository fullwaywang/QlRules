/**
 * @name linux-eddb7732119d53400f48a02536a84c509692faa8-a2mp_getampassoc_req
 * @id cpp/linux/eddb7732119d53400f48a02536a84c509692faa8/a2mp-getampassoc-req
 * @description linux-eddb7732119d53400f48a02536a84c509692faa8-net/bluetooth/a2mp.c-a2mp_getampassoc_req CVE-2020-12352
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vrsp_376, LogicalOrExpr target_1, ExprStmt target_2) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("__memset")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vrsp_376
	and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_0.getExpr().(FunctionCall).getArgument(2).(SizeofExprOperator).getValue()="2"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation()))
}

predicate func_1(Function func, LogicalOrExpr target_1) {
	target_1.getLeftOperand().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(VariableAccess).getTarget().getType().hasName("hci_dev *")
	and target_1.getLeftOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="amp_type"
	and target_1.getLeftOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("hci_dev *")
	and target_1.getLeftOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_1.getRightOperand().(VariableAccess).getTarget().getType().hasName("amp_mgr *")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vrsp_376, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="id"
	and target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vrsp_376
	and target_2.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="id"
	and target_2.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("a2mp_amp_assoc_req *")
}

from Function func, Variable vrsp_376, LogicalOrExpr target_1, ExprStmt target_2
where
not func_0(vrsp_376, target_1, target_2)
and func_1(func, target_1)
and func_2(vrsp_376, target_2)
and vrsp_376.getType().hasName("a2mp_amp_assoc_rsp")
and vrsp_376.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
