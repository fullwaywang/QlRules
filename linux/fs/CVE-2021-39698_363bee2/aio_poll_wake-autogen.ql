/**
 * @name linux-363bee27e258-aio_poll_wake
 * @id cpp/linux/363bee27e258/aio-poll-wake
 * @description linux-363bee27e258-aio_poll_wake CVE-2021-39698
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vreq_1674, PointerFieldAccess target_0) {
		target_0.getTarget().getName()="done"
		and target_0.getQualifier().(VariableAccess).getTarget()=vreq_1674
}

predicate func_1(Variable vreq_1674, Variable vmask_1676, BlockStmt target_6, AddressOfExpr target_7, ExprStmt target_8, LogicalAndExpr target_9, ExprStmt target_10) {
	exists(LogicalAndExpr target_1 |
		target_1.getAnOperand().(VariableAccess).getTarget()=vmask_1676
		and target_1.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="work_scheduled"
		and target_1.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1674
		and target_1.getParent().(LogicalAndExpr).getAnOperand().(VariableAccess).getTarget()=vmask_1676
		and target_1.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_6
		and target_7.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_1.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_9.getAnOperand().(VariableAccess).getLocation().isBefore(target_1.getAnOperand().(VariableAccess).getLocation())
		and target_1.getAnOperand().(VariableAccess).getLocation().isBefore(target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable vreq_1674, LogicalAndExpr target_11, AddressOfExpr target_12, AddressOfExpr target_13) {
	exists(IfStmt target_2 |
		target_2.getCondition().(PointerFieldAccess).getTarget().getName()="work_scheduled"
		and target_2.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1674
		and target_2.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="work_need_resched"
		and target_2.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1674
		and target_2.getElse().(BlockStmt).getStmt(0) instanceof ExprStmt
		and target_2.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="work_scheduled"
		and target_2.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1674
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(0)=target_2
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_11
		and target_12.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_2.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_13.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_3(Variable vreq_1674, Function func, ExprStmt target_3) {
		target_3.getExpr().(FunctionCall).getTarget().hasName("list_del_init")
		and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="entry"
		and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="wait"
		and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1674
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
}

predicate func_4(Variable vreq_1674, LogicalAndExpr target_11, ExprStmt target_4) {
		target_4.getExpr().(FunctionCall).getTarget().hasName("schedule_work")
		and target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="work"
		and target_4.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1674
		and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_11
}

predicate func_5(Variable vmask_1676, BlockStmt target_6, VariableAccess target_5) {
		target_5.getTarget()=vmask_1676
		and target_5.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_6
}

predicate func_6(Variable vmask_1676, BlockStmt target_6) {
		target_6.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("list_del")
		and target_6.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="ki_list"
		and target_6.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("aio_kiocb *")
		and target_6.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="res"
		and target_6.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ki_res"
		and target_6.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("aio_kiocb *")
		and target_6.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("mangle_poll")
		and target_6.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmask_1676
}

predicate func_7(Variable vreq_1674, AddressOfExpr target_7) {
		target_7.getOperand().(ValueFieldAccess).getTarget().getName()="entry"
		and target_7.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="wait"
		and target_7.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1674
}

predicate func_8(Variable vreq_1674, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="done"
		and target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1674
}

predicate func_9(Variable vreq_1674, Variable vmask_1676, LogicalAndExpr target_9) {
		target_9.getAnOperand().(VariableAccess).getTarget()=vmask_1676
		and target_9.getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vmask_1676
		and target_9.getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getRightOperand().(PointerFieldAccess).getTarget().getName()="events"
		and target_9.getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1674
}

predicate func_10(Variable vmask_1676, ExprStmt target_10) {
		target_10.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="res"
		and target_10.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ki_res"
		and target_10.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("aio_kiocb *")
		and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("mangle_poll")
		and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmask_1676
}

predicate func_11(Variable vmask_1676, LogicalAndExpr target_11) {
		target_11.getAnOperand().(VariableAccess).getTarget()=vmask_1676
}

predicate func_12(Variable vreq_1674, AddressOfExpr target_12) {
		target_12.getOperand().(PointerFieldAccess).getTarget().getName()="work"
		and target_12.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1674
		and target_12.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("schedule_work")
}

predicate func_13(Variable vreq_1674, AddressOfExpr target_13) {
		target_13.getOperand().(PointerFieldAccess).getTarget().getName()="work"
		and target_13.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_1674
		and target_13.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("schedule_work")
}

from Function func, Variable vreq_1674, Variable vmask_1676, PointerFieldAccess target_0, ExprStmt target_3, ExprStmt target_4, VariableAccess target_5, BlockStmt target_6, AddressOfExpr target_7, ExprStmt target_8, LogicalAndExpr target_9, ExprStmt target_10, LogicalAndExpr target_11, AddressOfExpr target_12, AddressOfExpr target_13
where
func_0(vreq_1674, target_0)
and not func_1(vreq_1674, vmask_1676, target_6, target_7, target_8, target_9, target_10)
and not func_2(vreq_1674, target_11, target_12, target_13)
and func_3(vreq_1674, func, target_3)
and func_4(vreq_1674, target_11, target_4)
and func_5(vmask_1676, target_6, target_5)
and func_6(vmask_1676, target_6)
and func_7(vreq_1674, target_7)
and func_8(vreq_1674, target_8)
and func_9(vreq_1674, vmask_1676, target_9)
and func_10(vmask_1676, target_10)
and func_11(vmask_1676, target_11)
and func_12(vreq_1674, target_12)
and func_13(vreq_1674, target_13)
and vreq_1674.getType().hasName("poll_iocb *")
and vmask_1676.getType().hasName("__poll_t")
and vreq_1674.(LocalVariable).getFunction() = func
and vmask_1676.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
