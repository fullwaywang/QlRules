/**
 * @name linux-303911cfc5b95d33687d9046133ff184cf5043ff-usb_register_dev
 * @id cpp/linux/303911cfc5b95d33687d9046133ff184cf5043ff/usb-register-dev
 * @description linux-303911cfc5b95d33687d9046133ff184cf5043ff-drivers/usb/core/file.c-usb_register_dev CVE-2019-19537
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vminor_rwsem, Function func, ExprStmt target_0) {
	target_0.getExpr().(FunctionCall).getTarget().hasName("up_write")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vminor_rwsem
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
}

predicate func_1(RelationalOperation target_4, Function func, ReturnStmt target_1) {
	target_1.getExpr().(UnaryMinusExpr).getValue()="-54"
	and target_1.getParent().(IfStmt).getCondition()=target_4
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vminor_rwsem, FunctionCall target_5, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("up_write")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vminor_rwsem
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_3(Variable vminor_rwsem, FunctionCall target_5, AddressOfExpr target_6, AddressOfExpr target_7, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("down_write")
	and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vminor_rwsem
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_6.getOperand().(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
	and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_7.getOperand().(VariableAccess).getLocation())
}

predicate func_4(Function func, RelationalOperation target_4) {
	 (target_4 instanceof GTExpr or target_4 instanceof LTExpr)
	and target_4.getLesserOperand().(PointerFieldAccess).getTarget().getName()="minor"
	and target_4.getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("usb_interface *")
	and target_4.getGreaterOperand().(Literal).getValue()="0"
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Function func, FunctionCall target_5) {
	target_5.getTarget().hasName("IS_ERR")
	and target_5.getArgument(0).(PointerFieldAccess).getTarget().getName()="usb_dev"
	and target_5.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("usb_interface *")
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable vminor_rwsem, AddressOfExpr target_6) {
	target_6.getOperand().(VariableAccess).getTarget()=vminor_rwsem
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("up_write")
}

predicate func_7(Variable vminor_rwsem, AddressOfExpr target_7) {
	target_7.getOperand().(VariableAccess).getTarget()=vminor_rwsem
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("up_write")
}

from Function func, Variable vminor_rwsem, ExprStmt target_0, ReturnStmt target_1, ExprStmt target_2, ExprStmt target_3, RelationalOperation target_4, FunctionCall target_5, AddressOfExpr target_6, AddressOfExpr target_7
where
func_0(vminor_rwsem, func, target_0)
and func_1(target_4, func, target_1)
and func_2(vminor_rwsem, target_5, target_2)
and func_3(vminor_rwsem, target_5, target_6, target_7, target_3)
and func_4(func, target_4)
and func_5(func, target_5)
and func_6(vminor_rwsem, target_6)
and func_7(vminor_rwsem, target_7)
and vminor_rwsem.getType().hasName("rw_semaphore")
and not vminor_rwsem.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
