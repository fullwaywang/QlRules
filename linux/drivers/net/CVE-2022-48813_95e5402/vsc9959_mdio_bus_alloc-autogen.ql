/**
 * @name linux-95e5402f9430b3c7d885dd3ec4c8c02c17936923-vsc9959_mdio_bus_alloc
 * @id cpp/linux/95e5402f9430b3c7d885dd3ec4c8c02c17936923/vsc9959-mdio-bus-alloc
 * @description linux-95e5402f9430b3c7d885dd3ec4c8c02c17936923-drivers/net/dsa/ocelot/felix_vsc9959.c-vsc9959_mdio_bus_alloc CVE-2022-48813
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdev_1020, Variable vbus_1024, FunctionCall target_0) {
	exists(AssignExpr obj_0 | obj_0=target_0.getParent() |
		obj_0.getRValue() = target_0
		and obj_0.getLValue().(VariableAccess).getTarget()=vbus_1024
	)
	and target_0.getTarget().hasName("devm_mdiobus_alloc_size")
	and not target_0.getTarget().hasName("mdiobus_alloc_size")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vdev_1020
	and target_0.getArgument(1).(SizeofExprOperator).getValue()="16"
}

predicate func_1(Variable vbus_1024, RelationalOperation target_2, ExprStmt target_3, ExprStmt target_4) {
exists(ExprStmt target_1 |
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		obj_0.getTarget().hasName("mdiobus_free")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vbus_1024
	)
	and exists(BlockStmt obj_1 | obj_1=target_1.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getThen().(BlockStmt).getStmt(1)=target_1
			and obj_2.getCondition()=target_2
		)
	)
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation())
)
}

predicate func_2(Function func, RelationalOperation target_2) {
	 (target_2 instanceof GTExpr or target_2 instanceof LTExpr)
	and target_2.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getGreaterOperand().(Literal).getValue()="0"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vbus_1024, ExprStmt target_3) {
	exists(AssignExpr obj_0 | obj_0=target_3.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("__mdiobus_register")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vbus_1024
			and obj_1.getArgument(1).(Literal).getValue()="0"
		)
		and obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("int")
	)
}

predicate func_4(Variable vbus_1024, ExprStmt target_4) {
	exists(AssignExpr obj_0 | obj_0=target_4.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="imdio"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("felix *")
		)
		and obj_0.getRValue().(VariableAccess).getTarget()=vbus_1024
	)
}

from Function func, Variable vdev_1020, Variable vbus_1024, FunctionCall target_0, RelationalOperation target_2, ExprStmt target_3, ExprStmt target_4
where
func_0(vdev_1020, vbus_1024, target_0)
and not func_1(vbus_1024, target_2, target_3, target_4)
and func_2(func, target_2)
and func_3(vbus_1024, target_3)
and func_4(vbus_1024, target_4)
and vdev_1020.getType().hasName("device *")
and vbus_1024.getType().hasName("mii_bus *")
and vdev_1020.(LocalVariable).getFunction() = func
and vbus_1024.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
