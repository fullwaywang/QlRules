/**
 * @name linux-edc4746f253d907d048de680a621e121517f484b-iowarrior_disconnect
 * @id cpp/linux/edc4746f253d907d048de680a621e121517f484b/iowarrior-disconnect
 * @description linux-edc4746f253d907d048de680a621e121517f484b-drivers/usb/misc/iowarrior.c-iowarrior_disconnect CVE-2019-19528
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdev_863, ExprStmt target_3, ExprStmt target_0) {
	target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="present"
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_863
	and target_0.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_0.getLocation().isBefore(target_3.getLocation())
}

predicate func_1(Variable vdev_863, PointerFieldAccess target_4, AddressOfExpr target_5, ExprStmt target_6) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="mutex"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_863
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(0)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable vdev_863, Function func, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="mutex"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_863
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
}

predicate func_3(Variable vdev_863, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="minor"
	and target_3.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_863
}

predicate func_4(Variable vdev_863, PointerFieldAccess target_4) {
	target_4.getTarget().getName()="opened"
	and target_4.getQualifier().(VariableAccess).getTarget()=vdev_863
}

predicate func_5(Variable vdev_863, AddressOfExpr target_5) {
	target_5.getOperand().(PointerFieldAccess).getTarget().getName()="write_wait"
	and target_5.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_863
}

predicate func_6(Variable vdev_863, ExprStmt target_6) {
	target_6.getExpr().(FunctionCall).getTarget().hasName("iowarrior_delete")
	and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdev_863
}

from Function func, Variable vdev_863, ExprStmt target_0, ExprStmt target_2, ExprStmt target_3, PointerFieldAccess target_4, AddressOfExpr target_5, ExprStmt target_6
where
func_0(vdev_863, target_3, target_0)
and not func_1(vdev_863, target_4, target_5, target_6)
and func_2(vdev_863, func, target_2)
and func_3(vdev_863, target_3)
and func_4(vdev_863, target_4)
and func_5(vdev_863, target_5)
and func_6(vdev_863, target_6)
and vdev_863.getType().hasName("iowarrior *")
and vdev_863.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
