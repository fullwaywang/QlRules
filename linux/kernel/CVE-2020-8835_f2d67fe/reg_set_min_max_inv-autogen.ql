/**
 * @name linux-f2d67fec0b43edce8c416101cdc52e71145b5fef-reg_set_min_max_inv
 * @id cpp/linux/f2d67fec0b43edce8c416101cdc52e71145b5fef/reg-set-min-max-inv
 * @description linux-f2d67fec0b43edce8c416101cdc52e71145b5fef-kernel/bpf/verifier.c-reg_set_min_max_inv CVE-2020-8835
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vis_jmp32_5825, Parameter vfalse_reg_5824, Parameter vtrue_reg_5823, Function func, IfStmt target_0) {
		target_0.getCondition().(VariableAccess).getTarget()=vis_jmp32_5825
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__reg_bound_offset32")
		and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vfalse_reg_5824
		and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__reg_bound_offset32")
		and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vtrue_reg_5823
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
}

/*predicate func_1(Parameter vfalse_reg_5824, VariableAccess target_3, ExprStmt target_1) {
		target_1.getExpr().(FunctionCall).getTarget().hasName("__reg_bound_offset32")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vfalse_reg_5824
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
}

*/
/*predicate func_2(Parameter vtrue_reg_5823, VariableAccess target_3, ExprStmt target_2) {
		target_2.getExpr().(FunctionCall).getTarget().hasName("__reg_bound_offset32")
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vtrue_reg_5823
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
}

*/
predicate func_3(Parameter vis_jmp32_5825, BlockStmt target_4, VariableAccess target_3) {
		target_3.getTarget()=vis_jmp32_5825
		and target_3.getParent().(IfStmt).getThen()=target_4
}

predicate func_4(Function func, BlockStmt target_4) {
		target_4.getStmt(0) instanceof ExprStmt
		and target_4.getStmt(1) instanceof ExprStmt
		and target_4.getEnclosingFunction() = func
}

from Function func, Parameter vis_jmp32_5825, Parameter vfalse_reg_5824, Parameter vtrue_reg_5823, IfStmt target_0, VariableAccess target_3, BlockStmt target_4
where
func_0(vis_jmp32_5825, vfalse_reg_5824, vtrue_reg_5823, func, target_0)
and func_3(vis_jmp32_5825, target_4, target_3)
and func_4(func, target_4)
and vis_jmp32_5825.getType().hasName("bool")
and vfalse_reg_5824.getType().hasName("bpf_reg_state *")
and vtrue_reg_5823.getType().hasName("bpf_reg_state *")
and vis_jmp32_5825.getFunction() = func
and vfalse_reg_5824.getFunction() = func
and vtrue_reg_5823.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
