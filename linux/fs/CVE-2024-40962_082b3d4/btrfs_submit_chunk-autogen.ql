/**
 * @name linux-082b3d4e788953a3ff42ecdb70c4210149076285-btrfs_submit_chunk
 * @id cpp/linux/082b3d4e788953a3ff42ecdb70c4210149076285/btrfs-submit-chunk
 * @description linux-082b3d4e788953a3ff42ecdb70c4210149076285-fs/btrfs/bio.c-btrfs_submit_chunk CVE-2024-40962
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vinode_647, Variable vfs_info_648, Variable vuse_append_654, BlockStmt target_2, LogicalAndExpr target_3, AddressOfExpr target_4, ExprStmt target_5) {
exists(LogicalOrExpr target_0 |
	exists(LogicalAndExpr obj_0 | obj_0=target_0.getRightOperand() |
		exists(LogicalAndExpr obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getLeftOperand() |
				obj_2.getTarget().hasName("btrfs_is_zoned")
				and obj_2.getArgument(0).(VariableAccess).getTarget()=vfs_info_648
			)
			and obj_1.getRightOperand().(VariableAccess).getTarget()=vinode_647
		)
		and exists(BitwiseAndExpr obj_3 | obj_3=obj_0.getRightOperand() |
			exists(PointerFieldAccess obj_4 | obj_4=obj_3.getLeftOperand() |
				obj_4.getTarget().getName()="flags"
				and obj_4.getQualifier().(VariableAccess).getTarget()=vinode_647
			)
			and obj_3.getRightOperand().(BinaryBitwiseOperation).getValue()="1"
		)
	)
	and target_0.getLeftOperand().(VariableAccess).getTarget()=vuse_append_654
	and target_0.getParent().(IfStmt).getThen()=target_2
	and target_3.getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(VariableAccess).getLocation().isBefore(target_0.getRightOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(VariableAccess).getLocation())
	and target_4.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getRightOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getRightOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_1(Variable vuse_append_654, BlockStmt target_2, VariableAccess target_1) {
	target_1.getTarget()=vuse_append_654
	and target_1.getParent().(IfStmt).getThen()=target_2
}

predicate func_2(Function func, BlockStmt target_2) {
	exists(ExprStmt obj_0 | obj_0=target_2.getStmt(0) |
		exists(AssignExpr obj_1 | obj_1=obj_0.getExpr() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getRValue() |
				obj_2.getTarget().hasName("btrfs_alloc_dummy_sum")
				and obj_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("btrfs_bio *")
			)
			and obj_1.getLValue().(VariableAccess).getTarget().getType().hasName("blk_status_t")
		)
	)
	and exists(IfStmt obj_3 | obj_3=target_2.getStmt(1) |
		obj_3.getCondition().(VariableAccess).getTarget().getType().hasName("blk_status_t")
		and obj_3.getThen().(GotoStmt).getName() ="fail_put_bio"
	)
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vinode_647, LogicalAndExpr target_3) {
	exists(LogicalAndExpr obj_0 | obj_0=target_3.getLeftOperand() |
		exists(LogicalAndExpr obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(NotExpr obj_2 | obj_2=obj_1.getRightOperand() |
				exists(BitwiseAndExpr obj_3 | obj_3=obj_2.getOperand() |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getLeftOperand() |
						obj_4.getTarget().getName()="flags"
						and obj_4.getQualifier().(VariableAccess).getTarget()=vinode_647
					)
					and obj_3.getRightOperand().(BinaryBitwiseOperation).getValue()="1"
				)
			)
			and obj_1.getLeftOperand().(VariableAccess).getTarget()=vinode_647
		)
		and exists(NotExpr obj_5 | obj_5=obj_0.getRightOperand() |
			exists(ConditionalExpr obj_6 | obj_6=obj_5.getOperand() |
				exists(FunctionCall obj_7 | obj_7=obj_6.getThen() |
					obj_7.getTarget().hasName("const_test_bit")
					and obj_7.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="fs_state"
				)
				and exists(FunctionCall obj_8 | obj_8=obj_6.getElse() |
					obj_8.getTarget().hasName("_test_bit")
					and obj_8.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="fs_state"
				)
				and obj_6.getCondition().(LogicalAndExpr).getRightOperand().(FunctionCall).getTarget().hasName("__builtin_constant_p")
			)
		)
	)
	and exists(NotExpr obj_9 | obj_9=target_3.getRightOperand() |
		exists(FunctionCall obj_10 | obj_10=obj_9.getOperand() |
			exists(PointerFieldAccess obj_11 | obj_11=obj_10.getArgument(0) |
				obj_11.getTarget().getName()="root"
				and obj_11.getQualifier().(VariableAccess).getTarget()=vinode_647
			)
			and obj_10.getTarget().hasName("btrfs_is_data_reloc_root")
		)
	)
}

predicate func_4(Variable vfs_info_648, AddressOfExpr target_4) {
	exists(PointerFieldAccess obj_0 | obj_0=target_4.getOperand() |
		obj_0.getTarget().getName()="fs_state"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vfs_info_648
	)
	and target_4.getParent().(FunctionCall).getParent().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("_test_bit")
}

predicate func_5(Variable vfs_info_648, ExprStmt target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getExpr() |
		obj_0.getTarget().hasName("btrfs_bio_counter_dec")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vfs_info_648
	)
}

from Function func, Variable vinode_647, Variable vfs_info_648, Variable vuse_append_654, VariableAccess target_1, BlockStmt target_2, LogicalAndExpr target_3, AddressOfExpr target_4, ExprStmt target_5
where
not func_0(vinode_647, vfs_info_648, vuse_append_654, target_2, target_3, target_4, target_5)
and func_1(vuse_append_654, target_2, target_1)
and func_2(func, target_2)
and func_3(vinode_647, target_3)
and func_4(vfs_info_648, target_4)
and func_5(vfs_info_648, target_5)
and vinode_647.getType().hasName("btrfs_inode *")
and vfs_info_648.getType().hasName("btrfs_fs_info *")
and vuse_append_654.getType().hasName("bool")
and vinode_647.(LocalVariable).getFunction() = func
and vfs_info_648.(LocalVariable).getFunction() = func
and vuse_append_654.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
