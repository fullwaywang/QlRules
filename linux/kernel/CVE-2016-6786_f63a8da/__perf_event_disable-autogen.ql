/**
 * @name linux-f63a8daa5812afef4f06c962351687e1ff9ccb2b-__perf_event_disable
 * @id cpp/linux/f63a8daa5812afef4f06c962351687e1ff9ccb2b/--perf-event-disable
 * @description linux-f63a8daa5812afef4f06c962351687e1ff9ccb2b-kernel/events/core.c-__perf_event_disable CVE-2016-6786
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vevent_1620, FunctionCall target_0) {
	target_0.getTarget().hasName("update_cgrp_time_from_event")
	and not target_0.getTarget().hasName("_perf_event_enable")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vevent_1620
}

predicate func_1(Variable vctx_1621, FunctionCall target_1) {
	target_1.getTarget().hasName("_raw_spin_lock")
	and not target_1.getTarget().hasName("atomic_add")
	and target_1.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="lock"
	and target_1.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_1621
}

predicate func_2(Variable vevent_1620, ReturnStmt target_19, EqualityOperation target_20) {
exists(LogicalOrExpr target_2 |
	target_2.getLeftOperand().(ValueFieldAccess).getTarget().getName()="inherit"
	and target_2.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="attr"
	and target_2.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vevent_1620
	and target_2.getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("is_sampling_event")
	and target_2.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vevent_1620
	and target_2.getParent().(IfStmt).getThen()=target_19
	and target_2.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_20.getLeftOperand().(VariableAccess).getLocation()))
}

predicate func_4(Variable vevent_1620) {
exists(AddressOfExpr target_4 |
	target_4.getOperand().(PointerFieldAccess).getTarget().getName()="event_limit"
	and target_4.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vevent_1620
	and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall)
}

predicate func_5(Variable vevent_1620, VariableAccess target_5) {
	target_5.getTarget()=vevent_1620
}

predicate func_6(Variable vevent_1620, VariableAccess target_6) {
	target_6.getTarget()=vevent_1620
}

predicate func_7(Variable vevent_1620, VariableAccess target_7) {
	target_7.getTarget()=vevent_1620
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_8(Function func, DeclStmt target_8) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_8
}

predicate func_9(Function func, DeclStmt target_9) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_9
}

predicate func_10(Function func, DeclStmt target_10) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_10
}

predicate func_11(Variable vctx_1621, Variable vcpuctx_1622, ReturnStmt target_19, LogicalAndExpr target_11) {
	target_11.getLeftOperand().(PointerFieldAccess).getTarget().getName()="task"
	and target_11.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_1621
	and target_11.getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="task_ctx"
	and target_11.getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vcpuctx_1622
	and target_11.getRightOperand().(EqualityOperation).getRightOperand().(VariableAccess).getTarget()=vctx_1621
	and target_11.getParent().(IfStmt).getThen()=target_19
}

predicate func_12(Variable vctx_1621, LogicalAndExpr target_11, ExprStmt target_14, PointerFieldAccess target_12) {
	target_12.getTarget().getName()="lock"
	and target_12.getQualifier().(VariableAccess).getTarget()=vctx_1621
	and target_11.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_12.getQualifier().(VariableAccess).getLocation())
	and target_12.getQualifier().(VariableAccess).getLocation().isBefore(target_14.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
}

predicate func_13(Variable vevent_1620, Variable vctx_1621, Variable vcpuctx_1622, Function func, IfStmt target_13) {
	target_13.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getTarget().getName()="state"
	and target_13.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vevent_1620
	and target_13.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("update_context_time")
	and target_13.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vctx_1621
	and target_13.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr() instanceof FunctionCall
	and target_13.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("update_group_times")
	and target_13.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vevent_1620
	and target_13.getThen().(BlockStmt).getStmt(3).(IfStmt).getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vevent_1620
	and target_13.getThen().(BlockStmt).getStmt(3).(IfStmt).getCondition().(EqualityOperation).getRightOperand().(PointerFieldAccess).getTarget().getName()="group_leader"
	and target_13.getThen().(BlockStmt).getStmt(3).(IfStmt).getCondition().(EqualityOperation).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vevent_1620
	and target_13.getThen().(BlockStmt).getStmt(3).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("group_sched_out")
	and target_13.getThen().(BlockStmt).getStmt(3).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vevent_1620
	and target_13.getThen().(BlockStmt).getStmt(3).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcpuctx_1622
	and target_13.getThen().(BlockStmt).getStmt(3).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vctx_1621
	and target_13.getThen().(BlockStmt).getStmt(3).(IfStmt).getElse().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("event_sched_out")
	and target_13.getThen().(BlockStmt).getStmt(3).(IfStmt).getElse().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vevent_1620
	and target_13.getThen().(BlockStmt).getStmt(3).(IfStmt).getElse().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcpuctx_1622
	and target_13.getThen().(BlockStmt).getStmt(3).(IfStmt).getElse().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vctx_1621
	and target_13.getThen().(BlockStmt).getStmt(4).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="state"
	and target_13.getThen().(BlockStmt).getStmt(4).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vevent_1620
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_13
}

predicate func_14(Variable vctx_1621, ExprStmt target_14) {
	target_14.getExpr().(FunctionCall).getTarget().hasName("update_context_time")
	and target_14.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vctx_1621
}

/*predicate func_15(Variable vevent_1620, RelationalOperation target_22, ExprStmt target_15) {
	target_15.getExpr().(FunctionCall).getTarget().hasName("update_group_times")
	and target_15.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vevent_1620
	and target_15.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_22
}

*/
/*predicate func_16(Variable vevent_1620, Variable vctx_1621, Variable vcpuctx_1622, RelationalOperation target_22, IfStmt target_16) {
	target_16.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vevent_1620
	and target_16.getCondition().(EqualityOperation).getRightOperand().(PointerFieldAccess).getTarget().getName()="group_leader"
	and target_16.getCondition().(EqualityOperation).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vevent_1620
	and target_16.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("group_sched_out")
	and target_16.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vevent_1620
	and target_16.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcpuctx_1622
	and target_16.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vctx_1621
	and target_16.getElse().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("event_sched_out")
	and target_16.getElse().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vevent_1620
	and target_16.getElse().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcpuctx_1622
	and target_16.getElse().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vctx_1621
	and target_16.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_22
}

*/
/*predicate func_17(Variable vevent_1620, RelationalOperation target_22, ExprStmt target_17) {
	target_17.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="state"
	and target_17.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vevent_1620
	and target_17.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_22
}

*/
predicate func_18(Variable vctx_1621, Function func, ExprStmt target_18) {
	target_18.getExpr().(FunctionCall).getTarget().hasName("_raw_spin_unlock")
	and target_18.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="lock"
	and target_18.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctx_1621
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_18
}

predicate func_19(Function func, ReturnStmt target_19) {
	target_19.getExpr().(UnaryMinusExpr).getValue()="-22"
	and target_19.getEnclosingFunction() = func
}

predicate func_20(Variable vevent_1620, EqualityOperation target_20) {
	target_20.getLeftOperand().(VariableAccess).getTarget()=vevent_1620
	and target_20.getRightOperand().(PointerFieldAccess).getTarget().getName()="group_leader"
	and target_20.getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vevent_1620
}

predicate func_22(Variable vevent_1620, RelationalOperation target_22) {
	 (target_22 instanceof GEExpr or target_22 instanceof LEExpr)
	and target_22.getGreaterOperand().(PointerFieldAccess).getTarget().getName()="state"
	and target_22.getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vevent_1620
	and target_22.getLesserOperand() instanceof EnumConstantAccess
}

from Function func, Variable vevent_1620, Variable vctx_1621, Variable vcpuctx_1622, FunctionCall target_0, FunctionCall target_1, VariableAccess target_5, VariableAccess target_6, VariableAccess target_7, DeclStmt target_8, DeclStmt target_9, DeclStmt target_10, LogicalAndExpr target_11, PointerFieldAccess target_12, IfStmt target_13, ExprStmt target_14, ExprStmt target_18, ReturnStmt target_19, EqualityOperation target_20, RelationalOperation target_22
where
func_0(vevent_1620, target_0)
and func_1(vctx_1621, target_1)
and not func_2(vevent_1620, target_19, target_20)
and not func_4(vevent_1620)
and func_5(vevent_1620, target_5)
and func_6(vevent_1620, target_6)
and func_7(vevent_1620, target_7)
and func_8(func, target_8)
and func_9(func, target_9)
and func_10(func, target_10)
and func_11(vctx_1621, vcpuctx_1622, target_19, target_11)
and func_12(vctx_1621, target_11, target_14, target_12)
and func_13(vevent_1620, vctx_1621, vcpuctx_1622, func, target_13)
and func_14(vctx_1621, target_14)
and func_18(vctx_1621, func, target_18)
and func_19(func, target_19)
and func_20(vevent_1620, target_20)
and func_22(vevent_1620, target_22)
and vevent_1620.getType().hasName("perf_event *")
and vctx_1621.getType().hasName("perf_event_context *")
and vcpuctx_1622.getType().hasName("perf_cpu_context *")
and vevent_1620.(LocalVariable).getFunction() = func
and vctx_1621.(LocalVariable).getFunction() = func
and vcpuctx_1622.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
