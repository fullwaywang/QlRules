/**
 * @name linux-4f996e234dad488e5d9ba0858bc1bae12eff82c3-pcpu_need_to_extend
 * @id cpp/linux/4f996e234dad488e5d9ba0858bc1bae12eff82c3/pcpu-need-to-extend
 * @description linux-4f996e234dad488e5d9ba0858bc1bae12eff82c3-mm/percpu.c-pcpu_need_to_extend CVE-2016-4794
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(IfStmt target_13, Function func) {
exists(DoStmt target_0 |
	target_0.getCondition().(Literal).getValue()="0"
	and target_0.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_0.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__builtin_expect")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_13.getLocation()))
}

predicate func_2(Variable vpcpu_async_enabled, ExprStmt target_14) {
exists(NotExpr target_2 |
	target_2.getOperand().(FunctionCall).getTarget().hasName("lock_is_held")
	and target_2.getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="dep_map"
	and target_2.getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
	and target_2.getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_2.getParent().(LogicalAndExpr).getLeftOperand() instanceof RelationalOperation
	and target_2.getParent().(LogicalAndExpr).getRightOperand().(VariableAccess).getTarget()=vpcpu_async_enabled
	and target_2.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_14)
}

/*predicate func_3(BlockStmt target_15, Function func) {
exists(FunctionCall target_3 |
	target_3.getTarget().hasName("__builtin_expect")
	and target_3.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getType().hasName("int")
	and target_3.getArgument(1).(Literal).getValue()="0"
	and target_3.getParent().(IfStmt).getThen()=target_15
	and target_3.getEnclosingFunction() = func)
}

*/
/*predicate func_4(Function func) {
exists(FunctionCall target_4 |
	target_4.getTarget().hasName("warn_slowpath_null")
	and target_4.getArgument(0) instanceof StringLiteral
	and target_4.getArgument(1) instanceof Literal
	and target_4.getEnclosingFunction() = func)
}

*/
predicate func_5(Parameter vis_atomic_394, Variable vmargin_396, IfStmt target_13, Function func) {
exists(IfStmt target_5 |
	target_5.getCondition().(VariableAccess).getTarget()=vis_atomic_394
	and target_5.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vmargin_396
	and target_5.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="3"
	and target_5.getThen().(BlockStmt).getStmt(1).(IfStmt).getCondition() instanceof RelationalOperation
	and target_5.getThen().(BlockStmt).getStmt(1).(IfStmt).getThen().(BlockStmt).getStmt(0).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("list_empty")
	and target_5.getElse() instanceof BlockStmt
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
	and target_5.getLocation().isBefore(target_13.getLocation()))
}

/*predicate func_6(Parameter vchunk_394, LogicalAndExpr target_17, AddressOfExpr target_18) {
exists(IfStmt target_6 |
	target_6.getCondition().(FunctionCall).getTarget().hasName("list_empty")
	and target_6.getCondition().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="map_extend_list"
	and target_6.getCondition().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vchunk_394
	and target_6.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("list_add_tail")
	and target_6.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="map_extend_list"
	and target_6.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vchunk_394
	and target_6.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("list_head")
	and target_6.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("pcpu_schedule_balance_work")
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_6
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_17
	and target_6.getCondition().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_18.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

*/
predicate func_7(Parameter vchunk_394, Variable vpcpu_async_enabled, ExprStmt target_14, RelationalOperation target_7) {
	 (target_7 instanceof GTExpr or target_7 instanceof LTExpr)
	and target_7.getLesserOperand().(PointerFieldAccess).getTarget().getName()="map_alloc"
	and target_7.getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vchunk_394
	and target_7.getGreaterOperand().(AddExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="map_used"
	and target_7.getGreaterOperand().(AddExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vchunk_394
	and target_7.getGreaterOperand().(AddExpr).getRightOperand().(Literal).getValue()="32"
	and target_7.getParent().(LogicalAndExpr).getRightOperand().(VariableAccess).getTarget()=vpcpu_async_enabled
	and target_7.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_14
}

predicate func_8(Variable vmargin_396, VariableAccess target_9, BlockStmt target_8) {
	target_8.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vmargin_396
	and target_8.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="64"
	and target_8.getParent().(IfStmt).getCondition()=target_9
}

predicate func_9(Parameter vis_atomic_394, BlockStmt target_15, VariableAccess target_9) {
	target_9.getTarget()=vis_atomic_394
	and target_9.getParent().(IfStmt).getThen()=target_15
}

predicate func_10(Parameter vchunk_394, VariableAccess target_10) {
	target_10.getTarget()=vchunk_394
	and target_10.getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_11(Variable vpcpu_async_enabled, ExprStmt target_14, VariableAccess target_11) {
	target_11.getTarget()=vpcpu_async_enabled
	and target_11.getParent().(LogicalAndExpr).getLeftOperand() instanceof RelationalOperation
	and target_11.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_14
}

predicate func_12(Parameter vchunk_394, FunctionCall target_12) {
	target_12.getTarget().hasName("schedule_work")
	and target_12.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="map_extend_work"
	and target_12.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vchunk_394
}

predicate func_13(Parameter vis_atomic_394, Variable vmargin_396, Variable vpcpu_async_enabled, IfStmt target_13) {
	target_13.getCondition().(VariableAccess).getTarget()=vis_atomic_394
	and target_13.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vmargin_396
	and target_13.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="3"
	and target_13.getThen().(BlockStmt).getStmt(1).(IfStmt).getCondition().(LogicalAndExpr).getLeftOperand() instanceof RelationalOperation
	and target_13.getThen().(BlockStmt).getStmt(1).(IfStmt).getCondition().(LogicalAndExpr).getRightOperand().(VariableAccess).getTarget()=vpcpu_async_enabled
	and target_13.getThen().(BlockStmt).getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr() instanceof FunctionCall
	and target_13.getElse() instanceof BlockStmt
}

predicate func_14(Function func, ExprStmt target_14) {
	target_14.getExpr() instanceof FunctionCall
	and target_14.getEnclosingFunction() = func
}

predicate func_15(Variable vmargin_396, Variable vpcpu_async_enabled, BlockStmt target_15) {
	target_15.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vmargin_396
	and target_15.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="3"
	and target_15.getStmt(1).(IfStmt).getCondition().(LogicalAndExpr).getLeftOperand() instanceof RelationalOperation
	and target_15.getStmt(1).(IfStmt).getCondition().(LogicalAndExpr).getRightOperand().(VariableAccess).getTarget()=vpcpu_async_enabled
	and target_15.getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_17(Variable vpcpu_async_enabled, LogicalAndExpr target_17) {
	target_17.getLeftOperand() instanceof RelationalOperation
	and target_17.getRightOperand().(VariableAccess).getTarget()=vpcpu_async_enabled
}

predicate func_18(Parameter vchunk_394, AddressOfExpr target_18) {
	target_18.getOperand().(PointerFieldAccess).getTarget().getName()="map_extend_work"
	and target_18.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vchunk_394
}

from Function func, Parameter vchunk_394, Parameter vis_atomic_394, Variable vmargin_396, Variable vpcpu_async_enabled, RelationalOperation target_7, BlockStmt target_8, VariableAccess target_9, VariableAccess target_10, VariableAccess target_11, FunctionCall target_12, IfStmt target_13, ExprStmt target_14, BlockStmt target_15, LogicalAndExpr target_17, AddressOfExpr target_18
where
not func_0(target_13, func)
and not func_2(vpcpu_async_enabled, target_14)
and not func_5(vis_atomic_394, vmargin_396, target_13, func)
and func_7(vchunk_394, vpcpu_async_enabled, target_14, target_7)
and func_8(vmargin_396, target_9, target_8)
and func_9(vis_atomic_394, target_15, target_9)
and func_10(vchunk_394, target_10)
and func_11(vpcpu_async_enabled, target_14, target_11)
and func_12(vchunk_394, target_12)
and func_13(vis_atomic_394, vmargin_396, vpcpu_async_enabled, target_13)
and func_14(func, target_14)
and func_15(vmargin_396, vpcpu_async_enabled, target_15)
and func_17(vpcpu_async_enabled, target_17)
and func_18(vchunk_394, target_18)
and vchunk_394.getType().hasName("pcpu_chunk *")
and vis_atomic_394.getType().hasName("bool")
and vmargin_396.getType().hasName("int")
and vpcpu_async_enabled.getType().hasName("bool")
and vchunk_394.getFunction() = func
and vis_atomic_394.getFunction() = func
and vmargin_396.(LocalVariable).getFunction() = func
and not vpcpu_async_enabled.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
