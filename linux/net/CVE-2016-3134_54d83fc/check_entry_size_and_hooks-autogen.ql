/**
 * @name linux-54d83fc74aa9ec72794373cb47432c5f7fb1a309-check_entry_size_and_hooks
 * @id cpp/linux/54d83fc74aa9ec72794373cb47432c5f7fb1a309/check-entry-size-and-hooks
 * @description linux-54d83fc74aa9ec72794373cb47432c5f7fb1a309-net/ipv4/netfilter/arp_tables.c-check_entry_size_and_hooks CVE-2016-3134
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(NotExpr target_3, Function func) {
exists(DoStmt target_0 |
	target_0.getCondition() instanceof Literal
	and target_0.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_0.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getArgument(1) instanceof Literal
	and target_0.getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__dynamic_pr_debug")
	and target_0.getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("_ddebug")
	and target_0.getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="arp_tables: Underflows must be unconditional and use the STANDARD target with ACCEPT/DROP\n"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
	and target_0.getEnclosingFunction() = func)
}

/*predicate func_1(Function func) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("__dynamic_pr_debug")
	and target_1.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("_ddebug")
	and target_1.getArgument(1).(StringLiteral).getValue()="arp_tables: Underflows must be unconditional and use the STANDARD target with ACCEPT/DROP\n"
	and target_1.getEnclosingFunction() = func)
}

*/
predicate func_2(Function func, FunctionCall target_2) {
	target_2.getTarget().hasName("printk")
	and target_2.getArgument(0).(StringLiteral).getValue()="3arp_tables: Underflows must be unconditional and use the STANDARD target with ACCEPT/DROP\n"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, NotExpr target_3) {
	target_3.getOperand().(FunctionCall).getTarget().hasName("check_underflow")
	and target_3.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("arpt_entry *")
	and target_3.getEnclosingFunction() = func
}

from Function func, FunctionCall target_2, NotExpr target_3
where
not func_0(target_3, func)
and func_2(func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
