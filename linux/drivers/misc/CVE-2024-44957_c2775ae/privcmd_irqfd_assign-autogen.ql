/**
 * @name linux-c2775ae4d9227729f8ca9ee2a068f62a00d5ea9c-privcmd_irqfd_assign
 * @id cpp/linux/c2775ae4d9227729f8ca9ee2a068f62a00d5ea9c/privcmd-irqfd-assign
 * @description linux-c2775ae4d9227729f8ca9ee2a068f62a00d5ea9c-drivers/xen/privcmd.c-privcmd_irqfd_assign CVE-2024-44957
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("mutex_lock_nested")
	and not target_0.getTarget().hasName("spin_unlock_irqrestore")
	and target_0.getArgument(0) instanceof AddressOfExpr
	and target_0.getArgument(1) instanceof Literal
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, FunctionCall target_1) {
	target_1.getTarget().hasName("mutex_unlock")
	and not target_1.getTarget().hasName("spin_unlock_irqrestore")
	and target_1.getArgument(0) instanceof AddressOfExpr
	and target_1.getEnclosingFunction() = func
}

predicate func_2(ExprStmt target_13, Function func) {
exists(DoStmt target_2 |
	exists(BlockStmt obj_0 | obj_0=target_2.getStmt() |
		exists(DoStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(BlockStmt obj_2 | obj_2=obj_1.getStmt() |
				exists(ExprStmt obj_3 | obj_3=obj_2.getStmt(1) |
					exists(AssignExpr obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getLValue().(VariableAccess).getType().hasName("unsigned long")
						and obj_4.getRValue().(FunctionCall).getTarget().hasName("_raw_spin_lock_irqsave")
					)
				)
			)
			and obj_1.getCondition().(Literal).getValue()="0"
		)
	)
	and target_2.getCondition() instanceof Literal
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_13.getLocation())
)
}

/*predicate func_3(Function func) {
exists(StmtExpr target_3 |
	exists(BlockStmt obj_0 | obj_0=target_3.getStmt() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(2) |
			exists(EqualityOperation obj_2 | obj_2=obj_1.getExpr() |
				obj_2.getLeftOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("unsigned long")
				and obj_2.getRightOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("unsigned long")
			)
		)
		and obj_0.getStmt(3).(ExprStmt).getExpr().(Literal).getValue()="1"
	)
	and target_3.getEnclosingFunction() = func
)
}

*/
/*predicate func_4(Function func) {
exists(AssignExpr target_4 |
	exists(FunctionCall obj_0 | obj_0=target_4.getRValue() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().hasName("spinlock_check")
			and obj_1.getArgument(0) instanceof AddressOfExpr
		)
		and obj_0.getTarget().hasName("_raw_spin_lock_irqsave")
	)
	and target_4.getLValue().(VariableAccess).getType().hasName("unsigned long")
	and target_4.getEnclosingFunction() = func
)
}

*/
predicate func_5(EqualityOperation target_14, Function func) {
exists(ExprStmt target_5 |
	exists(FunctionCall obj_0 | obj_0=target_5.getExpr() |
		obj_0.getTarget().hasName("spin_unlock_irqrestore")
		and obj_0.getArgument(0) instanceof AddressOfExpr
		and obj_0.getArgument(1).(VariableAccess).getType().hasName("unsigned long")
	)
	and exists(BlockStmt obj_1 | obj_1=target_5.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getThen().(BlockStmt).getStmt(1)=target_5
			and obj_2.getCondition()=target_14
		)
	)
	and target_5.getEnclosingFunction() = func
)
}

predicate func_8(Variable virqfds_lock, AddressOfExpr target_8) {
	target_8.getOperand().(VariableAccess).getTarget()=virqfds_lock
	and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_9(Variable virqfds_lock, AddressOfExpr target_9) {
	target_9.getOperand().(VariableAccess).getTarget()=virqfds_lock
	and target_9.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_10(Variable virqfds_lock, AddressOfExpr target_10) {
	target_10.getOperand().(VariableAccess).getTarget()=virqfds_lock
	and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_12(Function func, FunctionCall target_12) {
	target_12.getTarget().hasName("mutex_unlock")
	and target_12.getArgument(0) instanceof AddressOfExpr
	and target_12.getEnclosingFunction() = func
}

predicate func_13(Function func, ExprStmt target_13) {
	target_13.getExpr() instanceof FunctionCall
	and target_13.getEnclosingFunction() = func
}

predicate func_14(Function func, EqualityOperation target_14) {
	exists(PointerFieldAccess obj_0 | obj_0=target_14.getLeftOperand() |
		obj_0.getTarget().getName()="eventfd"
		and obj_0.getQualifier().(VariableAccess).getTarget().getType().hasName("privcmd_kernel_irqfd *")
	)
	and exists(PointerFieldAccess obj_1 | obj_1=target_14.getRightOperand() |
		obj_1.getTarget().getName()="eventfd"
		and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("privcmd_kernel_irqfd *")
	)
	and target_14.getEnclosingFunction() = func
}

from Function func, Variable virqfds_lock, FunctionCall target_0, FunctionCall target_1, AddressOfExpr target_8, AddressOfExpr target_9, AddressOfExpr target_10, FunctionCall target_12, ExprStmt target_13, EqualityOperation target_14
where
func_0(func, target_0)
and func_1(func, target_1)
and not func_2(target_13, func)
and not func_5(target_14, func)
and func_8(virqfds_lock, target_8)
and func_9(virqfds_lock, target_9)
and func_10(virqfds_lock, target_10)
and func_12(func, target_12)
and func_13(func, target_13)
and func_14(func, target_14)
and virqfds_lock.getType().hasName("mutex")
and not virqfds_lock.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
