/**
 * @name linux-c52873e5a1ef72f845526d9f6a50704433f9c625-acm_probe
 * @id cpp/linux/c52873e5a1ef72f845526d9f6a50704433f9c625/acm-probe
 * @description linux-c52873e5a1ef72f845526d9f6a50704433f9c625-drivers/usb/class/cdc-acm.c-acm_probe CVE-2019-19530
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vacm_1131, Variable vminor_1132, ExprStmt target_5, ExprStmt target_0) {
	target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vminor_1132
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("acm_alloc_minor")
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vacm_1131
	and target_0.getLocation().isBefore(target_5.getLocation())
}

predicate func_1(Variable vminor_1132, ExprStmt target_5, IfStmt target_1) {
	target_1.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vminor_1132
	and target_1.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_1.getThen().(GotoStmt).getName() ="alloc_fail1"
	and target_1.getLocation().isBefore(target_5.getLocation())
}

predicate func_2(Variable vcontrol_interface_1124, ExprStmt target_6, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("usb_get_intf")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vcontrol_interface_1124
	and target_6.getLocation().isBefore(target_2.getLocation())
}

predicate func_3(Variable vacm_1131, ExprStmt target_6, AddressOfExpr target_7) {
exists(PointerFieldAccess target_3 |
	target_3.getTarget().getName()="control"
	and target_3.getQualifier().(VariableAccess).getTarget()=vacm_1131
	and target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_3.getQualifier().(VariableAccess).getLocation())
	and target_3.getQualifier().(VariableAccess).getLocation().isBefore(target_7.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_4(Variable vcontrol_interface_1124, ExprStmt target_8, AddressOfExpr target_9, VariableAccess target_4) {
	target_4.getTarget()=vcontrol_interface_1124
	and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("usb_get_intf")
	and target_8.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation().isBefore(target_4.getLocation())
	and target_4.getLocation().isBefore(target_9.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_5(Function func, ExprStmt target_5) {
	target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("usb_endpoint_maxp")
	and target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("usb_endpoint_descriptor *")
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable vacm_1131, ExprStmt target_6) {
	target_6.getExpr().(FunctionCall).getTarget().hasName("usb_set_intfdata")
	and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("usb_interface *")
	and target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vacm_1131
}

predicate func_7(Variable vcontrol_interface_1124, Variable vacm_1131, Variable vminor_1132, AddressOfExpr target_7) {
	target_7.getOperand().(PointerFieldAccess).getTarget().getName()="port"
	and target_7.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vacm_1131
	and target_7.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("tty_port_register_device")
	and target_7.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("tty_driver *")
	and target_7.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vminor_1132
	and target_7.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="dev"
	and target_7.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vcontrol_interface_1124
}

predicate func_8(Variable vcontrol_interface_1124, Variable vacm_1131, ExprStmt target_8) {
	target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="control"
	and target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vacm_1131
	and target_8.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vcontrol_interface_1124
}

predicate func_9(Variable vcontrol_interface_1124, AddressOfExpr target_9) {
	target_9.getOperand().(PointerFieldAccess).getTarget().getName()="dev"
	and target_9.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vcontrol_interface_1124
}

from Function func, Variable vcontrol_interface_1124, Variable vacm_1131, Variable vminor_1132, ExprStmt target_0, IfStmt target_1, ExprStmt target_2, VariableAccess target_4, ExprStmt target_5, ExprStmt target_6, AddressOfExpr target_7, ExprStmt target_8, AddressOfExpr target_9
where
func_0(vacm_1131, vminor_1132, target_5, target_0)
and func_1(vminor_1132, target_5, target_1)
and func_2(vcontrol_interface_1124, target_6, target_2)
and not func_3(vacm_1131, target_6, target_7)
and func_4(vcontrol_interface_1124, target_8, target_9, target_4)
and func_5(func, target_5)
and func_6(vacm_1131, target_6)
and func_7(vcontrol_interface_1124, vacm_1131, vminor_1132, target_7)
and func_8(vcontrol_interface_1124, vacm_1131, target_8)
and func_9(vcontrol_interface_1124, target_9)
and vcontrol_interface_1124.getType().hasName("usb_interface *")
and vacm_1131.getType().hasName("acm *")
and vminor_1132.getType().hasName("int")
and vcontrol_interface_1124.(LocalVariable).getFunction() = func
and vacm_1131.(LocalVariable).getFunction() = func
and vminor_1132.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
