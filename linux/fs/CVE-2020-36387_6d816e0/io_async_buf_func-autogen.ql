/**
 * @name linux-6d816e088c359866f9867057e04f244c608c42fe-io_async_buf_func
 * @id cpp/linux/6d816e088c359866f9867057e04f244c608c42fe/io-async-buf-func
 * @description linux-6d816e088c359866f9867057e04f244c608c42fe-fs/io_uring.c-io_async_buf_func CVE-2020-36387
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vreq_3024, ExprStmt target_1, AddressOfExpr target_2, AddressOfExpr target_3, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("percpu_ref_get")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="refs"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ctx"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_3024
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vreq_3024, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("refcount_inc")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="refs"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_3024
}

predicate func_2(Variable vreq_3024, AddressOfExpr target_2) {
	target_2.getOperand().(PointerFieldAccess).getTarget().getName()="task_work"
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_3024
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("init_task_work")
}

predicate func_3(Variable vreq_3024, AddressOfExpr target_3) {
	target_3.getOperand().(PointerFieldAccess).getTarget().getName()="refs"
	and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vreq_3024
}

from Function func, Variable vreq_3024, ExprStmt target_1, AddressOfExpr target_2, AddressOfExpr target_3
where
not func_0(vreq_3024, target_1, target_2, target_3, func)
and func_1(vreq_3024, target_1)
and func_2(vreq_3024, target_2)
and func_3(vreq_3024, target_3)
and vreq_3024.getType().hasName("io_kiocb *")
and vreq_3024.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
