/**
 * @name linux-1c7891812d85500ae2ca4051fa5683fcf29930d8-irq_find_at_or_after
 * @id cpp/linux/1c7891812d85500ae2ca4051fa5683fcf29930d8/irq-find-at-or-after
 * @description linux-1c7891812d85500ae2ca4051fa5683fcf29930d8-kernel/irq/irqdesc.c-irq_find_at_or_after CVE-2024-38385
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Initializer target_0) {
	target_0.getExpr() instanceof FunctionCall
	and target_0.getExpr().getEnclosingFunction() = func
}

predicate func_1(Function func) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("class_rcu_constructor")
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(Variable vdesc_151, ConditionalExpr target_5, Function func) {
exists(ExprStmt target_2 |
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		obj_0.getLValue().(VariableAccess).getTarget()=vdesc_151
		and obj_0.getRValue() instanceof FunctionCall
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getFollowingStmt() instanceof ReturnStmt
	and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_5.getCondition().(VariableAccess).getLocation())
)
}

predicate func_3(Variable vindex_150, Variable vsparse_irqs, Variable vnr_irqs, FunctionCall target_3) {
	target_3.getTarget().hasName("mt_find")
	and target_3.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vsparse_irqs
	and target_3.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vindex_150
	and target_3.getArgument(2).(VariableAccess).getTarget()=vnr_irqs
}

predicate func_5(Variable vdesc_151, Variable vnr_irqs, ConditionalExpr target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getThen() |
		obj_0.getTarget().hasName("irq_desc_get_irq")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vdesc_151
	)
	and target_5.getCondition().(VariableAccess).getTarget()=vdesc_151
	and target_5.getElse().(VariableAccess).getTarget()=vnr_irqs
}

from Function func, Variable vindex_150, Variable vdesc_151, Variable vsparse_irqs, Variable vnr_irqs, Initializer target_0, FunctionCall target_3, ConditionalExpr target_5
where
func_0(func, target_0)
and not func_1(func)
and not func_2(vdesc_151, target_5, func)
and func_3(vindex_150, vsparse_irqs, vnr_irqs, target_3)
and func_5(vdesc_151, vnr_irqs, target_5)
and vindex_150.getType().hasName("unsigned long")
and vdesc_151.getType().hasName("irq_desc *")
and vsparse_irqs.getType().hasName("maple_tree")
and vnr_irqs.getType().hasName("int")
and vindex_150.(LocalVariable).getFunction() = func
and vdesc_151.(LocalVariable).getFunction() = func
and not vsparse_irqs.getParentScope+() = func
and not vnr_irqs.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
