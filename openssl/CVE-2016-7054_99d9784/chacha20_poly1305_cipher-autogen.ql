/**
 * @name openssl-99d97842ddb5fbbbfb5e9820a64ebd19afe569f6-chacha20_poly1305_cipher
 * @id cpp/openssl/99d97842ddb5fbbbfb5e9820a64ebd19afe569f6/chacha20-poly1305-cipher
 * @description openssl-99d97842ddb5fbbbfb5e9820a64ebd19afe569f6-crypto/evp/e_chacha20_poly1305.c-chacha20_poly1305_cipher CVE-2016-7054
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vout_196, Variable vplen_200, ExprStmt target_2, LogicalAndExpr target_3, ExprStmt target_4) {
	exists(PointerArithmeticOperation target_0 |
		target_0.getLeftOperand().(VariableAccess).getTarget()=vout_196
		and target_0.getRightOperand().(VariableAccess).getTarget()=vplen_200
		and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("memset")
		and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vout_196
		and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vplen_200
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getLeftOperand().(VariableAccess).getLocation())
		and target_3.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getLocation().isBefore(target_0.getRightOperand().(VariableAccess).getLocation())
		and target_0.getRightOperand().(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vout_196, Variable vplen_200, VariableAccess target_1) {
		target_1.getTarget()=vout_196
		and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("memset")
		and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vplen_200
}

predicate func_2(Parameter vout_196, ExprStmt target_2) {
		target_2.getExpr().(FunctionCall).getTarget().hasName("memcpy")
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vout_196
		and target_2.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="tag"
		and target_2.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("EVP_CHACHA_AEAD_CTX *")
		and target_2.getExpr().(FunctionCall).getArgument(2).(Literal).getValue()="16"
}

predicate func_3(Variable vplen_200, LogicalAndExpr target_3) {
		target_3.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("const unsigned char *")
		and target_3.getAnOperand().(EqualityOperation).getAnOperand().(Literal).getValue()="0"
		and target_3.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("size_t")
		and target_3.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getTarget()=vplen_200
}

predicate func_4(Parameter vout_196, Variable vplen_200, ExprStmt target_4) {
		target_4.getExpr().(FunctionCall).getTarget().hasName("memset")
		and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vout_196
		and target_4.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_4.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vplen_200
}

from Function func, Parameter vout_196, Variable vplen_200, VariableAccess target_1, ExprStmt target_2, LogicalAndExpr target_3, ExprStmt target_4
where
not func_0(vout_196, vplen_200, target_2, target_3, target_4)
and func_1(vout_196, vplen_200, target_1)
and func_2(vout_196, target_2)
and func_3(vplen_200, target_3)
and func_4(vout_196, vplen_200, target_4)
and vout_196.getType().hasName("unsigned char *")
and vplen_200.getType().hasName("size_t")
and vout_196.getFunction() = func
and vplen_200.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
