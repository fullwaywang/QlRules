/**
 * @name linux-05ae1f0fe9c6c5ead08b306e665763a352d20716-ice_handle_mdd_event
 * @id cpp/linux/05ae1f0fe9c6c5ead08b306e665763a352d20716/ice-handle-mdd-event
 * @description linux-05ae1f0fe9c6c5ead08b306e665763a352d20716-drivers/net/ethernet/intel/ice/ice_main.c-ice_handle_mdd_event CVE-2022-48941
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vpf_1462, Variable vi_1466, FunctionCall target_2, AddressOfExpr target_3, ExprStmt target_4) {
exists(ExprStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				exists(ArrayExpr obj_3 | obj_3=obj_2.getQualifier() |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getArrayBase() |
						obj_4.getTarget().getName()="vf"
						and obj_4.getQualifier().(VariableAccess).getTarget()=vpf_1462
					)
					and obj_3.getArrayOffset().(VariableAccess).getTarget()=vi_1466
				)
				and obj_2.getTarget().getName()="cfg_lock"
			)
		)
		and obj_0.getTarget().hasName("mutex_lock_nested")
		and obj_0.getArgument(1).(Literal).getValue()="0"
	)
	and exists(BlockStmt obj_5 | obj_5=target_0.getParent() |
		exists(IfStmt obj_6 | obj_6=obj_5.getParent() |
			obj_6.getThen().(BlockStmt).getStmt(1)=target_0
			and obj_6.getCondition()=target_2
		)
	)
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_4.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation())
)
}

predicate func_1(Parameter vpf_1462, Variable vi_1466, FunctionCall target_2, AddressOfExpr target_3, ExprStmt target_5) {
exists(ExprStmt target_1 |
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				exists(ArrayExpr obj_3 | obj_3=obj_2.getQualifier() |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getArrayBase() |
						obj_4.getTarget().getName()="vf"
						and obj_4.getQualifier().(VariableAccess).getTarget()=vpf_1462
					)
					and obj_3.getArrayOffset().(VariableAccess).getTarget()=vi_1466
				)
				and obj_2.getTarget().getName()="cfg_lock"
			)
		)
		and obj_0.getTarget().hasName("mutex_unlock")
	)
	and exists(BlockStmt obj_5 | obj_5=target_1.getParent() |
		exists(IfStmt obj_6 | obj_6=obj_5.getParent() |
			obj_6.getThen().(BlockStmt).getStmt(3)=target_1
			and obj_6.getCondition()=target_2
		)
	)
	and target_3.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_2(Parameter vpf_1462, FunctionCall target_2) {
	exists(PointerFieldAccess obj_0 | obj_0=target_2.getArgument(1) |
		obj_0.getTarget().getName()="flags"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vpf_1462
	)
	and target_2.getTarget().hasName("test_bit")
}

predicate func_3(Parameter vpf_1462, Variable vi_1466, AddressOfExpr target_3) {
	exists(ArrayExpr obj_0 | obj_0=target_3.getOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArrayBase() |
			obj_1.getTarget().getName()="vf"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vpf_1462
		)
		and obj_0.getArrayOffset().(VariableAccess).getTarget()=vi_1466
	)
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("ice_reset_vf")
}

predicate func_4(Variable vi_1466, ExprStmt target_4) {
	exists(FunctionCall obj_0 | obj_0=target_4.getExpr() |
		obj_0.getTarget().hasName("_dev_info")
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("device *")
		and obj_0.getArgument(1).(StringLiteral).getValue()="Malicious Driver Detection event RX detected on VF %d\n"
		and obj_0.getArgument(2).(VariableAccess).getTarget()=vi_1466
	)
}

predicate func_5(Parameter vpf_1462, Function func, ExprStmt target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getExpr() |
		obj_0.getTarget().hasName("ice_print_vfs_mdd_events")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vpf_1462
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

from Function func, Parameter vpf_1462, Variable vi_1466, FunctionCall target_2, AddressOfExpr target_3, ExprStmt target_4, ExprStmt target_5
where
not func_0(vpf_1462, vi_1466, target_2, target_3, target_4)
and not func_1(vpf_1462, vi_1466, target_2, target_3, target_5)
and func_2(vpf_1462, target_2)
and func_3(vpf_1462, vi_1466, target_3)
and func_4(vi_1466, target_4)
and func_5(vpf_1462, func, target_5)
and vpf_1462.getType().hasName("ice_pf *")
and vi_1466.getType().hasName("unsigned int")
and vpf_1462.getFunction() = func
and vi_1466.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
