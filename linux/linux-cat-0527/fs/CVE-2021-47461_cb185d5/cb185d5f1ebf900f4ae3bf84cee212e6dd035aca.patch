commit cb185d5f1ebf900f4ae3bf84cee212e6dd035aca
Author: Nadav Amit <namit@vmware.com>
Date:   Mon Oct 18 15:15:25 2021 -0700

    userfaultfd: fix a race between writeprotect and exit_mmap()
    
    A race is possible when a process exits, its VMAs are removed by
    exit_mmap() and at the same time userfaultfd_writeprotect() is called.
    
    The race was detected by KASAN on a development kernel, but it appears
    to be possible on vanilla kernels as well.
    
    Use mmget_not_zero() to prevent the race as done in other userfaultfd
    operations.
    
    Link: https://lkml.kernel.org/r/20210921200247.25749-1-namit@vmware.com
    Fixes: 63b2d4174c4ad ("userfaultfd: wp: add the writeprotect API to userfaultfd ioctl")
    Signed-off-by: Nadav Amit <namit@vmware.com>
    Tested-by: Li  Wang <liwang@redhat.com>
    Reviewed-by: Peter Xu <peterx@redhat.com>
    Cc: Andrea Arcangeli <aarcange@redhat.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>

diff --git a/fs/userfaultfd.c b/fs/userfaultfd.c
index 003f0d31743e..22bf14ab2d16 100644
--- a/fs/userfaultfd.c
+++ b/fs/userfaultfd.c
@@ -1827,9 +1827,15 @@ static int userfaultfd_writeprotect(struct userfaultfd_ctx *ctx,
 	if (mode_wp && mode_dontwake)
 		return -EINVAL;
 
-	ret = mwriteprotect_range(ctx->mm, uffdio_wp.range.start,
-				  uffdio_wp.range.len, mode_wp,
-				  &ctx->mmap_changing);
+	if (mmget_not_zero(ctx->mm)) {
+		ret = mwriteprotect_range(ctx->mm, uffdio_wp.range.start,
+					  uffdio_wp.range.len, mode_wp,
+					  &ctx->mmap_changing);
+		mmput(ctx->mm);
+	} else {
+		return -ESRCH;
+	}
+
 	if (ret)
 		return ret;
 
