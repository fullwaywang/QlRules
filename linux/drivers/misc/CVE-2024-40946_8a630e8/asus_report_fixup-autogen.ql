/**
 * @name linux-8a630e8acd97c1610f71bb6d864262163410ed6e-asus_report_fixup
 * @id cpp/linux/8a630e8acd97c1610f71bb6d864262163410ed6e/asus-report-fixup
 * @description linux-8a630e8acd97c1610f71bb6d864262163410ed6e-drivers/hid/hid-asus.c-asus_report_fixup CVE-2024-40946
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
	target_0.getValue()="1"
	and not target_0.getValue()="15"
	and target_0.getParent().(AddExpr).getParent().(LTExpr).getGreaterOperand() instanceof AddExpr
	and target_0.getEnclosingFunction() = func
}

predicate func_1(BlockStmt target_6, Function func) {
exists(LogicalAndExpr target_1 |
	exists(RelationalOperation obj_0 | obj_0=target_1.getRightOperand() |
		obj_0.getGreaterOperand() instanceof PointerDereferenceExpr
		and obj_0.getLesserOperand().(Literal).getValue()="15"
	)
	and target_1.getLeftOperand() instanceof BitwiseAndExpr
	and target_1.getParent().(IfStmt).getThen()=target_6
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(Parameter vrsize_1166, BlockStmt target_7) {
exists(SubExpr target_2 |
	exists(LTExpr obj_0 | obj_0=target_2.getParent() |
		obj_0.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
		and obj_0.getGreaterOperand() instanceof AddExpr
		and obj_0.getParent().(ForStmt).getStmt()=target_7
	)
	and target_2.getLeftOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vrsize_1166
	and target_2.getRightOperand().(Literal).getValue()="15"
)
}

predicate func_3(Variable vdrvdata_1168, BlockStmt target_6, BitwiseAndExpr target_3) {
	exists(PointerFieldAccess obj_0 | obj_0=target_3.getLeftOperand() |
		obj_0.getTarget().getName()="quirks"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vdrvdata_1168
	)
	and target_3.getRightOperand().(BinaryBitwiseOperation).getValue()="2048"
	and target_3.getParent().(IfStmt).getThen()=target_6
}

predicate func_4(Parameter vrsize_1166, PointerDereferenceExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget()=vrsize_1166
}

predicate func_5(BlockStmt target_7, Function func, AddExpr target_5) {
	exists(LTExpr obj_0 | obj_0=target_5.getParent() |
		obj_0.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
		and obj_0.getParent().(ForStmt).getStmt()=target_7
	)
	and target_5.getLeftOperand() instanceof PointerDereferenceExpr
	and target_5.getRightOperand() instanceof Literal
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Function func, BlockStmt target_6) {
	exists(BlockStmt obj_0 | obj_0=target_6.getStmt(0) |
		exists(ForStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(RelationalOperation obj_2 | obj_2=obj_1.getCondition() |
				obj_2.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
				and obj_2.getGreaterOperand() instanceof AddExpr
			)
			and obj_1.getUpdate().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
		)
	)
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Function func, BlockStmt target_7) {
	exists(IfStmt obj_0 | obj_0=target_7.getStmt(0) |
		exists(LogicalAndExpr obj_1 | obj_1=obj_0.getCondition() |
			exists(LogicalAndExpr obj_2 | obj_2=obj_1.getLeftOperand() |
				exists(LogicalAndExpr obj_3 | obj_3=obj_2.getLeftOperand() |
					obj_3.getLeftOperand().(EqualityOperation).getRightOperand().(HexLiteral).getValue()="133"
					and obj_3.getRightOperand().(EqualityOperation).getRightOperand().(HexLiteral).getValue()="90"
				)
				and exists(EqualityOperation obj_4 | obj_4=obj_2.getRightOperand() |
					obj_4.getLeftOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("__u8 *")
					and obj_4.getRightOperand().(HexLiteral).getValue()="149"
				)
			)
			and exists(EqualityOperation obj_5 | obj_5=obj_1.getRightOperand() |
				exists(ArrayExpr obj_6 | obj_6=obj_5.getLeftOperand() |
					exists(AddExpr obj_7 | obj_7=obj_6.getArrayOffset() |
						obj_7.getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
						and obj_7.getRightOperand().(Literal).getValue()="15"
					)
					and obj_6.getArrayBase().(VariableAccess).getTarget().getType().hasName("__u8 *")
				)
				and obj_5.getRightOperand().(HexLiteral).getValue()="5"
			)
		)
		and exists(BlockStmt obj_8 | obj_8=obj_0.getThen() |
			exists(ExprStmt obj_9 | obj_9=obj_8.getStmt(1) |
				exists(AssignExpr obj_10 | obj_10=obj_9.getExpr() |
					obj_10.getLValue().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("__u8 *")
					and obj_10.getRValue().(HexLiteral).getValue()="1"
				)
			)
		)
	)
	and target_7.getEnclosingFunction() = func
}

from Function func, Parameter vrsize_1166, Variable vdrvdata_1168, Literal target_0, BitwiseAndExpr target_3, PointerDereferenceExpr target_4, AddExpr target_5, BlockStmt target_6, BlockStmt target_7
where
func_0(func, target_0)
and not func_1(target_6, func)
and not func_2(vrsize_1166, target_7)
and func_3(vdrvdata_1168, target_6, target_3)
and func_4(vrsize_1166, target_4)
and func_5(target_7, func, target_5)
and func_6(func, target_6)
and func_7(func, target_7)
and vrsize_1166.getType().hasName("unsigned int *")
and vdrvdata_1168.getType().hasName("asus_drvdata *")
and vrsize_1166.getFunction() = func
and vdrvdata_1168.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
