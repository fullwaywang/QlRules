/**
 * @name linux-ef0579b64e93188710d48667cb5e014926af9f1b-ahash_op_unaligned
 * @id cpp/linux/ef0579b64e93188710d48667cb5e014926af9f1b/ahash-op-unaligned
 * @description linux-ef0579b64e93188710d48667cb5e014926af9f1b-crypto/ahash.c-ahash_op_unaligned CVE-2017-7618
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vreq_318, Variable verr_321, FunctionCall target_0) {
	target_0.getTarget().hasName("ahash_op_unaligned_finish")
	and not target_0.getTarget().hasName("ahash_restore_req")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vreq_318
	and target_0.getArgument(1).(VariableAccess).getTarget()=verr_321
}

predicate func_1(Parameter vreq_318, Variable verr_321, ExprStmt target_4, ExprStmt target_5, Function func) {
exists(IfStmt target_1 |
	target_1.getCondition().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=verr_321
	and target_1.getCondition().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getRightOperand().(UnaryMinusExpr).getValue()="-115"
	and target_1.getCondition().(LogicalOrExpr).getRightOperand().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=verr_321
	and target_1.getCondition().(LogicalOrExpr).getRightOperand().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getRightOperand().(UnaryMinusExpr).getValue()="-16"
	and target_1.getCondition().(LogicalOrExpr).getRightOperand().(LogicalAndExpr).getRightOperand().(BitwiseAndExpr).getLeftOperand().(FunctionCall).getTarget().hasName("ahash_request_flags")
	and target_1.getCondition().(LogicalOrExpr).getRightOperand().(LogicalAndExpr).getRightOperand().(BitwiseAndExpr).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vreq_318
	and target_1.getCondition().(LogicalOrExpr).getRightOperand().(LogicalAndExpr).getRightOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="1024"
	and target_1.getThen() instanceof ReturnStmt
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_4.getLocation())
	and target_5.getExpr().(AssignExpr).getRValue().(VariableCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getCondition().(LogicalOrExpr).getRightOperand().(LogicalAndExpr).getRightOperand().(BitwiseAndExpr).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable verr_321, ExprStmt target_4, ReturnStmt target_3, Function func) {
exists(ReturnStmt target_2 |
	target_2.getExpr().(VariableAccess).getTarget()=verr_321
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getFollowingStmt() instanceof ReturnStmt
	and target_2.getExpr().(VariableAccess).getLocation().isBefore(target_3.getExpr().(VariableAccess).getLocation()))
}

predicate func_3(Variable verr_321, Function func, ReturnStmt target_3) {
	target_3.getExpr().(VariableAccess).getTarget()=verr_321
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
}

predicate func_4(Function func, ExprStmt target_4) {
	target_4.getExpr() instanceof FunctionCall
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Parameter vreq_318, Variable verr_321, ExprStmt target_5) {
	target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_321
	and target_5.getExpr().(AssignExpr).getRValue().(VariableCall).getExpr().(VariableAccess).getTarget().getType().hasName("..(*)(..)")
	and target_5.getExpr().(AssignExpr).getRValue().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vreq_318
}

from Function func, Parameter vreq_318, Variable verr_321, FunctionCall target_0, ReturnStmt target_3, ExprStmt target_4, ExprStmt target_5
where
func_0(vreq_318, verr_321, target_0)
and not func_1(vreq_318, verr_321, target_4, target_5, func)
and not func_2(verr_321, target_4, target_3, func)
and func_3(verr_321, func, target_3)
and func_4(func, target_4)
and func_5(vreq_318, verr_321, target_5)
and vreq_318.getType().hasName("ahash_request *")
and verr_321.getType().hasName("int")
and vreq_318.getFunction() = func
and verr_321.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
