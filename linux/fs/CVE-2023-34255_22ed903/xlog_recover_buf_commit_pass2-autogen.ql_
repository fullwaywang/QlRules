/**
 * @name linux-22ed903eee23a5b174e240f1cdfa9acf393a5210-xlog_recover_buf_commit_pass2
 * @id cpp/linux/22ed903eee23a5b174e240f1cdfa9acf393a5210/xlog-recover-buf-commit-pass2
 * @description linux-22ed903eee23a5b174e240f1cdfa9acf393a5210-fs/xfs/xfs_buf_item_recover.c-xlog_recover_buf_commit_pass2 CVE-2023-34255
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vbp_892, Variable verror_893, LogicalAndExpr target_1, ExprStmt target_2, ExprStmt target_3, ReturnStmt target_4) {
exists(IfStmt target_0 |
	target_0.getCondition().(PointerFieldAccess).getTarget().getName()="b_ops"
	and target_0.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbp_892
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="verify_read"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="b_ops"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbp_892
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vbp_892
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verror_893
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="b_error"
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbp_892
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_2.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_0.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getLocation())
	and target_4.getExpr().(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation()))
}

predicate func_1(Function func, LogicalAndExpr target_1) {
	target_1.getLeftOperand().(LogicalAndExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("xfs_lsn_t")
	and target_1.getLeftOperand().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("xfs_lsn_t")
	and target_1.getLeftOperand().(LogicalAndExpr).getRightOperand().(EqualityOperation).getRightOperand().(UnaryMinusExpr).getValue()="-1"
	and target_1.getRightOperand().(RelationalOperation).getGreaterOperand().(FunctionCall).getTarget().hasName("_lsn_cmp")
	and target_1.getRightOperand().(RelationalOperation).getGreaterOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("xfs_lsn_t")
	and target_1.getRightOperand().(RelationalOperation).getGreaterOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("xfs_lsn_t")
	and target_1.getRightOperand().(RelationalOperation).getLesserOperand().(Literal).getValue()="0"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vbp_892, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("xlog_recover_validate_buf_type")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("xfs_mount *")
	and target_2.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vbp_892
	and target_2.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("xfs_buf_log_format *")
	and target_2.getExpr().(FunctionCall).getArgument(3).(UnaryMinusExpr).getValue()="-1"
}

predicate func_3(Variable vbp_892, Variable verror_893, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verror_893
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("xlog_recover_do_inode_buffer")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("xfs_mount *")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("xlog_recover_item *")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vbp_892
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("xfs_buf_log_format *")
}

predicate func_4(Variable verror_893, VariableAccess target_5, ReturnStmt target_4) {
	target_4.getExpr().(VariableAccess).getTarget()=verror_893
	and target_4.getParent().(IfStmt).getCondition()=target_5
}

predicate func_5(Variable verror_893, ReturnStmt target_4, VariableAccess target_5) {
	target_5.getTarget()=verror_893
	and target_5.getParent().(IfStmt).getThen()=target_4
}

from Function func, Variable vbp_892, Variable verror_893, LogicalAndExpr target_1, ExprStmt target_2, ExprStmt target_3, ReturnStmt target_4, VariableAccess target_5
where
not func_0(vbp_892, verror_893, target_1, target_2, target_3, target_4)
and func_1(func, target_1)
and func_2(vbp_892, target_2)
and func_3(vbp_892, verror_893, target_3)
and func_4(verror_893, target_5, target_4)
and func_5(verror_893, target_4, target_5)
and vbp_892.getType().hasName("xfs_buf *")
and verror_893.getType().hasName("int")
and vbp_892.(LocalVariable).getFunction() = func
and verror_893.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
