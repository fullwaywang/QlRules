/**
 * @name linux-8fde12ca79aff9b5ba951fce1a2641901b8d8e64-gup_huge_pmd
 * @id cpp/linux/8fde12ca79aff9b5ba951fce1a2641901b8d8e64/gup-huge-pmd
 * @description linux-8fde12ca79aff9b5ba951fce1a2641901b8d8e64-mm/gup.c-gup_huge_pmd CVE-2019-11487
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vhead_1553, Variable vvmemmap_base, Parameter vorig_1550, FunctionCall target_0) {
		target_0.getTarget().hasName("compound_head")
		and not target_0.getTarget().hasName("try_get_compound_head")
		and target_0.getArgument(0).(PointerArithmeticOperation).getAnOperand().(VariableAccess).getTarget()=vvmemmap_base
		and target_0.getArgument(0).(PointerArithmeticOperation).getAnOperand().(FunctionCall).getTarget().hasName("pmd_pfn")
		and target_0.getArgument(0).(PointerArithmeticOperation).getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vorig_1550
		and target_0.getParent().(AssignExpr).getRValue() = target_0
		and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vhead_1553
}

predicate func_1(Variable vrefs_1554, VariableAccess target_1) {
		target_1.getTarget()=vrefs_1554
		and target_1.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
}

predicate func_2(Variable vhead_1553, VariableAccess target_2) {
		target_2.getTarget()=vhead_1553
		and target_2.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
}

predicate func_3(Variable vhead_1553, Variable vrefs_1554, BlockStmt target_4, FunctionCall target_3) {
		target_3.getTarget().hasName("page_cache_add_speculative")
		and target_3.getArgument(0).(VariableAccess).getTarget()=vhead_1553
		and target_3.getArgument(1).(VariableAccess).getTarget()=vrefs_1554
		and target_3.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_4
}

predicate func_4(Variable vrefs_1554, BlockStmt target_4) {
		target_4.getStmt(0).(ExprStmt).getExpr().(AssignSubExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int *")
		and target_4.getStmt(0).(ExprStmt).getExpr().(AssignSubExpr).getRValue().(VariableAccess).getTarget()=vrefs_1554
		and target_4.getStmt(1).(ReturnStmt).getExpr().(Literal).getValue()="0"
}

from Function func, Variable vhead_1553, Variable vrefs_1554, Variable vvmemmap_base, Parameter vorig_1550, FunctionCall target_0, VariableAccess target_1, VariableAccess target_2, FunctionCall target_3, BlockStmt target_4
where
func_0(vhead_1553, vvmemmap_base, vorig_1550, target_0)
and func_1(vrefs_1554, target_1)
and func_2(vhead_1553, target_2)
and func_3(vhead_1553, vrefs_1554, target_4, target_3)
and func_4(vrefs_1554, target_4)
and vhead_1553.getType().hasName("page *")
and vrefs_1554.getType().hasName("int")
and vvmemmap_base.getType().hasName("unsigned long")
and vorig_1550.getType().hasName("pmd_t")
and vhead_1553.(LocalVariable).getFunction() = func
and vrefs_1554.(LocalVariable).getFunction() = func
and not vvmemmap_base.getParentScope+() = func
and vorig_1550.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
