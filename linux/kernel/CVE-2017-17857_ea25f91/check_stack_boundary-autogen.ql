/**
 * @name linux-ea25f914dc164c8d56b36147ecc86bc65f83c469-check_stack_boundary
 * @id cpp/linux/ea25f914dc164c8d56b36147ecc86bc65f83c469/check-stack-boundary
 * @description linux-ea25f914dc164c8d56b36147ecc86bc65f83c469-kernel/bpf/verifier.c-check_stack_boundary CVE-2017-17857
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(NotExpr target_1, Function func) {
exists(ReturnStmt target_0 |
	target_0.getExpr().(UnaryMinusExpr).getValue()="-13"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(3)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_0.getEnclosingFunction() = func)
}

predicate func_1(Function func, NotExpr target_1) {
	target_1.getOperand().(FunctionCall).getTarget().hasName("tnum_is_const")
	and target_1.getOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="var_off"
	and target_1.getOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("bpf_reg_state *")
	and target_1.getOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getEnclosingFunction() = func
}

from Function func, NotExpr target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
