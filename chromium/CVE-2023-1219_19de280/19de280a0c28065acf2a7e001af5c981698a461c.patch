commit 19de280a0c28065acf2a7e001af5c981698a461c	19de280a0c28065acf2a7e001af5c981698a461c
Author: Will Harris <wfh@chromium.org>
Date:   Tue Feb 14 18:57:32 2023 +0000

    Prevent potential integer overflow in PersistentMemoryAllocator
    
    BUG=1415328
    
    Change-Id: I66dcae6a1aacc1310ddd715033b3704c932b9800
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4250177
    Reviewed-by: Alexei Svitkine <asvitkine@chromium.org>
    Commit-Queue: Will Harris <wfh@chromium.org>
    Commit-Queue: Alexei Svitkine <asvitkine@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1105177}

diff --git a/base/metrics/persistent_memory_allocator.cc b/base/metrics/persistent_memory_allocator.cc
index bc4618bf30832..b7edfc04c3076 100644
--- a/base/metrics/persistent_memory_allocator.cc
+++ b/base/metrics/persistent_memory_allocator.cc
@@ -531,7 +531,10 @@ size_t PersistentMemoryAllocator::GetAllocSize(Reference ref) const {
   uint32_t size = block->size;
   // Header was verified by GetBlock() but a malicious actor could change
   // the value between there and here. Check it again.
-  if (size <= sizeof(BlockHeader) || ref + size > mem_size_) {
+  uint32_t total_size;
+  if (size <= sizeof(BlockHeader) ||
+      !base::CheckAdd(ref, size).AssignIfValid(&total_size) ||
+      total_size > mem_size_) {
     SetCorrupt();
     return 0;
   }
