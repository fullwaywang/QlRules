/**
 * @name linux-2c02d41d71f90a5168391b6a5f2954112ba2307c-__tcp_set_ulp
 * @id cpp/linux/2c02d41d71f90a5168391b6a5f2954112ba2307c/--tcp-set-ulp
 * @description linux-2c02d41d71f90a5168391b6a5f2954112ba2307c-__tcp_set_ulp CVE-2023-0461
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable verr_133, ExprStmt target_2, Function func) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_133
		and target_0.getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-22"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vsk_130, Parameter vulp_ops_130, AddressOfExpr target_3, ExprStmt target_4, Function func) {
	exists(IfStmt target_1 |
		target_1.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="clone"
		and target_1.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vulp_ops_130
		and target_1.getCondition().(LogicalAndExpr).getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getTarget().getName()="skc_state"
		and target_1.getCondition().(LogicalAndExpr).getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="__sk_common"
		and target_1.getCondition().(LogicalAndExpr).getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_130
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
		and target_3.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getCondition().(LogicalAndExpr).getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_1.getCondition().(LogicalAndExpr).getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getRValue().(VariableCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable verr_133, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_133
		and target_2.getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-17"
}

predicate func_3(Parameter vsk_130, AddressOfExpr target_3) {
		target_3.getOperand().(PointerFieldAccess).getTarget().getName()="flags"
		and target_3.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_socket"
		and target_3.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_130
}

predicate func_4(Parameter vsk_130, Parameter vulp_ops_130, Variable verr_133, ExprStmt target_4) {
		target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_133
		and target_4.getExpr().(AssignExpr).getRValue().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="init"
		and target_4.getExpr().(AssignExpr).getRValue().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vulp_ops_130
		and target_4.getExpr().(AssignExpr).getRValue().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vsk_130
}

from Function func, Parameter vsk_130, Parameter vulp_ops_130, Variable verr_133, ExprStmt target_2, AddressOfExpr target_3, ExprStmt target_4
where
not func_0(verr_133, target_2, func)
and not func_1(vsk_130, vulp_ops_130, target_3, target_4, func)
and func_2(verr_133, target_2)
and func_3(vsk_130, target_3)
and func_4(vsk_130, vulp_ops_130, verr_133, target_4)
and vsk_130.getType().hasName("sock *")
and vulp_ops_130.getType().hasName("const tcp_ulp_ops *")
and verr_133.getType().hasName("int")
and vsk_130.getFunction() = func
and vulp_ops_130.getFunction() = func
and verr_133.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
