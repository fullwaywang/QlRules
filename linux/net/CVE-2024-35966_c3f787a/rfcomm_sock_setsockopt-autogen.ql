/**
 * @name linux-c3f787a3eafe519c93df9abbb0ca5145861c8d0f-rfcomm_sock_setsockopt
 * @id cpp/linux/c3f787a3eafe519c93df9abbb0ca5145861c8d0f/rfcomm-sock-setsockopt
 * @description linux-c3f787a3eafe519c93df9abbb0ca5145861c8d0f-net/bluetooth/rfcomm/sock.c-rfcomm_sock_setsockopt CVE-2024-35966
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, SizeofExprOperator target_0) {
	target_0.getValue()="1"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Parameter voptval_662, Variable vsec_665, Variable vlen_667, BlockStmt target_22, FunctionCall target_1) {
	target_1.getTarget().hasName("copy_from_sockptr")
	and not target_1.getTarget().hasName("bt_copy_from_sockptr")
	and target_1.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vsec_665
	and target_1.getArgument(1).(VariableAccess).getTarget()=voptval_662
	and target_1.getArgument(2).(VariableAccess).getTarget()=vlen_667
	and target_1.getParent().(IfStmt).getThen()=target_22
}

predicate func_2(Parameter voptval_662, Variable vopt_668, BlockStmt target_23, FunctionCall target_2) {
	target_2.getTarget().hasName("copy_from_sockptr")
	and not target_2.getTarget().hasName("bt_copy_from_sockptr")
	and target_2.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vopt_668
	and target_2.getArgument(1).(VariableAccess).getTarget()=voptval_662
	and target_2.getArgument(2).(SizeofTypeOperator).getType() instanceof LongType
	and target_2.getArgument(2).(SizeofTypeOperator).getValue()="4"
	and target_2.getParent().(IfStmt).getThen()=target_23
}

predicate func_6(Function func, SizeofExprOperator target_6) {
	target_6.getValue()="2"
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Parameter voptlen_662, VariableAccess target_7) {
	target_7.getTarget()=voptlen_662
}

predicate func_8(Parameter voptlen_662, VariableAccess target_8) {
	target_8.getTarget()=voptlen_662
	and target_8.getParent().(LTExpr).getLesserOperand() instanceof SizeofExprOperator
}

predicate func_9(FunctionCall target_1, Function func, BreakStmt target_9) {
	target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_9.getEnclosingFunction() = func
}

predicate func_10(FunctionCall target_2, Function func, BreakStmt target_10) {
	target_10.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_10.getEnclosingFunction() = func
}

predicate func_11(Function func, DeclStmt target_11) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_11
}

predicate func_12(Parameter voptlen_662, Variable vlen_667, Variable v__UNIQUE_ID___x1429_689, Variable v__UNIQUE_ID___y1430_689, AssignExpr target_12) {
	target_12.getLValue().(VariableAccess).getTarget()=vlen_667
	and target_12.getRValue().(BuiltInChooseExpr).getChild(0).(EqualityOperation).getValue()="0"
	and target_12.getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getCondition().(RelationalOperation).getLesserOperand().(SizeofExprOperator).getValue()="2"
	and target_12.getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=voptlen_662
	and target_12.getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getThen().(SizeofExprOperator).getValue()="2"
	and target_12.getRValue().(BuiltInChooseExpr).getChild(1).(ConditionalExpr).getElse().(VariableAccess).getTarget()=voptlen_662
	and target_12.getRValue().(BuiltInChooseExpr).getChild(2).(StmtExpr).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(ConditionalExpr).getThen().(VariableAccess).getTarget()=v__UNIQUE_ID___x1429_689
	and target_12.getRValue().(BuiltInChooseExpr).getChild(2).(StmtExpr).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(ConditionalExpr).getElse().(VariableAccess).getTarget()=v__UNIQUE_ID___y1430_689
}

predicate func_13(Parameter voptlen_662, ConditionalExpr target_13) {
	target_13.getCondition().(Literal).getValue()="8"
	and target_13.getThen().(MulExpr).getLeftOperand().(SubExpr).getLeftOperand() instanceof SizeofExprOperator
	and target_13.getThen().(MulExpr).getLeftOperand().(SubExpr).getRightOperand().(VariableAccess).getTarget()=voptlen_662
	and target_13.getThen().(MulExpr).getRightOperand().(Literal).getValue()="0"
	and target_13.getElse().(Literal).getValue()="8"
}

/*predicate func_17(Variable v__UNIQUE_ID___x1429_689, Variable v__UNIQUE_ID___y1430_689, ConditionalExpr target_17) {
	target_17.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=v__UNIQUE_ID___x1429_689
	and target_17.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=v__UNIQUE_ID___y1430_689
	and target_17.getThen().(VariableAccess).getTarget()=v__UNIQUE_ID___x1429_689
	and target_17.getElse().(VariableAccess).getTarget()=v__UNIQUE_ID___y1430_689
}

*/
predicate func_18(Variable verr_666, FunctionCall target_1, ExprStmt target_18) {
	target_18.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_666
	and target_18.getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-14"
	and target_18.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
}

/*predicate func_19(Variable verr_666, UnaryMinusExpr target_19) {
	target_19.getValue()="-14"
	and target_19.getParent().(AssignExpr).getRValue() = target_19
	and target_19.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_666
}

*/
predicate func_20(Variable verr_666, FunctionCall target_2, ExprStmt target_20) {
	target_20.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_666
	and target_20.getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-14"
	and target_20.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
}

/*predicate func_21(Variable verr_666, UnaryMinusExpr target_21) {
	target_21.getValue()="-14"
	and target_21.getParent().(AssignExpr).getRValue() = target_21
	and target_21.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_666
}

*/
predicate func_22(FunctionCall target_1, Function func, BlockStmt target_22) {
	target_22.getStmt(0) instanceof ExprStmt
	and target_22.getStmt(1) instanceof BreakStmt
	and target_22.getParent().(IfStmt).getCondition()=target_1
	and target_22.getEnclosingFunction() = func
}

predicate func_23(FunctionCall target_2, Function func, BlockStmt target_23) {
	target_23.getStmt(0) instanceof ExprStmt
	and target_23.getStmt(1) instanceof BreakStmt
	and target_23.getParent().(IfStmt).getCondition()=target_2
	and target_23.getEnclosingFunction() = func
}

from Function func, Parameter voptval_662, Parameter voptlen_662, Variable vsec_665, Variable verr_666, Variable vlen_667, Variable vopt_668, Variable v__UNIQUE_ID___x1429_689, Variable v__UNIQUE_ID___y1430_689, SizeofExprOperator target_0, FunctionCall target_1, FunctionCall target_2, SizeofExprOperator target_6, VariableAccess target_7, VariableAccess target_8, BreakStmt target_9, BreakStmt target_10, DeclStmt target_11, AssignExpr target_12, ConditionalExpr target_13, ExprStmt target_18, ExprStmt target_20, BlockStmt target_22, BlockStmt target_23
where
func_0(func, target_0)
and func_1(voptval_662, vsec_665, vlen_667, target_22, target_1)
and func_2(voptval_662, vopt_668, target_23, target_2)
and func_6(func, target_6)
and func_7(voptlen_662, target_7)
and func_8(voptlen_662, target_8)
and func_9(target_1, func, target_9)
and func_10(target_2, func, target_10)
and func_11(func, target_11)
and func_12(voptlen_662, vlen_667, v__UNIQUE_ID___x1429_689, v__UNIQUE_ID___y1430_689, target_12)
and func_13(voptlen_662, target_13)
and func_18(verr_666, target_1, target_18)
and func_20(verr_666, target_2, target_20)
and func_22(target_1, func, target_22)
and func_23(target_2, func, target_23)
and voptval_662.getType().hasName("sockptr_t")
and voptlen_662.getType().hasName("unsigned int")
and vsec_665.getType().hasName("bt_security")
and verr_666.getType().hasName("int")
and vlen_667.getType().hasName("size_t")
and vopt_668.getType().hasName("u32")
and v__UNIQUE_ID___x1429_689.getType().hasName("unsigned int")
and v__UNIQUE_ID___y1430_689.getType().hasName("unsigned int")
and voptval_662.getFunction() = func
and voptlen_662.getFunction() = func
and vsec_665.(LocalVariable).getFunction() = func
and verr_666.(LocalVariable).getFunction() = func
and vlen_667.(LocalVariable).getFunction() = func
and vopt_668.(LocalVariable).getFunction() = func
and v__UNIQUE_ID___x1429_689.(LocalVariable).getFunction() = func
and v__UNIQUE_ID___y1430_689.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
