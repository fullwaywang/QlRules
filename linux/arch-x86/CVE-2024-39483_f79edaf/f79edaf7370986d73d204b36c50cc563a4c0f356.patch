commit f79edaf7370986d73d204b36c50cc563a4c0f356
Author: Sean Christopherson <seanjc@google.com>
Date:   Tue May 21 19:14:35 2024 -0700

    KVM: SVM: WARN on vNMI + NMI window iff NMIs are outright masked
    
    commit b4bd556467477420ee3a91fbcba73c579669edc6 upstream.
    
    When requesting an NMI window, WARN on vNMI support being enabled if and
    only if NMIs are actually masked, i.e. if the vCPU is already handling an
    NMI.  KVM's ABI for NMIs that arrive simultanesouly (from KVM's point of
    view) is to inject one NMI and pend the other.  When using vNMI, KVM pends
    the second NMI simply by setting V_NMI_PENDING, and lets the CPU do the
    rest (hardware automatically sets V_NMI_BLOCKING when an NMI is injected).
    
    However, if KVM can't immediately inject an NMI, e.g. because the vCPU is
    in an STI shadow or is running with GIF=0, then KVM will request an NMI
    window and trigger the WARN (but still function correctly).
    
    Whether or not the GIF=0 case makes sense is debatable, as the intent of
    KVM's behavior is to provide functionality that is as close to real
    hardware as possible.  E.g. if two NMIs are sent in quick succession, the
    probability of both NMIs arriving in an STI shadow is infinitesimally low
    on real hardware, but significantly larger in a virtual environment, e.g.
    if the vCPU is preempted in the STI shadow.  For GIF=0, the argument isn't
    as clear cut, because the window where two NMIs can collide is much larger
    in bare metal (though still small).
    
    That said, KVM should not have divergent behavior for the GIF=0 case based
    on whether or not vNMI support is enabled.  And KVM has allowed
    simultaneous NMIs with GIF=0 for over a decade, since commit 7460fb4a3400
    ("KVM: Fix simultaneous NMIs").  I.e. KVM's GIF=0 handling shouldn't be
    modified without a *really* good reason to do so, and if KVM's behavior
    were to be modified, it should be done irrespective of vNMI support.
    
    Fixes: fa4c027a7956 ("KVM: x86: Add support for SVM's Virtual NMI")
    Cc: stable@vger.kernel.org
    Cc: Santosh Shukla <Santosh.Shukla@amd.com>
    Cc: Maxim Levitsky <mlevitsk@redhat.com>
    Signed-off-by: Sean Christopherson <seanjc@google.com>
    Message-ID: <20240522021435.1684366-1-seanjc@google.com>
    Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/arch/x86/kvm/svm/svm.c b/arch/x86/kvm/svm/svm.c
index 77f1eeefcd34..1efbe8b33f6a 100644
--- a/arch/x86/kvm/svm/svm.c
+++ b/arch/x86/kvm/svm/svm.c
@@ -3856,16 +3856,27 @@ static void svm_enable_nmi_window(struct kvm_vcpu *vcpu)
 	struct vcpu_svm *svm = to_svm(vcpu);
 
 	/*
-	 * KVM should never request an NMI window when vNMI is enabled, as KVM
-	 * allows at most one to-be-injected NMI and one pending NMI, i.e. if
-	 * two NMIs arrive simultaneously, KVM will inject one and set
-	 * V_NMI_PENDING for the other.  WARN, but continue with the standard
-	 * single-step approach to try and salvage the pending NMI.
+	 * If NMIs are outright masked, i.e. the vCPU is already handling an
+	 * NMI, and KVM has not yet intercepted an IRET, then there is nothing
+	 * more to do at this time as KVM has already enabled IRET intercepts.
+	 * If KVM has already intercepted IRET, then single-step over the IRET,
+	 * as NMIs aren't architecturally unmasked until the IRET completes.
+	 *
+	 * If vNMI is enabled, KVM should never request an NMI window if NMIs
+	 * are masked, as KVM allows at most one to-be-injected NMI and one
+	 * pending NMI.  If two NMIs arrive simultaneously, KVM will inject one
+	 * NMI and set V_NMI_PENDING for the other, but if and only if NMIs are
+	 * unmasked.  KVM _will_ request an NMI window in some situations, e.g.
+	 * if the vCPU is in an STI shadow or if GIF=0, KVM can't immediately
+	 * inject the NMI.  In those situations, KVM needs to single-step over
+	 * the STI shadow or intercept STGI.
 	 */
-	WARN_ON_ONCE(is_vnmi_enabled(svm));
+	if (svm_get_nmi_mask(vcpu)) {
+		WARN_ON_ONCE(is_vnmi_enabled(svm));
 
-	if (svm_get_nmi_mask(vcpu) && !svm->awaiting_iret_completion)
-		return; /* IRET will cause a vm exit */
+		if (!svm->awaiting_iret_completion)
+			return; /* IRET will cause a vm exit */
+	}
 
 	/*
 	 * SEV-ES guests are responsible for signaling when a vCPU is ready to
