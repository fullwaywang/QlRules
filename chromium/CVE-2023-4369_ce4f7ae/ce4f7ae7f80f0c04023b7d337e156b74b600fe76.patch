commit ce4f7ae7f80f0c04023b7d337e156b74b600fe76	ce4f7ae7f80f0c04023b7d337e156b74b600fe76
Author: David Bienvenu <davidbienvenu@chromium.org>
Date:   Mon Nov 27 23:02:49 2023 +0000

    Fix timeout in WebUiConfig Death tests
    
    WebUiConfigTest.GetAndRemoveNonChromeUrls was running 6
    EXPECT_DEATH_IF_SUPPORTEDs, which occasionally timed out on some Windows
    bots because each EXPECT_DEATH takes over 5 seconds. This CL makes
    it a parameterized test, parameterized by the URL being tested.
    
    Bug: 1464456
    Change-Id: Id388451b85bb04f54970a4234456299dd8c97054
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5063672
    Reviewed-by: Demetrios Papadopoulos <dpapad@chromium.org>
    Commit-Queue: David Bienvenu <davidbienvenu@chromium.org>
    Code-Coverage: findit-for-me@appspot.gserviceaccount.com <findit-for-me@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#1229593}

diff --git a/content/browser/webui/webui_config_map_unittest.cc b/content/browser/webui/webui_config_map_unittest.cc
index cb66780315496..52435a3e4bd6f 100644
--- a/content/browser/webui/webui_config_map_unittest.cc
+++ b/content/browser/webui/webui_config_map_unittest.cc
@@ -88,8 +88,17 @@ TEST(WebUIConfigTest, AddAndRemoteChromeUntrustedUrl) {
   EXPECT_EQ(initial_size, map.GetWebUIConfigList(nullptr).size());
 }
 
+class WebUiConfigDeathTest : public testing::Test,
+                             public ::testing::WithParamInterface<const char*> {
+ public:
+  WebUiConfigDeathTest() = default;
+  WebUiConfigDeathTest(const WebUiConfigDeathTest&) = delete;
+  WebUiConfigDeathTest& operator=(const WebUiConfigDeathTest&) = delete;
+  ~WebUiConfigDeathTest() override = default;
+};
+
 // Regression test for https://crbug.com/1464456.
-TEST(WebUIConfigTest, GetAndRemoveNonChromeUrls) {
+TEST_P(WebUiConfigDeathTest, GetAndRemoveNonChromeUrls) {
   auto& map = WebUIConfigMap::GetInstance();
 
   ScopedWebUIConfigRegistration chrome_config(
@@ -97,34 +106,23 @@ TEST(WebUIConfigTest, GetAndRemoveNonChromeUrls) {
   ScopedWebUIConfigRegistration untrusted_config(
       std::make_unique<TestConfig>("chrome-untrusted", "foo"));
 
-  // filesystem: URLs
-  const GURL file_system_chrome("filesystem:chrome://foo/external/file.txt");
-  EXPECT_EQ(nullptr, map.GetConfig(kBrowserContext, file_system_chrome));
-  EXPECT_DEATH_IF_SUPPORTED(map.RemoveConfig(file_system_chrome), "");
-
-  const GURL file_system_chrome_untrusted(
-      "filesystem:chrome-untrusted://foo/external/file.txt");
-  EXPECT_EQ(nullptr,
-            map.GetConfig(kBrowserContext, file_system_chrome_untrusted));
-  EXPECT_DEATH_IF_SUPPORTED(map.RemoveConfig(file_system_chrome_untrusted), "");
-
-  // blob: URLs
-  const GURL blob_chrome("blob:chrome://foo/GUID");
-  EXPECT_EQ(nullptr, map.GetConfig(kBrowserContext, blob_chrome));
-  EXPECT_DEATH_IF_SUPPORTED(map.RemoveConfig(blob_chrome), "");
-
-  const GURL blob_chrome_untrusted("blob:chrome-untrusted://foo/GUID");
-  EXPECT_EQ(nullptr, map.GetConfig(kBrowserContext, blob_chrome_untrusted));
-  EXPECT_DEATH_IF_SUPPORTED(map.RemoveConfig(blob_chrome_untrusted), "");
-
-  // HTTP/HTTPS URLs
-  const GURL http("http://foo.com");
-  EXPECT_EQ(nullptr, map.GetConfig(kBrowserContext, http));
-  EXPECT_DEATH_IF_SUPPORTED(map.RemoveConfig(http), "");
-
-  const GURL https("https://foo.com");
-  EXPECT_EQ(nullptr, map.GetConfig(kBrowserContext, https));
-  EXPECT_DEATH_IF_SUPPORTED(map.RemoveConfig(https), "");
+  const GURL url(GetParam());
+  EXPECT_EQ(nullptr, map.GetConfig(kBrowserContext, url));
+  EXPECT_DEATH_IF_SUPPORTED(map.RemoveConfig(url), "");
 }
 
+INSTANTIATE_TEST_SUITE_P(
+    /* no prefix */,
+    WebUiConfigDeathTest,
+    ::testing::Values(
+        // filesystem: URLs
+        "filesystem:chrome://foo/external/file.txt",
+        "filesystem:chrome-untrusted://foo/external/file.txt",
+        // blob: URLS
+        "blob:chrome://foo/GUID",
+        "blob:chrome-untrusted://foo/GUID",
+        // HTTP/HTTPS URLS
+        "http://foo.com",
+        "https://foo.com"));
+
 }  // namespace content
