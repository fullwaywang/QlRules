/**
 * @name linux-1ebb71143758f45dc0fa76e2f48429e13b16d110-cp_report_fixup
 * @id cpp/linux/1ebb71143758f45dc0fa76e2f48429e13b16d110/cp-report-fixup
 * @description linux-1ebb71143758f45dc0fa76e2f48429e13b16d110-drivers/hid/hid-cypress.c-cp_report_fixup CVE-2017-7273
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vrsize_34, Parameter vrdesc_33, RelationalOperation target_1, ReturnStmt target_2, LogicalAndExpr target_3, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(RelationalOperation).getLesserOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vrsize_34
		and target_0.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="4"
		and target_0.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=vrdesc_33
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_0.getCondition().(RelationalOperation).getLesserOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getLocation().isBefore(target_1.getGreaterOperand().(SubExpr).getLeftOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getLocation())
		and target_2.getExpr().(VariableAccess).getLocation().isBefore(target_0.getThen().(ReturnStmt).getExpr().(VariableAccess).getLocation())
		and target_0.getThen().(ReturnStmt).getExpr().(VariableAccess).getLocation().isBefore(target_3.getAnOperand().(EqualityOperation).getAnOperand().(ArrayExpr).getArrayBase().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vrsize_34, RelationalOperation target_1) {
		 (target_1 instanceof GTExpr or target_1 instanceof LTExpr)
		and target_1.getLesserOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
		and target_1.getGreaterOperand().(SubExpr).getLeftOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vrsize_34
		and target_1.getGreaterOperand().(SubExpr).getRightOperand().(Literal).getValue()="4"
}

predicate func_2(Parameter vrdesc_33, NotExpr target_4, ReturnStmt target_2) {
		target_2.getExpr().(VariableAccess).getTarget()=vrdesc_33
		and target_2.getParent().(IfStmt).getCondition()=target_4
}

predicate func_3(Parameter vrdesc_33, LogicalAndExpr target_3) {
		target_3.getAnOperand().(EqualityOperation).getAnOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vrdesc_33
		and target_3.getAnOperand().(EqualityOperation).getAnOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("unsigned int")
		and target_3.getAnOperand().(EqualityOperation).getAnOperand().(HexLiteral).getValue()="41"
		and target_3.getAnOperand().(EqualityOperation).getAnOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vrdesc_33
		and target_3.getAnOperand().(EqualityOperation).getAnOperand().(ArrayExpr).getArrayOffset().(AddExpr).getAnOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
		and target_3.getAnOperand().(EqualityOperation).getAnOperand().(ArrayExpr).getArrayOffset().(AddExpr).getAnOperand().(Literal).getValue()="2"
		and target_3.getAnOperand().(EqualityOperation).getAnOperand().(HexLiteral).getValue()="25"
}

predicate func_4(Function func, NotExpr target_4) {
		target_4.getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
		and target_4.getOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="1"
		and target_4.getEnclosingFunction() = func
}

from Function func, Parameter vrsize_34, Parameter vrdesc_33, RelationalOperation target_1, ReturnStmt target_2, LogicalAndExpr target_3, NotExpr target_4
where
not func_0(vrsize_34, vrdesc_33, target_1, target_2, target_3, func)
and func_1(vrsize_34, target_1)
and func_2(vrdesc_33, target_4, target_2)
and func_3(vrdesc_33, target_3)
and func_4(func, target_4)
and vrsize_34.getType().hasName("unsigned int *")
and vrdesc_33.getType().hasName("__u8 *")
and vrsize_34.getFunction() = func
and vrdesc_33.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
