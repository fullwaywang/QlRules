/**
 * @name linux-69bd216e049349886405b1c87a55dce3d35d1ba7-ath12k_wmi_pdev_dfs_radar_detected_event
 * @id cpp/linux/69bd216e049349886405b1c87a55dce3d35d1ba7/ath12k-wmi-pdev-dfs-radar-detected-event
 * @description linux-69bd216e049349886405b1c87a55dce3d35d1ba7-drivers/net/wireless/ath/ath12k/wmi.c-ath12k_wmi_pdev_dfs_radar_detected_event CVE-2023-52776
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_2, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("rcu_read_lock")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation()))
}

predicate func_1(ExprStmt target_3, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_3.getLocation()))
}

predicate func_2(Function func, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("ath12k *")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("ath12k_mac_get_ar_by_pdev_id")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("ath12k_base *")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="pdev_id"
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("const ath12k_wmi_pdev_radar_event *")
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("kfree")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("const void **")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
}

from Function func, ExprStmt target_2, ExprStmt target_3
where
not func_0(target_2, func)
and not func_1(target_3, func)
and func_2(func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
