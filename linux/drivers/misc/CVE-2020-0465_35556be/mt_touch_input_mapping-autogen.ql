/**
 * @name linux-35556bed836f8dc07ac55f69c8d17dce3e7f0e25-mt_touch_input_mapping
 * @id cpp/linux/35556bed836f8dc07ac55f69c8d17dce3e7f0e25/mt-touch-input-mapping
 * @description linux-35556bed836f8dc07ac55f69c8d17dce3e7f0e25-drivers/hid/hid-multitouch.c-mt_touch_input_mapping CVE-2020-0465
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vbit_684, BitwiseAndExpr target_1, ExprStmt target_2) {
exists(IfStmt target_0 |
	target_0.getCondition().(NotExpr).getOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vbit_684
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-1"
	and target_0.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_1
	and target_2.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getLocation()))
}

predicate func_1(Function func, BitwiseAndExpr target_1) {
	target_1.getLeftOperand().(PointerFieldAccess).getTarget().getName()="hid"
	and target_1.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("hid_usage *")
	and target_1.getRightOperand().(Literal).getValue()="4294901760"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Parameter vbit_684, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("hid_map_usage")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("hid_input *")
	and target_2.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("hid_usage *")
	and target_2.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vbit_684
	and target_2.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("int *")
	and target_2.getExpr().(FunctionCall).getArgument(4).(Literal).getValue()="1"
	and target_2.getExpr().(FunctionCall).getArgument(5).(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Parameter vbit_684, BitwiseAndExpr target_1, ExprStmt target_2
where
not func_0(vbit_684, target_1, target_2)
and func_1(func, target_1)
and func_2(vbit_684, target_2)
and vbit_684.getType().hasName("unsigned long **")
and vbit_684.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
