/**
 * @name linux-80c529322600dfb1f985b5e3f14c3c6f522ce154-ipmr_rules_init
 * @id cpp/linux/80c529322600dfb1f985b5e3f14c3c6f522ce154/ipmr-rules-init
 * @description linux-80c529322600dfb1f985b5e3f14c3c6f522ce154-net/ipv4/ipmr.c-ipmr_rules_init CVE-2022-48810
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_2, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("rtnl_lock")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
)
}

predicate func_1(ExprStmt target_3, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("rtnl_unlock")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_3.getLocation())
)
}

predicate func_2(Function func, ExprStmt target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		obj_0.getTarget().hasName("ipmr_free_table")
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("mr_table *")
	)
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, ExprStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		obj_0.getTarget().hasName("fib_rules_unregister")
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("fib_rules_ops *")
	)
	and target_3.getEnclosingFunction() = func
}

from Function func, ExprStmt target_2, ExprStmt target_3
where
not func_0(target_2, func)
and not func_1(target_3, func)
and func_2(func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
