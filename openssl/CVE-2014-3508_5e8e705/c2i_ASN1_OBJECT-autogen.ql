/**
 * @name openssl-5e8e7054f76add84998f6133fb324116b4e811b9-c2i_ASN1_OBJECT
 * @id cpp/openssl/5e8e7054f76add84998f6133fb324116b4e811b9/c2i-asn1-object
 * @description openssl-5e8e7054f76add84998f6133fb324116b4e811b9-crypto/asn1/a_object.c-c2i_ASN1_OBJECT CVE-2014-3508
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vp_292, Variable vi_293, BlockStmt target_2, CommaExpr target_3, EqualityOperation target_1) {
	exists(LogicalAndExpr target_0 |
		target_0.getAnOperand() instanceof EqualityOperation
		and target_0.getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vi_293
		and target_0.getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vp_292
		and target_0.getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(ArrayExpr).getArrayOffset().(UnaryMinusExpr).getValue()="-1"
		and target_0.getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getRightOperand().(HexLiteral).getValue()="128"
		and target_0.getParent().(IfStmt).getThen()=target_2
		and target_3.getRightOperand().(PostfixIncrExpr).getOperand().(VariableAccess).getLocation().isBefore(target_0.getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(ArrayExpr).getArrayBase().(VariableAccess).getLocation())
		and target_0.getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(ArrayExpr).getArrayBase().(VariableAccess).getLocation().isBefore(target_1.getAnOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vp_292, BlockStmt target_2, EqualityOperation target_1) {
		target_1.getAnOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vp_292
		and target_1.getAnOperand().(HexLiteral).getValue()="128"
		and target_1.getParent().(IfStmt).getThen()=target_2
}

predicate func_2(Function func, BlockStmt target_2) {
		target_2.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("ERR_put_error")
		and target_2.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0) instanceof Literal
		and target_2.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1) instanceof Literal
		and target_2.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2) instanceof Literal
		and target_2.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(3) instanceof StringLiteral
		and target_2.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(4) instanceof Literal
		and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vp_292, Variable vi_293, CommaExpr target_3) {
		target_3.getLeftOperand().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget()=vi_293
		and target_3.getRightOperand().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget()=vp_292
}

from Function func, Variable vp_292, Variable vi_293, EqualityOperation target_1, BlockStmt target_2, CommaExpr target_3
where
not func_0(vp_292, vi_293, target_2, target_3, target_1)
and func_1(vp_292, target_2, target_1)
and func_2(func, target_2)
and func_3(vp_292, vi_293, target_3)
and vp_292.getType().hasName("const unsigned char *")
and vi_293.getType().hasName("int")
and vp_292.(LocalVariable).getFunction() = func
and vi_293.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
