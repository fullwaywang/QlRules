/**
 * @name linux-16ce101db85db694a91380aa4c89b25530871d33-migrate_vma_setup
 * @id cpp/linux/16ce101db85db694a91380aa4c89b25530871d33/migrate-vma-setup
 * @description linux-16ce101db85db694a91380aa4c89b25530871d33-migrate_vma_setup CVE-2022-3523
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vargs_502, LogicalOrExpr target_1, ExprStmt target_2, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(LogicalAndExpr).getAnOperand().(PointerFieldAccess).getTarget().getName()="fault_page"
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vargs_502
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("is_device_private_page")
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="fault_page"
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vargs_502
		and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-22"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_1.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vargs_502, LogicalOrExpr target_1) {
		target_1.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="src"
		and target_1.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vargs_502
		and target_1.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="dst"
		and target_1.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vargs_502
}

predicate func_2(Parameter vargs_502, ExprStmt target_2) {
		target_2.getExpr().(FunctionCall).getTarget().hasName("__memset")
		and target_2.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="src"
		and target_2.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vargs_502
		and target_2.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_2.getExpr().(FunctionCall).getArgument(2).(MulExpr).getLeftOperand().(SizeofExprOperator).getValue()="8"
		and target_2.getExpr().(FunctionCall).getArgument(2).(MulExpr).getRightOperand().(VariableAccess).getTarget().getType().hasName("long")
}

from Function func, Parameter vargs_502, LogicalOrExpr target_1, ExprStmt target_2
where
not func_0(vargs_502, target_1, target_2, func)
and func_1(vargs_502, target_1)
and func_2(vargs_502, target_2)
and vargs_502.getType().hasName("migrate_vma *")
and vargs_502.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
