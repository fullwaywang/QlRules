/**
 * @name linux-e0a70217107e6f9844628120412cb27bb4cea194-__exit_signal
 * @id cpp/linux/e0a70217107e6f9844628120412cb27bb4cea194/--exit-signal
 * @description linux-e0a70217107e6f9844628120412cb27bb4cea194-kernel/exit.c-__exit_signal CVE-2010-4248
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vtsk_80, VariableAccess target_1, ExprStmt target_2, EqualityOperation target_3) {
	exists(IfStmt target_0 |
		target_0.getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
		and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("has_group_leader_pid")
		and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vtsk_80
		and target_0.getCondition().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("posix_cpu_timers_exit_group")
		and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vtsk_80
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(0)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getAnOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vgroup_dead_83, BlockStmt target_4, VariableAccess target_1) {
		target_1.getTarget()=vgroup_dead_83
		and target_1.getParent().(IfStmt).getThen()=target_4
}

predicate func_2(Parameter vtsk_80, ExprStmt target_2) {
		target_2.getExpr().(FunctionCall).getTarget().hasName("posix_cpu_timers_exit_group")
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vtsk_80
}

predicate func_3(Parameter vtsk_80, EqualityOperation target_3) {
		target_3.getAnOperand().(VariableAccess).getTarget()=vtsk_80
		and target_3.getAnOperand().(PointerFieldAccess).getTarget().getName()="curr_target"
		and target_3.getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("signal_struct *")
}

predicate func_4(Parameter vtsk_80, BlockStmt target_4) {
		target_4.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("posix_cpu_timers_exit_group")
		and target_4.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vtsk_80
		and target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("tty_struct *")
		and target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="tty"
		and target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("signal_struct *")
}

from Function func, Variable vgroup_dead_83, Parameter vtsk_80, VariableAccess target_1, ExprStmt target_2, EqualityOperation target_3, BlockStmt target_4
where
not func_0(vtsk_80, target_1, target_2, target_3)
and func_1(vgroup_dead_83, target_4, target_1)
and func_2(vtsk_80, target_2)
and func_3(vtsk_80, target_3)
and func_4(vtsk_80, target_4)
and vgroup_dead_83.getType().hasName("bool")
and vtsk_80.getType().hasName("task_struct *")
and vgroup_dead_83.(LocalVariable).getFunction() = func
and vtsk_80.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
