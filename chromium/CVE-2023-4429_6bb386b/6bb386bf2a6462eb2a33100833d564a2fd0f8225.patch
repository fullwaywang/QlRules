commit 6bb386bf2a6462eb2a33100833d564a2fd0f8225	6bb386bf2a6462eb2a33100833d564a2fd0f8225
Author: Tsuyoshi Horo <horo@chromium.org>
Date:   Tue Aug 8 01:33:05 2023 +0000

    Fix ExtensionLocalizationThrottle::WillProcessResponse
    
    Synchronous call of `delegate_->CancelWithError()` inside
    blink::URLLoaderThrottle::WillProcessResponse() in Blink can cause UAF.
    To fix this, this CL change ExtensionLocalizationThrottle::
    WillProcessResponse() to set `defer` to true, and asynchronously call
    `delegate_->CancelWithError()`.
    
    Bug: 1469754
    Change-Id: Ic129ba4b39a9c1ab00eb6609db824b065296e66d
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4751579
    Reviewed-by: David Bertoni <dbertoni@chromium.org>
    Commit-Queue: Tsuyoshi Horo <horo@chromium.org>
    Reviewed-by: Adam Rice <ricea@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1180638}

diff --git a/extensions/renderer/extension_localization_throttle.cc b/extensions/renderer/extension_localization_throttle.cc
index d0456671b7eea..382283cea8a8a 100644
--- a/extensions/renderer/extension_localization_throttle.cc
+++ b/extensions/renderer/extension_localization_throttle.cc
@@ -217,7 +217,14 @@ void ExtensionLocalizationThrottle::WillProcessResponse(
       mojo::CreateDataPipe(/*options=*/nullptr, producer_handle, body);
 
   if (create_pipe_result != MOJO_RESULT_OK || force_error_for_test_) {
-    delegate_->CancelWithError(net::ERR_INSUFFICIENT_RESOURCES, kCancelReason);
+    // Synchronous call of `delegate_->CancelWithError` can cause a UAF error.
+    // So defer the request here.
+    *defer = true;
+    base::SingleThreadTaskRunner::GetCurrentDefault()->PostTask(
+        FROM_HERE,
+        base::BindOnce(base::BindOnce(
+            &ExtensionLocalizationThrottle::DeferredCancelWithError,
+            weak_factory_.GetWeakPtr(), net::ERR_INSUFFICIENT_RESOURCES)));
     return;
   }
 
@@ -248,4 +255,10 @@ void ExtensionLocalizationThrottle::WillProcessResponse(
                        std::move(producer_handle));
 }
 
+void ExtensionLocalizationThrottle::DeferredCancelWithError(int error_code) {
+  if (delegate_) {
+    delegate_->CancelWithError(error_code, kCancelReason);
+  }
+}
+
 }  // namespace extensions
diff --git a/extensions/renderer/extension_localization_throttle.h b/extensions/renderer/extension_localization_throttle.h
index b697247caff1a..69805be5db7c9 100644
--- a/extensions/renderer/extension_localization_throttle.h
+++ b/extensions/renderer/extension_localization_throttle.h
@@ -39,8 +39,10 @@ class ExtensionLocalizationThrottle : public blink::URLLoaderThrottle {
 
  private:
   ExtensionLocalizationThrottle();
+  void DeferredCancelWithError(int error_code);
 
   bool force_error_for_test_ = false;
+  base::WeakPtrFactory<ExtensionLocalizationThrottle> weak_factory_{this};
 };
 
 }  // namespace extensions
diff --git a/extensions/renderer/extension_localization_throttle_unittest.cc b/extensions/renderer/extension_localization_throttle_unittest.cc
index ef6ec9cf84361..732402366b697 100644
--- a/extensions/renderer/extension_localization_throttle_unittest.cc
+++ b/extensions/renderer/extension_localization_throttle_unittest.cc
@@ -382,8 +382,12 @@ TEST_F(ExtensionLocalizationThrottleTest, CreateDataPipeError) {
   response_head->mime_type = "text/css";
   bool defer = false;
   throttle->WillProcessResponse(url, response_head.get(), &defer);
-  EXPECT_FALSE(defer);
+  EXPECT_TRUE(defer);
   EXPECT_FALSE(delegate->is_intercepted());
+  EXPECT_FALSE(delegate->cancel_error_code());
+
+  // Run loop to call DeferredCancelWithError().
+  base::RunLoop().RunUntilIdle();
 
   ASSERT_TRUE(delegate->cancel_error_code());
   EXPECT_EQ(net::ERR_INSUFFICIENT_RESOURCES, *delegate->cancel_error_code());
