/**
 * @name linux-be80a1d3f9dbe5aee79a325964f7037fe2d92f30-btf_check_func_arg_match
 * @id cpp/linux/be80a1d3f9dbe5aee79a325964f7037fe2d92f30/btf-check-func-arg-match
 * @description linux-be80a1d3f9dbe5aee79a325964f7037fe2d92f30-kernel/bpf/btf.c-btf_check_func_arg_match CVE-2021-4204
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vregno_5659, Variable vreg_5660, Parameter venv_5619, ReturnStmt target_1, FunctionCall target_0) {
	target_0.getTarget().hasName("check_ctx_reg")
	and not target_0.getTarget().hasName("check_ptr_off_reg")
	and target_0.getArgument(0).(VariableAccess).getTarget()=venv_5619
	and target_0.getArgument(1).(VariableAccess).getTarget()=vreg_5660
	and target_0.getArgument(2).(VariableAccess).getTarget()=vregno_5659
	and target_0.getParent().(IfStmt).getThen()=target_1
}

predicate func_1(FunctionCall target_0, Function func, ReturnStmt target_1) {
	target_1.getExpr().(UnaryMinusExpr).getValue()="-22"
	and target_1.getParent().(IfStmt).getCondition()=target_0
	and target_1.getEnclosingFunction() = func
}

from Function func, Variable vregno_5659, Variable vreg_5660, Parameter venv_5619, FunctionCall target_0, ReturnStmt target_1
where
func_0(vregno_5659, vreg_5660, venv_5619, target_1, target_0)
and func_1(target_0, func, target_1)
and vregno_5659.getType().hasName("u32")
and vreg_5660.getType().hasName("bpf_reg_state *")
and venv_5619.getType().hasName("bpf_verifier_env *")
and vregno_5659.(LocalVariable).getFunction() = func
and vreg_5660.(LocalVariable).getFunction() = func
and venv_5619.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
