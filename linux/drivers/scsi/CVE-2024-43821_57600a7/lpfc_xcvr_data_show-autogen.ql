/**
 * @name linux-57600a7dd2b52c904f7c8d2cac0fd8c23868e680-lpfc_xcvr_data_show
 * @id cpp/linux/57600a7dd2b52c904f7c8d2cac0fd8c23868e680/lpfc-xcvr-data-show
 * @description linux-57600a7dd2b52c904f7c8d2cac0fd8c23868e680-drivers/scsi/lpfc/lpfc_attr.c-lpfc_xcvr_data_show CVE-2024-43821
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vbuf_1888, Variable vlen_1894, Variable vrdp_context_1895, ExprStmt target_1, ExprStmt target_2, Function func) {
exists(IfStmt target_0 |
	exists(BlockStmt obj_0 | obj_0=target_0.getThen() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(AssignExpr obj_2 | obj_2=obj_1.getExpr() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getRValue() |
					obj_3.getTarget().hasName("scnprintf")
					and obj_3.getArgument(0).(VariableAccess).getTarget()=vbuf_1888
					and obj_3.getArgument(1).(SubExpr).getRightOperand().(VariableAccess).getTarget()=vlen_1894
					and obj_3.getArgument(2).(StringLiteral).getValue()="SPF info NA: alloc failure\n"
				)
				and obj_2.getLValue().(VariableAccess).getTarget()=vlen_1894
			)
		)
		and obj_0.getStmt(1).(ReturnStmt).getExpr().(VariableAccess).getTarget()=vlen_1894
	)
	and target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vrdp_context_1895
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_1(Variable vrdp_context_1895, ExprStmt target_1) {
	exists(AssignExpr obj_0 | obj_0=target_1.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("lpfc_get_sfp_info_wait")
			and obj_1.getArgument(0).(VariableAccess).getTarget().getType().hasName("lpfc_hba *")
			and obj_1.getArgument(1).(VariableAccess).getTarget()=vrdp_context_1895
		)
		and obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("int")
	)
}

predicate func_2(Parameter vbuf_1888, Variable vlen_1894, ExprStmt target_2) {
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			exists(SubExpr obj_2 | obj_2=obj_1.getArgument(1) |
				obj_2.getLeftOperand().(BinaryBitwiseOperation).getValue()="4096"
				and obj_2.getRightOperand().(VariableAccess).getTarget()=vlen_1894
			)
			and obj_1.getTarget().hasName("scnprintf")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vbuf_1888
			and obj_1.getArgument(2).(StringLiteral).getValue()="SFP info NA:\n"
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vlen_1894
	)
}

from Function func, Parameter vbuf_1888, Variable vlen_1894, Variable vrdp_context_1895, ExprStmt target_1, ExprStmt target_2
where
not func_0(vbuf_1888, vlen_1894, vrdp_context_1895, target_1, target_2, func)
and func_1(vrdp_context_1895, target_1)
and func_2(vbuf_1888, vlen_1894, target_2)
and vbuf_1888.getType().hasName("char *")
and vlen_1894.getType().hasName("int")
and vrdp_context_1895.getType().hasName("lpfc_rdp_context *")
and vbuf_1888.getFunction() = func
and vlen_1894.(LocalVariable).getFunction() = func
and vrdp_context_1895.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
