commit f5ea5cc09ac64cdfe17d6c51fa07648f33d79842	f5ea5cc09ac64cdfe17d6c51fa07648f33d79842
Author: Rahul Agarkar <rahul.agarkar@oracle.com>
Date:   Tue Jul 27 13:34:06 2021 +0200

    Bug#33162828: INNODB: Assertion failure: ut0ut.cc:552 thread 140294520874752
    
    Problem:
    Server crashes when an undo tablespace is truncated while
    an active transaction is using it.
    
    Solution:
    Do not mark the transaction as complete until all the cleanup is done.
    
    RB# 26771
    Reviewed By: Debarun Banerjee <debarun.banerjee@oracle.com>

diff --git a/storage/innobase/trx/trx0trx.cc b/storage/innobase/trx/trx0trx.cc
index 9375b2b2610..b93de8a745c 100644
--- a/storage/innobase/trx/trx0trx.cc
+++ b/storage/innobase/trx/trx0trx.cc
@@ -1972,15 +1972,6 @@ written */
     }
   }
 
-  if (trx->rsegs.m_redo.rseg != nullptr) {
-    trx_rseg_t *rseg = trx->rsegs.m_redo.rseg;
-    ut_ad(rseg->trx_ref_count > 0);
-
-    /* Multiple transactions can simultaneously decrement
-    the atomic counter. */
-    rseg->trx_ref_count--;
-  }
-
   /* Reset flag that SE persists GTID. */
   auto &gtid_persistor = clone_sys->get_gtid_persistor();
   gtid_persistor.set_persist_gtid(trx, false);
@@ -2052,6 +2043,27 @@ written */
     srv_active_wake_master_thread();
   }
 
+  /* Do not decrement the reference count before this point.
+  There is a potential issue where a thread attempting to drop
+  an undo tablespace may end up dropping this undo space
+  before this thread can complete the cleanup.
+  While marking a undo space as inactive, the server tries
+  to find if any transaction is actively using the undo log
+  being truncated. A non-zero reference count ensures that the
+  thread attempting to truncate/drop the undo tablespace
+  cannot be successful as the undo log cannot be dropped until
+  is it empty. */
+  if (trx->rsegs.m_redo.rseg != nullptr) {
+    trx_rseg_t *rseg = trx->rsegs.m_redo.rseg;
+    ut_ad(rseg->trx_ref_count > 0);
+
+    /* Multiple transactions can simultaneously decrement
+    the atomic counter. */
+    rseg->trx_ref_count--;
+
+    trx->rsegs.m_redo.rseg = nullptr;
+  }
+
   /* Free all savepoints, starting from the first. */
   trx_named_savept_t *savep = UT_LIST_GET_FIRST(trx->trx_savepoints);
 
diff --git a/storage/innobase/trx/trx0undo.cc b/storage/innobase/trx/trx0undo.cc
index 98ace7f56ef..d26ca9ebe8c 100644
--- a/storage/innobase/trx/trx0undo.cc
+++ b/storage/innobase/trx/trx0undo.cc
@@ -1967,6 +1967,7 @@ void trx_undo_insert_cleanup(trx_undo_ptr_t *undo_ptr, bool noredo) {
 
     rseg->unlatch();
 
+    DEBUG_SYNC_C("innodb_commit_wait_for_truncate");
     trx_undo_seg_free(undo, noredo);
 
     rseg->latch();
