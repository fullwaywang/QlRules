/**
 * @name openssl-259b664f950c2ba66fbf4b0fe5281327904ead21-www_body
 * @id cpp/openssl/259b664f950c2ba66fbf4b0fe5281327904ead21/www-body
 * @description openssl-259b664f950c2ba66fbf4b0fe5281327904ead21-apps/s_server.c-www_body CVE-2016-0798
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsrp_callback_parm, FunctionCall target_0) {
		target_0.getTarget().hasName("SRP_VBASE_get_by_user")
		and not target_0.getTarget().hasName("SRP_VBASE_get1_by_user")
		and target_0.getArgument(0).(ValueFieldAccess).getTarget().getName()="vb"
		and target_0.getArgument(0).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrp_callback_parm
		and target_0.getArgument(1).(ValueFieldAccess).getTarget().getName()="login"
		and target_0.getArgument(1).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrp_callback_parm
		and target_0.getParent().(AssignExpr).getRValue() = target_0
		and target_0.getParent().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="user"
		and target_0.getParent().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrp_callback_parm
}

predicate func_1(Variable vsrp_callback_parm, FunctionCall target_1) {
		target_1.getTarget().hasName("SRP_VBASE_get_by_user")
		and not target_1.getTarget().hasName("SRP_VBASE_get1_by_user")
		and target_1.getArgument(0).(ValueFieldAccess).getTarget().getName()="vb"
		and target_1.getArgument(0).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrp_callback_parm
		and target_1.getArgument(1).(ValueFieldAccess).getTarget().getName()="login"
		and target_1.getArgument(1).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrp_callback_parm
		and target_1.getParent().(AssignExpr).getRValue() = target_1
		and target_1.getParent().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="user"
		and target_1.getParent().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrp_callback_parm
}

predicate func_2(Variable vsrp_callback_parm, ValueFieldAccess target_4, ExprStmt target_5) {
	exists(ExprStmt target_2 |
		target_2.getExpr().(FunctionCall).getTarget().hasName("SRP_user_pwd_free")
		and target_2.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="user"
		and target_2.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrp_callback_parm
		and target_4.getQualifier().(VariableAccess).getLocation().isBefore(target_2.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_2.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_5.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_3(Variable vsrp_callback_parm, LogicalAndExpr target_6, ValueFieldAccess target_7, ExprStmt target_8) {
	exists(ExprStmt target_3 |
		target_3.getExpr().(FunctionCall).getTarget().hasName("SRP_user_pwd_free")
		and target_3.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="user"
		and target_3.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrp_callback_parm
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_3
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
		and target_7.getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_3.getExpr().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_8.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_4(Variable vsrp_callback_parm, ValueFieldAccess target_4) {
		target_4.getTarget().getName()="login"
		and target_4.getQualifier().(VariableAccess).getTarget()=vsrp_callback_parm
}

predicate func_5(Variable vsrp_callback_parm, ExprStmt target_5) {
		target_5.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="user"
		and target_5.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrp_callback_parm
		and target_5.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_6(Function func, LogicalAndExpr target_6) {
		target_6.getAnOperand().(FunctionCall).getTarget().hasName("BIO_test_flags")
		and target_6.getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("BIO *")
		and target_6.getAnOperand().(FunctionCall).getArgument(1).(Literal).getValue()="4"
		and target_6.getAnOperand().(EqualityOperation).getAnOperand().(FunctionCall).getTarget().hasName("BIO_get_retry_reason")
		and target_6.getAnOperand().(EqualityOperation).getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("BIO *")
		and target_6.getAnOperand().(EqualityOperation).getAnOperand().(Literal).getValue()="1"
		and target_6.getEnclosingFunction() = func
}

predicate func_7(Variable vsrp_callback_parm, ValueFieldAccess target_7) {
		target_7.getTarget().getName()="user"
		and target_7.getQualifier().(VariableAccess).getTarget()=vsrp_callback_parm
}

predicate func_8(Variable vsrp_callback_parm, LogicalAndExpr target_6, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="user"
		and target_8.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrp_callback_parm
		and target_8.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
		and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

from Function func, Variable vsrp_callback_parm, FunctionCall target_0, FunctionCall target_1, ValueFieldAccess target_4, ExprStmt target_5, LogicalAndExpr target_6, ValueFieldAccess target_7, ExprStmt target_8
where
func_0(vsrp_callback_parm, target_0)
and func_1(vsrp_callback_parm, target_1)
and not func_2(vsrp_callback_parm, target_4, target_5)
and not func_3(vsrp_callback_parm, target_6, target_7, target_8)
and func_4(vsrp_callback_parm, target_4)
and func_5(vsrp_callback_parm, target_5)
and func_6(func, target_6)
and func_7(vsrp_callback_parm, target_7)
and func_8(vsrp_callback_parm, target_6, target_8)
and vsrp_callback_parm.getType().hasName("srpsrvparm")
and not vsrp_callback_parm.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
