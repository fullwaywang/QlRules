/**
 * @name chromium-552939b035e724e022fedb90fd80cd008e441fcf-base__SampleVectorBase__MoveSingleSampleToCounts
 * @id cpp/chromium/552939b035e724e022fedb90fd80cd008e441fcf/basesamplevectorbasemovesinglesampletocounts
 * @description chromium-552939b035e724e022fedb90fd80cd008e441fcf-base/metrics/sample_vector.cc-base__SampleVectorBase__MoveSingleSampleToCounts CVE-2023-1220
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsample_272, ExprStmt target_1, EqualityOperation target_2, AddressOfExpr target_3, Function func) {
exists(IfStmt target_0 |
	exists(RelationalOperation obj_0 | obj_0=target_0.getCondition() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getGreaterOperand() |
			obj_1.getTarget().getName()="bucket"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vsample_272
		)
		and exists(FunctionCall obj_2 | obj_2=obj_0.getLesserOperand() |
			obj_2.getTarget().hasName("counts_size")
			and obj_2.getQualifier().(ThisExpr).getType() instanceof PointerType
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getLeftOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getOperand().(ArrayExpr).getArrayOffset().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vsample_272, ExprStmt target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(ArrayExpr obj_2 | obj_2=obj_1.getOperand() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getArrayBase() |
					obj_3.getTarget().hasName("counts")
					and obj_3.getQualifier().(ThisExpr).getType() instanceof PointerType
				)
				and exists(ValueFieldAccess obj_4 | obj_4=obj_2.getArrayOffset() |
					obj_4.getTarget().getName()="bucket"
					and obj_4.getQualifier().(VariableAccess).getTarget()=vsample_272
				)
			)
		)
		and exists(ValueFieldAccess obj_5 | obj_5=obj_0.getArgument(1) |
			obj_5.getTarget().getName()="count"
			and obj_5.getQualifier().(VariableAccess).getTarget()=vsample_272
		)
		and obj_0.getTarget().hasName("NoBarrier_AtomicIncrement")
	)
}

predicate func_2(Variable vsample_272, EqualityOperation target_2) {
	exists(ValueFieldAccess obj_0 | obj_0=target_2.getLeftOperand() |
		obj_0.getTarget().getName()="count"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vsample_272
	)
	and target_2.getRightOperand().(Literal).getValue()="0"
}

predicate func_3(Variable vsample_272, AddressOfExpr target_3) {
	exists(ArrayExpr obj_0 | obj_0=target_3.getOperand() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getArrayBase() |
			obj_1.getTarget().hasName("counts")
			and obj_1.getQualifier().(ThisExpr).getType() instanceof PointerType
		)
		and exists(ValueFieldAccess obj_2 | obj_2=obj_0.getArrayOffset() |
			obj_2.getTarget().getName()="bucket"
			and obj_2.getQualifier().(VariableAccess).getTarget()=vsample_272
		)
	)
}

from Function func, Variable vsample_272, ExprStmt target_1, EqualityOperation target_2, AddressOfExpr target_3
where
not func_0(vsample_272, target_1, target_2, target_3, func)
and func_1(vsample_272, target_1)
and func_2(vsample_272, target_2)
and func_3(vsample_272, target_3)
and vsample_272.getType().hasName("SingleSample")
and vsample_272.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
