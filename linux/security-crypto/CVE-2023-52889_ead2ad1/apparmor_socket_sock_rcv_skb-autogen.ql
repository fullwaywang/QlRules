/**
 * @name linux-ead2ad1d9f045f26fdce3ef1644913b3a6cd38f2-apparmor_socket_sock_rcv_skb
 * @id cpp/linux/ead2ad1d9f045f26fdce3ef1644913b3a6cd38f2/apparmor-socket-sock-rcv-skb
 * @description linux-ead2ad1d9f045f26fdce3ef1644913b3a6cd38f2-security/apparmor/lsm.c-apparmor_socket_sock_rcv_skb CVE-2023-52889
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vctx_1079, FunctionCall target_2, Function func) {
exists(IfStmt target_0 |
	exists(NotExpr obj_0 | obj_0=target_0.getCondition() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().getName()="label"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vctx_1079
		)
	)
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-13"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getFollowingStmt() instanceof ReturnStmt
	and target_0.getCondition().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_2(Variable vctx_1079, FunctionCall target_2) {
	exists(PointerFieldAccess obj_0 | obj_0=target_2.getArgument(0) |
		obj_0.getTarget().getName()="label"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vctx_1079
	)
	and exists(ValueFieldAccess obj_1 | obj_1=target_2.getArgument(3) |
		exists(ValueFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
			exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
				obj_3.getTarget().getName()="(unknown field)"
				and obj_3.getQualifier().(VariableAccess).getTarget().getType().hasName("sk_buff *")
			)
			and obj_2.getTarget().getName()="(unknown field)"
		)
		and obj_1.getTarget().getName()="secmark"
	)
	and target_2.getTarget().hasName("apparmor_secmark_check")
	and target_2.getArgument(1).(StringLiteral).getValue()="recvmsg"
	and target_2.getArgument(2).(Literal).getValue()="4"
	and target_2.getArgument(4).(VariableAccess).getTarget().getType().hasName("sock *")
}

from Function func, Variable vctx_1079, FunctionCall target_2
where
not func_0(vctx_1079, target_2, func)
and func_2(vctx_1079, target_2)
and vctx_1079.getType().hasName("aa_sk_ctx *")
and vctx_1079.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
