/**
 * @name linux-a992b8a4682f119ae035a01b40d4d0665c4a2875-cpu_set_bug_bits
 * @id cpp/linux/a992b8a4682f119ae035a01b40d4d0665c4a2875/cpu-set-bug-bits
 * @description linux-a992b8a4682f119ae035a01b40d4d0665c4a2875-arch/x86/kernel/cpu/common.c-cpu_set_bug_bits CVE-2022-21125
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Variable vcpu_vuln_blacklist) {
exists(BitwiseOrExpr target_1 |
	target_1.getValue()="5"
	and target_1.getParent().(FunctionCall).getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getTarget().hasName("cpu_matches")
	and target_1.getParent().(FunctionCall).getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vcpu_vuln_blacklist
	and target_1.getParent().(FunctionCall).getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(1) instanceof BinaryBitwiseOperation)
}

predicate func_2(Variable vcpu_vuln_blacklist, BinaryBitwiseOperation target_2) {
	target_2.getValue()="1"
	and target_2.getParent().(FunctionCall).getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getTarget().hasName("cpu_matches")
	and target_2.getParent().(FunctionCall).getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vcpu_vuln_blacklist
}

predicate func_3(Variable vcpu_vuln_blacklist, LogicalAndExpr target_4, VariableAccess target_3) {
	target_3.getTarget()=vcpu_vuln_blacklist
	and target_3.getParent().(FunctionCall).getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getTarget().hasName("cpu_matches")
	and target_3.getParent().(FunctionCall).getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getArgument(1) instanceof BinaryBitwiseOperation
	and target_3.getLocation().isBefore(target_4.getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
}

predicate func_4(Variable vcpu_vuln_blacklist, LogicalAndExpr target_4) {
	target_4.getLeftOperand().(FunctionCall).getTarget().hasName("cpu_matches")
	and target_4.getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vcpu_vuln_blacklist
	and target_4.getLeftOperand().(FunctionCall).getArgument(1).(BinaryBitwiseOperation).getValue()="2"
	and target_4.getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("arch_cap_mmio_immune")
	and target_4.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("u64")
}

from Function func, Variable vcpu_vuln_blacklist, BinaryBitwiseOperation target_2, VariableAccess target_3, LogicalAndExpr target_4
where
not func_1(vcpu_vuln_blacklist)
and func_2(vcpu_vuln_blacklist, target_2)
and func_3(vcpu_vuln_blacklist, target_4, target_3)
and func_4(vcpu_vuln_blacklist, target_4)
and vcpu_vuln_blacklist.getType() instanceof ArrayType
and not vcpu_vuln_blacklist.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
