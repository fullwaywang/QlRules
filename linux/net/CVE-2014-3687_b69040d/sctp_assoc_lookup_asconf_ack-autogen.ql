/**
 * @name linux-b69040d8e39f20d5215a03502a8e8b4c6ab78395-sctp_assoc_lookup_asconf_ack
 * @id cpp/linux/b69040d8e39f20d5215a03502a8e8b4c6ab78395/sctp-assoc-lookup-asconf-ack
 * @description linux-b69040d8e39f20d5215a03502a8e8b4c6ab78395-net/sctp/associola.c-sctp_assoc_lookup_asconf_ack CVE-2014-3687
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vack_1665, IfStmt target_1, ValueFieldAccess target_2, EqualityOperation target_3) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("sctp_chunk_pending")
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vack_1665
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getLeftOperand().(PointerFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vack_1665, IfStmt target_1) {
	target_1.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="serial"
	and target_1.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="addip_hdr"
	and target_1.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="subh"
	and target_1.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vack_1665
	and target_1.getCondition().(EqualityOperation).getRightOperand().(VariableAccess).getTarget().getType().hasName("__be32")
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("sctp_chunk_hold")
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vack_1665
	and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(VariableAccess).getTarget()=vack_1665
}

predicate func_2(Variable vack_1665, ValueFieldAccess target_2) {
	target_2.getTarget().getName()="next"
	and target_2.getQualifier().(PointerFieldAccess).getTarget().getName()="transmitted_list"
	and target_2.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vack_1665
}

predicate func_3(Variable vack_1665, EqualityOperation target_3) {
	target_3.getLeftOperand().(PointerFieldAccess).getTarget().getName()="serial"
	and target_3.getLeftOperand().(PointerFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="addip_hdr"
	and target_3.getLeftOperand().(PointerFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="subh"
	and target_3.getLeftOperand().(PointerFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vack_1665
	and target_3.getRightOperand().(VariableAccess).getTarget().getType().hasName("__be32")
}

from Function func, Variable vack_1665, IfStmt target_1, ValueFieldAccess target_2, EqualityOperation target_3
where
not func_0(vack_1665, target_1, target_2, target_3)
and func_1(vack_1665, target_1)
and func_2(vack_1665, target_2)
and func_3(vack_1665, target_3)
and vack_1665.getType().hasName("sctp_chunk *")
and vack_1665.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
