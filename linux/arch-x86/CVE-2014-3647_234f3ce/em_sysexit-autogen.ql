/**
 * @name linux-234f3ce485d54017f15cf5e0699cff4100121601-em_sysexit
 * @id cpp/linux/234f3ce485d54017f15cf5e0699cff4100121601/em-sysexit
 * @description linux-234f3ce485d54017f15cf5e0699cff4100121601-arch/x86/kvm/emulate.c-em_sysexit CVE-2014-3647
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_2(ExprStmt target_9, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("u64")
	and target_2.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_9.getLocation()))
}

predicate func_3(ExprStmt target_9, Function func) {
exists(ExprStmt target_3 |
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("u64")
	and target_3.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
	and target_3.getLocation().isBefore(target_9.getLocation()))
}

predicate func_4(Parameter vctxt_2322, VariableAccess target_10, FunctionCall target_11, ExprStmt target_12) {
exists(IfStmt target_4 |
	target_4.getCondition().(LogicalOrExpr).getLeftOperand().(FunctionCall).getTarget().hasName("is_noncanonical_address")
	and target_4.getCondition().(LogicalOrExpr).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("u64")
	and target_4.getCondition().(LogicalOrExpr).getRightOperand().(FunctionCall).getTarget().hasName("is_noncanonical_address")
	and target_4.getCondition().(LogicalOrExpr).getRightOperand().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("u64")
	and target_4.getThen().(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("emulate_gp")
	and target_4.getThen().(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vctxt_2322
	and target_4.getThen().(ReturnStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_4.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_10
	and target_11.getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getThen().(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_4.getThen().(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_12.getExpr().(VariableCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_7(Parameter vctxt_2322, FunctionCall target_7) {
	target_7.getTarget().hasName("reg_read")
	and target_7.getArgument(0).(VariableAccess).getTarget()=vctxt_2322
	and target_7.getParent().(AssignExpr).getRValue() = target_7
	and target_7.getParent().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="_eip"
	and target_7.getParent().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vctxt_2322
}

predicate func_8(Parameter vctxt_2322, FunctionCall target_8) {
	target_8.getTarget().hasName("reg_read")
	and target_8.getArgument(0).(VariableAccess).getTarget()=vctxt_2322
	and target_8.getParent().(AssignExpr).getRValue() = target_8
	and target_8.getParent().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(FunctionCall).getTarget().hasName("reg_write")
	and target_8.getParent().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vctxt_2322
}

predicate func_9(Function func, ExprStmt target_9) {
	target_9.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="dpl"
	and target_9.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
	and target_9.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
	and target_9.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("desc_struct")
	and target_9.getExpr().(AssignExpr).getRValue().(Literal).getValue()="3"
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Variable vusermode_2327, VariableAccess target_10) {
	target_10.getTarget()=vusermode_2327
}

predicate func_11(Parameter vctxt_2322, FunctionCall target_11) {
	target_11.getTarget().hasName("emulate_gp")
	and target_11.getArgument(0).(VariableAccess).getTarget()=vctxt_2322
	and target_11.getArgument(1).(Literal).getValue()="0"
}

predicate func_12(Parameter vctxt_2322, ExprStmt target_12) {
	target_12.getExpr().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="set_segment"
	and target_12.getExpr().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("const x86_emulate_ops *")
	and target_12.getExpr().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vctxt_2322
	and target_12.getExpr().(VariableCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("u16")
	and target_12.getExpr().(VariableCall).getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("desc_struct")
	and target_12.getExpr().(VariableCall).getArgument(3).(Literal).getValue()="0"
}

from Function func, Parameter vctxt_2322, Variable vusermode_2327, FunctionCall target_7, FunctionCall target_8, ExprStmt target_9, VariableAccess target_10, FunctionCall target_11, ExprStmt target_12
where
not func_2(target_9, func)
and not func_3(target_9, func)
and not func_4(vctxt_2322, target_10, target_11, target_12)
and func_7(vctxt_2322, target_7)
and func_8(vctxt_2322, target_8)
and func_9(func, target_9)
and func_10(vusermode_2327, target_10)
and func_11(vctxt_2322, target_11)
and func_12(vctxt_2322, target_12)
and vctxt_2322.getType().hasName("x86_emulate_ctxt *")
and vusermode_2327.getType().hasName("int")
and vctxt_2322.getFunction() = func
and vusermode_2327.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
