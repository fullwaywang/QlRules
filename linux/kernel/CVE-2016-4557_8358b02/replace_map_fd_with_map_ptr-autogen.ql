/**
 * @name linux-8358b02bf67d3a5d8a825070e1aa73f25fb2e4c7-replace_map_fd_with_map_ptr
 * @id cpp/linux/8358b02bf67d3a5d8a825070e1aa73f25fb2e4c7/replace-map-fd-with-map-ptr
 * @description linux-8358b02bf67d3a5d8a825070e1aa73f25fb2e4c7-kernel/bpf/verifier.c-replace_map_fd_with_map_ptr CVE-2016-4557
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vf_2010, FunctionCall target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_0) {
		target_0.getExpr().(FunctionCall).getTarget().hasName("fdput")
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vf_2010
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
}

predicate func_1(Function func, FunctionCall target_1) {
		target_1.getTarget().hasName("IS_ERR")
		and target_1.getArgument(0).(VariableAccess).getTarget().getType().hasName("bpf_map *")
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vf_2010, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("bpf_map *")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("__bpf_map_get")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vf_2010
}

predicate func_3(Variable vf_2010, EqualityOperation target_4, ExprStmt target_3) {
		target_3.getExpr().(FunctionCall).getTarget().hasName("fdput")
		and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vf_2010
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_4(Function func, EqualityOperation target_4) {
		target_4.getAnOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="used_maps"
		and target_4.getAnOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("verifier_env *")
		and target_4.getAnOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
		and target_4.getAnOperand().(VariableAccess).getTarget().getType().hasName("bpf_map *")
		and target_4.getEnclosingFunction() = func
}

from Function func, Variable vf_2010, ExprStmt target_0, FunctionCall target_1, ExprStmt target_2, ExprStmt target_3, EqualityOperation target_4
where
func_0(vf_2010, target_1, target_2, target_3, target_0)
and func_1(func, target_1)
and func_2(vf_2010, target_2)
and func_3(vf_2010, target_4, target_3)
and func_4(func, target_4)
and vf_2010.getType().hasName("fd")
and vf_2010.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
