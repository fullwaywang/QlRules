/**
 * @name linux-581b2027af0018944ba301d68e7af45c6d1128b5-afs_extend_writeback
 * @id cpp/linux/581b2027af0018944ba301d68e7af45c6d1128b5/afs-extend-writeback
 * @description linux-581b2027af0018944ba301d68e7af45c6d1128b5-fs/afs/write.c-afs_extend_writeback CVE-2021-47365
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vpage_440, FunctionCall target_0) {
	target_0.getTarget().hasName("unlock_page")
	and not target_0.getTarget().hasName("put_page")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vpage_440
}

predicate func_1(Variable vpage_440, FunctionCall target_1) {
	target_1.getTarget().hasName("unlock_page")
	and not target_1.getTarget().hasName("put_page")
	and target_1.getArgument(0).(VariableAccess).getTarget()=vpage_440
}

predicate func_2(Variable vpage_440, LogicalOrExpr target_10, ExprStmt target_11) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("put_page")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_440
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_2
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_11.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Variable vpage_440, LogicalAndExpr target_12, ExprStmt target_13) {
exists(ExprStmt target_3 |
	target_3.getExpr().(FunctionCall).getTarget().hasName("put_page")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_440
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_3
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_13.getExpr().(AssignAddExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_4(Variable vpage_440, LogicalOrExpr target_10) {
exists(ExprStmt target_4 |
	target_4.getExpr().(FunctionCall).getTarget().hasName("put_page")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_440
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_4
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10)
}

predicate func_5(Variable vpage_440, LogicalAndExpr target_12, ExprStmt target_14) {
exists(ExprStmt target_5 |
	target_5.getExpr().(FunctionCall).getTarget().hasName("put_page")
	and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_440
	and target_5.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_5
	and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12
	and target_14.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_6(LogicalOrExpr target_10, Function func, ExprStmt target_6) {
	target_6.getExpr() instanceof FunctionCall
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10
	and target_6.getEnclosingFunction() = func
}

predicate func_7(LogicalAndExpr target_12, Function func, ExprStmt target_7) {
	target_7.getExpr() instanceof FunctionCall
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12
	and target_7.getEnclosingFunction() = func
}

predicate func_8(FunctionCall target_15, Function func, BreakStmt target_8) {
	target_8.getParent().(IfStmt).getCondition()=target_15
	and target_8.getEnclosingFunction() = func
}

predicate func_9(NotExpr target_16, Function func, BreakStmt target_9) {
	target_9.getParent().(IfStmt).getCondition()=target_16
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Variable vpage_440, LogicalOrExpr target_10) {
	target_10.getLeftOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("PageDirty")
	and target_10.getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_440
	and target_10.getRightOperand().(FunctionCall).getTarget().hasName("PageWriteback")
	and target_10.getRightOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_440
}

predicate func_11(Variable vpage_440, ExprStmt target_11) {
	target_11.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_11.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("thp_size")
	and target_11.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_440
}

predicate func_12(Function func, LogicalAndExpr target_12) {
	target_12.getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_12.getLeftOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_12.getRightOperand().(NotExpr).getOperand().(VariableAccess).getTarget().getType().hasName("bool")
	and target_12.getEnclosingFunction() = func
}

predicate func_13(Variable vpage_440, ExprStmt target_13) {
	target_13.getExpr().(AssignAddExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned long")
	and target_13.getExpr().(AssignAddExpr).getRValue().(FunctionCall).getTarget().hasName("thp_nr_pages")
	and target_13.getExpr().(AssignAddExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_440
}

predicate func_14(Variable vpage_440, ExprStmt target_14) {
	target_14.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_14.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("afs_page_dirty_to")
	and target_14.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_440
	and target_14.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned long")
}

predicate func_15(Variable vpage_440, FunctionCall target_15) {
	target_15.getTarget().hasName("__builtin_expect")
	and target_15.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vpage_440
	and target_15.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(EqualityOperation).getRightOperand().(FunctionCall).getTarget().hasName("xas_reload")
	and target_15.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(EqualityOperation).getRightOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("xa_state")
	and target_15.getArgument(1).(Literal).getValue()="0"
}

predicate func_16(Variable vpage_440, NotExpr target_16) {
	target_16.getOperand().(FunctionCall).getTarget().hasName("trylock_page")
	and target_16.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpage_440
}

from Function func, Variable vpage_440, FunctionCall target_0, FunctionCall target_1, ExprStmt target_6, ExprStmt target_7, BreakStmt target_8, BreakStmt target_9, LogicalOrExpr target_10, ExprStmt target_11, LogicalAndExpr target_12, ExprStmt target_13, ExprStmt target_14, FunctionCall target_15, NotExpr target_16
where
func_0(vpage_440, target_0)
and func_1(vpage_440, target_1)
and not func_2(vpage_440, target_10, target_11)
and not func_3(vpage_440, target_12, target_13)
and not func_4(vpage_440, target_10)
and not func_5(vpage_440, target_12, target_14)
and func_6(target_10, func, target_6)
and func_7(target_12, func, target_7)
and func_8(target_15, func, target_8)
and func_9(target_16, func, target_9)
and func_10(vpage_440, target_10)
and func_11(vpage_440, target_11)
and func_12(func, target_12)
and func_13(vpage_440, target_13)
and func_14(vpage_440, target_14)
and func_15(vpage_440, target_15)
and func_16(vpage_440, target_16)
and vpage_440.getType().hasName("page *")
and vpage_440.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
