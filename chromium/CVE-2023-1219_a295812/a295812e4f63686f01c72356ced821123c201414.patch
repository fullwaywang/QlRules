commit a295812e4f63686f01c72356ced821123c201414	a295812e4f63686f01c72356ced821123c201414
Author: Joe Mason <joenotcharles@google.com>
Date:   Tue Feb 21 14:04:15 2023 +0000

    Remove browser_watcher (1/3): Move ExitCodeWatcher to chrome/app
    
    It's unrelated to the rest of the mechanisms in components/browser_watcher. The rest of components/browser_watcher will be deleted in followups.
    
    Also cleans up ExitCodeWatcher a bit:
    
    * Add missing IWYU headers
    * Remove LOG strings that are only useful in development
    
    Bug: 1415328
    Change-Id: Ib115cec2334a71451ebb97882c5300ef9a6e34b7
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4261434
    Commit-Queue: Joe Mason <joenotcharles@google.com>
    Commit-Queue: Sylvain Defresne <sdefresne@chromium.org>
    Reviewed-by: Sylvain Defresne <sdefresne@chromium.org>
    Auto-Submit: Joe Mason <joenotcharles@google.com>
    Reviewed-by: Greg Thompson <grt@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1107713}

diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index a5fca773c0eea..4ac9476eb63ab 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -196,6 +196,7 @@ if (!is_android && !is_mac) {
         "//base",
         "//build:branding_buildflags",
         "//chrome/app:chrome_exe_main_exports",
+        "//chrome/app:exit_code_watcher",
         "//chrome/app/version_assembly:chrome_exe_manifest",
         "//chrome/browser:active_use_util",
         "//chrome/browser:chrome_process_finder",
diff --git a/chrome/app/BUILD.gn b/chrome/app/BUILD.gn
index 2b3ce76e61bd9..a3ba2a1248232 100644
--- a/chrome/app/BUILD.gn
+++ b/chrome/app/BUILD.gn
@@ -59,11 +59,25 @@ if (is_win) {
   source_set("chrome_exe_main_exports") {
     sources = [ "chrome_exe_main_win.h" ]
   }
-  source_set("crash_reporter_client_win_unit_tests") {
+
+  source_set("exit_code_watcher") {
+    sources = [
+      "exit_code_watcher_win.cc",
+      "exit_code_watcher_win.h",
+    ]
+    public_deps = [ "//base:base" ]
+  }
+
+  source_set("win_unit_tests") {
     testonly = true
-    sources = [ "chrome_crash_reporter_client_win_unittest.cc" ]
+    sources = [
+      "chrome_crash_reporter_client_win_unittest.cc",
+      "exit_code_watcher_win_unittest.cc",
+    ]
     deps = [
+      ":exit_code_watcher",
       "//base:base",
+      "//base/test:test_support",
       "//chrome/chrome_elf:crash",
       "//testing/gtest:gtest",
     ]
diff --git a/chrome/app/chrome_exe_main_win.cc b/chrome/app/chrome_exe_main_win.cc
index 72659899da4b2..2323e25300418 100644
--- a/chrome/app/chrome_exe_main_win.cc
+++ b/chrome/app/chrome_exe_main_win.cc
@@ -38,6 +38,7 @@
 #include "base/win/windows_version.h"
 #include "build/build_config.h"
 #include "chrome/app/delay_load_failure_hook_win.h"
+#include "chrome/app/exit_code_watcher_win.h"
 #include "chrome/app/main_dll_loader_win.h"
 #include "chrome/app/packed_resources_integrity.h"
 #include "chrome/browser/policy/policy_path_parser.h"
@@ -48,7 +49,6 @@
 #include "chrome/install_static/initialize_from_primary_module.h"
 #include "chrome/install_static/install_util.h"
 #include "chrome/install_static/user_data_dir.h"
-#include "components/browser_watcher/exit_code_watcher_win.h"
 #include "components/crash/core/app/crash_switches.h"
 #include "components/crash/core/app/crashpad.h"
 #include "components/crash/core/app/fallback_crash_handling_win.h"
@@ -326,7 +326,7 @@ int main() {
 
   if (process_type == crash_reporter::switches::kCrashpadHandler) {
     // Check if we should monitor the exit code of this process
-    std::unique_ptr<browser_watcher::ExitCodeWatcher> exit_code_watcher;
+    std::unique_ptr<ExitCodeWatcher> exit_code_watcher;
 
     crash_reporter::SetupFallbackCrashHandling(*command_line);
     // no-periodic-tasks is specified for self monitoring crashpad instances.
@@ -344,8 +344,7 @@ int main() {
                 ::GetCurrentProcess(), &duplicate_handle,
                 PROCESS_QUERY_INFORMATION, FALSE, DUPLICATE_SAME_ACCESS)) {
           base::Process parent_process(duplicate_handle);
-          exit_code_watcher =
-              std::make_unique<browser_watcher::ExitCodeWatcher>();
+          exit_code_watcher = std::make_unique<ExitCodeWatcher>();
           if (exit_code_watcher->Initialize(std::move(parent_process))) {
             exit_code_watcher->StartWatching();
           }
diff --git a/components/browser_watcher/exit_code_watcher_win.cc b/chrome/app/exit_code_watcher_win.cc
similarity index 77%
rename from components/browser_watcher/exit_code_watcher_win.cc
rename to chrome/app/exit_code_watcher_win.cc
index e707566feb52c..23e03d56d3222 100644
--- a/components/browser_watcher/exit_code_watcher_win.cc
+++ b/chrome/app/exit_code_watcher_win.cc
@@ -2,23 +2,27 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "components/browser_watcher/exit_code_watcher_win.h"
+#include "chrome/app/exit_code_watcher_win.h"
 
 #include <windows.h>
 
 #include <utility>
 
-#include "base/logging.h"
+#include "base/check.h"
+#include "base/functional/bind.h"
+#include "base/message_loop/message_pump_type.h"
+#include "base/metrics/histogram_base.h"
 #include "base/metrics/sparse_histogram.h"
-#include "base/process/kill.h"
 #include "base/process/process.h"
 #include "base/process/process_handle.h"
 #include "base/task/sequenced_task_runner.h"
 #include "base/threading/thread.h"
+#include "base/win/scoped_handle.h"
 
-namespace browser_watcher {
 namespace {
+
 constexpr char kBrowserExitCodeHistogramName[] = "Stability.BrowserExitCodes";
+
 bool WriteProcessExitCode(int exit_code) {
   if (exit_code != STILL_ACTIVE) {
     // Record the exit codes in a sparse stability histogram, as the range of
@@ -32,26 +36,25 @@ bool WriteProcessExitCode(int exit_code) {
   }
   return false;
 }
+
 }  // namespace
 
 ExitCodeWatcher::ExitCodeWatcher()
     : background_thread_("ExitCodeWatcherThread"),
       exit_code_(STILL_ACTIVE),
-      stop_watching_handle_(CreateEvent(nullptr, TRUE, FALSE, nullptr)) {
+      stop_watching_handle_(::CreateEvent(nullptr, TRUE, FALSE, nullptr)) {
   DCHECK(stop_watching_handle_.IsValid());
 }
 
-ExitCodeWatcher::~ExitCodeWatcher() {}
+ExitCodeWatcher::~ExitCodeWatcher() = default;
 
 bool ExitCodeWatcher::Initialize(base::Process process) {
   if (!process.IsValid()) {
-    LOG(ERROR) << "Invalid parent handle, can't get parent process ID.";
     return false;
   }
 
   DWORD process_pid = process.Pid();
   if (process_pid == 0) {
-    LOG(ERROR) << "Invalid parent handle, can't get parent process ID.";
     return false;
   }
 
@@ -59,13 +62,11 @@ bool ExitCodeWatcher::Initialize(base::Process process) {
   FILETIME dummy = {};
   if (!::GetProcessTimes(process.Handle(), &creation_time, &dummy, &dummy,
                          &dummy)) {
-    PLOG(ERROR) << "Invalid parent handle, can't get parent process times.";
     return false;
   }
 
   // Success, take ownership of the process.
   process_ = std::move(process);
-
   return true;
 }
 
@@ -75,6 +76,7 @@ bool ExitCodeWatcher::StartWatching() {
     return false;
   }
 
+  // Unretained is safe because `this` owns the thread.
   if (!background_thread_.task_runner()->PostTask(
           FROM_HERE, base::BindOnce(&ExitCodeWatcher::WaitForExit,
                                     base::Unretained(this)))) {
@@ -87,7 +89,7 @@ bool ExitCodeWatcher::StartWatching() {
 
 void ExitCodeWatcher::StopWatching() {
   if (stop_watching_handle_.IsValid()) {
-    SetEvent(stop_watching_handle_.Get());
+    ::SetEvent(stop_watching_handle_.Get());
   }
 }
 
@@ -96,9 +98,5 @@ void ExitCodeWatcher::WaitForExit() {
       process_.WaitForExitOrEvent(stop_watching_handle_, &exit_code_);
   if (wait_result == base::Process::WaitExitStatus::PROCESS_EXITED) {
     WriteProcessExitCode(exit_code_);
-  } else if (wait_result == base::Process::WaitExitStatus::FAILED) {
-    LOG(ERROR) << "Failed to wait for process exit or stop event";
   }
 }
-
-}  // namespace browser_watcher
diff --git a/components/browser_watcher/exit_code_watcher_win.h b/chrome/app/exit_code_watcher_win.h
similarity index 84%
rename from components/browser_watcher/exit_code_watcher_win.h
rename to chrome/app/exit_code_watcher_win.h
index ed47f0820dd99..10ccec5d30e10 100644
--- a/components/browser_watcher/exit_code_watcher_win.h
+++ b/chrome/app/exit_code_watcher_win.h
@@ -1,15 +1,13 @@
 // Copyright 2014 The Chromium Authors
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
-#ifndef COMPONENTS_BROWSER_WATCHER_EXIT_CODE_WATCHER_WIN_H_
-#define COMPONENTS_BROWSER_WATCHER_EXIT_CODE_WATCHER_WIN_H_
+#ifndef CHROME_APP_EXIT_CODE_WATCHER_WIN_H_
+#define CHROME_APP_EXIT_CODE_WATCHER_WIN_H_
 
 #include "base/process/process.h"
 #include "base/threading/thread.h"
 #include "base/win/scoped_handle.h"
 
-namespace browser_watcher {
-
 // Watches for the exit code of a process and records
 class ExitCodeWatcher {
  public:
@@ -50,6 +48,4 @@ class ExitCodeWatcher {
   base::win::ScopedHandle stop_watching_handle_;
 };
 
-}  // namespace browser_watcher
-
-#endif  // COMPONENTS_BROWSER_WATCHER_EXIT_CODE_WATCHER_WIN_H_
+#endif  // CHROME_APP_EXIT_CODE_WATCHER_WIN_H_
diff --git a/components/browser_watcher/exit_code_watcher_win_unittest.cc b/chrome/app/exit_code_watcher_win_unittest.cc
similarity index 94%
rename from components/browser_watcher/exit_code_watcher_win_unittest.cc
rename to chrome/app/exit_code_watcher_win_unittest.cc
index 11f2f0b1a7f18..141e1c3cd6d11 100644
--- a/components/browser_watcher/exit_code_watcher_win_unittest.cc
+++ b/chrome/app/exit_code_watcher_win_unittest.cc
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#include "components/browser_watcher/exit_code_watcher_win.h"
+#include "chrome/app/exit_code_watcher_win.h"
 
 #include <stdint.h>
 
@@ -20,8 +20,6 @@
 #include "testing/gtest/include/gtest/gtest.h"
 #include "testing/multiprocess_func_list.h"
 
-namespace browser_watcher {
-
 namespace {
 
 MULTIPROCESS_TEST_MAIN(Sleeper) {
@@ -33,8 +31,7 @@ MULTIPROCESS_TEST_MAIN(Sleeper) {
 
 class ScopedSleeperProcess {
  public:
-   ScopedSleeperProcess() : is_killed_(false) {
-  }
+  ScopedSleeperProcess() : is_killed_(false) {}
 
   ~ScopedSleeperProcess() {
     if (process_.IsValid()) {
@@ -78,9 +75,7 @@ class ExitCodeWatcherTest : public testing::Test {
 
   ExitCodeWatcherTest() : cmd_line_(base::CommandLine::NO_PROGRAM) {}
 
-  void SetUp() override {
-    Super::SetUp();
-  }
+  void SetUp() override { Super::SetUp(); }
 
   base::Process OpenSelfWithAccess(uint32_t access) {
     return base::Process::OpenWithAccess(base::GetCurrentProcId(), access);
@@ -154,5 +149,3 @@ TEST_F(ExitCodeWatcherTest, ExitCodeWatcherStopWatching) {
   ASSERT_NO_FATAL_FAILURE(sleeper.Kill(kExitCode, true));
   base::PlatformThread::Sleep(TestTimeouts::tiny_timeout());
 }
-
-}  // namespace browser_watcher
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index 839e07a5df84c..41121f1a6f77d 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -6296,7 +6296,7 @@ test("unit_tests") {
       "//chrome:packed_resources_integrity",
       "//chrome//services/util_win:unit_tests",
       "//chrome/app:chrome_dll_resources",
-      "//chrome/app:crash_reporter_client_win_unit_tests",
+      "//chrome/app:win_unit_tests",
       "//chrome/browser:chrome_process_finder",
       "//chrome/browser/enterprise/platform_auth:test_utils",
       "//chrome/browser/safe_browsing/chrome_cleaner",
diff --git a/components/browser_watcher/BUILD.gn b/components/browser_watcher/BUILD.gn
index e22b601a1dd18..e4133fbe581a9 100644
--- a/components/browser_watcher/BUILD.gn
+++ b/components/browser_watcher/BUILD.gn
@@ -9,11 +9,7 @@ if (is_win) {
     sources = [ "activity_report.proto" ]
   }
 
-  static_library("browser_watcher_client") {
-    sources = [
-      "exit_code_watcher_win.cc",
-      "exit_code_watcher_win.h",
-    ]
+  group("browser_watcher_client") {
     deps = [
       ":activity_report_proto",
       ":stability_client",
@@ -89,7 +85,6 @@ if (is_win) {
     sources = [
       "activity_report_extractor_unittest.cc",
       "activity_tracker_annotation_unittest.cc",
-      "exit_code_watcher_win_unittest.cc",
       "extended_crash_reporting_win_unittest.cc",
     ]
     deps = [
