commit 0113d9c9d1ccc07f5a3710dac4aa24b6d711278c
Author: Kyle Zeng <zengyhkyle@gmail.com>
Date:   Thu Sep 14 22:12:57 2023 -0700

    ipv4: fix null-deref in ipv4_link_failure
    
    Currently, we assume the skb is associated with a device before calling
    __ip_options_compile, which is not always the case if it is re-routed by
    ipvs.
    When skb->dev is NULL, dev_net(skb->dev) will become null-dereference.
    This patch adds a check for the edge case and switch to use the net_device
    from the rtable when skb->dev is NULL.
    
    Fixes: ed0de45a1008 ("ipv4: recompile ip options in ipv4_link_failure")
    Suggested-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: Kyle Zeng <zengyhkyle@gmail.com>
    Cc: Stephen Suryaputra <ssuryaextr@gmail.com>
    Cc: Vadim Fedorenko <vfedorenko@novek.ru>
    Reviewed-by: David Ahern <dsahern@kernel.org>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/net/ipv4/route.c b/net/ipv4/route.c
index 66f419e7f9a7..a57062283219 100644
--- a/net/ipv4/route.c
+++ b/net/ipv4/route.c
@@ -1213,6 +1213,7 @@ EXPORT_INDIRECT_CALLABLE(ipv4_dst_check);
 
 static void ipv4_send_dest_unreach(struct sk_buff *skb)
 {
+	struct net_device *dev;
 	struct ip_options opt;
 	int res;
 
@@ -1230,7 +1231,8 @@ static void ipv4_send_dest_unreach(struct sk_buff *skb)
 		opt.optlen = ip_hdr(skb)->ihl * 4 - sizeof(struct iphdr);
 
 		rcu_read_lock();
-		res = __ip_options_compile(dev_net(skb->dev), &opt, skb, NULL);
+		dev = skb->dev ? skb->dev : skb_rtable(skb)->dst.dev;
+		res = __ip_options_compile(dev_net(dev), &opt, skb, NULL);
 		rcu_read_unlock();
 
 		if (res)
