commit 0763aad8eee441188871aec608a3e011827ce3ca	0763aad8eee441188871aec608a3e011827ce3ca
Author: Kevin McNee <mcnee@chromium.org>
Date:   Tue Oct 3 15:29:54 2023 +0000

    Override ShouldResumeRequestsForCreatedWindow for webviews and not all guests
    
    The guest view base class currently overrides
    ShouldResumeRequestsForCreatedWindow to support the webview newwindow
    event. This code path is not relevant to any other guest view type.
    For ExtensionOptions and MimeHandlerView, the code is not reachable
    due to the way new WebContents are created. For AppView, calling
    window.open from an embedded app technically does create a guest
    WebContents, but it's immediately destroyed due to AppViewGuest not
    implementing AddNewContents. Using the default value for
    ShouldResumeRequestsForCreatedWindow here does not seem to have
    an observable difference to the app.
    
    For clarity, we now just override the behaviour for webviews.
    
    Bug: 1487110
    Low-Coverage-Reason: OTHER Unreachable code cannot be covered.
    Change-Id: I03babe749731c012375d4ad31a122584f2a8bfef
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4906388
    Auto-Submit: Kevin McNee <mcnee@chromium.org>
    Commit-Queue: James Maclean <wjmaclean@chromium.org>
    Reviewed-by: James Maclean <wjmaclean@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1204672}

diff --git a/components/guest_view/browser/guest_view_base.cc b/components/guest_view/browser/guest_view_base.cc
index 18710bf4dc7b3..71ee56ea4dfeb 100644
--- a/components/guest_view/browser/guest_view_base.cc
+++ b/components/guest_view/browser/guest_view_base.cc
@@ -650,13 +650,6 @@ void GuestViewBase::UpdateTargetURL(WebContents* source, const GURL& url) {
       embedder_web_contents(), url);
 }
 
-bool GuestViewBase::ShouldResumeRequestsForCreatedWindow() {
-  // Delay so that the embedder page has a chance to call APIs such as
-  // webRequest in time to be applied to the initial navigation in the new guest
-  // contents. We resume during AttachToOuterWebContentsFrame.
-  return false;
-}
-
 void GuestViewBase::OnZoomControllerDestroyed(zoom::ZoomController* source) {
   DCHECK(zoom_controller_observations_.IsObservingSource(source));
   zoom_controller_observations_.RemoveObservation(source);
diff --git a/components/guest_view/browser/guest_view_base.h b/components/guest_view/browser/guest_view_base.h
index 590dca2a719af..de0a44b85e7d9 100644
--- a/components/guest_view/browser/guest_view_base.h
+++ b/components/guest_view/browser/guest_view_base.h
@@ -380,7 +380,6 @@ class GuestViewBase : public content::BrowserPluginGuestDelegate,
   void UpdatePreferredSize(content::WebContents* web_contents,
                            const gfx::Size& pref_size) final;
   void UpdateTargetURL(content::WebContents* source, const GURL& url) final;
-  bool ShouldResumeRequestsForCreatedWindow() final;
 
   // WebContentsObserver implementation.
   void DidStopLoading() final;
diff --git a/extensions/browser/guest_view/extension_options/extension_options_guest.cc b/extensions/browser/guest_view/extension_options/extension_options_guest.cc
index b6413e636b411..871d4bf48e326 100644
--- a/extensions/browser/guest_view/extension_options/extension_options_guest.cc
+++ b/extensions/browser/guest_view/extension_options/extension_options_guest.cc
@@ -203,6 +203,12 @@ bool ExtensionOptionsGuest::HandleContextMenu(
                                                               params);
 }
 
+bool ExtensionOptionsGuest::ShouldResumeRequestsForCreatedWindow() {
+  // Not reached due to the use of `CreateCustomWebContents`.
+  NOTREACHED();
+  return true;
+}
+
 bool ExtensionOptionsGuest::IsWebContentsCreationOverridden(
     content::SiteInstance* source_site_instance,
     content::mojom::WindowContainerType window_container_type,
diff --git a/extensions/browser/guest_view/extension_options/extension_options_guest.h b/extensions/browser/guest_view/extension_options/extension_options_guest.h
index 583da1abe9cb4..2578fa3fe9709 100644
--- a/extensions/browser/guest_view/extension_options/extension_options_guest.h
+++ b/extensions/browser/guest_view/extension_options/extension_options_guest.h
@@ -57,6 +57,7 @@ class ExtensionOptionsGuest
   void CloseContents(content::WebContents* source) final;
   bool HandleContextMenu(content::RenderFrameHost& render_frame_host,
                          const content::ContextMenuParams& params) final;
+  bool ShouldResumeRequestsForCreatedWindow() override;
   bool IsWebContentsCreationOverridden(
       content::SiteInstance* source_site_instance,
       content::mojom::WindowContainerType window_container_type,
diff --git a/extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.cc b/extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.cc
index 0fc4a40faf070..be727edcee87b 100644
--- a/extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.cc
+++ b/extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.cc
@@ -375,6 +375,12 @@ bool MimeHandlerViewGuest::IsFullscreenForTabOrPending(
   return is_guest_fullscreen_;
 }
 
+bool MimeHandlerViewGuest::ShouldResumeRequestsForCreatedWindow() {
+  // Not reached due to the use of `CreateCustomWebContents`.
+  NOTREACHED();
+  return true;
+}
+
 bool MimeHandlerViewGuest::IsWebContentsCreationOverridden(
     content::SiteInstance* source_site_instance,
     content::mojom::WindowContainerType window_container_type,
diff --git a/extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.h b/extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.h
index 2a2f0b6b44293..a5066da1a593c 100644
--- a/extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.h
+++ b/extensions/browser/guest_view/mime_handler_view/mime_handler_view_guest.h
@@ -169,6 +169,7 @@ class MimeHandlerViewGuest
   void ExitFullscreenModeForTab(content::WebContents*) override;
   bool IsFullscreenForTabOrPending(
       const content::WebContents* web_contents) override;
+  bool ShouldResumeRequestsForCreatedWindow() override;
   bool IsWebContentsCreationOverridden(
       content::SiteInstance* source_site_instance,
       content::mojom::WindowContainerType window_container_type,
diff --git a/extensions/browser/guest_view/web_view/web_view_guest.cc b/extensions/browser/guest_view/web_view/web_view_guest.cc
index d49f45bf54b45..26b3b633f3166 100644
--- a/extensions/browser/guest_view/web_view/web_view_guest.cc
+++ b/extensions/browser/guest_view/web_view/web_view_guest.cc
@@ -1367,6 +1367,13 @@ void WebViewGuest::SetAllowScaling(bool allow) {
   allow_scaling_ = allow;
 }
 
+bool WebViewGuest::ShouldResumeRequestsForCreatedWindow() {
+  // Delay so that the embedder page has a chance to call APIs such as
+  // webRequest in time to be applied to the initial navigation in the new guest
+  // contents. We resume during AttachToOuterWebContentsFrame.
+  return false;
+}
+
 void WebViewGuest::AddNewContents(
     WebContents* source,
     std::unique_ptr<WebContents> new_contents,
diff --git a/extensions/browser/guest_view/web_view/web_view_guest.h b/extensions/browser/guest_view/web_view/web_view_guest.h
index f9d111b14575d..7e6b4751eb3c4 100644
--- a/extensions/browser/guest_view/web_view/web_view_guest.h
+++ b/extensions/browser/guest_view/web_view/web_view_guest.h
@@ -224,6 +224,7 @@ class WebViewGuest : public guest_view::GuestView<WebViewGuest> {
                    base::OnceCallback<void(bool)> callback) final;
   content::JavaScriptDialogManager* GetJavaScriptDialogManager(
       content::WebContents* source) final;
+  bool ShouldResumeRequestsForCreatedWindow() override;
   void AddNewContents(content::WebContents* source,
                       std::unique_ptr<content::WebContents> new_contents,
                       const GURL& target_url,
