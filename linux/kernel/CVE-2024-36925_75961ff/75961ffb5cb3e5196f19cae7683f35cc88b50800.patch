commit 75961ffb5cb3e5196f19cae7683f35cc88b50800
Author: Will Deacon <will@kernel.org>
Date:   Thu May 2 10:37:23 2024 +0100

    swiotlb: initialise restricted pool list_head when SWIOTLB_DYNAMIC=y
    
    Using restricted DMA pools (CONFIG_DMA_RESTRICTED_POOL=y) in conjunction
    with dynamic SWIOTLB (CONFIG_SWIOTLB_DYNAMIC=y) leads to the following
    crash when initialising the restricted pools at boot-time:
    
      | Unable to handle kernel NULL pointer dereference at virtual address 0000000000000008
      | Internal error: Oops: 0000000096000005 [#1] PREEMPT SMP
      | pc : rmem_swiotlb_device_init+0xfc/0x1ec
      | lr : rmem_swiotlb_device_init+0xf0/0x1ec
      | Call trace:
      |  rmem_swiotlb_device_init+0xfc/0x1ec
      |  of_reserved_mem_device_init_by_idx+0x18c/0x238
      |  of_dma_configure_id+0x31c/0x33c
      |  platform_dma_configure+0x34/0x80
    
    faddr2line reveals that the crash is in the list validation code:
    
      include/linux/list.h:83
      include/linux/rculist.h:79
      include/linux/rculist.h:106
      kernel/dma/swiotlb.c:306
      kernel/dma/swiotlb.c:1695
    
    because add_mem_pool() is trying to list_add_rcu() to a NULL
    'mem->pools'.
    
    Fix the crash by initialising the 'mem->pools' list_head in
    rmem_swiotlb_device_init() before calling add_mem_pool().
    
    Reported-by: Nikita Ioffe <ioffe@google.com>
    Tested-by: Nikita Ioffe <ioffe@google.com>
    Fixes: 1aaa736815eb ("swiotlb: allocate a new memory pool when existing pools are full")
    Signed-off-by: Will Deacon <will@kernel.org>
    Signed-off-by: Christoph Hellwig <hch@lst.de>

diff --git a/kernel/dma/swiotlb.c b/kernel/dma/swiotlb.c
index a5e0dfc44d24..0de66f0ff43a 100644
--- a/kernel/dma/swiotlb.c
+++ b/kernel/dma/swiotlb.c
@@ -1798,6 +1798,7 @@ static int rmem_swiotlb_device_init(struct reserved_mem *rmem,
 		mem->for_alloc = true;
 #ifdef CONFIG_SWIOTLB_DYNAMIC
 		spin_lock_init(&mem->lock);
+		INIT_LIST_HEAD_RCU(&mem->pools);
 #endif
 		add_mem_pool(mem, pool);
 
