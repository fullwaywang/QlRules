/**
 * @name linux-92f28d973cce45ef5823209aab3138eb45d8b349-scm_check_creds
 * @id cpp/linux/92f28d973cce45ef5823209aab3138eb45d8b349/scm-check-creds
 * @description linux-92f28d973cce45ef5823209aab3138eb45d8b349-net/core/scm.c-scm_check_creds CVE-2013-1958
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("nsown_capable")
	and not target_0.getTarget().hasName("ns_capable")
	and target_0.getArgument(0).(Literal).getValue()="21"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func) {
exists(PointerFieldAccess target_1 |
	target_1.getTarget().getName()="user_ns"
	and target_1.getQualifier().(PointerFieldAccess).getTarget().getName()="pid_ns"
	and target_1.getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="nsproxy"
	and target_1.getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("get_current")
	and target_1.getEnclosingFunction() = func)
}

from Function func, FunctionCall target_0
where
func_0(func, target_0)
and not func_1(func)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
