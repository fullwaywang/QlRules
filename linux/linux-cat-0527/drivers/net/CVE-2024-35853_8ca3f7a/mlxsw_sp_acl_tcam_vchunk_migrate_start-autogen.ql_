/**
 * @name linux-8ca3f7a7b61393804c46f170743c3b839df13977-mlxsw_sp_acl_tcam_vchunk_migrate_start
 * @id cpp/linux/8ca3f7a7b61393804c46f170743c3b839df13977/mlxsw-sp-acl-tcam-vchunk-migrate-start
 * @description linux-8ca3f7a7b61393804c46f170743c3b839df13977-drivers/net/ethernet/mellanox/mlxsw/spectrum_acl_tcam.c-mlxsw_sp_acl_tcam_vchunk_migrate_start CVE-2024-35853
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_1, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getArgument(1) instanceof Literal
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(DoStmt).getCondition() instanceof Literal
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_0.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(1) instanceof Literal
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("mlxsw_sp_acl_tcam_chunk *")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("mlxsw_sp_acl_tcam_chunk_create")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("mlxsw_sp *")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("mlxsw_sp_acl_tcam_vchunk *")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("mlxsw_sp_acl_tcam_region *")
	and target_1.getEnclosingFunction() = func
}

from Function func, ExprStmt target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
