/**
 * @name openssl-b1d6d55ece1c26fa2829e2b819b038d7b6d692b4-ec_scalar_mul_ladder
 * @id cpp/openssl/b1d6d55ece1c26fa2829e2b819b038d7b6d692b4/ec-scalar-mul-ladder
 * @description openssl-b1d6d55ece1c26fa2829e2b819b038d7b6d692b4-crypto/ec/ec_mult.c-ec_scalar_mul_ladder CVE-2018-0735
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
		target_0.getValue()="1"
		and not target_0.getValue()="2"
        and target_0.getParent().(AddExpr).getParent().(FunctionCall).getTarget().getName()="bn_wexpand"
		and target_0.getParent().(AddExpr).getParent().(FunctionCall).getArgument(1).(AddExpr).getAnOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, Literal target_1) {
		target_1.getValue()="1"
		and not target_1.getValue()="2"
        and target_1.getParent().(AddExpr).getParent().(FunctionCall).getTarget().getName()="bn_wexpand"
		and target_1.getParent().(AddExpr).getParent().(FunctionCall).getArgument(1).(AddExpr).getAnOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, Literal target_2) {
		target_2.getValue()="1"
		and not target_2.getValue()="2"
        and target_2.getParent().(AddExpr).getParent().(FunctionCall).getTarget().getName()="BN_consttime_swap"
		and target_2.getParent().(AddExpr).getParent().(FunctionCall).getArgument(3).(AddExpr).getAnOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getEnclosingFunction() = func
}

from Function func, Literal target_0, Literal target_1, Literal target_2
where
func_0(func, target_0)
and func_1(func, target_1)
and func_2(func, target_2)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
