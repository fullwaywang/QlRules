/**
 * @name linux-a4866aa812518ed1a37d8ea0c881dc946409de94-write_mem
 * @id cpp/linux/a4866aa812518ed1a37d8ea0c881dc946409de94/write-mem
 * @description linux-a4866aa812518ed1a37d8ea0c881dc946409de94-drivers/char/mem.c-write_mem CVE-2017-7889
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vp_158, Variable vsz_159, ReturnStmt target_9, FunctionCall target_0) {
		target_0.getTarget().hasName("range_is_allowed")
		and not target_0.getTarget().hasName("page_is_allowed")
		and target_0.getArgument(0).(BinaryBitwiseOperation).getLeftOperand().(VariableAccess).getTarget()=vp_158
		and target_0.getArgument(0).(BinaryBitwiseOperation).getRightOperand().(Literal).getValue()="12"
		and target_0.getArgument(1).(VariableAccess).getTarget()=vsz_159
		and target_0.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_9
}

predicate func_1(Variable vp_158, ExprStmt target_10, ExprStmt target_4) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("page_is_allowed")
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(BinaryBitwiseOperation).getLeftOperand().(VariableAccess).getTarget()=vp_158
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(BinaryBitwiseOperation).getRightOperand().(Literal).getValue()="12"
		and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(BinaryBitwiseOperation).getLeftOperand().(VariableAccess).getLocation())
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(BinaryBitwiseOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Function func) {
	exists(IfStmt target_3 |
		target_3.getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getType().hasName("int")
		and target_3.getCondition().(EqualityOperation).getAnOperand().(Literal).getValue()="1"
		and target_3.getThen().(BlockStmt).getStmt(0) instanceof ExprStmt
		and target_3.getThen().(BlockStmt).getStmt(1) instanceof IfStmt
		and target_3.getThen().(BlockStmt).getStmt(2) instanceof ExprStmt
		and target_3.getThen().(BlockStmt).getStmt(3) instanceof ExprStmt
		and target_3.getThen().(BlockStmt).getStmt(4) instanceof IfStmt
		and target_3.getEnclosingFunction() = func)
}

predicate func_4(Variable vp_158, Variable vptr_161, ExprStmt target_4) {
		target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vptr_161
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("xlate_dev_mem_ptr")
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vp_158
}

predicate func_5(Variable vwritten_159, Variable vptr_161, IfStmt target_5) {
		target_5.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vptr_161
		and target_5.getThen().(BlockStmt).getStmt(0).(IfStmt).getCondition().(VariableAccess).getTarget()=vwritten_159
		and target_5.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-14"
}

predicate func_6(Variable vsz_159, Variable vcopied_160, Variable vptr_161, Parameter vbuf_155, ExprStmt target_6) {
		target_6.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vcopied_160
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("copy_from_user")
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vptr_161
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vbuf_155
		and target_6.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vsz_159
}

predicate func_7(Variable vp_158, Variable vptr_161, ExprStmt target_7) {
		target_7.getExpr().(FunctionCall).getTarget().hasName("unxlate_dev_mem_ptr")
		and target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vp_158
		and target_7.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vptr_161
}

predicate func_8(Variable vwritten_159, Variable vsz_159, Variable vcopied_160, IfStmt target_8) {
		target_8.getCondition().(VariableAccess).getTarget()=vcopied_160
		and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignAddExpr).getLValue().(VariableAccess).getTarget()=vwritten_159
		and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignAddExpr).getRValue().(SubExpr).getLeftOperand().(VariableAccess).getTarget()=vsz_159
		and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignAddExpr).getRValue().(SubExpr).getRightOperand().(VariableAccess).getTarget()=vcopied_160
		and target_8.getThen().(BlockStmt).getStmt(1).(IfStmt).getCondition().(VariableAccess).getTarget()=vwritten_159
		and target_8.getThen().(BlockStmt).getStmt(2).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-14"
}

predicate func_9(Function func, ReturnStmt target_9) {
		target_9.getExpr().(UnaryMinusExpr).getValue()="-1"
		and target_9.getEnclosingFunction() = func
}

predicate func_10(Variable vp_158, Variable vsz_159, ExprStmt target_10) {
		target_10.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsz_159
		and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("size_inside_page")
		and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vp_158
		and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("size_t")
}

from Function func, Variable vp_158, Variable vwritten_159, Variable vsz_159, Variable vcopied_160, Variable vptr_161, Parameter vbuf_155, FunctionCall target_0, ExprStmt target_4, IfStmt target_5, ExprStmt target_6, ExprStmt target_7, IfStmt target_8, ReturnStmt target_9, ExprStmt target_10
where
func_0(vp_158, vsz_159, target_9, target_0)
and not func_1(vp_158, target_10, target_4)
and not func_3(func)
and func_4(vp_158, vptr_161, target_4)
and func_5(vwritten_159, vptr_161, target_5)
and func_6(vsz_159, vcopied_160, vptr_161, vbuf_155, target_6)
and func_7(vp_158, vptr_161, target_7)
and func_8(vwritten_159, vsz_159, vcopied_160, target_8)
and func_9(func, target_9)
and func_10(vp_158, vsz_159, target_10)
and vp_158.getType().hasName("phys_addr_t")
and vwritten_159.getType().hasName("ssize_t")
and vsz_159.getType().hasName("ssize_t")
and vcopied_160.getType().hasName("unsigned long")
and vptr_161.getType().hasName("void *")
and vbuf_155.getType().hasName("const char *")
and vp_158.(LocalVariable).getFunction() = func
and vwritten_159.(LocalVariable).getFunction() = func
and vsz_159.(LocalVariable).getFunction() = func
and vcopied_160.(LocalVariable).getFunction() = func
and vptr_161.(LocalVariable).getFunction() = func
and vbuf_155.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
