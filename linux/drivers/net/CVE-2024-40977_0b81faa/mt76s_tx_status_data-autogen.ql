/**
 * @name linux-0b81faa05b0b9feb3ae2d69be1d21f0d126ecb08-mt76s_tx_status_data
 * @id cpp/linux/0b81faa05b0b9feb3ae2d69be1d21f0d126ecb08/mt76s-tx-status-data
 * @description linux-0b81faa05b0b9feb3ae2d69be1d21f0d126ecb08-drivers/net/wireless/mediatek/mt76/sdio.c-mt76s_tx_status_data CVE-2024-40977
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdev_494, EqualityOperation target_2) {
exists(LogicalOrExpr target_0 |
	exists(ConditionalExpr obj_0 | obj_0=target_0.getLeftOperand() |
		exists(LogicalAndExpr obj_1 | obj_1=obj_0.getCondition() |
			exists(LogicalAndExpr obj_2 | obj_2=obj_1.getLeftOperand() |
				exists(LogicalAndExpr obj_3 | obj_3=obj_2.getLeftOperand() |
					obj_3.getLeftOperand().(Literal).getValue()="1"
					and obj_3.getRightOperand().(FunctionCall).getTarget().hasName("__builtin_constant_p")
				)
				and exists(EqualityOperation obj_4 | obj_4=obj_2.getRightOperand() |
					obj_4.getLeftOperand().(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="state"
					and obj_4.getRightOperand().(Literal).getValue()="0"
				)
			)
			and exists(FunctionCall obj_5 | obj_5=obj_1.getRightOperand() |
				obj_5.getTarget().hasName("__builtin_constant_p")
				and obj_5.getArgument(0).(PointerDereferenceExpr).getOperand().(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="state"
			)
		)
		and exists(FunctionCall obj_6 | obj_6=obj_0.getThen() |
			exists(AddressOfExpr obj_7 | obj_7=obj_6.getArgument(1) |
				exists(ValueFieldAccess obj_8 | obj_8=obj_7.getOperand() |
					exists(PointerFieldAccess obj_9 | obj_9=obj_8.getQualifier() |
						obj_9.getTarget().getName()="phy"
						and obj_9.getQualifier().(VariableAccess).getTarget()=vdev_494
					)
					and obj_8.getTarget().getName()="state"
				)
			)
			and obj_6.getTarget().hasName("const_test_bit")
		)
		and exists(FunctionCall obj_10 | obj_10=obj_0.getElse() |
			exists(AddressOfExpr obj_11 | obj_11=obj_10.getArgument(1) |
				exists(ValueFieldAccess obj_12 | obj_12=obj_11.getOperand() |
					exists(PointerFieldAccess obj_13 | obj_13=obj_12.getQualifier() |
						obj_13.getTarget().getName()="phy"
						and obj_13.getQualifier().(VariableAccess).getTarget()=vdev_494
					)
					and obj_12.getTarget().getName()="state"
				)
			)
			and obj_10.getTarget().hasName("_test_bit")
		)
	)
	and target_0.getRightOperand() instanceof ConditionalExpr
	and target_0.getParent().(IfStmt).getThen() instanceof BreakStmt
	and target_0.getLeftOperand().(ConditionalExpr).getThen().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getLeftOperand().(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vdev_494, ConditionalExpr target_1) {
	exists(LogicalAndExpr obj_0 | obj_0=target_1.getCondition() |
		exists(LogicalAndExpr obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(LogicalAndExpr obj_2 | obj_2=obj_1.getLeftOperand() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getRightOperand() |
					obj_3.getTarget().hasName("__builtin_constant_p")
					and obj_3.getArgument(0).(EqualityOperation).getRightOperand().(Literal).getValue()="0"
				)
				and obj_2.getLeftOperand().(Literal).getValue()="1"
			)
			and exists(EqualityOperation obj_4 | obj_4=obj_1.getRightOperand() |
				exists(AddressOfExpr obj_5 | obj_5=obj_4.getLeftOperand() |
					exists(ValueFieldAccess obj_6 | obj_6=obj_5.getOperand() |
						obj_6.getTarget().getName()="state"
						and obj_6.getQualifier().(PointerFieldAccess).getTarget().getName()="phy"
					)
				)
				and obj_4.getRightOperand().(Literal).getValue()="0"
			)
		)
		and exists(FunctionCall obj_7 | obj_7=obj_0.getRightOperand() |
			exists(PointerDereferenceExpr obj_8 | obj_8=obj_7.getArgument(0) |
				exists(AddressOfExpr obj_9 | obj_9=obj_8.getOperand() |
					exists(ValueFieldAccess obj_10 | obj_10=obj_9.getOperand() |
						obj_10.getTarget().getName()="state"
						and obj_10.getQualifier().(PointerFieldAccess).getTarget().getName()="phy"
					)
				)
			)
			and obj_7.getTarget().hasName("__builtin_constant_p")
		)
	)
	and exists(FunctionCall obj_11 | obj_11=target_1.getThen() |
		exists(AddressOfExpr obj_12 | obj_12=obj_11.getArgument(1) |
			exists(ValueFieldAccess obj_13 | obj_13=obj_12.getOperand() |
				exists(PointerFieldAccess obj_14 | obj_14=obj_13.getQualifier() |
					obj_14.getTarget().getName()="phy"
					and obj_14.getQualifier().(VariableAccess).getTarget()=vdev_494
				)
				and obj_13.getTarget().getName()="state"
			)
		)
		and obj_11.getTarget().hasName("const_test_bit")
	)
	and exists(FunctionCall obj_15 | obj_15=target_1.getElse() |
		exists(AddressOfExpr obj_16 | obj_16=obj_15.getArgument(1) |
			exists(ValueFieldAccess obj_17 | obj_17=obj_16.getOperand() |
				exists(PointerFieldAccess obj_18 | obj_18=obj_17.getQualifier() |
					obj_18.getTarget().getName()="phy"
					and obj_18.getQualifier().(VariableAccess).getTarget()=vdev_494
				)
				and obj_17.getTarget().getName()="state"
			)
		)
		and obj_15.getTarget().hasName("_test_bit")
	)
	and target_1.getParent().(IfStmt).getThen() instanceof BreakStmt
}

predicate func_2(Variable vdev_494, EqualityOperation target_2) {
	exists(AddressOfExpr obj_0 | obj_0=target_2.getLeftOperand() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="phy"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vdev_494
			)
			and obj_1.getTarget().getName()="state"
		)
	)
	and target_2.getRightOperand().(Literal).getValue()="0"
	and target_2.getParent().(FunctionCall).getParent().(LogicalAndExpr).getRightOperand().(FunctionCall).getTarget().hasName("__builtin_constant_p")
}

from Function func, Variable vdev_494, ConditionalExpr target_1, EqualityOperation target_2
where
not func_0(vdev_494, target_2)
and func_1(vdev_494, target_1)
and func_2(vdev_494, target_2)
and vdev_494.getType().hasName("mt76_dev *")
and vdev_494.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
