/**
 * @name linux-2c02d41d71f90a5168391b6a5f2954112ba2307c-inet_csk_listen_start
 * @id cpp/linux/2c02d41d71f90a5168391b6a5f2954112ba2307c/inet-csk-listen-start
 * @description linux-2c02d41d71f90a5168391b6a5f2954112ba2307c-net/ipv4/inet_connection_sock.c-inet_csk_listen_start CVE-2023-0461
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable verr_1207, Parameter vsk_1203, ExprStmt target_2, FunctionCall target_4, ExprStmt target_5, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1207
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("inet_ulp_can_listen")
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_1203
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
	and target_4.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable verr_1207, ExprStmt target_2, Function func) {
exists(IfStmt target_1 |
	target_1.getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_1.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=verr_1207
	and target_1.getCondition().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_1.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=verr_1207
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_2.getLocation()))
}

predicate func_2(Function func, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("reqsk_queue_alloc")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="icsk_accept_queue"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("inet_connection_sock *")
	and target_2.getEnclosingFunction() = func
}

predicate func_4(Parameter vsk_1203, FunctionCall target_4) {
	target_4.getTarget().hasName("inet_sk")
	and target_4.getArgument(0).(VariableAccess).getTarget()=vsk_1203
}

predicate func_5(Parameter vsk_1203, ExprStmt target_5) {
	target_5.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="sk_ack_backlog"
	and target_5.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_1203
	and target_5.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

from Function func, Variable verr_1207, Parameter vsk_1203, ExprStmt target_2, FunctionCall target_4, ExprStmt target_5
where
not func_0(verr_1207, vsk_1203, target_2, target_4, target_5, func)
and not func_1(verr_1207, target_2, func)
and func_2(func, target_2)
and func_4(vsk_1203, target_4)
and func_5(vsk_1203, target_5)
and verr_1207.getType().hasName("int")
and vsk_1203.getType().hasName("sock *")
and verr_1207.(LocalVariable).getFunction() = func
and vsk_1203.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
