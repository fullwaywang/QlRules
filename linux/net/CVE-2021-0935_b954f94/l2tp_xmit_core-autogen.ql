/**
 * @name linux-b954f94023dcc61388c8384f0f14eb8e42c863c5-l2tp_xmit_core
 * @id cpp/linux/b954f94023dcc61388c8384f0f14eb8e42c863c5/l2tp-xmit-core
 * @description linux-b954f94023dcc61388c8384f0f14eb8e42c863c5-net/l2tp/l2tp_core.c-l2tp_xmit_core CVE-2021-0935
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vtunnel_1028, ExprStmt target_3, ConditionalExpr target_4) {
	exists(FunctionCall target_0 |
		target_0.getTarget().hasName("l2tp_sk_is_v6")
		and target_0.getArgument(0).(PointerFieldAccess).getTarget().getName()="sock"
		and target_0.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vtunnel_1028
		and target_0.getParent().(IfStmt).getThen()=target_3
		and target_4.getCondition().(EqualityOperation).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vtunnel_1028, PointerFieldAccess target_1) {
		target_1.getTarget().getName()="sock"
		and target_1.getQualifier().(VariableAccess).getTarget()=vtunnel_1028
}

predicate func_2(Variable vtunnel_1028, ExprStmt target_3, LogicalAndExpr target_2) {
		target_2.getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getTarget().getName()="skc_family"
		and target_2.getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="__sk_common"
		and target_2.getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sock"
		and target_2.getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vtunnel_1028
		and target_2.getAnOperand().(EqualityOperation).getAnOperand().(Literal).getValue()="10"
		and target_2.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="v4mapped"
		and target_2.getAnOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vtunnel_1028
		and target_2.getParent().(IfStmt).getThen()=target_3
}

predicate func_3(Variable vtunnel_1028, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("inet6_csk_xmit")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="sock"
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vtunnel_1028
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("sk_buff *")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(Literal).getValue()="0"
}

predicate func_4(Variable vtunnel_1028, ConditionalExpr target_4) {
		target_4.getCondition().(EqualityOperation).getAnOperand().(PointerFieldAccess).getTarget().getName()="encap"
		and target_4.getCondition().(EqualityOperation).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vtunnel_1028
		and target_4.getThen().(SizeofTypeOperator).getType() instanceof LongType
		and target_4.getThen().(SizeofTypeOperator).getValue()="8"
		and target_4.getElse().(Literal).getValue()="0"
}

from Function func, Variable vtunnel_1028, PointerFieldAccess target_1, LogicalAndExpr target_2, ExprStmt target_3, ConditionalExpr target_4
where
not func_0(vtunnel_1028, target_3, target_4)
and func_1(vtunnel_1028, target_1)
and func_2(vtunnel_1028, target_3, target_2)
and func_3(vtunnel_1028, target_3)
and func_4(vtunnel_1028, target_4)
and vtunnel_1028.getType().hasName("l2tp_tunnel *")
and vtunnel_1028.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
