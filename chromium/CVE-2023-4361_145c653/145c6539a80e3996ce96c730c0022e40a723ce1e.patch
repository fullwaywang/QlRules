commit 145c6539a80e3996ce96c730c0022e40a723ce1e	145c6539a80e3996ce96c730c0022e40a723ce1e
Author: Jan Keitel <jkeitel@google.com>
Date:   Tue Sep 19 23:46:26 2023 +0000

    Clean up AutofillKeyboardAccessoryAcceptanceDelayThreshold feature.
    
    The feature only ever served as a kill switch and landed in M116.
    
    As part of cleaning up the feature, it also gets rid of
    AcceptSuggestionWithoutThreshold, as this method is now only used in
    tests.
    
    Bug: 1465230
    Change-Id: I7e500dc74bccbf809303b43a666e53642c51c1d3
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4871900
    Reviewed-by: Ken Buchanan <kenrb@chromium.org>
    Auto-Submit: Jan Keitel <jkeitel@google.com>
    Reviewed-by: Christoph Schwering <schwering@google.com>
    Reviewed-by: Bruno Braga <brunobraga@google.com>
    Commit-Queue: Ken Buchanan <kenrb@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1198689}

diff --git a/chrome/browser/autofill/mock_autofill_popup_controller.h b/chrome/browser/autofill/mock_autofill_popup_controller.h
index ced4dace9eb88..90ccde476b95b 100644
--- a/chrome/browser/autofill/mock_autofill_popup_controller.h
+++ b/chrome/browser/autofill/mock_autofill_popup_controller.h
@@ -58,7 +58,6 @@ class MockAutofillPopupController
   // AutofillPopupController:
   MOCK_METHOD(void, OnSuggestionsChanged, (), (override));
   MOCK_METHOD(void, AcceptSuggestion, (int, base::TimeTicks), (override));
-  MOCK_METHOD(void, AcceptSuggestionWithoutThreshold, (int), (override));
   std::vector<Suggestion> GetSuggestions() const override {
     return suggestions_;
   }
diff --git a/chrome/browser/ui/android/autofill/autofill_keyboard_accessory_view.cc b/chrome/browser/ui/android/autofill/autofill_keyboard_accessory_view.cc
index ccc805ea37cc5..1f98a831fd4a5 100644
--- a/chrome/browser/ui/android/autofill/autofill_keyboard_accessory_view.cc
+++ b/chrome/browser/ui/android/autofill/autofill_keyboard_accessory_view.cc
@@ -133,13 +133,8 @@ void AutofillKeyboardAccessoryView::SuggestionSelected(
     JNIEnv* env,
     const JavaParamRef<jobject>& obj,
     jint list_index) {
-  if (base::FeatureList::IsEnabled(
-          features::kAutofillKeyboardAccessoryAcceptanceDelayThreshold)) {
     controller_->AcceptSuggestion(list_index, base::TimeTicks::Now());
-  } else {
-    controller_->AcceptSuggestionWithoutThreshold(list_index);
   }
-}
 
 void AutofillKeyboardAccessoryView::DeletionRequested(
     JNIEnv* env,
diff --git a/chrome/browser/ui/autofill/autofill_keyboard_accessory_adapter.cc b/chrome/browser/ui/autofill/autofill_keyboard_accessory_adapter.cc
index 8362cfeaac49d..fba86fb905f4b 100644
--- a/chrome/browser/ui/autofill/autofill_keyboard_accessory_adapter.cc
+++ b/chrome/browser/ui/autofill/autofill_keyboard_accessory_adapter.cc
@@ -137,13 +137,6 @@ void AutofillKeyboardAccessoryAdapter::AcceptSuggestion(
   }
 }
 
-void AutofillKeyboardAccessoryAdapter::AcceptSuggestionWithoutThreshold(
-    int index) {
-  if (controller_) {
-    controller_->AcceptSuggestionWithoutThreshold(OffsetIndexFor(index));
-  }
-}
-
 int AutofillKeyboardAccessoryAdapter::GetLineCount() const {
   return controller_ ? controller_->GetLineCount() : 0;
 }
diff --git a/chrome/browser/ui/autofill/autofill_keyboard_accessory_adapter.h b/chrome/browser/ui/autofill/autofill_keyboard_accessory_adapter.h
index 7cd9e4f2d119a..5ef47f31b2e63 100644
--- a/chrome/browser/ui/autofill/autofill_keyboard_accessory_adapter.h
+++ b/chrome/browser/ui/autofill/autofill_keyboard_accessory_adapter.h
@@ -93,7 +93,6 @@ class AutofillKeyboardAccessoryAdapter : public AutofillPopupView,
   // AutofillPopupController:
   // Hidden: void OnSuggestionsChanged() override;
   void AcceptSuggestion(int index, base::TimeTicks event_time) override;
-  void AcceptSuggestionWithoutThreshold(int index) override;
   int GetLineCount() const override;
   const autofill::Suggestion& GetSuggestionAt(int row) const override;
   std::u16string GetSuggestionMainTextAt(int row) const override;
diff --git a/chrome/browser/ui/autofill/autofill_popup_controller.h b/chrome/browser/ui/autofill/autofill_popup_controller.h
index 2d363f430c15d..9a99ec98cbe70 100644
--- a/chrome/browser/ui/autofill/autofill_popup_controller.h
+++ b/chrome/browser/ui/autofill/autofill_popup_controller.h
@@ -34,11 +34,6 @@ class AutofillPopupController : public AutofillPopupViewDelegate {
   // (crbug.com/1279268).
   virtual void AcceptSuggestion(int index, base::TimeTicks event_time) = 0;
 
-  // Accepts the suggestion at `index` without requiring a minimum show
-  // threshold. This should only be used in cases in which user intent is
-  // certain (e.g. the keyboard accessory).
-  virtual void AcceptSuggestionWithoutThreshold(int index) = 0;
-
   // Removes the suggestion at the given index.
   virtual bool RemoveSuggestion(int index) = 0;
 
diff --git a/chrome/browser/ui/autofill/autofill_popup_controller_impl.cc b/chrome/browser/ui/autofill/autofill_popup_controller_impl.cc
index 544ea6ae9b476..8f82a9b0964af 100644
--- a/chrome/browser/ui/autofill/autofill_popup_controller_impl.cc
+++ b/chrome/browser/ui/autofill/autofill_popup_controller_impl.cc
@@ -372,10 +372,6 @@ void AutofillPopupControllerImpl::AcceptSuggestion(int index,
     return;
   }
 
-  AcceptSuggestionWithoutThreshold(index);
-}
-
-void AutofillPopupControllerImpl::AcceptSuggestionWithoutThreshold(int index) {
   if (static_cast<size_t>(index) >= suggestions_.size()) {
     // Prevents crashes from crbug.com/521133. It seems that in rare cases or
     // races the suggestions_ and the user-selected index may be out of sync.
diff --git a/chrome/browser/ui/autofill/autofill_popup_controller_impl.h b/chrome/browser/ui/autofill/autofill_popup_controller_impl.h
index 051242e7eddc7..569e2c3f5e48b 100644
--- a/chrome/browser/ui/autofill/autofill_popup_controller_impl.h
+++ b/chrome/browser/ui/autofill/autofill_popup_controller_impl.h
@@ -166,7 +166,6 @@ class AutofillPopupControllerImpl
   void OnSuggestionsChanged() override;
   void SelectSuggestion(absl::optional<size_t> index) override;
   void AcceptSuggestion(int index, base::TimeTicks event_time) override;
-  void AcceptSuggestionWithoutThreshold(int index) override;
   bool RemoveSuggestion(int list_index) override;
   int GetLineCount() const override;
   const Suggestion& GetSuggestionAt(int row) const override;
diff --git a/chrome/browser/ui/autofill/autofill_popup_controller_unittest.cc b/chrome/browser/ui/autofill/autofill_popup_controller_unittest.cc
index cfc0c23def252..15cba0ec50948 100644
--- a/chrome/browser/ui/autofill/autofill_popup_controller_unittest.cc
+++ b/chrome/browser/ui/autofill/autofill_popup_controller_unittest.cc
@@ -184,7 +184,6 @@ class TestAutofillPopupController : public AutofillPopupControllerImpl {
 
   // Making protected functions public for testing
   using AutofillPopupControllerImpl::AcceptSuggestion;
-  using AutofillPopupControllerImpl::AcceptSuggestionWithoutThreshold;
   using AutofillPopupControllerImpl::element_bounds;
   using AutofillPopupControllerImpl::FireControlsChangedEvent;
   using AutofillPopupControllerImpl::GetLineCount;
@@ -640,9 +639,8 @@ TEST_F(AutofillPopupControllerUnitTest, SelectInvalidSuggestion) {
   EXPECT_CALL(*delegate(), DidAcceptSuggestion).Times(0);
 
   // The following should not crash:
-  popup_controller()
-      .AcceptSuggestion(                             /*index=*/
-                        1, base::TimeTicks::Now());  // Out of bounds!
+  popup_controller().AcceptSuggestion(
+      /*index=*/1, base::TimeTicks::Now());  // Out of bounds!
 }
 
 TEST_F(AutofillPopupControllerUnitTest, AcceptSuggestionRespectsTimeout) {
@@ -663,17 +661,6 @@ TEST_F(AutofillPopupControllerUnitTest, AcceptSuggestionRespectsTimeout) {
       "Autofill.Popup.AcceptanceDelayThresholdNotMet", 2);
 }
 
-TEST_F(AutofillPopupControllerUnitTest, AcceptSuggestionWithoutThreshold) {
-  base::HistogramTester histogram_tester;
-  ShowSuggestions({PopupItemId::kAddressEntry});
-
-  // Calls are accepted immediately.
-  EXPECT_CALL(*delegate(), DidAcceptSuggestion).Times(1);
-  popup_controller().AcceptSuggestionWithoutThreshold(0);
-  histogram_tester.ExpectTotalCount(
-      "Autofill.Popup.AcceptanceDelayThresholdNotMet", 0);
-}
-
 TEST_F(AutofillPopupControllerUnitTest,
        AcceptSuggestionTimeoutIsUpdatedOnPopupMove) {
   base::HistogramTester histogram_tester;
@@ -731,7 +718,8 @@ TEST_F(AutofillPopupControllerUnitTest,
               Run(_, _,
                   password_manager::metrics_util::
                       PasswordMigrationWarningTriggers::kKeyboardAcessoryBar));
-  popup_controller().AcceptSuggestionWithoutThreshold(0);
+  popup_controller().AcceptSuggestion(
+      0, base::TimeTicks::Now() + base::Milliseconds(500));
 }
 
 TEST_F(AutofillPopupControllerUnitTest,
@@ -744,7 +732,8 @@ TEST_F(AutofillPopupControllerUnitTest,
   // Calls are accepted immediately.
   EXPECT_CALL(*delegate(), DidAcceptSuggestion).Times(1);
   EXPECT_CALL(show_pwd_migration_warning_callback_, Run);
-  popup_controller().AcceptSuggestionWithoutThreshold(0);
+  popup_controller().AcceptSuggestion(
+      0, base::TimeTicks::Now() + base::Milliseconds(500));
 }
 
 TEST_F(AutofillPopupControllerUnitTest,
@@ -758,7 +747,8 @@ TEST_F(AutofillPopupControllerUnitTest,
   // Calls are accepted immediately.
   EXPECT_CALL(*delegate(), DidAcceptSuggestion).Times(1);
   EXPECT_CALL(show_pwd_migration_warning_callback_, Run).Times(0);
-  popup_controller().AcceptSuggestionWithoutThreshold(0);
+  popup_controller().AcceptSuggestion(
+      0, base::TimeTicks::Now() + base::Milliseconds(500));
 }
 
 TEST_F(AutofillPopupControllerUnitTest, AcceptAddressNoPwdWarningAndroid) {
@@ -770,7 +760,8 @@ TEST_F(AutofillPopupControllerUnitTest, AcceptAddressNoPwdWarningAndroid) {
   // Calls are accepted immediately.
   EXPECT_CALL(*delegate(), DidAcceptSuggestion).Times(1);
   EXPECT_CALL(show_pwd_migration_warning_callback_, Run).Times(0);
-  popup_controller().AcceptSuggestionWithoutThreshold(0);
+  popup_controller().AcceptSuggestion(
+      0, base::TimeTicks::Now() + base::Milliseconds(500));
 }
 #endif
 
diff --git a/chrome/browser/ui/views/autofill/popup/popup_view_views_unittest.cc b/chrome/browser/ui/views/autofill/popup/popup_view_views_unittest.cc
index e168630f39dd9..8aede38f84864 100644
--- a/chrome/browser/ui/views/autofill/popup/popup_view_views_unittest.cc
+++ b/chrome/browser/ui/views/autofill/popup/popup_view_views_unittest.cc
@@ -269,7 +269,6 @@ class PopupViewViewsTestWithClickablePopupItemId
 TEST_F(PopupViewViewsTest, ShowHideTest) {
   CreateAndShowView({PopupItemId::kAutocompleteEntry});
   EXPECT_CALL(controller(), AcceptSuggestion).Times(0);
-  EXPECT_CALL(controller(), AcceptSuggestionWithoutThreshold).Times(0);
   view().Hide();
 }
 
@@ -422,7 +421,6 @@ TEST_F(PopupViewViewsTest, ClickDisabledEntry) {
   CreateAndShowView();
 
   EXPECT_CALL(controller(), AcceptSuggestion).Times(0);
-  EXPECT_CALL(controller(), AcceptSuggestionWithoutThreshold).Times(0);
 
   gfx::Point inside_point(GetRowViewAt(0).x() + 1, GetRowViewAt(0).y() + 1);
   ui::MouseEvent click_mouse_event(
@@ -639,7 +637,6 @@ class PopupViewViewsTestKeyboard : public PopupViewViewsTest {
 TEST_F(PopupViewViewsTestKeyboard, FillOnEnter) {
   SelectFirstSuggestion();
   EXPECT_CALL(controller(), AcceptSuggestion(0, _));
-  EXPECT_CALL(controller(), AcceptSuggestionWithoutThreshold).Times(0);
   SimulateKeyPress(ui::VKEY_RETURN);
 }
 
@@ -647,7 +644,6 @@ TEST_F(PopupViewViewsTestKeyboard, FillOnEnter) {
 TEST_F(PopupViewViewsTestKeyboard, FillOnTabPressed) {
   SelectFirstSuggestion();
   EXPECT_CALL(controller(), AcceptSuggestion(0, _));
-  EXPECT_CALL(controller(), AcceptSuggestionWithoutThreshold).Times(0);
   SimulateKeyPress(ui::VKEY_TAB);
 }
 
@@ -656,7 +652,6 @@ TEST_F(PopupViewViewsTestKeyboard, FillOnTabPressed) {
 TEST_F(PopupViewViewsTestKeyboard, NoFillOnTabPressedWithModifiers) {
   SelectFirstSuggestion();
   EXPECT_CALL(controller(), AcceptSuggestion(0, _)).Times(0);
-  EXPECT_CALL(controller(), AcceptSuggestionWithoutThreshold).Times(0);
   SimulateKeyPress(ui::VKEY_TAB, /*shift_modifier_pressed=*/false,
                    /*non_shift_modifier_pressed=*/true);
 }
@@ -676,7 +671,6 @@ TEST_F(PopupViewViewsTest, NoAutofillOptionsTriggeredOnTabPressed) {
   // Because the selected line is PopupItemId::kAutofillOptions, we expect that
   // the tab key does not trigger anything.
   EXPECT_CALL(controller(), AcceptSuggestion).Times(0);
-  EXPECT_CALL(controller(), AcceptSuggestionWithoutThreshold).Times(0);
   SimulateKeyPress(ui::VKEY_TAB);
 }
 
diff --git a/chrome/browser/webauthn/chrome_webauthn_autofill_interactive_uitest.cc b/chrome/browser/webauthn/chrome_webauthn_autofill_interactive_uitest.cc
index 35711a76602aa..d51ea3748653c 100644
--- a/chrome/browser/webauthn/chrome_webauthn_autofill_interactive_uitest.cc
+++ b/chrome/browser/webauthn/chrome_webauthn_autofill_interactive_uitest.cc
@@ -281,7 +281,8 @@ class WebAuthnAutofillIntegrationTest : public CertVerifierBrowserTest {
     EXPECT_EQ(webauthn_entry.icon, "globeIcon");
 
     // Click the credential.
-    popup_controller->AcceptSuggestionWithoutThreshold(suggestion_index);
+    popup_controller->AcceptSuggestion(
+        suggestion_index, base::TimeTicks::Now() + base::Milliseconds(500));
     std::string result;
     ASSERT_TRUE(message_queue.WaitForMessage(&result));
     EXPECT_EQ(result, "\"webauthn: OK\"");
@@ -483,7 +484,8 @@ IN_PROC_BROWSER_TEST_F(WebAuthnDevtoolsAutofillIntegrationTest, GPMPasskeys) {
   EXPECT_EQ(webauthn_entry.icon, "globeIcon");
 
   // Click the credential.
-  popup_controller->AcceptSuggestionWithoutThreshold(suggestion_index);
+  popup_controller->AcceptSuggestion(
+      suggestion_index, base::TimeTicks::Now() + base::Milliseconds(500));
   std::string result;
   ASSERT_TRUE(message_queue.WaitForMessage(&result));
   EXPECT_EQ(result, "\"webauthn: OK\"");
diff --git a/chrome/browser/webauthn/chrome_webauthn_autofill_mac_interactive_uitest.mm b/chrome/browser/webauthn/chrome_webauthn_autofill_mac_interactive_uitest.mm
index 86a30d2c7e71b..59b884a412035 100644
--- a/chrome/browser/webauthn/chrome_webauthn_autofill_mac_interactive_uitest.mm
+++ b/chrome/browser/webauthn/chrome_webauthn_autofill_mac_interactive_uitest.mm
@@ -6,6 +6,7 @@
 #include <vector>
 
 #include "base/test/bind.h"
+#include "base/time/time.h"
 #include "build/build_config.h"
 #include "chrome/browser/password_manager/chrome_webauthn_credentials_delegate.h"
 #include "chrome/browser/ssl/cert_verifier_browser_test.h"
@@ -138,7 +139,8 @@ IN_PROC_BROWSER_TEST_F(WebAuthnMacAutofillIntegrationTest, SelectAccount) {
   EXPECT_EQ(webauthn_entry.icon, "globeIcon");
 
   // Click the credential.
-  popup_controller->AcceptSuggestionWithoutThreshold(suggestion_index);
+  popup_controller->AcceptSuggestion(
+      suggestion_index, base::TimeTicks::Now() + base::Milliseconds(500));
   std::string result;
   ASSERT_TRUE(message_queue.WaitForMessage(&result));
   EXPECT_EQ(result, "\"webauthn: OK\"");
diff --git a/components/autofill/core/common/autofill_features.cc b/components/autofill/core/common/autofill_features.cc
index 89348a5297cc2..c96f0b66c28d2 100644
--- a/components/autofill/core/common/autofill_features.cc
+++ b/components/autofill/core/common/autofill_features.cc
@@ -705,13 +705,6 @@ BASE_FEATURE(kAutofillKeyboardAccessory,
              "AutofillKeyboardAccessory_LAUNCHED",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
-// When enabled, Autofill suggestions from keyboard accessory chips are only
-// accepted if at least 500ms have passed between showing the accessory and
-// interacting with the accessory chip.
-BASE_FEATURE(kAutofillKeyboardAccessoryAcceptanceDelayThreshold,
-             "AutofillKeyboardAccessoryAcceptanceDelayThreshold",
-             base::FEATURE_ENABLED_BY_DEFAULT);
-
 // Controls whether the touch to fill surface is shown for credit cards on
 // Android.
 BASE_FEATURE(kAutofillTouchToFillForCreditCardsAndroid,
diff --git a/components/autofill/core/common/autofill_features.h b/components/autofill/core/common/autofill_features.h
index baa23366d98b7..91bf64f44cb72 100644
--- a/components/autofill/core/common/autofill_features.h
+++ b/components/autofill/core/common/autofill_features.h
@@ -243,8 +243,6 @@ BASE_DECLARE_FEATURE(kAutofillVirtualCardsOnTouchToFillAndroid);
 #if BUILDFLAG(IS_ANDROID)
 COMPONENT_EXPORT(AUTOFILL) BASE_DECLARE_FEATURE(kAutofillKeyboardAccessory);
 COMPONENT_EXPORT(AUTOFILL)
-BASE_DECLARE_FEATURE(kAutofillKeyboardAccessoryAcceptanceDelayThreshold);
-COMPONENT_EXPORT(AUTOFILL)
 BASE_DECLARE_FEATURE(kAutofillTouchToFillForCreditCardsAndroid);
 COMPONENT_EXPORT(AUTOFILL)
 BASE_DECLARE_FEATURE(kAutofillVirtualViewStructureAndroid);
