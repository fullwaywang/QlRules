/**
 * @name linux-1c5a1627f48105cbab81d25ec2f72232bfaa8185-accept_memory
 * @id cpp/linux/1c5a1627f48105cbab81d25ec2f72232bfaa8185/accept-memory
 * @description linux-1c5a1627f48105cbab81d25ec2f72232bfaa8185-drivers/firmware/efi/unaccepted_memory.c-accept_memory CVE-2024-36936
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_1, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("touch_softlockup_watchdog")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("spin_unlock_irqrestore")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("spinlock_t")
	and target_1.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned long")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

from Function func, ExprStmt target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
