/**
 * @name linux-04f5866e41fb70690e28397487d8bd8eea7d712a-uverbs_user_mmap_disassociate
 * @id cpp/linux/04f5866e41fb70690e28397487d8bd8eea7d712a/uverbs-user-mmap-disassociate
 * @description linux-04f5866e41fb70690e28397487d8bd8eea7d712a-drivers/infiniband/core/uverbs_main.c-uverbs_user_mmap_disassociate CVE-2019-11599
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vmm_967, ExprStmt target_1, AddressOfExpr target_2, EqualityOperation target_3) {
exists(IfStmt target_0 |
	target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("mmget_still_valid")
	and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmm_967
	and target_0.getThen().(GotoStmt).getName() ="skip_mm"
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getRightOperand().(VariableAccess).getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="umap_lock"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("ib_uverbs_file *")
	and target_1.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vmm_967, AddressOfExpr target_2) {
	target_2.getOperand().(ValueFieldAccess).getTarget().getName()="mmap_sem"
	and target_2.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_2.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmm_967
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("down_write")
}

predicate func_3(Variable vmm_967, EqualityOperation target_3) {
	target_3.getLeftOperand().(PointerFieldAccess).getTarget().getName()="vm_mm"
	and target_3.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("vm_area_struct *")
	and target_3.getRightOperand().(VariableAccess).getTarget()=vmm_967
}

from Function func, Variable vmm_967, ExprStmt target_1, AddressOfExpr target_2, EqualityOperation target_3
where
not func_0(vmm_967, target_1, target_2, target_3)
and func_1(func, target_1)
and func_2(vmm_967, target_2)
and func_3(vmm_967, target_3)
and vmm_967.getType().hasName("mm_struct *")
and vmm_967.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
