/**
 * @name linux-8423f0b6d513b259fdab9c9bf4aaa6188d054c2d-snd_pcm_oss_sync
 * @id cpp/linux/8423f0b6d513b259fdab9c9bf4aaa6188d054c2d/snd-pcm-oss-sync
 * @description linux-8423f0b6d513b259fdab9c9bf4aaa6188d054c2d-sound/core/oss/pcm_oss.c-snd_pcm_oss_sync CVE-2022-3303
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable verr_1662, ExprStmt target_6, IfStmt target_0) {
	target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=verr_1662
	and target_0.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_0.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=verr_1662
	and target_0.getLocation().isBefore(target_6.getLocation())
}

predicate func_1(Variable verr_1662, ExprStmt target_7, IfStmt target_1) {
	target_1.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=verr_1662
	and target_1.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_1.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=verr_1662
	and target_1.getLocation().isBefore(target_7.getLocation())
}

predicate func_2(Variable verr_1662, Variable vsubstream_1664, EqualityOperation target_8, ReturnStmt target_9, ExprStmt target_4, ExprStmt target_10) {
exists(ExprStmt target_2 |
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1662
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("snd_pcm_oss_make_ready_locked")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsubstream_1664
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(4)=target_2
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8
	and target_9.getExpr().(VariableAccess).getLocation().isBefore(target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation())
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Variable verr_1662, EqualityOperation target_8) {
exists(IfStmt target_3 |
	target_3.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=verr_1662
	and target_3.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_3.getThen().(GotoStmt).getName() ="unlock"
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(5)=target_3
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8)
}

predicate func_4(Variable verr_1662, Variable vsubstream_1664, EqualityOperation target_8, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1662
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("snd_pcm_oss_make_ready")
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsubstream_1664
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8
}

predicate func_5(Variable verr_1662, EqualityOperation target_8, IfStmt target_5) {
	target_5.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=verr_1662
	and target_5.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_5.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=verr_1662
	and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8
}

predicate func_6(Function func, ExprStmt target_6) {
	target_6.getExpr().(FunctionCall).getTarget().hasName("atomic_inc")
	and target_6.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="rw_ref"
	and target_6.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="oss"
	and target_6.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("snd_pcm_runtime *")
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Variable vsubstream_1664, ExprStmt target_7) {
	target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_7.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="f_flags"
	and target_7.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsubstream_1664
}

predicate func_8(Variable vsubstream_1664, BlockStmt target_11, EqualityOperation target_8) {
	target_8.getLeftOperand().(VariableAccess).getTarget()=vsubstream_1664
	and target_8.getRightOperand().(Literal).getValue()="0"
	and target_8.getParent().(IfStmt).getThen()=target_11
}

predicate func_9(Variable verr_1662, RelationalOperation target_12, ReturnStmt target_9) {
	target_9.getExpr().(VariableAccess).getTarget()=verr_1662
	and target_9.getParent().(IfStmt).getCondition()=target_12
}

predicate func_10(Variable verr_1662, Variable vsubstream_1664, ExprStmt target_10) {
	target_10.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1662
	and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("snd_pcm_oss_sync1")
	and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsubstream_1664
	and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="period_bytes"
	and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="oss"
	and target_10.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("snd_pcm_runtime *")
}

predicate func_11(Variable vsubstream_1664, BlockStmt target_11) {
	target_11.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("snd_pcm_runtime *")
	and target_11.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="runtime"
	and target_11.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsubstream_1664
	and target_11.getStmt(1).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("atomic_read")
	and target_11.getStmt(1).(IfStmt).getCondition().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="mmap_count"
	and target_11.getStmt(1).(IfStmt).getCondition().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsubstream_1664
	and target_11.getStmt(1).(IfStmt).getThen().(GotoStmt).getName() ="__direct"
}

predicate func_12(Variable verr_1662, ReturnStmt target_9, RelationalOperation target_12) {
	 (target_12 instanceof GTExpr or target_12 instanceof LTExpr)
	and target_12.getLesserOperand().(VariableAccess).getTarget()=verr_1662
	and target_12.getGreaterOperand().(Literal).getValue()="0"
	and target_12.getParent().(IfStmt).getThen()=target_9
}

from Function func, Variable verr_1662, Variable vsubstream_1664, IfStmt target_0, IfStmt target_1, ExprStmt target_4, IfStmt target_5, ExprStmt target_6, ExprStmt target_7, EqualityOperation target_8, ReturnStmt target_9, ExprStmt target_10, BlockStmt target_11, RelationalOperation target_12
where
func_0(verr_1662, target_6, target_0)
and func_1(verr_1662, target_7, target_1)
and not func_2(verr_1662, vsubstream_1664, target_8, target_9, target_4, target_10)
and not func_3(verr_1662, target_8)
and func_4(verr_1662, vsubstream_1664, target_8, target_4)
and func_5(verr_1662, target_8, target_5)
and func_6(func, target_6)
and func_7(vsubstream_1664, target_7)
and func_8(vsubstream_1664, target_11, target_8)
and func_9(verr_1662, target_12, target_9)
and func_10(verr_1662, vsubstream_1664, target_10)
and func_11(vsubstream_1664, target_11)
and func_12(verr_1662, target_9, target_12)
and verr_1662.getType().hasName("int")
and vsubstream_1664.getType().hasName("snd_pcm_substream *")
and verr_1662.(LocalVariable).getFunction() = func
and vsubstream_1664.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
