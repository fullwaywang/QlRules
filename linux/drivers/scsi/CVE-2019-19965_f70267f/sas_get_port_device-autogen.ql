/**
 * @name linux-f70267f379b5e5e11bdc5d72a56bf17e5feed01f-sas_get_port_device
 * @id cpp/linux/f70267f379b5e5e11bdc5d72a56bf17e5feed01f/sas-get-port-device
 * @description linux-f70267f379b5e5e11bdc5d72a56bf17e5feed01f-drivers/scsi/libsas/sas_discover.c-sas_get_port_device CVE-2019-19965
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vport_50, Variable vdev_54, LogicalAndExpr target_2, ExprStmt target_3) {
exists(IfStmt target_0 |
	target_0.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="oob_mode"
	and target_0.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vport_50
	and target_0.getThen() instanceof BlockStmt
	and target_0.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("sas_put_device")
	and target_0.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdev_54
	and target_0.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("printk")
	and target_0.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="4sas: Port %016llx is disconnected when discovering\n"
	and target_0.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(FunctionCall).getTarget().hasName("__builtin_bswap64")
	and target_0.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(FunctionCall).getArgument(0).(PointerDereferenceExpr).getOperand().(PointerFieldAccess).getTarget().getName()="attached_sas_addr"
	and target_0.getElse().(BlockStmt).getStmt(2).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-19"
	and target_0.getParent().(IfStmt).getCondition()=target_2
	and target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vdev_54, Variable vid_85, LogicalAndExpr target_2, BlockStmt target_1) {
	target_1.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="dev_type"
	and target_1.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_54
	and target_1.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="dev_type"
	and target_1.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vid_85
	and target_1.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="iproto"
	and target_1.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_54
	and target_1.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getTarget().getName()="initiator_bits"
	and target_1.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_1.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vid_85
	and target_1.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="tproto"
	and target_1.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_54
	and target_1.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getTarget().getName()="target_bits"
	and target_1.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_1.getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vid_85
	and target_1.getParent().(IfStmt).getCondition()=target_2
}

predicate func_2(Parameter vport_50, Variable vdev_54, LogicalAndExpr target_2) {
	target_2.getLeftOperand().(EqualityOperation).getLeftOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="frame_rcvd"
	and target_2.getLeftOperand().(EqualityOperation).getLeftOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_54
	and target_2.getLeftOperand().(EqualityOperation).getLeftOperand().(ArrayExpr).getArrayOffset().(Literal).getValue()="0"
	and target_2.getLeftOperand().(EqualityOperation).getRightOperand().(HexLiteral).getValue()="52"
	and target_2.getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="oob_mode"
	and target_2.getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vport_50
}

predicate func_3(Variable vdev_54, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="tproto"
	and target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdev_54
}

from Function func, Parameter vport_50, Variable vdev_54, Variable vid_85, BlockStmt target_1, LogicalAndExpr target_2, ExprStmt target_3
where
not func_0(vport_50, vdev_54, target_2, target_3)
and func_1(vdev_54, vid_85, target_2, target_1)
and func_2(vport_50, vdev_54, target_2)
and func_3(vdev_54, target_3)
and vport_50.getType().hasName("asd_sas_port *")
and vdev_54.getType().hasName("domain_device *")
and vid_85.getType().hasName("sas_identify_frame *")
and vport_50.getFunction() = func
and vdev_54.(LocalVariable).getFunction() = func
and vid_85.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
