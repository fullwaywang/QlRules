/**
 * @name linux-28d82dc1c4edbc352129f97f4ca22624d1fe61de-ep_loop_check
 * @id cpp/linux/28d82dc1c4edbc352129f97f4ca22624d1fe61de/ep-loop-check
 * @description linux-28d82dc1c4edbc352129f97f4ca22624d1fe61de-fs/eventpoll.c-ep_loop_check CVE-2012-3375
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
		and target_0.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0)
}

predicate func_1(Function func) {
	exists(ForStmt target_1 |
		target_1.getInitialization().(ExprStmt).getExpr().(CommaExpr).getLeftOperand().(AssignExpr).getLValue().(VariableAccess).getType().hasName("eventpoll *")
		and target_1.getInitialization().(ExprStmt).getExpr().(CommaExpr).getRightOperand().(AssignExpr).getLValue().(VariableAccess).getType().hasName("eventpoll *")
		and target_1.getCondition().(EqualityOperation).getAnOperand().(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="visited_list_link"
		and target_1.getCondition().(EqualityOperation).getAnOperand().(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("eventpoll *")
		and target_1.getCondition().(EqualityOperation).getAnOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("list_head")
		and target_1.getUpdate().(CommaExpr).getLeftOperand().(AssignExpr).getLValue().(VariableAccess).getType().hasName("eventpoll *")
		and target_1.getUpdate().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(VariableAccess).getType().hasName("eventpoll *")
		and target_1.getUpdate().(CommaExpr).getRightOperand().(AssignExpr).getLValue().(VariableAccess).getType().hasName("eventpoll *")
		and target_1.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="visited"
		and target_1.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("eventpoll *")
		and target_1.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("list_del")
		and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="visited_list_link"
		and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("eventpoll *")
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_1)
}

predicate func_3(Parameter vep_1308, Parameter vfile_1308, Variable vpoll_loop_ncalls, FunctionCall target_3) {
		target_3.getTarget().hasName("ep_call_nested")
		and target_3.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vpoll_loop_ncalls
		and target_3.getArgument(1).(Literal).getValue()="4"
		and target_3.getArgument(3).(VariableAccess).getTarget()=vfile_1308
		and target_3.getArgument(4).(VariableAccess).getTarget()=vep_1308
		and target_3.getArgument(5).(FunctionCall).getTarget().hasName("get_current")
}

from Function func, Parameter vep_1308, Parameter vfile_1308, Variable vpoll_loop_ncalls, FunctionCall target_3
where
not func_0(func)
and not func_1(func)
and func_3(vep_1308, vfile_1308, vpoll_loop_ncalls, target_3)
and vep_1308.getType().hasName("eventpoll *")
and vfile_1308.getType().hasName("file *")
and vpoll_loop_ncalls.getType().hasName("nested_calls")
and vep_1308.getFunction() = func
and vfile_1308.getFunction() = func
and not vpoll_loop_ncalls.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
