/**
 * @name linux-0558f33c06bb910e2879e355192227a8e8f0219d-sas_discover_domain
 * @id cpp/linux/0558f33c06bb910e2879e355192227a8e8f0219d/sas-discover-domain
 * @description linux-0558f33c06bb910e2879e355192227a8e8f0219d-drivers/scsi/libsas/sas_discover.c-sas_discover_domain CVE-2017-18232
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vport_444, ExprStmt target_1, ExprStmt target_2, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("sas_probe_devices")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vport_444
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vport_444, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("printk")
	and target_1.getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="7sas: DONE DISCOVERY on port %d, pid:%d, result:%d\n"
	and target_1.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="id"
	and target_1.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vport_444
	and target_1.getExpr().(FunctionCall).getArgument(2).(FunctionCall).getTarget().hasName("task_pid_nr")
	and target_1.getExpr().(FunctionCall).getArgument(2).(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("get_current")
	and target_1.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_2(Variable vport_444, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="port_dev"
	and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vport_444
	and target_2.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

from Function func, Variable vport_444, ExprStmt target_1, ExprStmt target_2
where
not func_0(vport_444, target_1, target_2, func)
and func_1(vport_444, target_1)
and func_2(vport_444, target_2)
and vport_444.getType().hasName("asd_sas_port *")
and vport_444.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
