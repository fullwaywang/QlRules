/**
 * @name linux-96a9873188552ebb2afe76033d7329a5ecabef6e-ice_gnss_create_tty_driver
 * @id cpp/linux/96a9873188552ebb2afe76033d7329a5ecabef6e/ice-gnss-create-tty-driver
 * @description linux-96a9873188552ebb2afe76033d7329a5ecabef6e-drivers/net/ethernet/intel/ice/ice_gnss.c-ice_gnss_create_tty_driver CVE-2022-48886
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vi_425, Parameter vpf_419, ExprStmt target_11) {
exists(IfStmt target_0 |
	exists(NotExpr obj_0 | obj_0=target_0.getCondition() |
		exists(ArrayExpr obj_1 | obj_1=obj_0.getOperand() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getArrayBase() |
				obj_2.getTarget().getName()="gnss_tty_port"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vpf_419
			)
			and obj_1.getArrayOffset().(VariableAccess).getTarget()=vi_425
		)
	)
	and target_0.getThen().(GotoStmt).getName() ="err_out"
	and target_0.getLocation().isBefore(target_11.getLocation())
)
}

predicate func_1(VariableAccess target_14, Function func) {
exists(GotoStmt target_1 |
	exists(BlockStmt obj_0 | obj_0=target_1.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(1)=target_1
			and obj_1.getCondition()=target_14
		)
	)
	and target_1.getName() ="err_out"
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(Variable vi_425, ExprStmt target_15, Function func) {
exists(WhileStmt target_2 |
	target_2.getCondition().(PostfixDecrExpr).getOperand().(VariableAccess).getTarget()=vi_425
	and target_2.getStmt() instanceof BlockStmt
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_15.getExpr().(FunctionCall).getArgument(3).(VariableAccess).getLocation().isBefore(target_2.getCondition().(PostfixDecrExpr).getOperand().(VariableAccess).getLocation())
)
}

predicate func_3(Variable vi_425, ExprStmt target_3) {
	exists(AssignExpr obj_0 | obj_0=target_3.getExpr() |
		obj_0.getLValue().(VariableAccess).getTarget()=vi_425
		and obj_0.getRValue().(Literal).getValue()="0"
	)
}

predicate func_4(Variable vi_425, BlockStmt target_9, RelationalOperation target_4) {
	 (target_4 instanceof GTExpr or target_4 instanceof LTExpr)
	and target_4.getLesserOperand().(VariableAccess).getTarget()=vi_425
	and target_4.getGreaterOperand().(Literal).getValue()="2"
	and target_4.getParent().(ForStmt).getStmt()=target_9
}

predicate func_5(Variable vi_425, PostfixIncrExpr target_5) {
	target_5.getOperand().(VariableAccess).getTarget()=vi_425
}

predicate func_6(Variable vttydrv_name_424, VariableAccess target_14, ExprStmt target_6) {
	exists(FunctionCall obj_0 | obj_0=target_6.getExpr() |
		obj_0.getTarget().hasName("kfree")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vttydrv_name_424
	)
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_14
}

predicate func_7(Parameter vpf_419, VariableAccess target_14, ExprStmt target_7) {
	exists(FunctionCall obj_0 | obj_0=target_7.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().getName()="ice_gnss_tty_driver"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vpf_419
		)
		and obj_0.getTarget().hasName("tty_driver_kref_put")
	)
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_14
}

predicate func_8(VariableAccess target_14, Function func, ReturnStmt target_8) {
	target_8.getExpr().(Literal).getValue()="0"
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_14
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Variable vi_425, Parameter vpf_419, BlockStmt target_9) {
	exists(ExprStmt obj_0 | obj_0=target_9.getStmt(0) |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			exists(ArrayExpr obj_2 | obj_2=obj_1.getArgument(0) |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getArrayBase() |
					obj_3.getTarget().getName()="gnss_tty_port"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vpf_419
				)
				and obj_2.getArrayOffset().(VariableAccess).getTarget()=vi_425
			)
			and obj_1.getTarget().hasName("tty_port_destroy")
		)
	)
	and exists(ExprStmt obj_4 | obj_4=target_9.getStmt(1) |
		exists(FunctionCall obj_5 | obj_5=obj_4.getExpr() |
			exists(ArrayExpr obj_6 | obj_6=obj_5.getArgument(0) |
				exists(PointerFieldAccess obj_7 | obj_7=obj_6.getArrayBase() |
					obj_7.getTarget().getName()="gnss_tty_port"
					and obj_7.getQualifier().(VariableAccess).getTarget()=vpf_419
				)
				and obj_6.getArrayOffset().(VariableAccess).getTarget()=vi_425
			)
			and obj_5.getTarget().hasName("kfree")
		)
	)
}

predicate func_10(VariableAccess target_14, Function func, ForStmt target_10) {
	target_10.getInitialization() instanceof ExprStmt
	and target_10.getCondition() instanceof RelationalOperation
	and target_10.getUpdate() instanceof PostfixIncrExpr
	and target_10.getStmt() instanceof BlockStmt
	and target_10.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_14
	and target_10.getEnclosingFunction() = func
}

predicate func_11(Variable vi_425, Parameter vpf_419, ExprStmt target_11) {
	exists(AssignExpr obj_0 | obj_0=target_11.getExpr() |
		exists(ArrayExpr obj_1 | obj_1=obj_0.getLValue() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getArrayBase() |
				obj_2.getTarget().getName()="gnss_serial"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vpf_419
			)
			and obj_1.getArrayOffset().(VariableAccess).getTarget()=vi_425
		)
		and obj_0.getRValue().(Literal).getValue()="0"
	)
}

predicate func_14(Variable verr_426, BlockStmt target_16, VariableAccess target_14) {
	target_14.getTarget()=verr_426
	and target_14.getParent().(IfStmt).getThen()=target_16
}

predicate func_15(Variable vttydrv_name_424, Variable vi_425, ExprStmt target_15) {
	exists(FunctionCall obj_0 | obj_0=target_15.getExpr() |
		obj_0.getTarget().hasName("_dev_info")
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("device *")
		and obj_0.getArgument(1).(StringLiteral).getValue()="%s%d registered\n"
		and obj_0.getArgument(2).(VariableAccess).getTarget()=vttydrv_name_424
		and obj_0.getArgument(3).(VariableAccess).getTarget()=vi_425
	)
}

predicate func_16(Variable verr_426, BlockStmt target_16) {
	exists(ExprStmt obj_0 | obj_0=target_16.getStmt(0) |
		exists(StmtExpr obj_1 | obj_1=obj_0.getExpr() |
			exists(BlockStmt obj_2 | obj_2=obj_1.getStmt() |
				exists(ExprStmt obj_3 | obj_3=obj_2.getStmt(1) |
					exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getTarget().hasName("_dev_err")
						and obj_4.getArgument(0).(VariableAccess).getTarget().getType().hasName("device *")
						and obj_4.getArgument(1).(StringLiteral).getValue()="Failed to register TTY driver err=%d\n"
						and obj_4.getArgument(2).(VariableAccess).getTarget()=verr_426
					)
				)
				and obj_2.getStmt(0).(DoStmt).getCondition() instanceof Literal
			)
		)
	)
}

from Function func, Variable vttydrv_name_424, Variable vi_425, Variable verr_426, Parameter vpf_419, ExprStmt target_3, RelationalOperation target_4, PostfixIncrExpr target_5, ExprStmt target_6, ExprStmt target_7, ReturnStmt target_8, BlockStmt target_9, ForStmt target_10, ExprStmt target_11, VariableAccess target_14, ExprStmt target_15, BlockStmt target_16
where
not func_0(vi_425, vpf_419, target_11)
and not func_1(target_14, func)
and not func_2(vi_425, target_15, func)
and func_3(vi_425, target_3)
and func_4(vi_425, target_9, target_4)
and func_5(vi_425, target_5)
and func_6(vttydrv_name_424, target_14, target_6)
and func_7(vpf_419, target_14, target_7)
and func_8(target_14, func, target_8)
and func_9(vi_425, vpf_419, target_9)
and func_10(target_14, func, target_10)
and func_11(vi_425, vpf_419, target_11)
and func_14(verr_426, target_16, target_14)
and func_15(vttydrv_name_424, vi_425, target_15)
and func_16(verr_426, target_16)
and vttydrv_name_424.getType().hasName("char *")
and vi_425.getType().hasName("unsigned int")
and verr_426.getType().hasName("int")
and vpf_419.getType().hasName("ice_pf *")
and vttydrv_name_424.(LocalVariable).getFunction() = func
and vi_425.(LocalVariable).getFunction() = func
and verr_426.(LocalVariable).getFunction() = func
and vpf_419.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
