/**
 * @name linux-ba5e770c9698782bc203bbf5cf3b36a77720bdbe-qcom_cpufreq_hw_driver_probe
 * @id cpp/linux/ba5e770c9698782bc203bbf5cf3b36a77720bdbe/qcom-cpufreq-hw-driver-probe
 * @description linux-ba5e770c9698782bc203bbf5cf3b36a77720bdbe-qcom_cpufreq_hw_driver_probe CVE-2023-3312
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, SizeofTypeOperator target_0) {
		target_0.getType() instanceof LongType
		and target_0.getValue()="480"
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, StringLiteral target_1) {
		target_1.getValue()="Failed to map resource %pR\n"
		and not target_1.getValue()="Failed to map resource index %d\n"
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vres_707, Variable vi_658, Parameter vpdev_652, FunctionCall target_2) {
		target_2.getTarget().hasName("devm_platform_get_and_ioremap_resource")
		and not target_2.getTarget().hasName("devm_platform_ioremap_resource")
		and target_2.getArgument(0).(VariableAccess).getTarget()=vpdev_652
		and target_2.getArgument(1).(VariableAccess).getTarget()=vi_658
		and target_2.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vres_707
		and target_2.getParent().(AssignExpr).getRValue() = target_2
		and target_2.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("void *")
}

predicate func_3(Function func, StringLiteral target_3) {
		target_3.getValue()="Failed to map resource %pR\n"
		and not target_3.getValue()="Failed to map resource index %d\n"
		and target_3.getEnclosingFunction() = func
}

predicate func_6(Variable vres_707, VariableAccess target_6) {
		target_6.getTarget()=vres_707
		and target_6.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_7(Variable vres_707, AddressOfExpr target_9, ExprStmt target_8, VariableAccess target_7) {
		target_7.getTarget()=vres_707
		and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_dev_err")
		and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("device *")
		and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1) instanceof StringLiteral
		and target_9.getOperand().(VariableAccess).getLocation().isBefore(target_7.getLocation())
		and target_7.getLocation().isBefore(target_8.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation())
}

predicate func_8(Variable vdata_705, Variable vres_707, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="res"
		and target_8.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdata_705
		and target_8.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vres_707
}

predicate func_9(Variable vres_707, AddressOfExpr target_9) {
		target_9.getOperand().(VariableAccess).getTarget()=vres_707
}

from Function func, Variable vdata_705, Variable vres_707, Variable vi_658, Parameter vpdev_652, SizeofTypeOperator target_0, StringLiteral target_1, FunctionCall target_2, StringLiteral target_3, VariableAccess target_6, VariableAccess target_7, ExprStmt target_8, AddressOfExpr target_9
where
func_0(func, target_0)
and func_1(func, target_1)
and func_2(vres_707, vi_658, vpdev_652, target_2)
and func_3(func, target_3)
and func_6(vres_707, target_6)
and func_7(vres_707, target_9, target_8, target_7)
and func_8(vdata_705, vres_707, target_8)
and func_9(vres_707, target_9)
and vdata_705.getType().hasName("qcom_cpufreq_data *")
and vres_707.getType().hasName("resource *")
and vi_658.getType().hasName("int")
and vpdev_652.getType().hasName("platform_device *")
and vdata_705.(LocalVariable).getFunction() = func
and vres_707.(LocalVariable).getFunction() = func
and vi_658.(LocalVariable).getFunction() = func
and vpdev_652.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
