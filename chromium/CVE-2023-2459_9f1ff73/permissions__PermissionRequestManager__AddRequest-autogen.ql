/**
 * @name chromium-9f1ff7304338085a1e9b42dfd4f5df8baef69c36-permissions__PermissionRequestManager__AddRequest
 * @id cpp/chromium/9f1ff7304338085a1e9b42dfd4f5df8baef69c36/permissionspermissionrequestmanageraddrequest
 * @description chromium-9f1ff7304338085a1e9b42dfd4f5df8baef69c36-components/permissions/permission_request_manager.cc-permissions__PermissionRequestManager__AddRequest CVE-2023-2459
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vrequest_146, Initializer target_0) {
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		obj_0.getTarget().hasName("GetExistingRequest")
		and obj_0.getQualifier() instanceof ThisExpr
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vrequest_146
	)
}

predicate func_1(Variable vexisting_request_236, Initializer target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getQualifier() |
			obj_1.getTarget().getName()="duplicate_requests_"
			and obj_1.getQualifier().(ThisExpr).getType() instanceof PointerType
		)
		and obj_0.getTarget().hasName("equal_range")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vexisting_request_236
	)
}

predicate func_2(Variable vrange_242, Initializer target_2) {
	exists(ValueFieldAccess obj_0 | obj_0=target_2.getExpr() |
		obj_0.getTarget().getName()="first"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vrange_242
	)
}

predicate func_3(Parameter vrequest_146, Variable vexisting_request_236, FunctionCall target_3) {
	exists(PointerFieldAccess obj_0 | obj_0=target_3.getQualifier() |
		obj_0.getTarget().getName()="duplicate_requests_"
		and obj_0.getQualifier().(ThisExpr).getType() instanceof PointerType
	)
	and exists(FunctionCall obj_1 | obj_1=target_3.getArgument(0) |
		obj_1.getTarget().hasName("make_pair")
		and obj_1.getArgument(0).(VariableAccess).getTarget()=vexisting_request_236
		and obj_1.getArgument(1).(VariableAccess).getTarget()=vrequest_146
	)
	and target_3.getTarget().hasName("insert")
	and not target_3.getTarget().hasName("FindDuplicateRequestList")
}

predicate func_4(Variable vexisting_request_236, BlockStmt target_45, EqualityOperation target_46) {
exists(ConditionDeclExpr target_4 |
	target_4.getVariableAccess().(VariableAccess).getTarget()=vexisting_request_236
	and target_4.getParent().(IfStmt).getThen()=target_45
	and target_4.getVariableAccess().(VariableAccess).getLocation().isBefore(target_46.getRightOperand().(VariableAccess).getLocation())
)
}

predicate func_7(VariableAccess target_30, Function func) {
exists(IfStmt target_7 |
	exists(FunctionCall obj_0 | obj_0=target_7.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getArgument(1) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="duplicate_requests_"
				and obj_2.getQualifier().(ThisExpr).getType() instanceof PointerType
			)
			and obj_1.getTarget().hasName("end")
		)
		and obj_0.getTarget().hasName("operator==")
		and obj_0.getArgument(0).(VariableAccess).getType().hasName("iterator")
	)
	and exists(BlockStmt obj_3 | obj_3=target_7.getThen() |
		exists(ExprStmt obj_4 | obj_4=obj_3.getStmt(0) |
			exists(FunctionCall obj_5 | obj_5=obj_4.getExpr() |
				exists(PointerFieldAccess obj_6 | obj_6=obj_5.getQualifier() |
					obj_6.getTarget().getName()="duplicate_requests_"
					and obj_6.getQualifier().(ThisExpr).getType() instanceof PointerType
				)
				and exists(ConstructorCall obj_7 | obj_7=obj_5.getArgument(0) |
					exists(ConstructorCall obj_8 | obj_8=obj_7.getArgument(0) |
						obj_8.getArgument(0).(ArrayAggregateLiteral).getValue()="{...}"
						and obj_8.getArgument(1).(Literal).getValue()="1"
					)
				)
				and obj_5.getTarget().hasName("push_back")
			)
		)
	)
	and exists(BlockStmt obj_9 | obj_9=target_7.getParent() |
		exists(IfStmt obj_10 | obj_10=obj_9.getParent() |
			obj_10.getThen().(BlockStmt).getStmt(2)=target_7
			and obj_10.getCondition()=target_30
		)
	)
	and target_7.getEnclosingFunction() = func
)
}

/*predicate func_8(Parameter vrequest_146, EqualityOperation target_46) {
exists(FunctionCall target_8 |
	exists(PointerFieldAccess obj_0 | obj_0=target_8.getQualifier() |
		obj_0.getTarget().getName()="duplicate_requests_"
		and obj_0.getQualifier().(ThisExpr).getType() instanceof PointerType
	)
	and exists(ConstructorCall obj_1 | obj_1=target_8.getArgument(0) |
		exists(ConstructorCall obj_2 | obj_2=obj_1.getArgument(0) |
			exists(ArrayAggregateLiteral obj_3 | obj_3=obj_2.getArgument(0) |
				exists(FunctionCall obj_4 | obj_4=obj_3.getAnElementExpr(0) |
					obj_4.getTarget().hasName("GetWeakPtr")
					and obj_4.getQualifier().(VariableAccess).getTarget()=vrequest_146
				)
				and obj_3.getValue()="{...}"
			)
			and obj_2.getArgument(1).(Literal).getValue()="1"
			and obj_2.getArgument(0).(ArrayAggregateLiteral).getAnElementExpr(0).(FunctionCall).getQualifier().(VariableAccess).getLocation().isBefore(target_46.getLeftOperand().(VariableAccess).getLocation())
		)
	)
	and target_8.getTarget().hasName("push_back")
)
}

*/
predicate func_9(Parameter vrequest_146, VariableAccess target_30, FunctionCall target_47) {
exists(RangeBasedForStmt target_9 |
	exists(FunctionCall obj_0 | obj_0=target_9.getCondition() |
		obj_0.getTarget().hasName("operator!=")
		and obj_0.getArgument(0).(VariableAccess).getType().hasName("iterator")
		and obj_0.getArgument(1).(VariableAccess).getType().hasName("iterator")
	)
	and exists(FunctionCall obj_1 | obj_1=target_9.getUpdate() |
		obj_1.getTarget().hasName("operator++")
		and obj_1.getQualifier().(VariableAccess).getType().hasName("iterator")
	)
	and exists(BlockStmt obj_2 | obj_2=target_9.getStmt() |
		exists(IfStmt obj_3 | obj_3=obj_2.getStmt(0) |
			exists(LogicalAndExpr obj_4 | obj_4=obj_3.getCondition() |
				exists(FunctionCall obj_5 | obj_5=obj_4.getLeftOperand() |
					obj_5.getTarget().hasName("operator bool")
					and obj_5.getQualifier().(VariableAccess).getType().hasName("const value_type &")
				)
				and exists(EqualityOperation obj_6 | obj_6=obj_4.getRightOperand() |
					exists(FunctionCall obj_7 | obj_7=obj_6.getRightOperand() |
						obj_7.getTarget().hasName("get")
						and obj_7.getQualifier().(VariableAccess).getType().hasName("const value_type &")
					)
					and obj_6.getLeftOperand().(VariableAccess).getTarget()=vrequest_146
				)
			)
		)
	)
	and exists(BlockStmt obj_8 | obj_8=target_9.getParent() |
		exists(IfStmt obj_9 | obj_9=obj_8.getParent() |
			obj_9.getThen().(BlockStmt).getStmt(3)=target_9
			and obj_9.getCondition()=target_30
		)
	)
	and target_9.getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_47.getArgument(1).(VariableAccess).getLocation())
)
}

predicate func_11(Function func) {
exists(OverloadedPointerDereferenceExpr target_11 |
	target_11.getQualifier().(VariableAccess).getType().hasName("iterator")
	and target_11.getEnclosingFunction() = func
)
}

predicate func_13(Function func) {
exists(FunctionCall target_13 |
	target_13.getTarget().hasName("begin")
	and target_13.getQualifier().(VariableAccess).getType().hasName("value_type &")
	and target_13.getEnclosingFunction() = func
)
}

/*predicate func_17(Parameter vrequest_146, ReturnStmt target_48, FunctionCall target_47) {
exists(LogicalAndExpr target_17 |
	exists(FunctionCall obj_0 | obj_0=target_17.getLeftOperand() |
		obj_0.getTarget().hasName("operator bool")
		and obj_0.getQualifier().(VariableAccess).getType().hasName("const value_type &")
	)
	and exists(EqualityOperation obj_1 | obj_1=target_17.getRightOperand() |
		exists(FunctionCall obj_2 | obj_2=obj_1.getRightOperand() |
			obj_2.getTarget().hasName("get")
			and obj_2.getQualifier().(VariableAccess).getType().hasName("const value_type &")
		)
		and obj_1.getLeftOperand().(VariableAccess).getTarget()=vrequest_146
	)
	and target_17.getParent().(IfStmt).getThen()=target_48
	and target_17.getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_47.getArgument(1).(VariableAccess).getLocation())
)
}

*/
predicate func_19(Parameter vrequest_146, VariableAccess target_30, EqualityOperation target_46, EqualityOperation target_49) {
exists(ExprStmt target_19 |
	exists(FunctionCall obj_0 | obj_0=target_19.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().hasName("GetWeakPtr")
			and obj_1.getQualifier().(VariableAccess).getTarget()=vrequest_146
		)
		and obj_0.getTarget().hasName("push_back")
		and obj_0.getQualifier().(FunctionCall).getQualifier().(VariableAccess).getType().hasName("iterator")
	)
	and exists(BlockStmt obj_2 | obj_2=target_19.getParent() |
		exists(IfStmt obj_3 | obj_3=obj_2.getParent() |
			obj_3.getThen().(BlockStmt).getStmt(4)=target_19
			and obj_3.getCondition()=target_30
		)
	)
	and target_46.getLeftOperand().(VariableAccess).getLocation().isBefore(target_19.getExpr().(FunctionCall).getArgument(0).(FunctionCall).getQualifier().(VariableAccess).getLocation())
	and target_19.getExpr().(FunctionCall).getArgument(0).(FunctionCall).getQualifier().(VariableAccess).getLocation().isBefore(target_49.getLeftOperand().(VariableAccess).getLocation())
)
}

predicate func_21(VariableAccess target_30, Function func) {
exists(ReturnStmt target_21 |
	exists(BlockStmt obj_0 | obj_0=target_21.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(5)=target_21
			and obj_1.getCondition()=target_30
		)
	)
	and target_21.getEnclosingFunction() = func
)
}

predicate func_26(Function func, PointerFieldAccess target_26) {
	target_26.getTarget().getName()="duplicate_requests_"
	and target_26.getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_26.getEnclosingFunction() = func
}

predicate func_27(Function func, PointerFieldAccess target_27) {
	target_27.getTarget().getName()="duplicate_requests_"
	and target_27.getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_27.getEnclosingFunction() = func
}

predicate func_28(Function func, ThisExpr target_28) {
	target_28.getType() instanceof PointerType
	and target_28.getEnclosingFunction() = func
}

predicate func_29(Parameter vrequest_146, VariableAccess target_29) {
	target_29.getTarget()=vrequest_146
	and target_29.getParent().(FunctionCall).getParent().(Initializer).getExpr() instanceof FunctionCall
}

predicate func_30(Variable vexisting_request_236, BlockStmt target_45, VariableAccess target_30) {
	target_30.getTarget()=vexisting_request_236
	and target_30.getParent().(IfStmt).getThen()=target_45
}

predicate func_33(Variable vexisting_request_236, EqualityOperation target_46, VariableAccess target_33) {
	exists(FunctionCall obj_0 | obj_0=target_33.getParent() |
		exists(Initializer obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="duplicate_requests_"
					and obj_3.getQualifier().(ThisExpr).getType() instanceof PointerType
				)
				and obj_2.getTarget().hasName("equal_range")
			)
		)
	)
	and target_33.getTarget()=vexisting_request_236
	and target_46.getRightOperand().(VariableAccess).getLocation().isBefore(target_33.getLocation())
}

predicate func_34(Parameter vrequest_146, Variable vrange_242, Variable vit_243, VariableAccess target_30, ForStmt target_34) {
	exists(FunctionCall obj_0 | obj_0=target_34.getCondition() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getArgument(1) |
			obj_1.getTarget().getName()="second"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vrange_242
		)
		and obj_0.getTarget().hasName("operator!=")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vit_243
	)
	and exists(FunctionCall obj_2 | obj_2=target_34.getUpdate() |
		obj_2.getTarget().hasName("operator++")
		and obj_2.getQualifier().(VariableAccess).getTarget()=vit_243
	)
	and exists(BlockStmt obj_3 | obj_3=target_34.getStmt() |
		exists(IfStmt obj_4 | obj_4=obj_3.getStmt(0) |
			exists(EqualityOperation obj_5 | obj_5=obj_4.getCondition() |
				exists(PointerFieldAccess obj_6 | obj_6=obj_5.getRightOperand() |
					obj_6.getTarget().getName()="second"
					and obj_6.getQualifier().(FunctionCall).getQualifier().(VariableAccess).getTarget()=vit_243
				)
				and obj_5.getLeftOperand().(VariableAccess).getTarget()=vrequest_146
			)
		)
	)
	and target_34.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_30
}

predicate func_36(Variable vrange_242, VariableAccess target_36) {
	target_36.getTarget()=vrange_242
}

/*predicate func_37(Variable vrange_242, Variable vit_243, BlockStmt target_51, VariableAccess target_37) {
	exists(FunctionCall obj_0 | obj_0=target_37.getParent() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getArgument(1) |
			obj_1.getTarget().getName()="second"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vrange_242
		)
		and obj_0.getParent().(ForStmt).getStmt()=target_51
	)
	and target_37.getTarget()=vit_243
}

*/
/*predicate func_38(Variable vrange_242, Variable vit_243, BlockStmt target_51, ValueFieldAccess target_38) {
	exists(FunctionCall obj_0 | obj_0=target_38.getParent() |
		obj_0.getArgument(0).(VariableAccess).getTarget()=vit_243
		and obj_0.getParent().(ForStmt).getStmt()=target_51
	)
	and target_38.getTarget().getName()="second"
	and target_38.getQualifier().(VariableAccess).getTarget()=vrange_242
}

*/
/*predicate func_39(Variable vit_243, PointerFieldAccess target_39) {
	target_39.getTarget().getName()="second"
	and target_39.getQualifier().(FunctionCall).getQualifier().(VariableAccess).getTarget()=vit_243
}

*/
/*predicate func_40(Variable vit_243, FunctionCall target_52, VariableAccess target_40) {
	target_40.getTarget()=vit_243
	and target_52.getQualifier().(VariableAccess).getLocation().isBefore(target_40.getLocation())
}

*/
predicate func_41(Parameter vrequest_146, Variable vexisting_request_236, EqualityOperation target_49, ExprStmt target_53, VariableAccess target_41) {
	exists(FunctionCall obj_0 | obj_0=target_41.getParent() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getArgument(0) |
				obj_2.getTarget().hasName("make_pair")
				and obj_2.getArgument(1).(VariableAccess).getTarget()=vrequest_146
			)
		)
	)
	and target_41.getTarget()=vexisting_request_236
	and target_49.getLeftOperand().(VariableAccess).getLocation().isBefore(target_41.getParent().(FunctionCall).getParent().(FunctionCall).getArgument(0).(FunctionCall).getArgument(1).(VariableAccess).getLocation())
	and target_41.getParent().(FunctionCall).getParent().(FunctionCall).getArgument(0).(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_53.getExpr().(FunctionCall).getQualifier().(VariableAccess).getLocation())
}

/*predicate func_42(Parameter vrequest_146, Variable vexisting_request_236, VariableAccess target_42) {
	exists(FunctionCall obj_0 | obj_0=target_42.getParent() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getArgument(0) |
				obj_2.getTarget().hasName("make_pair")
				and obj_2.getArgument(0).(VariableAccess).getTarget()=vexisting_request_236
			)
		)
	)
	and target_42.getTarget()=vrequest_146
}

*/
predicate func_45(Parameter vrequest_146, Variable vexisting_request_236, BlockStmt target_45) {
	exists(IfStmt obj_0 | obj_0=target_45.getStmt(0) |
		exists(EqualityOperation obj_1 | obj_1=obj_0.getCondition() |
			obj_1.getLeftOperand().(VariableAccess).getTarget()=vrequest_146
			and obj_1.getRightOperand().(VariableAccess).getTarget()=vexisting_request_236
		)
	)
	and target_45.getStmt(2) instanceof ForStmt
	and target_45.getStmt(3).(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_46(Parameter vrequest_146, Variable vexisting_request_236, EqualityOperation target_46) {
	target_46.getLeftOperand().(VariableAccess).getTarget()=vrequest_146
	and target_46.getRightOperand().(VariableAccess).getTarget()=vexisting_request_236
}

predicate func_47(Parameter vrequest_146, Variable vexisting_request_236, FunctionCall target_47) {
	target_47.getTarget().hasName("make_pair")
	and target_47.getArgument(0).(VariableAccess).getTarget()=vexisting_request_236
	and target_47.getArgument(1).(VariableAccess).getTarget()=vrequest_146
}

predicate func_48(EqualityOperation target_49, Function func, ReturnStmt target_48) {
	target_48.getParent().(IfStmt).getCondition()=target_49
	and target_48.getEnclosingFunction() = func
}

predicate func_49(Parameter vrequest_146, Variable vit_243, EqualityOperation target_49) {
	exists(PointerFieldAccess obj_0 | obj_0=target_49.getRightOperand() |
		obj_0.getTarget().getName()="second"
		and obj_0.getQualifier().(FunctionCall).getQualifier().(VariableAccess).getTarget()=vit_243
	)
	and target_49.getLeftOperand().(VariableAccess).getTarget()=vrequest_146
}

predicate func_51(Parameter vrequest_146, Variable vit_243, BlockStmt target_51) {
	exists(IfStmt obj_0 | obj_0=target_51.getStmt(0) |
		exists(EqualityOperation obj_1 | obj_1=obj_0.getCondition() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getRightOperand() |
				obj_2.getTarget().getName()="second"
				and obj_2.getQualifier().(FunctionCall).getQualifier().(VariableAccess).getTarget()=vit_243
			)
			and obj_1.getLeftOperand().(VariableAccess).getTarget()=vrequest_146
		)
	)
}

predicate func_52(Variable vit_243, FunctionCall target_52) {
	target_52.getTarget().hasName("operator++")
	and target_52.getQualifier().(VariableAccess).getTarget()=vit_243
}

predicate func_53(Parameter vrequest_146, ExprStmt target_53) {
	exists(FunctionCall obj_0 | obj_0=target_53.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().hasName("GetGlobalId")
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("RenderFrameHost *")
		)
		and obj_0.getTarget().hasName("set_requesting_frame_id")
		and obj_0.getQualifier().(VariableAccess).getTarget()=vrequest_146
	)
}

from Function func, Parameter vrequest_146, Variable vexisting_request_236, Variable vrange_242, Variable vit_243, Initializer target_0, Initializer target_1, Initializer target_2, FunctionCall target_3, PointerFieldAccess target_26, PointerFieldAccess target_27, ThisExpr target_28, VariableAccess target_29, VariableAccess target_30, VariableAccess target_33, ForStmt target_34, VariableAccess target_36, VariableAccess target_41, BlockStmt target_45, EqualityOperation target_46, FunctionCall target_47, ReturnStmt target_48, EqualityOperation target_49, BlockStmt target_51, FunctionCall target_52, ExprStmt target_53
where
func_0(vrequest_146, target_0)
and func_1(vexisting_request_236, target_1)
and func_2(vrange_242, target_2)
and func_3(vrequest_146, vexisting_request_236, target_3)
and not func_4(vexisting_request_236, target_45, target_46)
and not func_7(target_30, func)
and not func_9(vrequest_146, target_30, target_47)
and not func_11(func)
and not func_13(func)
and not func_19(vrequest_146, target_30, target_46, target_49)
and not func_21(target_30, func)
and func_26(func, target_26)
and func_27(func, target_27)
and func_28(func, target_28)
and func_29(vrequest_146, target_29)
and func_30(vexisting_request_236, target_45, target_30)
and func_33(vexisting_request_236, target_46, target_33)
and func_34(vrequest_146, vrange_242, vit_243, target_30, target_34)
and func_36(vrange_242, target_36)
and func_41(vrequest_146, vexisting_request_236, target_49, target_53, target_41)
and func_45(vrequest_146, vexisting_request_236, target_45)
and func_46(vrequest_146, vexisting_request_236, target_46)
and func_47(vrequest_146, vexisting_request_236, target_47)
and func_48(target_49, func, target_48)
and func_49(vrequest_146, vit_243, target_49)
and func_51(vrequest_146, vit_243, target_51)
and func_52(vit_243, target_52)
and func_53(vrequest_146, target_53)
and vrequest_146.getType().hasName("PermissionRequest *")
and vexisting_request_236.getType().hasName("PermissionRequest *")
and vrange_242.getType().hasName("pair<__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<PermissionRequest *, PermissionRequest *>, void *> *>>, __hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<PermissionRequest *, PermissionRequest *>, void *> *>>>")
and vit_243.getType().hasName("__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<PermissionRequest *, PermissionRequest *>, void *> *>>")
and vrequest_146.getFunction() = func
and vexisting_request_236.(LocalVariable).getFunction() = func
and vrange_242.(LocalVariable).getFunction() = func
and vit_243.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
