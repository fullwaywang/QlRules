commit 6e2dac5f904496d127c92ddc4e56eccfca25c2ee	6e2dac5f904496d127c92ddc4e56eccfca25c2ee
Author: Arie Haenel <arie.haenel@jct.ac.il>
Date:   Wed Jul 19 19:40:01 2023 +0000

    raw2tiff: fix integer overflow and bypass of the check (fixes #592)

diff --git a/tools/raw2tiff.c b/tools/raw2tiff.c
index 4ee59e5d..0d6b0b66 100644
--- a/tools/raw2tiff.c
+++ b/tools/raw2tiff.c
@@ -101,6 +101,7 @@ int main(int argc, char *argv[])
     int fd;
     char *outfilename = NULL;
     TIFF *out;
+    uint32_t temp_limit_check = 0;     /* temp for integer overflow checking*/
 
     uint32_t row, col, band;
     int c;
@@ -221,6 +222,33 @@ int main(int argc, char *argv[])
     if (guessSize(fd, dtype, hdr_size, nbands, swab, &width, &length) < 0)
         return EXIT_FAILURE;
 
+    /* check for integer overflow in */
+    /* hdr_size + (*width) * (*length) * nbands * depth */
+
+    if ((width == 0) || (length == 0) ){
+        fprintf(stderr, "Too large nbands value specified.\n");
+        return (EXIT_FAILURE);
+    }
+    
+    temp_limit_check = nbands * depth;
+
+    if ( !temp_limit_check || length > ( UINT_MAX / temp_limit_check ) )  {
+        fprintf(stderr, "Too large length size specified.\n");
+        return (EXIT_FAILURE);
+    }
+    temp_limit_check = temp_limit_check * length;
+
+    if ( !temp_limit_check || width > ( UINT_MAX / temp_limit_check ) )  {
+        fprintf(stderr, "Too large width size specified.\n");
+        return (EXIT_FAILURE);
+    }
+    temp_limit_check = temp_limit_check * width;
+
+    if ( !temp_limit_check || hdr_size > ( UINT_MAX - temp_limit_check ) )  {
+        fprintf(stderr, "Too large header size specified.\n");
+        return (EXIT_FAILURE);
+    }
+
     if (outfilename == NULL)
         outfilename = argv[optind + 1];
     out = TIFFOpen(outfilename, "w");
