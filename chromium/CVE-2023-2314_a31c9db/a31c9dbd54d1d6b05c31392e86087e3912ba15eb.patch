commit a31c9dbd54d1d6b05c31392e86087e3912ba15eb	a31c9dbd54d1d6b05c31392e86087e3912ba15eb
Author: Danil Somsikov <dsv@chromium.org>
Date:   Mon Apr 25 11:14:21 2022 +0000

    Add UMA metrics and console errors when mutating actions of the devtools
    HTTP server are invoked with an unsafe HTTP verb.
    
    Bug: 813542
    Change-Id: Ic4c5157ea0e7e6d8af53dd29596055c8821620a0
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3595822
    Reviewed-by: Andrey Kosyakov <caseq@chromium.org>
    Reviewed-by: Changhao Han <changhaohan@chromium.org>
    Auto-Submit: Danil Somsikov <dsv@chromium.org>
    Commit-Queue: Danil Somsikov <dsv@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#995652}

diff --git a/content/browser/devtools/devtools_http_handler.cc b/content/browser/devtools/devtools_http_handler.cc
index c3784a50e6643..b75e19e7946b0 100644
--- a/content/browser/devtools/devtools_http_handler.cc
+++ b/content/browser/devtools/devtools_http_handler.cc
@@ -18,6 +18,7 @@
 #include "base/logging.h"
 #include "base/memory/ref_counted_memory.h"
 #include "base/message_loop/message_pump_type.h"
+#include "base/metrics/histogram_macros.h"
 #include "base/strings/escape.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_util.h"
@@ -43,6 +44,7 @@
 #include "net/base/ip_endpoint.h"
 #include "net/base/net_errors.h"
 #include "net/base/url_util.h"
+#include "net/http/http_request_headers.h"
 #include "net/server/http_server.h"
 #include "net/server/http_server_request_info.h"
 #include "net/server/http_server_response_info.h"
@@ -545,6 +547,15 @@ static bool ParseJsonPath(
   return true;
 }
 
+// These values are persisted to logs. Entries should not be renumbered and
+// numeric values should never be reused.
+enum class DevToolsMutatingHttpActionVerb {
+  kGet = 0,
+  kPost = 1,
+  kOther = 2,
+  kMaxValue = kOther,
+};
+
 void DevToolsHttpHandler::OnJsonRequest(
     int connection_id,
     const net::HttpServerRequestInfo& info) {
@@ -609,6 +620,24 @@ void DevToolsHttpHandler::OnJsonRequest(
   }
 
   if (command == "new") {
+    DevToolsMutatingHttpActionVerb verb;
+    if (base::EqualsCaseInsensitiveASCII(info.method,
+                                         net::HttpRequestHeaders::kGetMethod)) {
+      verb = DevToolsMutatingHttpActionVerb::kGet;
+    } else if (base::EqualsCaseInsensitiveASCII(
+                   info.method, net::HttpRequestHeaders::kPostMethod)) {
+      verb = DevToolsMutatingHttpActionVerb::kPost;
+    } else {
+      verb = DevToolsMutatingHttpActionVerb::kOther;
+    }
+
+    UMA_HISTOGRAM_ENUMERATION("DevTools.MutatingHttpAction", verb);
+    if (verb != DevToolsMutatingHttpActionVerb::kOther) {
+      LOG(ERROR) << "Using unsafe HTTP verb " << info.method
+                 << " to invoke /json/new. This action will stop supporting "
+                    "GET and POST verbs in future versions.";
+    }
+
     GURL url(base::UnescapeBinaryURLComponent(query));
     if (!url.is_valid())
       url = GURL(url::kAboutBlankURL);
diff --git a/content/browser/devtools/devtools_http_handler_unittest.cc b/content/browser/devtools/devtools_http_handler_unittest.cc
index 10d9c579cad9e..9a99c31122861 100644
--- a/content/browser/devtools/devtools_http_handler_unittest.cc
+++ b/content/browser/devtools/devtools_http_handler_unittest.cc
@@ -17,7 +17,10 @@
 #include "base/run_loop.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_split.h"
+#include "base/strings/stringprintf.h"
 #include "base/task/single_thread_task_runner.h"
+#include "base/test/metrics/histogram_tester.h"
+#include "base/test/task_environment.h"
 #include "base/threading/thread_task_runner_handle.h"
 #include "base/values.h"
 #include "content/public/browser/browser_task_traits.h"
@@ -33,6 +36,11 @@
 #include "net/base/ip_endpoint.h"
 #include "net/base/net_errors.h"
 #include "net/socket/server_socket.h"
+#include "net/socket/tcp_server_socket.h"
+#include "net/traffic_annotation/network_traffic_annotation_test_helper.h"
+#include "net/url_request/url_request_context.h"
+#include "net/url_request/url_request_context_builder.h"
+#include "net/url_request/url_request_test_util.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
 namespace content {
@@ -105,6 +113,27 @@ class FailingServerSocketFactory : public DummyServerSocketFactory {
   }
 };
 
+class TCPServerSocketFactory : public DummyServerSocketFactory {
+ public:
+  TCPServerSocketFactory(base::OnceClosure create_socket_callback,
+                         base::OnceClosure shutdown_callback)
+      : DummyServerSocketFactory(std::move(create_socket_callback),
+                                 std::move(shutdown_callback)) {}
+
+ private:
+  std::unique_ptr<net::ServerSocket> CreateForHttpServer() override {
+    std::unique_ptr<net::ServerSocket> socket(
+        new net::TCPServerSocket(nullptr, net::NetLogSource()));
+    if (socket->ListenWithAddressAndPort("127.0.0.1", kDummyPort, 10) !=
+        net::OK) {
+      return nullptr;
+    }
+    GetUIThreadTaskRunner({})->PostTask(FROM_HERE,
+                                        std::move(create_socket_callback_));
+    return socket;
+  }
+};
+
 class BrowserClient : public ContentBrowserClient {
  public:
   BrowserClient() {}
@@ -119,7 +148,8 @@ class BrowserClient : public ContentBrowserClient {
 
 class DevToolsHttpHandlerTest : public testing::Test {
  public:
-  DevToolsHttpHandlerTest() : testing::Test() { }
+  DevToolsHttpHandlerTest()
+      : task_environment_(content::BrowserTaskEnvironment::IO_MAINLOOP) {}
 
   void SetUp() override {
     content_client_ = std::make_unique<ContentClient>();
@@ -195,4 +225,46 @@ TEST_F(DevToolsHttpHandlerTest, TestDevToolsActivePort) {
   EXPECT_EQ(static_cast<int>(kDummyPort), port);
 }
 
+TEST_F(DevToolsHttpHandlerTest, TestMutatingActionsMetrics) {
+  base::RunLoop run_loop, run_loop_2;
+  auto factory = std::make_unique<TCPServerSocketFactory>(
+      run_loop.QuitClosure(), run_loop_2.QuitClosure());
+  DevToolsAgentHost::StartRemoteDebuggingServer(
+      std::move(factory), base::FilePath(), base::FilePath());
+  // Our dummy socket factory will post a quit message once the server will
+  // become ready.
+  run_loop.Run();
+  base::HistogramTester histogram_tester;
+
+  net::TestDelegate delegate;
+  GURL url(base::StringPrintf("http://127.0.0.1:%d/json/new", kDummyPort));
+  auto request_context = net::CreateTestURLRequestContextBuilder()->Build();
+  auto request = request_context->CreateRequest(
+      url, net::DEFAULT_PRIORITY, &delegate, TRAFFIC_ANNOTATION_FOR_TESTS);
+  request->Start();
+  delegate.RunUntilComplete();
+  EXPECT_GE(delegate.request_status(), 0);
+  histogram_tester.ExpectBucketCount("DevTools.MutatingHttpAction", 0, 1);
+
+  request = request_context->CreateRequest(
+      url, net::DEFAULT_PRIORITY, &delegate, TRAFFIC_ANNOTATION_FOR_TESTS);
+  request->set_method("POST");
+  request->Start();
+  delegate.RunUntilComplete();
+  EXPECT_GE(delegate.request_status(), 0);
+  histogram_tester.ExpectBucketCount("DevTools.MutatingHttpAction", 1, 1);
+
+  request = request_context->CreateRequest(
+      url, net::DEFAULT_PRIORITY, &delegate, TRAFFIC_ANNOTATION_FOR_TESTS);
+  request->set_method("PUT");
+  request->Start();
+  delegate.RunUntilComplete();
+  EXPECT_GE(delegate.request_status(), 0);
+  histogram_tester.ExpectBucketCount("DevTools.MutatingHttpAction", 2, 1);
+
+  DevToolsAgentHost::StopRemoteDebuggingServer();
+  // Make sure the handler actually stops.
+  run_loop_2.Run();
+}
+
 }  // namespace content
diff --git a/tools/metrics/histograms/enums.xml b/tools/metrics/histograms/enums.xml
index 5080a166244ca..0b8d96ca136af 100644
--- a/tools/metrics/histograms/enums.xml
+++ b/tools/metrics/histograms/enums.xml
@@ -22891,6 +22891,12 @@ Called by update_debug_scenarios.py.-->
   <int value="4" label="WebAssembly.Memory"/>
 </enum>
 
+<enum name="DevToolsMutatingHttpActionVerb">
+  <int value="0" label="GET"/>
+  <int value="1" label="POST"/>
+  <int value="2" label="OTHER"/>
+</enum>
+
 <enum name="DevToolsOpenedByAction">
   <int value="1" label="Main menu or main shortcut"/>
   <int value="2" label="Console tab shortcut"/>
diff --git a/tools/metrics/histograms/metadata/dev/histograms.xml b/tools/metrics/histograms/metadata/dev/histograms.xml
index e5ece55607c17..6c5b2de453a12 100644
--- a/tools/metrics/histograms/metadata/dev/histograms.xml
+++ b/tools/metrics/histograms/metadata/dev/histograms.xml
@@ -293,6 +293,16 @@ chromium-metrics-reviews@google.com.
   </summary>
 </histogram>
 
+<histogram name="DevTools.MutatingHttpAction"
+    enum="DevToolsMutatingHttpActionVerb" expires_after="2022-12-31">
+  <owner>dsv@chromium.org</owner>
+  <owner>caseq@chromium.org</owner>
+  <summary>
+    Records the invocation of actions like /json/new on the HTTP server exposed
+    with running with --remote-debugging-port.
+  </summary>
+</histogram>
+
 <histogram name="DevTools.OpenedByAction" enum="DevToolsOpenedByAction"
     expires_after="2022-12-01">
   <owner>changhaohan@chromium.org</owner>
