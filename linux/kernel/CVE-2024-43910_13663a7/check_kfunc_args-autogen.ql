/**
 * @name linux-13663a7c644bf1dedaf461d07252db5d76c8759a-check_kfunc_args
 * @id cpp/linux/13663a7c644bf1dedaf461d07252db5d76c8759a/check-kfunc-args
 * @description linux-13663a7c644bf1dedaf461d07252db5d76c8759a-kernel/bpf/verifier.c-check_kfunc_args CVE-2024-43910
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vreg_11751, PointerFieldAccess target_0) {
	target_0.getTarget().getName()="type"
	and target_0.getQualifier().(VariableAccess).getTarget()=vreg_11751
}

predicate func_1(Variable vreg_11751, PointerFieldAccess target_1) {
	target_1.getTarget().getName()="type"
	and target_1.getQualifier().(VariableAccess).getTarget()=vreg_11751
}

predicate func_2(Function func, UnaryMinusExpr target_2) {
	target_2.getValue()="-22"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vi_11736, Variable vreg_11751, Parameter venv_11729, IfStmt target_3) {
	exists(LogicalAndExpr obj_0 | obj_0=target_3.getCondition() |
		exists(EqualityOperation obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getLeftOperand() |
				obj_2.getTarget().getName()="type"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vreg_11751
			)
		)
		and exists(EqualityOperation obj_3 | obj_3=obj_0.getRightOperand() |
			exists(PointerFieldAccess obj_4 | obj_4=obj_3.getLeftOperand() |
				obj_4.getTarget().getName()="type"
				and obj_4.getQualifier().(VariableAccess).getTarget()=vreg_11751
			)
		)
	)
	and exists(BlockStmt obj_5 | obj_5=target_3.getThen() |
		exists(ExprStmt obj_6 | obj_6=obj_5.getStmt(0) |
			exists(FunctionCall obj_7 | obj_7=obj_6.getExpr() |
				obj_7.getTarget().hasName("verbose")
				and obj_7.getArgument(0).(VariableAccess).getTarget()=venv_11729
				and obj_7.getArgument(1).(StringLiteral).getValue()="arg#%d expected pointer to stack or dynptr_ptr\n"
				and obj_7.getArgument(2).(VariableAccess).getTarget()=vi_11736
			)
		)
		and obj_5.getStmt(1).(ReturnStmt).getExpr() instanceof UnaryMinusExpr
	)
}

/*predicate func_4(Variable vi_11736, Parameter venv_11729, LogicalAndExpr target_6, ExprStmt target_4) {
	exists(FunctionCall obj_0 | obj_0=target_4.getExpr() |
		obj_0.getTarget().hasName("verbose")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=venv_11729
		and obj_0.getArgument(1).(StringLiteral).getValue()="arg#%d expected pointer to stack or dynptr_ptr\n"
		and obj_0.getArgument(2).(VariableAccess).getTarget()=vi_11736
	)
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

*/
/*predicate func_5(LogicalAndExpr target_6, Function func, ReturnStmt target_5) {
	target_5.getExpr() instanceof UnaryMinusExpr
	and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
	and target_5.getEnclosingFunction() = func
}

*/
predicate func_6(Function func, LogicalAndExpr target_6) {
	target_6.getLeftOperand() instanceof EqualityOperation
	and target_6.getRightOperand() instanceof EqualityOperation
	and target_6.getEnclosingFunction() = func
}

from Function func, Variable vi_11736, Variable vreg_11751, Parameter venv_11729, PointerFieldAccess target_0, PointerFieldAccess target_1, UnaryMinusExpr target_2, IfStmt target_3, LogicalAndExpr target_6
where
func_0(vreg_11751, target_0)
and func_1(vreg_11751, target_1)
and func_2(func, target_2)
and func_3(vi_11736, vreg_11751, venv_11729, target_3)
and func_6(func, target_6)
and vi_11736.getType().hasName("u32")
and vreg_11751.getType().hasName("bpf_reg_state *")
and venv_11729.getType().hasName("bpf_verifier_env *")
and vi_11736.(LocalVariable).getFunction() = func
and vreg_11751.(LocalVariable).getFunction() = func
and venv_11729.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
