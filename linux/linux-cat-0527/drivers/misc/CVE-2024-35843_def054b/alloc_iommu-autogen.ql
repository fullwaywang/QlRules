/**
 * @name linux-def054b01a867822254e1dda13d587f5c7a99e2a-alloc_iommu
 * @id cpp/linux/def054b01a867822254e1dda13d587f5c7a99e2a/alloc-iommu
 * @description linux-def054b01a867822254e1dda13d587f5c7a99e2a-drivers/iommu/intel/dmar.c-alloc_iommu CVE-2024-35843
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, SizeofExprOperator target_0) {
	target_0.getValue()="672"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable viommu_1040, ExprStmt target_2, AddressOfExpr target_3, Function func) {
exists(DoStmt target_1 |
	target_1.getCondition().(Literal).getValue()="0"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__mutex_init")
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="iopf_lock"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=viommu_1040
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="&iommu->iopf_lock"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("lock_class_key")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_2.getLocation())
	and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable viommu_1040, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="node"
	and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=viommu_1040
	and target_2.getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-1"
}

predicate func_3(Variable viommu_1040, AddressOfExpr target_3) {
	target_3.getOperand().(PointerFieldAccess).getTarget().getName()="device_rbtree_lock"
	and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=viommu_1040
}

from Function func, Variable viommu_1040, SizeofExprOperator target_0, ExprStmt target_2, AddressOfExpr target_3
where
func_0(func, target_0)
and not func_1(viommu_1040, target_2, target_3, func)
and func_2(viommu_1040, target_2)
and func_3(viommu_1040, target_3)
and viommu_1040.getType().hasName("intel_iommu *")
and viommu_1040.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
