/**
 * @name linux-be0726d33cb8f411945884664924bed3cb8c70ee-ext2_xattr_set2
 * @id cpp/linux/be0726d33cb8f411945884664924bed3cb8c70ee/ext2-xattr-set2
 * @description linux-be0726d33cb8f411945884664924bed3cb8c70ee-fs/ext2/xattr.c-ext2_xattr_set2 CVE-2015-8952
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vce_710, FunctionCall target_0) {
	target_0.getTarget().hasName("mb_cache_entry_free")
	and not target_0.getTarget().hasName("mb2_cache_entry_delete_block")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vce_710
}

predicate func_6(Parameter vold_bh_623, PointerFieldAccess target_6) {
	target_6.getTarget().getName()="b_blocknr"
	and target_6.getQualifier().(VariableAccess).getTarget()=vold_bh_623
	and target_6.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_7(Parameter vold_bh_623, VariableAccess target_7) {
	target_7.getTarget()=vold_bh_623
	and target_7.getParent().(PointerFieldAccess).getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_9(Parameter vold_bh_623, Variable vce_710, Variable vext2_xattr_cache, AssignExpr target_9) {
	target_9.getLValue().(VariableAccess).getTarget()=vce_710
	and target_9.getRValue().(FunctionCall).getTarget().hasName("mb_cache_entry_get")
	and target_9.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vext2_xattr_cache
	and target_9.getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="b_bdev"
	and target_9.getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vold_bh_623
	and target_9.getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="b_blocknr"
	and target_9.getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vold_bh_623
}

predicate func_10(Variable vce_710, EqualityOperation target_12, IfStmt target_10) {
	target_10.getCondition().(VariableAccess).getTarget()=vce_710
	and target_10.getThen().(ExprStmt).getExpr() instanceof FunctionCall
	and target_10.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12
}

predicate func_11(Variable vce_710, EqualityOperation target_12, IfStmt target_11) {
	target_11.getCondition().(VariableAccess).getTarget()=vce_710
	and target_11.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mb_cache_entry_release")
	and target_11.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vce_710
	and target_11.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12
}

predicate func_12(Parameter vold_bh_623, EqualityOperation target_12) {
	target_12.getLeftOperand().(PointerFieldAccess).getTarget().getName()="h_refcount"
	and target_12.getLeftOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="b_data"
	and target_12.getLeftOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vold_bh_623
	and target_12.getRightOperand().(Literal).getValue()="1"
}

from Function func, Parameter vold_bh_623, Variable vce_710, Variable vext2_xattr_cache, FunctionCall target_0, PointerFieldAccess target_6, VariableAccess target_7, AssignExpr target_9, IfStmt target_10, IfStmt target_11, EqualityOperation target_12
where
func_0(vce_710, target_0)
and func_6(vold_bh_623, target_6)
and func_7(vold_bh_623, target_7)
and func_9(vold_bh_623, vce_710, vext2_xattr_cache, target_9)
and func_10(vce_710, target_12, target_10)
and func_11(vce_710, target_12, target_11)
and func_12(vold_bh_623, target_12)
and vold_bh_623.getType().hasName("buffer_head *")
and vce_710.getType().hasName("mb_cache_entry *")
and vext2_xattr_cache.getType().hasName("mb_cache *")
and vold_bh_623.getFunction() = func
and vce_710.(LocalVariable).getFunction() = func
and not vext2_xattr_cache.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
