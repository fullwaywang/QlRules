/**
 * @name linux-d5aa407f-sit_init
 * @id cpp/linux/d5aa407f/sit-init
 * @description linux-d5aa407f-net/ipv6/sit.c-sit_init CVE-2011-1768
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable verr_1226, RelationalOperation target_8, ReturnStmt target_5) {
	exists(AssignExpr target_0 |
		target_0.getLValue().(VariableAccess).getTarget()=verr_1226
		and target_0.getRValue() instanceof FunctionCall
		and target_8.getLesserOperand().(VariableAccess).getLocation().isBefore(target_0.getLValue().(VariableAccess).getLocation())
		and target_0.getLValue().(VariableAccess).getLocation().isBefore(target_5.getExpr().(VariableAccess).getLocation()))
}

predicate func_2(RelationalOperation target_9, Function func) {
	exists(ExprStmt target_2 |
		target_2.getExpr().(FunctionCall).getTarget().hasName("unregister_pernet_device")
		and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("pernet_operations")
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_2
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
		and target_2.getEnclosingFunction() = func)
}

predicate func_4(Variable vsit_handler, BlockStmt target_10, FunctionCall target_4) {
		target_4.getTarget().hasName("xfrm4_tunnel_register")
		and target_4.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vsit_handler
		and target_4.getArgument(1).(Literal).getValue()="10"
		and target_4.getParent().(LTExpr).getGreaterOperand().(Literal).getValue()="0"
		and target_4.getParent().(LTExpr).getParent().(IfStmt).getThen()=target_10
}

predicate func_5(Variable verr_1226, Function func, ReturnStmt target_5) {
		target_5.getExpr().(VariableAccess).getTarget()=verr_1226
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

predicate func_6(Function func, UnaryMinusExpr target_6) {
		target_6.getValue()="-11"
		and target_6.getEnclosingFunction() = func
}

predicate func_7(Variable vsit_handler, FunctionCall target_7) {
		target_7.getTarget().hasName("xfrm4_tunnel_deregister")
		and target_7.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vsit_handler
		and target_7.getArgument(1).(Literal).getValue()="10"
}

predicate func_8(Variable verr_1226, RelationalOperation target_8) {
		 (target_8 instanceof GTExpr or target_8 instanceof LTExpr)
		and target_8.getLesserOperand().(VariableAccess).getTarget()=verr_1226
		and target_8.getGreaterOperand().(Literal).getValue()="0"
}

predicate func_9(Function func, RelationalOperation target_9) {
		 (target_9 instanceof GTExpr or target_9 instanceof LTExpr)
		and target_9.getLesserOperand() instanceof FunctionCall
		and target_9.getGreaterOperand().(Literal).getValue()="0"
		and target_9.getEnclosingFunction() = func
}

predicate func_10(Function func, BlockStmt target_10) {
		target_10.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("printk")
		and target_10.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="<6>sit init: Can't add protocol\n"
		and target_10.getStmt(1).(ReturnStmt).getExpr() instanceof UnaryMinusExpr
		and target_10.getEnclosingFunction() = func
}

from Function func, Variable vsit_handler, Variable verr_1226, FunctionCall target_4, ReturnStmt target_5, UnaryMinusExpr target_6, FunctionCall target_7, RelationalOperation target_8, RelationalOperation target_9, BlockStmt target_10
where
not func_0(verr_1226, target_8, target_5)
and not func_2(target_9, func)
and func_4(vsit_handler, target_10, target_4)
and func_5(verr_1226, func, target_5)
and func_6(func, target_6)
and func_7(vsit_handler, target_7)
and func_8(verr_1226, target_8)
and func_9(func, target_9)
and func_10(func, target_10)
and vsit_handler.getType().hasName("xfrm_tunnel")
and verr_1226.getType().hasName("int")
and not vsit_handler.getParentScope+() = func
and verr_1226.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
