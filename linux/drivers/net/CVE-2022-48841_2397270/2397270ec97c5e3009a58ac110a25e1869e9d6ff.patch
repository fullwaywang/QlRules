commit 2397270ec97c5e3009a58ac110a25e1869e9d6ff
Author: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
Date:   Mon Mar 7 18:47:39 2022 +0100

    ice: fix NULL pointer dereference in ice_update_vsi_tx_ring_stats()
    
    [ Upstream commit f153546913bada41a811722f2c6d17c3243a0333 ]
    
    It is possible to do NULL pointer dereference in routine that updates
    Tx ring stats. Currently only stats and bytes are updated when ring
    pointer is valid, but later on ring is accessed to propagate gathered Tx
    stats onto VSI stats.
    
    Change the existing logic to move to next ring when ring is NULL.
    
    Fixes: e72bba21355d ("ice: split ice_ring onto Tx/Rx separate structs")
    Reported-by: kernel test robot <lkp@intel.com>
    Reported-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Maciej Fijalkowski <maciej.fijalkowski@intel.com>
    Acked-by: Alexander Lobakin <alexandr.lobakin@intel.com>
    Tested-by: Gurucharan G <gurucharanx.g@intel.com> (A Contingent worker at Intel)
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/drivers/net/ethernet/intel/ice/ice_main.c b/drivers/net/ethernet/intel/ice/ice_main.c
index 8a6c3716cdab..b449b3408a1c 100644
--- a/drivers/net/ethernet/intel/ice/ice_main.c
+++ b/drivers/net/ethernet/intel/ice/ice_main.c
@@ -5972,8 +5972,9 @@ ice_update_vsi_tx_ring_stats(struct ice_vsi *vsi,
 		u64 pkts = 0, bytes = 0;
 
 		ring = READ_ONCE(rings[i]);
-		if (ring)
-			ice_fetch_u64_stats_per_ring(&ring->syncp, ring->stats, &pkts, &bytes);
+		if (!ring)
+			continue;
+		ice_fetch_u64_stats_per_ring(&ring->syncp, ring->stats, &pkts, &bytes);
 		vsi_stats->tx_packets += pkts;
 		vsi_stats->tx_bytes += bytes;
 		vsi->tx_restart += ring->tx_stats.restart_q;
