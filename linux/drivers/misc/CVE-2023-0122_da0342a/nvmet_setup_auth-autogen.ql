/**
 * @name linux-da0342a3aa0357795224e6283df86444e1117168-nvmet_setup_auth
 * @id cpp/linux/da0342a3aa0357795224e6283df86444e1117168/nvmet-setup-auth
 * @description linux-da0342a3aa0357795224e6283df86444e1117168-drivers/nvme/target/auth.c-nvmet_setup_auth CVE-2023-0122
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(FunctionCall target_1, Function func) {
exists(GotoStmt target_0 |
	target_0.getName() ="out_free_hash"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_0.getEnclosingFunction() = func)
}

predicate func_1(Function func, FunctionCall target_1) {
	target_1.getTarget().hasName("IS_ERR")
	and target_1.getArgument(0).(PointerFieldAccess).getTarget().getName()="ctrl_key"
	and target_1.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("nvmet_ctrl *")
	and target_1.getEnclosingFunction() = func
}

from Function func, FunctionCall target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
