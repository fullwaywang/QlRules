commit ae0bed1fe530a82faf2e9ea1775109dbf301a971 (from 933784a10a2076e07644aba7e4a8d79d1f25cb26)	ae0bed1fe530a82faf2e9ea1775109dbf301a971
Merge: 933784a1 0c74a9f4
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Sat Feb 2 14:46:05 2019 +0000

    Merge branch 'master' into 'master'
    
    Fix for simple memory leak that was assigned CVE-2019-6128.
    
    See merge request libtiff/libtiff!50

diff --git a/tools/pal2rgb.c b/tools/pal2rgb.c
index 01d8502e..9492f1cf 100644
--- a/tools/pal2rgb.c
+++ b/tools/pal2rgb.c
@@ -118,12 +118,14 @@ main(int argc, char* argv[])
 	    shortv != PHOTOMETRIC_PALETTE) {
 		fprintf(stderr, "%s: Expecting a palette image.\n",
 		    argv[optind]);
+		(void) TIFFClose(in);
 		return (-1);
 	}
 	if (!TIFFGetField(in, TIFFTAG_COLORMAP, &rmap, &gmap, &bmap)) {
 		fprintf(stderr,
 		    "%s: No colormap (not a valid palette image).\n",
 		    argv[optind]);
+		(void) TIFFClose(in);
 		return (-1);
 	}
 	bitspersample = 0;
@@ -131,11 +133,14 @@ main(int argc, char* argv[])
 	if (bitspersample != 8) {
 		fprintf(stderr, "%s: Sorry, can only handle 8-bit images.\n",
 		    argv[optind]);
+		(void) TIFFClose(in);
 		return (-1);
 	}
 	out = TIFFOpen(argv[optind+1], "w");
-	if (out == NULL)
+	if (out == NULL) {
+		(void) TIFFClose(in);
 		return (-2);
+	}
 	cpTags(in, out);
 	TIFFGetField(in, TIFFTAG_IMAGEWIDTH, &imagewidth);
 	TIFFGetField(in, TIFFTAG_IMAGELENGTH, &imagelength);

commit ae0bed1fe530a82faf2e9ea1775109dbf301a971 (from 0c74a9f49b8d7a36b17b54a7428b3526d20f88a8)	ae0bed1fe530a82faf2e9ea1775109dbf301a971
Merge: 933784a1 0c74a9f4
Author: Even Rouault <even.rouault@spatialys.com>
Date:   Sat Feb 2 14:46:05 2019 +0000

    Merge branch 'master' into 'master'
    
    Fix for simple memory leak that was assigned CVE-2019-6128.
    
    See merge request libtiff/libtiff!50

diff --git a/.gitignore b/.gitignore
index 64b08bde..a48b1f03 100644
--- a/.gitignore
+++ b/.gitignore
@@ -43,6 +43,8 @@ tools/fax2tiff
 tools/pal2rgb
 tools/ppm2tiff
 tools/raw2tiff
+tools/rgb2ycbcr
+tools/thumbnail
 tools/tiff2bw
 tools/tiff2pdf
 tools/tiff2ps
@@ -52,7 +54,18 @@ tools/tiffcp
 tools/tiffcrop
 tools/tiffdither
 tools/tiffdump
+tools/tiffgt
 tools/tiffinfo
 tools/tiffmedian
 tools/tiffset
 tools/tiffsplit
+test/ascii_tag
+test/custom_dir
+test/long_tag
+test/raw_decode
+test/rewrite
+test/short_tag
+test/strip_rw
+test/*.log
+test/*.trs
+test/o-*
diff --git a/libtiff/tif_dir.c b/libtiff/tif_dir.c
index 6f0b4879..028ea54a 100644
--- a/libtiff/tif_dir.c
+++ b/libtiff/tif_dir.c
@@ -88,13 +88,15 @@ setDoubleArrayOneValue(double** vpp, double value, size_t nmemb)
  * Install extra samples information.
  */
 static int
-setExtraSamples(TIFFDirectory* td, va_list ap, uint32* v)
+setExtraSamples(TIFF* tif, va_list ap, uint32* v)
 {
 /* XXX: Unassociated alpha data == 999 is a known Corel Draw bug, see below */
 #define EXTRASAMPLE_COREL_UNASSALPHA 999 
 
 	uint16* va;
 	uint32 i;
+        TIFFDirectory* td = &tif->tif_dir;
+        static const char module[] = "setExtraSamples";
 
 	*v = (uint16) va_arg(ap, uint16_vap);
 	if ((uint16) *v > td->td_samplesperpixel)
@@ -116,6 +118,18 @@ setExtraSamples(TIFFDirectory* td, va_list ap, uint32* v)
 				return 0;
 		}
 	}
+
+        if ( td->td_transferfunction[0] != NULL && (td->td_samplesperpixel - *v > 1) &&
+                !(td->td_samplesperpixel - td->td_extrasamples > 1))
+        {
+                TIFFWarningExt(tif->tif_clientdata,module,
+                    "ExtraSamples tag value is changing, "
+                    "but TransferFunction was read with a different value. Cancelling it");
+                TIFFClrFieldBit(tif,FIELD_TRANSFERFUNCTION);
+                _TIFFfree(td->td_transferfunction[0]);
+                td->td_transferfunction[0] = NULL;
+        }
+
 	td->td_extrasamples = (uint16) *v;
 	_TIFFsetShortArray(&td->td_sampleinfo, va, td->td_extrasamples);
 	return 1;
@@ -285,6 +299,18 @@ _TIFFVSetField(TIFF* tif, uint32 tag, va_list ap)
                 _TIFFfree(td->td_smaxsamplevalue);
                 td->td_smaxsamplevalue = NULL;
             }
+            /* Test if 3 transfer functions instead of just one are now needed
+               See http://bugzilla.maptools.org/show_bug.cgi?id=2820 */
+            if( td->td_transferfunction[0] != NULL && (v - td->td_extrasamples > 1) &&
+                !(td->td_samplesperpixel - td->td_extrasamples > 1))
+            {
+                    TIFFWarningExt(tif->tif_clientdata,module,
+                        "SamplesPerPixel tag value is changing, "
+                        "but TransferFunction was read with a different value. Cancelling it");
+                    TIFFClrFieldBit(tif,FIELD_TRANSFERFUNCTION);
+                    _TIFFfree(td->td_transferfunction[0]);
+                    td->td_transferfunction[0] = NULL;
+            }
         }
 		td->td_samplesperpixel = (uint16) v;
 		break;
@@ -361,7 +387,7 @@ _TIFFVSetField(TIFF* tif, uint32 tag, va_list ap)
 		_TIFFsetShortArray(&td->td_colormap[2], va_arg(ap, uint16*), v32);
 		break;
 	case TIFFTAG_EXTRASAMPLES:
-		if (!setExtraSamples(td, ap, &v))
+		if (!setExtraSamples(tif, ap, &v))
 			goto badvalue;
 		break;
 	case TIFFTAG_MATTEING:
diff --git a/libtiff/tif_dirwrite.c b/libtiff/tif_dirwrite.c
index c15a28db..ef30c869 100644
--- a/libtiff/tif_dirwrite.c
+++ b/libtiff/tif_dirwrite.c
@@ -1893,12 +1893,14 @@ TIFFWriteDirectoryTagTransferfunction(TIFF* tif, uint32* ndir, TIFFDirEntry* dir
 		n=3;
 	if (n==3)
 	{
-		if (!_TIFFmemcmp(tif->tif_dir.td_transferfunction[0],tif->tif_dir.td_transferfunction[2],m*sizeof(uint16)))
+		if (tif->tif_dir.td_transferfunction[2] == NULL ||
+		    !_TIFFmemcmp(tif->tif_dir.td_transferfunction[0],tif->tif_dir.td_transferfunction[2],m*sizeof(uint16)))
 			n=2;
 	}
 	if (n==2)
 	{
-		if (!_TIFFmemcmp(tif->tif_dir.td_transferfunction[0],tif->tif_dir.td_transferfunction[1],m*sizeof(uint16)))
+		if (tif->tif_dir.td_transferfunction[1] == NULL ||
+		    !_TIFFmemcmp(tif->tif_dir.td_transferfunction[0],tif->tif_dir.td_transferfunction[1],m*sizeof(uint16)))
 			n=1;
 	}
 	if (n==0)
diff --git a/tools/tiff2ps.c b/tools/tiff2ps.c
index 5660a68b..a5b943ec 100644
--- a/tools/tiff2ps.c
+++ b/tools/tiff2ps.c
@@ -2264,7 +2264,7 @@ PS_Lvl2page(FILE* fd, TIFF* tif, uint32 w, uint32 h)
 		if (alpha) {
 			int adjust, i, j = 0;
 			int ncomps = samplesperpixel - extrasamples;
-			for (i = 0; i < byte_count; i+=samplesperpixel) {
+			for (i = 0; (i + ncomps) < byte_count; i+=samplesperpixel) {
 				adjust = 255 - buf_data[i + ncomps];
 				switch (ncomps) {
 					case 1:
diff --git a/tools/tiffcrop.c b/tools/tiffcrop.c
index edb1addf..bf52229f 100644
--- a/tools/tiffcrop.c
+++ b/tools/tiffcrop.c
@@ -2108,8 +2108,8 @@ update_output_file (TIFF **tiffout, char *mode, int autoindex,
                     char *outname, unsigned int *page)
   {
   static int findex = 0;    /* file sequence indicator */
+  size_t basename_len;
   char  *sep;
-  char   filenum[18];
   char   export_ext[16];
   char   exportname[PATH_MAX];
 
@@ -2120,12 +2120,13 @@ update_output_file (TIFF **tiffout, char *mode, int autoindex,
     *tiffout = NULL;
     }
 
-  strcpy (export_ext, ".tiff");
-  memset (filenum, '\0', sizeof(filenum));
+  memcpy (export_ext, ".tiff", 6);
   memset (exportname, '\0', sizeof(exportname));
 
-  /* Leave room for page number portion of the new filename */
-  strncpy (exportname, outname, sizeof(exportname) - sizeof(filenum));
+  /* Leave room for page number portion of the new filename :
+   * hyphen + 6 digits + dot + 4 extension characters + null terminator */
+  #define FILENUM_MAX_LENGTH (1+6+1+4+1)
+  strncpy (exportname, outname, sizeof(exportname) - FILENUM_MAX_LENGTH);
   if (*tiffout == NULL)   /* This is a new export file */
     {
     if (autoindex)
@@ -2137,8 +2138,9 @@ update_output_file (TIFF **tiffout, char *mode, int autoindex,
         *sep = '\0';
         }
       else
-        strncpy (export_ext, ".tiff", 5);
+        memcpy (export_ext, ".tiff", 5);
       export_ext[5] = '\0';
+      basename_len = strlen(exportname);
 
       /* MAX_EXPORT_PAGES limited to 6 digits to prevent string overflow of pathname */
       if (findex > MAX_EXPORT_PAGES)
@@ -2147,10 +2149,8 @@ update_output_file (TIFF **tiffout, char *mode, int autoindex,
         return 1;
         }
 
-      snprintf(filenum, sizeof(filenum), "-%03d%.5s", findex, export_ext);
-      filenum[sizeof(filenum)-1] = '\0';
-      /* We previously assured that there will be space for 'filenum' */
-      strcat (exportname, filenum);
+      /* We previously assured that there will be space left */
+      snprintf(exportname + basename_len, sizeof(exportname) - basename_len, "-%03d%.5s", findex, export_ext);
       }
     exportname[sizeof(exportname) - 1] = '\0';
 
