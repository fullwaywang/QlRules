/**
 * @name linux-0838d6d68182f0b28a5434bc6d50727c4757e35b-asymmetric_verify
 * @id cpp/linux/0838d6d68182f0b28a5434bc6d50727c4757e35b/asymmetric-verify
 * @description linux-0838d6d68182f0b28a5434bc6d50727c4757e35b-security/integrity/digsig_asymmetric.c-asymmetric_verify CVE-2022-48831
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vret_89, LogicalOrExpr target_7) {
exists(ExprStmt target_0 |
	exists(AssignExpr obj_0 | obj_0=target_0.getExpr() |
		obj_0.getLValue().(VariableAccess).getTarget()=vret_89
		and obj_0.getRValue() instanceof UnaryMinusExpr
	)
	and exists(BlockStmt obj_1 | obj_1=target_0.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getElse().(BlockStmt).getStmt(0)=target_0
			and obj_2.getCondition()=target_7
		)
	)
)
}

predicate func_1(LogicalOrExpr target_7, Function func) {
exists(GotoStmt target_1 |
	exists(BlockStmt obj_0 | obj_0=target_1.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getElse().(BlockStmt).getStmt(1)=target_1
			and obj_1.getCondition()=target_7
		)
	)
	and target_1.getName() ="out"
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(Variable vpks_85, NotExpr target_9, ExprStmt target_2) {
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="encoding"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vpks_85
		)
		and obj_0.getRValue().(StringLiteral).getValue()="pkcs1"
	)
	and target_2.getParent().(IfStmt).getCondition()=target_9
}

predicate func_3(Variable vpks_85, NotExpr target_9, ExprStmt target_3) {
	exists(AssignExpr obj_0 | obj_0=target_3.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="encoding"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vpks_85
		)
		and obj_0.getRValue().(StringLiteral).getValue()="x962"
	)
	and target_3.getParent().(IfStmt).getParent().(IfStmt).getCondition()=target_9
}

predicate func_4(Variable vpks_85, NotExpr target_10, ExprStmt target_4) {
	exists(AssignExpr obj_0 | obj_0=target_4.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="encoding"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vpks_85
		)
		and obj_0.getRValue().(StringLiteral).getValue()="raw"
	)
	and target_4.getParent().(IfStmt).getParent().(IfStmt).getCondition()=target_10
}

predicate func_5(Function func, UnaryMinusExpr target_5) {
	target_5.getValue()="-65"
	and target_5.getEnclosingFunction() = func
}

predicate func_6(NotExpr target_10, Function func, ReturnStmt target_6) {
	target_6.getExpr() instanceof UnaryMinusExpr
	and target_6.getParent().(IfStmt).getParent().(IfStmt).getCondition()=target_10
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Function func, LogicalOrExpr target_7) {
	exists(NotExpr obj_0 | obj_0=target_7.getLeftOperand() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getOperand() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getArgument(0) |
				obj_2.getTarget().getName()="pkey_algo"
				and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("const public_key *")
			)
			and obj_1.getTarget().hasName("strcmp")
			and obj_1.getArgument(1).(StringLiteral).getValue()="ecrdsa"
		)
	)
	and exists(NotExpr obj_3 | obj_3=target_7.getRightOperand() |
		exists(FunctionCall obj_4 | obj_4=obj_3.getOperand() |
			exists(PointerFieldAccess obj_5 | obj_5=obj_4.getArgument(0) |
				obj_5.getTarget().getName()="pkey_algo"
				and obj_5.getQualifier().(VariableAccess).getTarget().getType().hasName("const public_key *")
			)
			and obj_4.getTarget().hasName("strcmp")
			and obj_4.getArgument(1).(StringLiteral).getValue()="sm2"
		)
	)
	and target_7.getEnclosingFunction() = func
}

predicate func_9(Function func, NotExpr target_9) {
	exists(FunctionCall obj_0 | obj_0=target_9.getOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().getName()="pkey_algo"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("const public_key *")
		)
		and obj_0.getTarget().hasName("strcmp")
		and obj_0.getArgument(1).(StringLiteral).getValue()="rsa"
	)
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Function func, NotExpr target_10) {
	exists(FunctionCall obj_0 | obj_0=target_10.getOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().getName()="pkey_algo"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("const public_key *")
		)
		and obj_0.getTarget().hasName("strncmp")
		and obj_0.getArgument(1).(StringLiteral).getValue()="ecdsa-"
		and obj_0.getArgument(2).(Literal).getValue()="6"
	)
	and target_10.getEnclosingFunction() = func
}

from Function func, Variable vpks_85, Variable vret_89, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, UnaryMinusExpr target_5, ReturnStmt target_6, LogicalOrExpr target_7, NotExpr target_9, NotExpr target_10
where
not func_0(vret_89, target_7)
and not func_1(target_7, func)
and func_2(vpks_85, target_9, target_2)
and func_3(vpks_85, target_9, target_3)
and func_4(vpks_85, target_10, target_4)
and func_5(func, target_5)
and func_6(target_10, func, target_6)
and func_7(func, target_7)
and func_9(func, target_9)
and func_10(func, target_10)
and vpks_85.getType().hasName("public_key_signature")
and vret_89.getType().hasName("int")
and vpks_85.(LocalVariable).getFunction() = func
and vret_89.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
