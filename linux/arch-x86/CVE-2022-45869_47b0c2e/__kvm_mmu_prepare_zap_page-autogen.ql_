/**
 * @name linux-47b0c2e4c220f2251fd8dcfbb44479819c715e15-__kvm_mmu_prepare_zap_page
 * @id cpp/linux/47b0c2e4c220f2251fd8dcfbb44479819c715e15/--kvm-mmu-prepare-zap-page
 * @description linux-47b0c2e4c220f2251fd8dcfbb44479819c715e15-arch/x86/kvm/mmu/mmu.c-__kvm_mmu_prepare_zap_page CVE-2022-45869
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_1, Function func) {
exists(DoStmt target_0 |
	target_0.getCondition() instanceof Literal
	and target_0.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_0.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__builtin_expect")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("trace_kvm_mmu_prepare_zap_page")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("kvm_mmu_page *")
	and target_1.getEnclosingFunction() = func
}

from Function func, ExprStmt target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
