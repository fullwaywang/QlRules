/**
 * @name linux-dee1f973ca341c266229faa5a1a5bb268bed3531-ext4_split_extent
 * @id cpp/linux/dee1f973ca341c266229faa5a1a5bb268bed3531/ext4-split-extent
 * @description linux-dee1f973ca341c266229faa5a1a5bb268bed3531-fs/ext4/extents.c-ext4_split_extent CVE-2012-4508
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsplit_flag_3011, Literal target_0) {
	target_0.getValue()="1"
	and not target_0.getValue()="16"
	and target_0.getParent().(BitwiseAndExpr).getParent().(ConditionalExpr).getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vsplit_flag_3011
}

predicate func_1(Function func, Literal target_1) {
	target_1.getValue()="0"
	and not target_1.getValue()="8"
	and target_1.getParent().(ConditionalExpr).getParent().(AssignExpr).getRValue() instanceof ConditionalExpr
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, Literal target_2) {
	target_2.getValue()="1"
	and not target_2.getValue()="16"
	and target_2.getParent().(ConditionalExpr).getParent().(AssignExpr).getRValue() instanceof ConditionalExpr
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Parameter vsplit_flag_3011, Variable vsplit_flag1_3019, RelationalOperation target_11, BitwiseAndExpr target_12, ExprStmt target_13) {
exists(IfStmt target_3 |
	target_3.getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vsplit_flag_3011
	and target_3.getCondition().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="16"
	and target_3.getThen().(ExprStmt).getExpr().(AssignOrExpr).getLValue().(VariableAccess).getTarget()=vsplit_flag1_3019
	and target_3.getThen().(ExprStmt).getExpr().(AssignOrExpr).getRValue().(Literal).getValue()="8"
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(3)=target_3
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_11
	and target_3.getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getLocation().isBefore(target_12.getLeftOperand().(VariableAccess).getLocation())
	and target_3.getThen().(ExprStmt).getExpr().(AssignOrExpr).getLValue().(VariableAccess).getLocation().isBefore(target_13.getExpr().(AssignOrExpr).getLValue().(VariableAccess).getLocation()))
}

predicate func_5(Parameter vsplit_flag_3011, Variable vsplit_flag1_3019) {
exists(BitwiseAndExpr target_5 |
	target_5.getLeftOperand().(VariableAccess).getTarget()=vsplit_flag_3011
	and target_5.getRightOperand().(BitwiseOrExpr).getValue()="17"
	and target_5.getParent().(AssignExpr).getRValue() = target_5
	and target_5.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsplit_flag1_3019)
}

predicate func_6(Parameter vsplit_flag_3011, BitwiseAndExpr target_6) {
	target_6.getLeftOperand().(VariableAccess).getTarget()=vsplit_flag_3011
	and target_6.getRightOperand().(Literal).getValue()="1"
}

predicate func_7(Variable vsplit_flag1_3019, VariableAccess target_7) {
	target_7.getTarget()=vsplit_flag1_3019
	and target_7.getParent().(AssignExpr).getLValue() = target_7
	and target_7.getParent().(AssignExpr).getRValue() instanceof ConditionalExpr
}

predicate func_9(Variable vsplit_flag1_3019, ExprStmt target_17, ConditionalExpr target_9) {
	target_9.getCondition() instanceof BitwiseAndExpr
	and target_9.getThen() instanceof Literal
	and target_9.getElse() instanceof Literal
	and target_9.getParent().(AssignExpr).getRValue() = target_9
	and target_9.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsplit_flag1_3019
	and target_9.getParent().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_17.getExpr().(AssignOrExpr).getLValue().(VariableAccess).getLocation())
}

predicate func_10(Parameter vsplit_flag_3011, Variable vsplit_flag1_3019, BitwiseAndExpr target_12, ExprStmt target_13, ConditionalExpr target_10) {
	target_10.getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vsplit_flag_3011
	and target_10.getCondition().(BitwiseAndExpr).getRightOperand() instanceof Literal
	and target_10.getThen() instanceof Literal
	and target_10.getElse().(Literal).getValue()="0"
	and target_10.getParent().(AssignExpr).getRValue() = target_10
	and target_10.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsplit_flag1_3019
	and target_10.getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getLocation().isBefore(target_12.getLeftOperand().(VariableAccess).getLocation())
	and target_10.getParent().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_13.getExpr().(AssignOrExpr).getLValue().(VariableAccess).getLocation())
}

predicate func_11(Function func, RelationalOperation target_11) {
	 (target_11 instanceof GTExpr or target_11 instanceof LTExpr)
	and target_11.getLesserOperand().(AddExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="m_lblk"
	and target_11.getLesserOperand().(AddExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("ext4_map_blocks *")
	and target_11.getLesserOperand().(AddExpr).getRightOperand().(PointerFieldAccess).getTarget().getName()="m_len"
	and target_11.getLesserOperand().(AddExpr).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("ext4_map_blocks *")
	and target_11.getGreaterOperand().(AddExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("ext4_lblk_t")
	and target_11.getGreaterOperand().(AddExpr).getRightOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_11.getEnclosingFunction() = func
}

predicate func_12(Parameter vsplit_flag_3011, BitwiseAndExpr target_12) {
	target_12.getLeftOperand().(VariableAccess).getTarget()=vsplit_flag_3011
	and target_12.getRightOperand().(Literal).getValue()="4"
}

predicate func_13(Variable vsplit_flag1_3019, ExprStmt target_13) {
	target_13.getExpr().(AssignOrExpr).getLValue().(VariableAccess).getTarget()=vsplit_flag1_3019
	and target_13.getExpr().(AssignOrExpr).getRValue().(Literal).getValue()="2"
}

predicate func_17(Variable vsplit_flag1_3019, ExprStmt target_17) {
	target_17.getExpr().(AssignOrExpr).getLValue().(VariableAccess).getTarget()=vsplit_flag1_3019
	and target_17.getExpr().(AssignOrExpr).getRValue().(BitwiseOrExpr).getValue()="6"
}

from Function func, Parameter vsplit_flag_3011, Variable vsplit_flag1_3019, Literal target_0, Literal target_1, Literal target_2, BitwiseAndExpr target_6, VariableAccess target_7, ConditionalExpr target_9, ConditionalExpr target_10, RelationalOperation target_11, BitwiseAndExpr target_12, ExprStmt target_13, ExprStmt target_17
where
func_0(vsplit_flag_3011, target_0)
and func_1(func, target_1)
and func_2(func, target_2)
and not func_3(vsplit_flag_3011, vsplit_flag1_3019, target_11, target_12, target_13)
and not func_5(vsplit_flag_3011, vsplit_flag1_3019)
and func_6(vsplit_flag_3011, target_6)
and func_7(vsplit_flag1_3019, target_7)
and func_9(vsplit_flag1_3019, target_17, target_9)
and func_10(vsplit_flag_3011, vsplit_flag1_3019, target_12, target_13, target_10)
and func_11(func, target_11)
and func_12(vsplit_flag_3011, target_12)
and func_13(vsplit_flag1_3019, target_13)
and func_17(vsplit_flag1_3019, target_17)
and vsplit_flag_3011.getType().hasName("int")
and vsplit_flag1_3019.getType().hasName("int")
and vsplit_flag_3011.getFunction() = func
and vsplit_flag1_3019.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
