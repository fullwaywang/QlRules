commit d80a1af1f4fd43c06d7c2eb27b323cbe8fb929f5	d80a1af1f4fd43c06d7c2eb27b323cbe8fb929f5
Author: Michael Thiessen <mthiesse@chromium.org>
Date:   Mon Aug 21 17:17:35 2023 +0000

    Block fallback URLs from CSP-sandboxed external navigation
    
    We don't support persisting sandbox flags through fallback URLs when
    performing external navigation.
    
    This is a follow-on to https://chromium-review.googlesource.com/c/chromium/src/+/4294954
    
    Bug: 1425355
    Change-Id: Iab9f309083322292fe884123320f0cd51c6c341e
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4771297
    Commit-Queue: Michael Thiessen <mthiesse@chromium.org>
    Reviewed-by: Yaron Friedman <yfriedman@chromium.org>
    Reviewed-by: Arthur Sonzogni <arthursonzogni@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1185932}

diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
index f2acf91f6e7c2..d9d1d2eab7bbb 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
@@ -197,6 +197,8 @@ public class UrlOverridingTest {
             BASE_PATH + "subframe_navigation_parent.html";
     private static final String SUBFRAME_NAVIGATION_PARENT_SANDBOX =
             BASE_PATH + "subframe_navigation_parent_sandbox.html";
+    private static final String SUBFRAME_NAVIGATION_PARENT_CSP_SANDBOX =
+            BASE_PATH + "subframe_navigation_parent_csp_sandbox.html";
     private static final String SUBFRAME_NAVIGATION_CHILD =
             BASE_PATH + "subframe_navigation_child.html";
     private static final String NAVIGATION_FROM_RENAVIGATE_FRAME =
@@ -222,6 +224,14 @@ public class UrlOverridingTest {
         int TOP = 2;
     }
 
+    @IntDef({SandboxType.NONE, SandboxType.FRAME, SandboxType.CSP})
+    @Retention(RetentionPolicy.SOURCE)
+    public @interface SandboxType {
+        int NONE = 0;
+        int FRAME = 1;
+        int CSP = 2;
+    }
+
     @Mock
     private RedirectHandler mRedirectHandler;
 
@@ -639,8 +649,8 @@ public class UrlOverridingTest {
         Assert.assertNotNull(message.get(MessageBannerProperties.ICON));
     }
 
-    private String getSubframeNavigationUrl(
-            String subframeTargetUrl, @NavigationType int navigationType, boolean sandbox) {
+    private String getSubframeNavigationUrl(String subframeTargetUrl,
+            @NavigationType int navigationType, @SandboxType int sandboxType) {
         // The replace_text parameters for SUBFRAME_NAVIGATION_CHILD, which is loaded in
         // the iframe in SUBFRAME_NAVIGATION_PARENT, have to go through the
         // embedded test server twice and, as such, have to be base64-encoded twice.
@@ -655,7 +665,12 @@ public class UrlOverridingTest {
         byte[] valBlank = ApiCompatibilityUtils.getBytesUtf8("_blank");
         byte[] valTop = ApiCompatibilityUtils.getBytesUtf8("_top");
 
-        String url = sandbox ? SUBFRAME_NAVIGATION_PARENT_SANDBOX : SUBFRAME_NAVIGATION_PARENT;
+        String url = SUBFRAME_NAVIGATION_PARENT;
+        if (sandboxType == SandboxType.FRAME) {
+            url = SUBFRAME_NAVIGATION_PARENT_SANDBOX;
+        } else if (sandboxType == SandboxType.CSP) {
+            url = SUBFRAME_NAVIGATION_PARENT_CSP_SANDBOX;
+        }
 
         String navType = "";
         if (navigationType == NavigationType.BLANK) {
@@ -795,7 +810,8 @@ public class UrlOverridingTest {
         String fallbackUrl = mTestServer.getURL(FALLBACK_LANDING_PATH);
         String subframeUrl = "intent://test/#Intent;scheme=badscheme;S.browser_fallback_url="
                 + fallbackUrl + ";end";
-        String originalUrl = getSubframeNavigationUrl(subframeUrl, NavigationType.SELF, false);
+        String originalUrl =
+                getSubframeNavigationUrl(subframeUrl, NavigationType.SELF, SandboxType.NONE);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
@@ -1521,7 +1537,8 @@ public class UrlOverridingTest {
                 + "https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.android.chrome"
                 + ";end";
 
-        String originalUrl = getSubframeNavigationUrl(subframeTarget, NavigationType.SELF, false);
+        String originalUrl =
+                getSubframeNavigationUrl(subframeTarget, NavigationType.SELF, SandboxType.NONE);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
@@ -1562,7 +1579,8 @@ public class UrlOverridingTest {
         String subframeUrl =
                 "intent://test/#Intent;scheme=externalappscheme;S.browser_fallback_url="
                 + fallbackUrl + ";end";
-        String originalUrl = getSubframeNavigationUrl(subframeUrl, NavigationType.SELF, false);
+        String originalUrl =
+                getSubframeNavigationUrl(subframeUrl, NavigationType.SELF, SandboxType.NONE);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
@@ -1674,7 +1692,8 @@ public class UrlOverridingTest {
         mActivityTestRule.startMainActivityOnBlankPage();
 
         String subframeUrl = "intent://test/#Intent;scheme=externalappscheme;end";
-        String originalUrl = getSubframeNavigationUrl(subframeUrl, NavigationType.TOP, false);
+        String originalUrl =
+                getSubframeNavigationUrl(subframeUrl, NavigationType.TOP, SandboxType.NONE);
 
         loadUrlAndWaitForIntentUrl(originalUrl, true, false, true, null, true);
     }
@@ -1714,7 +1733,8 @@ public class UrlOverridingTest {
                 + "https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.android.chrome"
                 + ";end";
 
-        String originalUrl = getSubframeNavigationUrl(subframeTarget, NavigationType.BLANK, false);
+        String originalUrl =
+                getSubframeNavigationUrl(subframeTarget, NavigationType.BLANK, SandboxType.NONE);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
@@ -1744,12 +1764,7 @@ public class UrlOverridingTest {
                 OverrideUrlLoadingResultType.OVERRIDE_WITH_NAVIGATE_TAB, result.getResultType());
     }
 
-    // Ensures that for a sandboxed main frame, we block both intents to ourself, and fallback URLs
-    // that would escape the sandbox by clobbering the main frame.
-    @Test
-    @LargeTest
-    @EnableFeatures({ExternalIntentsFeatures.BLOCK_INTENTS_TO_SELF_NAME})
-    public void testIntentToSelfWithFallback_Sandboxed() throws Exception {
+    private void doTestIntentToSelfWithFallback_Sandboxed(boolean useCSP) {
         mActivityTestRule.startMainActivityOnBlankPage();
 
         String targetUrl = mTestServer.getURL(HELLO_PAGE);
@@ -1760,7 +1775,10 @@ public class UrlOverridingTest {
                 + "https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dcom.android.chrome"
                 + ";end";
 
-        String originalUrl = getSubframeNavigationUrl(subframeTarget, NavigationType.BLANK, true);
+        @SandboxType
+        int sandboxType = useCSP ? SandboxType.CSP : SandboxType.FRAME;
+        String originalUrl =
+                getSubframeNavigationUrl(subframeTarget, NavigationType.BLANK, sandboxType);
 
         final Tab tab = mActivityTestRule.getActivity().getActivityTab();
 
@@ -1796,4 +1814,21 @@ public class UrlOverridingTest {
             Assert.assertFalse(newTab.getWebContents().isLoading());
         });
     }
+
+    // Ensures that for a sandboxed main frame, we block both intents to ourself, and fallback URLs
+    // that would escape the sandbox by clobbering the main frame.
+    @Test
+    @LargeTest
+    @EnableFeatures({ExternalIntentsFeatures.BLOCK_INTENTS_TO_SELF_NAME})
+    public void testIntentToSelfWithFallback_Sandboxed() throws Exception {
+        doTestIntentToSelfWithFallback_Sandboxed(false);
+    }
+
+    // Same as testIntentToSelfWithFallback_Sandboxed but with CSP sandbox.
+    @Test
+    @LargeTest
+    @EnableFeatures({ExternalIntentsFeatures.BLOCK_INTENTS_TO_SELF_NAME})
+    public void testIntentToSelfWithFallback_CSPSandboxed() throws Exception {
+        doTestIntentToSelfWithFallback_Sandboxed(true);
+    }
 }
diff --git a/chrome/test/data/android/url_overriding/subframe_navigation_parent_csp_sandbox.html b/chrome/test/data/android/url_overriding/subframe_navigation_parent_csp_sandbox.html
new file mode 100644
index 0000000000000..5d78f2c5e2d9e
--- /dev/null
+++ b/chrome/test/data/android/url_overriding/subframe_navigation_parent_csp_sandbox.html
@@ -0,0 +1,8 @@
+<!DOCTYPE html>
+<meta name="viewport"
+    content="width=device-width, initial-scale=1.0, maximum-scale=1.0"/>
+<body style='height:10000px'>
+<p>Hello World</p>
+<iframe src="subframe_navigation_childPARAM_BLANK.html?replace_text=PARAM_BASE64_NAME:PARAM_BASE64_VALUE"
+    width="100%" height="99%"></iframe>
+</body>
diff --git a/chrome/test/data/android/url_overriding/subframe_navigation_parent_csp_sandbox.html.mock-http-headers b/chrome/test/data/android/url_overriding/subframe_navigation_parent_csp_sandbox.html.mock-http-headers
new file mode 100644
index 0000000000000..dc4e81065089b
--- /dev/null
+++ b/chrome/test/data/android/url_overriding/subframe_navigation_parent_csp_sandbox.html.mock-http-headers
@@ -0,0 +1,2 @@
+HTTP/1.1 200 OK
+Content-Security-Policy: sandbox allow-scripts allow-popups allow-popups-to-escape-sandbox;
diff --git a/components/navigation_interception/intercept_navigation_delegate.cc b/components/navigation_interception/intercept_navigation_delegate.cc
index f24cdfc70f132..bbbe8f8ed980c 100644
--- a/components/navigation_interception/intercept_navigation_delegate.cc
+++ b/components/navigation_interception/intercept_navigation_delegate.cc
@@ -5,7 +5,6 @@
 #include "components/navigation_interception/intercept_navigation_delegate.h"
 
 #include <memory>
-#include <tuple>
 
 #include "base/android/jni_android.h"
 #include "base/android/jni_string.h"
@@ -212,13 +211,9 @@ bool InterceptNavigationDelegate::ShouldIgnoreNavigation(
   // are present, as we don't support persisting sandbox flags through fallback
   // URL navigation.
   bool is_sandboxed = navigation_handle->SandboxFlagsInherited() !=
-                      network::mojom::WebSandboxFlags::kNone;
-
-  bool initiator_is_sandboxed = navigation_handle->SandboxFlagsInitiator() !=
-                                network::mojom::WebSandboxFlags::kNone;
-
-  // TODO(https://crbug.com/1425355) Use the initiator sandbox flags.
-  std::ignore = initiator_is_sandboxed;
+                          network::mojom::WebSandboxFlags::kNone ||
+                      navigation_handle->SandboxFlagsInitiator() !=
+                          network::mojom::WebSandboxFlags::kNone;
 
   return Java_InterceptNavigationDelegate_shouldIgnoreNavigation(
       env, jdelegate, navigation_handle->GetJavaNavigationHandle(),
