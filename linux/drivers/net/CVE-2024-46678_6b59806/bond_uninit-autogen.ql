/**
 * @name linux-6b598069164ac1bb60996d6ff94e7f9169dbd2d3-bond_uninit
 * @id cpp/linux/6b598069164ac1bb60996d6ff94e7f9169dbd2d3/bond-uninit
 * @description linux-6b598069164ac1bb60996d6ff94e7f9169dbd2d3-drivers/net/bonding/bond_main.c-bond_uninit CVE-2024-46678
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vbond_5982, ExprStmt target_1, AssignExpr target_2, Function func) {
exists(ExprStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="ipsec_lock"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vbond_5982
			)
		)
		and obj_0.getTarget().hasName("mutex_destroy")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vbond_5982, ExprStmt target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		obj_0.getTarget().hasName("bond_set_slave_arr")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vbond_5982
		and obj_0.getArgument(1).(Literal).getValue()="0"
		and obj_0.getArgument(2).(Literal).getValue()="0"
	)
}

predicate func_2(Variable vbond_5982, AssignExpr target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getRValue() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().getName()="dev"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vbond_5982
		)
		and obj_0.getTarget().hasName("netdev_lower_get_next_private")
		and obj_0.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("list_head *")
	)
	and target_2.getLValue().(VariableAccess).getTarget().getType().hasName("slave *")
}

from Function func, Variable vbond_5982, ExprStmt target_1, AssignExpr target_2
where
not func_0(vbond_5982, target_1, target_2, func)
and func_1(vbond_5982, target_1)
and func_2(vbond_5982, target_2)
and vbond_5982.getType().hasName("bonding *")
and vbond_5982.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
