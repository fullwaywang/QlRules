/**
 * @name chromium-5921c8faeff0048f179c698b1935f1a183bb10f2-blink____IsRequestDenied
 * @id cpp/chromium/5921c8faeff0048f179c698b1935f1a183bb10f2/blinkisrequestdenied
 * @description chromium-5921c8faeff0048f179c698b1935f1a183bb10f2-third_party/blink/renderer/modules/bluetooth/bluetooth.cc-blink____IsRequestDenied CVE-2023-2462
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vwindow_72, Parameter vexception_state_72, NotExpr target_1, FunctionCall target_2, ExprStmt target_3, FunctionCall target_4) {
exists(IfStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getQualifier() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getQualifier() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getQualifier() |
					exists(FunctionCall obj_4 | obj_4=obj_3.getQualifier() |
						obj_4.getTarget().hasName("GetFrame")
						and obj_4.getQualifier().(VariableAccess).getTarget()=vwindow_72
					)
					and obj_3.getTarget().hasName("Top")
				)
				and obj_2.getTarget().hasName("GetSecurityContext")
			)
			and obj_1.getTarget().hasName("GetSecurityOrigin")
		)
		and obj_0.getTarget().hasName("IsOpaque")
	)
	and exists(BlockStmt obj_5 | obj_5=target_0.getThen() |
		exists(ExprStmt obj_6 | obj_6=obj_5.getStmt(0) |
			exists(FunctionCall obj_7 | obj_7=obj_6.getExpr() |
				obj_7.getTarget().hasName("ThrowSecurityError")
				and obj_7.getQualifier().(VariableAccess).getTarget()=vexception_state_72
				and obj_7.getArgument(0).(StringLiteral).getValue()="Access to the Web Bluetooth API is denied from contexts where the top-level document has an opaque origin."
			)
		)
	)
	and exists(IfStmt obj_8 | obj_8=target_0.getParent() |
		exists(IfStmt obj_9 | obj_9=obj_8.getParent() |
			obj_9.getElse().(IfStmt).getElse()=target_0
			and obj_9.getCondition()=target_1
		)
	)
	and target_2.getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(VariableAccess).getLocation())
	and target_3.getExpr().(FunctionCall).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getQualifier().(VariableAccess).getLocation())
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Parameter vwindow_72, NotExpr target_1) {
	target_1.getOperand().(VariableAccess).getTarget()=vwindow_72
}

predicate func_2(Parameter vwindow_72, FunctionCall target_2) {
	target_2.getTarget().hasName("GetFrame")
	and target_2.getQualifier().(VariableAccess).getTarget()=vwindow_72
}

predicate func_3(Parameter vexception_state_72, ExprStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		obj_0.getTarget().hasName("ThrowDOMException")
		and obj_0.getQualifier().(VariableAccess).getTarget()=vexception_state_72
		and obj_0.getArgument(1).(VariableAccess).getTarget().getType() instanceof ArrayType
	)
}

predicate func_4(Parameter vexception_state_72, FunctionCall target_4) {
	target_4.getTarget().hasName("HadException")
	and target_4.getQualifier().(VariableAccess).getTarget()=vexception_state_72
}

from Function func, Parameter vwindow_72, Parameter vexception_state_72, NotExpr target_1, FunctionCall target_2, ExprStmt target_3, FunctionCall target_4
where
not func_0(vwindow_72, vexception_state_72, target_1, target_2, target_3, target_4)
and func_1(vwindow_72, target_1)
and func_2(vwindow_72, target_2)
and func_3(vexception_state_72, target_3)
and func_4(vexception_state_72, target_4)
and vwindow_72.getType().hasName("LocalDOMWindow *")
and vexception_state_72.getType().hasName("ExceptionState &")
and vwindow_72.getFunction() = func
and vexception_state_72.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
