commit 13bc0b6b1f8f2f2491fcc9f0c1c939ff06e13c15
Author: Glenn Randers-Pehrson <glennrp at users.sourceforge.net>
Date:   Sat Aug 5 15:33:24 2017 -0500

    [libpng16] Make png_check_chunk_length|name() parameters const

diff --git a/pngpread.c b/pngpread.c
index b2d7d3b6f..16ad3c0d1 100644
--- a/pngpread.c
+++ b/pngpread.c
@@ -170,7 +170,6 @@ png_push_read_chunk(png_structrp png_ptr, png_inforp info_ptr)
 #ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
    int keep; /* unknown handling method */
 #endif
-   png_alloc_size_t limit = PNG_UINT_31_MAX;
 
    /* First we make sure we have enough data for the 4-byte chunk name
     * and the 4-byte chunk length before proceeding with decoding the
diff --git a/pngpriv.h b/pngpriv.h
index 245217f2c..56bfef6ef 100644
--- a/pngpriv.h
+++ b/pngpriv.h
@@ -1527,11 +1527,11 @@ PNG_INTERNAL_FUNCTION(void,png_handle_zTXt,(png_structrp png_ptr,
     png_inforp info_ptr, png_uint_32 length),PNG_EMPTY);
 #endif
 
-PNG_INTERNAL_FUNCTION(void,png_check_chunk_name,(png_structrp png_ptr,
-    png_uint_32 chunk_name),PNG_EMPTY);
+PNG_INTERNAL_FUNCTION(void,png_check_chunk_name,(png_const_structrp png_ptr,
+    const png_uint_32 chunk_name),PNG_EMPTY);
 
-PNG_INTERNAL_FUNCTION(void,png_check_chunk_length,(png_structrp png_ptr,
-    png_uint_32 chunk_length),PNG_EMPTY);
+PNG_INTERNAL_FUNCTION(void,png_check_chunk_length,(png_const_structrp png_ptr,
+    const png_uint_32 chunk_length),PNG_EMPTY);
 
 PNG_INTERNAL_FUNCTION(void,png_handle_unknown,(png_structrp png_ptr,
     png_inforp info_ptr, png_uint_32 length, int keep),PNG_EMPTY);
diff --git a/pngrutil.c b/pngrutil.c
index afdd2f0c3..6938d93c3 100644
--- a/pngrutil.c
+++ b/pngrutil.c
@@ -3087,25 +3087,26 @@ png_handle_unknown(png_structrp png_ptr, png_inforp info_ptr,
  */
 
 void /* PRIVATE */
-png_check_chunk_name(png_structrp png_ptr, png_uint_32 chunk_name)
+png_check_chunk_name(png_const_structrp png_ptr, const png_uint_32 chunk_name)
 {
    int i;
+   png_uint_32 cn=chunk_name;
 
    png_debug(1, "in png_check_chunk_name");
 
    for (i=1; i<=4; ++i)
    {
-      int c = chunk_name & 0xff;
+      int c = cn & 0xff;
 
       if (c < 65 || c > 122 || (c > 90 && c < 97))
          png_chunk_error(png_ptr, "invalid chunk type");
 
-      chunk_name >>= 8;
+      cn >>= 8;
    }
 }
 
 void /* PRIVATE */
-png_check_chunk_length(png_structrp png_ptr, png_uint_32 length)
+png_check_chunk_length(png_const_structrp png_ptr, const png_uint_32 length)
 {
    png_alloc_size_t limit = PNG_UINT_31_MAX;
 
