commit 7aed44babc7f97e82b38e9a68515e699692cc100
Author: Stefano Garzarella <sgarzare@redhat.com>
Date:   Mon Sep 25 12:30:57 2023 +0200

    vringh: don't use vringh_kiov_advance() in vringh_iov_xfer()
    
    In the while loop of vringh_iov_xfer(), `partlen` could be 0 if one of
    the `iov` has 0 lenght.
    In this case, we should skip the iov and go to the next one.
    But calling vringh_kiov_advance() with 0 lenght does not cause the
    advancement, since it returns immediately if asked to advance by 0 bytes.
    
    Let's restore the code that was there before commit b8c06ad4d67d
    ("vringh: implement vringh_kiov_advance()"), avoiding using
    vringh_kiov_advance().
    
    Fixes: b8c06ad4d67d ("vringh: implement vringh_kiov_advance()")
    Cc: stable@vger.kernel.org
    Reported-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: Stefano Garzarella <sgarzare@redhat.com>
    Acked-by: Jason Wang <jasowang@redhat.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>

diff --git a/drivers/vhost/vringh.c b/drivers/vhost/vringh.c
index 955d938eb663..7b8fd977f71c 100644
--- a/drivers/vhost/vringh.c
+++ b/drivers/vhost/vringh.c
@@ -123,8 +123,18 @@ static inline ssize_t vringh_iov_xfer(struct vringh *vrh,
 		done += partlen;
 		len -= partlen;
 		ptr += partlen;
+		iov->consumed += partlen;
+		iov->iov[iov->i].iov_len -= partlen;
+		iov->iov[iov->i].iov_base += partlen;
 
-		vringh_kiov_advance(iov, partlen);
+		if (!iov->iov[iov->i].iov_len) {
+			/* Fix up old iov element then increment. */
+			iov->iov[iov->i].iov_len = iov->consumed;
+			iov->iov[iov->i].iov_base -= iov->consumed;
+
+			iov->consumed = 0;
+			iov->i++;
+		}
 	}
 	return done;
 }
