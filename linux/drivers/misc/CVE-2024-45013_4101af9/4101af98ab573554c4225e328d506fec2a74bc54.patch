commit 4101af98ab573554c4225e328d506fec2a74bc54
Author: Ming Lei <ming.lei@redhat.com>
Date:   Tue Aug 13 09:35:27 2024 +0800

    nvme: move stopping keep-alive into nvme_uninit_ctrl()
    
    [ Upstream commit a54a93d0e3599b05856971734e15418ac551a14c ]
    
    Commit 4733b65d82bd ("nvme: start keep-alive after admin queue setup")
    moves starting keep-alive from nvme_start_ctrl() into
    nvme_init_ctrl_finish(), but don't move stopping keep-alive into
    nvme_uninit_ctrl(), so keep-alive work can be started and keep pending
    after failing to start controller, finally use-after-free is triggered if
    nvme host driver is unloaded.
    
    This patch fixes kernel panic when running nvme/004 in case that connection
    failure is triggered, by moving stopping keep-alive into nvme_uninit_ctrl().
    
    This way is reasonable because keep-alive is now started in
    nvme_init_ctrl_finish().
    
    Fixes: 3af755a46881 ("nvme: move nvme_stop_keep_alive() back to original position")
    Cc: Hannes Reinecke <hare@suse.de>
    Cc: Mark O'Donovan <shiftee@posteo.net>
    Reported-by: Changhui Zhong <czhong@redhat.com>
    Reviewed-by: Christoph Hellwig <hch@lst.de>
    Reviewed-by: Sagi Grimberg <sagi@grimberg.me>
    Reviewed-by: Hannes Reinecke <hare@suse.de>
    Signed-off-by: Ming Lei <ming.lei@redhat.com>
    Signed-off-by: Keith Busch <kbusch@kernel.org>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/drivers/nvme/host/core.c b/drivers/nvme/host/core.c
index 782090ce0bc1..d973d063bbf5 100644
--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -4522,7 +4522,6 @@ void nvme_stop_ctrl(struct nvme_ctrl *ctrl)
 {
 	nvme_mpath_stop(ctrl);
 	nvme_auth_stop(ctrl);
-	nvme_stop_keep_alive(ctrl);
 	nvme_stop_failfast_work(ctrl);
 	flush_work(&ctrl->async_event_work);
 	cancel_work_sync(&ctrl->fw_act_work);
@@ -4558,6 +4557,7 @@ EXPORT_SYMBOL_GPL(nvme_start_ctrl);
 
 void nvme_uninit_ctrl(struct nvme_ctrl *ctrl)
 {
+	nvme_stop_keep_alive(ctrl);
 	nvme_hwmon_exit(ctrl);
 	nvme_fault_inject_fini(&ctrl->fault_inject);
 	dev_pm_qos_hide_latency_tolerance(ctrl->device);
