/**
 * @name linux-9c0d90103c7e0eb6e638e5b649e9f6d8d9c1b4b3-cap_file_mmap
 * @id cpp/linux/9c0d90103c7e0eb6e638e5b649e9f6d8d9c1b4b3/cap-file-mmap
 * @description linux-9c0d90103c7e0eb6e638e5b649e9f6d8d9c1b4b3-include/linux/security.h-cap_file_mmap CVE-2009-2695
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
		target_0.getTarget().hasName("capable")
		and not target_0.getTarget().hasName("cap_capable")
		and target_0.getArgument(0).(Literal).getValue()="17"
		and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, Literal target_1) {
		target_1.getValue()="13"
		and not target_1.getValue()="1"
		and target_1.getParent().(UnaryMinusExpr).getParent().(ReturnStmt).getExpr() instanceof UnaryMinusExpr
		and target_1.getEnclosingFunction() = func
}

predicate func_2(LogicalAndExpr target_9, Function func) {
	exists(ExprStmt target_2 |
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("int")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("cap_capable")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("get_current")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="cred"
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("get_current")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(Literal).getValue()="17"
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(Literal).getValue()="1"
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_2
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
		and target_2.getEnclosingFunction() = func)
}

/*predicate func_3(Function func) {
	exists(FunctionCall target_3 |
		target_3.getTarget().hasName("get_current")
		and target_3.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
		and target_3.getEnclosingFunction() = func)
}

*/
/*predicate func_4(Function func) {
	exists(PointerFieldAccess target_4 |
		target_4.getTarget().getName()="cred"
		and target_4.getQualifier().(FunctionCall).getTarget().hasName("get_current")
		and target_4.getEnclosingFunction() = func)
}

*/
predicate func_5(LogicalAndExpr target_9, Function func) {
	exists(IfStmt target_5 |
		target_5.getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getType().hasName("int")
		and target_5.getCondition().(EqualityOperation).getAnOperand().(Literal).getValue()="0"
		and target_5.getThen().(ExprStmt).getExpr().(AssignOrExpr).getLValue().(PointerFieldAccess).getTarget().getName()="flags"
		and target_5.getThen().(ExprStmt).getExpr().(AssignOrExpr).getLValue().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("get_current")
		and target_5.getThen().(ExprStmt).getExpr().(AssignOrExpr).getRValue().(Literal).getValue()="256"
		and target_5.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_5
		and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
		and target_5.getEnclosingFunction() = func)
}

predicate func_7(Parameter vaddr_335, Variable vmmap_min_addr, ReturnStmt target_12, RelationalOperation target_7) {
		 (target_7 instanceof GTExpr or target_7 instanceof LTExpr)
		and target_7.getLesserOperand().(VariableAccess).getTarget()=vaddr_335
		and target_7.getGreaterOperand().(VariableAccess).getTarget()=vmmap_min_addr
		and target_7.getParent().(LogicalAndExpr).getAnOperand() instanceof NotExpr
		and target_7.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_12
}

predicate func_9(ReturnStmt target_12, Function func, LogicalAndExpr target_9) {
		target_9.getAnOperand() instanceof RelationalOperation
		and target_9.getAnOperand().(NotExpr).getOperand() instanceof FunctionCall
		and target_9.getParent().(IfStmt).getThen()=target_12
		and target_9.getEnclosingFunction() = func
}

predicate func_10(Function func, UnaryMinusExpr target_10) {
		target_10.getValue()="-13"
		and target_10.getEnclosingFunction() = func
}

predicate func_11(Function func, ReturnStmt target_11) {
		target_11.getExpr() instanceof Literal
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_11
}

predicate func_12(Function func, ReturnStmt target_12) {
		target_12.getExpr() instanceof UnaryMinusExpr
		and target_12.getEnclosingFunction() = func
}

from Function func, Parameter vaddr_335, Variable vmmap_min_addr, FunctionCall target_0, Literal target_1, RelationalOperation target_7, LogicalAndExpr target_9, UnaryMinusExpr target_10, ReturnStmt target_11, ReturnStmt target_12
where
func_0(func, target_0)
and func_1(func, target_1)
and not func_2(target_9, func)
and not func_5(target_9, func)
and func_7(vaddr_335, vmmap_min_addr, target_12, target_7)
and func_9(target_12, func, target_9)
and func_10(func, target_10)
and func_11(func, target_11)
and func_12(func, target_12)
and vaddr_335.getType().hasName("unsigned long")
and vmmap_min_addr.getType().hasName("unsigned long")
and vaddr_335.getFunction() = func
and not vmmap_min_addr.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
