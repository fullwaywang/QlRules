/**
 * @name linux-5fa4df25ecfc7b6c9006f5b871c46cfe25ea8826-amdgpu_atombios_init_mc_reg_table
 * @id cpp/linux/5fa4df25ecfc7b6c9006f5b871c46cfe25ea8826/amdgpu-atombios-init-mc-reg-table
 * @description linux-5fa4df25ecfc7b6c9006f5b871c46cfe25ea8826-drivers/gpu/drm/amd/amdgpu/amdgpu_atombios.c-amdgpu_atombios_init_mc_reg_table CVE-2024-46722
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vi_1572, EqualityOperation target_1, ExprStmt target_2) {
exists(IfStmt target_0 |
	exists(EqualityOperation obj_0 | obj_0=target_0.getCondition() |
		obj_0.getLeftOperand().(VariableAccess).getTarget()=vi_1572
		and obj_0.getRightOperand().(Literal).getValue()="0"
	)
	and exists(BlockStmt obj_1 | obj_1=target_0.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getThen().(BlockStmt).getStmt(0)=target_0
			and obj_2.getCondition()=target_1
		)
	)
	and target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_2.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vi_1572, EqualityOperation target_1) {
	exists(BitwiseAndExpr obj_0 | obj_0=target_1.getLeftOperand() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(ArrayExpr obj_2 | obj_2=obj_1.getQualifier() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getArrayBase() |
					obj_3.getTarget().getName()="mc_reg_address"
					and obj_3.getQualifier().(VariableAccess).getTarget().getType().hasName("atom_mc_reg_table *")
				)
				and obj_2.getArrayOffset().(VariableAccess).getTarget()=vi_1572
			)
			and obj_1.getTarget().getName()="pre_reg_data"
		)
		and obj_0.getRightOperand().(Literal).getValue()="15"
	)
	and target_1.getRightOperand().(Literal).getValue()="0"
}

predicate func_2(Variable vi_1572, ExprStmt target_2) {
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(ArrayExpr obj_1 | obj_1=obj_0.getLValue() |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getArrayBase() |
				exists(ArrayExpr obj_3 | obj_3=obj_2.getQualifier() |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getArrayBase() |
						obj_4.getTarget().getName()="mc_reg_table_entry"
						and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("atom_mc_reg_table *")
					)
					and obj_3.getArrayOffset().(VariableAccess).getTarget().getType().hasName("u8")
				)
				and obj_2.getTarget().getName()="mc_data"
			)
			and obj_1.getArrayOffset().(VariableAccess).getTarget()=vi_1572
		)
		and exists(ArrayExpr obj_5 | obj_5=obj_0.getRValue() |
			exists(ValueFieldAccess obj_6 | obj_6=obj_5.getArrayBase() |
				exists(ArrayExpr obj_7 | obj_7=obj_6.getQualifier() |
					exists(PointerFieldAccess obj_8 | obj_8=obj_7.getArrayBase() |
						obj_8.getTarget().getName()="mc_reg_table_entry"
						and obj_8.getQualifier().(VariableAccess).getTarget().getType().hasName("atom_mc_reg_table *")
					)
					and obj_7.getArrayOffset().(VariableAccess).getTarget().getType().hasName("u8")
				)
				and obj_6.getTarget().getName()="mc_data"
			)
			and exists(SubExpr obj_9 | obj_9=obj_5.getArrayOffset() |
				obj_9.getLeftOperand().(VariableAccess).getTarget()=vi_1572
				and obj_9.getRightOperand().(Literal).getValue()="1"
			)
		)
	)
}

from Function func, Variable vi_1572, EqualityOperation target_1, ExprStmt target_2
where
not func_0(vi_1572, target_1, target_2)
and func_1(vi_1572, target_1)
and func_2(vi_1572, target_2)
and vi_1572.getType().hasName("u32")
and vi_1572.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
