/**
 * @name linux-eb66ae030829605d61fbef1909ce310e29f78821-move_ptes
 * @id cpp/linux/eb66ae030829605d61fbef1909ce310e29f78821/move-ptes
 * @description linux-eb66ae030829605d61fbef1909ce310e29f78821-mm/mremap.c-move_ptes CVE-2018-18281
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vpte_121, ExprStmt target_3, FunctionCall target_0) {
		target_0.getTarget().hasName("pte_present")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vpte_121
		and target_0.getParent().(LogicalAndExpr).getAnOperand() instanceof FunctionCall
		and target_0.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_3
}

predicate func_1(Variable vpte_121, ExprStmt target_3, LogicalAndExpr target_1) {
		target_1.getAnOperand() instanceof FunctionCall
		and target_1.getAnOperand().(FunctionCall).getTarget().hasName("pte_dirty")
		and target_1.getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpte_121
		and target_1.getParent().(IfStmt).getThen()=target_3
}

predicate func_2(Parameter vneed_flush_118, VariableAccess target_4, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vneed_flush_118
		and target_2.getParent().(IfStmt).getCondition()=target_4
}

predicate func_3(Function func, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("bool")
		and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vforce_flush_123, VariableAccess target_4) {
		target_4.getTarget()=vforce_flush_123
}

from Function func, Parameter vneed_flush_118, Variable vpte_121, Variable vforce_flush_123, FunctionCall target_0, LogicalAndExpr target_1, ExprStmt target_2, ExprStmt target_3, VariableAccess target_4
where
func_0(vpte_121, target_3, target_0)
and func_1(vpte_121, target_3, target_1)
and func_2(vneed_flush_118, target_4, target_2)
and func_3(func, target_3)
and func_4(vforce_flush_123, target_4)
and vneed_flush_118.getType().hasName("bool *")
and vpte_121.getType().hasName("pte_t")
and vforce_flush_123.getType().hasName("bool")
and vneed_flush_118.getFunction() = func
and vpte_121.(LocalVariable).getFunction() = func
and vforce_flush_123.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
