commit 2ca2e08e92a6bc67d23517c4ae8efbd0cfa2e8fe	2ca2e08e92a6bc67d23517c4ae8efbd0cfa2e8fe
Author: Jack Hsieh <chengweih@chromium.org>
Date:   Wed Mar 15 01:03:48 2023 +0000

    hid: Handle opaque top level origin in addedEventListener
    
    In navigator.hid.addEventListener, throw an exception if the request
    is coming from a context whose top level frame has an opaque origin.
    
    Bug: 1375133
    Change-Id: I43d3c59eb4715d5c1b970d6f466a256c580582d6
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4337726
    Commit-Queue: Jack Hsieh <chengweih@chromium.org>
    Reviewed-by: Reilly Grant <reillyg@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1117306}

diff --git a/third_party/blink/renderer/modules/hid/hid.cc b/third_party/blink/renderer/modules/hid/hid.cc
index 96dc86add0207..09df9fdc81a02 100644
--- a/third_party/blink/renderer/modules/hid/hid.cc
+++ b/third_party/blink/renderer/modules/hid/hid.cc
@@ -37,10 +37,12 @@ const char kFeaturePolicyBlocked[] =
 // returns false to indicate the call should be allowed.
 bool ShouldBlockHidServiceCall(LocalDOMWindow* window,
                                ExecutionContext* context,
-                               ExceptionState& exception_state) {
+                               ExceptionState* exception_state) {
   if (!context) {
-    exception_state.ThrowDOMException(DOMExceptionCode::kNotSupportedError,
-                                      kContextGone);
+    if (exception_state) {
+      exception_state->ThrowDOMException(DOMExceptionCode::kNotSupportedError,
+                                         kContextGone);
+    }
     return true;
   }
 
@@ -52,18 +54,25 @@ bool ShouldBlockHidServiceCall(LocalDOMWindow* window,
       window
           ? window->GetFrame()->Top()->GetSecurityContext()->GetSecurityOrigin()
           : context->GetSecurityOrigin();
-
   if (security_origin->IsOpaque()) {
-    exception_state.ThrowSecurityError(
-        "Access to the WebHID API is denied from contexts where the top-level "
-        "document has an opaque origin.");
-  } else if (!context->IsFeatureEnabled(
-                 mojom::blink::PermissionsPolicyFeature::kHid,
-                 ReportOptions::kReportOnFailure)) {
-    exception_state.ThrowSecurityError(kFeaturePolicyBlocked);
+    if (exception_state) {
+      exception_state->ThrowSecurityError(
+          "Access to the WebHID API is denied from contexts where the "
+          "top-level "
+          "document has an opaque origin.");
+    }
+    return true;
   }
 
-  return exception_state.HadException();
+  if (!context->IsFeatureEnabled(mojom::blink::PermissionsPolicyFeature::kHid,
+                                 ReportOptions::kReportOnFailure)) {
+    if (exception_state) {
+      exception_state->ThrowSecurityError(kFeaturePolicyBlocked);
+    }
+    return true;
+  }
+
+  return false;
 }
 
 void RejectWithTypeError(const String& message,
@@ -124,10 +133,8 @@ void HID::AddedEventListener(const AtomicString& event_type,
     return;
   }
 
-  auto* context = GetExecutionContext();
-  if (!context ||
-      !context->IsFeatureEnabled(mojom::blink::PermissionsPolicyFeature::kHid,
-                                 ReportOptions::kDoNotReport)) {
+  if (ShouldBlockHidServiceCall(GetSupplementable()->DomWindow(),
+                                GetExecutionContext(), nullptr)) {
     return;
   }
 
@@ -163,7 +170,7 @@ void HID::DeviceChanged(device::mojom::blink::HidDeviceInfoPtr device_info) {
 ScriptPromise HID::getDevices(ScriptState* script_state,
                               ExceptionState& exception_state) {
   if (ShouldBlockHidServiceCall(GetSupplementable()->DomWindow(),
-                                GetExecutionContext(), exception_state)) {
+                                GetExecutionContext(), &exception_state)) {
     return ScriptPromise();
   }
 
@@ -190,7 +197,7 @@ ScriptPromise HID::requestDevice(ScriptState* script_state,
   }
 
   if (ShouldBlockHidServiceCall(window, GetExecutionContext(),
-                                exception_state)) {
+                                &exception_state)) {
     return ScriptPromise();
   }
 
diff --git a/third_party/blink/web_tests/wpt_internal/hid/hid_connectionEvents_hid_disallowed.https.html b/third_party/blink/web_tests/wpt_internal/hid/hid_connectionEvents_hid_disallowed.https.html
new file mode 100644
index 0000000000000..55b94162e8183
--- /dev/null
+++ b/third_party/blink/web_tests/wpt_internal/hid/hid_connectionEvents_hid_disallowed.https.html
@@ -0,0 +1,38 @@
+<!DOCTYPE html>
+<body>
+<script src="/resources/testharness.js"></script>
+<script src="/resources/testharnessreport.js"></script>
+<script src="/resources/test-only-api.js"></script>
+<script src="/webhid/resources/common.js"></script>
+<script src="/webhid/resources/automation.js"></script>
+<script>
+'use strict';
+
+const kTestVendorId = 0x1234;
+const kTestProductId = 0xabcd;
+
+async function sleep(timeout) {
+  return new Promise(resolve => {
+    step_timeout(() => {
+      resolve();
+    }, timeout);
+  });
+}
+
+hid_test(async (t, fake) => {
+  let eventWatcher = new EventWatcher(t, navigator.hid, 'connect');
+
+  // This isn't necessary as the expected scenario shouldn't send any mojo
+  // request. However, in order to capture a bug that doesn't reject adding
+  // event listener, time delay here is to allow mojo request to be intercepted
+  // after adding connect event listener.
+  await sleep(100);
+
+  // If device connect event fires, EventWatcher will assert for an unexpected
+  // event.
+  fake.addDevice(fake.makeDevice(kTestVendorId, kTestProductId));
+  // Time delay here is to allow event to be fired if any.
+  await sleep(100);
+}, 'Connect event is not fired when hid is disallowed.');
+</script>
+</body>
diff --git a/third_party/blink/web_tests/wpt_internal/hid/hid_connectionEvents_hid_disallowed.https.html.headers b/third_party/blink/web_tests/wpt_internal/hid/hid_connectionEvents_hid_disallowed.https.html.headers
new file mode 100644
index 0000000000000..63556a31b89ac
--- /dev/null
+++ b/third_party/blink/web_tests/wpt_internal/hid/hid_connectionEvents_hid_disallowed.https.html.headers
@@ -0,0 +1 @@
+Permissions-Policy: hid=()
