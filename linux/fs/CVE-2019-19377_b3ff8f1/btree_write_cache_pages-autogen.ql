/**
 * @name linux-b3ff8f1d380e65dddd772542aa9bff6c86bf715a-btree_write_cache_pages
 * @id cpp/linux/b3ff8f1d380e65dddd772542aa9bff6c86bf715a/btree-write-cache-pages
 * @description linux-b3ff8f1d380e65dddd772542aa9bff6c86bf715a-fs/btrfs/extent_io.c-btree_write_cache_pages CVE-2019-19377
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vepd_3954, Variable vret_3959, ExprStmt target_1, AddressOfExpr target_2, AddressOfExpr target_3, ReturnStmt target_4, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("test_bit")
	and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="fs_state"
	and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("btrfs_fs_info *")
	and target_0.getThen().(BlockStmt).getStmt(0) instanceof ExprStmt
	and target_0.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_3959
	and target_0.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-117"
	and target_0.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("end_write_bio")
	and target_0.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vepd_3954
	and target_0.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vret_3959
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getOperand().(VariableAccess).getLocation().isBefore(target_0.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
	and target_0.getElse().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_3.getOperand().(VariableAccess).getLocation())
	and target_4.getExpr().(VariableAccess).getLocation().isBefore(target_0.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation()))
}

predicate func_1(Variable vepd_3954, Variable vret_3959, Function func, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_3959
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("flush_write_bio")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vepd_3954
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

predicate func_2(Variable vepd_3954, Variable vret_3959, AddressOfExpr target_2) {
	target_2.getOperand().(VariableAccess).getTarget()=vepd_3954
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("end_write_bio")
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vret_3959
}

predicate func_3(Variable vepd_3954, AddressOfExpr target_3) {
	target_3.getOperand().(VariableAccess).getTarget()=vepd_3954
	and target_3.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("flush_write_bio")
}

predicate func_4(Variable vret_3959, RelationalOperation target_5, ReturnStmt target_4) {
	target_4.getExpr().(VariableAccess).getTarget()=vret_3959
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_5(Variable vret_3959, BlockStmt target_6, RelationalOperation target_5) {
	 (target_5 instanceof GTExpr or target_5 instanceof LTExpr)
	and target_5.getLesserOperand().(VariableAccess).getTarget()=vret_3959
	and target_5.getGreaterOperand().(Literal).getValue()="0"
	and target_5.getParent().(IfStmt).getThen()=target_6
}

predicate func_6(Variable vepd_3954, Variable vret_3959, BlockStmt target_6) {
	target_6.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("end_write_bio")
	and target_6.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vepd_3954
	and target_6.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vret_3959
	and target_6.getStmt(1).(ReturnStmt).getExpr().(VariableAccess).getTarget()=vret_3959
}

from Function func, Variable vepd_3954, Variable vret_3959, ExprStmt target_1, AddressOfExpr target_2, AddressOfExpr target_3, ReturnStmt target_4, RelationalOperation target_5, BlockStmt target_6
where
not func_0(vepd_3954, vret_3959, target_1, target_2, target_3, target_4, func)
and func_1(vepd_3954, vret_3959, func, target_1)
and func_2(vepd_3954, vret_3959, target_2)
and func_3(vepd_3954, target_3)
and func_4(vret_3959, target_5, target_4)
and func_5(vret_3959, target_6, target_5)
and func_6(vepd_3954, vret_3959, target_6)
and vepd_3954.getType().hasName("extent_page_data")
and vret_3959.getType().hasName("int")
and vepd_3954.(LocalVariable).getFunction() = func
and vret_3959.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
