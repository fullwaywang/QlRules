/**
 * @name linux-c55aee1bf0e6b6feec8b2927b43f7a09a6d5f754-cypress_open
 * @id cpp/linux/c55aee1bf0e6b6feec8b2927b43f7a09a6d5f754/cypress-open
 * @description linux-c55aee1bf0e6b6feec8b2927b43f7a09a6d5f754-drivers/usb/serial/cypress_m8.c-cypress_open CVE-2016-3137
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vport_580, AddressOfExpr target_0) {
	target_0.getOperand().(PointerFieldAccess).getTarget().getName()="dev"
	and target_0.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vport_580
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_1(Parameter vport_580, Variable v__func__, Function func, IfStmt target_1) {
	target_1.getCondition().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="interrupt_in_urb"
	and target_1.getCondition().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vport_580
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("dev_err")
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0) instanceof AddressOfExpr
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s - interrupt_in_urb is empty!\n"
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=v__func__
	and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-1"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

/*predicate func_2(Variable v__func__, NotExpr target_4, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("dev_err")
	and target_2.getExpr().(FunctionCall).getArgument(0) instanceof AddressOfExpr
	and target_2.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s - interrupt_in_urb is empty!\n"
	and target_2.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=v__func__
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

*/
/*predicate func_3(NotExpr target_4, Function func, ReturnStmt target_3) {
	target_3.getExpr().(UnaryMinusExpr).getValue()="-1"
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_3.getEnclosingFunction() = func
}

*/
predicate func_4(Parameter vport_580, NotExpr target_4) {
	target_4.getOperand().(PointerFieldAccess).getTarget().getName()="interrupt_in_urb"
	and target_4.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vport_580
}

from Function func, Parameter vport_580, Variable v__func__, AddressOfExpr target_0, IfStmt target_1, NotExpr target_4
where
func_0(vport_580, target_0)
and func_1(vport_580, v__func__, func, target_1)
and func_4(vport_580, target_4)
and vport_580.getType().hasName("usb_serial_port *")
and v__func__.getType() instanceof ArrayType
and vport_580.getFunction() = func
and not v__func__.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
