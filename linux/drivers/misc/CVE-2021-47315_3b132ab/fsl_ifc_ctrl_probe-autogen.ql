/**
 * @name linux-3b132ab67fc7a358fff35e808fa65d4bea452521-fsl_ifc_ctrl_probe
 * @id cpp/linux/3b132ab67fc7a358fff35e808fa65d4bea452521/fsl-ifc-ctrl-probe
 * @description linux-3b132ab67fc7a358fff35e808fa65d4bea452521-drivers/memory/fsl_ifc.c-fsl_ifc_ctrl_probe CVE-2021-47315
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(NotExpr target_4, Function func) {
exists(ReturnStmt target_0 |
	target_0.getExpr().(UnaryMinusExpr).getValue()="-19"
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_0.getEnclosingFunction() = func)
}

predicate func_1(Variable vfsl_ifc_ctrl_dev, ExprStmt target_5, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("iounmap")
	and target_1.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="gregs"
	and target_1.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vfsl_ifc_ctrl_dev
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getFollowingStmt() instanceof ReturnStmt
	and target_5.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vret_206, NotExpr target_4, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_206
	and target_2.getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-19"
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
}

predicate func_3(NotExpr target_4, Function func, GotoStmt target_3) {
	target_3.getName() ="err"
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vfsl_ifc_ctrl_dev, NotExpr target_4) {
	target_4.getOperand().(PointerFieldAccess).getTarget().getName()="gregs"
	and target_4.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vfsl_ifc_ctrl_dev
}

predicate func_5(Variable vfsl_ifc_ctrl_dev, ExprStmt target_5) {
	target_5.getExpr().(FunctionCall).getTarget().hasName("irq_dispose_mapping")
	and target_5.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="irq"
	and target_5.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vfsl_ifc_ctrl_dev
}

from Function func, Variable vret_206, Variable vfsl_ifc_ctrl_dev, ExprStmt target_2, GotoStmt target_3, NotExpr target_4, ExprStmt target_5
where
not func_0(target_4, func)
and not func_1(vfsl_ifc_ctrl_dev, target_5, func)
and func_2(vret_206, target_4, target_2)
and func_3(target_4, func, target_3)
and func_4(vfsl_ifc_ctrl_dev, target_4)
and func_5(vfsl_ifc_ctrl_dev, target_5)
and vret_206.getType().hasName("int")
and vfsl_ifc_ctrl_dev.getType().hasName("fsl_ifc_ctrl *")
and vret_206.(LocalVariable).getFunction() = func
and not vfsl_ifc_ctrl_dev.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
