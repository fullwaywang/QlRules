/**
 * @name linux-36fc7317cdb16cfeae0f879916995037bb615ac4-io_poll_check_events
 * @id cpp/linux/36fc7317cdb16cfeae0f879916995037bb615ac4/io-poll-check-events
 * @description linux-36fc7317cdb16cfeae0f879916995037bb615ac4-io_uring/poll.c-io_poll_check_events CVE-2023-52895
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vreq_239, FunctionCall target_2, NotExpr target_3, BitwiseAndExpr target_4) {
exists(IfStmt target_0 |
	exists(NotExpr obj_0 | obj_0=target_0.getCondition() |
		exists(BitwiseAndExpr obj_1 | obj_1=obj_0.getOperand() |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getLeftOperand() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="(unknown field)"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vreq_239
				)
				and obj_2.getTarget().getName()="apoll_events"
			)
			and obj_1.getRightOperand().(BinaryBitwiseOperation).getValue()="1073741824"
		)
	)
	and exists(BlockStmt obj_4 | obj_4=target_0.getParent() |
		exists(IfStmt obj_5 | obj_5=obj_4.getParent() |
			obj_5.getThen().(BlockStmt).getStmt(0)=target_0
			and obj_5.getCondition()=target_2
		)
	)
	and target_3.getOperand().(NotExpr).getOperand().(NotExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(FunctionCall target_2, Function func, ReturnStmt target_1) {
	target_1.getParent().(IfStmt).getCondition()=target_2
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Parameter vreq_239, FunctionCall target_2) {
	exists(NotExpr obj_0 | obj_0=target_2.getArgument(0) |
		exists(NotExpr obj_1 | obj_1=obj_0.getOperand() |
			exists(NotExpr obj_2 | obj_2=obj_1.getOperand() |
				exists(ValueFieldAccess obj_3 | obj_3=obj_2.getOperand() |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getQualifier() |
						obj_4.getTarget().getName()="cqe"
						and obj_4.getQualifier().(VariableAccess).getTarget()=vreq_239
					)
					and obj_3.getTarget().getName()="res"
				)
			)
		)
	)
	and target_2.getTarget().hasName("__builtin_expect")
	and target_2.getArgument(1).(Literal).getValue()="0"
}

predicate func_3(Parameter vreq_239, NotExpr target_3) {
	exists(NotExpr obj_0 | obj_0=target_3.getOperand() |
		exists(NotExpr obj_1 | obj_1=obj_0.getOperand() |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="cqe"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vreq_239
				)
				and obj_2.getTarget().getName()="res"
			)
		)
	)
}

predicate func_4(Parameter vreq_239, BitwiseAndExpr target_4) {
	exists(ValueFieldAccess obj_0 | obj_0=target_4.getLeftOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getQualifier() |
			obj_1.getTarget().getName()="(unknown field)"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vreq_239
		)
		and obj_0.getTarget().getName()="apoll_events"
	)
	and target_4.getRightOperand().(BinaryBitwiseOperation).getValue()="1073741824"
}

from Function func, Parameter vreq_239, ReturnStmt target_1, FunctionCall target_2, NotExpr target_3, BitwiseAndExpr target_4
where
not func_0(vreq_239, target_2, target_3, target_4)
and func_1(target_2, func, target_1)
and func_2(vreq_239, target_2)
and func_3(vreq_239, target_3)
and func_4(vreq_239, target_4)
and vreq_239.getType().hasName("io_kiocb *")
and vreq_239.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
