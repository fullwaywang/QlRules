/**
 * @name linux-5593f72d1922403c11749532e3a0aa4cf61414e9-nvme_rdma_error_recovery_work
 * @id cpp/linux/5593f72d1922403c11749532e3a0aa4cf61414e9/nvme-rdma-error-recovery-work
 * @description linux-5593f72d1922403c11749532e3a0aa4cf61414e9-drivers/nvme/host/rdma.c-nvme_rdma_error_recovery_work CVE-2022-48788
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vctrl_1049, ExprStmt target_1, AddressOfExpr target_2, Function func) {
exists(ExprStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="ctrl"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vctrl_1049
				)
				and obj_2.getTarget().getName()="async_event_work"
			)
		)
		and obj_0.getTarget().hasName("flush_work")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vctrl_1049, ExprStmt target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		obj_0.getTarget().hasName("nvme_rdma_teardown_io_queues")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vctrl_1049
	)
}

predicate func_2(Variable vctrl_1049, AddressOfExpr target_2) {
	exists(PointerFieldAccess obj_0 | obj_0=target_2.getOperand() |
		obj_0.getTarget().getName()="ctrl"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vctrl_1049
	)
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("nvme_stop_keep_alive")
}

from Function func, Variable vctrl_1049, ExprStmt target_1, AddressOfExpr target_2
where
not func_0(vctrl_1049, target_1, target_2, func)
and func_1(vctrl_1049, target_1)
and func_2(vctrl_1049, target_2)
and vctrl_1049.getType().hasName("nvme_rdma_ctrl *")
and vctrl_1049.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
