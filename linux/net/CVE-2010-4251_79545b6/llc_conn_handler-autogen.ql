/**
 * @name linux-79545b681961d7001c1f4c3eb9ffb87bed4485db-llc_conn_handler
 * @id cpp/linux/79545b681961d7001c1f4c3eb9ffb87bed4485db/llc-conn-handler
 * @description linux-79545b681961d7001c1f4c3eb9ffb87bed4485db-net/llc/llc_conn.c-llc_conn_handler CVE-2010-4251
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vskb_786, Variable vsk_789, NotExpr target_6, ExprStmt target_7, ExprStmt target_8, ExprStmt target_9, AddressOfExpr target_10) {
	exists(IfStmt target_0 |
		target_0.getCondition().(FunctionCall).getTarget().hasName("sk_add_backlog_limited")
		and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_789
		and target_0.getCondition().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vskb_786
		and target_0.getThen() instanceof GotoStmt
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(2)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
		and target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
		and target_0.getCondition().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_8.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_10.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vsk_789, VariableAccess target_2) {
		target_2.getTarget()=vsk_789
		and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_3(Parameter vskb_786, VariableAccess target_3) {
		target_3.getTarget()=vskb_786
		and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_4(Function func, GotoStmt target_4) {
		func.getEntryPoint().(BlockStmt).getAStmt()=target_4
}

predicate func_5(Parameter vskb_786, Variable vsk_789, NotExpr target_6, ExprStmt target_5) {
		target_5.getExpr().(FunctionCall).getTarget().hasName("sk_add_backlog")
		and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_789
		and target_5.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vskb_786
		and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_6(Variable vsk_789, NotExpr target_6) {
		target_6.getOperand().(ValueFieldAccess).getTarget().getName()="owned"
		and target_6.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
		and target_6.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_789
}

predicate func_7(Parameter vskb_786, ExprStmt target_7) {
		target_7.getExpr().(FunctionCall).getTarget().hasName("llc_set_backlog_type")
		and target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskb_786
		and target_7.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="2"
}

predicate func_8(Parameter vskb_786, Function func, ExprStmt target_8) {
		target_8.getExpr().(FunctionCall).getTarget().hasName("kfree_skb")
		and target_8.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskb_786
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_8
}

predicate func_9(Parameter vskb_786, Variable vsk_789, ExprStmt target_9) {
		target_9.getExpr().(FunctionCall).getTarget().hasName("llc_conn_rcv")
		and target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_789
		and target_9.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vskb_786
}

predicate func_10(Variable vsk_789, AddressOfExpr target_10) {
		target_10.getOperand().(ValueFieldAccess).getTarget().getName()="slock"
		and target_10.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sk_lock"
		and target_10.getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_789
		and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
}

from Function func, Parameter vskb_786, Variable vsk_789, VariableAccess target_2, VariableAccess target_3, GotoStmt target_4, ExprStmt target_5, NotExpr target_6, ExprStmt target_7, ExprStmt target_8, ExprStmt target_9, AddressOfExpr target_10
where
not func_0(vskb_786, vsk_789, target_6, target_7, target_8, target_9, target_10)
and func_2(vsk_789, target_2)
and func_3(vskb_786, target_3)
and func_4(func, target_4)
and func_5(vskb_786, vsk_789, target_6, target_5)
and func_6(vsk_789, target_6)
and func_7(vskb_786, target_7)
and func_8(vskb_786, func, target_8)
and func_9(vskb_786, vsk_789, target_9)
and func_10(vsk_789, target_10)
and vskb_786.getType().hasName("sk_buff *")
and vsk_789.getType().hasName("sock *")
and vskb_786.getFunction() = func
and vsk_789.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
