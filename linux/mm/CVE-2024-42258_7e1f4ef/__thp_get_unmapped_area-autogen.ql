/**
 * @name linux-7e1f4efb8d6140b2ec79bf760c43e1fc186e8dfc-__thp_get_unmapped_area
 * @id cpp/linux/7e1f4efb8d6140b2ec79bf760c43e1fc186e8dfc/--thp-get-unmapped-area
 * @description linux-7e1f4efb8d6140b2ec79bf760c43e1fc186e8dfc-mm/huge_memory.c-__thp_get_unmapped_area CVE-2024-42258
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
	target_0.getValue()="0"
	and not target_0.getValue()="1"
	and target_0.getParent().(LogicalOrExpr).getParent().(IfStmt).getCondition().(LogicalOrExpr).getRightOperand().(FunctionCall).getTarget().hasName("in_compat_syscall")
	and target_0.getEnclosingFunction() = func
}

predicate func_1(ReturnStmt target_2, Function func) {
exists(NotExpr target_1 |
	exists(LogicalOrExpr obj_0 | obj_0=target_1.getParent() |
		obj_0.getLeftOperand() instanceof Literal
		and obj_0.getRightOperand().(FunctionCall).getTarget().hasName("in_compat_syscall")
		and obj_0.getParent().(IfStmt).getThen()=target_2
	)
	and target_1.getValue()="0"
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(LogicalOrExpr target_3, Function func, ReturnStmt target_2) {
	target_2.getExpr().(Literal).getValue()="0"
	and target_2.getParent().(IfStmt).getCondition()=target_3
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, LogicalOrExpr target_3) {
	target_3.getLeftOperand() instanceof Literal
	and target_3.getRightOperand().(FunctionCall).getTarget().hasName("in_compat_syscall")
	and target_3.getEnclosingFunction() = func
}

from Function func, Literal target_0, ReturnStmt target_2, LogicalOrExpr target_3
where
func_0(func, target_0)
and not func_1(target_2, func)
and func_2(target_3, func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
