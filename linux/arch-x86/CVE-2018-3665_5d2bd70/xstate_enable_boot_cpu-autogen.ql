/**
 * @name linux-5d2bd7009f306c82afddd1ca4d9763ad8473c216-xstate_enable_boot_cpu
 * @id cpp/linux/5d2bd7009f306c82afddd1ca4d9763ad8473c216/xstate-enable-boot-cpu
 * @description linux-5d2bd7009f306c82afddd1ca4d9763ad8473c216-arch/x86/kernel/xsave.c-xstate_enable_boot_cpu CVE-2018-3665
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("setup_xstate_init")
	and not target_0.getTarget().hasName("setup_init_fpu_buf")
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vxstate_size, Function func, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="state"
	and target_1.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="fpu"
	and target_1.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="thread"
	and target_1.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("get_current")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("__alloc_bootmem")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vxstate_size
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

predicate func_2(Function func, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("init_restore_xstate")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
}

from Function func, Variable vxstate_size, FunctionCall target_0, ExprStmt target_1, ExprStmt target_2
where
func_0(func, target_0)
and func_1(vxstate_size, func, target_1)
and func_2(func, target_2)
and vxstate_size.getType().hasName("unsigned int")
and not vxstate_size.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
