/**
 * @name linux-47a8ddcdcaccd9b891db4574795e46a33a121ac2-f2fs_convert_inline_inode
 * @id cpp/linux/47a8ddcdcaccd9b891db4574795e46a33a121ac2/f2fs-convert-inline-inode
 * @description linux-47a8ddcdcaccd9b891db4574795e46a33a121ac2-fs/f2fs/inline.c-f2fs_convert_inline_inode CVE-2024-42296
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(LogicalOrExpr target_5, Function func) {
exists(ReturnStmt target_0 |
	target_0.getExpr().(UnaryMinusExpr).getValue()="-30"
	and target_0.getParent().(IfStmt).getCondition()=target_5
	and target_0.getEnclosingFunction() = func
)
}

predicate func_1(ExprStmt target_6, Function func) {
exists(IfStmt target_1 |
	target_1.getCondition() instanceof NotExpr
	and target_1.getThen().(ReturnStmt).getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_6.getLocation())
)
}

predicate func_2(Parameter vinode_200, NotExpr target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getOperand() |
		obj_0.getTarget().hasName("f2fs_has_inline_data")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vinode_200
	)
}

predicate func_3(Variable vsbi_202, FunctionCall target_3) {
	target_3.getTarget().hasName("f2fs_hw_is_readonly")
	and target_3.getArgument(0).(VariableAccess).getTarget()=vsbi_202
}

predicate func_4(Variable vsbi_202, ReturnStmt target_7, LogicalOrExpr target_4) {
	exists(LogicalOrExpr obj_0 | obj_0=target_4.getParent() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRightOperand() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getArgument(0) |
				obj_2.getTarget().getName()="sb"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vsbi_202
			)
			and obj_1.getTarget().hasName("f2fs_readonly")
		)
		and obj_0.getParent().(IfStmt).getThen()=target_7
	)
	and target_4.getLeftOperand() instanceof NotExpr
	and target_4.getRightOperand() instanceof FunctionCall
}

predicate func_5(Variable vsbi_202, LogicalOrExpr target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getRightOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().getName()="sb"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vsbi_202
		)
		and obj_0.getTarget().hasName("f2fs_readonly")
	)
	and target_5.getLeftOperand() instanceof LogicalOrExpr
}

predicate func_6(Parameter vinode_200, ExprStmt target_6) {
	exists(AssignExpr obj_0 | obj_0=target_6.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("f2fs_dquot_initialize")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vinode_200
		)
		and obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("int")
	)
}

predicate func_7(Function func, ReturnStmt target_7) {
	target_7.getExpr().(Literal).getValue()="0"
	and target_7.getEnclosingFunction() = func
}

from Function func, Parameter vinode_200, Variable vsbi_202, NotExpr target_2, FunctionCall target_3, LogicalOrExpr target_4, LogicalOrExpr target_5, ExprStmt target_6, ReturnStmt target_7
where
not func_0(target_5, func)
and not func_1(target_6, func)
and func_2(vinode_200, target_2)
and func_3(vsbi_202, target_3)
and func_4(vsbi_202, target_7, target_4)
and func_5(vsbi_202, target_5)
and func_6(vinode_200, target_6)
and func_7(func, target_7)
and vinode_200.getType().hasName("inode *")
and vsbi_202.getType().hasName("f2fs_sb_info *")
and vinode_200.getFunction() = func
and vsbi_202.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
