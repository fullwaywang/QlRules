/**
 * @name linux-e16b859872b87650bb55b12cca5a5fcdc49c1442-macvlan_handle_frame
 * @id cpp/linux/e16b859872b87650bb55b12cca5a5fcdc49c1442/macvlan-handle-frame
 * @description linux-e16b859872b87650bb55b12cca5a5fcdc49c1442-macvlan_handle_frame CVE-2022-3526
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vskb_441, FunctionCall target_4, ExprStmt target_5) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("kfree_skb")
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskb_441
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vskb_441, FunctionCall target_6, ExprStmt target_7) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(FunctionCall).getTarget().hasName("kfree_skb")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskb_441
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(FunctionCall target_4, Function func, ReturnStmt target_2) {
		target_2.getParent().(IfStmt).getCondition()=target_4
		and target_2.getEnclosingFunction() = func
}

predicate func_3(FunctionCall target_6, Function func, ReturnStmt target_3) {
		target_3.getParent().(IfStmt).getCondition()=target_6
		and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vskb_441, ReturnStmt target_2, FunctionCall target_4) {
		target_4.getTarget().hasName("macvlan_forward_source")
		and target_4.getArgument(0).(VariableAccess).getTarget()=vskb_441
		and target_4.getArgument(1).(VariableAccess).getTarget().getType().hasName("macvlan_port *")
		and target_4.getArgument(2).(PointerFieldAccess).getTarget().getName()="h_source"
		and target_4.getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("const ethhdr *")
		and target_4.getParent().(IfStmt).getThen()=target_2
}

predicate func_5(Variable vskb_441, ExprStmt target_5) {
		target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_5.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(FunctionCall).getTarget().hasName("macvlan_broadcast_one")
		and target_5.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskb_441
		and target_5.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("const macvlan_dev *")
		and target_5.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("const ethhdr *")
		and target_5.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(FunctionCall).getArgument(3).(Literal).getValue()="0"
		and target_5.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("__netif_rx")
		and target_5.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskb_441
}

predicate func_6(Variable vskb_441, ReturnStmt target_3, FunctionCall target_6) {
		target_6.getTarget().hasName("macvlan_forward_source")
		and target_6.getArgument(0).(VariableAccess).getTarget()=vskb_441
		and target_6.getArgument(1).(VariableAccess).getTarget().getType().hasName("macvlan_port *")
		and target_6.getArgument(2).(PointerFieldAccess).getTarget().getName()="h_source"
		and target_6.getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("const ethhdr *")
		and target_6.getParent().(IfStmt).getThen()=target_3
}

predicate func_7(Variable vskb_441, ExprStmt target_7) {
		target_7.getExpr().(FunctionCall).getTarget().hasName("kfree_skb")
		and target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vskb_441
}

from Function func, Variable vskb_441, ReturnStmt target_2, ReturnStmt target_3, FunctionCall target_4, ExprStmt target_5, FunctionCall target_6, ExprStmt target_7
where
not func_0(vskb_441, target_4, target_5)
and not func_1(vskb_441, target_6, target_7)
and func_2(target_4, func, target_2)
and func_3(target_6, func, target_3)
and func_4(vskb_441, target_2, target_4)
and func_5(vskb_441, target_5)
and func_6(vskb_441, target_3, target_6)
and func_7(vskb_441, target_7)
and vskb_441.getType().hasName("sk_buff *")
and vskb_441.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
