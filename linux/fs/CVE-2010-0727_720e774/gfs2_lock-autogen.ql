/**
 * @name linux-720e7749279bde0d08684b1bb4e7a2eedeec6394-gfs2_lock
 * @id cpp/linux/720e7749279bde0d08684b1bb4e7a2eedeec6394/gfs2-lock
 * @description linux-720e7749279bde0d08684b1bb4e7a2eedeec6394-fs/gfs2/file.c-gfs2_lock CVE-2010-0727
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vfl_635, ReturnStmt target_2, NotExpr target_3, ExprStmt target_4) {
	exists(LogicalAndExpr target_0 |
		target_0.getAnOperand() instanceof FunctionCall
		and target_0.getAnOperand().(EqualityOperation).getAnOperand().(PointerFieldAccess).getTarget().getName()="fl_type"
		and target_0.getAnOperand().(EqualityOperation).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vfl_635
		and target_0.getAnOperand().(EqualityOperation).getAnOperand().(Literal).getValue()="2"
		and target_0.getParent().(IfStmt).getThen()=target_2
		and target_3.getOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getAnOperand().(EqualityOperation).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_0.getAnOperand().(EqualityOperation).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vip_637, ReturnStmt target_2, FunctionCall target_1) {
		target_1.getTarget().hasName("__mandatory_lock")
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="i_inode"
		and target_1.getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vip_637
		and target_1.getParent().(IfStmt).getThen()=target_2
}

predicate func_2(FunctionCall target_1, Function func, ReturnStmt target_2) {
		target_2.getExpr().(UnaryMinusExpr).getValue()="-37"
		and target_2.getParent().(IfStmt).getCondition()=target_1
		and target_2.getEnclosingFunction() = func
}

predicate func_3(Parameter vfl_635, NotExpr target_3) {
		target_3.getOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="fl_flags"
		and target_3.getOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vfl_635
		and target_3.getOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="1"
}

predicate func_4(Parameter vfl_635, ExprStmt target_4) {
		target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="fl_type"
		and target_4.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vfl_635
		and target_4.getExpr().(AssignExpr).getRValue().(Literal).getValue()="2"
}

from Function func, Parameter vfl_635, Variable vip_637, FunctionCall target_1, ReturnStmt target_2, NotExpr target_3, ExprStmt target_4
where
not func_0(vfl_635, target_2, target_3, target_4)
and func_1(vip_637, target_2, target_1)
and func_2(target_1, func, target_2)
and func_3(vfl_635, target_3)
and func_4(vfl_635, target_4)
and vfl_635.getType().hasName("file_lock *")
and vip_637.getType().hasName("gfs2_inode *")
and vfl_635.getFunction() = func
and vip_637.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
