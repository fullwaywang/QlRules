commit b538fa86076f4b0baa35c4eea2576dec2c1348e6	b538fa86076f4b0baa35c4eea2576dec2c1348e6
Author: Jan Keitel <jkeitel@google.com>
Date:   Tue Nov 28 13:32:30 2023 +0000

    Include extension hosts in custom cursor suppression.
    
    Prior to this CL, the CustomCursorSuppressor suppressed custom cursors
    in all WebContents that belonged to a Browser object, but not
    WebContents that host extension content. This CL extends the custom
    cursor suppression to all WebContents that belong to an extension
    for any of the profiles for which Browser objects exist.
    
    Bug: 1497985
    Change-Id: I9648cd735cc2969ee9b08e814230574ab75134e2
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5023870
    Reviewed-by: Devlin Cronin <rdevlin.cronin@chromium.org>
    Reviewed-by: Ken Buchanan <kenrb@chromium.org>
    Commit-Queue: Jan Keitel <jkeitel@google.com>
    Cr-Commit-Position: refs/heads/main@{#1229867}

diff --git a/chrome/browser/ui/views/autofill/popup/custom_cursor_suppressor.cc b/chrome/browser/ui/views/autofill/popup/custom_cursor_suppressor.cc
index f7141d9271c93..75f2c88e2d2f5 100644
--- a/chrome/browser/ui/views/autofill/popup/custom_cursor_suppressor.cc
+++ b/chrome/browser/ui/views/autofill/popup/custom_cursor_suppressor.cc
@@ -9,14 +9,20 @@
 #include <utility>
 #include <vector>
 
+#include "base/feature_list.h"
+#include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/ui/browser.h"
 #include "chrome/browser/ui/browser_list.h"
 #include "chrome/browser/ui/tabs/tab_strip_model.h"
+#include "components/autofill/core/common/autofill_features.h"
+#include "content/public/browser/browser_context.h"
 #include "content/public/browser/global_routing_id.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/render_widget_host.h"
 #include "content/public/browser/web_contents.h"
 #include "content/public/browser/web_contents_observer.h"
+#include "extensions/browser/extension_host.h"
+#include "extensions/browser/extension_host_registry.h"
 
 CustomCursorSuppressor::NavigationObserver::NavigationObserver(
     content::WebContents* web_contents,
@@ -54,6 +60,10 @@ void CustomCursorSuppressor::Start(int max_dimension_dips) {
       MaybeObserveNavigationsInWebContents(*active_contents);
       SuppressForWebContents(*active_contents);
     }
+    if (base::FeatureList::IsEnabled(
+            autofill::features::kAutofillPopupExtensionCursorSuppression)) {
+      ObserveAndSuppressExtensionsForProfile(*browser->profile());
+    }
   }
 }
 
@@ -61,6 +71,7 @@ void CustomCursorSuppressor::Stop() {
   disallow_custom_cursor_scopes_.clear();
   TabStripModelObserver::StopObservingAll(this);
   browser_list_observation_.Reset();
+  extension_host_registry_observation_.RemoveAllObservations();
 }
 
 bool CustomCursorSuppressor::IsSuppressing(
@@ -78,6 +89,23 @@ CustomCursorSuppressor::SuppressedRenderFrameHostIdsForTesting() const {
   return rfh_ids;
 }
 
+void CustomCursorSuppressor::ObserveAndSuppressExtensionsForProfile(
+    Profile& profile) {
+  auto* const registry = extensions::ExtensionHostRegistry::Get(&profile);
+  if (!registry ||
+      extension_host_registry_observation_.IsObservingSource(registry)) {
+    return;
+  }
+  extension_host_registry_observation_.AddObservation(registry);
+  // Suppress custom cursors on all existing extension hosts.
+  for (extensions::ExtensionHost* host : registry->extension_hosts()) {
+    if (host->document_element_available()) {
+      MaybeObserveNavigationsInWebContents(*host->host_contents());
+      SuppressForWebContents(*host->host_contents());
+    }
+  }
+}
+
 void CustomCursorSuppressor::SuppressForWebContents(
     content::WebContents& web_contents) {
   if (IsSuppressing(web_contents)) {
@@ -101,6 +129,13 @@ void CustomCursorSuppressor::MaybeObserveNavigationsInWebContents(
 
 void CustomCursorSuppressor::OnBrowserAdded(Browser* browser) {
   browser->tab_strip_model()->AddObserver(this);
+  ObserveAndSuppressExtensionsForProfile(*browser->profile());
+}
+
+void CustomCursorSuppressor::OnExtensionHostRegistryShutdown(
+    extensions::ExtensionHostRegistry* registry) {
+  CHECK(extension_host_registry_observation_.IsObservingSource(registry));
+  extension_host_registry_observation_.RemoveObservation(registry);
 }
 
 void CustomCursorSuppressor::OnTabStripModelChanged(
@@ -112,3 +147,11 @@ void CustomCursorSuppressor::OnTabStripModelChanged(
     SuppressForWebContents(*selection.new_contents);
   }
 }
+
+void CustomCursorSuppressor::OnExtensionHostDocumentElementAvailable(
+    content::BrowserContext* browser_context,
+    extensions::ExtensionHost* extension_host) {
+  CHECK(extension_host);
+  CHECK(extension_host->host_contents());
+  SuppressForWebContents(*extension_host->host_contents());
+}
diff --git a/chrome/browser/ui/views/autofill/popup/custom_cursor_suppressor.h b/chrome/browser/ui/views/autofill/popup/custom_cursor_suppressor.h
index 03f5cb04f86d1..c79833faa189e 100644
--- a/chrome/browser/ui/views/autofill/popup/custom_cursor_suppressor.h
+++ b/chrome/browser/ui/views/autofill/popup/custom_cursor_suppressor.h
@@ -10,6 +10,7 @@
 #include <vector>
 
 #include "base/functional/callback_helpers.h"
+#include "base/scoped_multi_source_observation.h"
 #include "base/scoped_observation.h"
 #include "chrome/browser/ui/browser_list.h"
 #include "chrome/browser/ui/browser_list_observer.h"
@@ -17,11 +18,17 @@
 #include "content/public/browser/global_routing_id.h"
 #include "content/public/browser/render_frame_host.h"
 #include "content/public/browser/web_contents_observer.h"
+#include "extensions/browser/extension_host_registry.h"
 
 namespace content {
+class BrowserContext;
 class WebContents;
 }  // namespace content
 
+namespace extensions {
+class ExtensionHost;
+}  // namespace extensions
+
 // While active, this class suppresses custom cursors exceeding a given size
 // limit on all the active `WebContents` or all `Browser`s of the current
 // profile.
@@ -31,8 +38,10 @@ class WebContents;
 // navigations or of `WebContents` that are no longer active.
 // Should the class become used in a wider context, additional logic to remove
 // such stale entries should be added.
-class CustomCursorSuppressor : public BrowserListObserver,
-                               public TabStripModelObserver {
+class CustomCursorSuppressor
+    : public BrowserListObserver,
+      public TabStripModelObserver,
+      public extensions::ExtensionHostRegistry::Observer {
  public:
   CustomCursorSuppressor();
   CustomCursorSuppressor(const CustomCursorSuppressor&) = delete;
@@ -57,6 +66,11 @@ class CustomCursorSuppressor : public BrowserListObserver,
   SuppressedRenderFrameHostIdsForTesting() const;
 
  private:
+  // Starts observing the `ExtensionHostRegistry` for profile and suppresses
+  // all custom cursors in its extensions. This is a no-op if the profile
+  // custom cursors for the extensions of this profile are already suppressed.
+  void ObserveAndSuppressExtensionsForProfile(Profile& profile);
+
   // Disallows custom cursors beyond the permitted size on `web_contents`. If
   // `this` is already disallowing custom cursors on `web_contents`, this is a
   // no-op.
@@ -79,6 +93,13 @@ class CustomCursorSuppressor : public BrowserListObserver,
       const TabStripModelChange& change,
       const TabStripSelectionChange& selection) override;
 
+  // extensions::ExtensionHostRegistry::Observer:
+  void OnExtensionHostDocumentElementAvailable(
+      content::BrowserContext* browser_context,
+      extensions::ExtensionHost* extension_host) override;
+  void OnExtensionHostRegistryShutdown(
+      extensions::ExtensionHostRegistry* registry) override;
+
   // A helper to filter and forward `RenderFrameHostChanged` events of a single
   // `WebContents`. Used to allow `CustomCursorSuppressor` to effectively
   // observe multiple `WebContents`.
@@ -102,6 +123,13 @@ class CustomCursorSuppressor : public BrowserListObserver,
   base::ScopedObservation<BrowserList, BrowserListObserver>
       browser_list_observation_{this};
 
+  // Observes when new `ExtensionHost`s load their documents and when
+  // `ExtensionHostRegistry`s shut down.
+  base::ScopedMultiSourceObservation<
+      extensions::ExtensionHostRegistry,
+      extensions::ExtensionHostRegistry::Observer>
+      extension_host_registry_observation_{this};
+
   int max_dimension_dips_ = 0;
 
   std::map<content::GlobalRenderFrameHostId, base::ScopedClosureRunner>
diff --git a/chrome/browser/ui/views/autofill/popup/custom_cursor_suppressor_browsertest.cc b/chrome/browser/ui/views/autofill/popup/custom_cursor_suppressor_browsertest.cc
new file mode 100644
index 0000000000000..c74931c822970
--- /dev/null
+++ b/chrome/browser/ui/views/autofill/popup/custom_cursor_suppressor_browsertest.cc
@@ -0,0 +1,81 @@
+// Copyright 2023 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/ui/views/autofill/popup/custom_cursor_suppressor.h"
+
+#include "chrome/browser/extensions/extension_browsertest.h"
+#include "chrome/browser/ui/views/side_panel/extensions/extension_side_panel_coordinator.h"
+#include "chrome/browser/ui/views/side_panel/extensions/extension_side_panel_manager.h"
+#include "chrome/browser/ui/views/side_panel/side_panel_coordinator.h"
+#include "chrome/browser/ui/views/side_panel/side_panel_registry.h"
+#include "content/public/test/browser_test.h"
+#include "extensions/browser/extension_host_test_helper.h"
+#include "extensions/test/extension_test_message_listener.h"
+#include "testing/gtest/include/gtest/gtest.h"
+
+class CustomCursorSuppressorBrowsertest
+    : public extensions::ExtensionBrowserTest {
+ protected:
+  // Installs an extension and shows it in its side panel.
+  scoped_refptr<const extensions::Extension> LoadExtensionInSidePanel() {
+    scoped_refptr<const extensions::Extension> extension = LoadExtension(
+        test_data_dir_.AppendASCII("api_test/side_panel/simple_default"));
+    CHECK(extension);
+    SidePanelEntry::Key extension_key =
+        SidePanelEntry::Key(SidePanelEntry::Id::kExtension, extension->id());
+    CHECK(global_registry()->GetEntryForKey(extension_key));
+
+    ExtensionTestMessageListener default_path_listener("default_path");
+    side_panel_coordinator()->Show(extension_key);
+    CHECK(default_path_listener.WaitUntilSatisfied());
+    CHECK(side_panel_coordinator()->IsSidePanelShowing());
+    return extension;
+  }
+
+  SidePanelRegistry* global_registry() {
+    return SidePanelCoordinator::GetGlobalSidePanelRegistry(browser());
+  }
+
+  SidePanelCoordinator* side_panel_coordinator() {
+    return SidePanelUtil::GetSidePanelCoordinatorForBrowser(browser());
+  }
+};
+
+// Tests that starting custom cursor suppression disables custom cursors in
+// extension `WebContents` objects that were created before the suppressor is
+// started.
+IN_PROC_BROWSER_TEST_F(CustomCursorSuppressorBrowsertest,
+                       SuppressionWorksForAlreadyLoadedExtensions) {
+  scoped_refptr<const extensions::Extension> extension =
+      LoadExtensionInSidePanel();
+  auto* extension_coordinator =
+      extensions::ExtensionSidePanelManager::GetOrCreateForBrowser(browser())
+          ->GetExtensionCoordinatorForTesting(extension->id());
+  content::WebContents* host_contents =
+      extension_coordinator->GetHostWebContentsForTesting();
+
+  CustomCursorSuppressor suppressor;
+  EXPECT_FALSE(suppressor.IsSuppressing(*host_contents));
+  suppressor.Start();
+  EXPECT_TRUE(suppressor.IsSuppressing(*host_contents));
+}
+
+// Tests that starting custom cursor suppression disables custom cursors in
+// extensions `WebContents` objects that are created after the suppressor
+// is started.
+IN_PROC_BROWSER_TEST_F(
+    CustomCursorSuppressorBrowsertest,
+    SuppressionWorksForExtensionsLoadedAfterSuppressorStart) {
+  CustomCursorSuppressor suppressor;
+  suppressor.Start();
+
+  scoped_refptr<const extensions::Extension> extension =
+      LoadExtensionInSidePanel();
+  auto* extension_coordinator =
+      extensions::ExtensionSidePanelManager::GetOrCreateForBrowser(browser())
+          ->GetExtensionCoordinatorForTesting(extension->id());
+  content::WebContents* host_contents =
+      extension_coordinator->GetHostWebContentsForTesting();
+  EXPECT_TRUE(suppressor.IsSuppressing(*host_contents));
+}
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index f67037c50a601..74c9201542827 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -3769,6 +3769,7 @@ if (!is_android) {
         "../browser/preloading/prefetch/no_state_prefetch/no_state_prefetch_test_utils.cc",
         "../browser/preloading/prefetch/no_state_prefetch/no_state_prefetch_test_utils.h",
         "../browser/safe_browsing/extension_telemetry/extension_telemetry_service_browsertest.cc",
+        "../browser/ui/views/autofill/popup/custom_cursor_suppressor_browsertest.cc",
         "../browser/ui/views/web_apps/create_shortcut_confirmation_view_browsertest.cc",
         "../browser/ui/views/web_apps/pwa_confirmation_bubble_view_browsertest.cc",
         "../browser/ui/views/web_apps/web_app_identity_update_confirmation_view_browsertest.cc",
diff --git a/components/autofill/core/common/autofill_features.cc b/components/autofill/core/common/autofill_features.cc
index ad68c541edcdb..24a5a73bc4c35 100644
--- a/components/autofill/core/common/autofill_features.cc
+++ b/components/autofill/core/common/autofill_features.cc
@@ -514,6 +514,15 @@ BASE_FEATURE(kAutofillPopupDoesNotOverlapWithContextMenu,
              "AutofillPopupDoesNotOverlapWithContextMenu",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
+// If the feature is enabled, then custom cursor exceeding the (24 dips)
+// dimension limit are disallowed in extension-hosted content. This feature is
+// dependent on `kAutofillPopupMultiWindowCursorSuppression` - if the latter is
+// disabled, so is this.
+COMPONENT_EXPORT(AUTOFILL)
+BASE_FEATURE(kAutofillPopupExtensionCursorSuppression,
+             "AutofillPopupExtensionCursorSuppression",
+             base::FEATURE_ENABLED_BY_DEFAULT);
+
 // If the feature is enabled, custom cursors exceeding the (24 dips) dimension
 // limit are disallowed for all active tabs in all active windows.
 COMPONENT_EXPORT(AUTOFILL)
diff --git a/components/autofill/core/common/autofill_features.h b/components/autofill/core/common/autofill_features.h
index 6e5a0b063efac..8bfe52cad4706 100644
--- a/components/autofill/core/common/autofill_features.h
+++ b/components/autofill/core/common/autofill_features.h
@@ -172,6 +172,8 @@ BASE_DECLARE_FEATURE(kAutofillPopupDisablePaintChecks);
 COMPONENT_EXPORT(AUTOFILL)
 BASE_DECLARE_FEATURE(kAutofillPopupDoesNotOverlapWithContextMenu);
 COMPONENT_EXPORT(AUTOFILL)
+BASE_DECLARE_FEATURE(kAutofillPopupExtensionCursorSuppression);
+COMPONENT_EXPORT(AUTOFILL)
 BASE_DECLARE_FEATURE(kAutofillPopupMultiWindowCursorSuppression);
 COMPONENT_EXPORT(AUTOFILL)
 BASE_DECLARE_FEATURE(kAutofillPopupUseLatencyInformationForAcceptThreshold);
diff --git a/extensions/browser/extension_host_registry.cc b/extensions/browser/extension_host_registry.cc
index 1304c13d76367..02facce506f39 100644
--- a/extensions/browser/extension_host_registry.cc
+++ b/extensions/browser/extension_host_registry.cc
@@ -184,4 +184,10 @@ void ExtensionHostRegistry::RemoveObserver(Observer* observer) {
   observers_.RemoveObserver(observer);
 }
 
+void ExtensionHostRegistry::Shutdown() {
+  for (Observer& observer : observers_) {
+    observer.OnExtensionHostRegistryShutdown(this);
+  }
+}
+
 }  // namespace extensions
diff --git a/extensions/browser/extension_host_registry.h b/extensions/browser/extension_host_registry.h
index a9e00e5c77b6e..a946660381965 100644
--- a/extensions/browser/extension_host_registry.h
+++ b/extensions/browser/extension_host_registry.h
@@ -75,6 +75,10 @@ class ExtensionHostRegistry : public KeyedService {
     virtual void OnExtensionHostRenderProcessGone(
         content::BrowserContext* browser_context,
         ExtensionHost* extension_host) {}
+
+    // Called when `registry` is starting to shut down.
+    virtual void OnExtensionHostRegistryShutdown(
+        ExtensionHostRegistry* registry) {}
   };
 
   ExtensionHostRegistry();
@@ -127,9 +131,16 @@ class ExtensionHostRegistry : public KeyedService {
   ExtensionHost* GetExtensionHostForPrimaryMainFrame(
       content::RenderFrameHost* render_frame_host);
 
+  const std::unordered_set<ExtensionHost*>& extension_hosts() {
+    return extension_hosts_;
+  }
+
   void AddObserver(Observer* observer);
   void RemoveObserver(Observer* observer);
 
+  // KeyedService:
+  void Shutdown() override;
+
  private:
   // The active set of ExtensionHosts.
   std::unordered_set<ExtensionHost*> extension_hosts_;
