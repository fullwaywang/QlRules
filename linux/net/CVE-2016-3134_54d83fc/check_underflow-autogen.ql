/**
 * @name linux-54d83fc74aa9ec72794373cb47432c5f7fb1a309-check_underflow
 * @id cpp/linux/54d83fc74aa9ec72794373cb47432c5f7fb1a309/check-underflow
 * @description linux-54d83fc74aa9ec72794373cb47432c5f7fb1a309-net/ipv4/netfilter/arp_tables.c-check_underflow CVE-2016-3134
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter ve_549, VariableAccess target_0) {
	target_0.getTarget()=ve_549
	and target_0.getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("unconditional")
	and target_0.getParent().(PointerFieldAccess).getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getArgument(0) instanceof AddressOfExpr
}

predicate func_1(Parameter ve_549, AddressOfExpr target_1) {
	target_1.getOperand().(PointerFieldAccess).getTarget().getName()="arp"
	and target_1.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_549
	and target_1.getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("unconditional")
}

from Function func, Parameter ve_549, VariableAccess target_0, AddressOfExpr target_1
where
func_0(ve_549, target_0)
and func_1(ve_549, target_1)
and ve_549.getType().hasName("const arpt_entry *")
and ve_549.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
