commit 4b9452a25735187b50c20d77e229b87d095f31d0	4b9452a25735187b50c20d77e229b87d095f31d0
Author: Jack Hsieh <chengweih@chromium.org>
Date:   Wed Mar 8 04:51:07 2023 +0000

    serial: Reject using Serial API in an opaque origin
    
    Rejects renderer's request of using Serial API when the top-level
    document has an opaque origin.
    
    Bug: 1375133
    Change-Id: I14488099dda296b0fcf62f25ffef3e6e76e566ae
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4237816
    Reviewed-by: Reilly Grant <reillyg@chromium.org>
    Reviewed-by: Alex Moshchuk <alexmos@chromium.org>
    Commit-Queue: Jack Hsieh <chengweih@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1114388}

diff --git a/content/browser/renderer_host/render_frame_host_impl.cc b/content/browser/renderer_host/render_frame_host_impl.cc
index ba565d14c8c3f..2b5865e74ec84 100644
--- a/content/browser/renderer_host/render_frame_host_impl.cc
+++ b/content/browser/renderer_host/render_frame_host_impl.cc
@@ -11089,6 +11089,14 @@ void RenderFrameHostImpl::BindSerialService(
     return;
   }
 
+  // Rejects using Serial API when the top-level document has an opaque origin.
+  if (GetOutermostMainFrame()->GetLastCommittedOrigin().opaque()) {
+    mojo::ReportBadMessage(
+        "Web Serial is not allowed when the top-level document has an opaque "
+        "origin.");
+    return;
+  }
+
   SerialService::GetOrCreateForCurrentDocument(this)->Bind(std::move(receiver));
 }
 
diff --git a/content/browser/serial/serial_unittest.cc b/content/browser/serial/serial_unittest.cc
index f102cb4f8ba3f..7b1643d654b7c 100644
--- a/content/browser/serial/serial_unittest.cc
+++ b/content/browser/serial/serial_unittest.cc
@@ -11,9 +11,12 @@
 #include "content/browser/serial/serial_test_utils.h"
 #include "content/public/common/content_client.h"
 #include "content/public/common/content_switches.h"
+#include "content/public/test/navigation_simulator.h"
 #include "content/test/test_render_view_host.h"
 #include "content/test/test_web_contents.h"
 #include "mojo/public/cpp/bindings/remote.h"
+#include "mojo/public/cpp/test_support/fake_message_dispatch_context.h"
+#include "mojo/public/cpp/test_support/test_utils.h"
 #include "services/device/public/cpp/test/fake_serial_port_client.h"
 #include "services/device/public/cpp/test/fake_serial_port_manager.h"
 #include "testing/gmock/include/gmock/gmock.h"
@@ -216,6 +219,8 @@ TEST_F(SerialTest, OpenAndNavigateCrossOrigin) {
 }
 
 TEST_F(SerialTest, AddAndRemovePorts) {
+  NavigateAndCommit(GURL(kTestUrl));
+
   mojo::Remote<blink::mojom::SerialService> service;
   contents()->GetPrimaryMainFrame()->BindSerialService(
       service.BindNewPipeAndPassReceiver());
@@ -443,4 +448,62 @@ TEST_F(SerialTest, OpenTwoPortsAndRevokePermission) {
   EXPECT_TRUE(service.is_connected());
 }
 
+TEST_F(SerialTest, RejectOpaqueOrigin) {
+  // Create a fake dispatch context to trigger a bad message in.
+  mojo::FakeMessageDispatchContext fake_dispatch_context;
+  mojo::test::BadMessageObserver bad_message_observer;
+
+  auto response_headers =
+      base::MakeRefCounted<net::HttpResponseHeaders>(std::string());
+  response_headers->SetHeader("Content-Security-Policy",
+                              "sandbox allow-scripts");
+  auto navigation_simulator = NavigationSimulator::CreateRendererInitiated(
+      GURL("https://opaque.com"), main_test_rfh());
+  navigation_simulator->SetResponseHeaders(response_headers);
+  navigation_simulator->Start();
+  navigation_simulator->Commit();
+
+  mojo::Remote<blink::mojom::SerialService> service;
+  main_test_rfh()->BindSerialService(service.BindNewPipeAndPassReceiver());
+  EXPECT_EQ(bad_message_observer.WaitForBadMessage(),
+            "Web Serial is not allowed when the top-level document has an "
+            "opaque origin.");
+}
+
+TEST_F(SerialTest, RejectOpaqueOriginEmbeddedFrame) {
+  // Create a fake dispatch context to trigger a bad message in.
+  mojo::FakeMessageDispatchContext fake_dispatch_context;
+  mojo::test::BadMessageObserver bad_message_observer;
+
+  auto response_headers =
+      base::MakeRefCounted<net::HttpResponseHeaders>(std::string());
+  response_headers->SetHeader("Content-Security-Policy",
+                              "sandbox allow-scripts");
+  auto navigation_simulator = NavigationSimulator::CreateRendererInitiated(
+      GURL("https://opaque.com"), main_test_rfh());
+  navigation_simulator->SetResponseHeaders(response_headers);
+  navigation_simulator->Start();
+  navigation_simulator->Commit();
+
+  const GURL kEmbeddedUrl("https://opaque.com");
+  RenderFrameHost* embedded_rfh =
+      RenderFrameHostTester::For(main_test_rfh())
+          ->AppendChildWithPolicy(
+              "embedded_frame",
+              {{blink::mojom::PermissionsPolicyFeature::kSerial,
+                std::vector{blink::OriginWithPossibleWildcards(
+                    url::Origin::Create(kEmbeddedUrl),
+                    /*has_subdomain_wildcard=*/false)},
+                /*matches_all_origins=*/false, /*matches_opaque_src=*/true}});
+  embedded_rfh = NavigationSimulator::NavigateAndCommitFromDocument(
+      kEmbeddedUrl, embedded_rfh);
+
+  mojo::Remote<blink::mojom::SerialService> service;
+  static_cast<TestRenderFrameHost*>(embedded_rfh)
+      ->BindSerialService(service.BindNewPipeAndPassReceiver());
+  EXPECT_EQ(bad_message_observer.WaitForBadMessage(),
+            "Web Serial is not allowed when the top-level document has an "
+            "opaque origin.");
+}
+
 }  // namespace content
