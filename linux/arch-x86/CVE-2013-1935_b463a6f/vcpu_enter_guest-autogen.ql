/**
 * @name linux-b463a6f744a263fccd7da14db1afdc880371a280-vcpu_enter_guest
 * @id cpp/linux/b463a6f744a263fccd7da14db1afdc880371a280/vcpu-enter-guest
 * @description linux-b463a6f744a263fccd7da14db1afdc880371a280-arch/x86/kvm/x86.c-vcpu_enter_guest CVE-2013-1935
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vr_5005, Parameter vvcpu_5003, ExprStmt target_9, IfStmt target_0) {
	target_0.getCondition() instanceof LogicalOrExpr
	and target_0.getThen().(BlockStmt).getStmt(0) instanceof IfStmt
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("atomic_set")
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="guest_mode"
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_5003
	and target_0.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_0.getThen().(BlockStmt).getStmt(3).(DoStmt).getCondition().(Literal).getValue()="0"
	and target_0.getThen().(BlockStmt).getStmt(3).(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("trace_hardirqs_on")
	and target_0.getThen().(BlockStmt).getStmt(3).(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("raw_local_irq_enable")
	and target_0.getThen().(BlockStmt).getStmt(4).(DoStmt).getCondition().(Literal).getValue()="0"
	and target_0.getThen().(BlockStmt).getStmt(5).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vr_5005
	and target_0.getThen().(BlockStmt).getStmt(5).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="1"
	and target_0.getThen().(BlockStmt).getStmt(6).(GotoStmt).getName() ="out"
	and target_9.getLocation().isBefore(target_0.getLocation())
}

predicate func_1(Variable vkvm_x86_ops, Parameter vvcpu_5003, ExprStmt target_10, ExprStmt target_11, AddressOfExpr target_12) {
exists(VariableCall target_1 |
	target_1.getExpr().(PointerFieldAccess).getTarget().getName()="cancel_injection"
	and target_1.getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vkvm_x86_ops
	and target_1.getArgument(0).(VariableAccess).getTarget()=vvcpu_5003
	and target_10.getExpr().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_1.getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_11.getExpr().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_1.getArgument(0).(VariableAccess).getLocation().isBefore(target_12.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vreq_event_5008, Parameter vvcpu_5003, FunctionCall target_2) {
	target_2.getTarget().hasName("kvm_check_request")
	and target_2.getArgument(0).(Literal).getValue()="11"
	and target_2.getArgument(1).(VariableAccess).getTarget()=vvcpu_5003
	and target_2.getParent().(AssignExpr).getRValue() = target_2
	and target_2.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vreq_event_5008
}

predicate func_3(Parameter vvcpu_5003, BlockStmt target_13, LogicalOrExpr target_3) {
	target_3.getLeftOperand().(LogicalOrExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("atomic_read")
	and target_3.getLeftOperand().(LogicalOrExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="guest_mode"
	and target_3.getLeftOperand().(LogicalOrExpr).getLeftOperand().(LogicalOrExpr).getRightOperand().(PointerFieldAccess).getTarget().getName()="requests"
	and target_3.getLeftOperand().(LogicalOrExpr).getLeftOperand().(LogicalOrExpr).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_5003
	and target_3.getLeftOperand().(LogicalOrExpr).getRightOperand().(FunctionCall).getTarget().hasName("need_resched")
	and target_3.getRightOperand().(FunctionCall).getTarget().hasName("signal_pending")
	and target_3.getRightOperand().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("get_current")
	and target_3.getParent().(IfStmt).getThen()=target_13
}

predicate func_4(Parameter vvcpu_5003, VariableAccess target_4) {
	target_4.getTarget()=vvcpu_5003
	and target_4.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_5(Function func, DeclStmt target_5) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

predicate func_6(Variable vreq_event_5008, AssignExpr target_6) {
	target_6.getLValue().(VariableAccess).getTarget()=vreq_event_5008
	and target_6.getRValue() instanceof FunctionCall
}

predicate func_7(Variable vreq_event_5008, Parameter vvcpu_5003, LogicalOrExpr target_3, IfStmt target_7) {
	target_7.getCondition().(VariableAccess).getTarget()=vreq_event_5008
	and target_7.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("kvm_make_request")
	and target_7.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(Literal).getValue()="11"
	and target_7.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vvcpu_5003
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
}

predicate func_8(Variable vreq_event_5008, BlockStmt target_14, VariableAccess target_8) {
	target_8.getTarget()=vreq_event_5008
	and target_8.getParent().(LogicalOrExpr).getRightOperand().(VariableAccess).getTarget().getType().hasName("bool")
	and target_8.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen()=target_14
}

predicate func_9(Function func, ExprStmt target_9) {
	target_9.getExpr() instanceof AssignExpr
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Variable vkvm_x86_ops, Parameter vvcpu_5003, ExprStmt target_10) {
	target_10.getExpr().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="prepare_guest_switch"
	and target_10.getExpr().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vkvm_x86_ops
	and target_10.getExpr().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_5003
}

predicate func_11(Variable vkvm_x86_ops, Parameter vvcpu_5003, ExprStmt target_11) {
	target_11.getExpr().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="enable_nmi_window"
	and target_11.getExpr().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vkvm_x86_ops
	and target_11.getExpr().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_5003
}

predicate func_12(Parameter vvcpu_5003, AddressOfExpr target_12) {
	target_12.getOperand().(PointerFieldAccess).getTarget().getName()="guest_mode"
	and target_12.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_5003
	and target_12.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("atomic_set")
	and target_12.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
}

predicate func_13(Parameter vvcpu_5003, BlockStmt target_13) {
	target_13.getStmt(0) instanceof IfStmt
	and target_13.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("atomic_set")
	and target_13.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="guest_mode"
	and target_13.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_5003
	and target_13.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
}

predicate func_14(Variable vkvm_x86_ops, Parameter vvcpu_5003, BlockStmt target_14) {
	target_14.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("inject_pending_event")
	and target_14.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_5003
	and target_14.getStmt(1).(IfStmt).getCondition().(ValueFieldAccess).getTarget().getName()="nmi_pending"
	and target_14.getStmt(1).(IfStmt).getCondition().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="arch"
	and target_14.getStmt(1).(IfStmt).getCondition().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_5003
	and target_14.getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="enable_nmi_window"
	and target_14.getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vkvm_x86_ops
	and target_14.getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_5003
	and target_14.getStmt(1).(IfStmt).getElse().(IfStmt).getCondition().(LogicalOrExpr).getLeftOperand().(FunctionCall).getTarget().hasName("kvm_cpu_has_interrupt")
	and target_14.getStmt(1).(IfStmt).getElse().(IfStmt).getCondition().(LogicalOrExpr).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_5003
	and target_14.getStmt(1).(IfStmt).getElse().(IfStmt).getCondition().(LogicalOrExpr).getRightOperand().(VariableAccess).getTarget().getType().hasName("bool")
	and target_14.getStmt(1).(IfStmt).getElse().(IfStmt).getThen().(ExprStmt).getExpr().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="enable_irq_window"
	and target_14.getStmt(1).(IfStmt).getElse().(IfStmt).getThen().(ExprStmt).getExpr().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vkvm_x86_ops
	and target_14.getStmt(1).(IfStmt).getElse().(IfStmt).getThen().(ExprStmt).getExpr().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_5003
}

from Function func, Variable vr_5005, Variable vreq_event_5008, Variable vkvm_x86_ops, Parameter vvcpu_5003, IfStmt target_0, FunctionCall target_2, LogicalOrExpr target_3, VariableAccess target_4, DeclStmt target_5, AssignExpr target_6, IfStmt target_7, VariableAccess target_8, ExprStmt target_9, ExprStmt target_10, ExprStmt target_11, AddressOfExpr target_12, BlockStmt target_13, BlockStmt target_14
where
func_0(vr_5005, vvcpu_5003, target_9, target_0)
and not func_1(vkvm_x86_ops, vvcpu_5003, target_10, target_11, target_12)
and func_2(vreq_event_5008, vvcpu_5003, target_2)
and func_3(vvcpu_5003, target_13, target_3)
and func_4(vvcpu_5003, target_4)
and func_5(func, target_5)
and func_6(vreq_event_5008, target_6)
and func_7(vreq_event_5008, vvcpu_5003, target_3, target_7)
and func_8(vreq_event_5008, target_14, target_8)
and func_9(func, target_9)
and func_10(vkvm_x86_ops, vvcpu_5003, target_10)
and func_11(vkvm_x86_ops, vvcpu_5003, target_11)
and func_12(vvcpu_5003, target_12)
and func_13(vvcpu_5003, target_13)
and func_14(vkvm_x86_ops, vvcpu_5003, target_14)
and vr_5005.getType().hasName("int")
and vreq_event_5008.getType().hasName("bool")
and vkvm_x86_ops.getType().hasName("kvm_x86_ops *")
and vvcpu_5003.getType().hasName("kvm_vcpu *")
and vr_5005.(LocalVariable).getFunction() = func
and vreq_event_5008.(LocalVariable).getFunction() = func
and not vkvm_x86_ops.getParentScope+() = func
and vvcpu_5003.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
