/**
 * @name openssl-3bf7b73ea7123045b8f972badc67ed6878e6c37f-test_modexp_mont5
 * @id cpp/openssl/3bf7b73ea7123045b8f972badc67ed6878e6c37f/test-modexp-mont5
 * @description openssl-3bf7b73ea7123045b8f972badc67ed6878e6c37f-test/bntest.c-test_modexp_mont5 CVE-2021-4160
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable va_462, Variable vd_462, ExprStmt target_1, EqualityOperation target_2) {
	exists(IfStmt target_0 |
		target_0.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("test_true")
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("test_true")
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0) instanceof StringLiteral
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1) instanceof Literal
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(2).(StringLiteral).getValue()="BN_mod_exp_mont_consttime(d, e, p, m, ctx, NULL)"
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("test_true")
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0) instanceof StringLiteral
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1) instanceof Literal
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(2).(StringLiteral).getValue()="BN_mod_exp_simple(a, e, p, m, ctx)"
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(3).(EqualityOperation).getAnOperand().(FunctionCall).getTarget().hasName("BN_mod_exp_simple")
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(3).(EqualityOperation).getAnOperand() instanceof Literal
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("test_BN_eq")
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0) instanceof StringLiteral
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1) instanceof Literal
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(2) instanceof StringLiteral
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(3) instanceof StringLiteral
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(4).(VariableAccess).getTarget()=va_462
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(5).(VariableAccess).getTarget()=vd_462
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(4).(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getCondition().(LogicalOrExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(5).(VariableAccess).getLocation().isBefore(target_2.getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable va_462, ExprStmt target_1) {
		target_1.getExpr().(FunctionCall).getTarget().hasName("BN_zero_ex")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=va_462
}

predicate func_2(Variable va_462, Variable vd_462, EqualityOperation target_2) {
		target_2.getAnOperand().(FunctionCall).getTarget().hasName("BN_mod_exp_mont_consttime")
		and target_2.getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vd_462
		and target_2.getAnOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=va_462
		and target_2.getAnOperand().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("BIGNUM *")
		and target_2.getAnOperand().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("BIGNUM *")
		and target_2.getAnOperand().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("BN_CTX *")
		and target_2.getAnOperand().(FunctionCall).getArgument(5) instanceof Literal
		and target_2.getAnOperand() instanceof Literal
		and target_2.getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("test_true")
		and target_2.getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getArgument(0) instanceof StringLiteral
		and target_2.getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getArgument(1) instanceof Literal
		and target_2.getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getArgument(2).(StringLiteral).getValue()="BN_mod_exp_mont_consttime(d, a, p, m, ctx, NULL)"
}

from Function func, Variable va_462, Variable vd_462, ExprStmt target_1, EqualityOperation target_2
where
not func_0(va_462, vd_462, target_1, target_2)
and func_1(va_462, target_1)
and func_2(va_462, vd_462, target_2)
and va_462.getType().hasName("BIGNUM *")
and vd_462.getType().hasName("BIGNUM *")
and va_462.(LocalVariable).getFunction() = func
and vd_462.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
