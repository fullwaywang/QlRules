/**
 * @name linux-b9a41d21dceadf8104812626ef85dc56ee8a60ed-dm_get_from_kobject
 * @id cpp/linux/b9a41d21dceadf8104812626ef85dc56ee8a60ed/dm-get-from-kobject
 * @description linux-b9a41d21dceadf8104812626ef85dc56ee8a60ed-drivers/md/dm.c-dm_get_from_kobject CVE-2017-18203
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("spin_lock")
		and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("spinlock_t")
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0)
}

predicate func_1(Variable vmd_2710, LogicalOrExpr target_6, ExprStmt target_7) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vmd_2710
		and target_1.getExpr().(AssignExpr).getRValue() instanceof Literal
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
		and target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(LogicalOrExpr target_6, Function func) {
	exists(GotoStmt target_2 |
		target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_2
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
		and target_2.getEnclosingFunction() = func)
}

predicate func_3(Function func) {
	exists(ExprStmt target_3 |
		target_3.getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
		and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("spinlock_t")
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_3)
}

predicate func_5(LogicalOrExpr target_6, Function func, ReturnStmt target_5) {
		target_5.getExpr() instanceof Literal
		and target_5.getParent().(IfStmt).getCondition()=target_6
		and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable vmd_2710, LogicalOrExpr target_6) {
		target_6.getAnOperand().(ConditionalExpr).getCondition().(Literal).getValue()="1"
		and target_6.getAnOperand().(ConditionalExpr).getThen().(FunctionCall).getTarget().hasName("constant_test_bit")
		and target_6.getAnOperand().(ConditionalExpr).getThen().(FunctionCall).getArgument(0).(Literal).getValue()="3"
		and target_6.getAnOperand().(ConditionalExpr).getThen().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="flags"
		and target_6.getAnOperand().(ConditionalExpr).getThen().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmd_2710
		and target_6.getAnOperand().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("variable_test_bit")
		and target_6.getAnOperand().(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(Literal).getValue()="3"
		and target_6.getAnOperand().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="flags"
		and target_6.getAnOperand().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmd_2710
		and target_6.getAnOperand().(FunctionCall).getTarget().hasName("dm_deleting_md")
		and target_6.getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmd_2710
}

predicate func_7(Variable vmd_2710, ExprStmt target_7) {
		target_7.getExpr().(FunctionCall).getTarget().hasName("dm_get")
		and target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vmd_2710
}

from Function func, Variable vmd_2710, ReturnStmt target_5, LogicalOrExpr target_6, ExprStmt target_7
where
not func_0(func)
and not func_1(vmd_2710, target_6, target_7)
and not func_2(target_6, func)
and not func_3(func)
and func_5(target_6, func, target_5)
and func_6(vmd_2710, target_6)
and func_7(vmd_2710, target_7)
and vmd_2710.getType().hasName("mapped_device *")
and vmd_2710.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
