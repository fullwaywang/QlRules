/**
 * @name linux-5f6995295f65d1ee6f36d466d26afd98eb797afe-create_user_odp_mr
 * @id cpp/linux/5f6995295f65d1ee6f36d466d26afd98eb797afe/create-user-odp-mr
 * @description linux-5f6995295f65d1ee6f36d466d26afd98eb797afe-drivers/infiniband/hw/mlx5/mr.c-create_user_odp_mr CVE-2021-47481
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vmr_1500, ExprStmt target_1, FunctionCall target_2, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("xa_init")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="implicit_children"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmr_1500
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vmr_1500, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="private"
	and target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("ib_umem_odp *")
	and target_1.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vmr_1500
}

predicate func_2(Variable vmr_1500, FunctionCall target_2) {
	target_2.getTarget().hasName("ERR_CAST")
	and target_2.getArgument(0).(VariableAccess).getTarget()=vmr_1500
}

from Function func, Variable vmr_1500, ExprStmt target_1, FunctionCall target_2
where
not func_0(vmr_1500, target_1, target_2, func)
and func_1(vmr_1500, target_1)
and func_2(vmr_1500, target_2)
and vmr_1500.getType().hasName("mlx5_ib_mr *")
and vmr_1500.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
