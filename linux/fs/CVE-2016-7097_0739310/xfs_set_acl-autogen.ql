/**
 * @name linux-073931017b49d9458aa351605b43a7e34598caef-xfs_set_acl
 * @id cpp/linux/073931017b49d9458aa351605b43a7e34598caef/xfs-set-acl
 * @description linux-073931017b49d9458aa351605b43a7e34598caef-fs/xfs/xfs_acl.c-xfs_set_acl CVE-2016-7097
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vacl_248, Variable verror_250, Variable vmode_260, FunctionCall target_0) {
	target_0.getTarget().hasName("posix_acl_equiv_mode")
	and not target_0.getTarget().hasName("posix_acl_update_mode")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vacl_248
	and target_0.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vmode_260
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=verror_250
}

predicate func_1(Parameter vinode_248, Variable verror_250, Variable vmode_260, EqualityOperation target_11, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verror_250
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("xfs_set_mode")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vinode_248
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vmode_260
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_11
}

predicate func_2(Variable verror_250, IfStmt target_12, IfStmt target_2) {
	target_2.getCondition().(VariableAccess).getTarget()=verror_250
	and target_2.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=verror_250
	and target_12.getLocation().isBefore(target_2.getLocation())
}

predicate func_3(Parameter vacl_248, FunctionCall target_13) {
exists(AddressOfExpr target_3 |
	target_3.getOperand().(VariableAccess).getTarget()=vacl_248
	and target_3.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
	and target_3.getOperand().(VariableAccess).getLocation().isBefore(target_13.getArgument(2).(VariableAccess).getLocation()))
}

predicate func_4(Parameter vinode_248, VariableAccess target_4) {
	target_4.getTarget()=vinode_248
}

predicate func_5(Variable verror_250, BlockStmt target_14, VariableAccess target_5) {
	target_5.getTarget()=verror_250
	and target_5.getParent().(LEExpr).getGreaterOperand() instanceof Literal
	and target_5.getParent().(LEExpr).getParent().(IfStmt).getThen()=target_14
}

predicate func_6(Parameter vacl_248, VariableAccess target_6) {
	target_6.getTarget()=vacl_248
	and target_6.getParent().(AssignExpr).getLValue() = target_6
	and target_6.getParent().(AssignExpr).getRValue() instanceof Literal
}

predicate func_7(Parameter vinode_248, Initializer target_7) {
	target_7.getExpr().(PointerFieldAccess).getTarget().getName()="i_mode"
	and target_7.getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinode_248
}

predicate func_8(Variable verror_250, BlockStmt target_14, RelationalOperation target_8) {
	 (target_8 instanceof GEExpr or target_8 instanceof LEExpr)
	and target_8.getLesserOperand().(VariableAccess).getTarget()=verror_250
	and target_8.getGreaterOperand().(Literal).getValue()="0"
	and target_8.getParent().(IfStmt).getThen()=target_14
}

predicate func_9(Parameter vacl_248, RelationalOperation target_8, ExprStmt target_9) {
	target_9.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vacl_248
	and target_9.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8
}

predicate func_10(Variable verror_250, RelationalOperation target_8, IfStmt target_10) {
	target_10.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=verror_250
	and target_10.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_10.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=verror_250
	and target_10.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8
}

predicate func_11(Function func, EqualityOperation target_11) {
	target_11.getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_11.getRightOperand().(Literal).getValue()="32768"
	and target_11.getEnclosingFunction() = func
}

predicate func_12(Function func, IfStmt target_12) {
	target_12.getCondition() instanceof RelationalOperation
	and target_12.getThen() instanceof BlockStmt
	and target_12.getEnclosingFunction() = func
}

predicate func_13(Parameter vinode_248, Parameter vacl_248, FunctionCall target_13) {
	target_13.getTarget().hasName("__xfs_set_acl")
	and target_13.getArgument(0).(VariableAccess).getTarget()=vinode_248
	and target_13.getArgument(1).(VariableAccess).getTarget().getType().hasName("int")
	and target_13.getArgument(2).(VariableAccess).getTarget()=vacl_248
}

predicate func_14(Function func, BlockStmt target_14) {
	target_14.getStmt(0) instanceof ExprStmt
	and target_14.getStmt(1) instanceof IfStmt
	and target_14.getEnclosingFunction() = func
}

from Function func, Parameter vinode_248, Parameter vacl_248, Variable verror_250, Variable vmode_260, FunctionCall target_0, ExprStmt target_1, IfStmt target_2, VariableAccess target_4, VariableAccess target_5, VariableAccess target_6, Initializer target_7, RelationalOperation target_8, ExprStmt target_9, IfStmt target_10, EqualityOperation target_11, IfStmt target_12, FunctionCall target_13, BlockStmt target_14
where
func_0(vacl_248, verror_250, vmode_260, target_0)
and func_1(vinode_248, verror_250, vmode_260, target_11, target_1)
and func_2(verror_250, target_12, target_2)
and not func_3(vacl_248, target_13)
and func_4(vinode_248, target_4)
and func_5(verror_250, target_14, target_5)
and func_6(vacl_248, target_6)
and func_7(vinode_248, target_7)
and func_8(verror_250, target_14, target_8)
and func_9(vacl_248, target_8, target_9)
and func_10(verror_250, target_8, target_10)
and func_11(func, target_11)
and func_12(func, target_12)
and func_13(vinode_248, vacl_248, target_13)
and func_14(func, target_14)
and vinode_248.getType().hasName("inode *")
and vacl_248.getType().hasName("posix_acl *")
and verror_250.getType().hasName("int")
and vmode_260.getType().hasName("umode_t")
and vinode_248.getFunction() = func
and vacl_248.getFunction() = func
and verror_250.(LocalVariable).getFunction() = func
and vmode_260.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
