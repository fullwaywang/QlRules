commit 3681a4558c13198944e6f7f149c4be188e076e14	3681a4558c13198944e6f7f149c4be188e076e14
Author: Matt Caswell <matt@openssl.org>
Date:   Tue Jun 7 09:12:51 2016 +0100

    More fix DSA, preserve BN_FLG_CONSTTIME
    
    The previous "fix" still left "k" exposed to constant time problems in
    the later BN_mod_inverse() call. Ensure both k and kq have the
    BN_FLG_CONSTTIME flag set at the earliest opportunity after creation.
    
    CVE-2016-2178
    
    Reviewed-by: Rich Salz <rsalz@openssl.org>
    (cherry picked from commit b7d0f2834e139a20560d64c73e2565e93715ce2b)

diff --git a/crypto/dsa/dsa_ossl.c b/crypto/dsa/dsa_ossl.c
index 01e3d74af1..06cd2a2aed 100644
--- a/crypto/dsa/dsa_ossl.c
+++ b/crypto/dsa/dsa_ossl.c
@@ -247,7 +247,12 @@ static int dsa_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
     do
         if (!BN_rand_range(&k, dsa->q))
             goto err;
-    while (BN_is_zero(&k)) ;
+    while (BN_is_zero(&k));
+
+    if ((dsa->flags & DSA_FLAG_NO_EXP_CONSTTIME) == 0) {
+        BN_set_flags(&k, BN_FLG_CONSTTIME);
+    }
+
 
     if (dsa->flags & DSA_FLAG_CACHE_MONT_P) {
         if (!BN_MONT_CTX_set_locked(&dsa->method_mont_p,
@@ -261,6 +266,8 @@ static int dsa_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
         if (!BN_copy(&kq, &k))
             goto err;
 
+        BN_set_flags(&kq, BN_FLG_CONSTTIME);
+
         /*
          * We do not want timing information to leak the length of k, so we
          * compute g^k using an equivalent exponent of fixed length. (This
@@ -276,8 +283,6 @@ static int dsa_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
         }
 
         K = &kq;
-
-        BN_set_flags(K, BN_FLG_CONSTTIME);
     } else {
         K = &k;
     }
