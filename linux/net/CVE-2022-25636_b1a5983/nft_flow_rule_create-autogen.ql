/**
 * @name linux-b1a5983f56e371046dcf164f90bfaf704d2b89f6-nft_flow_rule_create
 * @id cpp/linux/b1a5983f56e371046dcf164f90bfaf704d2b89f6/nft-flow-rule-create
 * @description linux-b1a5983f56e371046dcf164f90bfaf704d2b89f6-net/netfilter/nf_tables_offload.c-nft_flow_rule_create CVE-2022-25636
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vexpr_93, ExprStmt target_3, BitwiseAndExpr target_2) {
exists(LogicalAndExpr target_0 |
	target_0.getLeftOperand().(PointerFieldAccess).getTarget().getName()="offload_action"
	and target_0.getLeftOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ops"
	and target_0.getLeftOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vexpr_93
	and target_0.getRightOperand().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="offload_action"
	and target_0.getRightOperand().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ops"
	and target_0.getRightOperand().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vexpr_93
	and target_0.getRightOperand().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vexpr_93
	and target_0.getParent().(IfStmt).getThen()=target_3
	and target_0.getLeftOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getLeftOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vexpr_93, PointerFieldAccess target_1) {
	target_1.getTarget().getName()="ops"
	and target_1.getQualifier().(VariableAccess).getTarget()=vexpr_93
}

predicate func_2(Variable vexpr_93, ExprStmt target_3, BitwiseAndExpr target_2) {
	target_2.getLeftOperand().(PointerFieldAccess).getTarget().getName()="offload_flags"
	and target_2.getLeftOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ops"
	and target_2.getLeftOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vexpr_93
	and target_2.getRightOperand().(BinaryBitwiseOperation).getValue()="1"
	and target_2.getParent().(IfStmt).getThen()=target_3
}

predicate func_3(Function func, ExprStmt target_3) {
	target_3.getExpr().(PostfixIncrExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getEnclosingFunction() = func
}

from Function func, Variable vexpr_93, PointerFieldAccess target_1, BitwiseAndExpr target_2, ExprStmt target_3
where
not func_0(vexpr_93, target_3, target_2)
and func_1(vexpr_93, target_1)
and func_2(vexpr_93, target_3, target_2)
and func_3(func, target_3)
and vexpr_93.getType().hasName("nft_expr *")
and vexpr_93.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
