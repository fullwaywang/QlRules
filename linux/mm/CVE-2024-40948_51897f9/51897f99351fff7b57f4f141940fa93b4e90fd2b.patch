commit 51897f99351fff7b57f4f141940fa93b4e90fd2b
Author: Peter Xu <peterx@redhat.com>
Date:   Wed Jun 5 17:21:46 2024 -0400

    mm/page_table_check: fix crash on ZONE_DEVICE
    
    commit 8bb592c2eca8fd2bc06db7d80b38da18da4a2f43 upstream.
    
    Not all pages may apply to pgtable check.  One example is ZONE_DEVICE
    pages: they map PFNs directly, and they don't allocate page_ext at all
    even if there's struct page around.  One may reference
    devm_memremap_pages().
    
    When both ZONE_DEVICE and page-table-check enabled, then try to map some
    dax memories, one can trigger kernel bug constantly now when the kernel
    was trying to inject some pfn maps on the dax device:
    
     kernel BUG at mm/page_table_check.c:55!
    
    While it's pretty legal to use set_pxx_at() for ZONE_DEVICE pages for page
    fault resolutions, skip all the checks if page_ext doesn't even exist in
    pgtable checker, which applies to ZONE_DEVICE but maybe more.
    
    Link: https://lkml.kernel.org/r/20240605212146.994486-1-peterx@redhat.com
    Fixes: df4e817b7108 ("mm: page table check")
    Signed-off-by: Peter Xu <peterx@redhat.com>
    Reviewed-by: Pasha Tatashin <pasha.tatashin@soleen.com>
    Reviewed-by: Dan Williams <dan.j.williams@intel.com>
    Reviewed-by: Alistair Popple <apopple@nvidia.com>
    Cc: <stable@vger.kernel.org>
    Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/mm/page_table_check.c b/mm/page_table_check.c
index 4d0506537621..9392544d4754 100644
--- a/mm/page_table_check.c
+++ b/mm/page_table_check.c
@@ -70,6 +70,9 @@ static void page_table_check_clear(struct mm_struct *mm, unsigned long addr,
 	page = pfn_to_page(pfn);
 	page_ext = page_ext_get(page);
 
+	if (!page_ext)
+		return;
+
 	BUG_ON(PageSlab(page));
 	anon = PageAnon(page);
 
@@ -108,6 +111,9 @@ static void page_table_check_set(struct mm_struct *mm, unsigned long addr,
 	page = pfn_to_page(pfn);
 	page_ext = page_ext_get(page);
 
+	if (!page_ext)
+		return;
+
 	BUG_ON(PageSlab(page));
 	anon = PageAnon(page);
 
@@ -138,7 +144,10 @@ void __page_table_check_zero(struct page *page, unsigned int order)
 	BUG_ON(PageSlab(page));
 
 	page_ext = page_ext_get(page);
-	BUG_ON(!page_ext);
+
+	if (!page_ext)
+		return;
+
 	for (i = 0; i < (1ul << order); i++) {
 		struct page_table_check *ptc = get_page_table_check(page_ext);
 
