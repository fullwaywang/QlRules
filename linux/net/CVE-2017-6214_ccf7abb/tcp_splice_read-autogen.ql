/**
 * @name linux-ccf7abb93af09ad0868ae9033d1ca8108bdaec82-tcp_splice_read
 * @id cpp/linux/ccf7abb93af09ad0868ae9033d1ca8108bdaec82/tcp-splice-read
 * @description linux-ccf7abb93af09ad0868ae9033d1ca8108bdaec82-net/ipv4/tcp.c-tcp_splice_read CVE-2017-6214
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsk_723, NotExpr target_1, NotExpr target_2, ExprStmt target_3) {
	exists(IfStmt target_0 |
		target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("skb_queue_empty")
		and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="sk_receive_queue"
		and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_723
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(6)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_2.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Function func, NotExpr target_1) {
		target_1.getOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vsk_723, NotExpr target_2) {
		target_2.getOperand().(FunctionCall).getTarget().hasName("sock_flag")
		and target_2.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_723
}

predicate func_3(Variable vsk_723, ExprStmt target_3) {
		target_3.getExpr().(FunctionCall).getTarget().hasName("sk_wait_data")
		and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_723
		and target_3.getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("long")
		and target_3.getExpr().(FunctionCall).getArgument(2).(Literal).getValue()="0"
}

from Function func, Variable vsk_723, NotExpr target_1, NotExpr target_2, ExprStmt target_3
where
not func_0(vsk_723, target_1, target_2, target_3)
and func_1(func, target_1)
and func_2(vsk_723, target_2)
and func_3(vsk_723, target_3)
and vsk_723.getType().hasName("sock *")
and vsk_723.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
