/**
 * @name linux-caa4b35b4317d5147b3ab0fbdc9c075c7d2e9c12-cbq_classify
 * @id cpp/linux/caa4b35b4317d5147b3ab0fbdc9c075c7d2e9c12/cbq-classify
 * @description linux-caa4b35b4317d5147b3ab0fbdc9c075c7d2e9c12-net/sched/sch_cbq.c-cbq_classify CVE-2023-23454
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vresult_223, ExprStmt target_4, LogicalOrExpr target_5, SwitchStmt target_6) {
exists(IfStmt target_0 |
	target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vresult_223
	and target_0.getCondition().(EqualityOperation).getRightOperand() instanceof Literal
	and target_0.getThen() instanceof ReturnStmt
	and target_0.getLocation().isBefore(target_4.getLocation())
	and target_5.getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_6.getExpr().(VariableAccess).getLocation()))
}

predicate func_1(VariableAccess target_7, Function func, ReturnStmt target_1) {
	target_1.getExpr().(Literal).getValue()="0"
	and target_1.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_7
	and target_1.getEnclosingFunction() = func
}

predicate func_3(Function func, SwitchCase target_3) {
	target_3.getExpr() instanceof Literal
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Function func, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("cbq_class *")
	and target_4.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getTarget().getName()="class"
	and target_4.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
	and target_4.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
	and target_4.getExpr().(AssignExpr).getRValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("tcf_result")
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable vresult_223, LogicalOrExpr target_5) {
	target_5.getLeftOperand().(NotExpr).getOperand().(VariableAccess).getTarget().getType().hasName("tcf_proto *")
	and target_5.getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vresult_223
	and target_5.getRightOperand().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
}

predicate func_6(Variable vresult_223, SwitchStmt target_6) {
	target_6.getExpr().(VariableAccess).getTarget()=vresult_223
	and target_6.getStmt().(BlockStmt).getStmt(0).(SwitchCase).getExpr().(Literal).getValue()="5"
	and target_6.getStmt().(BlockStmt).getStmt(1).(SwitchCase).getExpr().(Literal).getValue()="4"
	and target_6.getStmt().(BlockStmt).getStmt(2).(SwitchCase).getExpr().(Literal).getValue()="8"
	and target_6.getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget().getType().hasName("int *")
	and target_6.getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(AssignExpr).getRValue().(BitwiseOrExpr).getValue()="65536"
}

predicate func_7(Variable vresult_223, VariableAccess target_7) {
	target_7.getTarget()=vresult_223
}

from Function func, Variable vresult_223, ReturnStmt target_1, SwitchCase target_3, ExprStmt target_4, LogicalOrExpr target_5, SwitchStmt target_6, VariableAccess target_7
where
not func_0(vresult_223, target_4, target_5, target_6)
and func_1(target_7, func, target_1)
and func_3(func, target_3)
and func_4(func, target_4)
and func_5(vresult_223, target_5)
and func_6(vresult_223, target_6)
and func_7(vresult_223, target_7)
and vresult_223.getType().hasName("int")
and vresult_223.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
