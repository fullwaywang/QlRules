/**
 * @name linux-24225011d81b471acc0e1e315b7d9905459a6304-nft_flowtable_type_get
 * @id cpp/linux/24225011d81b471acc0e1e315b7d9905459a6304/nft-flowtable-type-get
 * @description linux-24225011d81b471acc0e1e315b7d9905459a6304-net/netfilter/nf_tables_api.c-nft_flowtable_type_get CVE-2024-35898
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_4, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("rcu_read_lock")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_4.getLocation()))
}

predicate func_1(LogicalAndExpr target_5, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_1.getEnclosingFunction() = func)
}

predicate func_2(ExprStmt target_6, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("rcu_read_unlock")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_6.getLocation()))
}

predicate func_3(Variable vtype_8313, LogicalAndExpr target_5, ReturnStmt target_3) {
	target_3.getExpr().(VariableAccess).getTarget()=vtype_8313
	and target_3.getParent().(IfStmt).getCondition()=target_5
}

predicate func_4(Variable vtype_8313, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vtype_8313
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("__nft_flowtable_type_get")
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("u8")
}

predicate func_5(Variable vtype_8313, LogicalAndExpr target_5) {
	target_5.getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vtype_8313
	and target_5.getLeftOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_5.getRightOperand().(FunctionCall).getTarget().hasName("try_module_get")
	and target_5.getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="owner"
	and target_5.getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vtype_8313
}

predicate func_6(Function func, ExprStmt target_6) {
	target_6.getExpr().(FunctionCall).getTarget().hasName("lockdep_nfnl_nft_mutex_not_held")
	and target_6.getEnclosingFunction() = func
}

from Function func, Variable vtype_8313, ReturnStmt target_3, ExprStmt target_4, LogicalAndExpr target_5, ExprStmt target_6
where
not func_0(target_4, func)
and not func_1(target_5, func)
and not func_2(target_6, func)
and func_3(vtype_8313, target_5, target_3)
and func_4(vtype_8313, target_4)
and func_5(vtype_8313, target_5)
and func_6(func, target_6)
and vtype_8313.getType().hasName("const nf_flowtable_type *")
and vtype_8313.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
