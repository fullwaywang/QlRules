/**
 * @name linux-6cc30ef8eb6d8f8d6df43152264bbf8835d99931-stm_register_device
 * @id cpp/linux/6cc30ef8eb6d8f8d6df43152264bbf8835d99931/stm-register-device
 * @description linux-6cc30ef8eb6d8f8d6df43152264bbf8835d99931-drivers/hwtracing/stm/core.c-stm_register_device CVE-2024-38627
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vstm_688, Variable verr_690, RelationalOperation target_5, AddressOfExpr target_6) {
exists(ExprStmt target_0 |
	exists(AssignExpr obj_0 | obj_0=target_0.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().getName()="major"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vstm_688
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=verr_690
	)
	and exists(BlockStmt obj_2 | obj_2=target_0.getParent() |
		exists(IfStmt obj_3 | obj_3=obj_2.getParent() |
			obj_3.getThen().(BlockStmt).getStmt(0)=target_0
			and obj_3.getCondition()=target_5
		)
	)
	and target_0.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_6.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Variable verr_690, ExprStmt target_2, IfStmt target_8, ReturnStmt target_3, Function func) {
exists(ReturnStmt target_1 |
	target_1.getExpr().(VariableAccess).getTarget()=verr_690
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_2.getLocation())
	and target_8.getCondition().(VariableAccess).getLocation().isBefore(target_1.getExpr().(VariableAccess).getLocation())
	and target_1.getExpr().(VariableAccess).getLocation().isBefore(target_3.getExpr().(VariableAccess).getLocation())
)
}

predicate func_2(Variable vstm_688, Function func, ExprStmt target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		obj_0.getTarget().hasName("vfree")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vstm_688
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
}

predicate func_3(Variable verr_690, Function func, ReturnStmt target_3) {
	target_3.getExpr().(VariableAccess).getTarget()=verr_690
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
}

predicate func_4(RelationalOperation target_5, Function func, GotoStmt target_4) {
	target_4.getName() ="err_free"
	and target_4.getParent().(IfStmt).getCondition()=target_5
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable vstm_688, RelationalOperation target_5) {
	exists(PointerFieldAccess obj_0 | obj_0=target_5.getLesserOperand() |
		obj_0.getTarget().getName()="major"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vstm_688
	)
	and  (target_5 instanceof GTExpr or target_5 instanceof LTExpr)
	and target_5.getGreaterOperand().(Literal).getValue()="0"
}

predicate func_6(Variable vstm_688, AddressOfExpr target_6) {
	exists(PointerFieldAccess obj_0 | obj_0=target_6.getOperand() |
		obj_0.getTarget().getName()="dev"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vstm_688
	)
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("device_initialize")
}

predicate func_8(Variable verr_690, Function func, IfStmt target_8) {
	target_8.getCondition().(VariableAccess).getTarget()=verr_690
	and target_8.getThen().(GotoStmt).getName() ="err_device"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_8
}

from Function func, Variable vstm_688, Variable verr_690, ExprStmt target_2, ReturnStmt target_3, GotoStmt target_4, RelationalOperation target_5, AddressOfExpr target_6, IfStmt target_8
where
not func_0(vstm_688, verr_690, target_5, target_6)
and not func_1(verr_690, target_2, target_8, target_3, func)
and func_2(vstm_688, func, target_2)
and func_3(verr_690, func, target_3)
and func_4(target_5, func, target_4)
and func_5(vstm_688, target_5)
and func_6(vstm_688, target_6)
and func_8(verr_690, func, target_8)
and vstm_688.getType().hasName("stm_device *")
and verr_690.getType().hasName("int")
and vstm_688.(LocalVariable).getFunction() = func
and verr_690.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
