/**
 * @name linux-548acf19234dbda5a52d5a8e7e205af46e9da840-early_fixup_exception
 * @id cpp/linux/548acf19234dbda5a52d5a8e7e205af46e9da840/early-fixup-exception
 * @description linux-548acf19234dbda5a52d5a8e7e205af46e9da840-arch/x86/include/asm/uaccess.h-early_fixup_exception CVE-2016-9644
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vip_53, Variable vfixup_55, VariableAccess target_0) {
	target_0.getTarget()=vfixup_55
	and target_0.getParent().(AssignExpr).getLValue() = target_0
	and target_0.getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("search_exception_tables")
	and target_0.getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vip_53
}

predicate func_1(Variable vfixup_55, VariableAccess target_1) {
	target_1.getTarget()=vfixup_55
	and target_1.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("ex_fixup_addr")
}

predicate func_2(Variable vfixup_55, BlockStmt target_12, VariableAccess target_2) {
	target_2.getTarget()=vfixup_55
	and target_2.getParent().(IfStmt).getThen()=target_12
}

predicate func_3(Variable vfixup_55, VariableAccess target_3) {
	target_3.getTarget()=vfixup_55
}

predicate func_4(BlockStmt target_12, Function func) {
exists(NotExpr target_4 |
	target_4.getOperand().(VariableAccess).getType().hasName("const exception_table_entry *")
	and target_4.getParent().(IfStmt).getThen()=target_12
	and target_4.getEnclosingFunction() = func)
}

predicate func_5(Function func) {
exists(ExprStmt target_5 |
	target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("ex_handler_t")
	and target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("ex_fixup_handler")
	and target_5.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("const exception_table_entry *")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5)
}

predicate func_6(BlockStmt target_13, Function func) {
exists(EqualityOperation target_6 |
	target_6.getLeftOperand().(VariableAccess).getType().hasName("ex_handler_t")
	and target_6.getParent().(IfStmt).getThen()=target_13
	and target_6.getEnclosingFunction() = func)
}

predicate func_7(Parameter vip_53, Variable vnew_ip_56, VariableAccess target_2, ExprStmt target_7) {
	target_7.getExpr().(AssignExpr).getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vip_53
	and target_7.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vnew_ip_56
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
}

predicate func_8(VariableAccess target_2, Function func, ReturnStmt target_8) {
	target_8.getExpr().(Literal).getValue()="1"
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_8.getEnclosingFunction() = func
}

predicate func_9(RelationalOperation target_11, Function func, ReturnStmt target_9) {
	target_9.getExpr().(Literal).getValue()="0"
	and target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_11
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Function func, ReturnStmt target_10) {
	target_10.getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_10
}

predicate func_11(Variable vfixup_55, BlockStmt target_13, RelationalOperation target_11) {
	 (target_11 instanceof GEExpr or target_11 instanceof LEExpr)
	and target_11.getGreaterOperand().(SubExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="fixup"
	and target_11.getGreaterOperand().(SubExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vfixup_55
	and target_11.getGreaterOperand().(SubExpr).getRightOperand().(PointerFieldAccess).getTarget().getName()="insn"
	and target_11.getGreaterOperand().(SubExpr).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vfixup_55
	and target_11.getLesserOperand().(SubExpr).getValue()="2147483628"
	and target_11.getParent().(IfStmt).getThen()=target_13
}

predicate func_12(Variable vfixup_55, Variable vnew_ip_56, BlockStmt target_12) {
	target_12.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vnew_ip_56
	and target_12.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("ex_fixup_addr")
	and target_12.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vfixup_55
	and target_12.getStmt(1).(IfStmt).getCondition() instanceof RelationalOperation
	and target_12.getStmt(1).(IfStmt).getThen() instanceof BlockStmt
}

predicate func_13(Function func, BlockStmt target_13) {
	target_13.getStmt(0) instanceof ReturnStmt
	and target_13.getEnclosingFunction() = func
}

from Function func, Parameter vip_53, Variable vfixup_55, Variable vnew_ip_56, VariableAccess target_0, VariableAccess target_1, VariableAccess target_2, VariableAccess target_3, ExprStmt target_7, ReturnStmt target_8, ReturnStmt target_9, ReturnStmt target_10, RelationalOperation target_11, BlockStmt target_12, BlockStmt target_13
where
func_0(vip_53, vfixup_55, target_0)
and func_1(vfixup_55, target_1)
and func_2(vfixup_55, target_12, target_2)
and func_3(vfixup_55, target_3)
and not func_4(target_12, func)
and not func_5(func)
and not func_6(target_13, func)
and func_7(vip_53, vnew_ip_56, target_2, target_7)
and func_8(target_2, func, target_8)
and func_9(target_11, func, target_9)
and func_10(func, target_10)
and func_11(vfixup_55, target_13, target_11)
and func_12(vfixup_55, vnew_ip_56, target_12)
and func_13(func, target_13)
and vip_53.getType().hasName("unsigned long *")
and vfixup_55.getType().hasName("const exception_table_entry *")
and vnew_ip_56.getType().hasName("unsigned long")
and vip_53.getFunction() = func
and vfixup_55.(LocalVariable).getFunction() = func
and vnew_ip_56.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
