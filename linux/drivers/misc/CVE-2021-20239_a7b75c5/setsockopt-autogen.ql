/**
 * @name linux-a7b75c5a8c41445f33efb663887ff5f5c3b4454b-setsockopt
 * @id cpp/linux/a7b75c5a8c41445f33efb663887ff5f5c3b4454b/setsockopt
 * @description linux-a7b75c5a8c41445f33efb663887ff5f5c3b4454b-drivers/crypto/chelsio/chtls/chtls_main.c-setsockopt CVE-2021-20239
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vov_673, ReturnStmt target_8, FunctionCall target_6) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("copy_from_sockptr")
	and target_0.getArgument(0) instanceof AddressOfExpr
	and target_0.getArgument(1).(VariableAccess).getTarget()=vov_673
	and target_0.getArgument(2) instanceof SizeofTypeOperator
	and target_0.getParent().(IfStmt).getThen()=target_8
	and target_0.getArgument(1).(VariableAccess).getLocation().isBefore(target_6.getArgument(1).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vov_673, Parameter vol_673, BlockStmt target_9, FunctionCall target_6, ExprStmt target_11) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("copy_from_sockptr")
	and target_1.getArgument(0) instanceof AddressOfExpr
	and target_1.getArgument(1).(VariableAccess).getTarget()=vov_673
	and target_1.getArgument(2).(VariableAccess).getTarget()=vol_673
	and target_1.getParent().(LogicalOrExpr).getLeftOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vol_673
	and target_1.getParent().(LogicalOrExpr).getLeftOperand().(RelationalOperation).getLesserOperand().(SizeofExprOperator).getValue()="256"
	and target_1.getParent().(LogicalOrExpr).getRightOperand() instanceof FunctionCall
	and target_1.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen()=target_9
	and target_6.getArgument(1).(VariableAccess).getLocation().isBefore(target_1.getArgument(1).(VariableAccess).getLocation())
	and target_1.getArgument(2).(VariableAccess).getLocation().isBefore(target_11.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation()))
}

predicate func_2(Parameter vov_673, Variable vlinksel_677, ReturnStmt target_8, AddressOfExpr target_2) {
	target_2.getOperand().(VariableAccess).getTarget()=vlinksel_677
	and target_2.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vov_673
	and target_2.getParent().(FunctionCall).getArgument(2).(SizeofTypeOperator).getType() instanceof LongType
	and target_2.getParent().(FunctionCall).getArgument(2).(SizeofTypeOperator).getValue()="4"
	and target_2.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_8
}

predicate func_3(Variable vcf_sk_676, AddressOfExpr target_3) {
	target_3.getOperand().(ValueFieldAccess).getTarget().getName()="data"
	and target_3.getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="param"
	and target_3.getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="conn_req"
	and target_3.getOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vcf_sk_676
	and target_3.getParent().(FunctionCall).getParent().(LogicalOrExpr).getRightOperand() instanceof FunctionCall
}

/*predicate func_4(Function func, SizeofTypeOperator target_4) {
	target_4.getType() instanceof LongType
	and target_4.getValue()="4"
	and target_4.getEnclosingFunction() = func
}

*/
predicate func_5(Parameter vol_673, VariableAccess target_5) {
	target_5.getTarget()=vol_673
	and target_5.getParent().(FunctionCall).getParent().(LogicalOrExpr).getRightOperand() instanceof FunctionCall
}

predicate func_6(Parameter vov_673, ReturnStmt target_8, FunctionCall target_6) {
	target_6.getTarget().hasName("copy_from_user")
	and target_6.getArgument(0) instanceof AddressOfExpr
	and target_6.getArgument(1).(VariableAccess).getTarget()=vov_673
	and target_6.getArgument(2) instanceof SizeofTypeOperator
	and target_6.getParent().(IfStmt).getThen()=target_8
}

predicate func_7(Parameter vov_673, Parameter vol_673, BlockStmt target_9, FunctionCall target_7) {
	target_7.getTarget().hasName("copy_from_user")
	and target_7.getArgument(0) instanceof AddressOfExpr
	and target_7.getArgument(1).(VariableAccess).getTarget()=vov_673
	and target_7.getArgument(2).(VariableAccess).getTarget()=vol_673
	and target_7.getParent().(LogicalOrExpr).getLeftOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vol_673
	and target_7.getParent().(LogicalOrExpr).getLeftOperand().(RelationalOperation).getLesserOperand().(SizeofExprOperator).getValue()="256"
	and target_7.getParent().(LogicalOrExpr).getParent().(IfStmt).getThen()=target_9
}

predicate func_8(FunctionCall target_6, Function func, ReturnStmt target_8) {
	target_8.getExpr().(UnaryMinusExpr).getValue()="-22"
	and target_8.getParent().(IfStmt).getCondition()=target_6
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Variable vcf_sk_676, BlockStmt target_9) {
	target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("release_sock")
	and target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="sk"
	and target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vcf_sk_676
	and target_9.getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-22"
}

predicate func_11(Parameter vol_673, Variable vcf_sk_676, ExprStmt target_11) {
	target_11.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="size"
	and target_11.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="param"
	and target_11.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="conn_req"
	and target_11.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vcf_sk_676
	and target_11.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vol_673
}

from Function func, Parameter vov_673, Parameter vol_673, Variable vcf_sk_676, Variable vlinksel_677, AddressOfExpr target_2, AddressOfExpr target_3, VariableAccess target_5, FunctionCall target_6, FunctionCall target_7, ReturnStmt target_8, BlockStmt target_9, ExprStmt target_11
where
not func_0(vov_673, target_8, target_6)
and not func_1(vov_673, vol_673, target_9, target_6, target_11)
and func_2(vov_673, vlinksel_677, target_8, target_2)
and func_3(vcf_sk_676, target_3)
and func_5(vol_673, target_5)
and func_6(vov_673, target_8, target_6)
and func_7(vov_673, vol_673, target_9, target_7)
and func_8(target_6, func, target_8)
and func_9(vcf_sk_676, target_9)
and func_11(vol_673, vcf_sk_676, target_11)
and vov_673.getType().hasName("char *")
and vol_673.getType().hasName("unsigned int")
and vcf_sk_676.getType().hasName("caifsock *")
and vlinksel_677.getType().hasName("int")
and vov_673.getFunction() = func
and vol_673.getFunction() = func
and vcf_sk_676.(LocalVariable).getFunction() = func
and vlinksel_677.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
