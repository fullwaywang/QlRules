/**
 * @name linux-611792920925fb088ddccbe2783c7f92fdfb6b64-nr_listen
 * @id cpp/linux/611792920925fb088ddccbe2783c7f92fdfb6b64/nr-listen
 * @description linux-611792920925fb088ddccbe2783c7f92fdfb6b64-net/netrom/af_netrom.c-nr_listen CVE-2023-32269
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsk_400, Parameter vsock_398, IfStmt target_1, ExprStmt target_2, EqualityOperation target_3, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="state"
	and target_0.getCondition().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsock_398
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("release_sock")
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_400
	and target_0.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-22"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vsk_400, IfStmt target_1) {
	target_1.getCondition().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getTarget().getName()="skc_state"
	and target_1.getCondition().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="__sk_common"
	and target_1.getCondition().(EqualityOperation).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_400
	and target_1.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="sk_max_ack_backlog"
	and target_1.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_400
	and target_1.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="skc_state"
	and target_1.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="__sk_common"
	and target_1.getThen().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_400
}

predicate func_2(Variable vsk_400, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("lock_sock")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_400
}

predicate func_3(Variable vsk_400, EqualityOperation target_3) {
	target_3.getLeftOperand().(ValueFieldAccess).getTarget().getName()="skc_state"
	and target_3.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="__sk_common"
	and target_3.getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_400
}

from Function func, Variable vsk_400, Parameter vsock_398, IfStmt target_1, ExprStmt target_2, EqualityOperation target_3
where
not func_0(vsk_400, vsock_398, target_1, target_2, target_3, func)
and func_1(vsk_400, target_1)
and func_2(vsk_400, target_2)
and func_3(vsk_400, target_3)
and vsk_400.getType().hasName("sock *")
and vsock_398.getType().hasName("socket *")
and vsk_400.(LocalVariable).getFunction() = func
and vsock_398.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
