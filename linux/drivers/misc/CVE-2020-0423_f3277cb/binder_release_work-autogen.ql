/**
 * @name linux-f3277cbfba763cd2826396521b9296de67cf1bbc-binder_release_work
 * @id cpp/linux/f3277cbfba763cd2826396521b9296de67cf1bbc/binder-release-work
 * @description linux-f3277cbfba763cd2826396521b9296de67cf1bbc-drivers/android/binder.c-binder_release_work CVE-2020-0423
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vlist_4585, Variable vw_4587, Parameter vproc_4584, FunctionCall target_0) {
	target_0.getTarget().hasName("binder_dequeue_work_head")
	and not target_0.getTarget().hasName("binder_dequeue_work_head_ilocked")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vproc_4584
	and target_0.getArgument(1).(VariableAccess).getTarget()=vlist_4585
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=vw_4587
}

predicate func_1(ExprStmt target_14, Function func, BreakStmt target_1) {
	target_14.getLocation().isBefore(target_1.getLocation())
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Parameter vproc_4584) {
exists(FunctionCall target_2 |
	target_2.getTarget().hasName("_binder_inner_proc_lock")
	and target_2.getArgument(0).(VariableAccess).getTarget()=vproc_4584
	and target_2.getArgument(1) instanceof Literal)
}

predicate func_3(Parameter vlist_4585, Variable vw_4587, IfStmt target_15, NotExpr target_17) {
exists(ExprStmt target_3 |
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vw_4587
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("binder_dequeue_work_head_ilocked")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vlist_4585
	and target_3.getLocation().isBefore(target_15.getLocation())
	and target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_17.getOperand().(VariableAccess).getLocation()))
}

predicate func_4(Variable vw_4587, IfStmt target_15) {
exists(ExprStmt target_4 |
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("binder_work_type")
	and target_4.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getCondition().(VariableAccess).getTarget()=vw_4587
	and target_4.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getThen().(PointerFieldAccess).getTarget().getName()="type"
	and target_4.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getThen().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vw_4587
	and target_4.getExpr().(AssignExpr).getRValue().(ConditionalExpr).getElse().(Literal).getValue()="0"
	and target_4.getLocation().isBefore(target_15.getLocation()))
}

predicate func_5(Parameter vproc_4584, IfStmt target_15) {
exists(ExprStmt target_5 |
	target_5.getExpr().(FunctionCall).getTarget().hasName("_binder_inner_proc_unlock")
	and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vproc_4584
	and target_5.getExpr().(FunctionCall).getArgument(1) instanceof Literal
	and target_5.getLocation().isBefore(target_15.getLocation()))
}

predicate func_9(PointerFieldAccess target_10, Function func) {
exists(BreakStmt target_9 |
	target_9.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_10
	and target_9.getEnclosingFunction() = func)
}

predicate func_10(Variable vw_4587, PointerFieldAccess target_10) {
	target_10.getTarget().getName()="type"
	and target_10.getQualifier().(VariableAccess).getTarget()=vw_4587
}

predicate func_11(Parameter vproc_4584, VariableAccess target_11) {
	target_11.getTarget()=vproc_4584
	and target_11.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_12(Variable vw_4587, VariableAccess target_12) {
	target_12.getTarget()=vw_4587
	and target_12.getParent().(PointerFieldAccess).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("printk")
	and target_12.getParent().(PointerFieldAccess).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="3binder: unexpected work type, %d, not freed\n"
	and target_12.getParent().(PointerFieldAccess).getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="type"
}

predicate func_13(Variable vw_4587, PointerFieldAccess target_13) {
	target_13.getTarget().getName()="type"
	and target_13.getQualifier().(VariableAccess).getTarget()=vw_4587
}

predicate func_14(Variable vw_4587, ExprStmt target_14) {
	target_14.getExpr().(FunctionCall).getTarget().hasName("printk")
	and target_14.getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="3binder: unexpected work type, %d, not freed\n"
	and target_14.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="type"
	and target_14.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vw_4587
}

predicate func_15(Variable vw_4587, IfStmt target_15) {
	target_15.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vw_4587
}

predicate func_17(Variable vw_4587, NotExpr target_17) {
	target_17.getOperand().(VariableAccess).getTarget()=vw_4587
}

from Function func, Parameter vlist_4585, Variable vw_4587, Parameter vproc_4584, FunctionCall target_0, BreakStmt target_1, PointerFieldAccess target_10, VariableAccess target_11, VariableAccess target_12, PointerFieldAccess target_13, ExprStmt target_14, IfStmt target_15, NotExpr target_17
where
func_0(vlist_4585, vw_4587, vproc_4584, target_0)
and func_1(target_14, func, target_1)
and not func_2(vproc_4584)
and not func_3(vlist_4585, vw_4587, target_15, target_17)
and not func_4(vw_4587, target_15)
and not func_5(vproc_4584, target_15)
and not func_9(target_10, func)
and func_10(vw_4587, target_10)
and func_11(vproc_4584, target_11)
and func_12(vw_4587, target_12)
and func_13(vw_4587, target_13)
and func_14(vw_4587, target_14)
and func_15(vw_4587, target_15)
and func_17(vw_4587, target_17)
and vlist_4585.getType().hasName("list_head *")
and vw_4587.getType().hasName("binder_work *")
and vproc_4584.getType().hasName("binder_proc *")
and vlist_4585.getFunction() = func
and vw_4587.(LocalVariable).getFunction() = func
and vproc_4584.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
