/**
 * @name linux-c25b2ae136039ffa820c26138ed4a5e5f3ab3841-check_reg_sane_offset
 * @id cpp/linux/c25b2ae136039ffa820c26138ed4a5e5f3ab3841/check-reg-sane-offset
 * @description linux-c25b2ae136039ffa820c26138ed4a5e5f3ab3841-kernel/bpf/verifier.c-check_reg_sane_offset CVE-2022-23222
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vtype_6911, Parameter venv_6909, ArrayExpr target_14) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("reg_type_str")
	and target_0.getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_0.getArgument(1).(VariableAccess).getTarget()=vtype_6911
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="math between %s pointer and %lld is not allowed\n"
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("s64")
	and target_0.getArgument(1).(VariableAccess).getLocation().isBefore(target_14.getArrayOffset().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vtype_6911, Parameter venv_6909, ArrayExpr target_15) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("reg_type_str")
	and target_1.getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_1.getArgument(1).(VariableAccess).getTarget()=vtype_6911
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s pointer offset %d is not allowed\n"
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getTarget().getName()="off"
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("const bpf_reg_state *")
	and target_1.getArgument(1).(VariableAccess).getLocation().isBefore(target_15.getArrayOffset().(VariableAccess).getLocation()))
}

predicate func_3(Parameter vtype_6911, Parameter venv_6909, ArrayExpr target_16, ExprStmt target_17) {
exists(FunctionCall target_3 |
	target_3.getTarget().hasName("reg_type_str")
	and target_3.getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_3.getArgument(1).(VariableAccess).getTarget()=vtype_6911
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="math between %s pointer and register with unbounded min value is not allowed\n"
	and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
	and target_3.getArgument(1).(VariableAccess).getLocation().isBefore(target_16.getArrayOffset().(VariableAccess).getLocation())
	and target_17.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_5(Parameter vtype_6911, Parameter venv_6909, ExprStmt target_18) {
exists(FunctionCall target_5 |
	target_5.getTarget().hasName("reg_type_str")
	and target_5.getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_5.getArgument(1).(VariableAccess).getTarget()=vtype_6911
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="value %lld makes %s pointer be out of bounds\n"
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("s64")
	and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3) instanceof ArrayExpr
	and target_18.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_6(Parameter venv_6909, VariableAccess target_6) {
	target_6.getTarget()=venv_6909
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s pointer offset %d is not allowed\n"
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getTarget().getName()="off"
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("const bpf_reg_state *")
}

predicate func_7(Parameter venv_6909, VariableAccess target_7) {
	target_7.getTarget()=venv_6909
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="math between %s pointer and register with unbounded min value is not allowed\n"
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
}

predicate func_8(Parameter venv_6909, VariableAccess target_8) {
	target_8.getTarget()=venv_6909
	and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="value %lld makes %s pointer be out of bounds\n"
	and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("s64")
	and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3) instanceof ArrayExpr
}

predicate func_9(Parameter vtype_6911, Variable vreg_type_str, VariableAccess target_9) {
	target_9.getTarget()=vtype_6911
	and target_9.getParent().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vreg_type_str
}

predicate func_10(Parameter vtype_6911, Variable vreg_type_str, VariableAccess target_10) {
	target_10.getTarget()=vtype_6911
	and target_10.getParent().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vreg_type_str
}

predicate func_11(Parameter vtype_6911, Variable vreg_type_str, VariableAccess target_11) {
	target_11.getTarget()=vtype_6911
	and target_11.getParent().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vreg_type_str
}

predicate func_12(Parameter vtype_6911, Variable vreg_type_str, VariableAccess target_12) {
	target_12.getTarget()=vtype_6911
	and target_12.getParent().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vreg_type_str
}

predicate func_13(Parameter vtype_6911, Variable vreg_type_str, Parameter venv_6909, ArrayExpr target_14, ExprStmt target_19, ArrayExpr target_13) {
	target_13.getArrayBase().(VariableAccess).getTarget()=vreg_type_str
	and target_13.getArrayOffset().(VariableAccess).getTarget()=vtype_6911
	and target_13.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_13.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_13.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="math between %s pointer and %lld is not allowed\n"
	and target_13.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("s64")
	and target_13.getArrayOffset().(VariableAccess).getLocation().isBefore(target_14.getArrayOffset().(VariableAccess).getLocation())
	and target_13.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_19.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
}

predicate func_14(Parameter vtype_6911, Variable vreg_type_str, Parameter venv_6909, ArrayExpr target_15, ArrayExpr target_13, ArrayExpr target_14) {
	target_14.getArrayBase().(VariableAccess).getTarget()=vreg_type_str
	and target_14.getArrayOffset().(VariableAccess).getTarget()=vtype_6911
	and target_14.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_14.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_14.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s pointer offset %d is not allowed\n"
	and target_14.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getTarget().getName()="off"
	and target_14.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("const bpf_reg_state *")
	and target_14.getArrayOffset().(VariableAccess).getLocation().isBefore(target_15.getArrayOffset().(VariableAccess).getLocation())
	and target_13.getArrayBase().(VariableAccess).getLocation().isBefore(target_14.getArrayBase().(VariableAccess).getLocation())
}

predicate func_15(Parameter vtype_6911, Variable vreg_type_str, Parameter venv_6909, ArrayExpr target_16, ArrayExpr target_14, ArrayExpr target_15) {
	target_15.getArrayBase().(VariableAccess).getTarget()=vreg_type_str
	and target_15.getArrayOffset().(VariableAccess).getTarget()=vtype_6911
	and target_15.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_15.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_15.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="math between %s pointer and register with unbounded min value is not allowed\n"
	and target_15.getArrayOffset().(VariableAccess).getLocation().isBefore(target_16.getArrayOffset().(VariableAccess).getLocation())
	and target_14.getArrayBase().(VariableAccess).getLocation().isBefore(target_15.getArrayBase().(VariableAccess).getLocation())
}

predicate func_16(Parameter vtype_6911, Variable vreg_type_str, Parameter venv_6909, ArrayExpr target_15, ArrayExpr target_16) {
	target_16.getArrayBase().(VariableAccess).getTarget()=vreg_type_str
	and target_16.getArrayOffset().(VariableAccess).getTarget()=vtype_6911
	and target_16.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_16.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_16.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="value %lld makes %s pointer be out of bounds\n"
	and target_16.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("s64")
	and target_15.getArrayBase().(VariableAccess).getLocation().isBefore(target_16.getArrayBase().(VariableAccess).getLocation())
}

predicate func_17(Parameter venv_6909, ExprStmt target_17) {
	target_17.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_17.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_17.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="math between %s pointer and register with unbounded min value is not allowed\n"
	and target_17.getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
}

predicate func_18(Parameter venv_6909, ExprStmt target_18) {
	target_18.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_18.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_18.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="value %lld makes %s pointer be out of bounds\n"
	and target_18.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("s64")
	and target_18.getExpr().(FunctionCall).getArgument(3) instanceof ArrayExpr
}

predicate func_19(Parameter venv_6909, ExprStmt target_19) {
	target_19.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_19.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_6909
	and target_19.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="%s pointer offset %d is not allowed\n"
	and target_19.getExpr().(FunctionCall).getArgument(2) instanceof ArrayExpr
	and target_19.getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getTarget().getName()="off"
	and target_19.getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("const bpf_reg_state *")
}

from Function func, Parameter vtype_6911, Variable vreg_type_str, Parameter venv_6909, VariableAccess target_6, VariableAccess target_7, VariableAccess target_8, VariableAccess target_9, VariableAccess target_10, VariableAccess target_11, VariableAccess target_12, ArrayExpr target_13, ArrayExpr target_14, ArrayExpr target_15, ArrayExpr target_16, ExprStmt target_17, ExprStmt target_18, ExprStmt target_19
where
not func_0(vtype_6911, venv_6909, target_14)
and not func_1(vtype_6911, venv_6909, target_15)
and not func_3(vtype_6911, venv_6909, target_16, target_17)
and not func_5(vtype_6911, venv_6909, target_18)
and func_6(venv_6909, target_6)
and func_7(venv_6909, target_7)
and func_8(venv_6909, target_8)
and func_9(vtype_6911, vreg_type_str, target_9)
and func_10(vtype_6911, vreg_type_str, target_10)
and func_11(vtype_6911, vreg_type_str, target_11)
and func_12(vtype_6911, vreg_type_str, target_12)
and func_13(vtype_6911, vreg_type_str, venv_6909, target_14, target_19, target_13)
and func_14(vtype_6911, vreg_type_str, venv_6909, target_15, target_13, target_14)
and func_15(vtype_6911, vreg_type_str, venv_6909, target_16, target_14, target_15)
and func_16(vtype_6911, vreg_type_str, venv_6909, target_15, target_16)
and func_17(venv_6909, target_17)
and func_18(venv_6909, target_18)
and func_19(venv_6909, target_19)
and vtype_6911.getType().hasName("bpf_reg_type")
and vreg_type_str.getType() instanceof ArrayType
and venv_6909.getType().hasName("bpf_verifier_env *")
and vtype_6911.getFunction() = func
and not vreg_type_str.getParentScope+() = func
and venv_6909.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
