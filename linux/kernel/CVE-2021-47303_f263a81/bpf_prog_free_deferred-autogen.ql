/**
 * @name linux-f263a81451c12da5a342d90572e317e611846f2c-bpf_prog_free_deferred
 * @id cpp/linux/f263a81451c12da5a342d90572e317e611846f2c/bpf-prog-free-deferred
 * @description linux-f263a81451c12da5a342d90572e317e611846f2c-kernel/bpf/core.c-bpf_prog_free_deferred CVE-2021-47303
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vaux_2225, Variable vi_2226, RelationalOperation target_2, ArrayExpr target_3, PostfixIncrExpr target_4) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="poke_tab"
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="aux"
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="func"
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vaux_2225
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_2226
	and target_0.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_2.getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_4.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation()))
}

predicate func_1(Variable vaux_2225, Variable vi_2226, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("bpf_jit_free")
	and target_1.getExpr().(FunctionCall).getArgument(0).(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="func"
	and target_1.getExpr().(FunctionCall).getArgument(0).(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vaux_2225
	and target_1.getExpr().(FunctionCall).getArgument(0).(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vi_2226
}

predicate func_2(Variable vaux_2225, Variable vi_2226, RelationalOperation target_2) {
	 (target_2 instanceof GTExpr or target_2 instanceof LTExpr)
	and target_2.getLesserOperand().(VariableAccess).getTarget()=vi_2226
	and target_2.getGreaterOperand().(PointerFieldAccess).getTarget().getName()="func_cnt"
	and target_2.getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vaux_2225
}

predicate func_3(Variable vaux_2225, Variable vi_2226, ArrayExpr target_3) {
	target_3.getArrayBase().(PointerFieldAccess).getTarget().getName()="func"
	and target_3.getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vaux_2225
	and target_3.getArrayOffset().(VariableAccess).getTarget()=vi_2226
}

predicate func_4(Variable vi_2226, PostfixIncrExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget()=vi_2226
}

from Function func, Variable vaux_2225, Variable vi_2226, ExprStmt target_1, RelationalOperation target_2, ArrayExpr target_3, PostfixIncrExpr target_4
where
not func_0(vaux_2225, vi_2226, target_2, target_3, target_4)
and func_1(vaux_2225, vi_2226, target_1)
and func_2(vaux_2225, vi_2226, target_2)
and func_3(vaux_2225, vi_2226, target_3)
and func_4(vi_2226, target_4)
and vaux_2225.getType().hasName("bpf_prog_aux *")
and vi_2226.getType().hasName("int")
and vaux_2225.(LocalVariable).getFunction() = func
and vi_2226.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
