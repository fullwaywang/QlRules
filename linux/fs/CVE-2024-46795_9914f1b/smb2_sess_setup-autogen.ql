/**
 * @name linux-9914f1bd61d5e838bb1ab15a71076d37a6db65d1-smb2_sess_setup
 * @id cpp/linux/9914f1bd61d5e838bb1ab15a71076d37a6db65d1/smb2-sess-setup
 * @description linux-9914f1bd61d5e838bb1ab15a71076d37a6db65d1-fs/ksmbd/smb2pdu.c-smb2_sess_setup CVE-2024-46795
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vconn_1680, NotExpr target_2, ExprStmt target_3, LogicalAndExpr target_4) {
exists(ExprStmt target_0 |
	exists(AssignExpr obj_0 | obj_0=target_0.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="binding"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vconn_1680
		)
	)
	and exists(BlockStmt obj_2 | obj_2=target_0.getParent() |
		exists(IfStmt obj_3 | obj_3=obj_2.getParent() |
			obj_3.getThen().(BlockStmt).getStmt(5)=target_0
			and obj_3.getCondition()=target_2
		)
	)
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getLeftOperand().(LogicalAndExpr).getLeftOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vconn_1680, LogicalAndExpr target_5, FunctionCall target_6, EqualityOperation target_7) {
exists(ExprStmt target_1 |
	exists(AssignExpr obj_0 | obj_0=target_1.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="binding"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vconn_1680
		)
	)
	and exists(BlockStmt obj_2 | obj_2=target_1.getParent() |
		exists(IfStmt obj_3 | obj_3=obj_2.getParent() |
			obj_3.getElse().(BlockStmt).getStmt(4)=target_1
			and obj_3.getCondition()=target_5
		)
	)
	and target_6.getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_1.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_7.getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_2(Function func, NotExpr target_2) {
	exists(ValueFieldAccess obj_0 | obj_0=target_2.getOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getQualifier() |
			obj_1.getTarget().getName()="hdr"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("smb2_sess_setup_req *")
		)
		and obj_0.getTarget().getName()="SessionId"
	)
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vconn_1680, ExprStmt target_3) {
	exists(AssignExpr obj_0 | obj_0=target_3.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("ksmbd_session_register")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vconn_1680
			and obj_1.getArgument(1).(VariableAccess).getTarget().getType().hasName("ksmbd_session *")
		)
		and obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("int")
	)
}

predicate func_4(Variable vconn_1680, LogicalAndExpr target_4) {
	exists(LogicalAndExpr obj_0 | obj_0=target_4.getLeftOperand() |
		exists(RelationalOperation obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getGreaterOperand() |
				obj_2.getTarget().getName()="dialect"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vconn_1680
			)
			and obj_1.getLesserOperand().(Literal).getValue()="768"
		)
		and exists(BitwiseAndExpr obj_3 | obj_3=obj_0.getRightOperand() |
			exists(ValueFieldAccess obj_4 | obj_4=obj_3.getLeftOperand() |
				obj_4.getTarget().getName()="flags"
				and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("ksmbd_server_config")
			)
			and obj_3.getRightOperand().(BinaryBitwiseOperation).getValue()="4"
		)
	)
	and exists(BitwiseAndExpr obj_5 | obj_5=target_4.getRightOperand() |
		exists(PointerFieldAccess obj_6 | obj_6=obj_5.getLeftOperand() |
			obj_6.getTarget().getName()="Flags"
			and obj_6.getQualifier().(VariableAccess).getTarget().getType().hasName("smb2_sess_setup_req *")
		)
		and obj_5.getRightOperand().(Literal).getValue()="1"
	)
}

predicate func_5(Variable vconn_1680, LogicalAndExpr target_5) {
	exists(LogicalOrExpr obj_0 | obj_0=target_5.getLeftOperand() |
		exists(RelationalOperation obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getLesserOperand() |
				obj_2.getTarget().getName()="dialect"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vconn_1680
			)
			and obj_1.getGreaterOperand().(Literal).getValue()="768"
		)
		and exists(BitwiseAndExpr obj_3 | obj_3=obj_0.getRightOperand() |
			exists(ValueFieldAccess obj_4 | obj_4=obj_3.getLeftOperand() |
				obj_4.getTarget().getName()="flags"
				and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("ksmbd_server_config")
			)
			and obj_3.getRightOperand().(BinaryBitwiseOperation).getValue()="4"
		)
	)
	and exists(BitwiseAndExpr obj_5 | obj_5=target_5.getRightOperand() |
		exists(PointerFieldAccess obj_6 | obj_6=obj_5.getLeftOperand() |
			obj_6.getTarget().getName()="Flags"
			and obj_6.getQualifier().(VariableAccess).getTarget().getType().hasName("smb2_sess_setup_req *")
		)
		and obj_5.getRightOperand().(Literal).getValue()="1"
	)
}

predicate func_6(Variable vconn_1680, BlockStmt target_8, FunctionCall target_6) {
	target_6.getTarget().hasName("ksmbd_conn_need_reconnect")
	and target_6.getArgument(0).(VariableAccess).getTarget()=vconn_1680
	and target_6.getParent().(IfStmt).getThen()=target_8
}

predicate func_7(Variable vconn_1680, EqualityOperation target_7) {
	exists(FunctionCall obj_0 | obj_0=target_7.getLeftOperand() |
		obj_0.getTarget().hasName("decode_negotiation_token")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vconn_1680
		and obj_0.getArgument(1).(VariableAccess).getTarget().getType().hasName("negotiate_message *")
		and obj_0.getArgument(2).(VariableAccess).getTarget().getType().hasName("unsigned int")
	)
	and target_7.getRightOperand().(Literal).getValue()="0"
}

predicate func_8(FunctionCall target_6, Function func, BlockStmt target_8) {
	exists(ExprStmt obj_0 | obj_0=target_8.getStmt(0) |
		exists(AssignExpr obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getLValue().(VariableAccess).getTarget().getType().hasName("int")
			and obj_1.getRValue().(UnaryMinusExpr).getValue()="-14"
		)
	)
	and exists(ExprStmt obj_2 | obj_2=target_8.getStmt(1) |
		exists(AssignExpr obj_3 | obj_3=obj_2.getExpr() |
			obj_3.getLValue().(VariableAccess).getTarget().getType().hasName("ksmbd_session *")
			and obj_3.getRValue().(Literal).getValue()="0"
		)
	)
	and target_8.getStmt(2).(GotoStmt).getName() ="out_err"
	and target_8.getParent().(IfStmt).getCondition()=target_6
	and target_8.getEnclosingFunction() = func
}

from Function func, Variable vconn_1680, NotExpr target_2, ExprStmt target_3, LogicalAndExpr target_4, LogicalAndExpr target_5, FunctionCall target_6, EqualityOperation target_7, BlockStmt target_8
where
not func_0(vconn_1680, target_2, target_3, target_4)
and not func_1(vconn_1680, target_5, target_6, target_7)
and func_2(func, target_2)
and func_3(vconn_1680, target_3)
and func_4(vconn_1680, target_4)
and func_5(vconn_1680, target_5)
and func_6(vconn_1680, target_8, target_6)
and func_7(vconn_1680, target_7)
and func_8(target_6, func, target_8)
and vconn_1680.getType().hasName("ksmbd_conn *")
and vconn_1680.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
