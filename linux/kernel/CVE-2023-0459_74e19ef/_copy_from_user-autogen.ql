/**
 * @name linux-74e19ef0ff8061ef55957c3abd71614ef0f42f47-_copy_from_user
 * @id cpp/linux/74e19ef0ff8061ef55957c3abd71614ef0f42f47/-copy-from-user
 * @description linux-74e19ef0ff8061ef55957c3abd71614ef0f42f47-_copy_from_user CVE-2023-0459
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(LogicalAndExpr target_1, Function func) {
	exists(AsmStmt target_0 |
		target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_0.getEnclosingFunction() = func)
}

predicate func_1(Function func, LogicalAndExpr target_1) {
		target_1.getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("should_fail_usercopy")
		and target_1.getAnOperand().(FunctionCall).getTarget().hasName("__builtin_expect")
		and target_1.getAnOperand().(FunctionCall).getArgument(1).(Literal).getValue()="1"
		and target_1.getEnclosingFunction() = func
}

from Function func, LogicalAndExpr target_1
where
not func_0(target_1, func)
and func_1(func, target_1)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
