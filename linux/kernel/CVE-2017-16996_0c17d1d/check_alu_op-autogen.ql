/**
 * @name linux-0c17d1d2c61936401f4702e1846e2c19b200f958-check_alu_op
 * @id cpp/linux/0c17d1d2c61936401f4702e1846e2c19b200f958/check-alu-op
 * @description linux-0c17d1d2c61936401f4702e1846e2c19b200f958-kernel/bpf/verifier.c-check_alu_op CVE-2017-16996
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vinsn_2322, Variable vregs_2324, FunctionCall target_0) {
	target_0.getTarget().hasName("__update_reg_bounds")
	and not target_0.getTarget().hasName("coerce_reg_to_size")
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_2324
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_2322
}

predicate func_1(Parameter vinsn_2322, Variable vregs_2324, PointerFieldAccess target_1) {
	target_1.getTarget().getName()="dst_reg"
	and target_1.getQualifier().(VariableAccess).getTarget()=vinsn_2322
	and target_1.getParent().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_2324
}

predicate func_2(Parameter vinsn_2322, Variable vregs_2324, PointerFieldAccess target_2) {
	target_2.getTarget().getName()="dst_reg"
	and target_2.getQualifier().(VariableAccess).getTarget()=vinsn_2322
	and target_2.getParent().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_2324
}

predicate func_4(Parameter vinsn_2322, Variable vregs_2324, AssignExpr target_4) {
	target_4.getLValue().(ValueFieldAccess).getTarget().getName()="var_off"
	and target_4.getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_2324
	and target_4.getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_4.getLValue().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_2322
	and target_4.getRValue().(FunctionCall).getTarget().hasName("tnum_cast")
	and target_4.getRValue().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="var_off"
	and target_4.getRValue().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_2324
	and target_4.getRValue().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_4.getRValue().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_2322
	and target_4.getRValue().(FunctionCall).getArgument(1) instanceof Literal
}

predicate func_5(EqualityOperation target_6, Function func, ExprStmt target_5) {
	target_5.getExpr() instanceof FunctionCall
	and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Parameter vinsn_2322, BlockStmt target_7, EqualityOperation target_6) {
	target_6.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="code"
	and target_6.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_2322
	and target_6.getLeftOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="7"
	and target_6.getRightOperand().(Literal).getValue()="7"
	and target_6.getParent().(IfStmt).getThen()=target_7
}

predicate func_7(Parameter vinsn_2322, Variable vregs_2324, BlockStmt target_7) {
	target_7.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_2324
	and target_7.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_7.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_2322
	and target_7.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_2324
	and target_7.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getTarget().getName()="src_reg"
	and target_7.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_2322
}

from Function func, Parameter vinsn_2322, Variable vregs_2324, FunctionCall target_0, PointerFieldAccess target_1, PointerFieldAccess target_2, AssignExpr target_4, ExprStmt target_5, EqualityOperation target_6, BlockStmt target_7
where
func_0(vinsn_2322, vregs_2324, target_0)
and func_1(vinsn_2322, vregs_2324, target_1)
and func_2(vinsn_2322, vregs_2324, target_2)
and func_4(vinsn_2322, vregs_2324, target_4)
and func_5(target_6, func, target_5)
and func_6(vinsn_2322, target_7, target_6)
and func_7(vinsn_2322, vregs_2324, target_7)
and vinsn_2322.getType().hasName("bpf_insn *")
and vregs_2324.getType().hasName("bpf_reg_state *")
and vinsn_2322.getFunction() = func
and vregs_2324.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
