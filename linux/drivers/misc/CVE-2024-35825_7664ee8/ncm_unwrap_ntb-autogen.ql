/**
 * @name linux-7664ee8bd80309b90d53488b619764f0a057f2b7-ncm_unwrap_ntb
 * @id cpp/linux/7664ee8bd80309b90d53488b619764f0a057f2b7/ncm-unwrap-ntb
 * @description linux-7664ee8bd80309b90d53488b619764f0a057f2b7-drivers/usb/gadget/function/f_ncm.c-ncm_unwrap_ntb CVE-2024-35825
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vblock_len_1180, BlockStmt target_2, LogicalAndExpr target_3, ExprStmt target_4) {
exists(LogicalAndExpr target_0 |
	target_0.getLeftOperand() instanceof RelationalOperation
	and target_0.getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vblock_len_1180
	and target_0.getRightOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_0.getParent().(IfStmt).getThen()=target_2
	and target_3.getRightOperand().(EqualityOperation).getLeftOperand().(PointerDereferenceExpr).getOperand().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getLocation().isBefore(target_0.getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation())
	and target_0.getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getRValue().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vto_process_1188, BlockStmt target_2, RelationalOperation target_1) {
	 (target_1 instanceof GTExpr or target_1 instanceof LTExpr)
	and target_1.getGreaterOperand().(VariableAccess).getTarget()=vto_process_1188
	and target_1.getLesserOperand().(Literal).getValue()="0"
	and target_1.getParent().(IfStmt).getThen()=target_2
}

predicate func_2(Variable vblock_len_1180, BlockStmt target_2) {
	target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned char *")
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned char *")
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getTarget()=vblock_len_1180
	and target_2.getStmt(1).(GotoStmt).getName() ="parse_ntb"
}

predicate func_3(Variable vblock_len_1180, Variable vto_process_1188, LogicalAndExpr target_3) {
	target_3.getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vto_process_1188
	and target_3.getLeftOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="1"
	and target_3.getRightOperand().(EqualityOperation).getLeftOperand().(PointerDereferenceExpr).getOperand().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned char *")
	and target_3.getRightOperand().(EqualityOperation).getLeftOperand().(PointerDereferenceExpr).getOperand().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getTarget()=vblock_len_1180
	and target_3.getRightOperand().(EqualityOperation).getRightOperand().(HexLiteral).getValue()="0"
}

predicate func_4(Variable vblock_len_1180, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned char *")
	and target_4.getExpr().(AssignExpr).getRValue().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned char *")
	and target_4.getExpr().(AssignExpr).getRValue().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getTarget()=vblock_len_1180
}

from Function func, Variable vblock_len_1180, Variable vto_process_1188, RelationalOperation target_1, BlockStmt target_2, LogicalAndExpr target_3, ExprStmt target_4
where
not func_0(vblock_len_1180, target_2, target_3, target_4)
and func_1(vto_process_1188, target_2, target_1)
and func_2(vblock_len_1180, target_2)
and func_3(vblock_len_1180, vto_process_1188, target_3)
and func_4(vblock_len_1180, target_4)
and vblock_len_1180.getType().hasName("unsigned int")
and vto_process_1188.getType().hasName("int")
and vblock_len_1180.(LocalVariable).getFunction() = func
and vto_process_1188.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
