/**
 * @name chromium-2ca2e08e92a6bc67d23517c4ae8efbd0cfa2e8fe-blink____ShouldBlockHidServiceCall
 * @id cpp/chromium/2ca2e08e92a6bc67d23517c4ae8efbd0cfa2e8fe/blinkshouldblockhidservicecall
 * @description chromium-2ca2e08e92a6bc67d23517c4ae8efbd0cfa2e8fe-third_party/blink/renderer/modules/hid/hid.cc-blink____ShouldBlockHidServiceCall CVE-2023-2462
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Parameter vexception_state_40, FunctionCall target_8, ExprStmt target_6) {
exists(IfStmt target_1 |
	exists(BlockStmt obj_0 | obj_0=target_1.getThen() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				obj_2.getTarget().hasName("ThrowSecurityError")
				and obj_2.getQualifier().(VariableAccess).getTarget()=vexception_state_40
				and obj_2.getArgument(0).(StringLiteral).getValue()="Access to the WebHID API is denied from contexts where the top-level document has an opaque origin."
			)
		)
	)
	and exists(BlockStmt obj_3 | obj_3=target_1.getParent() |
		exists(IfStmt obj_4 | obj_4=obj_3.getParent() |
			obj_4.getThen().(BlockStmt).getStmt(0)=target_1
			and obj_4.getCondition()=target_8
		)
	)
	and target_1.getCondition().(VariableAccess).getTarget()=vexception_state_40
	and target_6.getExpr().(FunctionCall).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getCondition().(VariableAccess).getLocation())
)
}

predicate func_3(Parameter vexception_state_40, Variable vkFeaturePolicyBlocked, ExprStmt target_9, Function func) {
exists(IfStmt target_3 |
	exists(BlockStmt obj_0 | obj_0=target_3.getThen() |
		exists(IfStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(BlockStmt obj_2 | obj_2=obj_1.getThen() |
				exists(ExprStmt obj_3 | obj_3=obj_2.getStmt(0) |
					exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getTarget().hasName("ThrowSecurityError")
						and obj_4.getQualifier().(VariableAccess).getTarget()=vexception_state_40
						and obj_4.getArgument(0).(VariableAccess).getTarget()=vkFeaturePolicyBlocked
					)
				)
			)
			and obj_1.getCondition().(VariableAccess).getTarget()=vexception_state_40
		)
		and obj_0.getStmt(1).(ReturnStmt).getExpr().(Literal).getValue()="1"
	)
	and target_3.getCondition() instanceof NotExpr
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
	and target_3.getFollowingStmt() instanceof ReturnStmt
	and target_9.getExpr().(FunctionCall).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getThen().(BlockStmt).getStmt(0).(IfStmt).getCondition().(VariableAccess).getLocation())
)
}

predicate func_4(Function func) {
exists(ReturnStmt target_4 |
	target_4.getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
	and target_4.getFollowingStmt() instanceof ReturnStmt
)
}

predicate func_5(Parameter vcontext_39, BlockStmt target_10, NotExpr target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getOperand() |
		obj_0.getTarget().hasName("IsFeatureEnabled")
		and obj_0.getQualifier().(VariableAccess).getTarget()=vcontext_39
	)
	and target_5.getParent().(IfStmt).getThen()=target_10
}

predicate func_6(Parameter vexception_state_40, Variable vkContextGone, NotExpr target_11, ExprStmt target_6) {
	exists(FunctionCall obj_0 | obj_0=target_6.getExpr() |
		obj_0.getTarget().hasName("ThrowDOMException")
		and obj_0.getQualifier().(VariableAccess).getTarget()=vexception_state_40
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vkContextGone
	)
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_11
}

predicate func_7(Parameter vexception_state_40, FunctionCall target_7) {
	target_7.getTarget().hasName("HadException")
	and target_7.getQualifier().(VariableAccess).getTarget()=vexception_state_40
}

predicate func_8(Function func, FunctionCall target_8) {
	target_8.getTarget().hasName("IsOpaque")
	and target_8.getQualifier().(VariableAccess).getTarget().getType().hasName("const SecurityOrigin *")
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Parameter vexception_state_40, Variable vkFeaturePolicyBlocked, ExprStmt target_9) {
	exists(FunctionCall obj_0 | obj_0=target_9.getExpr() |
		obj_0.getTarget().hasName("ThrowSecurityError")
		and obj_0.getQualifier().(VariableAccess).getTarget()=vexception_state_40
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vkFeaturePolicyBlocked
	)
}

predicate func_10(Parameter vexception_state_40, Variable vkFeaturePolicyBlocked, BlockStmt target_10) {
	exists(ExprStmt obj_0 | obj_0=target_10.getStmt(0) |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("ThrowSecurityError")
			and obj_1.getQualifier().(VariableAccess).getTarget()=vexception_state_40
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vkFeaturePolicyBlocked
		)
	)
}

predicate func_11(Parameter vcontext_39, NotExpr target_11) {
	target_11.getOperand().(VariableAccess).getTarget()=vcontext_39
}

from Function func, Parameter vcontext_39, Parameter vexception_state_40, Variable vkContextGone, Variable vkFeaturePolicyBlocked, NotExpr target_5, ExprStmt target_6, FunctionCall target_7, FunctionCall target_8, ExprStmt target_9, BlockStmt target_10, NotExpr target_11
where
not func_1(vexception_state_40, target_8, target_6)
and not func_3(vexception_state_40, vkFeaturePolicyBlocked, target_9, func)
and not func_4(func)
and func_5(vcontext_39, target_10, target_5)
and func_6(vexception_state_40, vkContextGone, target_11, target_6)
and func_7(vexception_state_40, target_7)
and func_8(func, target_8)
and func_9(vexception_state_40, vkFeaturePolicyBlocked, target_9)
and func_10(vexception_state_40, vkFeaturePolicyBlocked, target_10)
and func_11(vcontext_39, target_11)
and vcontext_39.getType().hasName("ExecutionContext *")
and vexception_state_40.getType().hasName("ExceptionState &")
and vkContextGone.getType() instanceof ArrayType
and vkFeaturePolicyBlocked.getType() instanceof ArrayType
and vcontext_39.getFunction() = func
and vexception_state_40.getFunction() = func
and not vkContextGone.getParentScope+() = func
and not vkFeaturePolicyBlocked.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
