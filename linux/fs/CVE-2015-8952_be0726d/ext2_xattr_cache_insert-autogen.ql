/**
 * @name linux-be0726d33cb8f411945884664924bed3cb8c70ee-ext2_xattr_cache_insert
 * @id cpp/linux/be0726d33cb8f411945884664924bed3cb8c70ee/ext2-xattr-cache-insert
 * @description linux-be0726d33cb8f411945884664924bed3cb8c70ee-fs/ext2/xattr.c-ext2_xattr_cache_insert CVE-2015-8952
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vbh_829, Variable vhash_831, Variable vce_832, Variable verror_833, FunctionCall target_0) {
	target_0.getTarget().hasName("mb_cache_entry_insert")
	and not target_0.getTarget().hasName("mb2_cache_entry_create")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vce_832
	and target_0.getArgument(1).(PointerFieldAccess).getTarget().getName()="b_bdev"
	and target_0.getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbh_829
	and target_0.getArgument(2).(PointerFieldAccess).getTarget().getName()="b_blocknr"
	and target_0.getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbh_829
	and target_0.getArgument(3).(VariableAccess).getTarget()=vhash_831
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=verror_833
}

predicate func_2(Function func, BitwiseOrExpr target_2) {
	target_2.getValue()="37748800"
	and target_2.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
	and target_2.getEnclosingFunction() = func
}

predicate func_3(VariableAccess target_11, Function func, EmptyStmt target_3) {
	target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_11
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Function func, DeclStmt target_4) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_4
}

predicate func_5(Variable vce_832, Variable vext2_xattr_cache, AssignExpr target_5) {
	target_5.getLValue().(VariableAccess).getTarget()=vce_832
	and target_5.getRValue().(FunctionCall).getTarget().hasName("mb_cache_entry_alloc")
	and target_5.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vext2_xattr_cache
	and target_5.getRValue().(FunctionCall).getArgument(1) instanceof BitwiseOrExpr
}

predicate func_6(Variable vce_832, Function func, IfStmt target_6) {
	target_6.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vce_832
	and target_6.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-12"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_6
}

predicate func_7(Variable verror_833, Function func, ExprStmt target_7) {
	target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verror_833
	and target_7.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_7
}

predicate func_8(Parameter vbh_829, PointerFieldAccess target_12, VariableAccess target_8) {
	target_8.getTarget()=vbh_829
	and target_8.getParent().(PointerFieldAccess).getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
	and target_12.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_8.getLocation())
}

predicate func_9(Variable vce_832, VariableAccess target_11, ExprStmt target_9) {
	target_9.getExpr().(FunctionCall).getTarget().hasName("mb_cache_entry_free")
	and target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vce_832
	and target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_11
}

predicate func_10(Variable vce_832, VariableAccess target_11, ExprStmt target_10) {
	target_10.getExpr().(FunctionCall).getTarget().hasName("mb_cache_entry_release")
	and target_10.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vce_832
	and target_10.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_11
}

predicate func_11(Variable verror_833, BlockStmt target_13, VariableAccess target_11) {
	target_11.getTarget()=verror_833
	and target_11.getParent().(IfStmt).getThen()=target_13
}

predicate func_12(Parameter vbh_829, PointerFieldAccess target_12) {
	target_12.getTarget().getName()="h_hash"
	and target_12.getQualifier().(PointerFieldAccess).getTarget().getName()="b_data"
	and target_12.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbh_829
}

predicate func_13(Variable verror_833, BlockStmt target_13) {
	target_13.getStmt(0) instanceof ExprStmt
	and target_13.getStmt(1).(IfStmt).getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=verror_833
	and target_13.getStmt(1).(IfStmt).getCondition().(EqualityOperation).getRightOperand().(UnaryMinusExpr).getValue()="-16"
	and target_13.getStmt(1).(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verror_833
	and target_13.getStmt(1).(IfStmt).getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

from Function func, Parameter vbh_829, Variable vhash_831, Variable vce_832, Variable verror_833, Variable vext2_xattr_cache, FunctionCall target_0, BitwiseOrExpr target_2, EmptyStmt target_3, DeclStmt target_4, AssignExpr target_5, IfStmt target_6, ExprStmt target_7, VariableAccess target_8, ExprStmt target_9, ExprStmt target_10, VariableAccess target_11, PointerFieldAccess target_12, BlockStmt target_13
where
func_0(vbh_829, vhash_831, vce_832, verror_833, target_0)
and func_2(func, target_2)
and func_3(target_11, func, target_3)
and func_4(func, target_4)
and func_5(vce_832, vext2_xattr_cache, target_5)
and func_6(vce_832, func, target_6)
and func_7(verror_833, func, target_7)
and func_8(vbh_829, target_12, target_8)
and func_9(vce_832, target_11, target_9)
and func_10(vce_832, target_11, target_10)
and func_11(verror_833, target_13, target_11)
and func_12(vbh_829, target_12)
and func_13(verror_833, target_13)
and vbh_829.getType().hasName("buffer_head *")
and vhash_831.getType().hasName("__u32")
and vce_832.getType().hasName("mb_cache_entry *")
and verror_833.getType().hasName("int")
and vext2_xattr_cache.getType().hasName("mb_cache *")
and vbh_829.getFunction() = func
and vhash_831.(LocalVariable).getFunction() = func
and vce_832.(LocalVariable).getFunction() = func
and verror_833.(LocalVariable).getFunction() = func
and not vext2_xattr_cache.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
