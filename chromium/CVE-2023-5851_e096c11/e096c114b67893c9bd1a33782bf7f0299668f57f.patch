commit e096c114b67893c9bd1a33782bf7f0299668f57f	e096c114b67893c9bd1a33782bf7f0299668f57f
Author: Lily Chen <chlily@chromium.org>
Date:   Thu Sep 14 21:40:23 2023 +0000

    [DownloadBubble] Add input event activation protector
    
    To mitigate the risk of clickjacking, introduce a delay during which
    no clicks will be processed.
    
    Bug: 1473957
    Change-Id: I2137e5602bad3ae324b462ca8ba9bffd6ba2056f
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4864122
    Commit-Queue: Lily Chen <chlily@chromium.org>
    Reviewed-by: Xinghui Lu <xinghuilu@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1196830}

diff --git a/chrome/browser/download/bubble/download_bubble_ui_controller.h b/chrome/browser/download/bubble/download_bubble_ui_controller.h
index d526f50b90d99..b217070e33f65 100644
--- a/chrome/browser/download/bubble/download_bubble_ui_controller.h
+++ b/chrome/browser/download/bubble/download_bubble_ui_controller.h
@@ -75,6 +75,9 @@ class DownloadBubbleUIController {
   virtual std::vector<DownloadUIModel::DownloadUIModelPtr> GetPartialView();
 
   // Process button press on the bubble.
+  // TODO(chlily): `is_main_view` should be named `is_primary_view`. It
+  // distinguishes the primary page from the (security) subpage, not the main vs
+  // partial flavors of the primary view.
   void ProcessDownloadButtonPress(base::WeakPtr<DownloadUIModel> model,
                                   DownloadCommands::Command command,
                                   bool is_main_view);
diff --git a/chrome/browser/download/download_browsertest_utils.cc b/chrome/browser/download/download_browsertest_utils.cc
index 4384e2f282695..0d3abe985fbca 100644
--- a/chrome/browser/download/download_browsertest_utils.cc
+++ b/chrome/browser/download/download_browsertest_utils.cc
@@ -21,6 +21,7 @@
 #include "net/dns/mock_host_resolver.h"
 #include "net/traffic_annotation/network_traffic_annotation_test_helper.h"
 #include "third_party/blink/public/common/switches.h"
+#include "ui/views/views_switches.h"
 
 using content::DownloadManager;
 using content::WebContents;
@@ -104,6 +105,11 @@ void DownloadTestBase::SetUpCommandLine(base::CommandLine* command_line) {
   // Slower builders (linux-chromeos-rel, debug, and maybe others) are flaky
   // due to slower loading interacting with deferred commits.
   command_line->AppendSwitch(blink::switches::kAllowPreCommitInput);
+
+  // Clicks from tests should always be allowed, even on dialogs that have
+  // protection against accidental double-clicking/etc.
+  command_line->AppendSwitch(
+      views::switches::kDisableInputEventActivationProtectionForTesting);
 }
 
 void DownloadTestBase::TearDownOnMainThread() {
diff --git a/chrome/browser/ui/views/download/bubble/download_bubble_row_view.cc b/chrome/browser/ui/views/download/bubble/download_bubble_row_view.cc
index 0b81a206c9d62..18884309744bf 100644
--- a/chrome/browser/ui/views/download/bubble/download_bubble_row_view.cc
+++ b/chrome/browser/ui/views/download/bubble/download_bubble_row_view.cc
@@ -13,7 +13,6 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/download/bubble/download_bubble_prefs.h"
 #include "chrome/browser/download/bubble/download_bubble_ui_controller.h"
-#include "chrome/browser/download/download_commands.h"
 #include "chrome/browser/download/download_item_warning_data.h"
 #include "chrome/browser/download/download_stats.h"
 #include "chrome/browser/download/download_ui_model.h"
@@ -50,6 +49,7 @@
 #include "ui/views/controls/image_view.h"
 #include "ui/views/controls/label.h"
 #include "ui/views/controls/progress_bar.h"
+#include "ui/views/input_event_activation_protector.h"
 #include "ui/views/layout/flex_layout.h"
 #include "ui/views/layout/flex_layout_types.h"
 #include "ui/views/layout/flex_layout_view.h"
@@ -399,6 +399,8 @@ DownloadBubbleRowView::DownloadBubbleRowView(
           base::Minutes(1),
           base::BindRepeating(&DownloadBubbleRowView::UpdateStatusText,
                               base::Unretained(this))),
+      input_protector_(
+          std::make_unique<views::InputEventActivationProtector>()),
       fixed_width_(fixed_width) {
   CHECK(model_);
   model_->SetDelegate(this);
@@ -657,6 +659,12 @@ void DownloadBubbleRowView::RemoveLayerFromRegions(ui::Layer* layer) {
   inkdrop_container_->RemoveLayerFromRegions(layer);
 }
 
+void DownloadBubbleRowView::VisibilityChanged(views::View* starting_from,
+                                              bool is_visible) {
+  views::View::VisibilityChanged(starting_from, is_visible);
+  input_protector_->VisibilityChanged(is_visible);
+}
+
 void DownloadBubbleRowView::OnWillChangeFocus(views::View* before,
                                               views::View* now) {
   if (now) {
@@ -697,9 +705,10 @@ void DownloadBubbleRowView::Layout() {
   inkdrop_container_->SetBoundsRect(GetLocalBounds());
 }
 
-void DownloadBubbleRowView::OnMainButtonPressed() {
+void DownloadBubbleRowView::OnMainButtonPressed(const ui::Event& event) {
   if (!bubble_controller_ || !navigation_handler_ ||
-      !ui_info_.main_button_enabled || !model_) {
+      !ui_info_.main_button_enabled || !model_ ||
+      input_protector_->IsPossiblyUnintendedInteraction(event)) {
     return;
   }
   bubble_controller_->RecordDownloadBubbleInteraction();
@@ -715,6 +724,17 @@ void DownloadBubbleRowView::OnMainButtonPressed() {
   }
 }
 
+void DownloadBubbleRowView::OnActionButtonPressed(
+    DownloadCommands::Command command,
+    const ui::Event& event) {
+  if (!bubble_controller_ || !model_ ||
+      input_protector_->IsPossiblyUnintendedInteraction(event)) {
+    return;
+  }
+  bubble_controller_->ProcessDownloadButtonPress(model_->GetWeakPtr(), command,
+                                                 /*is_main_view=*/true);
+}
+
 void DownloadBubbleRowView::UpdateButtons() {
   resume_action_->SetVisible(false);
   pause_action_->SetVisible(false);
@@ -866,12 +886,11 @@ void DownloadBubbleRowView::OnDownloadDestroyed(const ContentId& id) {
 void DownloadBubbleRowView::AddMainPageButton(
     DownloadCommands::Command command,
     const std::u16string& button_string) {
+  // Unretained is safe because this owns and outlives the main page button.
   views::MdTextButton* button =
       main_button_holder_->AddChildView(std::make_unique<views::MdTextButton>(
-          base::BindRepeating(
-              &DownloadBubbleUIController::ProcessDownloadButtonPress,
-              bubble_controller_, model_->GetWeakPtr(), command,
-              /*is_main_view=*/true),
+          base::BindRepeating(&DownloadBubbleRowView::OnActionButtonPressed,
+                              base::Unretained(this), command),
           button_string));
   button->SetMaxSize(gfx::Size(0, kDownloadButtonHeight));
   button->SetProperty(views::kMarginsKey, kRowInterElementPadding);
@@ -885,11 +904,11 @@ void DownloadBubbleRowView::AddMainPageButton(
 
 views::ImageButton* DownloadBubbleRowView::AddQuickAction(
     DownloadCommands::Command command) {
-  views::ImageButton* quick_action = quick_action_holder_->AddChildView(
-      views::CreateVectorImageButton(base::BindRepeating(
-          &DownloadBubbleUIController::ProcessDownloadButtonPress,
-          bubble_controller_, model_->GetWeakPtr(), command,
-          /*is_main_view=*/true)));
+  // Unretained is safe because this owns and outlives the quick action button.
+  views::ImageButton* quick_action =
+      quick_action_holder_->AddChildView(views::CreateVectorImageButton(
+          base::BindRepeating(&DownloadBubbleRowView::OnActionButtonPressed,
+                              base::Unretained(this), command)));
   InstallCircleHighlightPathGenerator(quick_action);
   quick_action->SetBorder(
       views::CreateEmptyBorder(GetLayoutInsets(DOWNLOAD_ICON)));
@@ -1110,12 +1129,22 @@ void DownloadBubbleRowView::SimulateMainButtonClickForTesting(
 
 bool DownloadBubbleRowView::IsQuickActionButtonVisibleForTesting(
     DownloadCommands::Command command) {
-  auto* button = GetActionButtonForCommand(command);
+  views::ImageButton* button = GetActionButtonForCommand(command);
   if (!button) {
     return false;
   }
   return button->GetVisible();
 }
 
+views::ImageButton* DownloadBubbleRowView::GetQuickActionButtonForTesting(
+    DownloadCommands::Command command) {
+  return GetActionButtonForCommand(command);
+}
+
+void DownloadBubbleRowView::SetInputProtectorForTesting(
+    std::unique_ptr<views::InputEventActivationProtector> input_protector) {
+  input_protector_ = std::move(input_protector);
+}
+
 BEGIN_METADATA(DownloadBubbleRowView, views::View)
 END_METADATA
diff --git a/chrome/browser/ui/views/download/bubble/download_bubble_row_view.h b/chrome/browser/ui/views/download/bubble/download_bubble_row_view.h
index 51fca95e3c06b..124381bbba1dd 100644
--- a/chrome/browser/ui/views/download/bubble/download_bubble_row_view.h
+++ b/chrome/browser/ui/views/download/bubble/download_bubble_row_view.h
@@ -10,6 +10,7 @@
 #include "base/task/cancelable_task_tracker.h"
 #include "base/time/time.h"
 #include "base/timer/timer.h"
+#include "chrome/browser/download/download_commands.h"
 #include "chrome/browser/download/download_ui_model.h"
 #include "chrome/browser/ui/download/download_item_mode.h"
 #include "chrome/browser/ui/views/controls/hover_button.h"
@@ -20,8 +21,13 @@
 #include "ui/views/controls/button/button.h"
 #include "ui/views/view.h"
 
+namespace ui {
+class Event;
+}
+
 namespace views {
 class ImageView;
+class InputEventActivationProtector;
 class Label;
 class MdTextButton;
 class ImageButton;
@@ -63,6 +69,7 @@ class DownloadBubbleRowView : public views::View,
   gfx::Size CalculatePreferredSize() const override;
   void AddLayerToRegion(ui::Layer* layer, views::LayerRegion region) override;
   void RemoveLayerFromRegions(ui::Layer* layer) override;
+  void VisibilityChanged(views::View* starting_from, bool is_visible) override;
 
   // Overrides views::FocusChangeListener
   void OnWillChangeFocus(views::View* before, views::View* now) override;
@@ -97,6 +104,10 @@ class DownloadBubbleRowView : public views::View,
 
   void SimulateMainButtonClickForTesting(const ui::Event& event);
   bool IsQuickActionButtonVisibleForTesting(DownloadCommands::Command command);
+  views::ImageButton* GetQuickActionButtonForTesting(
+      DownloadCommands::Command command);
+  void SetInputProtectorForTesting(
+      std::unique_ptr<views::InputEventActivationProtector> input_protector);
 
  protected:
   // Overrides ui::LayerDelegate:
@@ -145,9 +156,12 @@ class DownloadBubbleRowView : public views::View,
   void SetIconFromImage(gfx::Image icon);
   void SetIconFromImageModel(const ui::ImageModel& icon);
 
-  void OnCancelButtonPressed();
-  void OnDiscardButtonPressed();
-  void OnMainButtonPressed();
+  // Called when the transparent button (covering the whole row) is pressed.
+  void OnMainButtonPressed(const ui::Event& event);
+  // Called when the button on the side of the row (the "main page button") or a
+  // quick action button is pressed.
+  void OnActionButtonPressed(DownloadCommands::Command command,
+                             const ui::Event& event);
 
   void AnnounceInProgressAlert();
 
@@ -248,6 +262,9 @@ class DownloadBubbleRowView : public views::View,
   // Tracks tasks requesting file icons.
   base::CancelableTaskTracker cancelable_task_tracker_;
 
+  // Mitigates the risk of clickjacking by enforcing a delay in click input.
+  std::unique_ptr<views::InputEventActivationProtector> input_protector_;
+
   // TODO(crbug.com/1349528): The size constraint is not passed down from the
   // views tree in the first round of layout, so setting a fixed width to bound
   // the view. This is assuming that the row view is loaded inside a bubble. It
diff --git a/chrome/browser/ui/views/download/bubble/download_bubble_row_view_unittest.cc b/chrome/browser/ui/views/download/bubble/download_bubble_row_view_unittest.cc
index 06d24bd5c9293..946185bba692e 100644
--- a/chrome/browser/ui/views/download/bubble/download_bubble_row_view_unittest.cc
+++ b/chrome/browser/ui/views/download/bubble/download_bubble_row_view_unittest.cc
@@ -19,11 +19,16 @@
 #include "testing/gtest/include/gtest/gtest.h"
 #include "ui/base/clipboard/test/test_clipboard.h"
 #include "ui/events/test/test_event.h"
+#include "ui/events/types/event_type.h"
+#include "ui/views/input_event_activation_protector.h"
+#include "ui/views/test/mock_input_event_activation_protector.h"
 
 namespace {
 
+using ::testing::_;
 using ::testing::NiceMock;
 using ::testing::Return;
+using ::testing::ReturnRef;
 using ::testing::ReturnRefOfCopy;
 
 constexpr int kTimeSinceDownloadCompletedUpdateSeconds = 60;
@@ -46,6 +51,8 @@ class DownloadBubbleRowViewTest : public TestWithBrowserView {
 
     content::DownloadItemUtils::AttachInfoForTesting(
         &download_item_, browser()->profile(), nullptr);
+    ON_CALL(download_item_, GetURL())
+        .WillByDefault(ReturnRef(GURL::EmptyGURL()));
 
     DownloadToolbarButtonView* button =
         browser_view()->toolbar()->download_button();
@@ -58,6 +65,13 @@ class DownloadBubbleRowViewTest : public TestWithBrowserView {
             std::make_unique<DownloadUIModel::BubbleStatusTextBuilder>()),
         row_list_view_.get(), button->bubble_controller()->GetWeakPtr(),
         button->GetWeakPtr(), browser()->AsWeakPtr(), bubble_width);
+
+    auto input_protector =
+        std::make_unique<NiceMock<views::MockInputEventActivationProtector>>();
+    input_protector_ = input_protector.get();
+    ON_CALL(*input_protector_, IsPossiblyUnintendedInteraction(_))
+        .WillByDefault(Return(false));
+    row_view_->SetInputProtectorForTesting(std::move(input_protector));
   }
 
   void FastForward(base::TimeDelta time) {
@@ -67,11 +81,12 @@ class DownloadBubbleRowViewTest : public TestWithBrowserView {
   DownloadBubbleRowView* row_view() { return row_view_.get(); }
   download::MockDownloadItem* download_item() { return &download_item_; }
 
- private:
+ protected:
   base::test::ScopedFeatureList scoped_feature_list_;
   NiceMock<download::MockDownloadItem> download_item_;
   std::unique_ptr<DownloadBubbleRowListView> row_list_view_;
   std::unique_ptr<DownloadBubbleRowView> row_view_;
+  raw_ptr<NiceMock<views::MockInputEventActivationProtector>> input_protector_;
 };
 
 TEST_F(DownloadBubbleRowViewTest, CopyAcceleratorCopiesFile) {
@@ -158,4 +173,33 @@ TEST_F(DownloadBubbleRowViewTest, OnlyEnabledQuickActionsVisible) {
       DownloadCommands::SHOW_IN_FOLDER));
 }
 
+// Test that the input protector can deny button clicks.
+TEST_F(DownloadBubbleRowViewTest, InputProtectorDeniesClicks) {
+  EXPECT_CALL(*input_protector_, IsPossiblyUnintendedInteraction(_))
+      .WillRepeatedly(Return(true));
+
+  // Test main button
+  EXPECT_CALL(*download_item(), OpenDownload()).Times(0);
+  row_view()->SimulateMainButtonClickForTesting(ui::test::TestEvent());
+
+  // Test quick action button.
+  ON_CALL(*download_item(), GetState())
+      .WillByDefault(Return(download::DownloadItem::COMPLETE));
+  ON_CALL(*download_item(), CanOpenDownload()).WillByDefault(Return(true));
+  download_item()->NotifyObserversDownloadUpdated();
+  row_view()->SetUIInfoForTesting(
+      DownloadUIModel::BubbleUIInfo().AddQuickAction(
+          DownloadCommands::OPEN_WHEN_COMPLETE, u"label",
+          &vector_icons::kFolderIcon));
+  ASSERT_TRUE(row_view()->IsQuickActionButtonVisibleForTesting(
+      DownloadCommands::OPEN_WHEN_COMPLETE));
+
+  EXPECT_CALL(*download_item(), OpenDownload()).Times(0);
+  ui::MouseEvent event(ui::ET_MOUSE_PRESSED, gfx::PointF(), gfx::PointF(),
+                       base::TimeTicks::Now(), 0, 0);
+  row_view()
+      ->GetQuickActionButtonForTesting(DownloadCommands::OPEN_WHEN_COMPLETE)
+      ->OnMousePressed(event);
+}
+
 }  // namespace
