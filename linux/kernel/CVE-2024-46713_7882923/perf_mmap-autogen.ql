/**
 * @name linux-7882923f1cb88dc1a17f2bf0c81b1fc80d44db82-perf_mmap
 * @id cpp/linux/7882923f1cb88dc1a17f2bf0c81b1fc80d44db82/perf-mmap
 * @description linux-7882923f1cb88dc1a17f2bf0c81b1fc80d44db82-kernel/events/core.c-perf_mmap CVE-2024-46713
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vrb_6204, EqualityOperation target_3, NotExpr target_4) {
exists(ExprStmt target_0 |
	exists(AssignExpr obj_0 | obj_0=target_0.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getRValue() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="aux_mutex"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vrb_6204
			)
		)
		and obj_0.getLValue().(VariableAccess).getType().hasName("mutex *")
	)
	and exists(BlockStmt obj_3 | obj_3=target_0.getParent() |
		exists(IfStmt obj_4 | obj_4=obj_3.getParent() |
			obj_4.getElse().(BlockStmt).getStmt(8)=target_0
			and obj_4.getCondition()=target_3
		)
	)
	and target_4.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(EqualityOperation target_3, Function func) {
exists(ExprStmt target_1 |
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		obj_0.getTarget().hasName("mutex_lock_nested")
		and obj_0.getArgument(0).(VariableAccess).getType().hasName("mutex *")
		and obj_0.getArgument(1).(Literal).getValue()="0"
	)
	and exists(BlockStmt obj_1 | obj_1=target_1.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getElse().(BlockStmt).getStmt(9)=target_1
			and obj_2.getCondition()=target_3
		)
	)
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(ExprStmt target_6, Function func) {
exists(IfStmt target_2 |
	exists(ExprStmt obj_0 | obj_0=target_2.getThen() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("mutex_unlock")
			and obj_1.getArgument(0).(VariableAccess).getType().hasName("mutex *")
		)
	)
	and target_2.getCondition().(VariableAccess).getType().hasName("mutex *")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_6.getLocation())
)
}

predicate func_3(Function func, EqualityOperation target_3) {
	exists(PointerFieldAccess obj_0 | obj_0=target_3.getLeftOperand() |
		obj_0.getTarget().getName()="vm_pgoff"
		and obj_0.getQualifier().(VariableAccess).getTarget().getType().hasName("vm_area_struct *")
	)
	and target_3.getRightOperand().(Literal).getValue()="0"
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vrb_6204, NotExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget()=vrb_6204
	and target_4.getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_6(Function func, ExprStmt target_6) {
	exists(FunctionCall obj_0 | obj_0=target_6.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="mmap_mutex"
				and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("perf_event *")
			)
		)
		and obj_0.getTarget().hasName("mutex_unlock")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_6
}

from Function func, Variable vrb_6204, EqualityOperation target_3, NotExpr target_4, ExprStmt target_6
where
not func_0(vrb_6204, target_3, target_4)
and not func_1(target_3, func)
and not func_2(target_6, func)
and func_3(func, target_3)
and func_4(vrb_6204, target_4)
and func_6(func, target_6)
and vrb_6204.getType().hasName("perf_buffer *")
and vrb_6204.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
