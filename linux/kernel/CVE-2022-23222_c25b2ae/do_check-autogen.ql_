/**
 * @name linux-c25b2ae136039ffa820c26138ed4a5e5f3ab3841-do_check
 * @id cpp/linux/c25b2ae136039ffa820c26138ed4a5e5f3ab3841/do-check
 * @description linux-c25b2ae136039ffa820c26138ed4a5e5f3ab3841-kernel/bpf/verifier.c-do_check CVE-2022-23222
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vinsn_11270, Parameter venv_11259, ExprStmt target_3, ExprStmt target_4) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("reg_type_str")
	and target_0.getArgument(0).(VariableAccess).getTarget()=venv_11259
	and target_0.getArgument(1).(PointerFieldAccess).getTarget().getName()="type"
	and target_0.getArgument(1).(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("reg_state")
	and target_0.getArgument(1).(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_11259
	and target_0.getArgument(1).(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_0.getArgument(1).(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_11270
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_11259
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="BPF_ST stores into R%d %s is not allowed\n"
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_11270
	and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3) instanceof ArrayExpr
	and target_3.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getArgument(1).(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getArgument(1).(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vinsn_11270, Variable vreg_type_str, Parameter venv_11259, PointerFieldAccess target_1) {
	target_1.getTarget().getName()="type"
	and target_1.getQualifier().(FunctionCall).getTarget().hasName("reg_state")
	and target_1.getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_11259
	and target_1.getQualifier().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_1.getQualifier().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_11270
	and target_1.getParent().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vreg_type_str
}

predicate func_2(Variable vinsn_11270, Variable vreg_type_str, Parameter venv_11259, ArrayExpr target_2) {
	target_2.getArrayBase().(VariableAccess).getTarget()=vreg_type_str
	and target_2.getArrayOffset().(PointerFieldAccess).getTarget().getName()="type"
	and target_2.getArrayOffset().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("reg_state")
	and target_2.getArrayOffset().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_11259
	and target_2.getArrayOffset().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_2.getArrayOffset().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_11270
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_11259
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="BPF_ST stores into R%d %s is not allowed\n"
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_11270
}

predicate func_3(Variable vinsn_11270, Parameter venv_11259, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("verbose")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_11259
	and target_3.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="BPF_ST stores into R%d %s is not allowed\n"
	and target_3.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_3.getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_11270
	and target_3.getExpr().(FunctionCall).getArgument(3) instanceof ArrayExpr
}

predicate func_4(Variable vinsn_11270, Parameter venv_11259, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("check_mem_access")
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=venv_11259
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="insn_idx"
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=venv_11259
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_11270
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(PointerFieldAccess).getTarget().getName()="off"
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_11270
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="code"
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinsn_11270
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(BitwiseAndExpr).getRightOperand().(Literal).getValue()="24"
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(6).(UnaryMinusExpr).getValue()="-1"
}

from Function func, Variable vinsn_11270, Variable vreg_type_str, Parameter venv_11259, PointerFieldAccess target_1, ArrayExpr target_2, ExprStmt target_3, ExprStmt target_4
where
not func_0(vinsn_11270, venv_11259, target_3, target_4)
and func_1(vinsn_11270, vreg_type_str, venv_11259, target_1)
and func_2(vinsn_11270, vreg_type_str, venv_11259, target_2)
and func_3(vinsn_11270, venv_11259, target_3)
and func_4(vinsn_11270, venv_11259, target_4)
and vinsn_11270.getType().hasName("bpf_insn *")
and vreg_type_str.getType() instanceof ArrayType
and venv_11259.getType().hasName("bpf_verifier_env *")
and vinsn_11270.(LocalVariable).getFunction() = func
and not vreg_type_str.getParentScope+() = func
and venv_11259.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
