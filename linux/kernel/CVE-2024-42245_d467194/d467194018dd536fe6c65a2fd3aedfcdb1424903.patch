commit d467194018dd536fe6c65a2fd3aedfcdb1424903
Author: Josh Don <joshdon@google.com>
Date:   Thu Jun 20 14:44:50 2024 -0700

    Revert "sched/fair: Make sure to try to detach at least one movable task"
    
    commit 2feab2492deb2f14f9675dd6388e9e2bf669c27a upstream.
    
    This reverts commit b0defa7ae03ecf91b8bfd10ede430cff12fcbd06.
    
    b0defa7ae03ec changed the load balancing logic to ignore env.max_loop if
    all tasks examined to that point were pinned. The goal of the patch was
    to make it more likely to be able to detach a task buried in a long list
    of pinned tasks. However, this has the unfortunate side effect of
    creating an O(n) iteration in detach_tasks(), as we now must fully
    iterate every task on a cpu if all or most are pinned. Since this load
    balance code is done with rq lock held, and often in softirq context, it
    is very easy to trigger hard lockups. We observed such hard lockups with
    a user who affined O(10k) threads to a single cpu.
    
    When I discussed this with Vincent he initially suggested that we keep
    the limit on the number of tasks to detach, but increase the number of
    tasks we can search. However, after some back and forth on the mailing
    list, he recommended we instead revert the original patch, as it seems
    likely no one was actually getting hit by the original issue.
    
    Fixes: b0defa7ae03e ("sched/fair: Make sure to try to detach at least one movable task")
    Signed-off-by: Josh Don <joshdon@google.com>
    Signed-off-by: Peter Zijlstra (Intel) <peterz@infradead.org>
    Reviewed-by: Vincent Guittot <vincent.guittot@linaro.org>
    Link: https://lore.kernel.org/r/20240620214450.316280-1-joshdon@google.com
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index 0de8354d5ad0..d0851610cf46 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -8479,12 +8479,8 @@ static int detach_tasks(struct lb_env *env)
 			break;
 
 		env->loop++;
-		/*
-		 * We've more or less seen every task there is, call it quits
-		 * unless we haven't found any movable task yet.
-		 */
-		if (env->loop > env->loop_max &&
-		    !(env->flags & LBF_ALL_PINNED))
+		/* We've more or less seen every task there is, call it quits */
+		if (env->loop > env->loop_max)
 			break;
 
 		/* take a breather every nr_migrate tasks */
@@ -10623,9 +10619,7 @@ static int load_balance(int this_cpu, struct rq *this_rq,
 
 		if (env.flags & LBF_NEED_BREAK) {
 			env.flags &= ~LBF_NEED_BREAK;
-			/* Stop if we tried all running tasks */
-			if (env.loop < busiest->nr_running)
-				goto more_balance;
+			goto more_balance;
 		}
 
 		/*
