commit a2ca901d42f0aba55dcc0faf18791db1e62ab11d	a2ca901d42f0aba55dcc0faf18791db1e62ab11d
Author: Will Harris <wfh@chromium.org>
Date:   Thu Feb 16 00:41:58 2023 +0000

    Add fuzzer for GlobalActivityAnalyzer.
    
    BUG=1415328
    
    Change-Id: Ic469e159e7f6aa1295d1668634a00c8e5208617a
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4257668
    Commit-Queue: Will Harris <wfh@chromium.org>
    Reviewed-by: danakj <danakj@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1105991}

diff --git a/base/BUILD.gn b/base/BUILD.gn
index c6c41ff7232ef..878e611223447 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -4641,6 +4641,12 @@ fuzzer_test("base_json_string_escape_fuzzer") {
   deps = [ "//base" ]
 }
 
+fuzzer_test("base_activity_analyzer_fuzzer") {
+  sources = [ "debug/activity_analyzer_fuzzer.cc" ]
+  deps = [ "//base" ]
+  dict = "debug/activity_analyzer_fuzzer.dict"
+}
+
 if (is_mac) {
   protoc_convert("base_mach_port_rendezvous_convert_corpus") {
     sources = [
diff --git a/base/debug/activity_analyzer_fuzzer.cc b/base/debug/activity_analyzer_fuzzer.cc
new file mode 100644
index 0000000000000..a6cb5778c62be
--- /dev/null
+++ b/base/debug/activity_analyzer_fuzzer.cc
@@ -0,0 +1,31 @@
+// Copyright 2023 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/debug/activity_analyzer.h"
+#include "base/logging.h"
+#include "base/metrics/persistent_memory_allocator.h"
+
+struct Environment {
+  Environment() { logging::SetMinLogLevel(logging::LOG_FATAL); }
+};
+
+// Entry point for LibFuzzer.
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
+  static Environment env;
+
+  if (size < 64u) {  // sizeof(base::PersistentMemoryAllocator::SharedMetadata)
+    return 0;
+  }
+
+  std::unique_ptr<base::PersistentMemoryAllocator> allocator =
+      std::make_unique<base::PersistentMemoryAllocator>(
+          const_cast<uint8_t*>(data), size, /*page_size=*/0, /*id=*/0,
+          /*name=*/"",
+          /*read_only=*/true);
+
+  base::debug::GlobalActivityAnalyzer gaa(std::move(allocator));
+  std::ignore = gaa.GetFirstProcess();
+
+  return 0;
+}
diff --git a/base/debug/activity_analyzer_fuzzer.dict b/base/debug/activity_analyzer_fuzzer.dict
new file mode 100644
index 0000000000000..6fa1ecbffffa2
--- /dev/null
+++ b/base/debug/activity_analyzer_fuzzer.dict
@@ -0,0 +1,10 @@
+"\x00\x00\x00\x00"
+"\x00\x00\x00\x00\x00\x00\x00\x00"
+
+kTypeIdActivityTracker = "\xB3\x81\x73\x5D"
+kTypeIdUserDataRecord = "\xDA\xDD\x5E\x61"
+kTypeIdGlobalLogMessage = "\xFA\x34\xF4\x4C"
+kTypeIdProcessDataRecord = "\xDA\xDE\x5E\x61"
+kTypeIdActivityTrackerFree = "\x4C\x7E\x8C\xA2"
+kTypeIdUserDataRecordFree = "\x25\x22\xA1\x9E"
+kTypeIdProcessDataRecordFree  = "\x25\x21\xA1\x9E"
