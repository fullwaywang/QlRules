/**
 * @name linux-0c17d1d2c61936401f4702e1846e2c19b200f958-adjust_scalar_min_max_vals
 * @id cpp/linux/0c17d1d2c61936401f4702e1846e2c19b200f958/adjust-scalar-min-max-vals
 * @description linux-0c17d1d2c61936401f4702e1846e2c19b200f958-kernel/bpf/verifier.c-adjust_scalar_min_max_vals CVE-2017-16996
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vdst_reg_2009, FunctionCall target_0) {
	target_0.getTarget().hasName("coerce_reg_to_32")
	and not target_0.getTarget().hasName("coerce_reg_to_size")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vdst_reg_2009
}

predicate func_1(Parameter vsrc_reg_2010, FunctionCall target_1) {
	target_1.getTarget().hasName("coerce_reg_to_32")
	and not target_1.getTarget().hasName("coerce_reg_to_size")
	and target_1.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vsrc_reg_2010
}

from Function func, Parameter vdst_reg_2009, Parameter vsrc_reg_2010, FunctionCall target_0, FunctionCall target_1
where
func_0(vdst_reg_2009, target_0)
and func_1(vsrc_reg_2010, target_1)
and vdst_reg_2009.getType().hasName("bpf_reg_state *")
and vsrc_reg_2010.getType().hasName("bpf_reg_state")
and vdst_reg_2009.getFunction() = func
and vsrc_reg_2010.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
