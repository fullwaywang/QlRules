/**
 * @name linux-69f42e41256d5a234d3ae0d35fa66dc6d8171846-snd_soc_put_volsw
 * @id cpp/linux/69f42e41256d5a234d3ae0d35fa66dc6d8171846/snd-soc-put-volsw
 * @description linux-69f42e41256d5a234d3ae0d35fa66dc6d8171846-sound/soc/soc-ops.c-snd_soc_put_volsw CVE-2022-48917
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vmin_318, Variable vval_325, RelationalOperation target_5) {
exists(AddExpr target_0 |
	exists(VariableAccess obj_0 | obj_0=target_0.getRightOperand() |
		obj_0.getTarget()=vmin_318
		and obj_0.getLocation().isBefore(target_5.getLesserOperand().(SubExpr).getRightOperand().(VariableAccess).getLocation())
	)
	and target_0.getLeftOperand().(VariableAccess).getTarget()=vval_325
)
}

predicate func_1(Variable vmin_318, Variable vval2_324, ExprStmt target_6, RelationalOperation target_7) {
exists(AddExpr target_1 |
	target_1.getLeftOperand().(VariableAccess).getTarget()=vval2_324
	and target_1.getRightOperand().(VariableAccess).getTarget()=vmin_318
	and target_6.getExpr().(AssignExpr).getRValue().(BitwiseAndExpr).getLeftOperand().(AddExpr).getRightOperand().(VariableAccess).getLocation().isBefore(target_1.getRightOperand().(VariableAccess).getLocation())
	and target_1.getRightOperand().(VariableAccess).getLocation().isBefore(target_7.getLesserOperand().(SubExpr).getRightOperand().(VariableAccess).getLocation())
)
}

predicate func_2(Variable vval_325, VariableAccess target_2) {
	target_2.getTarget()=vval_325
}

predicate func_3(Variable vval2_324, VariableAccess target_3) {
	target_3.getTarget()=vval2_324
}

predicate func_5(Variable vmin_318, Variable vval_325, RelationalOperation target_5) {
	exists(SubExpr obj_0 | obj_0=target_5.getLesserOperand() |
		obj_0.getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
		and obj_0.getRightOperand().(VariableAccess).getTarget()=vmin_318
	)
	and  (target_5 instanceof GTExpr or target_5 instanceof LTExpr)
	and target_5.getGreaterOperand().(VariableAccess).getTarget()=vval_325
}

predicate func_6(Variable vmin_318, Variable vval_325, ExprStmt target_6) {
	exists(AssignExpr obj_0 | obj_0=target_6.getExpr() |
		exists(BitwiseAndExpr obj_1 | obj_1=obj_0.getRValue() |
			exists(AddExpr obj_2 | obj_2=obj_1.getLeftOperand() |
				obj_2.getLeftOperand().(VariableAccess).getTarget()=vval_325
				and obj_2.getRightOperand().(VariableAccess).getTarget()=vmin_318
			)
			and obj_1.getRightOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vval_325
	)
}

predicate func_7(Variable vmin_318, Variable vval2_324, RelationalOperation target_7) {
	exists(SubExpr obj_0 | obj_0=target_7.getLesserOperand() |
		obj_0.getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
		and obj_0.getRightOperand().(VariableAccess).getTarget()=vmin_318
	)
	and  (target_7 instanceof GTExpr or target_7 instanceof LTExpr)
	and target_7.getGreaterOperand().(VariableAccess).getTarget()=vval2_324
}

from Function func, Variable vmin_318, Variable vval2_324, Variable vval_325, VariableAccess target_2, VariableAccess target_3, RelationalOperation target_5, ExprStmt target_6, RelationalOperation target_7
where
not func_0(vmin_318, vval_325, target_5)
and not func_1(vmin_318, vval2_324, target_6, target_7)
and func_2(vval_325, target_2)
and func_3(vval2_324, target_3)
and func_5(vmin_318, vval_325, target_5)
and func_6(vmin_318, vval_325, target_6)
and func_7(vmin_318, vval2_324, target_7)
and vmin_318.getType().hasName("int")
and vval2_324.getType().hasName("unsigned int")
and vval_325.getType().hasName("unsigned int")
and vmin_318.(LocalVariable).getFunction() = func
and vval2_324.(LocalVariable).getFunction() = func
and vval_325.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
