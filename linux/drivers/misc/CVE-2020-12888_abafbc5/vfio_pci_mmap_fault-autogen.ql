/**
 * @name linux-abafbc551fddede3e0a08dee1dcde08fc0eb8476-vfio_pci_mmap_fault
 * @id cpp/linux/abafbc551fddede3e0a08dee1dcde08fc0eb8476/vfio-pci-mmap-fault
 * @description linux-abafbc551fddede3e0a08dee1dcde08fc0eb8476-drivers/vfio/pci/vfio_pci.c-vfio_pci_mmap_fault CVE-2020-12888
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vvma_1347, Variable vvdev_1348, ReturnStmt target_20, FunctionCall target_0) {
	target_0.getTarget().hasName("vfio_pci_add_vma")
	and not target_0.getTarget().hasName("__vfio_pci_add_vma")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vvdev_1348
	and target_0.getArgument(1).(VariableAccess).getTarget()=vvma_1347
	and target_0.getParent().(IfStmt).getThen()=target_20
}

predicate func_1(Variable vvdev_1348, IfStmt target_21, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("mutex_lock_nested")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="vma_lock"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvdev_1348
	and target_1.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_21.getLocation()))
}

predicate func_2(Variable vvdev_1348, IfStmt target_21, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("down_read")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="memory_lock"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvdev_1348
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_21.getLocation()))
}

predicate func_3(Variable vvdev_1348, ReturnStmt target_20) {
exists(NotExpr target_3 |
	target_3.getOperand().(FunctionCall).getTarget().hasName("__vfio_pci_memory_enabled")
	and target_3.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvdev_1348
	and target_3.getParent().(IfStmt).getThen()=target_20)
}

predicate func_4(FunctionCall target_0, Function func) {
exists(ExprStmt target_4 |
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("vm_fault_t")
	and target_4.getExpr().(AssignExpr).getRValue() instanceof EnumConstantAccess
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_4
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_0
	and target_4.getEnclosingFunction() = func)
}

predicate func_5(Variable vvdev_1348, FunctionCall target_0) {
exists(ExprStmt target_5 |
	target_5.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_5.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="vma_lock"
	and target_5.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvdev_1348
	and target_5.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_5
	and target_5.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_0)
}

predicate func_6(FunctionCall target_0, Function func) {
exists(GotoStmt target_6 |
	target_6.getName() ="up_out"
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_6
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_0
	and target_6.getEnclosingFunction() = func)
}

predicate func_7(FunctionCall target_14, Function func) {
exists(ExprStmt target_7 |
	target_7.getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("vm_fault_t")
	and target_7.getExpr().(AssignExpr).getRValue() instanceof EnumConstantAccess
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_7
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_14
	and target_7.getEnclosingFunction() = func)
}

predicate func_8(Variable vvdev_1348, FunctionCall target_14, FunctionCall target_0) {
exists(ExprStmt target_8 |
	target_8.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_8.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="vma_lock"
	and target_8.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvdev_1348
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_8
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_14
	and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_8.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_9(FunctionCall target_14, Function func) {
exists(GotoStmt target_9 |
	target_9.getName() ="up_out"
	and target_9.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_9
	and target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_14
	and target_9.getEnclosingFunction() = func)
}

predicate func_10(Variable vvdev_1348, Function func) {
exists(ExprStmt target_10 |
	target_10.getExpr().(FunctionCall).getTarget().hasName("mutex_unlock")
	and target_10.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="vma_lock"
	and target_10.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvdev_1348
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_10
	and target_10.getFollowingStmt() instanceof ReturnStmt)
}

predicate func_11(Function func) {
exists(IfStmt target_11 |
	target_11.getCondition() instanceof FunctionCall
	and target_11.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("vm_fault_t")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_11
	and target_11.getFollowingStmt() instanceof ReturnStmt)
}

predicate func_12(Variable vvdev_1348, Function func) {
exists(ExprStmt target_12 |
	target_12.getExpr().(FunctionCall).getTarget().hasName("up_read")
	and target_12.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="memory_lock"
	and target_12.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvdev_1348
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_12
	and target_12.getFollowingStmt() instanceof ReturnStmt)
}

predicate func_14(Variable vvma_1347, ReturnStmt target_18, FunctionCall target_14) {
	target_14.getTarget().hasName("remap_pfn_range")
	and target_14.getArgument(0).(VariableAccess).getTarget()=vvma_1347
	and target_14.getArgument(1).(PointerFieldAccess).getTarget().getName()="vm_start"
	and target_14.getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1347
	and target_14.getArgument(2).(PointerFieldAccess).getTarget().getName()="vm_pgoff"
	and target_14.getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1347
	and target_14.getArgument(3).(SubExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="vm_end"
	and target_14.getArgument(3).(SubExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1347
	and target_14.getArgument(3).(SubExpr).getRightOperand().(PointerFieldAccess).getTarget().getName()="vm_start"
	and target_14.getArgument(3).(SubExpr).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1347
	and target_14.getArgument(4).(PointerFieldAccess).getTarget().getName()="vm_page_prot"
	and target_14.getArgument(4).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1347
	and target_14.getParent().(IfStmt).getThen()=target_18
}

predicate func_18(FunctionCall target_14, Function func, ReturnStmt target_18) {
	target_18.getExpr() instanceof EnumConstantAccess
	and target_18.getParent().(IfStmt).getCondition()=target_14
	and target_18.getEnclosingFunction() = func
}

predicate func_19(Function func, ReturnStmt target_19) {
	target_19.getExpr() instanceof EnumConstantAccess
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_19
}

predicate func_20(Function func, ReturnStmt target_20) {
	target_20.getExpr() instanceof EnumConstantAccess
	and target_20.getEnclosingFunction() = func
}

predicate func_21(Function func, IfStmt target_21) {
	target_21.getCondition() instanceof FunctionCall
	and target_21.getThen().(ReturnStmt).getExpr() instanceof EnumConstantAccess
	and target_21.getEnclosingFunction() = func
}

from Function func, Variable vvma_1347, Variable vvdev_1348, FunctionCall target_0, FunctionCall target_14, ReturnStmt target_18, ReturnStmt target_19, ReturnStmt target_20, IfStmt target_21
where
func_0(vvma_1347, vvdev_1348, target_20, target_0)
and not func_1(vvdev_1348, target_21, func)
and not func_2(vvdev_1348, target_21, func)
and not func_3(vvdev_1348, target_20)
and not func_4(target_0, func)
and not func_5(vvdev_1348, target_0)
and not func_6(target_0, func)
and not func_7(target_14, func)
and not func_8(vvdev_1348, target_14, target_0)
and not func_9(target_14, func)
and not func_10(vvdev_1348, func)
and not func_11(func)
and not func_12(vvdev_1348, func)
and func_14(vvma_1347, target_18, target_14)
and func_18(target_14, func, target_18)
and func_19(func, target_19)
and func_20(func, target_20)
and func_21(func, target_21)
and vvma_1347.getType().hasName("vm_area_struct *")
and vvdev_1348.getType().hasName("vfio_pci_device *")
and vvma_1347.(LocalVariable).getFunction() = func
and vvdev_1348.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
