/**
 * @name linux-39173b04abda87872b43c331468a4a14f8f05ce8-ecdh_set_secret
 * @id cpp/linux/39173b04abda87872b43c331468a4a14f8f05ce8/ecdh-set-secret
 * @description linux-39173b04abda87872b43c331468a4a14f8f05ce8-crypto/ecdh.c-ecdh_set_secret CVE-2024-42098
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vctx_29, IfStmt target_1, LogicalOrExpr target_2, Function func) {
exists(ExprStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().getName()="private_key"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vctx_29
		)
		and obj_0.getTarget().hasName("__memset")
		and obj_0.getArgument(1).(Literal).getValue()="0"
		and obj_0.getArgument(2).(SizeofExprOperator).getValue()="64"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getRightOperand().(RelationalOperation).getLesserOperand().(MulExpr).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vctx_29, IfStmt target_1) {
	exists(LogicalOrExpr obj_0 | obj_0=target_1.getCondition() |
		exists(NotExpr obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(ValueFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="key"
				and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("ecdh")
			)
		)
		and exists(NotExpr obj_3 | obj_3=obj_0.getRightOperand() |
			exists(ValueFieldAccess obj_4 | obj_4=obj_3.getOperand() |
				obj_4.getTarget().getName()="key_size"
				and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("ecdh")
			)
		)
	)
	and exists(ReturnStmt obj_5 | obj_5=target_1.getThen() |
		exists(FunctionCall obj_6 | obj_6=obj_5.getExpr() |
			exists(PointerFieldAccess obj_7 | obj_7=obj_6.getArgument(0) |
				obj_7.getTarget().getName()="curve_id"
				and obj_7.getQualifier().(VariableAccess).getTarget()=vctx_29
			)
			and exists(PointerFieldAccess obj_8 | obj_8=obj_6.getArgument(1) |
				obj_8.getTarget().getName()="ndigits"
				and obj_8.getQualifier().(VariableAccess).getTarget()=vctx_29
			)
			and exists(PointerFieldAccess obj_9 | obj_9=obj_6.getArgument(2) |
				obj_9.getTarget().getName()="private_key"
				and obj_9.getQualifier().(VariableAccess).getTarget()=vctx_29
			)
			and obj_6.getTarget().hasName("ecc_gen_privkey")
		)
	)
}

predicate func_2(Variable vctx_29, LogicalOrExpr target_2) {
	exists(RelationalOperation obj_0 | obj_0=target_2.getLeftOperand() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getLesserOperand() |
			obj_1.getTarget().hasName("crypto_ecdh_decode_key")
			and obj_1.getArgument(0).(VariableAccess).getTarget().getType().hasName("const void *")
			and obj_1.getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned int")
			and obj_1.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("ecdh")
		)
		and obj_0.getGreaterOperand().(Literal).getValue()="0"
	)
	and exists(RelationalOperation obj_2 | obj_2=target_2.getRightOperand() |
		exists(ValueFieldAccess obj_3 | obj_3=obj_2.getGreaterOperand() |
			obj_3.getTarget().getName()="key_size"
			and obj_3.getQualifier().(VariableAccess).getTarget().getType().hasName("ecdh")
		)
		and exists(MulExpr obj_4 | obj_4=obj_2.getLesserOperand() |
			exists(SizeofTypeOperator obj_5 | obj_5=obj_4.getLeftOperand() |
				obj_5.getType() instanceof LongType
				and obj_5.getValue()="8"
			)
			and exists(PointerFieldAccess obj_6 | obj_6=obj_4.getRightOperand() |
				obj_6.getTarget().getName()="ndigits"
				and obj_6.getQualifier().(VariableAccess).getTarget()=vctx_29
			)
		)
	)
}

from Function func, Variable vctx_29, IfStmt target_1, LogicalOrExpr target_2
where
not func_0(vctx_29, target_1, target_2, func)
and func_1(vctx_29, target_1)
and func_2(vctx_29, target_2)
and vctx_29.getType().hasName("ecdh_ctx *")
and vctx_29.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
