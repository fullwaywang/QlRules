/**
 * @name chromium-9c66680b649045a5e59d9bac785025639c3f53ed-content__HidService__Create
 * @id cpp/chromium/9c66680b649045a5e59d9bac785025639c3f53ed/contenthidservicecreate
 * @description chromium-9c66680b649045a5e59d9bac785025639c3f53ed-content/browser/hid/hid_service.cc-content__HidService__Create CVE-2023-2462
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vrender_frame_host_168, ExprStmt target_1, FunctionCall target_2, FunctionCall target_3, Function func) {
exists(IfStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getQualifier() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().hasName("GetOutermostMainFrame")
				and obj_2.getQualifier().(VariableAccess).getTarget()=vrender_frame_host_168
			)
			and obj_1.getTarget().hasName("GetLastCommittedOrigin")
		)
		and obj_0.getTarget().hasName("opaque")
	)
	and exists(BlockStmt obj_3 | obj_3=target_0.getThen() |
		exists(ExprStmt obj_4 | obj_4=obj_3.getStmt(0) |
			exists(FunctionCall obj_5 | obj_5=obj_4.getExpr() |
				obj_5.getTarget().hasName("ReportBadMessage")
				and obj_5.getArgument(0).(ConstructorCall).getArgument(0).(StringLiteral).getValue()="WebHID is not allowed from an opaque origin."
			)
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_1(Parameter vrender_frame_host_168, ExprStmt target_1) {
	exists(NewExpr obj_0 | obj_0=target_1.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getAllocatorCall() |
			obj_1.getTarget().hasName("operator new")
			and obj_1.getArgument(0).(ErrorExpr).getType() instanceof LongType
		)
		and exists(ConstructorCall obj_2 | obj_2=obj_0.getInitializer() |
			exists(ConstructorCall obj_3 | obj_3=obj_2.getArgument(0) |
				exists(FunctionCall obj_4 | obj_4=obj_3.getArgument(0) |
					obj_4.getTarget().hasName("make_unique")
					and obj_4.getArgument(0).(VariableAccess).getTarget()=vrender_frame_host_168
				)
			)
			and exists(ConstructorCall obj_5 | obj_5=obj_2.getArgument(2) |
				exists(FunctionCall obj_6 | obj_6=obj_5.getArgument(0) |
					obj_6.getTarget().hasName("move")
					and obj_6.getArgument(0).(VariableAccess).getTarget().getType().hasName("PendingReceiver<HidService>")
				)
			)
			and obj_2.getArgument(1).(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget()=vrender_frame_host_168
		)
	)
}

predicate func_2(Parameter vrender_frame_host_168, FunctionCall target_2) {
	target_2.getTarget().hasName("IsNestedWithinFencedFrame")
	and target_2.getQualifier().(VariableAccess).getTarget()=vrender_frame_host_168
}

predicate func_3(Parameter vrender_frame_host_168, FunctionCall target_3) {
	target_3.getTarget().hasName("make_unique")
	and target_3.getArgument(0).(VariableAccess).getTarget()=vrender_frame_host_168
}

from Function func, Parameter vrender_frame_host_168, ExprStmt target_1, FunctionCall target_2, FunctionCall target_3
where
not func_0(vrender_frame_host_168, target_1, target_2, target_3, func)
and func_1(vrender_frame_host_168, target_1)
and func_2(vrender_frame_host_168, target_2)
and func_3(vrender_frame_host_168, target_3)
and vrender_frame_host_168.getType().hasName("RenderFrameHostImpl *")
and vrender_frame_host_168.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
