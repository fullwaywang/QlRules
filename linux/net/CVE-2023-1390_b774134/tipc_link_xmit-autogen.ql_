/**
 * @name linux-b77413446408fdd256599daf00d5be72b5f3e7c6-tipc_link_xmit
 * @id cpp/linux/b77413446408fdd256599daf00d5be72b5f3e7c6/tipc-link-xmit
 * @description linux-b77413446408fdd256599daf00d5be72b5f3e7c6-net/tipc/link.c-tipc_link_xmit CVE-2023-1390
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, DeclStmt target_0) {
	target_0.getFollowingStmt() instanceof DeclStmt
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vpkt_cnt_1040, IfStmt target_8, RelationalOperation target_10, Function func) {
exists(IfStmt target_1 |
	target_1.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vpkt_cnt_1040
	and target_1.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
	and target_1.getThen().(ReturnStmt).getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_8.getLocation())
	and target_1.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_10.getGreaterOperand().(VariableAccess).getLocation()))
}

predicate func_2(Variable vhdr_1033, IfStmt target_8, FunctionCall target_5, NotExpr target_11, Function func) {
exists(ExprStmt target_2 |
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vhdr_1033
	and target_2.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_8.getLocation())
	and target_5.getArgument(0).(VariableAccess).getLocation().isBefore(target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation())
	and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_11.getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Variable vimp_1041, IfStmt target_12, DeclStmt target_0, NotExpr target_13, Function func) {
exists(ExprStmt target_3 |
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vimp_1041
	and target_3.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
	and target_3.getLocation().isBefore(target_12.getLocation())
	and target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_13.getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation()))
}

predicate func_4(Parameter vlist_1030, FunctionCall target_4) {
	target_4.getTarget().hasName("buf_msg")
	and target_4.getArgument(0).(FunctionCall).getTarget().hasName("skb_peek")
	and target_4.getArgument(0).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vlist_1030
}

predicate func_5(Variable vhdr_1033, FunctionCall target_5) {
	target_5.getTarget().hasName("msg_importance")
	and target_5.getArgument(0).(VariableAccess).getTarget()=vhdr_1033
}

predicate func_6(Function func, Initializer target_6) {
	target_6.getExpr() instanceof FunctionCall
	and target_6.getExpr().getEnclosingFunction() = func
}

predicate func_7(Function func, Initializer target_7) {
	target_7.getExpr() instanceof FunctionCall
	and target_7.getExpr().getEnclosingFunction() = func
}

predicate func_8(Variable vhdr_1033, Parameter vlist_1030, IfStmt target_8) {
	target_8.getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_8.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(FunctionCall).getTarget().hasName("msg_size")
	and target_8.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vhdr_1033
	and target_8.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_8.getCondition().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("printk")
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="4tipc: Too large msg, purging xmit list %d %d %d %d %d!\n"
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(FunctionCall).getTarget().hasName("skb_queue_len")
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vlist_1030
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(FunctionCall).getTarget().hasName("msg_user")
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vhdr_1033
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(3).(FunctionCall).getTarget().hasName("msg_type")
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(3).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vhdr_1033
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(4).(FunctionCall).getTarget().hasName("msg_size")
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(4).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vhdr_1033
	and target_8.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(5).(VariableAccess).getTarget().getType().hasName("unsigned int")
}

predicate func_10(Variable vpkt_cnt_1040, RelationalOperation target_10) {
	 (target_10 instanceof GTExpr or target_10 instanceof LTExpr)
	and target_10.getGreaterOperand().(VariableAccess).getTarget()=vpkt_cnt_1040
	and target_10.getLesserOperand().(Literal).getValue()="1"
}

predicate func_11(Variable vhdr_1033, NotExpr target_11) {
	target_11.getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(FunctionCall).getTarget().hasName("msg_size")
	and target_11.getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vhdr_1033
	and target_11.getOperand().(NotExpr).getOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
}

predicate func_12(Variable vimp_1041, IfStmt target_12) {
	target_12.getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_12.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getTarget().getName()="len"
	and target_12.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(RelationalOperation).getLesserOperand().(ValueFieldAccess).getTarget().getName()="limit"
	and target_12.getCondition().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_12.getThen().(BlockStmt).getStmt(0).(IfStmt).getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vimp_1041
	and target_12.getThen().(BlockStmt).getStmt(0).(IfStmt).getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="4"
	and target_12.getThen().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("printk")
	and target_12.getThen().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="4tipc: %s<%s>, link overflow"
	and target_12.getThen().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("const char *")
	and target_12.getThen().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="name"
	and target_12.getThen().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-105"
}

predicate func_13(Variable vimp_1041, NotExpr target_13) {
	target_13.getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getTarget().getName()="len"
	and target_13.getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="backlog"
	and target_13.getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("tipc_link *")
	and target_13.getOperand().(NotExpr).getOperand().(RelationalOperation).getGreaterOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vimp_1041
	and target_13.getOperand().(NotExpr).getOperand().(RelationalOperation).getLesserOperand().(ValueFieldAccess).getTarget().getName()="limit"
	and target_13.getOperand().(NotExpr).getOperand().(RelationalOperation).getLesserOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="backlog"
	and target_13.getOperand().(NotExpr).getOperand().(RelationalOperation).getLesserOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("tipc_link *")
	and target_13.getOperand().(NotExpr).getOperand().(RelationalOperation).getLesserOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vimp_1041
}

from Function func, Variable vhdr_1033, Variable vpkt_cnt_1040, Variable vimp_1041, Parameter vlist_1030, DeclStmt target_0, FunctionCall target_4, FunctionCall target_5, Initializer target_6, Initializer target_7, IfStmt target_8, RelationalOperation target_10, NotExpr target_11, IfStmt target_12, NotExpr target_13
where
func_0(func, target_0)
and not func_1(vpkt_cnt_1040, target_8, target_10, func)
and not func_2(vhdr_1033, target_8, target_5, target_11, func)
and not func_3(vimp_1041, target_12, target_0, target_13, func)
and func_4(vlist_1030, target_4)
and func_5(vhdr_1033, target_5)
and func_6(func, target_6)
and func_7(func, target_7)
and func_8(vhdr_1033, vlist_1030, target_8)
and func_10(vpkt_cnt_1040, target_10)
and func_11(vhdr_1033, target_11)
and func_12(vimp_1041, target_12)
and func_13(vimp_1041, target_13)
and vhdr_1033.getType().hasName("tipc_msg *")
and vpkt_cnt_1040.getType().hasName("int")
and vimp_1041.getType().hasName("int")
and vlist_1030.getType().hasName("sk_buff_head *")
and vhdr_1033.(LocalVariable).getFunction() = func
and vpkt_cnt_1040.(LocalVariable).getFunction() = func
and vimp_1041.(LocalVariable).getFunction() = func
and vlist_1030.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
