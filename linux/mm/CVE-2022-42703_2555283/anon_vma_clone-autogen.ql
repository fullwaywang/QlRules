/**
 * @name linux-2555283eb40df89945557273121e9393ef9b542b-anon_vma_clone
 * @id cpp/linux/2555283eb40df89945557273121e9393ef9b542b/anon-vma-clone
 * @description linux-2555283eb40df89945557273121e9393ef9b542b-mm/rmap.c-anon_vma_clone CVE-2022-42703
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vanon_vma_284, ExprStmt target_9) {
exists(PointerFieldAccess target_0 |
	target_0.getTarget().getName()="num_children"
	and target_0.getQualifier().(VariableAccess).getTarget()=vanon_vma_284
	and target_0.getQualifier().(VariableAccess).getLocation().isBefore(target_9.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation()))
}

predicate func_1(Parameter vdst_278, Parameter vsrc_278, Variable vanon_vma_284, ExprStmt target_9) {
exists(EqualityOperation target_1 |
	target_1.getLeftOperand().(PointerFieldAccess).getTarget().getName()="num_active_vmas"
	and target_1.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vanon_vma_284
	and target_1.getRightOperand().(Literal).getValue()="0"
	and target_1.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="anon_vma"
	and target_1.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_278
	and target_1.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(PointerFieldAccess).getTarget().getName()="anon_vma"
	and target_1.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrc_278
	and target_1.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand() instanceof EqualityOperation
	and target_1.getParent().(LogicalAndExpr).getRightOperand().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getTarget().getName()="degree"
	and target_1.getParent().(LogicalAndExpr).getRightOperand().(RelationalOperation).getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vanon_vma_284
	and target_1.getParent().(LogicalAndExpr).getRightOperand().(RelationalOperation).getGreaterOperand().(Literal).getValue()="2"
	and target_1.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_9)
}

predicate func_2(Parameter vdst_278, ExprStmt target_10) {
exists(PostfixIncrExpr target_2 |
	target_2.getOperand().(PointerFieldAccess).getTarget().getName()="num_active_vmas"
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="anon_vma"
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_278
	and target_2.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_10.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_3(Parameter vdst_278, PointerFieldAccess target_3) {
	target_3.getTarget().getName()="anon_vma"
	and target_3.getQualifier().(VariableAccess).getTarget()=vdst_278
}

predicate func_4(Variable vanon_vma_284, VariableAccess target_4) {
	target_4.getTarget()=vanon_vma_284
}

predicate func_5(Variable vanon_vma_284, VariableAccess target_5) {
	target_5.getTarget()=vanon_vma_284
}

predicate func_6(Parameter vsrc_278, Variable vanon_vma_284, EqualityOperation target_6) {
	target_6.getLeftOperand().(VariableAccess).getTarget()=vanon_vma_284
	and target_6.getRightOperand().(PointerFieldAccess).getTarget().getName()="anon_vma"
	and target_6.getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrc_278
}

predicate func_7(Variable vanon_vma_284, PointerFieldAccess target_7) {
	target_7.getTarget().getName()="degree"
	and target_7.getQualifier().(VariableAccess).getTarget()=vanon_vma_284
}

predicate func_8(Parameter vdst_278, PostfixIncrExpr target_8) {
	target_8.getOperand().(PointerFieldAccess).getTarget().getName()="degree"
	and target_8.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="anon_vma"
	and target_8.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_278
}

predicate func_9(Parameter vdst_278, Variable vanon_vma_284, ExprStmt target_9) {
	target_9.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="anon_vma"
	and target_9.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_278
	and target_9.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vanon_vma_284
}

predicate func_10(Parameter vdst_278, ExprStmt target_10) {
	target_10.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="anon_vma"
	and target_10.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_278
	and target_10.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

from Function func, Parameter vdst_278, Parameter vsrc_278, Variable vanon_vma_284, PointerFieldAccess target_3, VariableAccess target_4, VariableAccess target_5, EqualityOperation target_6, PointerFieldAccess target_7, PostfixIncrExpr target_8, ExprStmt target_9, ExprStmt target_10
where
not func_0(vanon_vma_284, target_9)
and not func_1(vdst_278, vsrc_278, vanon_vma_284, target_9)
and not func_2(vdst_278, target_10)
and func_3(vdst_278, target_3)
and func_4(vanon_vma_284, target_4)
and func_5(vanon_vma_284, target_5)
and func_6(vsrc_278, vanon_vma_284, target_6)
and func_7(vanon_vma_284, target_7)
and func_8(vdst_278, target_8)
and func_9(vdst_278, vanon_vma_284, target_9)
and func_10(vdst_278, target_10)
and vdst_278.getType().hasName("vm_area_struct *")
and vsrc_278.getType().hasName("vm_area_struct *")
and vanon_vma_284.getType().hasName("anon_vma *")
and vdst_278.getFunction() = func
and vsrc_278.getFunction() = func
and vanon_vma_284.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
