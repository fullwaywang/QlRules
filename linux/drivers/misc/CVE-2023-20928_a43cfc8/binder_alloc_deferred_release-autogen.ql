/**
 * @name linux-a43cfc87caaf46710c8027a8c23b8a55f1078f19-binder_alloc_deferred_release
 * @id cpp/linux/a43cfc87caaf46710c8027a8c23b8a55f1078f19/binder-alloc-deferred-release
 * @description linux-a43cfc87caaf46710c8027a8c23b8a55f1078f19-drivers/android/binder_alloc.c-binder_alloc_deferred_release CVE-2023-20928
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter valloc_812, NotExpr target_3) {
exists(LogicalAndExpr target_0 |
	target_0.getLeftOperand().(PointerFieldAccess).getTarget().getName()="vma_addr"
	and target_0.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=valloc_812
	and target_0.getRightOperand().(FunctionCall).getTarget().hasName("vma_lookup")
	and target_0.getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="vma_vm_mm"
	and target_0.getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=valloc_812
	and target_0.getRightOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="vma_addr"
	and target_0.getRightOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=valloc_812
	and target_0.getParent().(NotExpr).getParent().(NotExpr).getParent().(FunctionCall).getParent().(IfStmt).getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_0.getParent().(NotExpr).getParent().(NotExpr).getParent().(FunctionCall).getParent().(IfStmt).getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="vma"
	and target_0.getParent().(NotExpr).getParent().(NotExpr).getParent().(FunctionCall).getParent().(IfStmt).getCondition().(FunctionCall).getArgument(1) instanceof Literal
	and target_0.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Parameter valloc_812, VariableAccess target_1) {
	target_1.getTarget()=valloc_812
	and target_1.getParent().(PointerFieldAccess).getParent().(NotExpr).getParent().(NotExpr).getParent().(FunctionCall).getParent().(IfStmt).getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_1.getParent().(PointerFieldAccess).getParent().(NotExpr).getParent().(NotExpr).getParent().(FunctionCall).getParent().(IfStmt).getCondition().(FunctionCall).getArgument(1) instanceof Literal
}

predicate func_2(Parameter valloc_812, PointerFieldAccess target_2) {
	target_2.getTarget().getName()="vma"
	and target_2.getQualifier().(VariableAccess).getTarget()=valloc_812
}

predicate func_3(Parameter valloc_812, NotExpr target_3) {
	target_3.getOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="vma"
	and target_3.getOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=valloc_812
}

from Function func, Parameter valloc_812, VariableAccess target_1, PointerFieldAccess target_2, NotExpr target_3
where
not func_0(valloc_812, target_3)
and func_1(valloc_812, target_1)
and func_2(valloc_812, target_2)
and func_3(valloc_812, target_3)
and valloc_812.getType().hasName("binder_alloc *")
and valloc_812.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
