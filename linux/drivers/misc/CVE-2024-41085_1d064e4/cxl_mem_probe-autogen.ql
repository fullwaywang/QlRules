/**
 * @name linux-1d064e4fbebcf5b18dc10c1f3973487eb163b600-cxl_mem_probe
 * @id cpp/linux/1d064e4fbebcf5b18dc10c1f3973487eb163b600/cxl-mem-probe
 * @description linux-1d064e4fbebcf5b18dc10c1f3973487eb163b600-drivers/cxl/mem.c-cxl_mem_probe CVE-2024-41085
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vcxlmd_108, Variable vcxlds_110, Variable vrc_115, IfStmt target_6, IfStmt target_0) {
	exists(LogicalAndExpr obj_0 | obj_0=target_0.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(AddressOfExpr obj_2 | obj_2=obj_1.getArgument(0) |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getOperand() |
					obj_3.getTarget().getName()="pmem_res"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vcxlds_110
				)
			)
			and obj_1.getTarget().hasName("resource_size")
		)
		and obj_0.getRightOperand().(Literal).getValue()="1"
	)
	and exists(BlockStmt obj_4 | obj_4=target_0.getThen() |
		exists(ExprStmt obj_5 | obj_5=obj_4.getStmt(0) |
			exists(AssignExpr obj_6 | obj_6=obj_5.getExpr() |
				exists(FunctionCall obj_7 | obj_7=obj_6.getRValue() |
					obj_7.getTarget().hasName("devm_cxl_add_nvdimm")
					and obj_7.getArgument(0).(VariableAccess).getTarget()=vcxlmd_108
				)
				and obj_6.getLValue().(VariableAccess).getTarget()=vrc_115
			)
		)
		and exists(IfStmt obj_8 | obj_8=obj_4.getStmt(1) |
			obj_8.getCondition() instanceof EqualityOperation
			and obj_8.getElse() instanceof ReturnStmt
		)
	)
	and target_6.getLocation().isBefore(target_0.getLocation())
}

predicate func_3(Parameter vdev_106, EqualityOperation target_4, ExprStmt target_7, FunctionCall target_8) {
exists(IfStmt target_3 |
	exists(ExprStmt obj_0 | obj_0=target_3.getThen() |
		exists(StmtExpr obj_1 | obj_1=obj_0.getExpr() |
			exists(BlockStmt obj_2 | obj_2=obj_1.getStmt() |
				exists(ExprStmt obj_3 | obj_3=obj_2.getStmt(1) |
					exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getTarget().hasName("_dev_info")
						and obj_4.getArgument(0).(VariableAccess).getTarget()=vdev_106
						and obj_4.getArgument(1).(StringLiteral).getValue()="PMEM disabled by platform\n"
					)
				)
				and obj_2.getStmt(0).(DoStmt).getCondition() instanceof Literal
			)
		)
	)
	and exists(BlockStmt obj_5 | obj_5=target_3.getParent() |
		exists(IfStmt obj_6 | obj_6=obj_5.getParent() |
			obj_6.getThen().(BlockStmt).getStmt(0)=target_3
			and obj_6.getCondition()=target_4
		)
	)
	and target_3.getCondition() instanceof EqualityOperation
	and target_7.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getThen().(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_3.getThen().(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_8.getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_4(Variable vrc_115, ExprStmt target_9, EqualityOperation target_4) {
	target_4.getLeftOperand().(VariableAccess).getTarget()=vrc_115
	and target_4.getRightOperand().(UnaryMinusExpr).getValue()="-19"
	and target_4.getParent().(IfStmt).getThen()=target_9
}

predicate func_5(Variable vrc_115, EqualityOperation target_4, ReturnStmt target_5) {
	target_5.getExpr().(VariableAccess).getTarget()=vrc_115
	and target_5.getParent().(IfStmt).getCondition()=target_4
}

predicate func_6(Variable vrc_115, Function func, IfStmt target_6) {
	target_6.getCondition().(VariableAccess).getTarget()=vrc_115
	and target_6.getThen().(ReturnStmt).getExpr().(VariableAccess).getTarget()=vrc_115
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_6
}

predicate func_7(Parameter vdev_106, ExprStmt target_7) {
	exists(FunctionCall obj_0 | obj_0=target_7.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getArgument(2) |
			obj_1.getTarget().hasName("dev_name")
			and obj_1.getArgument(0).(VariableAccess).getTarget().getType().hasName("device *")
		)
		and obj_0.getTarget().hasName("_dev_err")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vdev_106
		and obj_0.getArgument(1).(StringLiteral).getValue()="CXL port topology %s not enabled\n"
	)
}

predicate func_8(Parameter vdev_106, FunctionCall target_8) {
	target_8.getTarget().hasName("__devm_add_action_or_reset")
	and target_8.getArgument(0).(VariableAccess).getTarget()=vdev_106
	and target_8.getArgument(2).(Literal).getValue()="0"
	and target_8.getArgument(3).(StringLiteral).getValue()="enable_suspend"
}

predicate func_9(Parameter vdev_106, ExprStmt target_9) {
	exists(StmtExpr obj_0 | obj_0=target_9.getExpr() |
		exists(BlockStmt obj_1 | obj_1=obj_0.getStmt() |
			exists(ExprStmt obj_2 | obj_2=obj_1.getStmt(1) |
				exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
					obj_3.getTarget().hasName("_dev_info")
					and obj_3.getArgument(0).(VariableAccess).getTarget()=vdev_106
					and obj_3.getArgument(1).(StringLiteral).getValue()="PMEM disabled by platform\n"
				)
			)
			and obj_1.getStmt(0).(DoStmt).getCondition() instanceof Literal
		)
	)
}

from Function func, Variable vcxlmd_108, Variable vcxlds_110, Variable vrc_115, Parameter vdev_106, IfStmt target_0, EqualityOperation target_4, ReturnStmt target_5, IfStmt target_6, ExprStmt target_7, FunctionCall target_8, ExprStmt target_9
where
func_0(vcxlmd_108, vcxlds_110, vrc_115, target_6, target_0)
and not func_3(vdev_106, target_4, target_7, target_8)
and func_4(vrc_115, target_9, target_4)
and func_5(vrc_115, target_4, target_5)
and func_6(vrc_115, func, target_6)
and func_7(vdev_106, target_7)
and func_8(vdev_106, target_8)
and func_9(vdev_106, target_9)
and vcxlmd_108.getType().hasName("cxl_memdev *")
and vcxlds_110.getType().hasName("cxl_dev_state *")
and vrc_115.getType().hasName("int")
and vdev_106.getType().hasName("device *")
and vcxlmd_108.(LocalVariable).getFunction() = func
and vcxlds_110.(LocalVariable).getFunction() = func
and vrc_115.(LocalVariable).getFunction() = func
and vdev_106.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
