/**
 * @name linux-07d981ad4cf1e78361c6db1c28ee5ba105f96cc1-check_online_cpus
 * @id cpp/linux/07d981ad4cf1e78361c6db1c28ee5ba105f96cc1/check-online-cpus
 * @description linux-07d981ad4cf1e78361c6db1c28ee5ba105f96cc1-arch/x86/kernel/cpu/microcode/core.c-check_online_cpus CVE-2018-3620
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ReturnStmt target_8, Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("cpumask_weight")
	and not target_0.getTarget().hasName("cpumask_next")
	and target_0.getArgument(0) instanceof AddressOfExpr
	and target_0.getParent().(EQExpr).getRightOperand() instanceof FunctionCall
	and target_0.getParent().(EQExpr).getParent().(IfStmt).getThen()=target_8
	and target_0.getEnclosingFunction() = func
}

predicate func_1(IfStmt target_10, Function func) {
exists(ForStmt target_1 |
	target_1.getInitialization().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("unsigned int")
	and target_1.getInitialization().(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="4294967295"
	and target_1.getCondition().(CommaExpr).getLeftOperand().(AssignExpr).getLValue().(VariableAccess).getType().hasName("unsigned int")
	and target_1.getCondition().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("cpumask_next")
	and target_1.getCondition().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("unsigned int")
	and target_1.getCondition().(CommaExpr).getLeftOperand().(AssignExpr).getRValue().(FunctionCall).getArgument(1) instanceof AddressOfExpr
	and target_1.getCondition().(CommaExpr).getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getType().hasName("unsigned int")
	and target_1.getCondition().(CommaExpr).getRightOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getType().hasName("unsigned int")
	and target_1.getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getLeftOperand().(FunctionCall).getTarget().hasName("topology_is_primary_thread")
	and target_1.getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("unsigned int")
	and target_1.getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("cpumask_test_cpu")
	and target_1.getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("unsigned int")
	and target_1.getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1) instanceof AddressOfExpr
	and target_1.getStmt().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(0) instanceof ExprStmt
	and target_1.getStmt().(BlockStmt).getStmt(0).(IfStmt).getThen().(BlockStmt).getStmt(1) instanceof ReturnStmt
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_10.getLocation()))
}

/*predicate func_3(ReturnStmt target_8, Function func) {
exists(LogicalAndExpr target_3 |
	target_3.getLeftOperand().(FunctionCall).getTarget().hasName("topology_is_primary_thread")
	and target_3.getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("unsigned int")
	and target_3.getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("cpumask_test_cpu")
	and target_3.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("unsigned int")
	and target_3.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1) instanceof AddressOfExpr
	and target_3.getParent().(IfStmt).getThen()=target_8
	and target_3.getEnclosingFunction() = func)
}

*/
predicate func_4(Function func, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("printk")
	and target_4.getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="3microcode: Not all CPUs online, aborting microcode update.\n"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
}

predicate func_5(Function func, ReturnStmt target_5) {
	target_5.getExpr().(UnaryMinusExpr).getValue()="-22"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

predicate func_6(Variable v__cpu_online_mask, AddressOfExpr target_6) {
	target_6.getOperand().(VariableAccess).getTarget()=v__cpu_online_mask
	and target_6.getParent().(FunctionCall).getParent().(EQExpr).getLeftOperand() instanceof FunctionCall
}

predicate func_7(Variable v__cpu_present_mask, AddressOfExpr target_7) {
	target_7.getOperand().(VariableAccess).getTarget()=v__cpu_present_mask
	and target_7.getParent().(FunctionCall).getParent().(EQExpr).getRightOperand() instanceof FunctionCall
}

predicate func_8(EqualityOperation target_9, Function func, ReturnStmt target_8) {
	target_8.getExpr().(Literal).getValue()="0"
	and target_8.getParent().(IfStmt).getCondition()=target_9
	and target_8.getEnclosingFunction() = func
}

predicate func_9(ReturnStmt target_8, Function func, EqualityOperation target_9) {
	target_9.getLeftOperand() instanceof FunctionCall
	and target_9.getRightOperand().(FunctionCall).getTarget().hasName("cpumask_weight")
	and target_9.getRightOperand().(FunctionCall).getArgument(0) instanceof AddressOfExpr
	and target_9.getParent().(IfStmt).getThen()=target_8
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Function func, IfStmt target_10) {
	target_10.getCondition() instanceof EqualityOperation
	and target_10.getThen() instanceof ReturnStmt
	and target_10.getEnclosingFunction() = func
}

from Function func, Variable v__cpu_online_mask, Variable v__cpu_present_mask, FunctionCall target_0, ExprStmt target_4, ReturnStmt target_5, AddressOfExpr target_6, AddressOfExpr target_7, ReturnStmt target_8, EqualityOperation target_9, IfStmt target_10
where
func_0(target_8, func, target_0)
and not func_1(target_10, func)
and func_4(func, target_4)
and func_5(func, target_5)
and func_6(v__cpu_online_mask, target_6)
and func_7(v__cpu_present_mask, target_7)
and func_8(target_9, func, target_8)
and func_9(target_8, func, target_9)
and func_10(func, target_10)
and v__cpu_online_mask.getType().hasName("cpumask")
and v__cpu_present_mask.getType().hasName("cpumask")
and not v__cpu_online_mask.getParentScope+() = func
and not v__cpu_present_mask.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
