/**
 * @name linux-74b426bea4f7e3b081add2b88d4fba16d3af7ab6-svm_set_nested_state
 * @id cpp/linux/74b426bea4f7e3b081add2b88d4fba16d3af7ab6/svm-set-nested-state
 * @description linux-74b426bea4f7e3b081add2b88d4fba16d3af7ab6-arch/x86/kvm/svm/nested.c-svm_set_nested_state CVE-2022-48793
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsvm_1282, Variable vret_1288, Parameter vvcpu_1278, IfStmt target_2, ExprStmt target_0) {
	exists(AssignExpr obj_0 | obj_0=target_0.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			exists(AddressOfExpr obj_2 | obj_2=obj_1.getArgument(0) |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getOperand() |
					obj_3.getTarget().getName()="vcpu"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vsvm_1282
				)
			)
			and exists(ValueFieldAccess obj_4 | obj_4=obj_1.getArgument(1) |
				exists(PointerFieldAccess obj_5 | obj_5=obj_4.getQualifier() |
					obj_5.getTarget().getName()="arch"
					and obj_5.getQualifier().(VariableAccess).getTarget()=vvcpu_1278
				)
				and obj_4.getTarget().getName()="cr3"
			)
			and exists(FunctionCall obj_6 | obj_6=obj_1.getArgument(2) |
				obj_6.getTarget().hasName("nested_npt_enabled")
				and obj_6.getArgument(0).(VariableAccess).getTarget()=vsvm_1282
			)
			and obj_1.getTarget().hasName("nested_svm_load_cr3")
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vret_1288
	)
	and target_0.getLocation().isBefore(target_2.getLocation())
}

predicate func_1(IfStmt target_2, Function func, IfStmt target_1) {
	exists(StmtExpr obj_0 | obj_0=target_1.getCondition() |
		exists(BlockStmt obj_1 | obj_1=obj_0.getStmt() |
			exists(IfStmt obj_2 | obj_2=obj_1.getStmt(1) |
				exists(FunctionCall obj_3 | obj_3=obj_2.getCondition() |
					obj_3.getTarget().hasName("__builtin_expect")
					and obj_3.getArgument(1) instanceof Literal
				)
				and obj_2.getThen().(DoStmt).getCondition() instanceof Literal
			)
			and exists(ExprStmt obj_4 | obj_4=obj_1.getStmt(2) |
				exists(FunctionCall obj_5 | obj_5=obj_4.getExpr() |
					obj_5.getTarget().hasName("__builtin_expect")
					and obj_5.getArgument(1) instanceof Literal
				)
			)
		)
	)
	and target_1.getThen().(GotoStmt).getName() ="out_free"
	and target_1.getLocation().isBefore(target_2.getLocation())
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vsvm_1282, Parameter vvcpu_1278, IfStmt target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getCondition() |
		obj_0.getTarget().hasName("is_guest_mode")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vvcpu_1278
	)
	and exists(ExprStmt obj_1 | obj_1=target_2.getThen() |
		exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
			obj_2.getTarget().hasName("svm_leave_nested")
			and obj_2.getArgument(0).(VariableAccess).getTarget()=vvcpu_1278
		)
	)
	and exists(ExprStmt obj_3 | obj_3=target_2.getElse() |
		exists(AssignExpr obj_4 | obj_4=obj_3.getExpr() |
			exists(PointerFieldAccess obj_5 | obj_5=obj_4.getLValue() |
				exists(ValueFieldAccess obj_6 | obj_6=obj_5.getQualifier() |
					exists(ValueFieldAccess obj_7 | obj_7=obj_6.getQualifier() |
						obj_7.getTarget().getName()="vmcb02"
						and obj_7.getQualifier().(PointerFieldAccess).getTarget().getName()="nested"
					)
					and obj_6.getTarget().getName()="ptr"
				)
				and obj_5.getTarget().getName()="save"
			)
			and exists(PointerFieldAccess obj_8 | obj_8=obj_4.getRValue() |
				exists(ValueFieldAccess obj_9 | obj_9=obj_8.getQualifier() |
					exists(PointerFieldAccess obj_10 | obj_10=obj_9.getQualifier() |
						obj_10.getTarget().getName()="vmcb01"
						and obj_10.getQualifier().(VariableAccess).getTarget()=vsvm_1282
					)
					and obj_9.getTarget().getName()="ptr"
				)
				and obj_8.getTarget().getName()="save"
			)
		)
	)
}

from Function func, Variable vsvm_1282, Variable vret_1288, Parameter vvcpu_1278, ExprStmt target_0, IfStmt target_1, IfStmt target_2
where
func_0(vsvm_1282, vret_1288, vvcpu_1278, target_2, target_0)
and func_1(target_2, func, target_1)
and func_2(vsvm_1282, vvcpu_1278, target_2)
and vsvm_1282.getType().hasName("vcpu_svm *")
and vret_1288.getType().hasName("int")
and vvcpu_1278.getType().hasName("kvm_vcpu *")
and vsvm_1282.(LocalVariable).getFunction() = func
and vret_1288.(LocalVariable).getFunction() = func
and vvcpu_1278.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
