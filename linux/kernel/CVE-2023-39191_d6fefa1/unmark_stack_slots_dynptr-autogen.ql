/**
 * @name linux-d6fefa1105dacc8a742cdcf2f4bfb501c9e61349-unmark_stack_slots_dynptr
 * @id cpp/linux/d6fefa1105dacc8a742cdcf2f4bfb501c9e61349/unmark-stack-slots-dynptr
 * @description linux-d6fefa1105dacc8a742cdcf2f4bfb501c9e61349-kernel/bpf/verifier.c-unmark_stack_slots_dynptr CVE-2023-39191
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vstate_789, Variable vspi_790, AddressOfExpr target_2, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getTarget().getName()="live"
	and target_0.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="spilled_ptr"
	and target_0.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="stack"
	and target_0.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vstate_789
	and target_0.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vspi_790
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getFollowingStmt() instanceof ReturnStmt
	and target_2.getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vstate_789, Variable vspi_790, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getTarget().getName()="live"
	and target_1.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="spilled_ptr"
	and target_1.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="stack"
	and target_1.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vstate_789
	and target_1.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(SubExpr).getLeftOperand().(VariableAccess).getTarget()=vspi_790
	and target_1.getExpr().(AssignOrExpr).getLValue().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(SubExpr).getRightOperand().(Literal).getValue()="1"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getFollowingStmt() instanceof ReturnStmt)
}

predicate func_2(Variable vstate_789, Variable vspi_790, AddressOfExpr target_2) {
	target_2.getOperand().(ValueFieldAccess).getTarget().getName()="spilled_ptr"
	and target_2.getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="stack"
	and target_2.getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vstate_789
	and target_2.getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(SubExpr).getLeftOperand().(VariableAccess).getTarget()=vspi_790
	and target_2.getOperand().(ValueFieldAccess).getQualifier().(ArrayExpr).getArrayOffset().(SubExpr).getRightOperand().(Literal).getValue()="1"
}

from Function func, Variable vstate_789, Variable vspi_790, AddressOfExpr target_2
where
not func_0(vstate_789, vspi_790, target_2, func)
and not func_1(vstate_789, vspi_790, func)
and func_2(vstate_789, vspi_790, target_2)
and vstate_789.getType().hasName("bpf_func_state *")
and vspi_790.getType().hasName("int")
and vstate_789.(LocalVariable).getFunction() = func
and vspi_790.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
