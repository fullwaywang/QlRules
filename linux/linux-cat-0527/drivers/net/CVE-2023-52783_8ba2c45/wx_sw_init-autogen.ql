/**
 * @name linux-8ba2c459668cfe2aaacc5ebcd35b4b9ef8643013-wx_sw_init
 * @id cpp/linux/8ba2c459668cfe2aaacc5ebcd35b4b9ef8643013/wx-sw-init
 * @description linux-8ba2c459668cfe2aaacc5ebcd35b4b9ef8643013-drivers/net/ethernet/wangxun/libwx/wx_hw.c-wx_sw_init CVE-2023-52783
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable verr_1757, ExprStmt target_2, ReturnStmt target_3) {
exists(RelationalOperation target_0 |
	 (target_0 instanceof GTExpr or target_0 instanceof LTExpr)
	and target_0.getLesserOperand().(VariableAccess).getTarget()=verr_1757
	and target_0.getGreaterOperand().(Literal).getValue()="0"
	and target_0.getParent().(IfStmt).getThen()=target_2
	and target_0.getLesserOperand().(VariableAccess).getLocation().isBefore(target_3.getExpr().(VariableAccess).getLocation()))
}

predicate func_1(NotExpr target_5, Function func) {
exists(ExprStmt target_1 |
	target_1.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(DoStmt).getCondition() instanceof Literal
	and target_1.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_dev_err")
	and target_1.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="dev"
	and target_1.getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="read of internal subsystem device id failed\n"
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_1.getEnclosingFunction() = func)
}

predicate func_2(Parameter vwx_1753, Variable vssid_1756, NotExpr target_5, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="subsystem_device_id"
	and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vwx_1753
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("__builtin_bswap16")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vssid_1756
	and target_2.getParent().(IfStmt).getCondition()=target_5
}

predicate func_3(Variable verr_1757, EqualityOperation target_6, ReturnStmt target_3) {
	target_3.getExpr().(VariableAccess).getTarget()=verr_1757
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_4(Variable verr_1757, ExprStmt target_2, VariableAccess target_4) {
	target_4.getTarget()=verr_1757
	and target_4.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_2
}

predicate func_5(Variable verr_1757, ExprStmt target_2, NotExpr target_5) {
	target_5.getOperand().(VariableAccess).getTarget()=verr_1757
	and target_5.getParent().(IfStmt).getThen()=target_2
}

predicate func_6(Parameter vwx_1753, EqualityOperation target_6) {
	target_6.getLeftOperand().(PointerFieldAccess).getTarget().getName()="oem_svid"
	and target_6.getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vwx_1753
	and target_6.getRightOperand().(Literal).getValue()="32904"
}

from Function func, Parameter vwx_1753, Variable vssid_1756, Variable verr_1757, ExprStmt target_2, ReturnStmt target_3, VariableAccess target_4, NotExpr target_5, EqualityOperation target_6
where
not func_0(verr_1757, target_2, target_3)
and not func_1(target_5, func)
and func_2(vwx_1753, vssid_1756, target_5, target_2)
and func_3(verr_1757, target_6, target_3)
and func_4(verr_1757, target_2, target_4)
and func_5(verr_1757, target_2, target_5)
and func_6(vwx_1753, target_6)
and vwx_1753.getType().hasName("wx *")
and vssid_1756.getType().hasName("u32")
and verr_1757.getType().hasName("int")
and vwx_1753.getFunction() = func
and vssid_1756.(LocalVariable).getFunction() = func
and verr_1757.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
