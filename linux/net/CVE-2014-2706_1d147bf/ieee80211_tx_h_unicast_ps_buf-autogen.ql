/**
 * @name linux-1d147bfa64293b2723c4fec50922168658e613ba-ieee80211_tx_h_unicast_ps_buf
 * @id cpp/linux/1d147bfa64293b2723c4fec50922168658e613ba/ieee80211-tx-h-unicast-ps-buf
 * @description linux-1d147bfa64293b2723c4fec50922168658e613ba-net/mac80211/tx.c-ieee80211_tx_h_unicast_ps_buf CVE-2014-2706
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsta_465, FunctionCall target_5, ValueFieldAccess target_6) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("spin_lock")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="ps_lock"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsta_465
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(3)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_6.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vsta_465, FunctionCall target_5, AddressOfExpr target_7) {
exists(IfStmt target_1 |
	target_1.getCondition().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("test_sta_flag")
	and target_1.getCondition().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsta_465
	and target_1.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("test_sta_flag")
	and target_1.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsta_465
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="ps_lock"
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsta_465
	and target_1.getThen().(BlockStmt).getStmt(1) instanceof ReturnStmt
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(4)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_1.getCondition().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_7.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vsta_465, FunctionCall target_5, AddressOfExpr target_8, ExprStmt target_9) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="ps_lock"
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsta_465
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(11)=target_2
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_8.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_4(Function func, ReturnStmt target_4) {
	target_4.getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
}

predicate func_5(Variable vsta_465, FunctionCall target_5) {
	target_5.getTarget().hasName("__builtin_expect")
	and target_5.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(FunctionCall).getTarget().hasName("test_sta_flag")
	and target_5.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsta_465
	and target_5.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getRightOperand().(FunctionCall).getTarget().hasName("test_sta_flag")
	and target_5.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getRightOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsta_465
	and target_5.getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(PointerFieldAccess).getTarget().getName()="flags"
	and target_5.getArgument(1).(Literal).getValue()="0"
}

predicate func_6(Variable vsta_465, ValueFieldAccess target_6) {
	target_6.getTarget().getName()="aid"
	and target_6.getQualifier().(PointerFieldAccess).getTarget().getName()="sta"
	and target_6.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsta_465
}

predicate func_7(Variable vsta_465, AddressOfExpr target_7) {
	target_7.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="ps_tx_buf"
	and target_7.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsta_465
	and target_7.getOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
	and target_7.getParent().(FunctionCall).getParent().(GEExpr).getGreaterOperand().(FunctionCall).getTarget().hasName("skb_queue_len")
}

predicate func_8(Variable vsta_465, AddressOfExpr target_8) {
	target_8.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="ps_tx_buf"
	and target_8.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsta_465
	and target_8.getOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget().getType().hasName("int")
	and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("skb_queue_tail")
	and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="skb"
	and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("ieee80211_tx_data *")
}

predicate func_9(Variable vsta_465, ExprStmt target_9) {
	target_9.getExpr().(FunctionCall).getTarget().hasName("sta_info_recalc_tim")
	and target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsta_465
}

from Function func, Variable vsta_465, ReturnStmt target_4, FunctionCall target_5, ValueFieldAccess target_6, AddressOfExpr target_7, AddressOfExpr target_8, ExprStmt target_9
where
not func_0(vsta_465, target_5, target_6)
and not func_1(vsta_465, target_5, target_7)
and not func_2(vsta_465, target_5, target_8, target_9)
and func_4(func, target_4)
and func_5(vsta_465, target_5)
and func_6(vsta_465, target_6)
and func_7(vsta_465, target_7)
and func_8(vsta_465, target_8)
and func_9(vsta_465, target_9)
and vsta_465.getType().hasName("sta_info *")
and vsta_465.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
