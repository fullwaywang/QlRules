/**
 * @name linux-d418313bd8f55c079a7da12651951b489a638ac1-bio_integrity_prep
 * @id cpp/linux/d418313bd8f55c079a7da12651951b489a638ac1/bio-integrity-prep
 * @description linux-d418313bd8f55c079a7da12651951b489a638ac1-block/bio-integrity.c-bio_integrity_prep CVE-2024-43854
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(EqualityOperation target_3, Function func) {
exists(ExprStmt target_0 |
	exists(AssignOrExpr obj_0 | obj_0=target_0.getExpr() |
		obj_0.getLValue().(VariableAccess).getType().hasName("gfp_t")
		and obj_0.getRValue().(Literal).getValue()="256"
	)
	and exists(BlockStmt obj_1 | obj_1=target_0.getParent() |
		exists(IfStmt obj_2 | obj_2=obj_1.getParent() |
			obj_2.getElse().(BlockStmt).getStmt(1)=target_0
			and obj_2.getCondition()=target_3
		)
	)
	and target_0.getEnclosingFunction() = func
)
}

predicate func_2(Function func, BitwiseOrExpr target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getParent() |
		exists(AssignExpr obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getRValue() |
				obj_2.getTarget().hasName("kmalloc")
				and obj_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("unsigned int")
			)
		)
	)
	and target_2.getValue()="3072"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, EqualityOperation target_3) {
	exists(ConditionalExpr obj_0 | obj_0=target_3.getLeftOperand() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getCondition() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getArgument(0) |
				obj_2.getTarget().hasName("bio_op")
				and obj_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("bio *")
			)
			and obj_1.getTarget().hasName("op_is_write")
		)
		and obj_0.getThen().(Literal).getValue()="1"
		and obj_0.getElse().(Literal).getValue()="0"
	)
	and target_3.getRightOperand().(Literal).getValue()="0"
	and target_3.getEnclosingFunction() = func
}

from Function func, BitwiseOrExpr target_2, EqualityOperation target_3
where
not func_0(target_3, func)
and func_2(func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
