commit 1a607d22dea4f60438747705495ec4d0af2ec451
Author: Filipe Manana <fdmanana@suse.com>
Date:   Fri Aug 2 09:38:51 2024 +0100

    btrfs: fix double inode unlock for direct IO sync writes
    
    commit e0391e92f9ab4fb3dbdeb139c967dcfa7ac4b115 upstream.
    
    If we do a direct IO sync write, at btrfs_sync_file(), and we need to skip
    inode logging or we get an error starting a transaction or an error when
    flushing delalloc, we end up unlocking the inode when we shouldn't under
    the 'out_release_extents' label, and then unlock it again at
    btrfs_direct_write().
    
    Fix that by checking if we have to skip inode unlocking under that label.
    
    Reported-by: syzbot+7dbbb74af6291b5a5a8b@syzkaller.appspotmail.com
    Link: https://lore.kernel.org/linux-btrfs/000000000000dfd631061eaeb4bc@google.com/
    Fixes: 939b656bc8ab ("btrfs: fix corruption after buffer fault in during direct IO append write")
    Reviewed-by: Josef Bacik <josef@toxicpanda.com>
    Signed-off-by: Filipe Manana <fdmanana@suse.com>
    Signed-off-by: David Sterba <dsterba@suse.com>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/fs/btrfs/file.c b/fs/btrfs/file.c
index 7ca49c02e8f8..c44dfb4370d7 100644
--- a/fs/btrfs/file.c
+++ b/fs/btrfs/file.c
@@ -2433,7 +2433,10 @@ int btrfs_sync_file(struct file *file, loff_t start, loff_t end, int datasync)
 
 out_release_extents:
 	btrfs_release_log_ctx_extents(&ctx);
-	btrfs_inode_unlock(inode, BTRFS_ILOCK_MMAP);
+	if (skip_ilock)
+		up_write(&BTRFS_I(inode)->i_mmap_lock);
+	else
+		btrfs_inode_unlock(inode, BTRFS_ILOCK_MMAP);
 	goto out;
 }
 
