/**
 * @name linux-390031c942116d4733310f0684beb8db19885fe6-fill_files_note
 * @id cpp/linux/390031c942116d4733310f0684beb8db19885fe6/fill-files-note
 * @description linux-390031c942116d4733310f0684beb8db19885fe6-fill_files_note CVE-2023-1249
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Initializer target_0) {
		target_0.getExpr().(PointerFieldAccess).getTarget().getName()="mm"
		and target_0.getExpr().(PointerFieldAccess).getQualifier() instanceof FunctionCall
		and target_0.getExpr().getEnclosingFunction() = func
}

predicate func_1(Variable vvma_1647, PointerFieldAccess target_1) {
		target_1.getTarget().getName()="vm_file"
		and target_1.getQualifier().(VariableAccess).getTarget()=vvma_1647
}

predicate func_2(Variable vvma_1647, PointerFieldAccess target_2) {
		target_2.getTarget().getName()="vm_start"
		and target_2.getQualifier().(VariableAccess).getTarget()=vvma_1647
}

predicate func_3(Variable vvma_1647, PointerFieldAccess target_3) {
		target_3.getTarget().getName()="vm_end"
		and target_3.getQualifier().(VariableAccess).getTarget()=vvma_1647
}

predicate func_4(Variable vvma_1647, PointerFieldAccess target_4) {
		target_4.getTarget().getName()="vm_pgoff"
		and target_4.getQualifier().(VariableAccess).getTarget()=vvma_1647
}

predicate func_6(Function func) {
	exists(PointerFieldAccess target_6 |
		target_6.getTarget().getName()="vma_count"
		and target_6.getQualifier().(VariableAccess).getType().hasName("coredump_params *")
		and target_6.getEnclosingFunction() = func)
}

predicate func_7(Function func) {
	exists(AssignExpr target_7 |
		target_7.getLValue().(VariableAccess).getType().hasName("int")
		and target_7.getRValue() instanceof Literal
		and target_7.getEnclosingFunction() = func)
}

predicate func_8(Function func) {
	exists(RelationalOperation target_8 |
		 (target_8 instanceof GTExpr or target_8 instanceof LTExpr)
		and target_8.getLesserOperand().(VariableAccess).getType().hasName("int")
		and target_8.getGreaterOperand().(PointerFieldAccess).getTarget().getName()="vma_count"
		and target_8.getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("coredump_params *")
		and target_8.getEnclosingFunction() = func)
}

predicate func_9(Function func) {
	exists(PostfixIncrExpr target_9 |
		target_9.getOperand().(VariableAccess).getType().hasName("int")
		and target_9.getEnclosingFunction() = func)
}

predicate func_11(Function func) {
	exists(AddressOfExpr target_11 |
		target_11.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="vma_meta"
		and target_11.getOperand().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("coredump_params *")
		and target_11.getOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getType().hasName("int")
		and target_11.getEnclosingFunction() = func)
}

predicate func_16(Function func) {
	exists(PointerFieldAccess target_16 |
		target_16.getTarget().getName()="vma_count"
		and target_16.getQualifier().(VariableAccess).getType().hasName("coredump_params *")
		and target_16.getEnclosingFunction() = func)
}

predicate func_19(Function func, FunctionCall target_19) {
		target_19.getTarget().hasName("get_current")
		and target_19.getEnclosingFunction() = func
}

predicate func_21(Variable vmm_1646, ValueFieldAccess target_21) {
		target_21.getTarget().getName()="map_count"
		and target_21.getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
		and target_21.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmm_1646
		and target_21.getParent().(AssignExpr).getRValue() = target_21
		and target_21.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned int")
}

predicate func_22(Variable vmm_1646, Variable vvma_1647, AssignExpr target_22) {
		target_22.getLValue().(VariableAccess).getTarget()=vvma_1647
		and target_22.getRValue().(ValueFieldAccess).getTarget().getName()="mmap"
		and target_22.getRValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
		and target_22.getRValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmm_1646
}

predicate func_23(Variable vvma_1647, EqualityOperation target_23) {
		target_23.getAnOperand().(VariableAccess).getTarget()=vvma_1647
		and target_23.getAnOperand() instanceof Literal
}

predicate func_24(Variable vvma_1647, AssignExpr target_24) {
		target_24.getLValue().(VariableAccess).getTarget()=vvma_1647
		and target_24.getRValue().(PointerFieldAccess).getTarget().getName()="vm_next"
		and target_24.getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_1647
}

predicate func_25(Variable vmm_1646, ValueFieldAccess target_25) {
		target_25.getTarget().getName()="map_count"
		and target_25.getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
		and target_25.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vmm_1646
}

from Function func, Variable vmm_1646, Variable vvma_1647, Initializer target_0, PointerFieldAccess target_1, PointerFieldAccess target_2, PointerFieldAccess target_3, PointerFieldAccess target_4, FunctionCall target_19, ValueFieldAccess target_21, AssignExpr target_22, EqualityOperation target_23, AssignExpr target_24, ValueFieldAccess target_25
where
func_0(func, target_0)
and func_1(vvma_1647, target_1)
and func_2(vvma_1647, target_2)
and func_3(vvma_1647, target_3)
and func_4(vvma_1647, target_4)
and not func_6(func)
and not func_7(func)
and not func_8(func)
and not func_9(func)
and not func_11(func)
and not func_16(func)
and func_19(func, target_19)
and func_21(vmm_1646, target_21)
and func_22(vmm_1646, vvma_1647, target_22)
and func_23(vvma_1647, target_23)
and func_24(vvma_1647, target_24)
and func_25(vmm_1646, target_25)
and vmm_1646.getType().hasName("mm_struct *")
and vvma_1647.getType().hasName("vm_area_struct *")
and vmm_1646.(LocalVariable).getFunction() = func
and vvma_1647.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
