/**
 * @name openssl-2ed80d14d7159de7b52c7720128459e8c24a94d5-tls_decrypt_ticket
 * @id cpp/openssl/2ed80d14d7159de7b52c7720128459e8c24a94d5/tls-decrypt-ticket
 * @description openssl-2ed80d14d7159de7b52c7720128459e8c24a94d5-ssl/t1_lib.c-tls_decrypt_ticket CVE-2014-3567
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vctx_1064, FunctionCall target_2, AddressOfExpr target_3, AddressOfExpr target_4) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("EVP_CIPHER_CTX_cleanup")
		and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vctx_1064
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
		and target_3.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
		and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_4.getOperand().(VariableAccess).getLocation()))
}

predicate func_1(FunctionCall target_2, Function func, GotoStmt target_1) {
		target_1.getParent().(IfStmt).getCondition()=target_2
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, FunctionCall target_2) {
		target_2.getTarget().hasName("CRYPTO_memcmp")
		and target_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("unsigned char[64]")
		and target_2.getArgument(1).(PointerArithmeticOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("const unsigned char *")
		and target_2.getArgument(1).(PointerArithmeticOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getArgument(2).(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vctx_1064, AddressOfExpr target_3) {
		target_3.getOperand().(VariableAccess).getTarget()=vctx_1064
		and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("EVP_DecryptInit_ex")
		and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(FunctionCall).getTarget().hasName("EVP_aes_128_cbc")
		and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(2).(Literal).getValue()="0"
		and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getTarget().getName()="tlsext_tick_aes_key"
		and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("SSL_CTX *")
		and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(4).(PointerArithmeticOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("const unsigned char *")
		and target_3.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(4).(PointerArithmeticOperation).getAnOperand().(Literal).getValue()="16"
}

predicate func_4(Variable vctx_1064, AddressOfExpr target_4) {
		target_4.getOperand().(VariableAccess).getTarget()=vctx_1064
		and target_4.getParent().(FunctionCall).getParent().(PointerAddExpr).getAnOperand().(FunctionCall).getTarget().hasName("EVP_CIPHER_CTX_iv_length")
}

from Function func, Variable vctx_1064, GotoStmt target_1, FunctionCall target_2, AddressOfExpr target_3, AddressOfExpr target_4
where
not func_0(vctx_1064, target_2, target_3, target_4)
and func_1(target_2, func, target_1)
and func_2(func, target_2)
and func_3(vctx_1064, target_3)
and func_4(vctx_1064, target_4)
and vctx_1064.getType().hasName("EVP_CIPHER_CTX")
and vctx_1064.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
