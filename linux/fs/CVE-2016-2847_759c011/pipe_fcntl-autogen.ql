/**
 * @name linux-759c01142a5d0f364a462346168a56de28a80f52-pipe_fcntl
 * @id cpp/linux/759c01142a5d0f364a462346168a56de28a80f52/pipe-fcntl
 * @description linux-759c01142a5d0f364a462346168a56de28a80f52-fs/pipe.c-pipe_fcntl CVE-2016-2847
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vpipe_1049, Variable vret_1050, LogicalAndExpr target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4) {
exists(IfStmt target_0 |
	target_0.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(FunctionCall).getTarget().hasName("too_many_pipe_buffers_hard")
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="user"
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpipe_1049
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getRightOperand().(FunctionCall).getTarget().hasName("too_many_pipe_buffers_soft")
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="user"
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getRightOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpipe_1049
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("capable")
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(Literal).getValue()="24"
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("capable")
	and target_0.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(Literal).getValue()="21"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_1050
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-1"
	and target_0.getThen().(BlockStmt).getStmt(1).(GotoStmt).getName() ="out"
	and target_0.getParent().(IfStmt).getCondition()=target_1
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation()))
}

predicate func_1(Function func, LogicalAndExpr target_1) {
	target_1.getLeftOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("capable")
	and target_1.getLeftOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(Literal).getValue()="24"
	and target_1.getRightOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_1.getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vpipe_1049, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("__pipe_lock")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpipe_1049
}

predicate func_3(Variable vpipe_1049, Variable vret_1050, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_1050
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("pipe_set_size")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpipe_1049
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned int")
}

predicate func_4(Variable vret_1050, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_1050
	and target_4.getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-1"
}

from Function func, Variable vpipe_1049, Variable vret_1050, LogicalAndExpr target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4
where
not func_0(vpipe_1049, vret_1050, target_1, target_2, target_3, target_4)
and func_1(func, target_1)
and func_2(vpipe_1049, target_2)
and func_3(vpipe_1049, vret_1050, target_3)
and func_4(vret_1050, target_4)
and vpipe_1049.getType().hasName("pipe_inode_info *")
and vret_1050.getType().hasName("long")
and vpipe_1049.(LocalVariable).getFunction() = func
and vret_1050.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
