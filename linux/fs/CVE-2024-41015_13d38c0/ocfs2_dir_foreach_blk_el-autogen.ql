/**
 * @name linux-13d38c00df97289e6fba2e54193959293fd910d2-ocfs2_dir_foreach_blk_el
 * @id cpp/linux/13d38c00df97289e6fba2e54193959293fd910d2/ocfs2-dir-foreach-blk-el
 * @description linux-13d38c00df97289e6fba2e54193959293fd910d2-fs/ocfs2/dir.c-ocfs2_dir_foreach_blk_el CVE-2024-41015
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vbh_1833, NotExpr target_2, ExprStmt target_3) {
exists(PointerFieldAccess target_0 |
	target_0.getTarget().getName()="b_data"
	and target_0.getQualifier().(VariableAccess).getTarget()=vbh_1833
	and target_2.getOperand().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_0.getQualifier().(VariableAccess).getLocation())
	and target_0.getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_1(Variable vsb_1835, LogicalAndExpr target_4, ExprStmt target_5) {
exists(PointerFieldAccess target_1 |
	target_1.getTarget().getName()="s_blocksize"
	and target_1.getQualifier().(VariableAccess).getTarget()=vsb_1835
	and target_4.getRightOperand().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_1.getQualifier().(VariableAccess).getLocation())
	and target_1.getQualifier().(VariableAccess).getLocation().isBefore(target_5.getExpr().(AssignExpr).getRValue().(AddExpr).getLeftOperand().(BitwiseOrExpr).getRightOperand().(SubExpr).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_2(Variable vbh_1833, NotExpr target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getOperand() |
		obj_0.getTarget().hasName("ocfs2_check_dir_entry")
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("inode *")
		and obj_0.getArgument(1).(VariableAccess).getTarget().getType().hasName("ocfs2_dir_entry *")
		and obj_0.getArgument(2).(VariableAccess).getTarget()=vbh_1833
		and obj_0.getArgument(3).(VariableAccess).getTarget().getType().hasName("unsigned long")
	)
}

predicate func_3(Variable vbh_1833, NotExpr target_6, ExprStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		obj_0.getTarget().hasName("brelse")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vbh_1833
	)
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_4(Variable vsb_1835, LogicalAndExpr target_4) {
	exists(RelationalOperation obj_0 | obj_0=target_4.getLeftOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLesserOperand() |
			obj_1.getTarget().getName()="pos"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("dir_context *")
		)
		and exists(FunctionCall obj_2 | obj_2=obj_0.getGreaterOperand() |
			obj_2.getTarget().hasName("i_size_read")
			and obj_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("inode *")
		)
	)
	and exists(RelationalOperation obj_3 | obj_3=target_4.getRightOperand() |
		exists(PointerFieldAccess obj_4 | obj_4=obj_3.getGreaterOperand() |
			obj_4.getTarget().getName()="s_blocksize"
			and obj_4.getQualifier().(VariableAccess).getTarget()=vsb_1835
		)
		and obj_3.getLesserOperand().(VariableAccess).getTarget().getType().hasName("unsigned long")
	)
}

predicate func_5(Variable vsb_1835, ExprStmt target_5) {
	exists(AssignExpr obj_0 | obj_0=target_5.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="pos"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("dir_context *")
		)
		and exists(AddExpr obj_2 | obj_2=obj_0.getRValue() |
			exists(BitwiseOrExpr obj_3 | obj_3=obj_2.getLeftOperand() |
				exists(PointerFieldAccess obj_4 | obj_4=obj_3.getLeftOperand() |
					obj_4.getTarget().getName()="pos"
					and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("dir_context *")
				)
				and exists(SubExpr obj_5 | obj_5=obj_3.getRightOperand() |
					exists(PointerFieldAccess obj_6 | obj_6=obj_5.getLeftOperand() |
						obj_6.getTarget().getName()="s_blocksize"
						and obj_6.getQualifier().(VariableAccess).getTarget()=vsb_1835
					)
					and obj_5.getRightOperand().(Literal).getValue()="1"
				)
			)
			and obj_2.getRightOperand().(Literal).getValue()="1"
		)
	)
}

predicate func_6(Function func, NotExpr target_6) {
	exists(FunctionCall obj_0 | obj_0=target_6.getOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(1) |
			obj_1.getTarget().getName()="name"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("ocfs2_dir_entry *")
		)
		and exists(PointerFieldAccess obj_2 | obj_2=obj_0.getArgument(2) |
			obj_2.getTarget().getName()="name_len"
			and obj_2.getQualifier().(VariableAccess).getTarget().getType().hasName("ocfs2_dir_entry *")
		)
		and exists(PointerFieldAccess obj_3 | obj_3=obj_0.getArgument(3) |
			obj_3.getTarget().getName()="inode"
			and obj_3.getQualifier().(VariableAccess).getTarget().getType().hasName("ocfs2_dir_entry *")
		)
		and obj_0.getTarget().hasName("dir_emit")
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("dir_context *")
		and obj_0.getArgument(4).(VariableAccess).getTarget().getType().hasName("unsigned char")
	)
	and target_6.getEnclosingFunction() = func
}

from Function func, Variable vbh_1833, Variable vsb_1835, NotExpr target_2, ExprStmt target_3, LogicalAndExpr target_4, ExprStmt target_5, NotExpr target_6
where
not func_0(vbh_1833, target_2, target_3)
and not func_1(vsb_1835, target_4, target_5)
and func_2(vbh_1833, target_2)
and func_3(vbh_1833, target_6, target_3)
and func_4(vsb_1835, target_4)
and func_5(vsb_1835, target_5)
and func_6(func, target_6)
and vbh_1833.getType().hasName("buffer_head *")
and vsb_1835.getType().hasName("super_block *")
and vbh_1833.(LocalVariable).getFunction() = func
and vsb_1835.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
