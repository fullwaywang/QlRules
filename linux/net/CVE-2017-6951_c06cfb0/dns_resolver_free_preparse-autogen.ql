/**
 * @name linux-c06cfb08b88dfbe13be44a69ae2fdc3a7c902d81-dns_resolver_free_preparse
 * @id cpp/linux/c06cfb08b88dfbe13be44a69ae2fdc3a7c902d81/dns-resolver-free-preparse
 * @description linux-c06cfb08b88dfbe13be44a69ae2fdc3a7c902d81-net/dns_resolver/dns_key.c-dns_resolver_free_preparse CVE-2017-6951
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable v__func__, FunctionCall target_0) {
	target_0.getTarget().hasName("no_printk")
	and not target_0.getTarget().hasName("strcmp")
	and target_0.getArgument(0).(StringLiteral).getValue()="7==>%s()\n"
	and target_0.getArgument(1).(VariableAccess).getTarget()=v__func__
}

predicate func_1(ExprStmt target_14, Function func) {
exists(IfStmt target_1 |
	target_1.getCondition().(LogicalOrExpr).getLeftOperand().(LogicalOrExpr).getLeftOperand().(NotExpr).getOperand().(VariableAccess).getType().hasName("const asymmetric_key_subtype *")
	and target_1.getCondition().(LogicalOrExpr).getLeftOperand().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(VariableAccess).getType().hasName("const char *")
	and target_1.getCondition().(LogicalOrExpr).getRightOperand().(NotExpr).getOperand().(PointerDereferenceExpr).getOperand().(VariableAccess).getType().hasName("const char *")
	and target_1.getThen().(ReturnStmt).getExpr() instanceof Literal
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_14.getLocation()))
}

predicate func_2(ExprStmt target_14, Function func) {
exists(IfStmt target_2 |
	target_2.getCondition().(LogicalAndExpr).getLeftOperand().(ValueFieldAccess).getTarget().getName()="description"
	and target_2.getCondition().(LogicalAndExpr).getLeftOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
	and target_2.getCondition().(LogicalAndExpr).getLeftOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_2.getCondition().(LogicalAndExpr).getLeftOperand().(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("const key *")
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getTarget().hasName("strcmp")
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="description"
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(1).(VariableAccess).getType().hasName("const char *")
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_2.getThen().(ReturnStmt).getExpr().(Literal).getValue()="1"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_14.getLocation()))
}

/*predicate func_3(Function func) {
exists(ValueFieldAccess target_3 |
	target_3.getTarget().getName()="description"
	and target_3.getQualifier().(ValueFieldAccess).getTarget().getName()="(unknown field)"
	and target_3.getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_3.getQualifier().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("const key *")
	and target_3.getEnclosingFunction() = func)
}

*/
predicate func_5(Function func) {
exists(AssignExpr target_5 |
	target_5.getLValue().(VariableAccess).getType().hasName("const char *")
	and target_5.getRValue().(FunctionCall).getTarget().hasName("strchr")
	and target_5.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("const char *")
	and target_5.getRValue().(FunctionCall).getArgument(1).(CharLiteral).getValue()="58"
	and target_5.getEnclosingFunction() = func)
}

predicate func_6(ExprStmt target_15, Function func) {
exists(IfStmt target_6 |
	target_6.getCondition().(NotExpr).getOperand().(VariableAccess).getType().hasName("const char *")
	and target_6.getThen().(ReturnStmt).getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_6
	and target_6.getLocation().isBefore(target_15.getLocation()))
}

predicate func_7(Function func) {
exists(AssignExpr target_7 |
	target_7.getLValue().(VariableAccess).getType().hasName("ptrdiff_t")
	and target_7.getRValue().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getType().hasName("const char *")
	and target_7.getRValue().(PointerArithmeticOperation).getRightOperand().(VariableAccess).getType().hasName("const char *")
	and target_7.getEnclosingFunction() = func)
}

predicate func_8(Function func) {
exists(ExprStmt target_8 |
	target_8.getExpr().(PostfixIncrExpr).getOperand().(VariableAccess).getType().hasName("const char *")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_8
	and target_8.getFollowingStmt() instanceof ReturnStmt)
}

predicate func_9(Function func) {
exists(IfStmt target_9 |
	target_9.getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("ptrdiff_t")
	and target_9.getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="2"
	and target_9.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getTarget().hasName("memcmp")
	and target_9.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("const char *")
	and target_9.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(1).(StringLiteral).getValue()="id"
	and target_9.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(2).(Literal).getValue()="2"
	and target_9.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_9.getThen().(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("asymmetric_keyid_match")
	and target_9.getThen().(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("asymmetric_key_id")
	and target_9.getThen().(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("const key *")
	and target_9.getThen().(ReturnStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getType().hasName("const char *")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_9
	and target_9.getFollowingStmt() instanceof ReturnStmt)
}

predicate func_10(Function func) {
exists(IfStmt target_10 |
	target_10.getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getType().hasName("ptrdiff_t")
	and target_10.getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getRightOperand().(PointerFieldAccess).getTarget().getName()="name_len"
	and target_10.getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getRightOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("const asymmetric_key_subtype *")
	and target_10.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getTarget().hasName("memcmp")
	and target_10.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(0).(VariableAccess).getType().hasName("const char *")
	and target_10.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="name"
	and target_10.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getType().hasName("const asymmetric_key_subtype *")
	and target_10.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(FunctionCall).getArgument(2).(VariableAccess).getType().hasName("ptrdiff_t")
	and target_10.getCondition().(LogicalAndExpr).getRightOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_10.getThen().(ReturnStmt).getExpr().(Literal).getValue()="1"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_10
	and target_10.getFollowingStmt() instanceof ReturnStmt)
}

predicate func_11(Function func) {
exists(ReturnStmt target_11 |
	target_11.getExpr().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_11
	and target_11.getFollowingStmt() instanceof ReturnStmt)
}

predicate func_13(Parameter vprep_166, FunctionCall target_13) {
	target_13.getTarget().hasName("kfree")
	and target_13.getArgument(0).(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="payload"
	and target_13.getArgument(0).(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vprep_166
	and target_13.getArgument(0).(ArrayExpr).getArrayOffset() instanceof Literal
}

predicate func_14(Function func, ExprStmt target_14) {
	target_14.getExpr() instanceof FunctionCall
	and target_14.getEnclosingFunction() = func
}

predicate func_15(Function func, ExprStmt target_15) {
	target_15.getExpr() instanceof FunctionCall
	and target_15.getEnclosingFunction() = func
}

from Function func, Parameter vprep_166, Variable v__func__, FunctionCall target_0, FunctionCall target_13, ExprStmt target_14, ExprStmt target_15
where
func_0(v__func__, target_0)
and not func_1(target_14, func)
and not func_2(target_14, func)
and not func_5(func)
and not func_6(target_15, func)
and not func_7(func)
and not func_8(func)
and not func_9(func)
and not func_10(func)
and not func_11(func)
and func_13(vprep_166, target_13)
and func_14(func, target_14)
and func_15(func, target_15)
and vprep_166.getType().hasName("key_preparsed_payload *")
and v__func__.getType() instanceof ArrayType
and vprep_166.getFunction() = func
and not v__func__.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
