/**
 * @name linux-eddb7732119d53400f48a02536a84c509692faa8-a2mp_getinfo_req
 * @id cpp/linux/eddb7732119d53400f48a02536a84c509692faa8/a2mp-getinfo-req
 * @description linux-eddb7732119d53400f48a02536a84c509692faa8-a2mp_getinfo_req CVE-2020-12352
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vrsp_306, LogicalOrExpr target_1) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("__memset")
		and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vrsp_306
		and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="0"
		and target_0.getExpr().(FunctionCall).getArgument(2).(SizeofExprOperator).getValue()="18"
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1)
}

predicate func_1(Function func, LogicalOrExpr target_1) {
		target_1.getAnOperand().(NotExpr).getOperand().(VariableAccess).getTarget().getType().hasName("hci_dev *")
		and target_1.getAnOperand().(EqualityOperation).getAnOperand().(PointerFieldAccess).getTarget().getName()="dev_type"
		and target_1.getAnOperand().(EqualityOperation).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("hci_dev *")
		and target_1.getAnOperand().(EqualityOperation).getAnOperand().(Literal).getValue()="1"
		and target_1.getEnclosingFunction() = func
}

from Function func, Variable vrsp_306, LogicalOrExpr target_1
where
not func_0(vrsp_306, target_1)
and func_1(func, target_1)
and vrsp_306.getType().hasName("a2mp_info_rsp")
and vrsp_306.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
