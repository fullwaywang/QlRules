/**
 * @name linux-84c831803785c2c3bec5c28c0e8a0b72f6b41d4d-arc_mdio_probe
 * @id cpp/linux/84c831803785c2c3bec5c28c0e8a0b72f6b41d4d/arc-mdio-probe
 * @description linux-84c831803785c2c3bec5c28c0e8a0b72f6b41d4d-drivers/net/ethernet/arc/emac_mdio.c-arc_mdio_probe CVE-2022-48854
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_3(Variable vbus_135, ExprStmt target_4, PointerFieldAccess target_3) {
	target_3.getTarget().getName()="name"
	and target_3.getQualifier().(VariableAccess).getTarget()=vbus_135
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getQualifier().(VariableAccess).getLocation())
}

predicate func_4(Variable vbus_135, VariableAccess target_5, ExprStmt target_4) {
	exists(FunctionCall obj_0 | obj_0=target_4.getExpr() |
		obj_0.getTarget().hasName("mdiobus_free")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vbus_135
	)
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_5(Variable verror_136, BlockStmt target_6, VariableAccess target_5) {
	target_5.getTarget()=verror_136
	and target_5.getParent().(IfStmt).getThen()=target_6
}

predicate func_6(Variable vbus_135, Variable verror_136, BlockStmt target_6) {
	exists(ExprStmt obj_0 | obj_0=target_6.getStmt(0) |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("mdiobus_free")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vbus_135
		)
	)
	and exists(ReturnStmt obj_2 | obj_2=target_6.getStmt(1) |
		exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
			exists(PointerFieldAccess obj_4 | obj_4=obj_3.getArgument(0) |
				obj_4.getTarget().getName()="dev"
				and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("arc_emac_priv *")
			)
			and exists(PointerFieldAccess obj_5 | obj_5=obj_3.getArgument(3) |
				obj_5.getTarget().getName()="name"
				and obj_5.getQualifier().(VariableAccess).getTarget()=vbus_135
			)
			and obj_3.getTarget().hasName("dev_err_probe")
			and obj_3.getArgument(1).(VariableAccess).getTarget()=verror_136
			and obj_3.getArgument(2).(StringLiteral).getValue()="cannot register MDIO bus %s\n"
		)
	)
}

from Function func, Variable vbus_135, Variable verror_136, PointerFieldAccess target_3, ExprStmt target_4, VariableAccess target_5, BlockStmt target_6
where
func_3(vbus_135, target_4, target_3)
and func_4(vbus_135, target_5, target_4)
and func_5(verror_136, target_6, target_5)
and func_6(vbus_135, verror_136, target_6)
and vbus_135.getType().hasName("mii_bus *")
and verror_136.getType().hasName("int")
and vbus_135.(LocalVariable).getFunction() = func
and verror_136.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
