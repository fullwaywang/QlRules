/**
 * @name linux-fdf82a7856b32d905c39afc85e34364491e46346-spectre_v2_select_mitigation
 * @id cpp/linux/fdf82a7856b32d905c39afc85e34364491e46346/spectre-v2-select-mitigation
 * @description linux-fdf82a7856b32d905c39afc85e34364491e46346-arch/x86/kernel/cpu/bugs.c-spectre_v2_select_mitigation CVE-2018-15572
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, StringLiteral target_0) {
	target_0.getValue()="6Spectre V2 : Spectre v2 mitigation: Filling RSB on context switch\n"
	and not target_0.getValue()="6Spectre V2 : Spectre v2 / SpectreRSB mitigation: Filling RSB on context switch\n"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, BitwiseOrExpr target_1) {
	target_1.getValue()="50364769"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, BinaryBitwiseOperation target_2) {
	target_2.getValue()="67108864"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, BitwiseOrExpr target_3) {
	target_3.getValue()="536870912"
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Function func, BinaryBitwiseOperation target_4) {
	target_4.getValue()="1048576"
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable vboot_cpu_data, PointerFieldAccess target_5) {
	target_5.getTarget().getName()="x86_capability"
	and target_5.getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vboot_cpu_data
	and target_5.getParent().(FunctionCall).getParent().(ConditionalExpr).getThen() instanceof FunctionCall
}

predicate func_6(Variable vboot_cpu_data, PointerFieldAccess target_6) {
	target_6.getTarget().getName()="x86_capability"
	and target_6.getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vboot_cpu_data
	and target_6.getParent().(FunctionCall).getParent().(ConditionalExpr).getElse() instanceof FunctionCall
}

predicate func_7(Function func, BitwiseOrExpr target_7) {
	target_7.getValue()="50364769"
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Function func, BinaryBitwiseOperation target_8) {
	target_8.getValue()="67108864"
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Function func, BitwiseOrExpr target_9) {
	target_9.getValue()="536870912"
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Function func, BinaryBitwiseOperation target_10) {
	target_10.getValue()="1048576"
	and target_10.getEnclosingFunction() = func
}

predicate func_11(Variable vboot_cpu_data, PointerFieldAccess target_11) {
	target_11.getTarget().getName()="x86_capability"
	and target_11.getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vboot_cpu_data
	and target_11.getParent().(FunctionCall).getParent().(ConditionalExpr).getThen() instanceof FunctionCall
}

predicate func_12(Variable vboot_cpu_data, PointerFieldAccess target_12) {
	target_12.getTarget().getName()="x86_capability"
	and target_12.getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vboot_cpu_data
	and target_12.getParent().(FunctionCall).getParent().(ConditionalExpr).getElse() instanceof FunctionCall
}

predicate func_13(Variable vboot_cpu_data, Variable vcpu_caps_set, LogicalOrExpr target_15, DoStmt target_13) {
	target_13.getCondition().(Literal).getValue()="0"
	and target_13.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("set_bit")
	and target_13.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddExpr).getValue()="243"
	and target_13.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="x86_capability"
	and target_13.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vboot_cpu_data
	and target_13.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("set_bit")
	and target_13.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddExpr).getValue()="243"
	and target_13.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcpu_caps_set
	and target_13.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_15
}

predicate func_14(Function func, IfStmt target_14) {
	target_14.getCondition().(LogicalOrExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_14.getCondition().(LogicalOrExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_14.getCondition().(LogicalOrExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(ConditionalExpr).getElse().(ConditionalExpr).getCondition().(Literal).getValue()="1"
	and target_14.getCondition().(LogicalOrExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getTarget().hasName("constant_test_bit")
	and target_14.getCondition().(LogicalOrExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("variable_test_bit")
	and target_14.getCondition().(LogicalOrExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_14.getCondition().(LogicalOrExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_14.getCondition().(LogicalOrExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(ConditionalExpr).getElse().(ConditionalExpr).getCondition().(Literal).getValue()="1"
	and target_14.getCondition().(LogicalOrExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getTarget().hasName("constant_test_bit")
	and target_14.getCondition().(LogicalOrExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("variable_test_bit")
	and target_14.getCondition().(LogicalOrExpr).getRightOperand().(FunctionCall).getTarget().hasName("is_skylake_era")
	and target_14.getThen().(BlockStmt).getStmt(0) instanceof DoStmt
	and target_14.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("printk")
	and target_14.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0) instanceof StringLiteral
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_14
}

predicate func_15(Function func, LogicalOrExpr target_15) {
	target_15.getLeftOperand() instanceof LogicalAndExpr
	and target_15.getRightOperand() instanceof FunctionCall
	and target_15.getEnclosingFunction() = func
}

from Function func, Variable vboot_cpu_data, Variable vcpu_caps_set, StringLiteral target_0, BitwiseOrExpr target_1, BinaryBitwiseOperation target_2, BitwiseOrExpr target_3, BinaryBitwiseOperation target_4, PointerFieldAccess target_5, PointerFieldAccess target_6, BitwiseOrExpr target_7, BinaryBitwiseOperation target_8, BitwiseOrExpr target_9, BinaryBitwiseOperation target_10, PointerFieldAccess target_11, PointerFieldAccess target_12, DoStmt target_13, IfStmt target_14, LogicalOrExpr target_15
where
func_0(func, target_0)
and func_1(func, target_1)
and func_2(func, target_2)
and func_3(func, target_3)
and func_4(func, target_4)
and func_5(vboot_cpu_data, target_5)
and func_6(vboot_cpu_data, target_6)
and func_7(func, target_7)
and func_8(func, target_8)
and func_9(func, target_9)
and func_10(func, target_10)
and func_11(vboot_cpu_data, target_11)
and func_12(vboot_cpu_data, target_12)
and func_13(vboot_cpu_data, vcpu_caps_set, target_15, target_13)
and func_14(func, target_14)
and func_15(func, target_15)
and vboot_cpu_data.getType().hasName("cpuinfo_x86")
and vcpu_caps_set.getType() instanceof ArrayType
and not vboot_cpu_data.getParentScope+() = func
and not vcpu_caps_set.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
