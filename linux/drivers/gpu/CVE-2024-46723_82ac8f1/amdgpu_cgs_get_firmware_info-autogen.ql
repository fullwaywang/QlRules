/**
 * @name linux-82ac8f1d02886b5d8aeb9e058989d3bd6fc581e2-amdgpu_cgs_get_firmware_info
 * @id cpp/linux/82ac8f1d02886b5d8aeb9e058989d3bd6fc581e2/amdgpu-cgs-get-firmware-info
 * @description linux-82ac8f1d02886b5d8aeb9e058989d3bd6fc581e2-drivers/gpu/drm/amd/amdgpu/amdgpu_cgs.c-amdgpu_cgs_get_firmware_info CVE-2024-46723
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vid_211, LogicalAndExpr target_1, ExprStmt target_2, ExprStmt target_3) {
exists(IfStmt target_0 |
	exists(BlockStmt obj_0 | obj_0=target_0.getParent() |
		exists(IfStmt obj_1 | obj_1=obj_0.getParent() |
			obj_1.getThen().(BlockStmt).getStmt(6)=target_0
			and obj_1.getCondition()=target_1
		)
	)
	and target_0.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vid_211
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-22"
	and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation())
	and target_0.getCondition().(RelationalOperation).getGreaterOperand().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getLocation())
)
}

predicate func_1(Function func, LogicalAndExpr target_1) {
	target_1.getLeftOperand().(EqualityOperation).getRightOperand().(VariableAccess).getTarget().getType().hasName("cgs_ucode_id")
	and target_1.getRightOperand().(EqualityOperation).getRightOperand().(VariableAccess).getTarget().getType().hasName("cgs_ucode_id")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vid_211, ExprStmt target_2) {
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("fw_type_convert")
			and obj_1.getArgument(0).(VariableAccess).getTarget().getType().hasName("cgs_device *")
			and obj_1.getArgument(1).(VariableAccess).getTarget().getType().hasName("cgs_ucode_id")
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=vid_211
	)
}

predicate func_3(Variable vid_211, ExprStmt target_3) {
	exists(AssignExpr obj_0 | obj_0=target_3.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getRValue() |
			exists(ArrayExpr obj_2 | obj_2=obj_1.getOperand() |
				exists(ValueFieldAccess obj_3 | obj_3=obj_2.getArrayBase() |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getQualifier() |
						obj_4.getTarget().getName()="firmware"
						and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("amdgpu_device *")
					)
					and obj_3.getTarget().getName()="ucode"
				)
				and obj_2.getArrayOffset().(VariableAccess).getTarget()=vid_211
			)
		)
		and obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("amdgpu_firmware_info *")
	)
}

from Function func, Variable vid_211, LogicalAndExpr target_1, ExprStmt target_2, ExprStmt target_3
where
not func_0(vid_211, target_1, target_2, target_3)
and func_1(func, target_1)
and func_2(vid_211, target_2)
and func_3(vid_211, target_3)
and vid_211.getType().hasName("AMDGPU_UCODE_ID")
and vid_211.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
