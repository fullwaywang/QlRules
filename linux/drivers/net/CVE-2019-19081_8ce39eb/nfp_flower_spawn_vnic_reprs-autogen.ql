/**
 * @name linux-8ce39eb5a67aee25d9f05b40b673c95b23502e3e-nfp_flower_spawn_vnic_reprs
 * @id cpp/linux/8ce39eb5a67aee25d9f05b40b673c95b23502e3e/nfp-flower-spawn-vnic-reprs
 * @description linux-8ce39eb5a67aee25d9f05b40b673c95b23502e3e-drivers/net/ethernet/netronome/nfp/flower/main.c-nfp_flower_spawn_vnic_reprs CVE-2019-19081
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vrepr_priv_375, FunctionCall target_5, ExprStmt target_6) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("kfree")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_priv_375
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
	and target_6.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vrepr_priv_375, VariableAccess target_7) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("kfree")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_priv_375
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7)
}

predicate func_2(Variable vrepr_390, VariableAccess target_7, ExprStmt target_8, ExprStmt target_4) {
exists(ExprStmt target_2 |
	target_2.getExpr().(FunctionCall).getTarget().hasName("nfp_repr_free")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_390
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_2
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Variable vrepr_390, FunctionCall target_5, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("nfp_repr_free")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_390
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
}

predicate func_4(Variable vrepr_390, VariableAccess target_7, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("nfp_repr_free")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vrepr_390
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
}

predicate func_5(Function func, FunctionCall target_5) {
	target_5.getTarget().hasName("IS_ERR")
	and target_5.getArgument(0).(VariableAccess).getTarget().getType().hasName("nfp_port *")
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Variable vrepr_priv_375, ExprStmt target_6) {
	target_6.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="nfp_repr"
	and target_6.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vrepr_priv_375
	and target_6.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("nfp_repr *")
}

predicate func_7(Variable verr_379, BlockStmt target_9, VariableAccess target_7) {
	target_7.getTarget()=verr_379
	and target_7.getParent().(IfStmt).getThen()=target_9
}

predicate func_8(Variable verr_379, Variable vrepr_390, ExprStmt target_8) {
	target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_379
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("nfp_repr_init")
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("nfp_app *")
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vrepr_390
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("u32")
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget().getType().hasName("nfp_port *")
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(ValueFieldAccess).getTarget().getName()="netdev"
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="dp"
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="nn"
	and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("nfp_flower_priv *")
}

predicate func_9(Function func, BlockStmt target_9) {
	target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("nfp_port_free")
	and target_9.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("nfp_port *")
	and target_9.getStmt(1) instanceof ExprStmt
	and target_9.getStmt(2).(GotoStmt).getName() ="err_reprs_clean"
	and target_9.getEnclosingFunction() = func
}

from Function func, Variable vrepr_priv_375, Variable verr_379, Variable vrepr_390, ExprStmt target_3, ExprStmt target_4, FunctionCall target_5, ExprStmt target_6, VariableAccess target_7, ExprStmt target_8, BlockStmt target_9
where
not func_0(vrepr_priv_375, target_5, target_6)
and not func_1(vrepr_priv_375, target_7)
and not func_2(vrepr_390, target_7, target_8, target_4)
and func_3(vrepr_390, target_5, target_3)
and func_4(vrepr_390, target_7, target_4)
and func_5(func, target_5)
and func_6(vrepr_priv_375, target_6)
and func_7(verr_379, target_9, target_7)
and func_8(verr_379, vrepr_390, target_8)
and func_9(func, target_9)
and vrepr_priv_375.getType().hasName("nfp_flower_repr_priv *")
and verr_379.getType().hasName("int")
and vrepr_390.getType().hasName("net_device *")
and vrepr_priv_375.(LocalVariable).getFunction() = func
and verr_379.(LocalVariable).getFunction() = func
and vrepr_390.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
