/**
 * @name linux-7aa5a19279c3639ae8b758b63f05d0c616a39fa1-__bpf_async_init
 * @id cpp/linux/7aa5a19279c3639ae8b758b63f05d0c616a39fa1/--bpf-async-init
 * @description linux-7aa5a19279c3639ae8b758b63f05d0c616a39fa1-kernel/bpf/helpers.c-__bpf_async_init CVE-2024-41045
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, SizeofTypeOperator target_0) {
	target_0.getType() instanceof LongType
	and target_0.getValue()="128"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(EqualityOperation target_2, Function func) {
exists(DoStmt target_1 |
	exists(BlockStmt obj_0 | obj_0=target_1.getStmt() |
		exists(DoStmt obj_1 | obj_1=obj_0.getStmt(1) |
			exists(BlockStmt obj_2 | obj_2=obj_1.getStmt() |
				exists(ExprStmt obj_3 | obj_3=obj_2.getStmt(0) |
					exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getTarget().hasName("__init_work")
						and obj_4.getArgument(1).(Literal).getValue()="0"
					)
				)
				and exists(ExprStmt obj_5 | obj_5=obj_2.getStmt(2) |
					exists(FunctionCall obj_6 | obj_6=obj_5.getExpr() |
						obj_6.getTarget().hasName("lockdep_init_map")
						and obj_6.getArgument(1).(StringLiteral).getValue()="(work_completion)(&t->cb.delete_work)"
						and obj_6.getArgument(3).(Literal).getValue()="0"
					)
				)
				and obj_2.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="data"
				and obj_2.getStmt(3).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("INIT_LIST_HEAD")
				and obj_2.getStmt(4).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="func"
			)
			and obj_1.getCondition().(Literal).getValue()="0"
		)
	)
	and exists(BlockStmt obj_7 | obj_7=target_1.getParent() |
		exists(IfStmt obj_8 | obj_8=obj_7.getParent() |
			obj_8.getThen().(BlockStmt).getStmt(3)=target_1
			and obj_8.getCondition()=target_2
		)
	)
	and target_1.getCondition().(Literal).getValue()="0"
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(Function func, EqualityOperation target_2) {
	target_2.getLeftOperand().(VariableAccess).getTarget().getType().hasName("bpf_async_type")
	and target_2.getEnclosingFunction() = func
}

from Function func, SizeofTypeOperator target_0, EqualityOperation target_2
where
func_0(func, target_0)
and not func_1(target_2, func)
and func_2(func, target_2)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
