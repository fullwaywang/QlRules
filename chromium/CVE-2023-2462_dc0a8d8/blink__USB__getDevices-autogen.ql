/**
 * @name chromium-dc0a8d8a80e653e13af8ff8cab0bf44b0f0baad0-blink__USB__getDevices
 * @id cpp/chromium/dc0a8d8a80e653e13af8ff8cab0bf44b0f0baad0/blinkusbgetdevices
 * @description chromium-dc0a8d8a80e653e13af8ff8cab0bf44b0f0baad0-third_party/blink/renderer/modules/webusb/usb.cc-blink__USB__getDevices CVE-2023-2462
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(BlockStmt target_12, Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("IsContextSupported")
	and not target_0.getTarget().hasName("ShouldBlockUsbServiceCall")
	and target_0.getQualifier() instanceof ThisExpr
	and target_0.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_12
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func) {
exists(FunctionCall target_1 |
	exists(FunctionCall obj_0 | obj_0=target_1.getQualifier() |
		obj_0.getTarget().hasName("GetSupplementable")
		and obj_0.getQualifier() instanceof ThisExpr
	)
	and target_1.getTarget().hasName("DomWindow")
	and target_1.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(Function func) {
exists(FunctionCall target_2 |
	target_2.getTarget().hasName("GetExecutionContext")
	and target_2.getQualifier() instanceof ThisExpr
	and target_2.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
	and target_2.getEnclosingFunction() = func
)
}

predicate func_3(Parameter vexception_state_120, ExprStmt target_10) {
exists(AddressOfExpr target_3 |
	target_3.getOperand().(VariableAccess).getTarget()=vexception_state_120
	and target_3.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
	and target_3.getOperand().(VariableAccess).getLocation().isBefore(target_10.getExpr().(FunctionCall).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_4(Function func, ThisExpr target_4) {
	target_4.getType() instanceof PointerType
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Function func, ThisExpr target_5) {
	target_5.getType() instanceof PointerType
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Parameter vexception_state_120, VariableAccess target_6) {
	target_6.getTarget()=vexception_state_120
}

predicate func_7(BlockStmt target_12, Function func, NotExpr target_7) {
	target_7.getOperand() instanceof FunctionCall
	and target_7.getParent().(IfStmt).getThen()=target_12
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Parameter vexception_state_120, NotExpr target_7, ExprStmt target_8) {
	exists(FunctionCall obj_0 | obj_0=target_8.getExpr() |
		obj_0.getTarget().hasName("ThrowDOMException")
		and obj_0.getQualifier().(VariableAccess).getTarget()=vexception_state_120
		and obj_0.getArgument(1).(StringLiteral).getValue()="The implementation did not support the requested type of object or operation."
	)
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
}

predicate func_9(Parameter vexception_state_120, Variable vkFeaturePolicyBlocked, Function func, IfStmt target_9) {
	exists(NotExpr obj_0 | obj_0=target_9.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().hasName("IsFeatureEnabled")
			and obj_1.getQualifier() instanceof ThisExpr
		)
	)
	and exists(BlockStmt obj_2 | obj_2=target_9.getThen() |
		exists(ExprStmt obj_3 | obj_3=obj_2.getStmt(0) |
			exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
				obj_4.getTarget().hasName("ThrowSecurityError")
				and obj_4.getQualifier().(VariableAccess).getTarget()=vexception_state_120
				and obj_4.getArgument(0).(VariableAccess).getTarget()=vkFeaturePolicyBlocked
			)
		)
		and obj_2.getStmt(1).(ReturnStmt).getExpr().(ConstructorCall).getType() instanceof VoidType
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_9
}

predicate func_10(Parameter vexception_state_120, Variable vkFeaturePolicyBlocked, ExprStmt target_10) {
	exists(FunctionCall obj_0 | obj_0=target_10.getExpr() |
		obj_0.getTarget().hasName("ThrowSecurityError")
		and obj_0.getQualifier().(VariableAccess).getTarget()=vexception_state_120
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vkFeaturePolicyBlocked
	)
}

/*predicate func_11(NotExpr target_13, Function func, ReturnStmt target_11) {
	target_11.getExpr().(ConstructorCall).getType() instanceof VoidType
	and target_11.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_13
	and target_11.getEnclosingFunction() = func
}

*/
predicate func_12(Function func, BlockStmt target_12) {
	target_12.getStmt(0) instanceof ExprStmt
	and target_12.getStmt(1).(ReturnStmt).getExpr().(ConstructorCall).getType() instanceof VoidType
	and target_12.getEnclosingFunction() = func
}

predicate func_13(Function func, NotExpr target_13) {
	target_13.getOperand() instanceof FunctionCall
	and target_13.getEnclosingFunction() = func
}

from Function func, Parameter vexception_state_120, Variable vkFeaturePolicyBlocked, FunctionCall target_0, ThisExpr target_4, ThisExpr target_5, VariableAccess target_6, NotExpr target_7, ExprStmt target_8, IfStmt target_9, ExprStmt target_10, BlockStmt target_12, NotExpr target_13
where
func_0(target_12, func, target_0)
and not func_1(func)
and not func_2(func)
and not func_3(vexception_state_120, target_10)
and func_4(func, target_4)
and func_5(func, target_5)
and func_6(vexception_state_120, target_6)
and func_7(target_12, func, target_7)
and func_8(vexception_state_120, target_7, target_8)
and func_9(vexception_state_120, vkFeaturePolicyBlocked, func, target_9)
and func_10(vexception_state_120, vkFeaturePolicyBlocked, target_10)
and func_12(func, target_12)
and func_13(func, target_13)
and vexception_state_120.getType().hasName("ExceptionState &")
and vkFeaturePolicyBlocked.getType() instanceof ArrayType
and vexception_state_120.getFunction() = func
and not vkFeaturePolicyBlocked.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
