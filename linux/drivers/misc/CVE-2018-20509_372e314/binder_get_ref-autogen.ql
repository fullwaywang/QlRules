/**
 * @name linux-372e3147df7016ebeaa372939e8774a1292db558-binder_get_ref
 * @id cpp/linux/372e3147df7016ebeaa372939e8774a1292db558/binder-get-ref
 * @description linux-372e3147df7016ebeaa372939e8774a1292db558-drivers/android/binder.c-binder_get_ref CVE-2018-20509
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, BuiltInOperationBuiltInOffsetOf target_0) {
	target_0.getValue()="8"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Variable vref_625, RelationalOperation target_10) {
exists(ValueFieldAccess target_1 |
	target_1.getTarget().getName()="desc"
	and target_1.getQualifier().(PointerFieldAccess).getTarget().getName()="data"
	and target_1.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vref_625
	and target_1.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_10.getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_2(Variable vref_625, LogicalAndExpr target_11) {
exists(ValueFieldAccess target_2 |
	target_2.getTarget().getName()="desc"
	and target_2.getQualifier().(PointerFieldAccess).getTarget().getName()="data"
	and target_2.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vref_625
	and target_2.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_11.getRightOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_3(Variable vref_625, ReturnStmt target_12) {
exists(ValueFieldAccess target_3 |
	target_3.getTarget().getName()="strong"
	and target_3.getQualifier().(PointerFieldAccess).getTarget().getName()="data"
	and target_3.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vref_625
	and target_3.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_12.getExpr().(VariableAccess).getLocation()))
}

predicate func_4(Variable vref_625, VariableAccess target_4) {
	target_4.getTarget()=vref_625
}

predicate func_5(Variable vref_625, VariableAccess target_5) {
	target_5.getTarget()=vref_625
}

predicate func_6(Variable vref_625, VariableAccess target_6) {
	target_6.getTarget()=vref_625
}

predicate func_7(Variable vref_625, RelationalOperation target_10, PointerFieldAccess target_7) {
	target_7.getTarget().getName()="desc"
	and target_7.getQualifier().(VariableAccess).getTarget()=vref_625
	and target_7.getQualifier().(VariableAccess).getLocation().isBefore(target_10.getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_8(Variable vref_625, LogicalAndExpr target_11, PointerFieldAccess target_8) {
	target_8.getTarget().getName()="desc"
	and target_8.getQualifier().(VariableAccess).getTarget()=vref_625
	and target_8.getQualifier().(VariableAccess).getLocation().isBefore(target_11.getRightOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_9(Variable vref_625, PointerFieldAccess target_9) {
	target_9.getTarget().getName()="strong"
	and target_9.getQualifier().(VariableAccess).getTarget()=vref_625
}

predicate func_10(Variable vref_625, RelationalOperation target_10) {
	 (target_10 instanceof GTExpr or target_10 instanceof LTExpr)
	and target_10.getGreaterOperand().(VariableAccess).getTarget().getType().hasName("u32")
	and target_10.getLesserOperand().(PointerFieldAccess).getTarget().getName()="desc"
	and target_10.getLesserOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vref_625
}

predicate func_11(Variable vref_625, LogicalAndExpr target_11) {
	target_11.getLeftOperand().(VariableAccess).getTarget().getType().hasName("bool")
	and target_11.getRightOperand().(NotExpr).getOperand().(PointerFieldAccess).getTarget().getName()="strong"
	and target_11.getRightOperand().(NotExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vref_625
}

predicate func_12(Variable vref_625, ReturnStmt target_12) {
	target_12.getExpr().(VariableAccess).getTarget()=vref_625
}

from Function func, Variable vref_625, BuiltInOperationBuiltInOffsetOf target_0, VariableAccess target_4, VariableAccess target_5, VariableAccess target_6, PointerFieldAccess target_7, PointerFieldAccess target_8, PointerFieldAccess target_9, RelationalOperation target_10, LogicalAndExpr target_11, ReturnStmt target_12
where
func_0(func, target_0)
and not func_1(vref_625, target_10)
and not func_2(vref_625, target_11)
and not func_3(vref_625, target_12)
and func_4(vref_625, target_4)
and func_5(vref_625, target_5)
and func_6(vref_625, target_6)
and func_7(vref_625, target_10, target_7)
and func_8(vref_625, target_11, target_8)
and func_9(vref_625, target_9)
and func_10(vref_625, target_10)
and func_11(vref_625, target_11)
and func_12(vref_625, target_12)
and vref_625.getType().hasName("binder_ref *")
and vref_625.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
