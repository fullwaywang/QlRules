/**
 * @name linux-89c2b3b74918200e46699338d7bcc19b1ea12110-io_write
 * @id cpp/linux/89c2b3b74918200e46699338d7bcc19b1ea12110/io-write
 * @description linux-89c2b3b74918200e46699338d7bcc19b1ea12110-io_write CVE-2022-1508
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable viter_3344, LogicalOrExpr target_1, ExprStmt target_2, ExprStmt target_3) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("iov_iter_reexpand")
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=viter_3344
		and target_0.getExpr().(FunctionCall).getArgument(1).(AddExpr).getAnOperand().(PointerFieldAccess).getTarget().getName()="count"
		and target_0.getExpr().(FunctionCall).getArgument(1).(AddExpr).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=viter_3344
		and target_0.getExpr().(FunctionCall).getArgument(1).(AddExpr).getAnOperand().(PointerFieldAccess).getTarget().getName()="truncated"
		and target_0.getExpr().(FunctionCall).getArgument(1).(AddExpr).getAnOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=viter_3344
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(1)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Function func, LogicalOrExpr target_1) {
		target_1.getAnOperand().(NotExpr).getOperand().(VariableAccess).getTarget().getType().hasName("bool")
		and target_1.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("ssize_t")
		and target_1.getAnOperand().(EqualityOperation).getAnOperand().(UnaryMinusExpr).getValue()="-11"
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable viter_3344, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("ssize_t")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("loop_rw_iter")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(Literal).getValue()="1"
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("io_kiocb *")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=viter_3344
}

predicate func_3(Variable viter_3344, ExprStmt target_3) {
		target_3.getExpr().(FunctionCall).getTarget().hasName("iov_iter_revert")
		and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=viter_3344
		and target_3.getExpr().(FunctionCall).getArgument(1).(SubExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("ssize_t")
		and target_3.getExpr().(FunctionCall).getArgument(1).(SubExpr).getRightOperand().(FunctionCall).getTarget().hasName("iov_iter_count")
		and target_3.getExpr().(FunctionCall).getArgument(1).(SubExpr).getRightOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=viter_3344
}

from Function func, Variable viter_3344, LogicalOrExpr target_1, ExprStmt target_2, ExprStmt target_3
where
not func_0(viter_3344, target_1, target_2, target_3)
and func_1(func, target_1)
and func_2(viter_3344, target_2)
and func_3(viter_3344, target_3)
and viter_3344.getType().hasName("iov_iter *")
and viter_3344.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
