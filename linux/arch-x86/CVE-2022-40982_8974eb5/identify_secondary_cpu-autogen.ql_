/**
 * @name linux-8974eb588283b7d44a7c91fa09fcbaf380339f3a-identify_secondary_cpu
 * @id cpp/linux/8974eb588283b7d44a7c91fa09fcbaf380339f3a/identify-secondary-cpu
 * @description linux-8974eb588283b7d44a7c91fa09fcbaf380339f3a-arch/x86/kernel/cpu/common.c-identify_secondary_cpu CVE-2022-40982
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vboot_cpu_data, ExprStmt target_1, NotExpr target_2, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
	and target_0.getCondition().(ConditionalExpr).getThen().(Literal).getValue()="1"
	and target_0.getCondition().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("arch_test_bit")
	and target_0.getCondition().(ConditionalExpr).getElse().(FunctionCall).getArgument(0).(AddExpr).getValue()="702"
	and target_0.getCondition().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
	and target_0.getCondition().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
	and target_0.getCondition().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vboot_cpu_data
	and target_0.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("update_gds_msr")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getOperand().(NotExpr).getOperand().(EqualityOperation).getRightOperand().(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(AddressOfExpr).getOperand().(VariableAccess).getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("tsx_ap_init")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vboot_cpu_data, NotExpr target_2) {
	target_2.getOperand().(NotExpr).getOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("cpuinfo_x86 *")
	and target_2.getOperand().(NotExpr).getOperand().(EqualityOperation).getRightOperand().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vboot_cpu_data
}

from Function func, Variable vboot_cpu_data, ExprStmt target_1, NotExpr target_2
where
not func_0(vboot_cpu_data, target_1, target_2, func)
and func_1(func, target_1)
and func_2(vboot_cpu_data, target_2)
and vboot_cpu_data.getType().hasName("cpuinfo_x86")
and not vboot_cpu_data.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
