/**
 * @name linux-c8c2a057fdc7de1cd16f4baa51425b932a42eb39-mlx5_fpga_conn_create_cq
 * @id cpp/linux/c8c2a057fdc7de1cd16f4baa51425b932a42eb39/mlx5-fpga-conn-create-cq
 * @description linux-c8c2a057fdc7de1cd16f4baa51425b932a42eb39-drivers/net/ethernet/mellanox/mlx5/core/fpga/conn.c-mlx5_fpga_conn_create_cq CVE-2019-19045
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vin_438, VariableAccess target_2, NotExpr target_3, ExprStmt target_4) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("kvfree")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vin_438
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_3.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getRValue().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getLocation()))
}

predicate func_1(VariableAccess target_2, Function func, GotoStmt target_1) {
	target_1.getName() ="err_cqwq"
	and target_1.getParent().(IfStmt).getCondition()=target_2
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable verr_436, VariableAccess target_2) {
	target_2.getTarget()=verr_436
	and target_2.getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_3(Variable vin_438, NotExpr target_3) {
	target_3.getOperand().(VariableAccess).getTarget()=vin_438
}

predicate func_4(Variable vin_438, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("void *")
	and target_4.getExpr().(AssignExpr).getRValue().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=vin_438
	and target_4.getExpr().(AssignExpr).getRValue().(PointerArithmeticOperation).getRightOperand().(DivExpr).getValue()="16"
}

from Function func, Variable verr_436, Variable vin_438, GotoStmt target_1, VariableAccess target_2, NotExpr target_3, ExprStmt target_4
where
not func_0(vin_438, target_2, target_3, target_4)
and func_1(target_2, func, target_1)
and func_2(verr_436, target_2)
and func_3(vin_438, target_3)
and func_4(vin_438, target_4)
and verr_436.getType().hasName("int")
and vin_438.getType().hasName("void *")
and verr_436.(LocalVariable).getFunction() = func
and vin_438.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
