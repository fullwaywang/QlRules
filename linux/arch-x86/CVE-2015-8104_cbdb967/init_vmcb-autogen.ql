/**
 * @name linux-cbdb967af3d54993f5814f1cee0ed311a055377d-init_vmcb
 * @id cpp/linux/cbdb967af3d54993f5814f1cee0ed311a055377d/init-vmcb
 * @description linux-cbdb967af3d54993f5814f1cee0ed311a055377d-arch/x86/kvm/svm.c-init_vmcb CVE-2015-8104
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsvm_1001, ExprStmt target_1, ExprStmt target_2, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("set_exception_intercept")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsvm_1001
	and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="1"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vsvm_1001, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("set_intercept")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsvm_1001
}

predicate func_2(Parameter vsvm_1001, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("set_exception_intercept")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsvm_1001
	and target_2.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="17"
}

from Function func, Parameter vsvm_1001, ExprStmt target_1, ExprStmt target_2
where
not func_0(vsvm_1001, target_1, target_2, func)
and func_1(vsvm_1001, target_1)
and func_2(vsvm_1001, target_2)
and vsvm_1001.getType().hasName("vcpu_svm *")
and vsvm_1001.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
