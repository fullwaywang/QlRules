/**
 * @name linux-1be7107fbe18eed3e319a6c3e83c78254b693acb-validate_mm
 * @id cpp/linux/1be7107fbe18eed3e319a6c3e83c78254b693acb/validate-mm
 * @description linux-1be7107fbe18eed3e319a6c3e83c78254b693acb-mm/mmap.c-validate_mm CVE-2017-1000379
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vvma_342) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("vm_end_gap")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vvma_342
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("unsigned long"))
}

predicate func_1(Variable vvma_342, VariableAccess target_1) {
	target_1.getTarget()=vvma_342
}

predicate func_2(Variable vvma_342, PointerFieldAccess target_2) {
	target_2.getTarget().getName()="vm_end"
	and target_2.getQualifier().(VariableAccess).getTarget()=vvma_342
}

from Function func, Variable vvma_342, VariableAccess target_1, PointerFieldAccess target_2
where
not func_0(vvma_342)
and func_1(vvma_342, target_1)
and func_2(vvma_342, target_2)
and vvma_342.getType().hasName("vm_area_struct *")
and vvma_342.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
