/**
 * @name linux-f2faf0699af78968a27ca154bf76e94247f8c471-amdgpu_bo_validate_size
 * @id cpp/linux/f2faf0699af78968a27ca154bf76e94247f8c471/amdgpu-bo-validate-size
 * @description linux-f2faf0699af78968a27ca154bf76e94247f8c471-drivers/gpu/drm/amd/amdgpu/amdgpu_object.c-amdgpu_bo_validate_size CVE-2023-52908
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsize_443, Variable vman_445, DoStmt target_1, LogicalAndExpr target_2, ExprStmt target_3, Function func) {
exists(IfStmt target_0 |
	exists(DoStmt obj_0 | obj_0=target_0.getThen() |
		exists(BlockStmt obj_1 | obj_1=obj_0.getStmt() |
			exists(IfStmt obj_2 | obj_2=obj_1.getStmt(2) |
				exists(ExprStmt obj_3 | obj_3=obj_2.getThen() |
					exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
						obj_4.getTarget().hasName("___drm_dbg")
						and obj_4.getArgument(2).(StringLiteral).getValue()="BO size %lu > total memory in domain: %llu\n"
						and obj_4.getArgument(3).(VariableAccess).getTarget()=vsize_443
						and obj_4.getArgument(4).(PointerFieldAccess).getTarget().getName()="size"
					)
				)
			)
			and obj_1.getStmt(1).(DoStmt).getCondition() instanceof Literal
		)
		and obj_0.getCondition() instanceof Literal
	)
	and target_0.getCondition().(VariableAccess).getTarget()=vman_445
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getRightOperand().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(2).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(3).(VariableAccess).getLocation())
	and target_0.getCondition().(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(4).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Parameter vsize_443, Variable vman_445, DoStmt target_1) {
	exists(BlockStmt obj_0 | obj_0=target_1.getStmt() |
		exists(DoStmt obj_1 | obj_1=obj_0.getStmt(1) |
			obj_1.getCondition() instanceof Literal
			and obj_1.getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(NotExpr).getValue()="0"
		)
		and exists(IfStmt obj_2 | obj_2=obj_0.getStmt(2) |
			exists(ExprStmt obj_3 | obj_3=obj_2.getThen() |
				exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
					exists(PointerFieldAccess obj_5 | obj_5=obj_4.getArgument(4) |
						obj_5.getTarget().getName()="size"
						and obj_5.getQualifier().(VariableAccess).getTarget()=vman_445
					)
					and obj_4.getTarget().hasName("___drm_dbg")
					and obj_4.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("_ddebug")
					and obj_4.getArgument(2).(StringLiteral).getValue()="BO size %lu > total memory in domain: %llu\n"
					and obj_4.getArgument(3).(VariableAccess).getTarget()=vsize_443
				)
			)
			and obj_2.getCondition().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__builtin_expect")
		)
	)
	and target_1.getCondition() instanceof Literal
}

predicate func_2(Parameter vsize_443, Variable vman_445, ReturnStmt target_4, LogicalAndExpr target_2) {
	exists(RelationalOperation obj_0 | obj_0=target_2.getRightOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getGreaterOperand() |
			obj_1.getTarget().getName()="size"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vman_445
		)
		and obj_0.getLesserOperand().(VariableAccess).getTarget()=vsize_443
	)
	and target_2.getLeftOperand().(VariableAccess).getTarget()=vman_445
	and target_2.getParent().(IfStmt).getThen()=target_4
}

predicate func_3(Parameter vsize_443, Variable vman_445, ExprStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(4) |
			obj_1.getTarget().getName()="size"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vman_445
		)
		and obj_0.getTarget().hasName("___drm_dbg")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("_ddebug")
		and obj_0.getArgument(2).(StringLiteral).getValue()="BO size %lu > total memory in domain: %llu\n"
		and obj_0.getArgument(3).(VariableAccess).getTarget()=vsize_443
	)
}

predicate func_4(LogicalAndExpr target_2, Function func, ReturnStmt target_4) {
	target_4.getParent().(IfStmt).getCondition()=target_2
	and target_4.getEnclosingFunction() = func
}

from Function func, Parameter vsize_443, Variable vman_445, DoStmt target_1, LogicalAndExpr target_2, ExprStmt target_3, ReturnStmt target_4
where
not func_0(vsize_443, vman_445, target_1, target_2, target_3, func)
and func_1(vsize_443, vman_445, target_1)
and func_2(vsize_443, vman_445, target_4, target_2)
and func_3(vsize_443, vman_445, target_3)
and func_4(target_2, func, target_4)
and vsize_443.getType().hasName("unsigned long")
and vman_445.getType().hasName("ttm_resource_manager *")
and vsize_443.getFunction() = func
and vman_445.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
