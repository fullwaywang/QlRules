commit 61a26ffd5ad3ece456d74c4c79f7b5e3f440a141
Author: Sagi Grimberg <sagi@grimberg.me>
Date:   Tue Feb 1 14:54:20 2022 +0200

    nvme-tcp: fix possible use-after-free in transport error_recovery work
    
    [ Upstream commit ff9fc7ebf5c06de1ef72a69f9b1ab40af8b07f9e ]
    
    While nvme_tcp_submit_async_event_work is checking the ctrl and queue
    state before preparing the AER command and scheduling io_work, in order
    to fully prevent a race where this check is not reliable the error
    recovery work must flush async_event_work before continuing to destroy
    the admin queue after setting the ctrl state to RESETTING such that
    there is no race .submit_async_event and the error recovery handler
    itself changing the ctrl state.
    
    Tested-by: Chris Leech <cleech@redhat.com>
    Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
    Signed-off-by: Sasha Levin <sashal@kernel.org>

diff --git a/drivers/nvme/host/tcp.c b/drivers/nvme/host/tcp.c
index 1eef7ed0c302..4378344f0e7a 100644
--- a/drivers/nvme/host/tcp.c
+++ b/drivers/nvme/host/tcp.c
@@ -1955,6 +1955,7 @@ static void nvme_tcp_error_recovery_work(struct work_struct *work)
 	struct nvme_ctrl *ctrl = &tcp_ctrl->ctrl;
 
 	nvme_stop_keep_alive(ctrl);
+	flush_work(&ctrl->async_event_work);
 	nvme_tcp_teardown_io_queues(ctrl, false);
 	/* unquiesce to fail fast pending requests */
 	nvme_start_queues(ctrl);
