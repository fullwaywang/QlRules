/**
 * @name openssl-934a04f0e775309cadbef0aa6b9692e1b12a76c6-ossl_pkcs7_resolve_libctx
 * @id cpp/openssl/934a04f0e775309cadbef0aa6b9692e1b12a76c6/ossl-pkcs7-resolve-libctx
 * @description openssl-934a04f0e775309cadbef0aa6b9692e1b12a76c6-crypto/pkcs7/pk7_lib.c-ossl_pkcs7_resolve_libctx CVE-2023-0216
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vp7_437, FunctionCall target_6) {
	exists(LogicalOrExpr target_0 |
		target_0.getAnOperand() instanceof EqualityOperation
		and target_0.getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getTarget().getName()="ptr"
		and target_0.getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="d"
		and target_0.getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vp7_437
		and target_0.getAnOperand().(EqualityOperation).getAnOperand().(Literal).getValue()="0"
		and target_0.getParent().(IfStmt).getThen() instanceof ReturnStmt
		and target_6.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getAnOperand().(EqualityOperation).getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vrinfos_443, FunctionCall target_12, Function func) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vrinfos_443
		and target_1.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
		and target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_12.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable vsinfos_444, FunctionCall target_14, Function func) {
	exists(ExprStmt target_2 |
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsinfos_444
		and target_2.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
		and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_14.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Variable vcerts_445, FunctionCall target_16, Function func) {
	exists(ExprStmt target_3 |
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vcerts_445
		and target_3.getExpr().(AssignExpr).getRValue() instanceof FunctionCall
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
		and target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_16.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_4(Parameter vp7_437, FunctionCall target_4) {
		target_4.getTarget().hasName("pkcs7_get_recipient_info")
		and target_4.getArgument(0).(VariableAccess).getTarget()=vp7_437
}

predicate func_5(Parameter vp7_437, FunctionCall target_5) {
		target_5.getTarget().hasName("PKCS7_get_signer_info")
		and target_5.getArgument(0).(VariableAccess).getTarget()=vp7_437
}

predicate func_6(Parameter vp7_437, FunctionCall target_6) {
		target_6.getTarget().hasName("pkcs7_get_signer_certs")
		and target_6.getArgument(0).(VariableAccess).getTarget()=vp7_437
}

predicate func_7(Variable vctx_440, EqualityOperation target_7) {
		target_7.getAnOperand().(VariableAccess).getTarget()=vctx_440
		and target_7.getAnOperand().(Literal).getValue()="0"
		and target_7.getParent().(IfStmt).getThen() instanceof ReturnStmt
}

predicate func_8(Function func, Initializer target_8) {
		target_8.getExpr() instanceof FunctionCall
		and target_8.getExpr().getEnclosingFunction() = func
}

predicate func_9(Function func, Initializer target_9) {
		target_9.getExpr() instanceof FunctionCall
		and target_9.getExpr().getEnclosingFunction() = func
}

predicate func_10(Function func, Initializer target_10) {
		target_10.getExpr() instanceof FunctionCall
		and target_10.getExpr().getEnclosingFunction() = func
}

predicate func_12(Variable vrinfos_443, FunctionCall target_12) {
		target_12.getTarget().hasName("ossl_check_const_PKCS7_RECIP_INFO_sk_type")
		and target_12.getArgument(0).(VariableAccess).getTarget()=vrinfos_443
		and target_12.getParent().(FunctionCall).getParent().(LTExpr).getGreaterOperand().(FunctionCall).getTarget().hasName("OPENSSL_sk_num")
}

predicate func_14(Variable vsinfos_444, FunctionCall target_14) {
		target_14.getTarget().hasName("ossl_check_const_PKCS7_SIGNER_INFO_sk_type")
		and target_14.getArgument(0).(VariableAccess).getTarget()=vsinfos_444
		and target_14.getParent().(FunctionCall).getParent().(LTExpr).getGreaterOperand().(FunctionCall).getTarget().hasName("OPENSSL_sk_num")
}

predicate func_16(Variable vcerts_445, FunctionCall target_16) {
		target_16.getTarget().hasName("ossl_check_const_X509_sk_type")
		and target_16.getArgument(0).(VariableAccess).getTarget()=vcerts_445
		and target_16.getParent().(FunctionCall).getParent().(LTExpr).getGreaterOperand().(FunctionCall).getTarget().hasName("OPENSSL_sk_num")
}

from Function func, Variable vctx_440, Variable vrinfos_443, Variable vsinfos_444, Variable vcerts_445, Parameter vp7_437, FunctionCall target_4, FunctionCall target_5, FunctionCall target_6, EqualityOperation target_7, Initializer target_8, Initializer target_9, Initializer target_10, FunctionCall target_12, FunctionCall target_14, FunctionCall target_16
where
not func_0(vp7_437, target_6)
and not func_1(vrinfos_443, target_12, func)
and not func_2(vsinfos_444, target_14, func)
and not func_3(vcerts_445, target_16, func)
and func_4(vp7_437, target_4)
and func_5(vp7_437, target_5)
and func_6(vp7_437, target_6)
and func_7(vctx_440, target_7)
and func_8(func, target_8)
and func_9(func, target_9)
and func_10(func, target_10)
and func_12(vrinfos_443, target_12)
and func_14(vsinfos_444, target_14)
and func_16(vcerts_445, target_16)
and vctx_440.getType().hasName("const PKCS7_CTX *")
and vrinfos_443.getType().hasName("stack_st_PKCS7_RECIP_INFO *")
and vsinfos_444.getType().hasName("stack_st_PKCS7_SIGNER_INFO *")
and vcerts_445.getType().hasName("stack_st_X509 *")
and vp7_437.getType().hasName("PKCS7 *")
and vctx_440.(LocalVariable).getFunction() = func
and vrinfos_443.(LocalVariable).getFunction() = func
and vsinfos_444.(LocalVariable).getFunction() = func
and vcerts_445.(LocalVariable).getFunction() = func
and vp7_437.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
