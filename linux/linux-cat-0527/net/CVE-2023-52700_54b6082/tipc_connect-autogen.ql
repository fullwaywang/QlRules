/**
 * @name linux-54b6082aec178f16ad6d193b4ecdc9c4823d9a32-tipc_connect
 * @id cpp/linux/54b6082aec178f16ad6d193b4ecdc9c4823d9a32/tipc-connect
 * @description linux-54b6082aec178f16ad6d193b4ecdc9c4823d9a32-net/tipc/socket.c-tipc_connect CVE-2023-52700
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vm_2576, ValueFieldAccess target_1, ExprStmt target_2, ExprStmt target_3) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("iov_iter_kvec")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="msg_iter"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vm_2576
	and target_0.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="1"
	and target_0.getExpr().(FunctionCall).getArgument(2).(Literal).getValue()="0"
	and target_0.getExpr().(FunctionCall).getArgument(3).(Literal).getValue()="0"
	and target_0.getExpr().(FunctionCall).getArgument(4).(Literal).getValue()="0"
	and target_0.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_1
	and target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Function func, ValueFieldAccess target_1) {
	target_1.getTarget().getName()="skc_state"
	and target_1.getQualifier().(PointerFieldAccess).getTarget().getName()="__sk_common"
	and target_1.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("sock *")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vm_2576, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="msg_namelen"
	and target_2.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vm_2576
	and target_2.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_3(Variable vm_2576, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="msg_flags"
	and target_3.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget()=vm_2576
	and target_3.getExpr().(AssignExpr).getRValue().(Literal).getValue()="64"
}

from Function func, Variable vm_2576, ValueFieldAccess target_1, ExprStmt target_2, ExprStmt target_3
where
not func_0(vm_2576, target_1, target_2, target_3)
and func_1(func, target_1)
and func_2(vm_2576, target_2)
and func_3(vm_2576, target_3)
and vm_2576.getType().hasName("msghdr")
and vm_2576.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
