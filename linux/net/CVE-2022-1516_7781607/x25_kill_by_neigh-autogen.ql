/**
 * @name linux-7781607938c8-x25_kill_by_neigh
 * @id cpp/linux/7781607938c8/x25-kill-by-neigh
 * @description linux-7781607938c8-x25_kill_by_neigh CVE-2022-1516
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vx25_list_lock, EqualityOperation target_5, AddressOfExpr target_6) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("_raw_write_unlock_bh")
		and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vx25_list_lock
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
		and target_6.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vs_1764, EqualityOperation target_5, FunctionCall target_7) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(FunctionCall).getTarget().hasName("lock_sock")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vs_1764
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
		and target_7.getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Variable vs_1764, EqualityOperation target_5, ExprStmt target_4) {
	exists(ExprStmt target_2 |
		target_2.getExpr().(FunctionCall).getTarget().hasName("release_sock")
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vs_1764
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(3)=target_2
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_3(Variable vx25_list_lock, EqualityOperation target_5, AddressOfExpr target_8) {
	exists(ExprStmt target_3 |
		target_3.getExpr().(FunctionCall).getTarget().hasName("_raw_write_lock_bh")
		and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vx25_list_lock
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(4)=target_3
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_5
		and target_3.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_8.getOperand().(VariableAccess).getLocation()))
}

predicate func_4(Variable vs_1764, EqualityOperation target_5, ExprStmt target_4) {
		target_4.getExpr().(FunctionCall).getTarget().hasName("x25_disconnect")
		and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vs_1764
		and target_4.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="101"
		and target_4.getExpr().(FunctionCall).getArgument(2).(Literal).getValue()="0"
		and target_4.getExpr().(FunctionCall).getArgument(3).(Literal).getValue()="0"
		and target_4.getParent().(IfStmt).getCondition()=target_5
}

predicate func_5(Variable vs_1764, EqualityOperation target_5) {
		target_5.getAnOperand().(PointerFieldAccess).getTarget().getName()="neighbour"
		and target_5.getAnOperand().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("x25_sk")
		and target_5.getAnOperand().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vs_1764
		and target_5.getAnOperand().(VariableAccess).getTarget().getType().hasName("x25_neigh *")
}

predicate func_6(Variable vx25_list_lock, AddressOfExpr target_6) {
		target_6.getOperand().(VariableAccess).getTarget()=vx25_list_lock
		and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_raw_write_lock_bh")
}

predicate func_7(Variable vs_1764, FunctionCall target_7) {
		target_7.getTarget().hasName("x25_sk")
		and target_7.getArgument(0).(VariableAccess).getTarget()=vs_1764
}

predicate func_8(Variable vx25_list_lock, AddressOfExpr target_8) {
		target_8.getOperand().(VariableAccess).getTarget()=vx25_list_lock
		and target_8.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_raw_write_unlock_bh")
}

from Function func, Variable vs_1764, Variable vx25_list_lock, ExprStmt target_4, EqualityOperation target_5, AddressOfExpr target_6, FunctionCall target_7, AddressOfExpr target_8
where
not func_0(vx25_list_lock, target_5, target_6)
and not func_1(vs_1764, target_5, target_7)
and not func_2(vs_1764, target_5, target_4)
and not func_3(vx25_list_lock, target_5, target_8)
and func_4(vs_1764, target_5, target_4)
and func_5(vs_1764, target_5)
and func_6(vx25_list_lock, target_6)
and func_7(vs_1764, target_7)
and func_8(vx25_list_lock, target_8)
and vs_1764.getType().hasName("sock *")
and vx25_list_lock.getType().hasName("rwlock_t")
and vs_1764.(LocalVariable).getFunction() = func
and not vx25_list_lock.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
