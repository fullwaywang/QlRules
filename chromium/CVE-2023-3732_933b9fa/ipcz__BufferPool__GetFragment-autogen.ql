/**
 * @name chromium-933b9fad3a5396495f52e44259bcbb61e7913311-ipcz__BufferPool__GetFragment
 * @id cpp/chromium/933b9fad3a5396495f52e44259bcbb61e7913311/ipczbufferpoolgetfragment
 * @description chromium-933b9fad3a5396495f52e44259bcbb61e7913311-third_party/ipcz/src/ipcz/buffer_pool.cc-ipcz__BufferPool__GetFragment CVE-2023-3732
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vdescriptor_21) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("PendingFromDescriptor")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vdescriptor_21
)
}

predicate func_1(Variable vmapping_32, Parameter vdescriptor_21, FunctionCall target_10) {
exists(FunctionCall target_1 |
	exists(VariableAccess obj_0 | obj_0=target_1.getArgument(1) |
		obj_0.getTarget()=vmapping_32
		and obj_0.getLocation().isBefore(target_10.getQualifier().(VariableAccess).getLocation())
	)
	and target_1.getTarget().hasName("MappedFromDescriptor")
	and target_1.getArgument(0).(VariableAccess).getTarget()=vdescriptor_21
)
}

predicate func_2(Parameter vdescriptor_21, VariableAccess target_2) {
	target_2.getTarget()=vdescriptor_21
	and target_2.getParent().(ConstructorCall).getParent().(ReturnStmt).getExpr() instanceof ConstructorCall
}

predicate func_3(Parameter vdescriptor_21, VariableAccess target_3) {
	target_3.getTarget()=vdescriptor_21
	and target_3.getParent().(ConstructorCall).getParent().(ReturnStmt).getExpr() instanceof ConstructorCall
}

predicate func_4(Variable vmapping_32, VariableAccess target_4) {
	target_4.getTarget()=vmapping_32
}

predicate func_5(Parameter vdescriptor_21, ConstructorCall target_5) {
	target_5.getArgument(0).(VariableAccess).getTarget()=vdescriptor_21
	and target_5.getArgument(1).(Literal).getValue()="0"
}

predicate func_6(Variable vmapping_32, Parameter vdescriptor_21, Function func, IfStmt target_6) {
	exists(RelationalOperation obj_0 | obj_0=target_6.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getGreaterOperand() |
			obj_1.getTarget().hasName("end")
			and obj_1.getQualifier().(VariableAccess).getTarget()=vdescriptor_21
		)
		and exists(FunctionCall obj_2 | obj_2=obj_0.getLesserOperand() |
			exists(FunctionCall obj_3 | obj_3=obj_2.getQualifier() |
				obj_3.getTarget().hasName("bytes")
				and obj_3.getQualifier().(VariableAccess).getTarget()=vmapping_32
			)
			and obj_2.getTarget().hasName("size")
		)
	)
	and target_6.getThen().(BlockStmt).getStmt(0).(ReturnStmt).getExpr().(ConstructorCall).getType() instanceof VoidType
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_6
}

/*predicate func_7(Function func, ConstructorCall target_7) {
	target_7.getType() instanceof VoidType
	and target_7.getEnclosingFunction() = func
}

*/
predicate func_8(Variable vmapping_32, Parameter vdescriptor_21, Function func, ReturnStmt target_8) {
	exists(ConstructorCall obj_0 | obj_0=target_8.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getArgument(1) |
			exists(FunctionCall obj_2 | obj_2=obj_1.getArgument(0) |
				obj_2.getTarget().hasName("offset")
				and obj_2.getQualifier().(VariableAccess).getTarget()=vdescriptor_21
			)
			and obj_1.getTarget().hasName("address_at")
			and obj_1.getQualifier().(VariableAccess).getTarget()=vmapping_32
		)
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vdescriptor_21
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_8
}

predicate func_10(Variable vmapping_32, FunctionCall target_10) {
	target_10.getTarget().hasName("address_at")
	and target_10.getQualifier().(VariableAccess).getTarget()=vmapping_32
	and target_10.getArgument(0) instanceof FunctionCall
}

from Function func, Variable vmapping_32, Parameter vdescriptor_21, VariableAccess target_2, VariableAccess target_3, VariableAccess target_4, ConstructorCall target_5, IfStmt target_6, ReturnStmt target_8, FunctionCall target_10
where
not func_0(vdescriptor_21)
and not func_1(vmapping_32, vdescriptor_21, target_10)
and func_2(vdescriptor_21, target_2)
and func_3(vdescriptor_21, target_3)
and func_4(vmapping_32, target_4)
and func_5(vdescriptor_21, target_5)
and func_6(vmapping_32, vdescriptor_21, func, target_6)
and func_8(vmapping_32, vdescriptor_21, func, target_8)
and func_10(vmapping_32, target_10)
and vmapping_32.getType().hasName("type &")
and vdescriptor_21.getType().hasName("const FragmentDescriptor &")
and vmapping_32.(LocalVariable).getFunction() = func
and vdescriptor_21.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
