/**
 * @name linux-15342f930ebebcfe36f2415049736a77d7d2e045-malidp_check_pages_threshold
 * @id cpp/linux/15342f930ebebcfe36f2415049736a77d7d2e045/malidp-check-pages-threshold
 * @description linux-15342f930ebebcfe36f2415049736a77d7d2e045-malidp_check_pages_threshold CVE-2023-23004
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsgt_336, ReturnStmt target_3, ExprStmt target_4, ExprStmt target_5) {
	exists(FunctionCall target_0 |
		target_0.getTarget().hasName("IS_ERR")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vsgt_336
		and target_0.getParent().(IfStmt).getThen()=target_3
		and target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getArgument(0).(VariableAccess).getLocation())
		and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vsgt_336, ReturnStmt target_3, VariableAccess target_1) {
		target_1.getTarget()=vsgt_336
		and target_1.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_3
}

predicate func_2(Variable vsgt_336, ReturnStmt target_3, NotExpr target_2) {
		target_2.getOperand().(VariableAccess).getTarget()=vsgt_336
		and target_2.getParent().(IfStmt).getThen()=target_3
}

predicate func_3(NotExpr target_2, Function func, ReturnStmt target_3) {
		target_3.getParent().(IfStmt).getCondition()=target_2
		and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vsgt_336, ExprStmt target_4) {
		target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vsgt_336
		and target_4.getExpr().(AssignExpr).getRValue().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="get_sg_table"
		and target_4.getExpr().(AssignExpr).getRValue().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="funcs"
		and target_4.getExpr().(AssignExpr).getRValue().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("drm_gem_object *")
		and target_4.getExpr().(AssignExpr).getRValue().(VariableCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("drm_gem_object *")
}

predicate func_5(Variable vsgt_336, ExprStmt target_5) {
		target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("scatterlist *")
		and target_5.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="sgl"
		and target_5.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsgt_336
}

from Function func, Variable vsgt_336, VariableAccess target_1, NotExpr target_2, ReturnStmt target_3, ExprStmt target_4, ExprStmt target_5
where
not func_0(vsgt_336, target_3, target_4, target_5)
and func_1(vsgt_336, target_3, target_1)
and func_2(vsgt_336, target_3, target_2)
and func_3(target_2, func, target_3)
and func_4(vsgt_336, target_4)
and func_5(vsgt_336, target_5)
and vsgt_336.getType().hasName("sg_table *")
and vsgt_336.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
