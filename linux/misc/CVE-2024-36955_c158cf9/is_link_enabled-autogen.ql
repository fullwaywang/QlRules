/**
 * @name linux-c158cf914713efc3bcdc25680c7156c48c12ef6a-is_link_enabled
 * @id cpp/linux/c158cf914713efc3bcdc25680c7156c48c12ef6a/is-link-enabled
 * @description linux-c158cf914713efc3bcdc25680c7156c48c12ef6a-sound/hda/intel-sdw-acpi.c-is_link_enabled CVE-2024-36955
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vlink_32, IfStmt target_1, ExprStmt target_2, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("fwnode_handle_put")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vlink_32
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Function func, IfStmt target_1) {
	target_1.getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("u32")
	and target_1.getCondition().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="2"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vlink_32, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("fwnode_property_read_u32")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vlink_32
	and target_2.getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="intel-quirk-mask"
	and target_2.getExpr().(FunctionCall).getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("u32")
}

from Function func, Variable vlink_32, IfStmt target_1, ExprStmt target_2
where
not func_0(vlink_32, target_1, target_2, func)
and func_1(func, target_1)
and func_2(vlink_32, target_2)
and vlink_32.getType().hasName("fwnode_handle *")
and vlink_32.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
