/**
 * @name linux-5d0495473ee4c1d041b5a917f10446a22c047f47-null_create_dev
 * @id cpp/linux/5d0495473ee4c1d041b5a917f10446a22c047f47/null-create-dev
 * @description linux-5d0495473ee4c1d041b5a917f10446a22c047f47-drivers/block/null_blk/main.c-null_create_dev CVE-2024-36478
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ExprStmt target_2, Function func) {
exists(ExprStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		obj_0.getTarget().hasName("mutex_lock_nested")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
		and obj_0.getArgument(1).(Literal).getValue()="0"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_2.getLocation())
)
}

predicate func_1(IfStmt target_3, Function func) {
exists(ExprStmt target_1 |
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		obj_0.getTarget().hasName("mutex_unlock")
		and obj_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("mutex")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_3.getLocation())
)
}

predicate func_2(Function func, ExprStmt target_2) {
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("null_add_dev")
			and obj_1.getArgument(0).(VariableAccess).getTarget().getType().hasName("nullb_device *")
		)
		and obj_0.getLValue().(VariableAccess).getTarget().getType().hasName("int")
	)
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, IfStmt target_3) {
	exists(BlockStmt obj_0 | obj_0=target_3.getThen() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				obj_2.getTarget().hasName("null_free_dev")
				and obj_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("nullb_device *")
			)
		)
		and obj_0.getStmt(1).(ReturnStmt).getExpr().(VariableAccess).getTarget().getType().hasName("int")
	)
	and target_3.getCondition().(VariableAccess).getTarget().getType().hasName("int")
	and target_3.getEnclosingFunction() = func
}

from Function func, ExprStmt target_2, IfStmt target_3
where
not func_0(target_2, func)
and not func_1(target_3, func)
and func_2(func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
