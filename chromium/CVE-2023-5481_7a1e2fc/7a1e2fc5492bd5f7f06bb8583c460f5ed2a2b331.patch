commit 7a1e2fc5492bd5f7f06bb8583c460f5ed2a2b331	7a1e2fc5492bd5f7f06bb8583c460f5ed2a2b331
Author: Lily Chen <chlily@chromium.org>
Date:   Fri Aug 25 15:49:26 2023 +0000

    [Downloads] Format and simplify/truncate URLs on chrome://downloads page
    
    This tweaks the behavior of chrome://downloads items' displayed URLs
    in several ways:
    
    1. Sends a formatted display version of the URL from the browser, in
       particular with IDNs properly displayed in Unicode and extraneous
       portions of the URL omitted, which previously could be used to
       mislead the user, e.g. by making the actual hostname not visible
       (using a very long user/password).
    3. Refuses to link displayed URLs if they were truncated due to the mojo
       message size limit (c.f. crbug.com/1070451). Such truncated URLs
       won't work properly anyway, so there is no point in linking them.
    
    Screencasts and demo page:
    https://drive.google.com/drive/folders/1b_HO0Knzm7yJAFLTVbKFCR2ARCZ916LM
    
    Observe in screencasts:
    1st link - Before: User can be misled by fake domain name in username.
               After:  The user/pass components are omitted.
    2nd link - Before: The long data URL is clickable in chrome://downloads
                       despite having been truncated for being > 2 MB.
               After:  The long data URL is not clickable.
    3rd link - Before: IDN is displayed in unreadable punycode.
               After:  IDN is displayed in readable characters.
    
    Bug: 1458934
    Change-Id: I0e38cdeb40b34aab7b534ebc213e3ff98829fed5
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4775841
    Reviewed-by: Demetrios Papadopoulos <dpapad@chromium.org>
    Reviewed-by: Joe Mason <joenotcharles@google.com>
    Reviewed-by: Xinghui Lu <xinghuilu@chromium.org>
    Commit-Queue: Lily Chen <chlily@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1188357}

diff --git a/chrome/browser/resources/downloads/item.html b/chrome/browser/resources/downloads/item.html
index 34c31f69c75c2..24ce6e29fd796 100644
--- a/chrome/browser/resources/downloads/item.html
+++ b/chrome/browser/resources/downloads/item.html
@@ -311,7 +311,7 @@
   <div id="details">
     <div id="title-area" role="gridcell"><!--
       Can't have any line breaks.
-      --><a is="action-link" id="file-link" href="[[data.url]]"
+      --><a is="action-link" id="file-link" href="[[data.url.url]]"
           on-click="onFileLinkClick_" focus-row-control
           focus-type="fileLink"
           hidden="[[!shouldLinkFilename_]]">[[data.fileName]]</a><!--
@@ -325,7 +325,7 @@
 
     <div role="gridcell">
       <a id="url" target="_blank" on-click="onUrlClick_" focus-row-control
-          focus-type="url">[[chopUrl_(data.url)]]</a>
+          focus-type="url">[[getDisplayUrlStr_(data.displayUrl)]]</a>
     </div>
 
     <div class="description" role="gridcell"
diff --git a/chrome/browser/resources/downloads/item.ts b/chrome/browser/resources/downloads/item.ts
index 2b3172d30fe8a..0a25d449ff81f 100644
--- a/chrome/browser/resources/downloads/item.ts
+++ b/chrome/browser/resources/downloads/item.ts
@@ -21,8 +21,10 @@ import {FocusRowMixin} from 'chrome://resources/cr_elements/focus_row_mixin.js';
 import {assert} from 'chrome://resources/js/assert_ts.js';
 import {focusWithoutInk} from 'chrome://resources/js/focus_without_ink.js';
 import {loadTimeData} from 'chrome://resources/js/load_time_data.js';
+import {mojoString16ToString} from 'chrome://resources/js/mojo_type_util.js';
 import {sanitizeInnerHtml} from 'chrome://resources/js/parse_html_subset.js';
 import {htmlEscape} from 'chrome://resources/js/util_ts.js';
+import {String16} from 'chrome://resources/mojo/mojo/public/mojom/base/string16.mojom-webui.js';
 import {beforeNextRender, PolymerElement} from 'chrome://resources/polymer/v3_0/polymer/polymer_bundled.min.js';
 
 import {BrowserProxy} from './browser_proxy.js';
@@ -226,10 +228,10 @@ export class DownloadsItemElement extends DownloadsItemElementBase {
   }
 
   /**
-   * @return A reasonably long URL.
+   * @return A JS string of the display URL.
    */
-  private chopUrl_(url: string): string {
-    return url.slice(0, 300);
+  private getDisplayUrlStr_(displayUrl: String16): string {
+    return mojoString16ToString(displayUrl);
   }
 
   private computeClass_(): string {
@@ -576,6 +578,11 @@ export class DownloadsItemElement extends DownloadsItemElementBase {
   }
 
   private observeIsDangerous_() {
+    const removeFileUrlLinks = () => {
+      this.$.url.removeAttribute('href');
+      this.$['file-link'].removeAttribute('href');
+    };
+
     if (!this.data) {
       return;
     }
@@ -587,28 +594,41 @@ export class DownloadsItemElement extends DownloadsItemElementBase {
       DangerType.DEEP_SCANNED_FAILED,
     ];
 
+    // Handle various dangerous cases.
     if (this.isDangerous_) {
-      this.$.url.removeAttribute('href');
+      removeFileUrlLinks();
       this.useFileIcon_ = false;
-    } else if (OVERRIDDEN_ICON_TYPES.includes(
-                   this.data.dangerType as DangerType)) {
+      return;
+    }
+    if (OVERRIDDEN_ICON_TYPES.includes(this.data.dangerType as DangerType)) {
       this.useFileIcon_ = false;
-    } else if (this.data.state === States.ASYNC_SCANNING) {
+      return;
+    }
+    if (this.data.state === States.ASYNC_SCANNING) {
       this.useFileIcon_ = false;
-    } else if (this.data.state === States.PROMPT_FOR_SCANNING) {
+      return;
+    }
+    if (this.data.state === States.PROMPT_FOR_SCANNING) {
       this.useFileIcon_ = false;
+      return;
+    }
+
+    // The file is not dangerous. Link the url if supplied.
+    if (this.data.url) {
+      this.$.url.href = this.data.url.url;
     } else {
-      this.$.url.href = this.data.url;
-      const path = this.data.filePath;
-      IconLoaderImpl.getInstance()
-          .loadIcon(this.$['file-icon'], path)
-          .then(success => {
-            if (path === this.data.filePath &&
-                this.data.state !== States.ASYNC_SCANNING) {
-              this.useFileIcon_ = success;
-            }
-          });
+      removeFileUrlLinks();
     }
+
+    const path = this.data.filePath;
+    IconLoaderImpl.getInstance()
+        .loadIcon(this.$['file-icon'], path)
+        .then(success => {
+          if (path === this.data.filePath &&
+              this.data.state !== States.ASYNC_SCANNING) {
+            this.useFileIcon_ = success;
+          }
+        });
   }
 
   private onCancelClick_() {
@@ -651,6 +671,9 @@ export class DownloadsItemElement extends DownloadsItemElementBase {
   }
 
   private onUrlClick_() {
+    if (!this.data.url) {
+      return;
+    }
     chrome.send(
         'metricsHandler:recordAction', ['Downloads_OpenUrlOfDownloadedItem']);
   }
diff --git a/chrome/browser/ui/webui/downloads/BUILD.gn b/chrome/browser/ui/webui/downloads/BUILD.gn
index 0bb8b1ccb6595..0c3ab417392f6 100644
--- a/chrome/browser/ui/webui/downloads/BUILD.gn
+++ b/chrome/browser/ui/webui/downloads/BUILD.gn
@@ -10,4 +10,9 @@ mojom("mojo_bindings") {
   sources = [ "downloads.mojom" ]
   webui_module_path = "/"
   use_typescript_sources = true
+
+  public_deps = [
+    "//mojo/public/mojom/base",
+    "//url/mojom:url_mojom_gurl",
+  ]
 }
diff --git a/chrome/browser/ui/webui/downloads/downloads.mojom b/chrome/browser/ui/webui/downloads/downloads.mojom
index 721e8f4d04904..a6868f772c81f 100644
--- a/chrome/browser/ui/webui/downloads/downloads.mojom
+++ b/chrome/browser/ui/webui/downloads/downloads.mojom
@@ -4,6 +4,9 @@
 
 module downloads.mojom;
 
+import "mojo/public/mojom/base/string16.mojom";
+import "url/mojom/url.mojom";
+
 // This is the information associated with a download used for rendering in the
 // UI.
 struct Data {
@@ -38,7 +41,13 @@ struct Data {
   // confirmation, the state will indicate the download is in progress, complete
   // or cancelled.
   string state;
-  string url;
+  // The URL of the download item. Present if this field is populated with the
+  // original URL. Omitted if the URL should not be clickable on the downloads
+  // page, due to URL size limits requiring truncation.
+  url.mojom.Url? url;
+  // The display string for the URL in the UI. May be truncated/elided from the
+  // original URL, and IDN domains may be converted to Unicode.
+  mojo_base.mojom.String16 display_url;
 };
 
 interface PageHandlerFactory {
diff --git a/chrome/browser/ui/webui/downloads/downloads_list_tracker.cc b/chrome/browser/ui/webui/downloads/downloads_list_tracker.cc
index ad02ddef8bee3..ba71bc32dbd42 100644
--- a/chrome/browser/ui/webui/downloads/downloads_list_tracker.cc
+++ b/chrome/browser/ui/webui/downloads/downloads_list_tracker.cc
@@ -14,6 +14,7 @@
 #include "base/functional/callback_helpers.h"
 #include "base/i18n/rtl.h"
 #include "base/i18n/unicodestring.h"
+#include "base/strings/escape.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/utf_string_conversions.h"
 #include "base/time/time.h"
@@ -27,6 +28,7 @@
 #include "components/download/public/common/download_danger_type.h"
 #include "components/download/public/common/download_item.h"
 #include "components/safe_browsing/core/common/features.h"
+#include "components/url_formatter/elide_url.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/download_item_utils.h"
 #include "content/public/browser/download_manager.h"
@@ -36,6 +38,7 @@
 #include "net/base/filename_util.h"
 #include "third_party/icu/source/i18n/unicode/datefmt.h"
 #include "ui/base/l10n/time_format.h"
+#include "url/url_constants.h"
 
 using content::BrowserContext;
 using content::DownloadManager;
@@ -45,9 +48,6 @@ using DownloadVector = DownloadManager::DownloadVector;
 
 namespace {
 
-// Max URL length to be sent to the download page.
-const int kMaxURLLength = 2 * 1024 * 1024;
-
 // Returns a string constant to be used as the |danger_type| value in
 // CreateDownloadData(). This can be the empty string, if the danger type is not
 // relevant for the UI.
@@ -107,6 +107,17 @@ std::string TimeFormatLongDate(const base::Time& time) {
   return base::UTF16ToUTF8(base::i18n::UnicodeStringToString16(date_string));
 }
 
+std::u16string GetFormattedDisplayUrl(const GURL& url) {
+  std::u16string result = url_formatter::FormatUrlForSecurityDisplay(url);
+  // Truncate long URL to avoid surpassing mojo data limit (c.f.
+  // crbug.com/1070451). If it's really this long, the user won't be able to see
+  // the end of it anyway.
+  if (result.size() > url::kMaxURLChars) {
+    result.resize(url::kMaxURLChars);
+  }
+  return result;
+}
+
 }  // namespace
 
 DownloadsListTracker::DownloadsListTracker(
@@ -267,10 +278,12 @@ downloads::mojom::DataPtr DownloadsListTracker::CreateDownloadData(
   file_name = base::i18n::GetDisplayStringInLTRDirectionality(file_name);
 
   file_value->file_name = base::UTF16ToUTF8(file_name);
-  file_value->url = download_item->GetURL().spec();
-  // If URL is too long, truncate it.
-  if (file_value->url.size() > kMaxURLLength)
-    file_value->url.resize(kMaxURLLength);
+  // If URL is too long, don't make it clickable.
+  if (download_item->GetURL().is_valid() &&
+      download_item->GetURL().spec().length() <= url::kMaxURLChars) {
+    file_value->url = absl::make_optional<GURL>(download_item->GetURL());
+  }
+  file_value->display_url = GetFormattedDisplayUrl(download_item->GetURL());
   file_value->total = static_cast<int>(download_item->GetTotalBytes());
   file_value->file_externally_removed =
       download_item->GetFileExternallyRemoved();
diff --git a/chrome/browser/ui/webui/downloads/downloads_list_tracker.h b/chrome/browser/ui/webui/downloads/downloads_list_tracker.h
index 2de77ad41ed09..79c97183f43f7 100644
--- a/chrome/browser/ui/webui/downloads/downloads_list_tracker.h
+++ b/chrome/browser/ui/webui/downloads/downloads_list_tracker.h
@@ -12,6 +12,7 @@
 #include <string>
 
 #include "base/functional/callback_forward.h"
+#include "base/gtest_prod_util.h"
 #include "chrome/browser/ui/webui/downloads/downloads.mojom.h"
 #include "components/download/content/public/all_download_item_notifier.h"
 #include "components/download/public/common/download_item.h"
@@ -81,6 +82,13 @@ class DownloadsListTracker
   void SetChunkSizeForTesting(size_t chunk_size);
 
  private:
+  FRIEND_TEST_ALL_PREFIXES(DownloadsListTrackerTest,
+                           CreateDownloadData_UrlFormatting_OmitUserPass);
+  FRIEND_TEST_ALL_PREFIXES(DownloadsListTrackerTest,
+                           CreateDownloadData_UrlFormatting_Idn);
+  FRIEND_TEST_ALL_PREFIXES(DownloadsListTrackerTest,
+                           CreateDownloadData_UrlFormatting_VeryLong);
+
   struct StartTimeComparator {
     bool operator()(const download::DownloadItem* a,
                     const download::DownloadItem* b) const;
diff --git a/chrome/browser/ui/webui/downloads/downloads_list_tracker_unittest.cc b/chrome/browser/ui/webui/downloads/downloads_list_tracker_unittest.cc
index 722245b504d8e..8d8adf54e3606 100644
--- a/chrome/browser/ui/webui/downloads/downloads_list_tracker_unittest.cc
+++ b/chrome/browser/ui/webui/downloads/downloads_list_tracker_unittest.cc
@@ -33,6 +33,7 @@ using download::MockDownloadItem;
 using DownloadVector = std::vector<DownloadItem*>;
 using testing::_;
 using testing::Return;
+using testing::ReturnRefOfCopy;
 
 namespace {
 
@@ -90,6 +91,9 @@ class DownloadsListTrackerTest : public testing::Test {
     ON_CALL(*new_item, GetId()).WillByDefault(Return(id));
     ON_CALL(*new_item, GetStartTime()).WillByDefault(Return(started));
     ON_CALL(*new_item, IsTransient()).WillByDefault(Return(false));
+    ON_CALL(*new_item, GetTargetFilePath())
+        .WillByDefault(
+            ReturnRefOfCopy(base::FilePath(FILE_PATH_LITERAL("foo.txt"))));
 
     return new_item;
   }
@@ -314,3 +318,48 @@ TEST_F(DownloadsListTrackerTest, IgnoreTransientDownloads) {
   std::vector<uint64_t> expected;
   EXPECT_CALL(page_, InsertItems(0, MatchIds(expected)));
 }
+
+TEST_F(DownloadsListTrackerTest,
+       CreateDownloadData_UrlFormatting_OmitUserPass) {
+  MockDownloadItem* item = CreateNextItem();
+  ON_CALL(*item, GetURL())
+      .WillByDefault(ReturnRefOfCopy(GURL("https://user:pass@example.test")));
+
+  auto tracker = std::make_unique<DownloadsListTracker>(
+      manager(), page_.BindAndGetRemote());
+
+  downloads::mojom::DataPtr data = tracker->CreateDownloadData(item);
+  EXPECT_TRUE(data->url);
+  EXPECT_EQ(*data->url, "https://user:pass@example.test/");
+  EXPECT_EQ(data->display_url, u"https://example.test");
+}
+
+TEST_F(DownloadsListTrackerTest, CreateDownloadData_UrlFormatting_Idn) {
+  MockDownloadItem* item = CreateNextItem();
+  ON_CALL(*item, GetURL())
+      .WillByDefault(ReturnRefOfCopy(GURL("https://xn--6qqa088eba.test")));
+
+  auto tracker = std::make_unique<DownloadsListTracker>(
+      manager(), page_.BindAndGetRemote());
+
+  downloads::mojom::DataPtr data = tracker->CreateDownloadData(item);
+  EXPECT_TRUE(data->url);
+  EXPECT_EQ(*data->url, "https://xn--6qqa088eba.test/");
+  EXPECT_EQ(data->display_url, u"https://\u4f60\u597d\u4f60\u597d.test");
+}
+
+TEST_F(DownloadsListTrackerTest, CreateDownloadData_UrlFormatting_VeryLong) {
+  std::string url = "https://" + std::string(2 * 1024 * 1024, 'a') + ".test";
+  std::u16string expected =
+      u"https://" + std::u16string(2 * 1024 * 1024 - 8, 'a');
+
+  MockDownloadItem* item = CreateNextItem();
+  ON_CALL(*item, GetURL()).WillByDefault(ReturnRefOfCopy(GURL(url)));
+
+  auto tracker = std::make_unique<DownloadsListTracker>(
+      manager(), page_.BindAndGetRemote());
+
+  downloads::mojom::DataPtr data = tracker->CreateDownloadData(item);
+  EXPECT_FALSE(data->url);
+  EXPECT_EQ(data->display_url, expected);
+}
diff --git a/chrome/test/data/webui/downloads/BUILD.gn b/chrome/test/data/webui/downloads/BUILD.gn
index cb97b8f560b0f..031b4b8e25c13 100644
--- a/chrome/test/data/webui/downloads/BUILD.gn
+++ b/chrome/test/data/webui/downloads/BUILD.gn
@@ -23,5 +23,6 @@ build_webui_tests("build") {
     "//chrome/browser/resources/downloads:build_ts",
     "//third_party/polymer/v3_0:library",
     "//ui/webui/resources/js:build_ts",
+    "//ui/webui/resources/mojo:build_ts",
   ]
 }
diff --git a/chrome/test/data/webui/downloads/item_test.ts b/chrome/test/data/webui/downloads/item_test.ts
index b8116f61c0309..36af0c186bc99 100644
--- a/chrome/test/data/webui/downloads/item_test.ts
+++ b/chrome/test/data/webui/downloads/item_test.ts
@@ -3,6 +3,7 @@
 // found in the LICENSE file.
 
 import {BrowserProxy, CrToastManagerElement, DangerType, DownloadsItemElement, IconLoaderImpl, loadTimeData, States} from 'chrome://downloads/downloads.js';
+import {stringToMojoString16, stringToMojoUrl} from 'chrome://resources/js/mojo_type_util.js';
 import {flush} from 'chrome://resources/polymer/v3_0/polymer/polymer_bundled.min.js';
 import {assertEquals, assertFalse, assertNotEquals, assertTrue} from 'chrome://webui-test/chai_assert.js';
 import {isVisible} from 'chrome://webui-test/test_util.js';
@@ -36,12 +37,28 @@ suite('item tests', function() {
                fileExternallyRemoved: false,
                hideDate: true,
                state: States.DANGEROUS,
-               url: 'http://evil.com',
+               url: stringToMojoUrl('http://evil.com'),
              }));
     flush();
 
     assertFalse(isVisible(item.$['file-link']));
     assertFalse(item.$.url.hasAttribute('href'));
+    assertFalse(item.$['file-link'].hasAttribute('href'));
+  });
+
+  test('downloads without original url in data aren\'t linkable', () => {
+    const displayUrl = 'https://test.test';
+    item.set('data', createDownload({
+               hideDate: false,
+               state: States.COMPLETE,
+               url: undefined,
+               displayUrl: stringToMojoString16(displayUrl),
+             }));
+    flush();
+
+    assertFalse(item.$.url.hasAttribute('href'));
+    assertFalse(item.$['file-link'].hasAttribute('href'));
+    assertEquals(displayUrl, item.$.url.text);
   });
 
   test('failed deep scans aren\'t linkable', () => {
@@ -50,7 +67,7 @@ suite('item tests', function() {
                fileExternallyRemoved: false,
                hideDate: true,
                state: States.COMPLETE,
-               url: 'http://evil.com',
+               url: stringToMojoUrl('http://evil.com'),
              }));
     flush();
 
@@ -58,6 +75,24 @@ suite('item tests', function() {
     assertFalse(item.$.url.hasAttribute('href'));
   });
 
+  test('url display string is a link to the original url', () => {
+    const url = 'https://' +
+        'a'.repeat(1000) + '.com/document.pdf';
+    const displayUrl = 'https://' +
+        '啊'.repeat(1000) + '.com/document.pdf';
+    item.set('data', createDownload({
+               hideDate: false,
+               state: States.COMPLETE,
+               url: stringToMojoUrl(url),
+               displayUrl: stringToMojoString16(displayUrl),
+             }));
+    flush();
+
+    assertEquals(url, item.$.url.href);
+    assertEquals(url, item.$['file-link'].href);
+    assertEquals(displayUrl, item.$.url.text);
+  });
+
   test('icon loads successfully', async () => {
     testIconLoader.setShouldIconsLoad(true);
     item.set('data', createDownload({filePath: 'unique1', hideDate: false}));
diff --git a/chrome/test/data/webui/downloads/manager_test.ts b/chrome/test/data/webui/downloads/manager_test.ts
index 89eaffdd33f0c..b2e3b69403ed6 100644
--- a/chrome/test/data/webui/downloads/manager_test.ts
+++ b/chrome/test/data/webui/downloads/manager_test.ts
@@ -3,6 +3,7 @@
 // found in the LICENSE file.
 
 import {BrowserProxy, CrToastManagerElement, DangerType, DownloadsManagerElement, loadTimeData, PageRemote, States} from 'chrome://downloads/downloads.js';
+import {stringToMojoString16, stringToMojoUrl} from 'chrome://resources/js/mojo_type_util.js';
 import {isMac} from 'chrome://resources/js/platform.js';
 import {keyDownOn} from 'chrome://resources/polymer/v3_0/iron-test-helpers/mock-interactions.js';
 import {flush} from 'chrome://resources/polymer/v3_0/polymer/polymer_bundled.min.js';
@@ -30,19 +31,28 @@ suite('manager tests', function() {
     assertTrue(!!toastManager);
   });
 
-  test('long URLs elide', async () => {
-    callbackRouterRemote.insertItems(0, [createDownload({
-                                       fileName: 'file name',
-                                       state: States.COMPLETE,
-                                       sinceString: 'Today',
-                                       url: 'a'.repeat(1000),
-                                     })]);
+  test('long URLs don\'t elide', async () => {
+    const url = 'https://' +
+        'a'.repeat(1000) + '.com/document.pdf';
+    const displayUrl = 'https://' +
+        '啊'.repeat(1000) + '.com/document.pdf';
+    callbackRouterRemote.insertItems(
+        0, [createDownload({
+          fileName: 'file name',
+          state: States.COMPLETE,
+          sinceString: 'Today',
+          url: stringToMojoUrl(url),
+          displayUrl: stringToMojoString16(displayUrl),
+        })]);
     await callbackRouterRemote.$.flushForTesting();
     flush();
 
     const item = manager.shadowRoot!.querySelector('downloads-item')!;
     assertLT(item.$.url.offsetWidth, item.offsetWidth);
-    assertEquals(300, item.$.url.textContent!.length);
+    assertEquals(displayUrl, item.$.url.textContent);
+    assertEquals(url, item.$.url.href);
+    assertEquals(url, item.$['file-link'].href);
+    assertEquals(url, item.$.url.href);
   });
 
   test('inserting items at beginning render dates correctly', async () => {
@@ -101,7 +111,7 @@ suite('manager tests', function() {
                                        fileName: 'file name',
                                        state: States.COMPLETE,
                                        sinceString: 'Today',
-                                       url: 'a'.repeat(1000),
+                                       url: stringToMojoUrl('a'.repeat(1000)),
                                      })]);
     await callbackRouterRemote.$.flushForTesting();
     flush();
@@ -153,7 +163,7 @@ suite('manager tests', function() {
                                        fileName: 'file name',
                                        state: States.COMPLETE,
                                        sinceString: 'Today',
-                                       url: 'a'.repeat(1000),
+                                       url: stringToMojoUrl('a'.repeat(1000)),
                                      })]);
     await callbackRouterRemote.$.flushForTesting();
 
diff --git a/chrome/test/data/webui/downloads/test_support.ts b/chrome/test/data/webui/downloads/test_support.ts
index 08685662c9d40..f1e4dff6d7db2 100644
--- a/chrome/test/data/webui/downloads/test_support.ts
+++ b/chrome/test/data/webui/downloads/test_support.ts
@@ -3,6 +3,7 @@
 // found in the LICENSE file.
 
 import {DangerType, IconLoader, MojomData, PageCallbackRouter, PageHandlerInterface, PageRemote, States} from 'chrome://downloads/downloads.js';
+import {stringToMojoString16, stringToMojoUrl} from 'chrome://resources/js/mojo_type_util.js';
 import {TestBrowserProxy} from 'chrome://webui-test/test_browser_proxy.js';
 
 export class TestDownloadsProxy {
@@ -105,7 +106,8 @@ export function createDownload(config?: Partial<MojomData>): MojomData {
         started: Date.now() - 10000,
         state: States.COMPLETE,
         total: -1,
-        url: 'http://permission.site',
+        url: stringToMojoUrl('http://permission.site'),
+        displayUrl: stringToMojoString16('http://permission.site'),
       },
       config || {});
 }
diff --git a/chrome/test/data/webui/js/mojo_type_util_test.ts b/chrome/test/data/webui/js/mojo_type_util_test.ts
index c38717a0b9cd0..4a77b3710d8af 100644
--- a/chrome/test/data/webui/js/mojo_type_util_test.ts
+++ b/chrome/test/data/webui/js/mojo_type_util_test.ts
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-import {mojoString16ToString, stringToMojoString16} from 'chrome://resources/js/mojo_type_util.js';
+import {mojoString16ToString, stringToMojoString16, stringToMojoUrl} from 'chrome://resources/js/mojo_type_util.js';
 import {assertDeepEquals, assertEquals} from 'chrome://webui-test/chai_assert.js';
 
 suite('MojoTypeUtilTest', () => {
@@ -17,4 +17,18 @@ suite('MojoTypeUtilTest', () => {
     assertEquals(mojoString16ToString({data: [0x68, 0x69]}), 'hi');
     assertEquals(mojoString16ToString({data: [0x4f60, 0x597d]}), '你好');
   });
+
+  test('Can convert strings to mojo Urls', () => {
+    assertDeepEquals(stringToMojoUrl(''), {url: ''});
+    assertDeepEquals(
+        stringToMojoUrl('https://chromium.org'), {url: 'https://chromium.org'});
+    assertDeepEquals(
+        stringToMojoUrl('https://user:pass@example.test'),
+        {url: 'https://user:pass@example.test'});
+    assertDeepEquals(
+        stringToMojoUrl('http://insecure.test'), {url: 'http://insecure.test'});
+    assertDeepEquals(
+        stringToMojoUrl('file:///home/test/test.pdf'),
+        {url: 'file:///home/test/test.pdf'});
+  });
 });
diff --git a/ui/webui/resources/js/mojo_type_util.ts b/ui/webui/resources/js/mojo_type_util.ts
index e02a5844f1b62..08264d870e5f7 100644
--- a/ui/webui/resources/js/mojo_type_util.ts
+++ b/ui/webui/resources/js/mojo_type_util.ts
@@ -3,6 +3,7 @@
 // found in the LICENSE file.
 
 import {String16} from 'chrome://resources/mojo/mojo/public/mojom/base/string16.mojom-webui.js';
+import {Url} from 'chrome://resources/mojo/url/mojom/url.mojom-webui.js';
 
 export function stringToMojoString16(s: string): String16 {
   return {data: Array.from(s, c => c.charCodeAt(0))};
@@ -11,3 +12,8 @@ export function stringToMojoString16(s: string): String16 {
 export function mojoString16ToString(str16: String16): string {
   return str16.data.map((ch: number) => String.fromCodePoint(ch)).join('');
 }
+
+// Note: This does not do any validation of the URL string.
+export function stringToMojoUrl(s: string): Url {
+  return {url: s};
+}
