/**
 * @name linux-ce683e5f9d045e5d67d1312a42b359cb2ab2a13c-check_entry_size_and_hooks
 * @id cpp/linux/ce683e5f9d045e5d67d1312a42b359cb2ab2a13c/check-entry-size-and-hooks
 * @description linux-ce683e5f9d045e5d67d1312a42b359cb2ab2a13c-net/ipv4/netfilter/arp_tables.c-check_entry_size_and_hooks CVE-2016-4998
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter ve_567, ExprStmt target_1) {
exists(PointerFieldAccess target_0 |
	target_0.getTarget().getName()="elems"
	and target_0.getQualifier().(VariableAccess).getTarget()=ve_567
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Parameter ve_567, ExprStmt target_1) {
	target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("xt_check_entry_offsets")
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=ve_567
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="target_offset"
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_567
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="next_offset"
	and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=ve_567
}

from Function func, Parameter ve_567, ExprStmt target_1
where
not func_0(ve_567, target_1)
and func_1(ve_567, target_1)
and ve_567.getType().hasName("arpt_entry *")
and ve_567.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
