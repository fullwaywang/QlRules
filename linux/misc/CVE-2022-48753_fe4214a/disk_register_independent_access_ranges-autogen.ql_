/**
 * @name linux-fe4214a07e0b53d2af711f57519e33739c5df23f-disk_register_independent_access_ranges
 * @id cpp/linux/fe4214a07e0b53d2af711f57519e33739c5df23f/disk-register-independent-access-ranges
 * @description linux-fe4214a07e0b53d2af711f57519e33739c5df23f-block/blk-ia-ranges.c-disk_register_independent_access_ranges CVE-2022-48753
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable viars_121, RelationalOperation target_3, FunctionCall target_0) {
	exists(VariableAccess obj_0 | obj_0=target_0.getArgument(0) |
		obj_0.getTarget()=viars_121
		and obj_0.getLocation().isBefore(target_3.getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	)
	and target_0.getTarget().hasName("kfree")
	and not target_0.getTarget().hasName("kobject_put")
}

predicate func_1(Variable viars_121, RelationalOperation target_3) {
exists(AddressOfExpr target_1 |
	exists(PointerFieldAccess obj_0 | obj_0=target_1.getOperand() |
		obj_0.getTarget().getName()="kobj"
		and obj_0.getQualifier().(VariableAccess).getTarget()=viars_121
	)
	and target_1.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
	and target_1.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_2(Variable viars_121, VariableAccess target_2) {
	target_2.getTarget()=viars_121
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_3(Variable viars_121, RelationalOperation target_3) {
	exists(PointerFieldAccess obj_0 | obj_0=target_3.getGreaterOperand() |
		obj_0.getTarget().getName()="nr_ia_ranges"
		and obj_0.getQualifier().(VariableAccess).getTarget()=viars_121
	)
	and  (target_3 instanceof GTExpr or target_3 instanceof LTExpr)
	and target_3.getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Variable viars_121, FunctionCall target_0, VariableAccess target_2, RelationalOperation target_3
where
func_0(viars_121, target_3, target_0)
and not func_1(viars_121, target_3)
and func_2(viars_121, target_2)
and func_3(viars_121, target_3)
and viars_121.getType().hasName("blk_independent_access_ranges *")
and viars_121.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
