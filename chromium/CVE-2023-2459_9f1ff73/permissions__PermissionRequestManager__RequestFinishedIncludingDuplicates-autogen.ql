/**
 * @name chromium-9f1ff7304338085a1e9b42dfd4f5df8baef69c36-permissions__PermissionRequestManager__RequestFinishedIncludingDuplicates
 * @id cpp/chromium/9f1ff7304338085a1e9b42dfd4f5df8baef69c36/permissionspermissionrequestmanagerrequestfinishedincludingduplicates
 * @description chromium-9f1ff7304338085a1e9b42dfd4f5df8baef69c36-components/permissions/permission_request_manager.cc-permissions__PermissionRequestManager__RequestFinishedIncludingDuplicates CVE-2023-2459
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vrequest_1095, Initializer target_0) {
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getQualifier() |
			obj_1.getTarget().getName()="duplicate_requests_"
			and obj_1.getQualifier().(ThisExpr).getType() instanceof PointerType
		)
		and obj_0.getTarget().hasName("equal_range")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vrequest_1095
	)
}

predicate func_1(ExprStmt target_17, Function func, DeclStmt target_1) {
	target_17.getLocation().isBefore(target_1.getLocation())
	and target_1.getEnclosingFunction() = func
}

predicate func_3(Parameter vrequest_1095, ExprStmt target_17, FunctionCall target_18) {
exists(FunctionCall target_3 |
	exists(FunctionCall obj_0 | obj_0=target_3.getArgument(0) |
		obj_0.getTarget().hasName("BindRepeating")
		and obj_0.getArgument(0).(LambdaExpression).getType() instanceof LocalClass
	)
	and target_3.getTarget().hasName("VisitDuplicateRequests")
	and target_3.getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_3.getArgument(1).(VariableAccess).getTarget()=vrequest_1095
	and target_17.getExpr().(FunctionCall).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getArgument(1).(VariableAccess).getLocation())
	and target_3.getArgument(1).(VariableAccess).getLocation().isBefore(target_18.getArgument(0).(VariableAccess).getLocation())
)
}

predicate func_4(ForStmt target_12, Function func) {
exists(IfStmt target_4 |
	exists(FunctionCall obj_0 | obj_0=target_4.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getArgument(1) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().getName()="duplicate_requests_"
				and obj_2.getQualifier().(ThisExpr).getType() instanceof PointerType
			)
			and obj_1.getTarget().hasName("end")
		)
		and obj_0.getTarget().hasName("operator!=")
		and obj_0.getArgument(0).(VariableAccess).getType().hasName("iterator")
	)
	and exists(BlockStmt obj_3 | obj_3=target_4.getThen() |
		exists(ExprStmt obj_4 | obj_4=obj_3.getStmt(0) |
			exists(FunctionCall obj_5 | obj_5=obj_4.getExpr() |
				exists(PointerFieldAccess obj_6 | obj_6=obj_5.getQualifier() |
					obj_6.getTarget().getName()="duplicate_requests_"
					and obj_6.getQualifier().(ThisExpr).getType() instanceof PointerType
				)
				and obj_5.getTarget().hasName("erase")
				and obj_5.getArgument(0).(ConstructorCall).getArgument(0).(VariableAccess).getType().hasName("iterator")
			)
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
	and target_4.getLocation().isBefore(target_12.getLocation())
)
}

/*predicate func_6(Variable vit_1102, ExprStmt target_19) {
exists(FunctionCall target_6 |
	exists(PointerFieldAccess obj_0 | obj_0=target_6.getQualifier() |
		obj_0.getTarget().getName()="duplicate_requests_"
		and obj_0.getQualifier().(ThisExpr).getType() instanceof PointerType
	)
	and exists(FunctionCall obj_1 | obj_1=target_6.getParent() |
		obj_1.getArgument(0).(VariableAccess).getTarget()=vit_1102
		and obj_1.getArgument(1) instanceof ValueFieldAccess
		and obj_1.getParent().(ForStmt).getStmt()=target_19
	)
	and target_6.getTarget().hasName("end")
)
}

*/
/*predicate func_7(Function func) {
exists(FunctionCall target_7 |
	exists(PointerFieldAccess obj_0 | obj_0=target_7.getQualifier() |
		obj_0.getTarget().getName()="duplicate_requests_"
		and obj_0.getQualifier().(ThisExpr).getType() instanceof PointerType
	)
	and target_7.getTarget().hasName("erase")
	and target_7.getArgument(0).(ConstructorCall).getArgument(0).(VariableAccess).getType().hasName("iterator")
	and target_7.getEnclosingFunction() = func
)
}

*/
predicate func_8(Function func, PointerFieldAccess target_8) {
	target_8.getTarget().getName()="duplicate_requests_"
	and target_8.getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Function func, PointerFieldAccess target_9) {
	target_9.getTarget().getName()="duplicate_requests_"
	and target_9.getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_9.getEnclosingFunction() = func
}

predicate func_11(Parameter vrequest_1095, ExprStmt target_16, VariableAccess target_11) {
	exists(FunctionCall obj_0 | obj_0=target_11.getParent() |
		exists(Initializer obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getQualifier() |
					obj_3.getTarget().getName()="duplicate_requests_"
					and obj_3.getQualifier().(ThisExpr).getType() instanceof PointerType
				)
				and obj_2.getTarget().hasName("equal_range")
			)
		)
	)
	and target_11.getTarget()=vrequest_1095
	and target_11.getLocation().isBefore(target_16.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
}

predicate func_12(Variable vrange_1101, Variable vit_1102, Function func, ForStmt target_12) {
	exists(FunctionCall obj_0 | obj_0=target_12.getCondition() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getArgument(1) |
			obj_1.getTarget().getName()="second"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vrange_1101
		)
		and obj_0.getTarget().hasName("operator!=")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vit_1102
	)
	and exists(FunctionCall obj_2 | obj_2=target_12.getUpdate() |
		obj_2.getTarget().hasName("operator++")
		and obj_2.getQualifier().(VariableAccess).getTarget()=vit_1102
	)
	and exists(ExprStmt obj_3 | obj_3=target_12.getStmt() |
		exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
			exists(PointerFieldAccess obj_5 | obj_5=obj_4.getQualifier() |
				obj_5.getTarget().getName()="second"
				and obj_5.getQualifier().(FunctionCall).getQualifier().(VariableAccess).getTarget()=vit_1102
			)
			and obj_4.getTarget().hasName("RequestFinished")
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_12
}

/*predicate func_13(Variable vrange_1101, Variable vit_1102, ExprStmt target_19, VariableAccess target_13) {
	exists(FunctionCall obj_0 | obj_0=target_13.getParent() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getArgument(1) |
			obj_1.getTarget().getName()="second"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vrange_1101
		)
		and obj_0.getParent().(ForStmt).getStmt()=target_19
	)
	and target_13.getTarget()=vit_1102
}

*/
/*predicate func_14(Variable vrange_1101, Variable vit_1102, ExprStmt target_19, ValueFieldAccess target_14) {
	exists(FunctionCall obj_0 | obj_0=target_14.getParent() |
		obj_0.getArgument(0).(VariableAccess).getTarget()=vit_1102
		and obj_0.getParent().(ForStmt).getStmt()=target_19
	)
	and target_14.getTarget().getName()="second"
	and target_14.getQualifier().(VariableAccess).getTarget()=vrange_1101
}

*/
/*predicate func_15(Variable vit_1102, FunctionCall target_15) {
	exists(PointerFieldAccess obj_0 | obj_0=target_15.getQualifier() |
		obj_0.getTarget().getName()="second"
		and obj_0.getQualifier().(FunctionCall).getQualifier().(VariableAccess).getTarget()=vit_1102
	)
	and target_15.getTarget().hasName("RequestFinished")
}

*/
predicate func_16(Parameter vrequest_1095, Function func, ExprStmt target_16) {
	exists(FunctionCall obj_0 | obj_0=target_16.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getQualifier() |
			obj_1.getTarget().getName()="duplicate_requests_"
			and obj_1.getQualifier().(ThisExpr).getType() instanceof PointerType
		)
		and obj_0.getTarget().hasName("erase")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vrequest_1095
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_16
}

predicate func_17(Parameter vrequest_1095, ExprStmt target_17) {
	exists(FunctionCall obj_0 | obj_0=target_17.getExpr() |
		obj_0.getTarget().hasName("RequestFinished")
		and obj_0.getQualifier().(VariableAccess).getTarget()=vrequest_1095
	)
}

predicate func_18(Parameter vrequest_1095, FunctionCall target_18) {
	exists(PointerFieldAccess obj_0 | obj_0=target_18.getQualifier() |
		obj_0.getTarget().getName()="duplicate_requests_"
		and obj_0.getQualifier().(ThisExpr).getType() instanceof PointerType
	)
	and target_18.getTarget().hasName("equal_range")
	and target_18.getArgument(0).(VariableAccess).getTarget()=vrequest_1095
}

predicate func_19(Function func, ExprStmt target_19) {
	target_19.getExpr() instanceof FunctionCall
	and target_19.getEnclosingFunction() = func
}

from Function func, Parameter vrequest_1095, Variable vrange_1101, Variable vit_1102, Initializer target_0, DeclStmt target_1, PointerFieldAccess target_8, PointerFieldAccess target_9, VariableAccess target_11, ForStmt target_12, ExprStmt target_16, ExprStmt target_17, FunctionCall target_18, ExprStmt target_19
where
func_0(vrequest_1095, target_0)
and func_1(target_17, func, target_1)
and not func_3(vrequest_1095, target_17, target_18)
and not func_4(target_12, func)
and func_8(func, target_8)
and func_9(func, target_9)
and func_11(vrequest_1095, target_16, target_11)
and func_12(vrange_1101, vit_1102, func, target_12)
and func_16(vrequest_1095, func, target_16)
and func_17(vrequest_1095, target_17)
and func_18(vrequest_1095, target_18)
and func_19(func, target_19)
and vrequest_1095.getType().hasName("PermissionRequest *")
and vrange_1101.getType().hasName("pair<__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<PermissionRequest *, PermissionRequest *>, void *> *>>, __hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<PermissionRequest *, PermissionRequest *>, void *> *>>>")
and vit_1102.getType().hasName("__hash_map_iterator<__hash_iterator<__hash_node<__hash_value_type<PermissionRequest *, PermissionRequest *>, void *> *>>")
and vrequest_1095.getFunction() = func
and vrange_1101.(LocalVariable).getFunction() = func
and vit_1102.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
