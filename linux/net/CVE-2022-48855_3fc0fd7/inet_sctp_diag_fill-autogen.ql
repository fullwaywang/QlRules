/**
 * @name linux-3fc0fd724d199e061432b66a8d85b7d48fe485f7-inet_sctp_diag_fill
 * @id cpp/linux/3fc0fd724d199e061432b66a8d85b7d48fe485f7/inet-sctp-diag-fill
 * @description linux-3fc0fd724d199e061432b66a8d85b7d48fe485f7-net/sctp/sctp_diag.c-inet_sctp_diag_fill CVE-2022-48855
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vr_117, IfStmt target_3, FunctionCall target_4, ExprStmt target_5, Function func) {
exists(ExprStmt target_0 |
	exists(AssignExpr obj_0 | obj_0=target_0.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="idiag_expires"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vr_117
		)
		and obj_0.getRValue().(Literal).getValue()="0"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_3.getLocation())
	and target_4.getArgument(2).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_5.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
)
}

predicate func_1(Variable vr_117, VariableAccess target_6, ExprStmt target_1) {
	exists(AssignExpr obj_0 | obj_0=target_1.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="idiag_timer"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vr_117
		)
		and obj_0.getRValue().(Literal).getValue()="0"
	)
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_2(Variable vr_117, VariableAccess target_6, ExprStmt target_2) {
	exists(AssignExpr obj_0 | obj_0=target_2.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="idiag_retrans"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vr_117
		)
		and obj_0.getRValue().(Literal).getValue()="0"
	)
	and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_6
}

predicate func_3(Function func, IfStmt target_3) {
	exists(BitwiseAndExpr obj_0 | obj_0=target_3.getCondition() |
		obj_0.getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
		and obj_0.getRightOperand().(BinaryBitwiseOperation).getValue()="64"
	)
	and exists(BlockStmt obj_1 | obj_1=target_3.getThen() |
		exists(IfStmt obj_2 | obj_2=obj_1.getStmt(2) |
			exists(LogicalAndExpr obj_3 | obj_3=obj_2.getCondition() |
				exists(PointerFieldAccess obj_4 | obj_4=obj_3.getRightOperand() |
					exists(PointerFieldAccess obj_5 | obj_5=obj_4.getQualifier() |
						obj_5.getTarget().getName()="ep"
						and obj_5.getQualifier().(VariableAccess).getTarget().getType().hasName("sctp_association *")
					)
					and obj_4.getTarget().getName()="sndbuf_policy"
				)
				and obj_3.getLeftOperand().(VariableAccess).getTarget().getType().hasName("sctp_association *")
			)
			and exists(ExprStmt obj_6 | obj_6=obj_2.getThen() |
				exists(AssignExpr obj_7 | obj_7=obj_6.getExpr() |
					exists(PointerFieldAccess obj_8 | obj_8=obj_7.getRValue() |
						obj_8.getTarget().getName()="sndbuf_used"
						and obj_8.getQualifier().(VariableAccess).getTarget().getType().hasName("sctp_association *")
					)
					and obj_7.getLValue().(VariableAccess).getTarget().getType().hasName("int")
				)
			)
			and exists(ExprStmt obj_9 | obj_9=obj_2.getElse() |
				exists(AssignExpr obj_10 | obj_10=obj_9.getExpr() |
					exists(FunctionCall obj_11 | obj_11=obj_10.getRValue() |
						obj_11.getTarget().hasName("sk_wmem_alloc_get")
						and obj_11.getArgument(0).(VariableAccess).getTarget().getType().hasName("sock *")
					)
					and obj_10.getLValue().(VariableAccess).getTarget().getType().hasName("int")
				)
			)
		)
	)
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vr_117, FunctionCall target_4) {
	target_4.getTarget().hasName("inet_diag_msg_attrs_fill")
	and target_4.getArgument(0).(VariableAccess).getTarget().getType().hasName("sock *")
	and target_4.getArgument(1).(VariableAccess).getTarget().getType().hasName("sk_buff *")
	and target_4.getArgument(2).(VariableAccess).getTarget()=vr_117
	and target_4.getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
	and target_4.getArgument(4).(VariableAccess).getTarget().getType().hasName("user_namespace *")
	and target_4.getArgument(5).(VariableAccess).getTarget().getType().hasName("bool")
}

predicate func_5(Variable vr_117, ExprStmt target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getExpr() |
		obj_0.getTarget().hasName("sctp_diag_get_info")
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("sock *")
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vr_117
		and obj_0.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("sctp_infox")
	)
}

predicate func_6(Parameter vasoc_107, BlockStmt target_7, VariableAccess target_6) {
	target_6.getTarget()=vasoc_107
	and target_6.getParent().(IfStmt).getThen()=target_7
}

predicate func_7(Parameter vasoc_107, Variable vr_117, BlockStmt target_7) {
	exists(ExprStmt obj_0 | obj_0=target_7.getStmt(0) |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			obj_1.getTarget().hasName("inet_diag_msg_sctpasoc_fill")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vr_117
			and obj_1.getArgument(1).(VariableAccess).getTarget().getType().hasName("sock *")
			and obj_1.getArgument(2).(VariableAccess).getTarget()=vasoc_107
		)
	)
}

from Function func, Parameter vasoc_107, Variable vr_117, ExprStmt target_1, ExprStmt target_2, IfStmt target_3, FunctionCall target_4, ExprStmt target_5, VariableAccess target_6, BlockStmt target_7
where
not func_0(vr_117, target_3, target_4, target_5, func)
and func_1(vr_117, target_6, target_1)
and func_2(vr_117, target_6, target_2)
and func_3(func, target_3)
and func_4(vr_117, target_4)
and func_5(vr_117, target_5)
and func_6(vasoc_107, target_7, target_6)
and func_7(vasoc_107, vr_117, target_7)
and vasoc_107.getType().hasName("sctp_association *")
and vr_117.getType().hasName("inet_diag_msg *")
and vasoc_107.getFunction() = func
and vr_117.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
