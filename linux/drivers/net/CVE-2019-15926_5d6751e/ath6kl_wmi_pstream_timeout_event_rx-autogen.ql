/**
 * @name linux-5d6751eaff672ea77642e74e92e6c0ac7f9709ab-ath6kl_wmi_pstream_timeout_event_rx
 * @id cpp/linux/5d6751eaff672ea77642e74e92e6c0ac7f9709ab/ath6kl-wmi-pstream-timeout-event-rx
 * @description linux-5d6751eaff672ea77642e74e92e6c0ac7f9709ab-drivers/net/wireless/ath/ath6kl/wmi.c-ath6kl_wmi_pstream_timeout_event_rx CVE-2019-15926
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vev_1173, ExprStmt target_1, ExprStmt target_2, ExprStmt target_3, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getTarget().getName()="traffic_class"
	and target_0.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vev_1173
	and target_0.getCondition().(RelationalOperation).getLesserOperand().(Literal).getValue()="4"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("ath6kl_err")
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="invalid traffic class: %d\n"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="traffic_class"
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vev_1173
	and target_0.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-22"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(RelationalOperation).getGreaterOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("spin_lock_bh")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="lock"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("wmi *")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vev_1173, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vev_1173
	and target_2.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("u8 *")
}

predicate func_3(Variable vev_1173, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getTarget().getName()="stream_exist_for_ac"
	and target_3.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayBase().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("wmi *")
	and target_3.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getTarget().getName()="traffic_class"
	and target_3.getExpr().(AssignExpr).getLValue().(ArrayExpr).getArrayOffset().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vev_1173
	and target_3.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

from Function func, Variable vev_1173, ExprStmt target_1, ExprStmt target_2, ExprStmt target_3
where
not func_0(vev_1173, target_1, target_2, target_3, func)
and func_1(func, target_1)
and func_2(vev_1173, target_2)
and func_3(vev_1173, target_3)
and vev_1173.getType().hasName("wmi_pstream_timeout_event *")
and vev_1173.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
