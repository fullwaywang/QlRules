/**
 * @name chromium-36a29bcbf4d9b5967bfbc4cf3540c1355ca57d09-content__WebBluetoothServiceImpl__Create
 * @id cpp/chromium/36a29bcbf4d9b5967bfbc4cf3540c1355ca57d09/contentwebbluetoothserviceimplcreate
 * @description chromium-36a29bcbf4d9b5967bfbc4cf3540c1355ca57d09-content/browser/bluetooth/web_bluetooth_service_impl.cc-content__WebBluetoothServiceImpl__Create CVE-2023-2462
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vrender_frame_host_537, FunctionCall target_1, PointerDereferenceExpr target_2, Function func) {
exists(IfStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getQualifier() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getQualifier() |
				obj_2.getTarget().hasName("GetOutermostMainFrame")
				and obj_2.getQualifier().(VariableAccess).getTarget()=vrender_frame_host_537
			)
			and obj_1.getTarget().hasName("GetLastCommittedOrigin")
		)
		and obj_0.getTarget().hasName("opaque")
	)
	and exists(BlockStmt obj_3 | obj_3=target_0.getThen() |
		exists(ExprStmt obj_4 | obj_4=obj_3.getStmt(0) |
			exists(FunctionCall obj_5 | obj_5=obj_4.getExpr() |
				obj_5.getTarget().hasName("ReportBadMessage")
				and obj_5.getArgument(0).(ConstructorCall).getArgument(0).(StringLiteral).getValue()="Web Bluetooth is not allowed from an opaque origin."
			)
		)
		and obj_3.getStmt(1).(ReturnStmt).getExpr().(Literal).getValue()="0"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getFollowingStmt() instanceof ReturnStmt
	and target_1.getQualifier().(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(FunctionCall).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getOperand().(VariableAccess).getLocation())
)
}

predicate func_1(Parameter vrender_frame_host_537, FunctionCall target_1) {
	target_1.getTarget().hasName("IsNestedWithinFencedFrame")
	and target_1.getQualifier().(VariableAccess).getTarget()=vrender_frame_host_537
}

predicate func_2(Parameter vrender_frame_host_537, PointerDereferenceExpr target_2) {
	target_2.getOperand().(VariableAccess).getTarget()=vrender_frame_host_537
}

from Function func, Parameter vrender_frame_host_537, FunctionCall target_1, PointerDereferenceExpr target_2
where
not func_0(vrender_frame_host_537, target_1, target_2, func)
and func_1(vrender_frame_host_537, target_1)
and func_2(vrender_frame_host_537, target_2)
and vrender_frame_host_537.getType().hasName("RenderFrameHost *")
and vrender_frame_host_537.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
