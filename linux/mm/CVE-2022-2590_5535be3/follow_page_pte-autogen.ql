/**
 * @name linux-5535be3099717646781ce1540cf725965d680e7b-follow_page_pte
 * @id cpp/linux/5535be3099717646781ce1540cf725965d680e7b/follow-page-pte
 * @description linux-5535be3099717646781ce1540cf725965d680e7b-mm/gup.c-follow_page_pte CVE-2022-2590
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vaddress_492, Variable vpage_496, Variable vpte_498, Parameter vvma_491, IfStmt target_9, ExprStmt target_0) {
	target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vpage_496
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("vm_normal_page")
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvma_491
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vaddress_492
	and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vpte_498
	and target_9.getLocation().isBefore(target_0.getLocation())
}

predicate func_3(Variable vpage_496, LogicalAndExpr target_10) {
exists(ExprStmt target_3 |
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vpage_496
	and target_3.getExpr().(AssignExpr).getRValue() instanceof Literal
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_3
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10)
}

predicate func_4(LogicalAndExpr target_10, Function func) {
exists(GotoStmt target_4 |
	target_4.getName() ="out"
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_4
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10
	and target_4.getEnclosingFunction() = func)
}

predicate func_5(Variable vptl_497, Variable vptep_498, BlockStmt target_5) {
	target_5.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
	and target_5.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vptl_497
	and target_5.getStmt(1).(ExprStmt).getExpr().(VariableAccess).getTarget()=vptep_498
}

predicate func_7(LogicalAndExpr target_10, Function func, DoStmt target_7) {
	target_7.getCondition() instanceof Literal
	and target_7.getStmt() instanceof BlockStmt
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10
	and target_7.getEnclosingFunction() = func
}

predicate func_8(LogicalAndExpr target_10, Function func, ReturnStmt target_8) {
	target_8.getExpr().(Literal).getValue()="0"
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_10
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Variable vpte_498, IfStmt target_9) {
	target_9.getCondition().(LogicalAndExpr).getLeftOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_9.getCondition().(LogicalAndExpr).getLeftOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="1"
	and target_9.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("can_follow_write_pte")
	and target_9.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpte_498
	and target_9.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_9.getThen().(BlockStmt).getStmt(0) instanceof DoStmt
	and target_9.getThen().(BlockStmt).getStmt(1) instanceof ReturnStmt
}

predicate func_10(Variable vpte_498, LogicalAndExpr target_10) {
	target_10.getLeftOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget().getType().hasName("unsigned int")
	and target_10.getLeftOperand().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="1"
	and target_10.getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("can_follow_write_pte")
	and target_10.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpte_498
	and target_10.getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned int")
}

from Function func, Parameter vaddress_492, Variable vpage_496, Variable vptl_497, Variable vptep_498, Variable vpte_498, Parameter vvma_491, ExprStmt target_0, BlockStmt target_5, DoStmt target_7, ReturnStmt target_8, IfStmt target_9, LogicalAndExpr target_10
where
func_0(vaddress_492, vpage_496, vpte_498, vvma_491, target_9, target_0)
and not func_3(vpage_496, target_10)
and not func_4(target_10, func)
and func_5(vptl_497, vptep_498, target_5)
and func_7(target_10, func, target_7)
and func_8(target_10, func, target_8)
and func_9(vpte_498, target_9)
and func_10(vpte_498, target_10)
and vaddress_492.getType().hasName("unsigned long")
and vpage_496.getType().hasName("page *")
and vptl_497.getType().hasName("spinlock_t *")
and vptep_498.getType().hasName("pte_t *")
and vpte_498.getType().hasName("pte_t")
and vvma_491.getType().hasName("vm_area_struct *")
and vaddress_492.getFunction() = func
and vpage_496.(LocalVariable).getFunction() = func
and vptl_497.(LocalVariable).getFunction() = func
and vptep_498.(LocalVariable).getFunction() = func
and vpte_498.(LocalVariable).getFunction() = func
and vvma_491.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
