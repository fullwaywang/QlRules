/**
 * @name linux-ed17aa92dc56b6d8883e4b7a8f1c6fbf5ed6cd29-sock_hash_delete_elem
 * @id cpp/linux/ed17aa92dc56b6d8883e4b7a8f1c6fbf5ed6cd29/sock-hash-delete-elem
 * @description linux-ed17aa92dc56b6d8883e4b7a8f1c6fbf5ed6cd29-net/core/sock_map.c-sock_hash_delete_elem CVE-2023-0160
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("_raw_spin_lock_bh")
	and not target_0.getTarget().hasName("_raw_spin_unlock_irqrestore")
	and target_0.getArgument(0) instanceof AddressOfExpr
	and target_0.getEnclosingFunction() = func
}

predicate func_1(ExprStmt target_9, Function func) {
exists(DoStmt target_1 |
	target_1.getCondition().(Literal).getValue()="0"
	and target_1.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(Literal).getValue()="1"
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getType().hasName("unsigned long")
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("_raw_spin_lock_irqsave")
	and target_1.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0) instanceof AddressOfExpr
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_9.getLocation()))
}

/*predicate func_2(Function func) {
exists(StmtExpr target_2 |
	target_2.getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(EqualityOperation).getLeftOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("unsigned long")
	and target_2.getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(EqualityOperation).getRightOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("unsigned long")
	and target_2.getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(Literal).getValue()="1"
	and target_2.getEnclosingFunction() = func)
}

*/
/*predicate func_3(Function func) {
exists(EqualityOperation target_3 |
	target_3.getLeftOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("unsigned long")
	and target_3.getRightOperand().(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("unsigned long")
	and target_3.getEnclosingFunction() = func)
}

*/
predicate func_4(IfStmt target_10, Function func) {
exists(DoStmt target_4 |
	target_4.getCondition().(Literal).getValue()="0"
	and target_4.getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(StmtExpr).getStmt().(BlockStmt).getStmt(3).(ExprStmt).getExpr().(Literal).getValue()="1"
	and target_4.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_raw_spin_unlock_irqrestore")
	and target_4.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0) instanceof AddressOfExpr
	and target_4.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getType().hasName("unsigned long")
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
	and target_4.getLocation().isBefore(target_10.getLocation()))
}

predicate func_6(Variable vbucket_932, AddressOfExpr target_6) {
	target_6.getOperand().(PointerFieldAccess).getTarget().getName()="lock"
	and target_6.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbucket_932
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_7(Variable vbucket_932, AddressOfExpr target_7) {
	target_7.getOperand().(PointerFieldAccess).getTarget().getName()="lock"
	and target_7.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbucket_932
	and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_8(Function func, FunctionCall target_8) {
	target_8.getTarget().hasName("_raw_spin_unlock_bh")
	and target_8.getArgument(0) instanceof AddressOfExpr
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Function func, ExprStmt target_9) {
	target_9.getExpr() instanceof FunctionCall
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Function func, IfStmt target_10) {
	target_10.getCondition().(VariableAccess).getTarget().getType().hasName("bpf_shtab_elem *")
	and target_10.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("hlist_del_rcu")
	and target_10.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="node"
	and target_10.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_shtab_elem *")
	and target_10.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("sock_map_unref")
	and target_10.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="sk"
	and target_10.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_shtab_elem *")
	and target_10.getThen().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("bpf_shtab_elem *")
	and target_10.getEnclosingFunction() = func
}

from Function func, Variable vbucket_932, FunctionCall target_0, AddressOfExpr target_6, AddressOfExpr target_7, FunctionCall target_8, ExprStmt target_9, IfStmt target_10
where
func_0(func, target_0)
and not func_1(target_9, func)
and not func_4(target_10, func)
and func_6(vbucket_932, target_6)
and func_7(vbucket_932, target_7)
and func_8(func, target_8)
and func_9(func, target_9)
and func_10(func, target_10)
and vbucket_932.getType().hasName("bpf_shtab_bucket *")
and vbucket_932.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
