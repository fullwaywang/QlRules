/**
 * @name linux-657831ffc38e30092a2d5f03d385d710eb88b09a-inet_csk_clone_lock
 * @id cpp/linux/657831ffc38e30092a2d5f03d385d710eb88b09a/inet-csk-clone-lock
 * @description linux-657831ffc38e30092a2d5f03d385d710eb88b09a-net/ipv4/inet_connection_sock.c-inet_csk_clone_lock CVE-2017-8890
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vnewsk_781, VariableAccess target_1, ExprStmt target_2, ExprStmt target_3) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="mc_list"
		and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("inet_sk")
		and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vnewsk_781
		and target_0.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(8)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Variable vnewsk_781, BlockStmt target_4, VariableAccess target_1) {
		target_1.getTarget()=vnewsk_781
		and target_1.getParent().(IfStmt).getThen()=target_4
}

predicate func_2(Variable vnewsk_781, ExprStmt target_2) {
		target_2.getExpr().(FunctionCall).getTarget().hasName("sock_reset_flag")
		and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vnewsk_781
}

predicate func_3(Variable vnewsk_781, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="sk_mark"
		and target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnewsk_781
		and target_3.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="ir_mark"
		and target_3.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("inet_rsk")
		and target_3.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("const request_sock *")
}

predicate func_4(Variable vnewsk_781, BlockStmt target_4) {
		target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="skc_state"
		and target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="__sk_common"
		and target_4.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnewsk_781
		and target_4.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="icsk_bind_hash"
		and target_4.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("inet_connection_sock *")
		and target_4.getStmt(2).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
}

from Function func, Variable vnewsk_781, VariableAccess target_1, ExprStmt target_2, ExprStmt target_3, BlockStmt target_4
where
not func_0(vnewsk_781, target_1, target_2, target_3)
and func_1(vnewsk_781, target_4, target_1)
and func_2(vnewsk_781, target_2)
and func_3(vnewsk_781, target_3)
and func_4(vnewsk_781, target_4)
and vnewsk_781.getType().hasName("sock *")
and vnewsk_781.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
