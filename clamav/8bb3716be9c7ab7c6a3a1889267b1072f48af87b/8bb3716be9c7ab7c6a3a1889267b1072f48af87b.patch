commit 8bb3716be9c7ab7c6a3a1889267b1072f48af87b
Author: Andy Ragusa (aragusa) <aragusa@cisco.com>
Date:   Mon Jul 13 10:04:26 2020 -0700

    fuzz-22348 null deref in egg utf8 conversion
    Corrected memory leaks and a null dereference in the egg utf8 conversion.

diff --git a/NEWS.md b/NEWS.md
index 68b29ed1f..c28c7b607 100644
--- a/NEWS.md
+++ b/NEWS.md
@@ -24,6 +24,15 @@ ClamAV 0.102.4 is a bug patch release to address the following issues.
   The previous fix for this CVE in 0.102.3 was incomplete. This fix correctly
   resolves the issue.
 
+- [CVE-2020-3481](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-3481):
+  Fix a vulnerability in the EGG archive module in ClamAV 0.102.0 - 0.102.3
+  could cause a Denial-of-Service (DoS) condition. Improper error handling
+  may result in a crash due to a NULL pointer dereference.
+  This vulnerability is mitigated for those using the official ClamAV
+  signature databases because the file type signatures in daily.cvd
+  will not enable the EGG archive parser in versions affected by the
+  vulnerability.
+
 ## 0.102.3
 
 ClamAV 0.102.3 is a bug patch release to address the following issues.
diff --git a/libclamav/blob.c b/libclamav/blob.c
index f0002ddf3..244cd433f 100644
--- a/libclamav/blob.c
+++ b/libclamav/blob.c
@@ -176,7 +176,7 @@ blobGetFilename(const blob *b)
 int blobAddData(blob *b, const unsigned char *data, size_t len)
 {
 #if HAVE_CLI_GETPAGESIZE
-    static int pagesize;
+    static int pagesize = 0;
     int growth;
 #endif
 
@@ -225,6 +225,10 @@ int blobAddData(blob *b, const unsigned char *data, size_t len)
 
         b->size = growth;
         b->data = cli_malloc(growth);
+        if (NULL == b->data){
+            b->size = 0;
+            return -1;
+        }
     } else if (b->size < b->len + (off_t)len) {
         unsigned char *p = cli_realloc(b->data, b->size + growth);
 
@@ -241,6 +245,10 @@ int blobAddData(blob *b, const unsigned char *data, size_t len)
 
         b->size = (off_t)len * 4;
         b->data = cli_malloc(b->size);
+        if (NULL == b->data){
+            b->size = 0;
+            return -1;
+        }
     } else if (b->size < b->len + (off_t)len) {
         unsigned char *p = cli_realloc(b->data, b->size + (len * 4));
 
@@ -255,6 +263,9 @@ int blobAddData(blob *b, const unsigned char *data, size_t len)
     if (b->data) {
         memcpy(&b->data[b->len], data, len);
         b->len += (off_t)len;
+    } else {
+        b->size = 0;
+        return -1;
     }
     return 0;
 }
diff --git a/libclamav/egg.c b/libclamav/egg.c
index e580750c8..96f7191de 100644
--- a/libclamav/egg.c
+++ b/libclamav/egg.c
@@ -547,7 +547,7 @@ cl_error_t cli_codepage_to_utf8(char* in, size_t in_size, uint16_t codepage, cha
                     goto done;
                 }
 
-                lpWideCharStr = malloc((cchWideChar + 1) * sizeof(WCHAR));
+                lpWideCharStr = cli_malloc((cchWideChar + 1) * sizeof(WCHAR));
                 if (NULL == lpWideCharStr) {
                     cli_dbgmsg("egg_filename_to_utf8: failed to allocate memory for wide char string.\n");
                     status = CL_EMEM;
@@ -589,7 +589,7 @@ cl_error_t cli_codepage_to_utf8(char* in, size_t in_size, uint16_t codepage, cha
                 goto done;
             }
 
-            out_utf8 = malloc(out_utf8_size + 1);
+            out_utf8 = cli_malloc(out_utf8_size + 1);
             if (NULL == lpWideCharStr) {
                 cli_dbgmsg("egg_filename_to_utf8: failed to allocate memory for wide char to utf-8 string.\n");
                 status = CL_EMEM;
@@ -625,8 +625,15 @@ cl_error_t cli_codepage_to_utf8(char* in, size_t in_size, uint16_t codepage, cha
                 }
             }
 
+            if (NULL == encoding){
+                cli_dbgmsg("egg_filename_to_utf8: Invalid codepage parameter passed in.\n");
+                goto done;
+            }
+
             for (attempt = 1; attempt <= 3; attempt++) {
-                char* out_utf8_tmp;
+                char* out_utf8_tmp = NULL;
+                char * inbuf = in;
+                size_t iconvRet = -1;
 
                 /* Charset to UTF-8 should never exceed in_size * 6;
                  * We can shrink final buffer after the conversion, if needed. */
@@ -647,7 +654,10 @@ cl_error_t cli_codepage_to_utf8(char* in, size_t in_size, uint16_t codepage, cha
                     goto done;
                 }
 
-                if ((size_t)-1 == iconv(conv, &in, &inbytesleft, &out_utf8, &outbytesleft)) {
+                iconvRet = iconv(conv, &inbuf, &inbytesleft, &out_utf8, &outbytesleft);
+                iconv_close(conv);
+                conv = (iconv_t) -1;
+                if ((size_t)-1 == iconvRet) {
                     switch (errno) {
                         case E2BIG:
                             cli_warnmsg("egg_filename_to_utf8: iconv error: There is not sufficient room at *outbuf.\n");
