/**
 * @name linux-c8401dda2f0a00cd25c0af6a95ed50e478d25de4-kvm_skip_emulated_instruction
 * @id cpp/linux/c8401dda2f0a00cd25c0af6a95ed50e478d25de4/kvm-skip-emulated-instruction
 * @description linux-c8401dda2f0a00cd25c0af6a95ed50e478d25de4-arch/x86/kvm/x86.c-kvm_skip_emulated_instruction CVE-2017-7518
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvcpu_5564, Variable vrflags_5566, Variable vr_5567, FunctionCall target_0) {
	target_0.getTarget().hasName("kvm_vcpu_check_singlestep")
	and not target_0.getTarget().hasName("kvm_vcpu_do_singlestep")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vvcpu_5564
	and target_0.getArgument(1).(VariableAccess).getTarget()=vrflags_5566
	and target_0.getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vr_5567
}

predicate func_1(Parameter vvcpu_5564, Variable vrflags_5566, Variable vr_5567, ExprStmt target_3, ExprStmt target_4, EqualityOperation target_6, Function func) {
exists(IfStmt target_1 |
	target_1.getCondition().(FunctionCall).getTarget().hasName("__builtin_expect")
	and target_1.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=vrflags_5566
	and target_1.getCondition().(FunctionCall).getArgument(0).(NotExpr).getOperand().(NotExpr).getOperand().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="256"
	and target_1.getCondition().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("kvm_vcpu_do_singlestep")
	and target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_5564
	and target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vr_5567
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_3.getLocation())
	and target_4.getExpr().(VariableCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_1.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_6.getLeftOperand().(VariableAccess).getLocation()))
}

predicate func_2(Variable vrflags_5566, VariableAccess target_2) {
	target_2.getTarget()=vrflags_5566
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_3(Function func, ExprStmt target_3) {
	target_3.getExpr() instanceof FunctionCall
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Parameter vvcpu_5564, ExprStmt target_4) {
	target_4.getExpr().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="skip_emulated_instruction"
	and target_4.getExpr().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("kvm_x86_ops *")
	and target_4.getExpr().(VariableCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_5564
}

predicate func_6(Variable vr_5567, EqualityOperation target_6) {
	target_6.getLeftOperand().(VariableAccess).getTarget()=vr_5567
}

from Function func, Parameter vvcpu_5564, Variable vrflags_5566, Variable vr_5567, FunctionCall target_0, VariableAccess target_2, ExprStmt target_3, ExprStmt target_4, EqualityOperation target_6
where
func_0(vvcpu_5564, vrflags_5566, vr_5567, target_0)
and not func_1(vvcpu_5564, vrflags_5566, vr_5567, target_3, target_4, target_6, func)
and func_2(vrflags_5566, target_2)
and func_3(func, target_3)
and func_4(vvcpu_5564, target_4)
and func_6(vr_5567, target_6)
and vvcpu_5564.getType().hasName("kvm_vcpu *")
and vrflags_5566.getType().hasName("unsigned long")
and vr_5567.getType().hasName("int")
and vvcpu_5564.getFunction() = func
and vrflags_5566.(LocalVariable).getFunction() = func
and vr_5567.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
