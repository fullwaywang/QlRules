/**
 * @name linux-b0576ade3aaf24b376ea1a4406ae138e2a22b0c0-brcm_nvram_parse
 * @id cpp/linux/b0576ade3aaf24b376ea1a4406ae138e2a22b0c0/brcm-nvram-parse
 * @description linux-b0576ade3aaf24b376ea1a4406ae138e2a22b0c0-drivers/nvmem/brcm_nvram.c-brcm_nvram_parse CVE-2023-3359
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdata_87, ExprStmt target_1, ExprStmt target_2, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vdata_87
	and target_0.getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-12"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vdata_87, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("memcpy_fromio")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdata_87
	and target_1.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="base"
	and target_1.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("brcm_nvram *")
	and target_1.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("size_t")
}

predicate func_2(Variable vdata_87, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vdata_87
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("kzalloc")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("size_t")
	and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(BitwiseOrExpr).getValue()="3264"
}

from Function func, Variable vdata_87, ExprStmt target_1, ExprStmt target_2
where
not func_0(vdata_87, target_1, target_2, func)
and func_1(vdata_87, target_1)
and func_2(vdata_87, target_2)
and vdata_87.getType().hasName("uint8_t *")
and vdata_87.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
