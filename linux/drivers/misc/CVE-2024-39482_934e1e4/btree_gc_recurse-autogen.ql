/**
 * @name linux-934e1e4331859183a861f396d7dfaf33cb5afb02-btree_gc_recurse
 * @id cpp/linux/934e1e4331859183a861f396d7dfaf33cb5afb02/btree-gc-recurse
 * @description linux-934e1e4331859183a861f396d7dfaf33cb5afb02-drivers/md/bcache/btree.c-btree_gc_recurse CVE-2024-39482
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Variable viter_1588, Parameter vb_1582, FunctionCall target_1) {
	exists(AddressOfExpr obj_0 | obj_0=target_1.getArgument(0) |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().getName()="keys"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vb_1582
		)
	)
	and exists(AddressOfExpr obj_2 | obj_2=target_1.getArgument(2) |
		exists(PointerFieldAccess obj_3 | obj_3=obj_2.getOperand() |
			exists(PointerFieldAccess obj_4 | obj_4=obj_3.getQualifier() |
				obj_4.getTarget().getName()="c"
				and obj_4.getQualifier().(VariableAccess).getTarget()=vb_1582
			)
			and obj_3.getTarget().getName()="gc_done"
		)
	)
	and target_1.getTarget().hasName("bch_btree_iter_init")
	and not target_1.getTarget().hasName("bch_btree_iter_stack_init")
	and target_1.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=viter_1588
}

predicate func_2(Variable viter_1588, AddressOfExpr target_4, AddressOfExpr target_5) {
exists(ValueFieldAccess target_2 |
	target_2.getTarget().getName()="iter"
	and target_2.getQualifier().(VariableAccess).getTarget()=viter_1588
	and target_4.getOperand().(VariableAccess).getLocation().isBefore(target_2.getQualifier().(VariableAccess).getLocation())
	and target_2.getQualifier().(VariableAccess).getLocation().isBefore(target_5.getOperand().(VariableAccess).getLocation())
)
}

predicate func_3(Variable viter_1588, Parameter vb_1582, AddressOfExpr target_6, ExprStmt target_7, VariableAccess target_3) {
	exists(AddressOfExpr obj_0 | obj_0=target_3.getParent() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getParent() |
			exists(AssignExpr obj_2 | obj_2=obj_1.getParent() |
				exists(FunctionCall obj_3 | obj_3=obj_2.getRValue() |
					exists(AddressOfExpr obj_4 | obj_4=obj_3.getArgument(1) |
						exists(PointerFieldAccess obj_5 | obj_5=obj_4.getOperand() |
							obj_5.getTarget().getName()="keys"
							and obj_5.getQualifier().(VariableAccess).getTarget()=vb_1582
						)
					)
					and obj_3.getTarget().hasName("bch_btree_iter_next_filter")
				)
			)
		)
	)
	and target_3.getTarget()=viter_1588
	and target_6.getOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_3.getParent().(AddressOfExpr).getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_7.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
}

predicate func_4(Variable viter_1588, AddressOfExpr target_4) {
	target_4.getOperand().(VariableAccess).getTarget()=viter_1588
}

predicate func_5(Variable viter_1588, AddressOfExpr target_5) {
	target_5.getOperand().(VariableAccess).getTarget()=viter_1588
}

predicate func_6(Parameter vb_1582, AddressOfExpr target_6) {
	exists(PointerFieldAccess obj_0 | obj_0=target_6.getOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getQualifier() |
			obj_1.getTarget().getName()="c"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vb_1582
		)
		and obj_0.getTarget().getName()="gc_done"
	)
	and target_6.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_7(Parameter vb_1582, ExprStmt target_7) {
	exists(AssignExpr obj_0 | obj_0=target_7.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLValue() |
			obj_1.getTarget().getName()="b"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("gc_merge_info[4]")
		)
		and exists(FunctionCall obj_2 | obj_2=obj_0.getRValue() |
			exists(PointerFieldAccess obj_3 | obj_3=obj_2.getArgument(0) |
				obj_3.getTarget().getName()="c"
				and obj_3.getQualifier().(VariableAccess).getTarget()=vb_1582
			)
			and exists(SubExpr obj_4 | obj_4=obj_2.getArgument(3) |
				exists(PointerFieldAccess obj_5 | obj_5=obj_4.getLeftOperand() |
					obj_5.getTarget().getName()="level"
					and obj_5.getQualifier().(VariableAccess).getTarget()=vb_1582
				)
				and obj_4.getRightOperand().(Literal).getValue()="1"
			)
			and obj_2.getTarget().hasName("bch_btree_node_get")
			and obj_2.getArgument(1).(VariableAccess).getTarget().getType().hasName("btree_op *")
			and obj_2.getArgument(2).(VariableAccess).getTarget().getType().hasName("bkey *")
			and obj_2.getArgument(5).(VariableAccess).getTarget()=vb_1582
		)
	)
}

from Function func, Variable viter_1588, Parameter vb_1582, FunctionCall target_1, VariableAccess target_3, AddressOfExpr target_4, AddressOfExpr target_5, AddressOfExpr target_6, ExprStmt target_7
where
func_1(viter_1588, vb_1582, target_1)
and not func_2(viter_1588, target_4, target_5)
and func_3(viter_1588, vb_1582, target_6, target_7, target_3)
and func_4(viter_1588, target_4)
and func_5(viter_1588, target_5)
and func_6(vb_1582, target_6)
and func_7(vb_1582, target_7)
and viter_1588.getType().hasName("btree_iter")
and vb_1582.getType().hasName("btree *")
and viter_1588.(LocalVariable).getFunction() = func
and vb_1582.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
