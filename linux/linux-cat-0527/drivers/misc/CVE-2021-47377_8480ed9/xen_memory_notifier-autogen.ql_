/**
 * @name linux-8480ed9c2bbd56fc86524998e5f2e3e22f5038f6-xen_memory_notifier
 * @id cpp/linux/8480ed9c2bbd56fc86524998e5f2e3e22f5038f6/xen-memory-notifier
 * @description linux-8480ed9c2bbd56fc86524998e5f2e3e22f5038f6-drivers/xen/balloon.c-xen_memory_notifier CVE-2021-47377
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("__wake_up")
	and target_0.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getType().hasName("wait_queue_head")
	and target_0.getArgument(1).(BitwiseOrExpr).getValue()="3"
	and target_0.getArgument(2).(Literal).getValue()="1"
	and target_0.getArgument(3) instanceof Literal
	and target_0.getEnclosingFunction() = func)
}

predicate func_2(Variable vballoon_worker, FunctionCall target_2) {
	target_2.getTarget().hasName("schedule_delayed_work")
	and target_2.getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vballoon_worker
	and target_2.getArgument(1) instanceof Literal
}

from Function func, Variable vballoon_worker, FunctionCall target_2
where
not func_0(func)
and func_2(vballoon_worker, target_2)
and vballoon_worker.getType().hasName("delayed_work")
and not vballoon_worker.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
