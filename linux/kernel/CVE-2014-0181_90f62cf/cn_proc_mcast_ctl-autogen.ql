/**
 * @name linux-90f62cf30a78721641e08737bda787552428061e-cn_proc_mcast_ctl
 * @id cpp/linux/90f62cf30a78721641e08737bda787552428061e/cn-proc-mcast-ctl
 * @description linux-90f62cf30a78721641e08737bda787552428061e-drivers/connector/cn_proc.c-cn_proc_mcast_ctl CVE-2014-0181
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(BlockStmt target_3, Function func, FunctionCall target_0) {
		target_0.getTarget().hasName("capable")
		and not target_0.getTarget().hasName("__netlink_ns_capable")
		and target_0.getArgument(0).(Literal).getValue()="12"
		and target_0.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_3
		and target_0.getEnclosingFunction() = func
}

predicate func_2(Variable vinit_user_ns, LogicalOrExpr target_4) {
	exists(AddressOfExpr target_2 |
		target_2.getOperand().(VariableAccess).getTarget()=vinit_user_ns
		and target_2.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
		and target_4.getAnOperand().(EqualityOperation).getAnOperand().(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_2.getOperand().(VariableAccess).getLocation()))
}

predicate func_3(Function func, BlockStmt target_3) {
		target_3.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_3.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="1"
		and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vinit_user_ns, LogicalOrExpr target_4) {
		target_4.getAnOperand().(EqualityOperation).getAnOperand().(StmtExpr).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(PointerFieldAccess).getTarget().getName()="user_ns"
		and target_4.getAnOperand().(EqualityOperation).getAnOperand().(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vinit_user_ns
		and target_4.getAnOperand().(EqualityOperation).getAnOperand().(FunctionCall).getTarget().hasName("task_active_pid_ns")
		and target_4.getAnOperand().(EqualityOperation).getAnOperand().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("get_current")
		and target_4.getAnOperand().(EqualityOperation).getAnOperand().(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("pid_namespace")
}

from Function func, Variable vinit_user_ns, FunctionCall target_0, BlockStmt target_3, LogicalOrExpr target_4
where
func_0(target_3, func, target_0)
and not func_2(vinit_user_ns, target_4)
and func_3(func, target_3)
and func_4(vinit_user_ns, target_4)
and vinit_user_ns.getType().hasName("user_namespace")
and not vinit_user_ns.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
