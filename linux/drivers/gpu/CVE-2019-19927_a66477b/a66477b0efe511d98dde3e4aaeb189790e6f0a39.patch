commit a66477b0efe511d98dde3e4aaeb189790e6f0a39
Author: Christian König <christian.koenig@amd.com>
Date:   Tue Apr 2 09:26:52 2019 +0200

    drm/ttm: fix out-of-bounds read in ttm_put_pages() v2
    
    When ttm_put_pages() tries to figure out whether it's dealing with
    transparent hugepages, it just reads past the bounds of the pages array
    without a check.
    
    v2: simplify the test if enough pages are left in the array (Christian).
    
    Signed-off-by: Jann Horn <jannh@google.com>
    Signed-off-by: Christian König <christian.koenig@amd.com>
    Fixes: 5c42c64f7d54 ("drm/ttm: fix the fix for huge compound pages")
    Cc: stable@vger.kernel.org
    Reviewed-by: Michel Dänzer <michel.daenzer@amd.com>
    Reviewed-by: Junwei Zhang <Jerry.Zhang@amd.com>
    Reviewed-by: Huang Rui <ray.huang@amd.com>
    Signed-off-by: Alex Deucher <alexander.deucher@amd.com>

diff --git a/drivers/gpu/drm/ttm/ttm_page_alloc.c b/drivers/gpu/drm/ttm/ttm_page_alloc.c
index f841acc..f77c81db 100644
--- a/drivers/gpu/drm/ttm/ttm_page_alloc.c
+++ b/drivers/gpu/drm/ttm/ttm_page_alloc.c
@@ -730,7 +730,8 @@ static void ttm_put_pages(struct page **pages, unsigned npages, int flags,
 			}
 
 #ifdef CONFIG_TRANSPARENT_HUGEPAGE
-			if (!(flags & TTM_PAGE_FLAG_DMA32)) {
+			if (!(flags & TTM_PAGE_FLAG_DMA32) &&
+			    (npages - i) >= HPAGE_PMD_NR) {
 				for (j = 0; j < HPAGE_PMD_NR; ++j)
 					if (p++ != pages[i + j])
 					    break;
@@ -759,7 +760,7 @@ static void ttm_put_pages(struct page **pages, unsigned npages, int flags,
 		unsigned max_size, n2free;
 
 		spin_lock_irqsave(&huge->lock, irq_flags);
-		while (i < npages) {
+		while ((npages - i) >= HPAGE_PMD_NR) {
 			struct page *p = pages[i];
 			unsigned j;
 
