/**
 * @name linux-2febf5fdbf5d9a52ddc3e986971c8609b1582d67-rdev_readable
 * @id cpp/linux/2febf5fdbf5d9a52ddc3e986971c8609b1582d67/rdev-readable
 * @description linux-2febf5fdbf5d9a52ddc3e986971c8609b1582d67-drivers/md/raid1.c-rdev_readable CVE-2024-45023
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("const_test_bit")
	and not target_0.getTarget().hasName("rdev_in_recovery")
	and target_0.getArgument(1) instanceof AddressOfExpr
	and target_0.getEnclosingFunction() = func
}

predicate func_2(Parameter vrdev_731, LogicalAndExpr target_2) {
	exists(LogicalAndExpr obj_0 | obj_0=target_2.getLeftOperand() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRightOperand() |
			exists(EqualityOperation obj_2 | obj_2=obj_1.getArgument(0) |
				exists(AddressOfExpr obj_3 | obj_3=obj_2.getLeftOperand() |
					exists(PointerFieldAccess obj_4 | obj_4=obj_3.getOperand() |
						obj_4.getTarget().getName()="flags"
						and obj_4.getQualifier().(VariableAccess).getTarget()=vrdev_731
					)
				)
				and obj_2.getRightOperand().(Literal).getValue()="0"
			)
			and obj_1.getTarget().hasName("__builtin_constant_p")
		)
		and obj_0.getLeftOperand().(Literal).getValue()="1"
	)
	and exists(EqualityOperation obj_5 | obj_5=target_2.getRightOperand() |
		exists(AddressOfExpr obj_6 | obj_6=obj_5.getLeftOperand() |
			exists(PointerFieldAccess obj_7 | obj_7=obj_6.getOperand() |
				obj_7.getTarget().getName()="flags"
				and obj_7.getQualifier().(VariableAccess).getTarget()=vrdev_731
			)
		)
		and obj_5.getRightOperand().(Literal).getValue()="0"
	)
	and exists(LogicalAndExpr obj_8 | obj_8=target_2.getParent() |
		exists(FunctionCall obj_9 | obj_9=obj_8.getRightOperand() |
			exists(PointerDereferenceExpr obj_10 | obj_10=obj_9.getArgument(0) |
				exists(AddressOfExpr obj_11 | obj_11=obj_10.getOperand() |
					exists(PointerFieldAccess obj_12 | obj_12=obj_11.getOperand() |
						obj_12.getTarget().getName()="flags"
						and obj_12.getQualifier().(VariableAccess).getTarget()=vrdev_731
					)
				)
			)
			and obj_9.getTarget().hasName("__builtin_constant_p")
		)
	)
}

/*predicate func_3(Parameter vrdev_731, FunctionCall target_3) {
	exists(PointerDereferenceExpr obj_0 | obj_0=target_3.getArgument(0) |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getOperand() |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="flags"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vrdev_731
			)
		)
	)
	and exists(LogicalAndExpr obj_3 | obj_3=target_3.getParent() |
		exists(LogicalAndExpr obj_4 | obj_4=obj_3.getLeftOperand() |
			exists(LogicalAndExpr obj_5 | obj_5=obj_4.getLeftOperand() |
				exists(FunctionCall obj_6 | obj_6=obj_5.getRightOperand() |
					obj_6.getTarget().hasName("__builtin_constant_p")
					and obj_6.getArgument(0).(EqualityOperation).getRightOperand().(Literal).getValue()="0"
				)
				and obj_5.getLeftOperand().(Literal).getValue()="1"
			)
			and exists(EqualityOperation obj_7 | obj_7=obj_4.getRightOperand() |
				exists(AddressOfExpr obj_8 | obj_8=obj_7.getLeftOperand() |
					exists(PointerFieldAccess obj_9 | obj_9=obj_8.getOperand() |
						obj_9.getTarget().getName()="flags"
						and obj_9.getQualifier().(VariableAccess).getTarget()=vrdev_731
					)
				)
				and obj_7.getRightOperand().(Literal).getValue()="0"
			)
		)
	)
	and target_3.getTarget().hasName("__builtin_constant_p")
}

*/
predicate func_4(Parameter vrdev_731, AddressOfExpr target_4) {
	exists(PointerFieldAccess obj_0 | obj_0=target_4.getOperand() |
		obj_0.getTarget().getName()="flags"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vrdev_731
	)
	and target_4.getParent().(FunctionCall).getParent().(ConditionalExpr).getThen() instanceof FunctionCall
}

predicate func_5(Parameter vrdev_731, AddressOfExpr target_5) {
	exists(PointerFieldAccess obj_0 | obj_0=target_5.getOperand() |
		obj_0.getTarget().getName()="flags"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vrdev_731
	)
	and target_5.getParent().(FunctionCall).getParent().(ConditionalExpr).getElse() instanceof FunctionCall
}

predicate func_6(Parameter vr1_bio_731, PointerFieldAccess target_6) {
	target_6.getTarget().getName()="sector"
	and target_6.getQualifier().(VariableAccess).getTarget()=vr1_bio_731
}

predicate func_7(Parameter vr1_bio_731, PointerFieldAccess target_7) {
	target_7.getTarget().getName()="sectors"
	and target_7.getQualifier().(VariableAccess).getTarget()=vr1_bio_731
}

predicate func_8(Parameter vrdev_731, VariableAccess target_8) {
	target_8.getTarget()=vrdev_731
}

predicate func_9(Parameter vrdev_731, Parameter vr1_bio_731, ReturnStmt target_10, LogicalAndExpr target_9) {
	exists(NotExpr obj_0 | obj_0=target_9.getLeftOperand() |
		exists(ConditionalExpr obj_1 | obj_1=obj_0.getOperand() |
			exists(LogicalAndExpr obj_2 | obj_2=obj_1.getCondition() |
				obj_2.getLeftOperand() instanceof LogicalAndExpr
				and obj_2.getRightOperand() instanceof FunctionCall
			)
			and exists(FunctionCall obj_3 | obj_3=obj_1.getElse() |
				obj_3.getTarget().hasName("_test_bit")
				and obj_3.getArgument(1) instanceof AddressOfExpr
			)
			and obj_1.getThen() instanceof FunctionCall
		)
	)
	and exists(RelationalOperation obj_4 | obj_4=target_9.getRightOperand() |
		exists(ValueFieldAccess obj_5 | obj_5=obj_4.getLesserOperand() |
			exists(PointerFieldAccess obj_6 | obj_6=obj_5.getQualifier() |
				obj_6.getTarget().getName()="(unknown field)"
				and obj_6.getQualifier().(VariableAccess).getTarget()=vrdev_731
			)
			and obj_5.getTarget().getName()="recovery_offset"
		)
		and exists(AddExpr obj_7 | obj_7=obj_4.getGreaterOperand() |
			exists(PointerFieldAccess obj_8 | obj_8=obj_7.getLeftOperand() |
				obj_8.getTarget().getName()="sector"
				and obj_8.getQualifier().(VariableAccess).getTarget()=vr1_bio_731
			)
			and exists(PointerFieldAccess obj_9 | obj_9=obj_7.getRightOperand() |
				obj_9.getTarget().getName()="sectors"
				and obj_9.getQualifier().(VariableAccess).getTarget()=vr1_bio_731
			)
		)
	)
	and target_9.getParent().(IfStmt).getThen()=target_10
}

predicate func_10(LogicalAndExpr target_9, Function func, ReturnStmt target_10) {
	target_10.getParent().(IfStmt).getCondition()=target_9
	and target_10.getEnclosingFunction() = func
}

from Function func, Parameter vrdev_731, Parameter vr1_bio_731, FunctionCall target_0, LogicalAndExpr target_2, AddressOfExpr target_4, AddressOfExpr target_5, PointerFieldAccess target_6, PointerFieldAccess target_7, VariableAccess target_8, LogicalAndExpr target_9, ReturnStmt target_10
where
func_0(func, target_0)
and func_2(vrdev_731, target_2)
and func_4(vrdev_731, target_4)
and func_5(vrdev_731, target_5)
and func_6(vr1_bio_731, target_6)
and func_7(vr1_bio_731, target_7)
and func_8(vrdev_731, target_8)
and func_9(vrdev_731, vr1_bio_731, target_10, target_9)
and func_10(target_9, func, target_10)
and vrdev_731.getType().hasName("md_rdev *")
and vr1_bio_731.getType().hasName("r1bio *")
and vrdev_731.getFunction() = func
and vr1_bio_731.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
