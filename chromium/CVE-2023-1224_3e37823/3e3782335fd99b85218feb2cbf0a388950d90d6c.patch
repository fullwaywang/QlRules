commit 3e3782335fd99b85218feb2cbf0a388950d90d6c	3e3782335fd99b85218feb2cbf0a388950d90d6c
Author: Stephen McGruer <smcgruer@chromium.org>
Date:   Fri Jan 6 13:17:12 2023 +0000

    [PaymentRequest] Don't install enter-key accelerator for all sheets
    
    Most notably, the main payment sheet should not accelerate the enter
    key, for the same reason as in https://crrev.com/57d342625c .
    
    This CL attempts to keep the acceleration as it was on all other sheets,
    and adds browsertests for those sheets that did not previously have
    them.
    
    Bug: 1403539
    Change-Id: I5a98818e9fa7782a8cf28f20abe82d87ce4df83c
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4133533
    Reviewed-by: Rouslan Solomakhin <rouslan@chromium.org>
    Commit-Queue: Stephen McGruer <smcgruer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1089689}

diff --git a/chrome/browser/ui/views/payments/contact_info_editor_view_controller_browsertest.cc b/chrome/browser/ui/views/payments/contact_info_editor_view_controller_browsertest.cc
index 2cf5067cc29d7..43e3ce37eba4d 100644
--- a/chrome/browser/ui/views/payments/contact_info_editor_view_controller_browsertest.cc
+++ b/chrome/browser/ui/views/payments/contact_info_editor_view_controller_browsertest.cc
@@ -135,8 +135,8 @@ IN_PROC_BROWSER_TEST_F(MAYBE_PaymentRequestContactInfoEditorTest,
       .WillOnce(QuitMessageLoop(&data_loop));
   views::View* editor_sheet = dialog_view()->GetViewByID(
       static_cast<int>(DialogViewID::CONTACT_INFO_EDITOR_SHEET));
-  editor_sheet->AcceleratorPressed(
-      ui::Accelerator(ui::VKEY_RETURN, ui::EF_NONE));
+  EXPECT_TRUE(editor_sheet->AcceleratorPressed(
+      ui::Accelerator(ui::VKEY_RETURN, ui::EF_NONE)));
   data_loop.Run();
 
   personal_data_manager->RemoveObserver(&personal_data_observer_);
diff --git a/chrome/browser/ui/views/payments/editor_view_controller.cc b/chrome/browser/ui/views/payments/editor_view_controller.cc
index afc7a45afc4b7..bcef57907bd9f 100644
--- a/chrome/browser/ui/views/payments/editor_view_controller.cc
+++ b/chrome/browser/ui/views/payments/editor_view_controller.cc
@@ -162,6 +162,13 @@ void EditorViewController::FillContentView(views::View* content_view) {
   content_view->AddChildView(CreateEditorView().release());
 }
 
+bool EditorViewController::ShouldAccelerateEnterKey() {
+  // We allow the user to confirm their details by pressing 'enter' irregardless
+  // of which edit field is currently focused, for quicker navigation through
+  // the form.
+  return true;
+}
+
 void EditorViewController::UpdateEditorView() {
   UpdateContentView();
   UpdateFocus(GetFirstFocusedView());
diff --git a/chrome/browser/ui/views/payments/editor_view_controller.h b/chrome/browser/ui/views/payments/editor_view_controller.h
index 6d1126df72b94..d876720a14940 100644
--- a/chrome/browser/ui/views/payments/editor_view_controller.h
+++ b/chrome/browser/ui/views/payments/editor_view_controller.h
@@ -155,6 +155,7 @@ class EditorViewController : public PaymentRequestSheetController,
   bool GetPrimaryButtonEnabled() override;
   bool ShouldShowSecondaryButton() override;
   void FillContentView(views::View* content_view) override;
+  bool ShouldAccelerateEnterKey() override;
 
   // Combobox callback.
   virtual void OnPerformAction(ValidatingCombobox* combobox);
diff --git a/chrome/browser/ui/views/payments/error_message_view_controller.cc b/chrome/browser/ui/views/payments/error_message_view_controller.cc
index d0fc637c50b96..a64e6d8f215df 100644
--- a/chrome/browser/ui/views/payments/error_message_view_controller.cc
+++ b/chrome/browser/ui/views/payments/error_message_view_controller.cc
@@ -93,4 +93,13 @@ void ErrorMessageViewController::FillContentView(views::View* content_view) {
   content_view->AddChildView(std::make_unique<PaymentsErrorLabel>());
 }
 
+bool ErrorMessageViewController::GetSheetId(DialogViewID* sheet_id) {
+  *sheet_id = DialogViewID::ERROR_SHEET;
+  return true;
+}
+
+bool ErrorMessageViewController::ShouldAccelerateEnterKey() {
+  return true;
+}
+
 }  // namespace payments
diff --git a/chrome/browser/ui/views/payments/error_message_view_controller.h b/chrome/browser/ui/views/payments/error_message_view_controller.h
index eb499674ef86e..67e14815ba9a2 100644
--- a/chrome/browser/ui/views/payments/error_message_view_controller.h
+++ b/chrome/browser/ui/views/payments/error_message_view_controller.h
@@ -44,6 +44,8 @@ class ErrorMessageViewController : public PaymentRequestSheetController {
   bool ShouldShowSecondaryButton() override;
   std::u16string GetSheetTitle() override;
   void FillContentView(views::View* content_view) override;
+  bool GetSheetId(DialogViewID* sheet_id) override;
+  bool ShouldAccelerateEnterKey() override;
 };
 
 }  // namespace payments
diff --git a/chrome/browser/ui/views/payments/error_message_view_controller_browsertest.cc b/chrome/browser/ui/views/payments/error_message_view_controller_browsertest.cc
index 80ad7020668b2..c45ccb8aff492 100644
--- a/chrome/browser/ui/views/payments/error_message_view_controller_browsertest.cc
+++ b/chrome/browser/ui/views/payments/error_message_view_controller_browsertest.cc
@@ -42,4 +42,34 @@ IN_PROC_BROWSER_TEST_F(PaymentRequestErrorMessageTest, CompleteFail) {
                            /*wait_for_animation=*/false);
 }
 
+IN_PROC_BROWSER_TEST_F(PaymentRequestErrorMessageTest,
+                       EnterKeyClosesErrorDialog) {
+  std::string payment_method_name;
+  InstallPaymentApp("a.com", "/payment_request_success_responder.js",
+                    &payment_method_name);
+
+  NavigateTo("/payment_request_fail_complete_test.html");
+
+  InvokePaymentRequestUIWithJs("buyWithMethods([{supportedMethods:'" +
+                               payment_method_name + "'}]);");
+
+  // We are ready to pay.
+  ASSERT_TRUE(IsPayButtonEnabled());
+
+  // Once "Pay" is clicked, the page will call complete('fail') and the error
+  // message should be shown.
+  ResetEventWaiterForSequence({DialogEvent::PROCESSING_SPINNER_HIDDEN,
+                               DialogEvent::ERROR_MESSAGE_SHOWN});
+  ClickOnDialogViewAndWait(DialogViewID::PAY_BUTTON, dialog_view());
+
+  // Trigger the 'Enter' accelerator, which should be present and mapped to
+  // close the dialog.
+  views::View* error_sheet =
+      dialog_view()->GetViewByID(static_cast<int>(DialogViewID::ERROR_SHEET));
+  ResetEventWaiter(DialogEvent::DIALOG_CLOSED);
+  EXPECT_TRUE(error_sheet->AcceleratorPressed(
+      ui::Accelerator(ui::VKEY_RETURN, ui::EF_NONE)));
+  WaitForObservedEvent();
+}
+
 }  // namespace payments
diff --git a/chrome/browser/ui/views/payments/order_summary_view_controller.cc b/chrome/browser/ui/views/payments/order_summary_view_controller.cc
index 99cafa1df819d..41170d6968b4f 100644
--- a/chrome/browser/ui/views/payments/order_summary_view_controller.cc
+++ b/chrome/browser/ui/views/payments/order_summary_view_controller.cc
@@ -209,4 +209,13 @@ void OrderSummaryViewController::FillContentView(views::View* content_view) {
           .release());
 }
 
+bool OrderSummaryViewController::GetSheetId(DialogViewID* sheet_id) {
+  *sheet_id = DialogViewID::ORDER_SUMMARY_SHEET;
+  return true;
+}
+
+bool OrderSummaryViewController::ShouldAccelerateEnterKey() {
+  return true;
+}
+
 }  // namespace payments
diff --git a/chrome/browser/ui/views/payments/order_summary_view_controller.h b/chrome/browser/ui/views/payments/order_summary_view_controller.h
index 2652810f2ed3e..61b7226c21ebb 100644
--- a/chrome/browser/ui/views/payments/order_summary_view_controller.h
+++ b/chrome/browser/ui/views/payments/order_summary_view_controller.h
@@ -44,6 +44,8 @@ class OrderSummaryViewController : public PaymentRequestSheetController,
   bool ShouldShowSecondaryButton() override;
   std::u16string GetSheetTitle() override;
   void FillContentView(views::View* content_view) override;
+  bool GetSheetId(DialogViewID* sheet_id) override;
+  bool ShouldAccelerateEnterKey() override;
 
   base::WeakPtrFactory<OrderSummaryViewController> weak_ptr_factory_{this};
 };
diff --git a/chrome/browser/ui/views/payments/order_summary_view_controller_browsertest.cc b/chrome/browser/ui/views/payments/order_summary_view_controller_browsertest.cc
index 30863ebd21a10..4d68419ee3213 100644
--- a/chrome/browser/ui/views/payments/order_summary_view_controller_browsertest.cc
+++ b/chrome/browser/ui/views/payments/order_summary_view_controller_browsertest.cc
@@ -17,6 +17,56 @@ namespace payments {
 using PaymentRequestOrderSummaryViewControllerTest =
     PaymentRequestBrowserTestBase;
 
+IN_PROC_BROWSER_TEST_F(PaymentRequestOrderSummaryViewControllerTest,
+                       EnterKeyCompletesPayment) {
+  std::string payment_method_name;
+  InstallPaymentApp("a.com", "/payment_request_success_responder.js",
+                    &payment_method_name);
+
+  NavigateTo("/payment_request_dynamic_shipping_test.html");
+  // In MI state, shipping is $5.00.
+  autofill::AutofillProfile michigan = autofill::test::GetFullProfile2();
+  michigan.set_use_count(100U);
+  AddAutofillProfile(michigan);
+  // In CA state, there is free shipping.
+  autofill::AutofillProfile california = autofill::test::GetFullProfile();
+  california.set_use_count(50U);
+  AddAutofillProfile(california);
+
+  InvokePaymentRequestUIWithJs("buyWithMethods([{supportedMethods:'" +
+                               payment_method_name + "'}]);");
+
+  // Select a shipping address in order to enable the Continue button.
+  OpenShippingAddressSectionScreen();
+  ResetEventWaiterForSequence({DialogEvent::PROCESSING_SPINNER_SHOWN,
+                               DialogEvent::PROCESSING_SPINNER_HIDDEN,
+                               DialogEvent::SPEC_DONE_UPDATING,
+                               DialogEvent::BACK_NAVIGATION});
+  ClickOnChildInListViewAndWait(
+      /* child_index=*/0, /*total_num_children=*/2,
+      DialogViewID::SHIPPING_ADDRESS_SHEET_LIST_VIEW,
+      /*wait_for_animation=*/false);
+  // Wait for the animation here explicitly, otherwise
+  // ClickOnChildInListViewAndWait tries to install an AnimationDelegate before
+  // the animation is kicked off (since that's triggered off of the spec being
+  // updated) and this hits a DCHECK.
+  WaitForAnimation();
+
+  OpenOrderSummaryScreen();
+
+  ASSERT_TRUE(IsPayButtonEnabled());
+
+  // Trigger the 'Enter' accelerator, which should be present and mapped to
+  // close the dialog.
+  views::View* summary_sheet = dialog_view()->GetViewByID(
+      static_cast<int>(DialogViewID::ORDER_SUMMARY_SHEET));
+  ResetEventWaiterForSequence(
+      {DialogEvent::PROCESSING_SPINNER_SHOWN, DialogEvent::DIALOG_CLOSED});
+  EXPECT_TRUE(summary_sheet->AcceleratorPressed(
+      ui::Accelerator(ui::VKEY_RETURN, ui::EF_NONE)));
+  WaitForObservedEvent();
+}
+
 IN_PROC_BROWSER_TEST_F(PaymentRequestOrderSummaryViewControllerTest,
                        OrderSummaryReflectsShippingOption) {
   std::string payment_method_name;
diff --git a/chrome/browser/ui/views/payments/payment_request_dialog_view_ids.h b/chrome/browser/ui/views/payments/payment_request_dialog_view_ids.h
index d9824ef987c39..e4c91d9be1d06 100644
--- a/chrome/browser/ui/views/payments/payment_request_dialog_view_ids.h
+++ b/chrome/browser/ui/views/payments/payment_request_dialog_view_ids.h
@@ -81,6 +81,9 @@ enum class DialogViewID : int {
   // The following are the ids for the individual sheets.
   CONTACT_INFO_EDITOR_SHEET,
   CREDIT_CARD_EDITOR_SHEET,
+  ERROR_SHEET,
+  ORDER_SUMMARY_SHEET,
+  PAYMENT_REQUEST_SHEET,
   SHIPPING_ADDRESS_EDITOR_SHEET,
 
   // The sheet opens payment app window.
diff --git a/chrome/browser/ui/views/payments/payment_request_sheet_controller.cc b/chrome/browser/ui/views/payments/payment_request_sheet_controller.cc
index 0173504532798..ed7f569cf049b 100644
--- a/chrome/browser/ui/views/payments/payment_request_sheet_controller.cc
+++ b/chrome/browser/ui/views/payments/payment_request_sheet_controller.cc
@@ -259,7 +259,7 @@ std::unique_ptr<views::View> PaymentRequestSheetController::CreateView() {
   auto view =
       views::Builder<internal::SheetView>(
           std::make_unique<internal::SheetView>(
-              primary_button_
+              ShouldAccelerateEnterKey()
                   ? base::BindRepeating(&PaymentRequestSheetController::
                                             PerformPrimaryButtonAction,
                                         weak_ptr_factory_.GetWeakPtr())
@@ -548,6 +548,12 @@ bool PaymentRequestSheetController::DisplayDynamicBorderForHiddenContents() {
   return true;
 }
 
+bool PaymentRequestSheetController::ShouldAccelerateEnterKey() {
+  // Subclasses must explicitly opt-into this behavior. Be aware of the risks of
+  // enabling click-jacking of the Enter key; see https://crbug.com/1403539
+  return false;
+}
+
 void PaymentRequestSheetController::CloseButtonPressed() {
   if (dialog()->IsInteractive())
     dialog()->CloseDialog();
diff --git a/chrome/browser/ui/views/payments/payment_request_sheet_controller.h b/chrome/browser/ui/views/payments/payment_request_sheet_controller.h
index fa4383cb9345f..2b850845df379 100644
--- a/chrome/browser/ui/views/payments/payment_request_sheet_controller.h
+++ b/chrome/browser/ui/views/payments/payment_request_sheet_controller.h
@@ -180,6 +180,12 @@ class PaymentRequestSheetController {
   // Returns true to display dynamic top and bottom border for hidden contents.
   virtual bool DisplayDynamicBorderForHiddenContents();
 
+  // Returns true if the subclass wants the 'Enter' key to be accelerated to
+  // always map to performing the primary button action (irregardless of the
+  // currently focused element). If a subclass returns true for this, it must
+  // also return true for ShouldShowPrimaryButton.
+  virtual bool ShouldAccelerateEnterKey();
+
   void CloseButtonPressed();
 
   views::MdTextButton* primary_button() { return primary_button_; }
diff --git a/chrome/browser/ui/views/payments/payment_sheet_view_controller.cc b/chrome/browser/ui/views/payments/payment_sheet_view_controller.cc
index 068912764e591..9ca9b63fadc55 100644
--- a/chrome/browser/ui/views/payments/payment_sheet_view_controller.cc
+++ b/chrome/browser/ui/views/payments/payment_sheet_view_controller.cc
@@ -463,6 +463,11 @@ PaymentSheetViewController::CreateExtraFooterView() {
   return CreateProductLogoFooterView();
 }
 
+bool PaymentSheetViewController::GetSheetId(DialogViewID* sheet_id) {
+  *sheet_id = DialogViewID::PAYMENT_REQUEST_SHEET;
+  return true;
+}
+
 // Creates the Order Summary row, which contains an "Order Summary" label,
 // an inline list of display items, a Total Amount label, and a Chevron. Returns
 // nullptr if WeakPtr<PaymentRequestSpec> has become null.
diff --git a/chrome/browser/ui/views/payments/payment_sheet_view_controller.h b/chrome/browser/ui/views/payments/payment_sheet_view_controller.h
index 8b014f912fa6d..193206178f238 100644
--- a/chrome/browser/ui/views/payments/payment_sheet_view_controller.h
+++ b/chrome/browser/ui/views/payments/payment_sheet_view_controller.h
@@ -51,6 +51,7 @@ class PaymentSheetViewController : public PaymentRequestSheetController,
   std::u16string GetSheetTitle() override;
   void FillContentView(views::View* content_view) override;
   std::unique_ptr<views::View> CreateExtraFooterView() override;
+  bool GetSheetId(DialogViewID* sheet_id) override;
 
   // These functions create the various sections and rows of the payment sheet.
   // Where applicable, they also populate |accessible_content|, which shouldn't
diff --git a/chrome/browser/ui/views/payments/payment_sheet_view_controller_browsertest.cc b/chrome/browser/ui/views/payments/payment_sheet_view_controller_browsertest.cc
index 75ffdeb9c39e0..54dc94d43f075 100644
--- a/chrome/browser/ui/views/payments/payment_sheet_view_controller_browsertest.cc
+++ b/chrome/browser/ui/views/payments/payment_sheet_view_controller_browsertest.cc
@@ -51,6 +51,34 @@ IN_PROC_BROWSER_TEST_F(PaymentSheetViewControllerTest,
                    ->HasFocus());
 }
 
+// The Enter key should not be accelerated for the main payment sheet; see
+// https://crbug.com/1403539
+IN_PROC_BROWSER_TEST_F(PaymentSheetViewControllerTest, EnterDoesNotContinue) {
+  // Installs two apps so that the Payment Request UI will be shown.
+  std::string a_method_name;
+  InstallPaymentApp("a.com", "/payment_request_success_responder.js",
+                    &a_method_name);
+  std::string b_method_name;
+  InstallPaymentApp("b.com", "/payment_request_success_responder.js",
+                    &b_method_name);
+
+  NavigateTo("/payment_request_no_shipping_test.html");
+  InvokePaymentRequestUIWithJs(content::JsReplace(
+      "buyWithMethods([{supportedMethods:$1}, {supportedMethods:$2}]);",
+      a_method_name, b_method_name));
+
+  EXPECT_TRUE(IsViewVisible(DialogViewID::PAY_BUTTON));
+  EXPECT_TRUE(IsViewVisible(DialogViewID::CANCEL_BUTTON));
+  EXPECT_TRUE(IsPayButtonEnabled());
+
+  // Trigger the 'Enter' accelerator - this should NOT be present and the
+  // dispatch should fail.
+  views::View* summary_sheet = dialog_view()->GetViewByID(
+      static_cast<int>(DialogViewID::PAYMENT_REQUEST_SHEET));
+  EXPECT_FALSE(summary_sheet->AcceleratorPressed(
+      ui::Accelerator(ui::VKEY_RETURN, ui::EF_NONE)));
+}
+
 using PaymentSheetViewControllerNoShippingTest = PaymentRequestBrowserTestBase;
 
 // If shipping and contact info are not requested, their rows should not be
diff --git a/chrome/browser/ui/views/payments/shipping_address_editor_view_controller_browsertest.cc b/chrome/browser/ui/views/payments/shipping_address_editor_view_controller_browsertest.cc
index c266aca079d9e..e7d0999d2d42b 100644
--- a/chrome/browser/ui/views/payments/shipping_address_editor_view_controller_browsertest.cc
+++ b/chrome/browser/ui/views/payments/shipping_address_editor_view_controller_browsertest.cc
@@ -281,8 +281,8 @@ IN_PROC_BROWSER_TEST_F(DISABLED_PaymentRequestShippingAddressEditorTest,
       .WillOnce(QuitMessageLoop(&data_loop));
   views::View* editor_sheet = dialog_view()->GetViewByID(
       static_cast<int>(DialogViewID::SHIPPING_ADDRESS_EDITOR_SHEET));
-  editor_sheet->AcceleratorPressed(
-      ui::Accelerator(ui::VKEY_RETURN, ui::EF_NONE));
+  EXPECT_TRUE(editor_sheet->AcceleratorPressed(
+      ui::Accelerator(ui::VKEY_RETURN, ui::EF_NONE)));
   data_loop.Run();
 
   personal_data_manager->RemoveObserver(&personal_data_observer_);
