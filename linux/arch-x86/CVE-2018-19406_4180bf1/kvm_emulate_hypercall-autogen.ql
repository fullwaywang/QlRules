/**
 * @name linux-4180bf1b655a791a0a6ef93a2ffffc762722c782-kvm_emulate_hypercall
 * @id cpp/linux/4180bf1b655a791a0a6ef93a2ffffc762722c782/kvm-emulate-hypercall
 * @description linux-4180bf1b655a791a0a6ef93a2ffffc762722c782-arch/x86/kvm/x86.c-kvm_emulate_hypercall CVE-2018-19406
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvcpu_6763, Variable va0_6765, Variable va1_6765, Variable va2_6765, Variable va3_6765, Variable vret_6765, Variable vop_64_bit_6766, VariableAccess target_2, ExprStmt target_3, ExprStmt target_4, ExprStmt target_5, ExprStmt target_6, NotExpr target_7, NotExpr target_8) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_6765
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("kvm_pv_send_ipi")
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="kvm"
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvcpu_6763
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=va0_6765
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=va1_6765
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getTarget()=va2_6765
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getTarget()=va3_6765
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(5).(VariableAccess).getTarget()=vop_64_bit_6766
		and target_0.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_2
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_5.getExpr().(AssignAndExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(VariableAccess).getLocation())
		and target_6.getExpr().(AssignAndExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getLocation())
		and target_7.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(5).(VariableAccess).getLocation())
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(5).(VariableAccess).getLocation().isBefore(target_8.getOperand().(VariableAccess).getLocation()))
}

predicate func_1(VariableAccess target_2, Function func) {
	exists(BreakStmt target_1 |
		target_1.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_2
		and target_1.getEnclosingFunction() = func)
}

predicate func_2(Variable vnr_6765, VariableAccess target_2) {
		target_2.getTarget()=vnr_6765
}

predicate func_3(Parameter vvcpu_6763, Variable va0_6765, Variable va1_6765, Variable vret_6765, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_6765
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("kvm_pv_clock_pairing")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_6763
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=va0_6765
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=va1_6765
}

predicate func_4(Parameter vvcpu_6763, Variable vret_6765, ExprStmt target_4) {
		target_4.getExpr().(FunctionCall).getTarget().hasName("kvm_register_write")
		and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_6763
		and target_4.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vret_6765
}

predicate func_5(Variable va2_6765, ExprStmt target_5) {
		target_5.getExpr().(AssignAndExpr).getLValue().(VariableAccess).getTarget()=va2_6765
		and target_5.getExpr().(AssignAndExpr).getRValue().(HexLiteral).getValue()="4294967295"
}

predicate func_6(Variable va3_6765, ExprStmt target_6) {
		target_6.getExpr().(AssignAndExpr).getLValue().(VariableAccess).getTarget()=va3_6765
		and target_6.getExpr().(AssignAndExpr).getRValue().(HexLiteral).getValue()="4294967295"
}

predicate func_7(Variable vop_64_bit_6766, BlockStmt target_9, NotExpr target_7) {
		target_7.getOperand().(VariableAccess).getTarget()=vop_64_bit_6766
		and target_7.getParent().(IfStmt).getThen()=target_9
}

predicate func_8(Variable vop_64_bit_6766, ExprStmt target_10, NotExpr target_8) {
		target_8.getOperand().(VariableAccess).getTarget()=vop_64_bit_6766
		and target_8.getParent().(IfStmt).getThen()=target_10
}

predicate func_9(Variable vnr_6765, Variable va0_6765, Variable va1_6765, BlockStmt target_9) {
		target_9.getStmt(0).(ExprStmt).getExpr().(AssignAndExpr).getLValue().(VariableAccess).getTarget()=vnr_6765
		and target_9.getStmt(0).(ExprStmt).getExpr().(AssignAndExpr).getRValue().(HexLiteral).getValue()="4294967295"
		and target_9.getStmt(1).(ExprStmt).getExpr().(AssignAndExpr).getLValue().(VariableAccess).getTarget()=va0_6765
		and target_9.getStmt(1).(ExprStmt).getExpr().(AssignAndExpr).getRValue().(HexLiteral).getValue()="4294967295"
		and target_9.getStmt(2).(ExprStmt).getExpr().(AssignAndExpr).getLValue().(VariableAccess).getTarget()=va1_6765
		and target_9.getStmt(2).(ExprStmt).getExpr().(AssignAndExpr).getRValue().(HexLiteral).getValue()="4294967295"
}

predicate func_10(Variable vret_6765, ExprStmt target_10) {
		target_10.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_6765
		and target_10.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vret_6765
}

from Function func, Parameter vvcpu_6763, Variable vnr_6765, Variable va0_6765, Variable va1_6765, Variable va2_6765, Variable va3_6765, Variable vret_6765, Variable vop_64_bit_6766, VariableAccess target_2, ExprStmt target_3, ExprStmt target_4, ExprStmt target_5, ExprStmt target_6, NotExpr target_7, NotExpr target_8, BlockStmt target_9, ExprStmt target_10
where
not func_0(vvcpu_6763, va0_6765, va1_6765, va2_6765, va3_6765, vret_6765, vop_64_bit_6766, target_2, target_3, target_4, target_5, target_6, target_7, target_8)
and not func_1(target_2, func)
and func_2(vnr_6765, target_2)
and func_3(vvcpu_6763, va0_6765, va1_6765, vret_6765, target_3)
and func_4(vvcpu_6763, vret_6765, target_4)
and func_5(va2_6765, target_5)
and func_6(va3_6765, target_6)
and func_7(vop_64_bit_6766, target_9, target_7)
and func_8(vop_64_bit_6766, target_10, target_8)
and func_9(vnr_6765, va0_6765, va1_6765, target_9)
and func_10(vret_6765, target_10)
and vvcpu_6763.getType().hasName("kvm_vcpu *")
and vnr_6765.getType().hasName("unsigned long")
and va0_6765.getType().hasName("unsigned long")
and va1_6765.getType().hasName("unsigned long")
and va2_6765.getType().hasName("unsigned long")
and va3_6765.getType().hasName("unsigned long")
and vret_6765.getType().hasName("unsigned long")
and vop_64_bit_6766.getType().hasName("int")
and vvcpu_6763.getFunction() = func
and vnr_6765.(LocalVariable).getFunction() = func
and va0_6765.(LocalVariable).getFunction() = func
and va1_6765.(LocalVariable).getFunction() = func
and va2_6765.(LocalVariable).getFunction() = func
and va3_6765.(LocalVariable).getFunction() = func
and vret_6765.(LocalVariable).getFunction() = func
and vop_64_bit_6766.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
