/**
 * @name linux-1be7107fbe18eed3e319a6c3e83c78254b693acb-__vma_adjust
 * @id cpp/linux/1be7107fbe18eed3e319a6c3e83c78254b693acb/--vma-adjust
 * @description linux-1be7107fbe18eed3e319a6c3e83c78254b693acb-mm/mmap.c-__vma_adjust CVE-2017-1000364
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvma_666, ExprStmt target_4, ExprStmt target_5) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("vm_end_gap")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vvma_666
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="highest_vm_end"
	and target_0.getParent().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("mm_struct *")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getArgument(0).(VariableAccess).getLocation())
	and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vvma_666, ExprStmt target_6) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("vm_end_gap")
	and target_1.getArgument(0).(VariableAccess).getTarget()=vvma_666
	and target_6.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation().isBefore(target_1.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Parameter vend_667, ExprStmt target_7, VariableAccess target_2) {
	target_2.getTarget()=vend_667
	and target_2.getParent().(AssignExpr).getRValue() = target_2
	and target_2.getParent().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="highest_vm_end"
	and target_2.getParent().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("mm_struct *")
	and target_7.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation().isBefore(target_2.getLocation())
}

predicate func_3(Parameter vend_667, ExprStmt target_8, VariableAccess target_3) {
	target_3.getTarget()=vend_667
	and target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_3.getLocation())
}

predicate func_4(Parameter vvma_666, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("vma_gap_update")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvma_666
}

predicate func_5(Parameter vvma_666, ExprStmt target_5) {
	target_5.getExpr().(FunctionCall).getTarget().hasName("anon_vma_interval_tree_post_update_vma")
	and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvma_666
}

predicate func_6(Parameter vvma_666, ExprStmt target_6) {
	target_6.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("vm_area_struct *")
	and target_6.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vvma_666
}

predicate func_7(Parameter vvma_666, Parameter vend_667, ExprStmt target_7) {
	target_7.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="vm_end"
	and target_7.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vvma_666
	and target_7.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vend_667
}

predicate func_8(Parameter vend_667, EqualityOperation target_9, ExprStmt target_8) {
	target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vend_667
	and target_8.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="vm_end"
	and target_8.getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("vm_area_struct *")
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_9
}

predicate func_9(BlockStmt target_10, Function func, EqualityOperation target_9) {
	target_9.getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_9.getRightOperand().(Literal).getValue()="2"
	and target_9.getParent().(IfStmt).getThen()=target_10
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Parameter vend_667, BlockStmt target_10) {
	target_10.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_10.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="1"
	and target_10.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vend_667
	and target_10.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getTarget().getName()="vm_end"
	and target_10.getStmt(1).(ExprStmt).getExpr().(AssignExpr).getRValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("vm_area_struct *")
}

from Function func, Parameter vvma_666, Parameter vend_667, VariableAccess target_2, VariableAccess target_3, ExprStmt target_4, ExprStmt target_5, ExprStmt target_6, ExprStmt target_7, ExprStmt target_8, EqualityOperation target_9, BlockStmt target_10
where
not func_0(vvma_666, target_4, target_5)
and not func_1(vvma_666, target_6)
and func_2(vend_667, target_7, target_2)
and func_3(vend_667, target_8, target_3)
and func_4(vvma_666, target_4)
and func_5(vvma_666, target_5)
and func_6(vvma_666, target_6)
and func_7(vvma_666, vend_667, target_7)
and func_8(vend_667, target_9, target_8)
and func_9(target_10, func, target_9)
and func_10(vend_667, target_10)
and vvma_666.getType().hasName("vm_area_struct *")
and vend_667.getType().hasName("unsigned long")
and vvma_666.getFunction() = func
and vend_667.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
