/**
 * @name linux-4a625ceee8a0ab0273534cb6b432ce6b331db5ee-memory_tier_init
 * @id cpp/linux/4a625ceee8a0ab0273534cb6b432ce6b331db5ee/memory-tier-init
 * @description linux-4a625ceee8a0ab0273534cb6b432ce6b331db5ee-memory_tier_init CVE-2023-23005
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdefault_dram_type, ExprStmt target_3, ExprStmt target_4) {
	exists(FunctionCall target_0 |
		target_0.getTarget().hasName("IS_ERR")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vdefault_dram_type
		and target_0.getParent().(IfStmt).getThen()=target_3
		and target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable vdefault_dram_type, ExprStmt target_3, VariableAccess target_1) {
		target_1.getTarget()=vdefault_dram_type
		and target_1.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_3
}

predicate func_2(Variable vdefault_dram_type, ExprStmt target_3, NotExpr target_2) {
		target_2.getOperand().(VariableAccess).getTarget()=vdefault_dram_type
		and target_2.getParent().(IfStmt).getThen()=target_3
}

predicate func_3(Function func, ExprStmt target_3) {
		target_3.getExpr().(FunctionCall).getTarget().hasName("panic")
		and target_3.getExpr().(FunctionCall).getArgument(0).(StringLiteral).getValue()="%s() failed to allocate default DRAM tier\n"
		and target_3.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType() instanceof ArrayType
		and target_3.getEnclosingFunction() = func
}

predicate func_4(Variable vdefault_dram_type, ExprStmt target_4) {
		target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vdefault_dram_type
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("alloc_memory_type")
		and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(AddExpr).getValue()="576"
}

from Function func, Variable vdefault_dram_type, VariableAccess target_1, NotExpr target_2, ExprStmt target_3, ExprStmt target_4
where
not func_0(vdefault_dram_type, target_3, target_4)
and func_1(vdefault_dram_type, target_3, target_1)
and func_2(vdefault_dram_type, target_3, target_2)
and func_3(func, target_3)
and func_4(vdefault_dram_type, target_4)
and vdefault_dram_type.getType().hasName("memory_dev_type *")
and not vdefault_dram_type.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
