/**
 * @name v8-92a908e24a0150eca0c31ada47db7f5db71ffd4c-decoding_mode>__DecodeBrOnNonNullImpl
 * @id cpp/v8/92a908e24a0150eca0c31ada47db7f5db71ffd4c/decodingmode>decodebronnonnullimpl
 * @description v8-92a908e24a0150eca0c31ada47db7f5db71ffd4c-src/wasm/function-body-decoder-impl.h-decoding_mode>__DecodeBrOnNonNullImpl CVE-2023-4070
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, Literal target_0) {
	target_0.getValue()="has_gc"
	and not target_0.getValue()="has_typed_funcref"
	and target_0.getValue()="has_gc"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, Literal target_1) {
	target_1.getValue()="has_gc"
	and not target_1.getValue()="has_typed_funcref"
	and target_1.getValue()="has_gc"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, StringLiteral target_2) {
	target_2.getValue()="this->enabled_.has_gc()"
	and not target_2.getValue()="this->enabled_.has_typed_funcref()"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, StringLiteral target_3) {
	target_3.getValue()="Invalid opcode 0x%02x (enable with --experimental-wasm-gc)"
	and not target_3.getValue()="Invalid opcode 0x%02x (enable with --experimental-wasm-typed_funcref)"
	and target_3.getEnclosingFunction() = func
}

from Function func, Literal target_0, Literal target_1, StringLiteral target_2, StringLiteral target_3
where
func_0(func, target_0)
and func_1(func, target_1)
and func_2(func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
