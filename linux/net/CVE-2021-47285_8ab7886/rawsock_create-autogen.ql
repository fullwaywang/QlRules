/**
 * @name linux-8ab78863e9eff11910e1ac8bcf478060c29b379e-rawsock_create
 * @id cpp/linux/8ab78863e9eff11910e1ac8bcf478060c29b379e/rawsock-create
 * @description linux-8ab78863e9eff11910e1ac8bcf478060c29b379e-net/nfc/rawsock.c-rawsock_create CVE-2021-47285
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(ReturnStmt target_2, Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("capable")
	and not target_0.getTarget().hasName("ns_capable")
	and target_0.getArgument(0).(Literal).getValue()="13"
	and target_0.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_2
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Parameter vnet_321, ExprStmt target_3) {
exists(PointerFieldAccess target_1 |
	target_1.getTarget().getName()="user_ns"
	and target_1.getQualifier().(VariableAccess).getTarget()=vnet_321
	and target_1.getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Function func, ReturnStmt target_2) {
	target_2.getExpr().(UnaryMinusExpr).getValue()="-1"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Parameter vnet_321, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("sock *")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("sk_alloc")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vnet_321
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(Literal).getValue()="39"
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(BitwiseOrExpr).getValue()="2592"
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(PointerFieldAccess).getTarget().getName()="proto"
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("const nfc_protocol *")
	and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Parameter vnet_321, FunctionCall target_0, ReturnStmt target_2, ExprStmt target_3
where
func_0(target_2, func, target_0)
and not func_1(vnet_321, target_3)
and func_2(func, target_2)
and func_3(vnet_321, target_3)
and vnet_321.getType().hasName("net *")
and vnet_321.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
