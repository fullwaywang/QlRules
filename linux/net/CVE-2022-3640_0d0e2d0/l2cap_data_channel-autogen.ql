/**
 * @name linux-0d0e2d032811280b927650ff3c15fe5020e82533-l2cap_data_channel
 * @id cpp/linux/0d0e2d032811280b927650ff3c15fe5020e82533/l2cap-data-channel
 * @description linux-0d0e2d032811280b927650ff3c15fe5020e82533-net/bluetooth/l2cap_core.c-l2cap_data_channel CVE-2022-3640
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vchan_7607, EqualityOperation target_1, NotExpr target_2, ExprStmt target_3) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("l2cap_chan_hold")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vchan_7607
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(2)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
	and target_2.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Function func, EqualityOperation target_1) {
	target_1.getLeftOperand().(VariableAccess).getTarget().getType().hasName("u16")
	and target_1.getRightOperand().(Literal).getValue()="3"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vchan_7607, BlockStmt target_4, NotExpr target_2) {
	target_2.getOperand().(VariableAccess).getTarget()=vchan_7607
	and target_2.getParent().(IfStmt).getThen()=target_4
}

predicate func_3(Variable vchan_7607, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("l2cap_chan_lock")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vchan_7607
}

predicate func_4(Function func, BlockStmt target_4) {
	target_4.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("kfree_skb")
	and target_4.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("sk_buff *")
	and target_4.getEnclosingFunction() = func
}

from Function func, Variable vchan_7607, EqualityOperation target_1, NotExpr target_2, ExprStmt target_3, BlockStmt target_4
where
not func_0(vchan_7607, target_1, target_2, target_3)
and func_1(func, target_1)
and func_2(vchan_7607, target_4, target_2)
and func_3(vchan_7607, target_3)
and func_4(func, target_4)
and vchan_7607.getType().hasName("l2cap_chan *")
and vchan_7607.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
