/**
 * @name linux-2d45a02d0166caf2627fe91897c6ffc3b19514c4-sctp_init_sock
 * @id cpp/linux/2d45a02d0166caf2627fe91897c6ffc3b19514c4/sctp-init-sock
 * @description linux-2d45a02d0166caf2627fe91897c6ffc3b19514c4-net/sctp/socket.c-sctp_init_sock CVE-2015-3212
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsk_3997, ValueFieldAccess target_3, ValueFieldAccess target_4) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("spin_lock")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="addr_wq_lock"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sctp"
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("sock_net")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_3997
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3
	and target_4.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vsk_3997, ValueFieldAccess target_3) {
exists(ExprStmt target_1 |
	target_1.getExpr().(FunctionCall).getTarget().hasName("spin_unlock")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getTarget().getName()="addr_wq_lock"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="sctp"
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("sock_net")
	and target_1.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_3997
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(3)=target_1
	and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_3)
}

predicate func_2(Variable vsp_4000, ValueFieldAccess target_3, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="do_auto_asconf"
	and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsp_4000
	and target_2.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_2.getParent().(IfStmt).getCondition()=target_3
}

predicate func_3(Function func, ValueFieldAccess target_3) {
	target_3.getTarget().getName()="default_auto_asconf"
	and target_3.getQualifier().(PointerFieldAccess).getTarget().getName()="sctp"
	and target_3.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("net *")
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Parameter vsk_3997, ValueFieldAccess target_4) {
	target_4.getTarget().getName()="skc_prot"
	and target_4.getQualifier().(PointerFieldAccess).getTarget().getName()="__sk_common"
	and target_4.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsk_3997
}

from Function func, Variable vsp_4000, Parameter vsk_3997, ExprStmt target_2, ValueFieldAccess target_3, ValueFieldAccess target_4
where
not func_0(vsk_3997, target_3, target_4)
and not func_1(vsk_3997, target_3)
and func_2(vsp_4000, target_3, target_2)
and func_3(func, target_3)
and func_4(vsk_3997, target_4)
and vsp_4000.getType().hasName("sctp_sock *")
and vsk_3997.getType().hasName("sock *")
and vsp_4000.(LocalVariable).getFunction() = func
and vsk_3997.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
