/**
 * @name linux-c25b2ae136039ffa820c26138ed4a5e5f3ab3841-check_cond_jmp_op
 * @id cpp/linux/c25b2ae136039ffa820c26138ed4a5e5f3ab3841/check-cond-jmp-op
 * @description linux-c25b2ae136039ffa820c26138ed4a5e5f3ab3841-kernel/bpf/verifier.c-check_cond_jmp_op CVE-2022-23222
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdst_reg_9264, BlockStmt target_1, FunctionCall target_0) {
	target_0.getTarget().hasName("reg_type_may_be_null")
	and not target_0.getTarget().hasName("type_may_be_null")
	and target_0.getArgument(0).(PointerFieldAccess).getTarget().getName()="type"
	and target_0.getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdst_reg_9264
	and target_0.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(NotExpr).getOperand().(VariableAccess).getTarget().getType().hasName("bool")
	and target_0.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_0.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getTarget().getName()="imm"
	and target_0.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_insn *")
	and target_0.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_0.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("u8")
	and target_0.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(LogicalOrExpr).getLeftOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="16"
	and target_0.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("u8")
	and target_0.getParent().(LogicalAndExpr).getLeftOperand().(LogicalAndExpr).getRightOperand().(LogicalOrExpr).getRightOperand().(EqualityOperation).getRightOperand().(Literal).getValue()="80"
	and target_0.getParent().(LogicalAndExpr).getParent().(IfStmt).getThen()=target_1
}

predicate func_1(Function func, BlockStmt target_1) {
	target_1.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mark_ptr_or_null_regs")
	and target_1.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("bpf_verifier_state *")
	and target_1.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="dst_reg"
	and target_1.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("bpf_insn *")
	and target_1.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(EqualityOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("u8")
	and target_1.getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(EqualityOperation).getRightOperand().(Literal).getValue()="80"
	and target_1.getEnclosingFunction() = func
}

from Function func, Variable vdst_reg_9264, FunctionCall target_0, BlockStmt target_1
where
func_0(vdst_reg_9264, target_1, target_0)
and func_1(func, target_1)
and vdst_reg_9264.getType().hasName("bpf_reg_state *")
and vdst_reg_9264.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
