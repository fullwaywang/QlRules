/**
 * @name linux-e84ec6e25df9bb0968599e92eacedaf3a0a5b587-qca_serdev_shutdown
 * @id cpp/linux/e84ec6e25df9bb0968599e92eacedaf3a0a5b587/qca-serdev-shutdown
 * @description linux-e84ec6e25df9bb0968599e92eacedaf3a0a5b587-drivers/bluetooth/hci_qca.c-qca_serdev_shutdown CVE-2022-48878
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(EqualityOperation target_3, Function func) {
exists(IfStmt target_0 |
	exists(LogicalOrExpr obj_0 | obj_0=target_0.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getLeftOperand() |
			exists(AddressOfExpr obj_2 | obj_2=obj_1.getArgument(1) |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getOperand() |
					obj_3.getTarget().getName()="flags"
					and obj_3.getQualifier().(VariableAccess).getType().hasName("qca_data *")
				)
			)
			and obj_1.getTarget().hasName("test_bit")
		)
		and exists(NotExpr obj_4 | obj_4=obj_0.getRightOperand() |
			exists(FunctionCall obj_5 | obj_5=obj_4.getOperand() |
				exists(AddressOfExpr obj_6 | obj_6=obj_5.getArgument(1) |
					exists(PointerFieldAccess obj_7 | obj_7=obj_6.getOperand() |
						obj_7.getTarget().getName()="flags"
						and obj_7.getQualifier().(VariableAccess).getType().hasName("hci_dev *")
					)
				)
				and obj_5.getTarget().hasName("test_bit")
			)
		)
	)
	and exists(BlockStmt obj_8 | obj_8=target_0.getParent() |
		exists(IfStmt obj_9 | obj_9=obj_8.getParent() |
			obj_9.getThen().(BlockStmt).getStmt(0)=target_0
			and obj_9.getCondition()=target_3
		)
	)
	and target_0.getThen() instanceof ReturnStmt
	and target_0.getEnclosingFunction() = func
)
}

predicate func_2(Function func, ReturnStmt target_2) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_2
}

predicate func_3(Function func, EqualityOperation target_3) {
	exists(PointerFieldAccess obj_0 | obj_0=target_3.getLeftOperand() |
		obj_0.getTarget().getName()="btsoc_type"
		and obj_0.getQualifier().(VariableAccess).getTarget().getType().hasName("qca_serdev *")
	)
	and target_3.getEnclosingFunction() = func
}

from Function func, ReturnStmt target_2, EqualityOperation target_3
where
not func_0(target_3, func)
and func_2(func, target_2)
and func_3(func, target_3)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
