/**
 * @name chromium-0d2f7d8d41ac2bc092cd21174236cfa4be96f0ae-blink__Serial__getPorts
 * @id cpp/chromium/0d2f7d8d41ac2bc092cd21174236cfa4be96f0ae/blinkserialgetports
 * @description chromium-0d2f7d8d41ac2bc092cd21174236cfa4be96f0ae-third_party/blink/renderer/modules/serial/serial.cc-blink__Serial__getPorts CVE-2023-2462
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vcontext_88, BlockStmt target_10, FunctionCall target_0) {
	target_0.getTarget().hasName("IsFeatureEnabled")
	and not target_0.getTarget().hasName("ShouldBlockSerialServiceCall")
	and target_0.getQualifier().(VariableAccess).getTarget()=vcontext_88
	and target_0.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_10
}

predicate func_1(Function func) {
exists(FunctionCall target_1 |
	exists(FunctionCall obj_0 | obj_0=target_1.getQualifier() |
		obj_0.getTarget().hasName("GetSupplementable")
		and obj_0.getQualifier().(ThisExpr).getType() instanceof PointerType
	)
	and target_1.getTarget().hasName("DomWindow")
	and target_1.getParent().(FunctionCall).getParent().(NotExpr).getOperand() instanceof FunctionCall
	and target_1.getEnclosingFunction() = func
)
}

predicate func_2(Function func, FunctionCall target_2) {
	target_2.getTarget().hasName("GetExecutionContext")
	and target_2.getQualifier().(ThisExpr).getType() instanceof PointerType
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Parameter vexception_state_87, VariableAccess target_3) {
	target_3.getTarget()=vexception_state_87
}

predicate func_4(Function func, DeclStmt target_4) {
	func.getEntryPoint().(BlockStmt).getAStmt()=target_4
}

predicate func_5(Parameter vexception_state_87, Variable vcontext_88, Variable vkContextGone, Function func, IfStmt target_5) {
	exists(BlockStmt obj_0 | obj_0=target_5.getThen() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				obj_2.getTarget().hasName("ThrowDOMException")
				and obj_2.getQualifier().(VariableAccess).getTarget()=vexception_state_87
				and obj_2.getArgument(1).(VariableAccess).getTarget()=vkContextGone
			)
		)
		and obj_0.getStmt(1).(ReturnStmt).getExpr().(ConstructorCall).getType() instanceof VoidType
	)
	and target_5.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vcontext_88
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
}

/*predicate func_6(Parameter vexception_state_87, Variable vkContextGone, NotExpr target_11, ExprStmt target_6) {
	exists(FunctionCall obj_0 | obj_0=target_6.getExpr() |
		obj_0.getTarget().hasName("ThrowDOMException")
		and obj_0.getQualifier().(VariableAccess).getTarget()=vexception_state_87
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vkContextGone
	)
	and target_6.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_11
}

*/
predicate func_7(BlockStmt target_10, Function func, NotExpr target_7) {
	target_7.getOperand() instanceof FunctionCall
	and target_7.getParent().(IfStmt).getThen()=target_10
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Parameter vexception_state_87, Variable vkFeaturePolicyBlocked, NotExpr target_7, ExprStmt target_8) {
	exists(FunctionCall obj_0 | obj_0=target_8.getExpr() |
		obj_0.getTarget().hasName("ThrowSecurityError")
		and obj_0.getQualifier().(VariableAccess).getTarget()=vexception_state_87
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vkFeaturePolicyBlocked
	)
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
}

predicate func_9(NotExpr target_7, Function func, ReturnStmt target_9) {
	target_9.getExpr().(ConstructorCall).getType() instanceof VoidType
	and target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Function func, BlockStmt target_10) {
	target_10.getStmt(0) instanceof ExprStmt
	and target_10.getStmt(1) instanceof ReturnStmt
	and target_10.getEnclosingFunction() = func
}

predicate func_11(Variable vcontext_88, NotExpr target_11) {
	target_11.getOperand().(VariableAccess).getTarget()=vcontext_88
}

from Function func, Parameter vexception_state_87, Variable vcontext_88, Variable vkContextGone, Variable vkFeaturePolicyBlocked, FunctionCall target_0, FunctionCall target_2, VariableAccess target_3, DeclStmt target_4, IfStmt target_5, NotExpr target_7, ExprStmt target_8, ReturnStmt target_9, BlockStmt target_10, NotExpr target_11
where
func_0(vcontext_88, target_10, target_0)
and not func_1(func)
and func_2(func, target_2)
and func_3(vexception_state_87, target_3)
and func_4(func, target_4)
and func_5(vexception_state_87, vcontext_88, vkContextGone, func, target_5)
and func_7(target_10, func, target_7)
and func_8(vexception_state_87, vkFeaturePolicyBlocked, target_7, target_8)
and func_9(target_7, func, target_9)
and func_10(func, target_10)
and func_11(vcontext_88, target_11)
and vexception_state_87.getType().hasName("ExceptionState &")
and vcontext_88.getType().hasName("ExecutionContext *")
and vkContextGone.getType() instanceof ArrayType
and vkFeaturePolicyBlocked.getType() instanceof ArrayType
and vexception_state_87.getFunction() = func
and vcontext_88.(LocalVariable).getFunction() = func
and not vkContextGone.getParentScope+() = func
and not vkFeaturePolicyBlocked.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
