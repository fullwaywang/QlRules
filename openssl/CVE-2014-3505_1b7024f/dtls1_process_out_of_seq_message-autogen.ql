/**
 * @name openssl-1b7024fb69161619855d86b80ae0681ea802e245-dtls1_process_out_of_seq_message
 * @id cpp/openssl/1b7024fb69161619855d86b80ae0681ea802e245/dtls1-process-out-of-seq-message
 * @description openssl-1b7024fb69161619855d86b80ae0681ea802e245-ssl/d1_both.c-dtls1_process_out_of_seq_message CVE-2014-3505
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vitem_702, ExprStmt target_5, ExprStmt target_6) {
	exists(LogicalAndExpr target_0 |
		target_0.getAnOperand() instanceof EqualityOperation
		and target_0.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getTarget()=vitem_702
		and target_0.getAnOperand().(EqualityOperation).getAnOperand() instanceof Literal
		and target_0.getParent().(IfStmt).getThen()=target_5
		and target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_0.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vfrag_701, ExprStmt target_5, EqualityOperation target_1) {
		target_1.getAnOperand().(VariableAccess).getTarget()=vfrag_701
		and target_1.getAnOperand().(Literal).getValue()="0"
		and target_1.getParent().(IfStmt).getThen()=target_5
}

predicate func_2(Variable vitem_702, ExprStmt target_7, VariableAccess target_2) {
		target_2.getTarget()=vitem_702
		and target_2.getParent().(NEExpr).getAnOperand().(Literal).getValue()="0"
		and target_2.getParent().(NEExpr).getParent().(IfStmt).getThen()=target_7
}

predicate func_4(Variable vitem_702, Function func, IfStmt target_4) {
		target_4.getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getTarget()=vitem_702
		and target_4.getCondition().(EqualityOperation).getAnOperand() instanceof Literal
		and target_4.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("CRYPTO_free")
		and target_4.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vitem_702
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
}

predicate func_5(Variable vfrag_701, ExprStmt target_5) {
		target_5.getExpr().(FunctionCall).getTarget().hasName("dtls1_hm_fragment_free")
		and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vfrag_701
}

predicate func_6(Variable vitem_702, ExprStmt target_6) {
		target_6.getExpr().(FunctionCall).getTarget().hasName("pqueue_insert")
		and target_6.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="buffered_messages"
		and target_6.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="d1"
		and target_6.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("SSL *")
		and target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vitem_702
}

predicate func_7(Function func, ExprStmt target_7) {
		target_7.getExpr() instanceof FunctionCall
		and target_7.getEnclosingFunction() = func
}

from Function func, Variable vfrag_701, Variable vitem_702, EqualityOperation target_1, VariableAccess target_2, IfStmt target_4, ExprStmt target_5, ExprStmt target_6, ExprStmt target_7
where
not func_0(vitem_702, target_5, target_6)
and func_1(vfrag_701, target_5, target_1)
and func_2(vitem_702, target_7, target_2)
and func_4(vitem_702, func, target_4)
and func_5(vfrag_701, target_5)
and func_6(vitem_702, target_6)
and func_7(func, target_7)
and vfrag_701.getType().hasName("hm_fragment *")
and vitem_702.getType().hasName("pitem *")
and vfrag_701.(LocalVariable).getFunction() = func
and vitem_702.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
