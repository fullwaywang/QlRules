commit 73e30a62b19b9fbb4e6a3465c59da186630d5f2e
Author: Dave Ertman <david.m.ertman@intel.com>
Date:   Mon Oct 4 05:15:25 2021 -0700

    ice: Avoid crash from unnecessary IDA free
    
    In the remove path, there is an attempt to free the aux_idx IDA whether
    it was allocated or not.  This can potentially cause a crash when
    unloading the driver on systems that do not initialize support for RDMA.
    But, this free cannot be gated by the status bit for RDMA, since it is
    allocated if the driver detects support for RDMA at probe time, but the
    driver can enter into a state where RDMA is not supported after the IDA
    has been allocated at probe time and this would lead to a memory leak.
    
    Initialize aux_idx to an invalid value and check for a valid value when
    unloading to determine if an IDA free is necessary.
    
    Fixes: d25a0fc41c1f9 ("ice: Initialize RDMA support")
    Reported-by: Jun Miao <jun.miao@windriver.com>
    Signed-off-by: Dave Ertman <david.m.ertman@intel.com>
    Tested-by: Jesse Brandeburg <jesse.brandeburg@intel.com>
    Signed-off-by: Tony Nguyen <anthony.l.nguyen@intel.com>

diff --git a/drivers/net/ethernet/intel/ice/ice_main.c b/drivers/net/ethernet/intel/ice/ice_main.c
index 0d6c143f6653..94037881bfd8 100644
--- a/drivers/net/ethernet/intel/ice/ice_main.c
+++ b/drivers/net/ethernet/intel/ice/ice_main.c
@@ -4224,6 +4224,9 @@ ice_probe(struct pci_dev *pdev, const struct pci_device_id __always_unused *ent)
 	if (!pf)
 		return -ENOMEM;
 
+	/* initialize Auxiliary index to invalid value */
+	pf->aux_idx = -1;
+
 	/* set up for high or low DMA */
 	err = dma_set_mask_and_coherent(dev, DMA_BIT_MASK(64));
 	if (err)
@@ -4615,7 +4618,8 @@ static void ice_remove(struct pci_dev *pdev)
 
 	ice_aq_cancel_waiting_tasks(pf);
 	ice_unplug_aux_dev(pf);
-	ida_free(&ice_aux_ida, pf->aux_idx);
+	if (pf->aux_idx >= 0)
+		ida_free(&ice_aux_ida, pf->aux_idx);
 	set_bit(ICE_DOWN, pf->state);
 
 	mutex_destroy(&(&pf->hw)->fdir_fltr_lock);
