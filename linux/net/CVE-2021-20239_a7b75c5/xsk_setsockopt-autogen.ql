/**
 * @name linux-a7b75c5a8c41445f33efb663887ff5f5c3b4454b-xsk_setsockopt
 * @id cpp/linux/a7b75c5a8c41445f33efb663887ff5f5c3b4454b/xsk-setsockopt
 * @description linux-a7b75c5a8c41445f33efb663887ff5f5c3b4454b-net/xdp/xsk.c-xsk_setsockopt CVE-2021-20239
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter voptval_705, ReturnStmt target_12, FunctionCall target_9) {
exists(FunctionCall target_0 |
	target_0.getTarget().hasName("copy_from_sockptr")
	and target_0.getArgument(0) instanceof AddressOfExpr
	and target_0.getArgument(1).(VariableAccess).getTarget()=voptval_705
	and target_0.getArgument(2) instanceof SizeofExprOperator
	and target_0.getParent().(IfStmt).getThen()=target_12
	and target_0.getArgument(1).(VariableAccess).getLocation().isBefore(target_9.getArgument(1).(VariableAccess).getLocation()))
}

predicate func_1(Parameter voptval_705, Variable vmr_size_741, ReturnStmt target_13, FunctionCall target_9, FunctionCall target_10) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("copy_from_sockptr")
	and target_1.getArgument(0) instanceof AddressOfExpr
	and target_1.getArgument(1).(VariableAccess).getTarget()=voptval_705
	and target_1.getArgument(2).(VariableAccess).getTarget()=vmr_size_741
	and target_1.getParent().(IfStmt).getThen()=target_13
	and target_9.getArgument(1).(VariableAccess).getLocation().isBefore(target_1.getArgument(1).(VariableAccess).getLocation())
	and target_1.getArgument(1).(VariableAccess).getLocation().isBefore(target_10.getArgument(1).(VariableAccess).getLocation()))
}

predicate func_2(Parameter voptval_705, ReturnStmt target_14, FunctionCall target_10, FunctionCall target_11) {
exists(FunctionCall target_2 |
	target_2.getTarget().hasName("copy_from_sockptr")
	and target_2.getArgument(0) instanceof AddressOfExpr
	and target_2.getArgument(1).(VariableAccess).getTarget()=voptval_705
	and target_2.getArgument(2) instanceof SizeofExprOperator
	and target_2.getParent().(IfStmt).getThen()=target_14
	and target_10.getArgument(1).(VariableAccess).getLocation().isBefore(target_2.getArgument(1).(VariableAccess).getLocation())
	and target_2.getArgument(1).(VariableAccess).getLocation().isBefore(target_11.getArgument(1).(VariableAccess).getLocation()))
}

predicate func_3(Parameter voptval_705, Variable ventries_719, ReturnStmt target_12, AddressOfExpr target_3) {
	target_3.getOperand().(VariableAccess).getTarget()=ventries_719
	and target_3.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=voptval_705
	and target_3.getParent().(FunctionCall).getArgument(2).(SizeofExprOperator).getValue()="4"
	and target_3.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_12
}

/*predicate func_4(Function func, SizeofExprOperator target_4) {
	target_4.getValue()="4"
	and target_4.getEnclosingFunction() = func
}

*/
predicate func_5(Parameter voptval_705, Variable vmr_size_741, Variable vmr_742, ReturnStmt target_13, AddressOfExpr target_5) {
	target_5.getOperand().(VariableAccess).getTarget()=vmr_742
	and target_5.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=voptval_705
	and target_5.getParent().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vmr_size_741
	and target_5.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_13
}

predicate func_6(Parameter voptval_705, Variable ventries_775, ReturnStmt target_14, AddressOfExpr target_6) {
	target_6.getOperand().(VariableAccess).getTarget()=ventries_775
	and target_6.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=voptval_705
	and target_6.getParent().(FunctionCall).getArgument(2).(SizeofExprOperator).getValue()="4"
	and target_6.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_14
}

/*predicate func_7(Function func, SizeofExprOperator target_7) {
	target_7.getValue()="4"
	and target_7.getEnclosingFunction() = func
}

*/
/*predicate func_8(Parameter voptval_705, Variable vmr_size_741, Variable vmr_742, ReturnStmt target_13, VariableAccess target_8) {
	target_8.getTarget()=vmr_size_741
	and target_8.getParent().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vmr_742
	and target_8.getParent().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=voptval_705
	and target_8.getParent().(FunctionCall).getParent().(IfStmt).getThen()=target_13
}

*/
predicate func_9(Parameter voptval_705, ReturnStmt target_12, FunctionCall target_9) {
	target_9.getTarget().hasName("copy_from_user")
	and target_9.getArgument(0) instanceof AddressOfExpr
	and target_9.getArgument(1).(VariableAccess).getTarget()=voptval_705
	and target_9.getArgument(2) instanceof SizeofExprOperator
	and target_9.getParent().(IfStmt).getThen()=target_12
}

predicate func_10(Parameter voptval_705, Variable vmr_size_741, ReturnStmt target_13, FunctionCall target_10) {
	target_10.getTarget().hasName("copy_from_user")
	and target_10.getArgument(0) instanceof AddressOfExpr
	and target_10.getArgument(1).(VariableAccess).getTarget()=voptval_705
	and target_10.getArgument(2).(VariableAccess).getTarget()=vmr_size_741
	and target_10.getParent().(IfStmt).getThen()=target_13
}

predicate func_11(Parameter voptval_705, ReturnStmt target_14, FunctionCall target_11) {
	target_11.getTarget().hasName("copy_from_user")
	and target_11.getArgument(0) instanceof AddressOfExpr
	and target_11.getArgument(1).(VariableAccess).getTarget()=voptval_705
	and target_11.getArgument(2) instanceof SizeofExprOperator
	and target_11.getParent().(IfStmt).getThen()=target_14
}

predicate func_12(FunctionCall target_9, Function func, ReturnStmt target_12) {
	target_12.getExpr().(UnaryMinusExpr).getValue()="-14"
	and target_12.getParent().(IfStmt).getCondition()=target_9
	and target_12.getEnclosingFunction() = func
}

predicate func_13(FunctionCall target_10, Function func, ReturnStmt target_13) {
	target_13.getExpr().(UnaryMinusExpr).getValue()="-14"
	and target_13.getParent().(IfStmt).getCondition()=target_10
	and target_13.getEnclosingFunction() = func
}

predicate func_14(FunctionCall target_11, Function func, ReturnStmt target_14) {
	target_14.getExpr().(UnaryMinusExpr).getValue()="-14"
	and target_14.getParent().(IfStmt).getCondition()=target_11
	and target_14.getEnclosingFunction() = func
}

from Function func, Parameter voptval_705, Variable ventries_719, Variable vmr_size_741, Variable vmr_742, Variable ventries_775, AddressOfExpr target_3, AddressOfExpr target_5, AddressOfExpr target_6, FunctionCall target_9, FunctionCall target_10, FunctionCall target_11, ReturnStmt target_12, ReturnStmt target_13, ReturnStmt target_14
where
not func_0(voptval_705, target_12, target_9)
and not func_1(voptval_705, vmr_size_741, target_13, target_9, target_10)
and not func_2(voptval_705, target_14, target_10, target_11)
and func_3(voptval_705, ventries_719, target_12, target_3)
and func_5(voptval_705, vmr_size_741, vmr_742, target_13, target_5)
and func_6(voptval_705, ventries_775, target_14, target_6)
and func_9(voptval_705, target_12, target_9)
and func_10(voptval_705, vmr_size_741, target_13, target_10)
and func_11(voptval_705, target_14, target_11)
and func_12(target_9, func, target_12)
and func_13(target_10, func, target_13)
and func_14(target_11, func, target_14)
and voptval_705.getType().hasName("char *")
and ventries_719.getType().hasName("int")
and vmr_size_741.getType().hasName("size_t")
and vmr_742.getType().hasName("xdp_umem_reg")
and ventries_775.getType().hasName("int")
and voptval_705.getFunction() = func
and ventries_719.(LocalVariable).getFunction() = func
and vmr_size_741.(LocalVariable).getFunction() = func
and vmr_742.(LocalVariable).getFunction() = func
and ventries_775.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
