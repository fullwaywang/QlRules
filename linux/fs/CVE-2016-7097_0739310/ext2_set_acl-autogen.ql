/**
 * @name linux-073931017b49d9458aa351605b43a7e34598caef-ext2_set_acl
 * @id cpp/linux/073931017b49d9458aa351605b43a7e34598caef/ext2-set-acl
 * @description linux-073931017b49d9458aa351605b43a7e34598caef-fs/ext2/acl.c-ext2_set_acl CVE-2016-7097
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vinode_182, Parameter vacl_182, Variable verror_187, FunctionCall target_0) {
	target_0.getTarget().hasName("posix_acl_equiv_mode")
	and not target_0.getTarget().hasName("posix_acl_update_mode")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vacl_182
	and target_0.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="i_mode"
	and target_0.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinode_182
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=verror_187
}

predicate func_2(Parameter vacl_182, ConditionalExpr target_9) {
exists(AddressOfExpr target_2 |
	target_2.getOperand().(VariableAccess).getTarget()=vacl_182
	and target_2.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
	and target_2.getOperand().(VariableAccess).getLocation().isBefore(target_9.getCondition().(VariableAccess).getLocation()))
}

predicate func_3(Parameter vinode_182, RelationalOperation target_7, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="i_ctime"
	and target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinode_182
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
}

predicate func_4(Parameter vinode_182, RelationalOperation target_7, ExprStmt target_4) {
	target_4.getExpr().(FunctionCall).getTarget().hasName("mark_inode_dirty")
	and target_4.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vinode_182
	and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
}

predicate func_5(Variable verror_187, ReturnStmt target_10, VariableAccess target_5) {
	target_5.getTarget()=verror_187
	and target_5.getParent().(LTExpr).getGreaterOperand() instanceof Literal
	and target_5.getParent().(LTExpr).getParent().(IfStmt).getThen()=target_10
}

predicate func_6(Parameter vacl_182, VariableAccess target_6) {
	target_6.getTarget()=vacl_182
	and target_6.getParent().(AssignExpr).getLValue() = target_6
	and target_6.getParent().(AssignExpr).getRValue() instanceof Literal
}

predicate func_7(Variable verror_187, ReturnStmt target_10, RelationalOperation target_7) {
	 (target_7 instanceof GTExpr or target_7 instanceof LTExpr)
	and target_7.getLesserOperand().(VariableAccess).getTarget()=verror_187
	and target_7.getGreaterOperand().(Literal).getValue()="0"
	and target_7.getParent().(IfStmt).getThen()=target_10
}

predicate func_8(Parameter vacl_182, Variable verror_187, RelationalOperation target_7, IfStmt target_8) {
	target_8.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=verror_187
	and target_8.getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_8.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vacl_182
	and target_8.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
}

predicate func_9(Parameter vacl_182, ConditionalExpr target_9) {
	target_9.getCondition().(VariableAccess).getTarget()=vacl_182
	and target_9.getThen().(UnaryMinusExpr).getValue()="-13"
	and target_9.getElse().(Literal).getValue()="0"
}

predicate func_10(Variable verror_187, RelationalOperation target_7, ReturnStmt target_10) {
	target_10.getExpr().(VariableAccess).getTarget()=verror_187
	and target_10.getParent().(IfStmt).getCondition()=target_7
}

from Function func, Parameter vinode_182, Parameter vacl_182, Variable verror_187, FunctionCall target_0, ExprStmt target_3, ExprStmt target_4, VariableAccess target_5, VariableAccess target_6, RelationalOperation target_7, IfStmt target_8, ConditionalExpr target_9, ReturnStmt target_10
where
func_0(vinode_182, vacl_182, verror_187, target_0)
and not func_2(vacl_182, target_9)
and func_3(vinode_182, target_7, target_3)
and func_4(vinode_182, target_7, target_4)
and func_5(verror_187, target_10, target_5)
and func_6(vacl_182, target_6)
and func_7(verror_187, target_10, target_7)
and func_8(vacl_182, verror_187, target_7, target_8)
and func_9(vacl_182, target_9)
and func_10(verror_187, target_7, target_10)
and vinode_182.getType().hasName("inode *")
and vacl_182.getType().hasName("posix_acl *")
and verror_187.getType().hasName("int")
and vinode_182.getFunction() = func
and vacl_182.getFunction() = func
and verror_187.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
