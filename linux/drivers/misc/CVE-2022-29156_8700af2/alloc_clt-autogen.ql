/**
 * @name linux-8700af2cc18c919b2a83e74e0479038fd113c15d-alloc_clt
 * @id cpp/linux/8700af2cc18c919b2a83e74e0479038fd113c15d/alloc-clt
 * @description linux-8700af2cc18c919b2a83e74e0479038fd113c15d-drivers/infiniband/ulp/rtrs/rtrs-clt.c-alloc_clt CVE-2022-29156
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("device_register")
	and not target_0.getTarget().hasName("device_add")
	and target_0.getArgument(0) instanceof AddressOfExpr
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, FunctionCall target_1) {
	target_1.getTarget().hasName("device_unregister")
	and not target_1.getTarget().hasName("device_initialize")
	and target_1.getArgument(0) instanceof AddressOfExpr
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vclt_2695, FunctionCall target_2) {
	target_2.getTarget().hasName("kfree")
	and not target_2.getTarget().hasName("device_del")
	and target_2.getArgument(0).(VariableAccess).getTarget()=vclt_2695
}

predicate func_3(Variable vclt_2695, Variable vrtrs_clt_dev_class, DoStmt target_13, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="class"
	and target_3.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="dev"
	and target_3.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vclt_2695
	and target_3.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vrtrs_clt_dev_class
	and target_13.getLocation().isBefore(target_3.getLocation())
}

predicate func_4(Variable vclt_2695, DoStmt target_13, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="release"
	and target_4.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="dev"
	and target_4.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vclt_2695
	and target_13.getLocation().isBefore(target_4.getLocation())
}

predicate func_5(LabelStmt target_14, Function func, ExprStmt target_5) {
	target_5.getExpr() instanceof FunctionCall
	and target_14.getLocation().isBefore(target_5.getLocation())
	and target_5.getEnclosingFunction() = func
}

predicate func_6(ExprStmt target_15, Function func, ExprStmt target_6) {
	target_6.getExpr() instanceof FunctionCall
	and target_15.getLocation().isBefore(target_6.getLocation())
	and target_6.getEnclosingFunction() = func
}

predicate func_8(Variable vclt_2695, AddressOfExpr target_8) {
	target_8.getOperand().(PointerFieldAccess).getTarget().getName()="dev"
	and target_8.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vclt_2695
	and target_8.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_9(Variable vclt_2695, VariableAccess target_16, ExprStmt target_9) {
	target_9.getExpr().(FunctionCall).getTarget().hasName("put_device")
	and target_9.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="dev"
	and target_9.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vclt_2695
	and target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_16
}

predicate func_10(Variable vclt_2695, AddressOfExpr target_10) {
	target_10.getOperand().(PointerFieldAccess).getTarget().getName()="dev"
	and target_10.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vclt_2695
	and target_10.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_11(Variable vclt_2695, VariableAccess target_11) {
	target_11.getTarget()=vclt_2695
	and target_11.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_12(VariableAccess target_16, Function func, GotoStmt target_12) {
	target_12.getName() ="err"
	and target_12.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_16
	and target_12.getEnclosingFunction() = func
}

predicate func_13(Variable vclt_2695, DoStmt target_13) {
	target_13.getCondition().(Literal).getValue()="0"
	and target_13.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__mutex_init")
	and target_13.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="paths_mutex"
	and target_13.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vclt_2695
	and target_13.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(StringLiteral).getValue()="&clt->paths_mutex"
	and target_13.getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("lock_class_key")
}

predicate func_14(Function func, LabelStmt target_14) {
	target_14.getName() ="err_dev"
	and target_14.getEnclosingFunction() = func
}

predicate func_15(Variable vclt_2695, ExprStmt target_15) {
	target_15.getExpr().(FunctionCall).getTarget().hasName("free_percpu")
	and target_15.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="pcpu_path"
	and target_15.getExpr().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vclt_2695
}

predicate func_16(Variable verr_2696, BlockStmt target_17, VariableAccess target_16) {
	target_16.getTarget()=verr_2696
	and target_16.getParent().(IfStmt).getThen()=target_17
}

predicate func_17(Function func, BlockStmt target_17) {
	target_17.getStmt(0) instanceof ExprStmt
	and target_17.getStmt(1) instanceof GotoStmt
	and target_17.getEnclosingFunction() = func
}

from Function func, Variable vclt_2695, Variable verr_2696, Variable vrtrs_clt_dev_class, FunctionCall target_0, FunctionCall target_1, FunctionCall target_2, ExprStmt target_3, ExprStmt target_4, ExprStmt target_5, ExprStmt target_6, AddressOfExpr target_8, ExprStmt target_9, AddressOfExpr target_10, VariableAccess target_11, GotoStmt target_12, DoStmt target_13, LabelStmt target_14, ExprStmt target_15, VariableAccess target_16, BlockStmt target_17
where
func_0(func, target_0)
and func_1(func, target_1)
and func_2(vclt_2695, target_2)
and func_3(vclt_2695, vrtrs_clt_dev_class, target_13, target_3)
and func_4(vclt_2695, target_13, target_4)
and func_5(target_14, func, target_5)
and func_6(target_15, func, target_6)
and func_8(vclt_2695, target_8)
and func_9(vclt_2695, target_16, target_9)
and func_10(vclt_2695, target_10)
and func_11(vclt_2695, target_11)
and func_12(target_16, func, target_12)
and func_13(vclt_2695, target_13)
and func_14(func, target_14)
and func_15(vclt_2695, target_15)
and func_16(verr_2696, target_17, target_16)
and func_17(func, target_17)
and vclt_2695.getType().hasName("rtrs_clt_sess *")
and verr_2696.getType().hasName("int")
and vrtrs_clt_dev_class.getType().hasName("class *")
and vclt_2695.(LocalVariable).getFunction() = func
and verr_2696.(LocalVariable).getFunction() = func
and not vrtrs_clt_dev_class.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
