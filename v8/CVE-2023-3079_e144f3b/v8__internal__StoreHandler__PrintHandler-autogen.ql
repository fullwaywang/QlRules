/**
 * @name v8-e144f3b71e64e01d6ffd247eb15ca1ff56f6287b-v8__internal__StoreHandler__PrintHandler
 * @id cpp/v8/e144f3b71e64e01d6ffd247eb15ca1ff56f6287b/v8internalstorehandlerprinthandler
 * @description v8-e144f3b71e64e01d6ffd247eb15ca1ff56f6287b-src/ic/handler-configuration.cc-v8__internal__StoreHandler__PrintHandler CVE-2023-3079
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vhandler_562, FunctionCall target_3, FunctionCall target_4) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("IsMap")
	and target_0.getCondition().(FunctionCall).getQualifier().(VariableAccess).getTarget()=vhandler_562
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("operator<<")
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getQualifier().(FunctionCall).getTarget().hasName("operator<<")
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getQualifier().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("operator<<")
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getQualifier().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("operator<<")
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getQualifier().(FunctionCall).getArgument(1).(StringLiteral).getValue()=")"
	and target_0.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("operator<<")
	and target_0.getElse().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getQualifier() instanceof FunctionCall
	and target_0.getParent().(IfStmt).getParent().(IfStmt).getElse().(IfStmt).getElse()=target_0
	and target_0.getParent().(IfStmt).getParent().(IfStmt).getCondition()=target_3
	and target_4.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getQualifier().(VariableAccess).getLocation()))
}

/*predicate func_1(Parameter vhandler_562, Parameter vos_562, ConstructorCall target_5, FunctionCall target_6, FunctionCall target_7) {
exists(FunctionCall target_1 |
	target_1.getTarget().hasName("operator<<")
	and target_1.getQualifier().(FunctionCall).getTarget().hasName("operator<<")
	and target_1.getQualifier().(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("operator<<")
	and target_1.getQualifier().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("operator<<")
	and target_1.getQualifier().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vos_562
	and target_1.getQualifier().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(FunctionCall).getArgument(1).(StringLiteral).getValue()="StoreHandler(field transition to "
	and target_1.getQualifier().(FunctionCall).getArgument(0).(FunctionCall).getArgument(1).(ConstructorCall).getArgument(0).(VariableAccess).getTarget()=vhandler_562
	and target_1.getQualifier().(FunctionCall).getArgument(1).(StringLiteral).getValue()=")"
	and target_1.getQualifier().(FunctionCall).getArgument(0).(FunctionCall).getArgument(1).(ConstructorCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_5.getArgument(0).(VariableAccess).getLocation())
	and target_6.getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getQualifier().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_1.getQualifier().(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_7.getArgument(0).(VariableAccess).getLocation()))
}

*/
predicate func_2(Parameter vhandler_562, Parameter vos_562, FunctionCall target_2) {
	target_2.getTarget().hasName("operator<<")
	and target_2.getArgument(0).(FunctionCall).getTarget().hasName("operator<<")
	and target_2.getArgument(0).(FunctionCall).getArgument(0).(FunctionCall).getTarget().hasName("operator<<")
	and target_2.getArgument(0).(FunctionCall).getArgument(0).(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vos_562
	and target_2.getArgument(0).(FunctionCall).getArgument(0).(FunctionCall).getArgument(1).(StringLiteral).getValue()="StoreHandler(<unexpected>)("
	and target_2.getArgument(0).(FunctionCall).getArgument(1).(ConstructorCall).getArgument(0).(VariableAccess).getTarget()=vhandler_562
	and target_2.getArgument(1).(StringLiteral).getValue()=")"
}

predicate func_3(Parameter vhandler_562, FunctionCall target_3) {
	target_3.getTarget().hasName("IsSmi")
	and target_3.getQualifier().(VariableAccess).getTarget()=vhandler_562
}

predicate func_4(Parameter vhandler_562, FunctionCall target_4) {
	target_4.getTarget().hasName("cast")
	and target_4.getArgument(0).(VariableAccess).getTarget()=vhandler_562
}

predicate func_5(Parameter vhandler_562, ConstructorCall target_5) {
	target_5.getArgument(0).(VariableAccess).getTarget()=vhandler_562
}

predicate func_6(Parameter vos_562, FunctionCall target_6) {
	target_6.getTarget().hasName("operator<<")
	and target_6.getArgument(0).(VariableAccess).getTarget()=vos_562
	and target_6.getArgument(1).(StringLiteral).getValue()=")"
}

predicate func_7(Parameter vos_562, FunctionCall target_7) {
	target_7.getTarget().hasName("operator<<")
	and target_7.getArgument(0).(VariableAccess).getTarget()=vos_562
	and target_7.getArgument(1).(StringLiteral).getValue()="StoreHandler(<unexpected>)("
}

from Function func, Parameter vhandler_562, Parameter vos_562, FunctionCall target_2, FunctionCall target_3, FunctionCall target_4, ConstructorCall target_5, FunctionCall target_6, FunctionCall target_7
where
not func_0(vhandler_562, target_3, target_4)
and func_2(vhandler_562, vos_562, target_2)
and func_3(vhandler_562, target_3)
and func_4(vhandler_562, target_4)
and func_5(vhandler_562, target_5)
and func_6(vos_562, target_6)
and func_7(vos_562, target_7)
and vhandler_562.getType().hasName("Object")
and vos_562.getType().hasName("ostream &")
and vhandler_562.getFunction() = func
and vos_562.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
