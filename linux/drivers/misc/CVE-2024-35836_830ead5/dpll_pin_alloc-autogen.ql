/**
 * @name linux-830ead5fb0c5855ce4d70ba2ed4a673b5f1e7d9b-dpll_pin_alloc
 * @id cpp/linux/830ead5fb0c5855ce4d70ba2ed4a673b5f1e7d9b/dpll-pin-alloc
 * @description linux-830ead5fb0c5855ce4d70ba2ed4a673b5f1e7d9b-drivers/dpll/dpll_core.c-dpll_pin_alloc CVE-2024-35836
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, SizeofExprOperator target_0) {
	target_0.getValue()="216"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, Literal target_1) {
	target_1.getValue()="1066"
	and not target_1.getValue()="1070"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, Literal target_2) {
	target_2.getValue()="1067"
	and not target_2.getValue()="1071"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Parameter vprop_430, Variable vpin_432, Variable vret_433, AddressOfExpr target_9, ExprStmt target_10) {
exists(AssignExpr target_3 |
	target_3.getLValue().(VariableAccess).getTarget()=vret_433
	and target_3.getRValue().(FunctionCall).getTarget().hasName("dpll_pin_prop_dup")
	and target_3.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vprop_430
	and target_3.getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="prop"
	and target_3.getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpin_432
	and target_3.getRValue().(FunctionCall).getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_9.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_10.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_3.getLValue().(VariableAccess).getLocation()))
}

predicate func_4(Variable vret_433, ExprStmt target_11, Function func) {
exists(IfStmt target_4 |
	target_4.getCondition().(VariableAccess).getTarget()=vret_433
	and target_4.getThen().(GotoStmt).getName() ="err_pin_prop"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
	and target_4.getLocation().isBefore(target_11.getLocation()))
}

predicate func_5(Variable vpin_432, ExprStmt target_12, AddressOfExpr target_13, Function func) {
exists(ExprStmt target_5 |
	target_5.getExpr().(FunctionCall).getTarget().hasName("dpll_pin_prop_free")
	and target_5.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="prop"
	and target_5.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpin_432
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_5
	and target_5.getLocation().isBefore(target_12.getLocation())
	and target_13.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_5.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_6(Parameter vprop_430, Variable vpin_432, PointerFieldAccess target_6) {
	target_6.getTarget().getName()="prop"
	and target_6.getQualifier().(VariableAccess).getTarget()=vpin_432
	and target_6.getParent().(AssignExpr).getLValue() = target_6
	and target_6.getParent().(AssignExpr).getRValue().(VariableAccess).getTarget()=vprop_430
}

/*predicate func_7(Parameter vprop_430, Variable vpin_432, VariableAccess target_7) {
	target_7.getTarget()=vprop_430
	and target_7.getParent().(AssignExpr).getRValue() = target_7
	and target_7.getParent().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="prop"
	and target_7.getParent().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpin_432
}

*/
predicate func_8(Parameter vprop_430, Variable vpin_432, AssignExpr target_8) {
	target_8.getLValue().(PointerFieldAccess).getTarget().getName()="prop"
	and target_8.getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpin_432
	and target_8.getRValue().(VariableAccess).getTarget()=vprop_430
}

predicate func_9(Variable vpin_432, AddressOfExpr target_9) {
	target_9.getOperand().(PointerFieldAccess).getTarget().getName()="refcount"
	and target_9.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpin_432
}

predicate func_10(Variable vret_433, ExprStmt target_10) {
	target_10.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vret_433
	and target_10.getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-22"
}

predicate func_11(Variable vpin_432, ExprStmt target_11) {
	target_11.getExpr().(FunctionCall).getTarget().hasName("refcount_set")
	and target_11.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="refcount"
	and target_11.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpin_432
	and target_11.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="1"
}

predicate func_12(Variable vpin_432, ExprStmt target_12) {
	target_12.getExpr().(FunctionCall).getTarget().hasName("kfree")
	and target_12.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vpin_432
}

predicate func_13(Variable vpin_432, AddressOfExpr target_13) {
	target_13.getOperand().(PointerFieldAccess).getTarget().getName()="parent_refs"
	and target_13.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vpin_432
	and target_13.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("xa_destroy")
}

from Function func, Parameter vprop_430, Variable vpin_432, Variable vret_433, SizeofExprOperator target_0, Literal target_1, Literal target_2, PointerFieldAccess target_6, AssignExpr target_8, AddressOfExpr target_9, ExprStmt target_10, ExprStmt target_11, ExprStmt target_12, AddressOfExpr target_13
where
func_0(func, target_0)
and func_1(func, target_1)
and func_2(func, target_2)
and not func_3(vprop_430, vpin_432, vret_433, target_9, target_10)
and not func_4(vret_433, target_11, func)
and not func_5(vpin_432, target_12, target_13, func)
and func_6(vprop_430, vpin_432, target_6)
and func_8(vprop_430, vpin_432, target_8)
and func_9(vpin_432, target_9)
and func_10(vret_433, target_10)
and func_11(vpin_432, target_11)
and func_12(vpin_432, target_12)
and func_13(vpin_432, target_13)
and vprop_430.getType().hasName("const dpll_pin_properties *")
and vpin_432.getType().hasName("dpll_pin *")
and vret_433.getType().hasName("int")
and vprop_430.getFunction() = func
and vpin_432.(LocalVariable).getFunction() = func
and vret_433.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
