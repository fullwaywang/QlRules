commit 8eddc1354a929176bdd7514d0f8e55a7aa0d7389	8eddc1354a929176bdd7514d0f8e55a7aa0d7389
Author: Stephen McGruer <smcgruer@chromium.org>
Date:   Thu Oct 19 17:11:12 2023 +0000

    [PaymentHandler] Require Link header when fetching payment method manifests
    
    Bug: 1492698
    Change-Id: Ib8213f2826cfb94b8c2c63a4f4b7b5ae3dd26ea9
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4954394
    Reviewed-by: Rouslan Solomakhin <rouslan@chromium.org>
    Commit-Queue: Stephen McGruer <smcgruer@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1212234}

diff --git a/chrome/browser/ui/views/payments/payment_request_can_make_payment_metrics_browsertest.cc b/chrome/browser/ui/views/payments/payment_request_can_make_payment_metrics_browsertest.cc
index 211c837226a48..c2413378ef4da 100644
--- a/chrome/browser/ui/views/payments/payment_request_can_make_payment_metrics_browsertest.cc
+++ b/chrome/browser/ui/views/payments/payment_request_can_make_payment_metrics_browsertest.cc
@@ -39,7 +39,7 @@ class PaymentRequestCanMakePaymentMetricsTest
 
     // Choosing nickpay for its JIT installation support.
     nickpay_server_.ServeFilesFromSourceDirectory(
-        "components/test/data/payments/nickpay.test/");
+        "components/test/data/payments/");
 
     ASSERT_TRUE(nickpay_server_.Start());
   }
@@ -205,9 +205,9 @@ IN_PROC_BROWSER_TEST_F(PaymentRequestCanMakePaymentMetricsTest,
   base::HistogramTester histogram_tester;
 
   std::string nickpay_method_name =
-      nickpay_server_.GetURL("nickpay.test", "/pay").spec();
+      nickpay_server_.GetURL("nickpay.test", "/nickpay.test/pay").spec();
   std::string nickpay2_method_name =
-      nickpay_server_.GetURL("nickpay2.test", "/pay").spec();
+      nickpay_server_.GetURL("nickpay2.test", "/nickpay.test/pay").spec();
 
   ResetEventWaiterForSequence({DialogEvent::CAN_MAKE_PAYMENT_CALLED,
                                DialogEvent::CAN_MAKE_PAYMENT_RETURNED,
@@ -267,9 +267,9 @@ IN_PROC_BROWSER_TEST_F(PaymentRequestCanMakePaymentMetricsTest,
   base::HistogramTester histogram_tester;
 
   std::string nickpay_method_name =
-      nickpay_server_.GetURL("nickpay.test", "/pay").spec();
+      nickpay_server_.GetURL("nickpay.test", "/nickpay.test/pay").spec();
   std::string nickpay2_method_name =
-      nickpay_server_.GetURL("nickpay2.test", "/pay").spec();
+      nickpay_server_.GetURL("nickpay2.test", "/nickpay.test/pay").spec();
 
   ResetEventWaiterForSequence({DialogEvent::CAN_MAKE_PAYMENT_CALLED,
                                DialogEvent::CAN_MAKE_PAYMENT_RETURNED,
@@ -333,9 +333,9 @@ IN_PROC_BROWSER_TEST_F(PaymentRequestCanMakePaymentMetricsTest,
   base::HistogramTester histogram_tester;
 
   std::string nickpay_method_name =
-      nickpay_server_.GetURL("nickpay.test", "/pay").spec();
+      nickpay_server_.GetURL("nickpay.test", "/nickpay.test/pay").spec();
   std::string nickpay2_method_name =
-      nickpay_server_.GetURL("nickpay2.test", "/pay").spec();
+      nickpay_server_.GetURL("nickpay2.test", "/nickpay.test/pay").spec();
 
   ResetEventWaiterForSequence({DialogEvent::CAN_MAKE_PAYMENT_CALLED,
                                DialogEvent::CAN_MAKE_PAYMENT_RETURNED,
diff --git a/components/payments/core/features.cc b/components/payments/core/features.cc
index e1e751eeb4e77..b1c39c8caa88f 100644
--- a/components/payments/core/features.cc
+++ b/components/payments/core/features.cc
@@ -73,5 +73,9 @@ BASE_FEATURE(kPaymentHandlerAlwaysRefreshIcon,
              "PaymentHandlerAlwaysRefreshIcon",
              base::FEATURE_ENABLED_BY_DEFAULT);
 
+BASE_FEATURE(kPaymentHandlerRequireLinkHeader,
+             "PaymentHandlerRequireLinkHeader",
+             base::FEATURE_ENABLED_BY_DEFAULT);
+
 }  // namespace features
 }  // namespace payments
diff --git a/components/payments/core/features.h b/components/payments/core/features.h
index 586a25fcc2aa1..a1d1e31b7ce24 100644
--- a/components/payments/core/features.h
+++ b/components/payments/core/features.h
@@ -59,6 +59,10 @@ BASE_DECLARE_FEATURE(kPaymentHandlerWindowInTaskManager);
 // refresh the icon for the app.
 BASE_DECLARE_FEATURE(kPaymentHandlerAlwaysRefreshIcon);
 
+// If enabled, the payment method manifest fetch for Payment Handler must go via
+// a Link header with rel="payment-method-manifest".
+BASE_DECLARE_FEATURE(kPaymentHandlerRequireLinkHeader);
+
 }  // namespace features
 }  // namespace payments
 
diff --git a/components/payments/core/native_error_strings.cc b/components/payments/core/native_error_strings.cc
index 06c8a3ac3a9cd..34312c3b1888c 100644
--- a/components/payments/core/native_error_strings.cc
+++ b/components/payments/core/native_error_strings.cc
@@ -192,6 +192,9 @@ const char kCanMakePaymentEventNoExplicitlyVerifiedMethods[] =
 const char kGenericPaymentMethodNotSupportedMessage[] =
     "Payment method not supported.";
 
+const char kNoLinkHeader[] =
+    "No \"Link: rel=payment-method-manifest\" HTTP header found at \"$1\".";
+
 const char kNoContentAndNoLinkHeader[] =
     "No content and no \"Link: rel=payment-method-manifest\" HTTP header found "
     "at \"$1\".";
diff --git a/components/payments/core/native_error_strings.h b/components/payments/core/native_error_strings.h
index 0403376e402e6..ac7a52a460a74 100644
--- a/components/payments/core/native_error_strings.h
+++ b/components/payments/core/native_error_strings.h
@@ -226,6 +226,10 @@ extern const char kCanMakePaymentEventNoExplicitlyVerifiedMethods[];
 // A message about unsupported payment method.
 extern const char kGenericPaymentMethodNotSupportedMessage[];
 
+// Used for errors downloading the payment method manifest. This format should
+// be used with base::ReplaceStringPlaceholders(fmt, {A}, nullptr).
+extern const char kNoLinkHeader[];
+
 // Used for errors downloading the payment method manifest. This format should
 // be used with base::ReplaceStringPlaceholders(fmt, {A}, nullptr).
 extern const char kNoContentAndNoLinkHeader[];
diff --git a/components/payments/core/payment_manifest_downloader.cc b/components/payments/core/payment_manifest_downloader.cc
index b65234b5326e3..12ce5656937de 100644
--- a/components/payments/core/payment_manifest_downloader.cc
+++ b/components/payments/core/payment_manifest_downloader.cc
@@ -9,6 +9,7 @@
 
 #include "base/check_op.h"
 #include "base/containers/contains.h"
+#include "base/feature_list.h"
 #include "base/functional/bind.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_piece.h"
@@ -17,6 +18,7 @@
 #include "components/link_header_util/link_header_util.h"
 #include "components/payments/core/csp_checker.h"
 #include "components/payments/core/error_logger.h"
+#include "components/payments/core/features.h"
 #include "components/payments/core/native_error_strings.h"
 #include "components/payments/core/url_util.h"
 #include "net/base/load_flags.h"
@@ -286,8 +288,8 @@ void PaymentManifestDownloader::OnURLLoaderCompleteInternal(
   DCHECK(download->IsLinkHeaderDownload());
 
   if (!headers) {
-    // Fallback to HTTP GET when HTTP HEAD response has no headers.
-    FallbackToDownloadingResponseBody(final_url, std::move(download));
+    // HTTP HEAD response has no headers; possibly fallback to HTTP GET.
+    TryFallbackToDownloadingResponseBody(final_url, std::move(download));
     return;
   }
 
@@ -302,9 +304,8 @@ void PaymentManifestDownloader::OnURLLoaderCompleteInternal(
   std::string link_header;
   headers->GetNormalizedHeader("link", &link_header);
   if (link_header.empty()) {
-    // Fallback to HTTP GET when HTTP HEAD response does not contain a Link
-    // header.
-    FallbackToDownloadingResponseBody(final_url, std::move(download));
+    // HTTP HEAD response has no Link header; possibly fallback to HTTP GET.
+    TryFallbackToDownloadingResponseBody(final_url, std::move(download));
     return;
   }
 
@@ -356,22 +357,33 @@ void PaymentManifestDownloader::OnURLLoaderCompleteInternal(
     }
   }
 
-  // Fallback to HTTP GET when HTTP HEAD response does not contain a Link header
-  // with rel="payment-method-manifest".
-  FallbackToDownloadingResponseBody(final_url, std::move(download));
+  // HTTP HEAD response has no Link header that has a
+  // rel="payment-method-manifest" entry; possibly fallback to HTTP GET.
+  TryFallbackToDownloadingResponseBody(final_url, std::move(download));
 }
 
-void PaymentManifestDownloader::FallbackToDownloadingResponseBody(
+void PaymentManifestDownloader::TryFallbackToDownloadingResponseBody(
     const GURL& url_to_download,
     std::unique_ptr<Download> download_info) {
-  InitiateDownload(
-      /*request_initiator=*/download_info->request_initiator,
-      /*url=*/url_to_download,
-      /*url_before_redirects=*/download_info->url_before_redirects,
-      /*did_follow_redirect=*/download_info->did_follow_redirect,
-      /*download_type=*/Download::Type::FALLBACK_TO_RESPONSE_BODY,
-      /*allowed_number_of_redirects=*/0,
-      /*callback=*/std::move(download_info->callback));
+  if (base::FeatureList::IsEnabled(
+          features::kPaymentHandlerRequireLinkHeader)) {
+    // Not allowed to fallback, because the payment method manifest load must
+    // have a Link header.
+    std::string error_message = base::ReplaceStringPlaceholders(
+        errors::kNoLinkHeader, {url_to_download.spec()}, nullptr);
+    log_->Error(error_message);
+    std::move(download_info->callback)
+        .Run(url_to_download, std::string(), error_message);
+  } else {
+    InitiateDownload(
+        /*request_initiator=*/download_info->request_initiator,
+        /*url=*/url_to_download,
+        /*url_before_redirects=*/download_info->url_before_redirects,
+        /*did_follow_redirect=*/download_info->did_follow_redirect,
+        /*download_type=*/Download::Type::FALLBACK_TO_RESPONSE_BODY,
+        /*allowed_number_of_redirects=*/0,
+        /*callback=*/std::move(download_info->callback));
+  }
 }
 
 network::SimpleURLLoader* PaymentManifestDownloader::GetLoaderForTesting() {
diff --git a/components/payments/core/payment_manifest_downloader.h b/components/payments/core/payment_manifest_downloader.h
index 0dff04878d7f0..e41b52bc14397 100644
--- a/components/payments/core/payment_manifest_downloader.h
+++ b/components/payments/core/payment_manifest_downloader.h
@@ -184,7 +184,7 @@ class PaymentManifestDownloader {
       scoped_refptr<net::HttpResponseHeaders> headers,
       int net_error);
 
-  void FallbackToDownloadingResponseBody(
+  void TryFallbackToDownloadingResponseBody(
       const GURL& url_to_download,
       std::unique_ptr<Download> download_info);
 
diff --git a/components/payments/core/payment_manifest_downloader_unittest.cc b/components/payments/core/payment_manifest_downloader_unittest.cc
index 7379dcb05fb55..4c94a0be90ce3 100644
--- a/components/payments/core/payment_manifest_downloader_unittest.cc
+++ b/components/payments/core/payment_manifest_downloader_unittest.cc
@@ -9,9 +9,11 @@
 
 #include "base/functional/bind.h"
 #include "base/strings/stringprintf.h"
+#include "base/test/scoped_feature_list.h"
 #include "base/test/task_environment.h"
 #include "components/payments/core/const_csp_checker.h"
 #include "components/payments/core/error_logger.h"
+#include "components/payments/core/features.h"
 #include "net/base/net_errors.h"
 #include "net/http/http_response_headers.h"
 #include "services/network/public/cpp/simple_url_loader.h"
@@ -127,20 +129,6 @@ class PaymentMethodManifestDownloaderTest
         base::BindOnce(&PaymentMethodManifestDownloaderTest::OnManifestDownload,
                        base::Unretained(this)));
   }
-
-  // Simulates two responses for payment method manifest download:
-  // 1) Only HTTP header without the response body content.
-  // 2) Both HTTP header and the response body content.
-  void ServerHeaderAndFallbackResponse(int response_code,
-                                       Headers send_headers,
-                                       absl::optional<std::string> link_header,
-                                       const std::string& response_body,
-                                       int net_error) {
-    ServerResponse(response_code, send_headers, link_header, kNoResponseBody,
-                   net_error);
-    ServerResponse(response_code, send_headers, link_header, response_body,
-                   net_error);
-  }
 };
 
 TEST_F(PaymentMethodManifestDownloaderTest, FirstHttpResponse404IsFailure) {
@@ -157,39 +145,44 @@ TEST_F(PaymentMethodManifestDownloaderTest,
   EXPECT_CALL(*this,
               OnManifestDownload(
                   _, kNoContent,
-                  "No content and no \"Link: rel=payment-method-manifest\" "
-                  "HTTP header found at \"https://bobpay.test/\"."));
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
-  ServerHeaderAndFallbackResponse(200, Headers::kOmit, kNoLinkHeader,
-                                  kNoResponseBody, net::OK);
+  ServerResponse(200, Headers::kOmit, kNoLinkHeader, kNoResponseBody, net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
-       NoHttpHeadersButWithResponseBodyIsSuccess) {
-  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+       NoHttpHeadersButWithResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
-  ServerHeaderAndFallbackResponse(200, Headers::kOmit, kNoLinkHeader,
-                                  "response body", net::OK);
+  ServerResponse(200, Headers::kOmit, kNoLinkHeader, "response body", net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
        EmptyHttpHeaderAndEmptyResponseBodyIsFailure) {
-  EXPECT_CALL(
-      *this, OnManifestDownload(
-                 _, kNoContent,
-                 "No content and no \"Link: rel=payment-method-manifest\" HTTP "
-                 "header found at \"https://bobpay.test/\"."));
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
-  ServerHeaderAndFallbackResponse(200, Headers::kSend, kNoLinkHeader,
-                                  kNoResponseBody, net::OK);
+  ServerResponse(200, Headers::kSend, kNoLinkHeader, kNoResponseBody, net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
-       EmptyHttpHeaderButWithResponseBodyIsSuccess) {
-  EXPECT_CALL(*this, OnManifestDownload(_, "response content", kNoError));
+       EmptyHttpHeaderButWithResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
-  ServerHeaderAndFallbackResponse(200, Headers::kSend, kNoLinkHeader,
-                                  "response content", net::OK);
+  ServerResponse(200, Headers::kSend, kNoLinkHeader, "response content",
+                 net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
@@ -197,39 +190,47 @@ TEST_F(PaymentMethodManifestDownloaderTest,
   EXPECT_CALL(*this,
               OnManifestDownload(
                   _, kNoContent,
-                  "No content and no \"Link: rel=payment-method-manifest\" "
-                  "HTTP header found at \"https://bobpay.test/\"."));
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
-  ServerHeaderAndFallbackResponse(200, Headers::kSend, kEmptyLinkHeader,
-                                  kNoResponseBody, net::OK);
+  ServerResponse(200, Headers::kSend, kEmptyLinkHeader, kNoResponseBody,
+                 net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
-       EmptyHttpLinkHeaderButWithResponseBodyIsSuccess) {
-  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+       EmptyHttpLinkHeaderButWithResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
-  ServerHeaderAndFallbackResponse(200, Headers::kSend, kEmptyLinkHeader,
-                                  "response body", net::OK);
+  ServerResponse(200, Headers::kSend, kEmptyLinkHeader, "response body",
+                 net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
        NoRelInHttpLinkHeaderAndNoResponseBodyIsFailure) {
   EXPECT_CALL(*this,
               OnManifestDownload(
-                  _, std::string(),
-                  "No content and no \"Link: rel=payment-method-manifest\" "
-                  "HTTP header found at \"https://bobpay.test/\"."));
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
-  ServerHeaderAndFallbackResponse(200, Headers::kSend, "<manifest.json>",
-                                  kNoResponseBody, net::OK);
+  ServerResponse(200, Headers::kSend, "<manifest.json>", kNoResponseBody,
+                 net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
-       NoRelInHttpLinkHeaderButWithResponseBodyIsSuccess) {
-  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+       NoRelInHttpLinkHeaderButWithResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
-  ServerHeaderAndFallbackResponse(200, Headers::kSend, "<manifest.json>",
-                                  "response body", net::OK);
+  ServerResponse(200, Headers::kSend, "<manifest.json>", "response body",
+                 net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
@@ -237,21 +238,23 @@ TEST_F(PaymentMethodManifestDownloaderTest,
   EXPECT_CALL(*this,
               OnManifestDownload(
                   _, kNoContent,
-                  "No content and no \"Link: rel=payment-method-manifest\" "
-                  "HTTP header found at \"https://bobpay.test/\"."));
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
-  ServerHeaderAndFallbackResponse(200, Headers::kSend,
-                                  "rel=payment-method-manifest",
-                                  kNoResponseBody, net::OK);
+  ServerResponse(200, Headers::kSend, "rel=payment-method-manifest",
+                 kNoResponseBody, net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
-       NoUrlInHttpLinkHeaderButWithResponseBodyIsSuccess) {
-  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+       NoUrlInHttpLinkHeaderButWithResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
-  ServerHeaderAndFallbackResponse(200, Headers::kSend,
-                                  "rel=payment-method-manifest",
-                                  "response body", net::OK);
+  ServerResponse(200, Headers::kSend, "rel=payment-method-manifest",
+                 "response body", net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
@@ -259,21 +262,23 @@ TEST_F(PaymentMethodManifestDownloaderTest,
   EXPECT_CALL(*this,
               OnManifestDownload(
                   _, kNoContent,
-                  "No content and no \"Link: rel=payment-method-manifest\" "
-                  "HTTP header found at \"https://bobpay.test/\"."));
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
-  ServerHeaderAndFallbackResponse(200, Headers::kSend,
-                                  "<manifest.json>; rel=web-app-manifest",
-                                  kNoResponseBody, net::OK);
+  ServerResponse(200, Headers::kSend, "<manifest.json>; rel=web-app-manifest",
+                 kNoResponseBody, net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest,
-       NoManifestRellInHttpLinkHeaderButWithResponseBodyIsSuccess) {
-  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+       NoManifestRellInHttpLinkHeaderButWithResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No \"Link: rel=payment-method-manifest\" HTTP header found "
+                  "at \"https://bobpay.test/\"."));
 
-  ServerHeaderAndFallbackResponse(200, Headers::kSend,
-                                  "<manifest.json>; rel=web-app-manifest",
-                                  "response body", net::OK);
+  ServerResponse(200, Headers::kSend, "<manifest.json>; rel=web-app-manifest",
+                 "response body", net::OK);
 }
 
 TEST_F(PaymentMethodManifestDownloaderTest, SecondHttpResponse404IsFailure) {
@@ -597,6 +602,165 @@ TEST_F(PaymentMethodManifestDownloaderTest, NotAllowCrossSiteRedirects) {
   ServerRedirect(301, GURL("https://alicepay.test"));
 }
 
+// Variant of PaymentMethodManifestDownloaderTest covering the logic when
+// kPaymentHandlerRequireLinkHeader is set to false.
+class PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest
+    : public PaymentManifestDownloaderTestBase {
+ public:
+  PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest() {
+    scoped_feature_list_.InitAndDisableFeature(
+        features::kPaymentHandlerRequireLinkHeader);
+    InitDownloader();
+    downloader_->DownloadPaymentMethodManifest(
+        url::Origin::Create(GURL("https://chromium.org")), test_url_,
+        base::BindOnce(&PaymentManifestDownloaderTestBase::OnManifestDownload,
+                       base::Unretained(this)));
+  }
+
+  // Simulates two responses for payment method manifest download:
+  // 1) Only HTTP header without the response body content, responding to the
+  //    initial HEAD request.
+  // 2) Both HTTP header and the response body content, for the subsequent GET
+  //    request.
+  void ServerHeaderAndFallbackResponse(int response_code,
+                                       Headers send_headers,
+                                       absl::optional<std::string> link_header,
+                                       const std::string& response_body,
+                                       int net_error) {
+    ServerResponse(response_code, send_headers, link_header, kNoResponseBody,
+                   net_error);
+    ServerResponse(response_code, send_headers, link_header, response_body,
+                   net_error);
+  }
+
+ private:
+  base::test::ScopedFeatureList scoped_feature_list_;
+};
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoHttpHeadersAndEmptyResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No content and no \"Link: rel=payment-method-manifest\" "
+                  "HTTP header found at \"https://bobpay.test/\"."));
+
+  ServerHeaderAndFallbackResponse(200, Headers::kOmit, kNoLinkHeader,
+                                  kNoResponseBody, net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoHttpHeadersButWithResponseBodyIsSuccess) {
+  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+
+  ServerHeaderAndFallbackResponse(200, Headers::kOmit, kNoLinkHeader,
+                                  "response body", net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       EmptyHttpHeaderAndEmptyResponseBodyIsFailure) {
+  EXPECT_CALL(
+      *this, OnManifestDownload(
+                 _, kNoContent,
+                 "No content and no \"Link: rel=payment-method-manifest\" HTTP "
+                 "header found at \"https://bobpay.test/\"."));
+
+  ServerHeaderAndFallbackResponse(200, Headers::kSend, kNoLinkHeader,
+                                  kNoResponseBody, net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       EmptyHttpHeaderButWithResponseBodyIsSuccess) {
+  EXPECT_CALL(*this, OnManifestDownload(_, "response content", kNoError));
+
+  ServerHeaderAndFallbackResponse(200, Headers::kSend, kNoLinkHeader,
+                                  "response content", net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       EmptyHttpLinkHeaderWithoutResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No content and no \"Link: rel=payment-method-manifest\" "
+                  "HTTP header found at \"https://bobpay.test/\"."));
+
+  ServerHeaderAndFallbackResponse(200, Headers::kSend, kEmptyLinkHeader,
+                                  kNoResponseBody, net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       EmptyHttpLinkHeaderButWithResponseBodyIsSuccess) {
+  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+
+  ServerHeaderAndFallbackResponse(200, Headers::kSend, kEmptyLinkHeader,
+                                  "response body", net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoRelInHttpLinkHeaderAndNoResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, std::string(),
+                  "No content and no \"Link: rel=payment-method-manifest\" "
+                  "HTTP header found at \"https://bobpay.test/\"."));
+
+  ServerHeaderAndFallbackResponse(200, Headers::kSend, "<manifest.json>",
+                                  kNoResponseBody, net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoUrlInHttpLinkHeaderButWithResponseBodyIsSuccess) {
+  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+
+  ServerHeaderAndFallbackResponse(200, Headers::kSend,
+                                  "rel=payment-method-manifest",
+                                  "response body", net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoManifestRellInHttpLinkHeaderAndNoResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No content and no \"Link: rel=payment-method-manifest\" "
+                  "HTTP header found at \"https://bobpay.test/\"."));
+
+  ServerHeaderAndFallbackResponse(200, Headers::kSend,
+                                  "<manifest.json>; rel=web-app-manifest",
+                                  kNoResponseBody, net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoManifestRellInHttpLinkHeaderButWithResponseBodyIsSuccess) {
+  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+
+  ServerHeaderAndFallbackResponse(200, Headers::kSend,
+                                  "<manifest.json>; rel=web-app-manifest",
+                                  "response body", net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoRelInHttpLinkHeaderButWithResponseBodyIsSuccess) {
+  EXPECT_CALL(*this, OnManifestDownload(_, "response body", kNoError));
+
+  ServerHeaderAndFallbackResponse(200, Headers::kSend, "<manifest.json>",
+                                  "response body", net::OK);
+}
+
+TEST_F(PaymentMethodManifestDownloaderLinkHeaderNotRequiredTest,
+       NoUrlInHttpLinkHeaderAndNoResponseBodyIsFailure) {
+  EXPECT_CALL(*this,
+              OnManifestDownload(
+                  _, kNoContent,
+                  "No content and no \"Link: rel=payment-method-manifest\" "
+                  "HTTP header found at \"https://bobpay.test/\"."));
+
+  ServerHeaderAndFallbackResponse(200, Headers::kSend,
+                                  "rel=payment-method-manifest",
+                                  kNoResponseBody, net::OK);
+}
+
 class WebAppManifestDownloaderTest : public PaymentManifestDownloaderTestBase {
  public:
   WebAppManifestDownloaderTest() {
diff --git a/components/test/data/payments/abort_responder_app.json.mock-http-headers b/components/test/data/payments/abort_responder_app.json.mock-http-headers
new file mode 100644
index 0000000000000..78aabaaaabc24
--- /dev/null
+++ b/components/test/data/payments/abort_responder_app.json.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </abort_responder_app.json>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/app_store_billing_tests/method_manifest.json.mock-http-headers b/components/test/data/payments/app_store_billing_tests/method_manifest.json.mock-http-headers
new file mode 100644
index 0000000000000..5c7b789cb6ef3
--- /dev/null
+++ b/components/test/data/payments/app_store_billing_tests/method_manifest.json.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </app_store_billing_tests/method_manifest.json>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/can_make_payment_event_fields/app/pay.mock-http-headers b/components/test/data/payments/can_make_payment_event_fields/app/pay.mock-http-headers
new file mode 100644
index 0000000000000..535c9c6b97bbd
--- /dev/null
+++ b/components/test/data/payments/can_make_payment_event_fields/app/pay.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </can_make_payment_event_fields/app/pay>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/just-in-time/pay.json.mock-http-headers b/components/test/data/payments/just-in-time/pay.json.mock-http-headers
new file mode 100644
index 0000000000000..0e9b0436a49bd
--- /dev/null
+++ b/components/test/data/payments/just-in-time/pay.json.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </just-in-time/pay.json>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/nickpay.test/pay.mock-http-headers b/components/test/data/payments/nickpay.test/pay.mock-http-headers
new file mode 100644
index 0000000000000..3cb57df5bfb24
--- /dev/null
+++ b/components/test/data/payments/nickpay.test/pay.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </nickpay.test/pay>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/orenpay.test/pay.mock-http-headers b/components/test/data/payments/orenpay.test/pay.mock-http-headers
new file mode 100644
index 0000000000000..8ae498f6326db
--- /dev/null
+++ b/components/test/data/payments/orenpay.test/pay.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </orenpay.test/pay>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/paulpay.test/pay.mock-http-headers b/components/test/data/payments/paulpay.test/pay.mock-http-headers
new file mode 100644
index 0000000000000..4f9fd4bcd6e3d
--- /dev/null
+++ b/components/test/data/payments/paulpay.test/pay.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </paulpay.test/pay>; rel="payment-method-manifest"
diff --git a/components/test/data/payments/redirect/destination/pay.mock-http-headers b/components/test/data/payments/redirect/destination/pay.mock-http-headers
new file mode 100644
index 0000000000000..7e50be70bafd7
--- /dev/null
+++ b/components/test/data/payments/redirect/destination/pay.mock-http-headers
@@ -0,0 +1,4 @@
+HTTP/1.1 200 OK
+Access-Control-Allow-Origin: *
+Content-Type: application/json; charset=utf-8
+Link: </redirect/destination/pay>; rel="payment-method-manifest"
