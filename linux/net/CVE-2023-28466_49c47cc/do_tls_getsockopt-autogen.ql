/**
 * @name linux-49c47cc21b5b7a3d8deb18fc57b0aa2ab1286962-do_tls_getsockopt
 * @id cpp/linux/49c47cc21b5b7a3d8deb18fc57b0aa2ab1286962/do-tls-getsockopt
 * @description linux-49c47cc21b5b7a3d8deb18fc57b0aa2ab1286962-net/tls/tls_main.c-do_tls_getsockopt CVE-2023-28466
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsk_633, ExprStmt target_2, Function func) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(FunctionCall).getTarget().hasName("lock_sock")
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_633
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vsk_633, ExprStmt target_3, Function func) {
	exists(ExprStmt target_1 |
		target_1.getExpr().(FunctionCall).getTarget().hasName("release_sock")
		and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_633
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_2(Parameter vsk_633, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("do_tls_getsockopt_conf")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_633
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("char *")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("int *")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(EqualityOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(EqualityOperation).getAnOperand().(Literal).getValue()="1"
}

predicate func_3(Parameter vsk_633, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("do_tls_getsockopt_no_pad")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_633
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("char *")
		and target_3.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("int *")
}

from Function func, Parameter vsk_633, ExprStmt target_2, ExprStmt target_3
where
not func_0(vsk_633, target_2, func)
and not func_1(vsk_633, target_3, func)
and func_2(vsk_633, target_2)
and func_3(vsk_633, target_3)
and vsk_633.getType().hasName("sock *")
and vsk_633.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
