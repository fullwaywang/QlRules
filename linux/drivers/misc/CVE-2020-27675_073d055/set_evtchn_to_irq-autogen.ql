/**
 * @name linux-073d0552ead5bfc7a3a9c01de590e924f11b5dd2-set_evtchn_to_irq
 * @id cpp/linux/073d0552ead5bfc7a3a9c01de590e924f11b5dd2/set-evtchn-to-irq
 * @description linux-073d0552ead5bfc7a3a9c01de590e924f11b5dd2-set_evtchn_to_irq CVE-2020-27675
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter virq_122, EqualityOperation target_4, Function func) {
	exists(DoStmt target_0 |
		target_0.getCondition().(Literal).getValue()="0"
		and target_0.getStmt().(BlockStmt).getStmt(0).(DoStmt).getCondition().(Literal).getValue()="0"
		and target_0.getStmt().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(NotExpr).getValue()="0"
		and target_0.getStmt().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__compiletime_assert_1479")
		and target_0.getStmt().(BlockStmt).getStmt(1).(DoStmt).getCondition().(Literal).getValue()="0"
		and target_0.getStmt().(BlockStmt).getStmt(1).(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=virq_122
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_4.getAnOperand().(VariableAccess).getLocation().isBefore(target_0.getStmt().(BlockStmt).getStmt(1).(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation()))
}

/*predicate func_1(Function func) {
	exists(FunctionCall target_1 |
		target_1.getTarget().hasName("__compiletime_assert_1479")
		and target_1.getEnclosingFunction() = func)
}

*/
/*predicate func_2(Parameter virq_122, Variable vrow_124, Variable vcol_125, Variable vevtchn_to_irq) {
	exists(PointerDereferenceExpr target_2 |
		target_2.getOperand().(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vevtchn_to_irq
		and target_2.getOperand().(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vrow_124
		and target_2.getOperand().(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vcol_125
		and target_2.getParent().(AssignExpr).getLValue() = target_2
		and target_2.getParent().(AssignExpr).getRValue().(VariableAccess).getTarget()=virq_122)
}

*/
predicate func_3(Parameter virq_122, Variable vrow_124, Variable vcol_125, Variable vevtchn_to_irq, ArrayExpr target_3) {
		target_3.getArrayBase().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vevtchn_to_irq
		and target_3.getArrayBase().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vrow_124
		and target_3.getArrayOffset().(VariableAccess).getTarget()=vcol_125
		and target_3.getParent().(AssignExpr).getLValue() = target_3
		and target_3.getParent().(AssignExpr).getRValue().(VariableAccess).getTarget()=virq_122
}

predicate func_4(Parameter virq_122, EqualityOperation target_4) {
		target_4.getAnOperand().(VariableAccess).getTarget()=virq_122
		and target_4.getAnOperand().(UnaryMinusExpr).getValue()="4294967295"
}

from Function func, Parameter virq_122, Variable vrow_124, Variable vcol_125, Variable vevtchn_to_irq, ArrayExpr target_3, EqualityOperation target_4
where
not func_0(virq_122, target_4, func)
and func_3(virq_122, vrow_124, vcol_125, vevtchn_to_irq, target_3)
and func_4(virq_122, target_4)
and virq_122.getType().hasName("unsigned int")
and vrow_124.getType().hasName("unsigned int")
and vcol_125.getType().hasName("unsigned int")
and vevtchn_to_irq.getType().hasName("int **")
and virq_122.getFunction() = func
and vrow_124.(LocalVariable).getFunction() = func
and vcol_125.(LocalVariable).getFunction() = func
and not vevtchn_to_irq.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
