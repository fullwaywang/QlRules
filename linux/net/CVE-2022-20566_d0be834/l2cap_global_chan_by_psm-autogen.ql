/**
 * @name linux-d0be8347c623e0ac4202a1d4e0373882821f56b0-l2cap_global_chan_by_psm
 * @id cpp/linux/d0be8347c623e0ac4202a1d4e0373882821f56b0/l2cap-global-chan-by-psm
 * @description linux-d0be8347c623e0ac4202a1d4e0373882821f56b0-l2cap_global_chan_by_psm CVE-2022-20566
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vc_1949, AddressOfExpr target_10, ReturnStmt target_11) {
	exists(AssignExpr target_0 |
		target_0.getLValue().(VariableAccess).getTarget()=vc_1949
		and target_0.getRValue().(FunctionCall).getTarget().hasName("l2cap_chan_hold_unless_zero")
		and target_0.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vc_1949
		and target_10.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getLValue().(VariableAccess).getLocation())
		and target_0.getLValue().(VariableAccess).getLocation().isBefore(target_11.getExpr().(VariableAccess).getLocation()))
}

predicate func_1(Variable vc_1949, ExprStmt target_12, ExprStmt target_13) {
	exists(NotExpr target_1 |
		target_1.getOperand().(VariableAccess).getTarget()=vc_1949
		and target_1.getParent().(IfStmt).getThen()=target_12
		and target_13.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation().isBefore(target_1.getOperand().(VariableAccess).getLocation()))
}

predicate func_2(VariableAccess target_6, Function func) {
	exists(ContinueStmt target_2 |
		target_2.getParent().(IfStmt).getCondition()=target_6
		and target_2.getEnclosingFunction() = func)
}

predicate func_3(Variable vc1_1949, ExprStmt target_13, ReturnStmt target_14, Function func) {
	exists(IfStmt target_3 |
		target_3.getCondition().(VariableAccess).getTarget()=vc1_1949
		and target_3.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vc1_1949
		and target_3.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("l2cap_chan_hold_unless_zero")
		and target_3.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vc1_1949
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
		and target_13.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_3.getCondition().(VariableAccess).getLocation())
		and target_3.getCondition().(VariableAccess).getLocation().isBefore(target_14.getExpr().(VariableAccess).getLocation()))
}

/*predicate func_4(Variable vc1_1949, IfStmt target_15, ReturnStmt target_14) {
	exists(AssignExpr target_4 |
		target_4.getLValue().(VariableAccess).getTarget()=vc1_1949
		and target_4.getRValue().(FunctionCall).getTarget().hasName("l2cap_chan_hold_unless_zero")
		and target_4.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vc1_1949
		and target_15.getCondition().(VariableAccess).getLocation().isBefore(target_4.getLValue().(VariableAccess).getLocation())
		and target_4.getLValue().(VariableAccess).getLocation().isBefore(target_14.getExpr().(VariableAccess).getLocation()))
}

*/
predicate func_5(Variable vc_1949, VariableAccess target_5) {
		target_5.getTarget()=vc_1949
		and target_5.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_6(Variable vc1_1949, ExprStmt target_12, VariableAccess target_6) {
		target_6.getTarget()=vc1_1949
		and target_6.getParent().(IfStmt).getThen()=target_12
}

predicate func_7(Variable vc1_1949, VariableAccess target_7) {
		target_7.getTarget()=vc1_1949
		and target_7.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
}

predicate func_8(Variable vc_1949, FunctionCall target_8) {
		target_8.getTarget().hasName("l2cap_chan_hold")
		and target_8.getArgument(0).(VariableAccess).getTarget()=vc_1949
}

predicate func_9(Variable vc1_1949, FunctionCall target_9) {
		target_9.getTarget().hasName("l2cap_chan_hold")
		and target_9.getArgument(0).(VariableAccess).getTarget()=vc1_1949
}

predicate func_10(Variable vc_1949, AddressOfExpr target_10) {
		target_10.getOperand().(PointerFieldAccess).getTarget().getName()="dst"
		and target_10.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vc_1949
		and target_10.getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("bacmp")
		and target_10.getParent().(FunctionCall).getParent().(NotExpr).getOperand().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("bdaddr_t *")
}

predicate func_11(Variable vc_1949, ReturnStmt target_11) {
		target_11.getExpr().(VariableAccess).getTarget()=vc_1949
}

predicate func_12(Function func, ExprStmt target_12) {
		target_12.getExpr() instanceof FunctionCall
		and target_12.getEnclosingFunction() = func
}

predicate func_13(Variable vc_1949, Variable vc1_1949, ExprStmt target_13) {
		target_13.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vc1_1949
		and target_13.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vc_1949
}

predicate func_14(Variable vc1_1949, ReturnStmt target_14) {
		target_14.getExpr().(VariableAccess).getTarget()=vc1_1949
}

predicate func_15(Variable vc1_1949, IfStmt target_15) {
		target_15.getCondition().(VariableAccess).getTarget()=vc1_1949
		and target_15.getThen().(ExprStmt).getExpr() instanceof FunctionCall
}

from Function func, Variable vc_1949, Variable vc1_1949, VariableAccess target_5, VariableAccess target_6, VariableAccess target_7, FunctionCall target_8, FunctionCall target_9, AddressOfExpr target_10, ReturnStmt target_11, ExprStmt target_12, ExprStmt target_13, ReturnStmt target_14, IfStmt target_15
where
not func_0(vc_1949, target_10, target_11)
and not func_1(vc_1949, target_12, target_13)
and not func_2(target_6, func)
and not func_3(vc1_1949, target_13, target_14, func)
and func_5(vc_1949, target_5)
and func_6(vc1_1949, target_12, target_6)
and func_7(vc1_1949, target_7)
and func_8(vc_1949, target_8)
and func_9(vc1_1949, target_9)
and func_10(vc_1949, target_10)
and func_11(vc_1949, target_11)
and func_12(func, target_12)
and func_13(vc_1949, vc1_1949, target_13)
and func_14(vc1_1949, target_14)
and func_15(vc1_1949, target_15)
and vc_1949.getType().hasName("l2cap_chan *")
and vc1_1949.getType().hasName("l2cap_chan *")
and vc_1949.(LocalVariable).getFunction() = func
and vc1_1949.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
