/**
 * @name linux-2b1299322016731d56807aa49254a5ea3080b6b3-cpu_set_bug_bits
 * @id cpp/linux/2b1299322016731d56807aa49254a5ea3080b6b3/cpu-set-bug-bits
 * @description linux-2b1299322016731d56807aa49254a5ea3080b6b3-cpu_set_bug_bits CVE-2022-26373
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable via32_cap_1291, Variable vcpu_vuln_whitelist, Variable vcpu_caps_set, LogicalOrExpr target_1, BitwiseAndExpr target_2, NotExpr target_3, FunctionCall target_4, ExprStmt target_5, ExprStmt target_6, Function func) {
	exists(IfStmt target_0 |
		target_0.getCondition().(LogicalAndExpr).getAnOperand().(LogicalAndExpr).getAnOperand().(ConditionalExpr).getCondition().(LogicalAndExpr).getValue()="0"
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(LogicalAndExpr).getAnOperand().(ConditionalExpr).getThen().(Literal).getValue()="1"
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(LogicalAndExpr).getAnOperand().(ConditionalExpr).getElse().(ConditionalExpr).getCondition().(Literal).getValue()="1"
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(LogicalAndExpr).getAnOperand().(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getTarget().hasName("constant_test_bit")
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(LogicalAndExpr).getAnOperand().(ConditionalExpr).getElse().(ConditionalExpr).getThen().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(LogicalAndExpr).getAnOperand().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getTarget().hasName("variable_test_bit")
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(LogicalAndExpr).getAnOperand().(ConditionalExpr).getElse().(ConditionalExpr).getElse().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("cpu_matches")
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vcpu_vuln_whitelist
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(1).(BinaryBitwiseOperation).getValue()="512"
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=via32_cap_1291
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="16777216"
		and target_0.getThen().(DoStmt).getCondition().(Literal).getValue()="0"
		and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("set_bit")
		and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddExpr).getValue()="667"
		and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getTarget().getName()="x86_capability"
		and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="(unknown field)"
		and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("set_bit")
		and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(AddExpr).getValue()="667"
		and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcpu_caps_set
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
		and target_1.getAnOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getLocation())
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getLocation().isBefore(target_2.getLeftOperand().(VariableAccess).getLocation())
		and target_3.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(LogicalAndExpr).getAnOperand().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_0.getCondition().(LogicalAndExpr).getAnOperand().(LogicalAndExpr).getAnOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getArgument(0).(VariableAccess).getLocation())
		and target_5.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
		and target_0.getThen().(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation()))
}

predicate func_1(Variable via32_cap_1291, LogicalOrExpr target_1) {
		target_1.getAnOperand().(FunctionCall).getTarget().hasName("cpu_matches")
		and target_1.getAnOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType() instanceof ArrayType
		and target_1.getAnOperand().(FunctionCall).getArgument(1).(BinaryBitwiseOperation).getValue()="8"
		and target_1.getAnOperand().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getTarget()=via32_cap_1291
		and target_1.getAnOperand().(BitwiseAndExpr).getRightOperand().(BinaryBitwiseOperation).getValue()="4"
}

predicate func_2(Variable via32_cap_1291, BitwiseAndExpr target_2) {
		target_2.getLeftOperand().(VariableAccess).getTarget()=via32_cap_1291
		and target_2.getRightOperand().(BinaryBitwiseOperation).getValue()="1"
}

predicate func_3(Variable vcpu_vuln_whitelist, NotExpr target_3) {
		target_3.getOperand().(FunctionCall).getTarget().hasName("cpu_matches")
		and target_3.getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vcpu_vuln_whitelist
		and target_3.getOperand().(FunctionCall).getArgument(1).(BinaryBitwiseOperation).getValue()="64"
}

predicate func_4(Variable vcpu_vuln_whitelist, FunctionCall target_4) {
		target_4.getTarget().hasName("cpu_matches")
		and target_4.getArgument(0).(VariableAccess).getTarget()=vcpu_vuln_whitelist
		and target_4.getArgument(1).(BinaryBitwiseOperation).getValue()="2"
}

predicate func_5(Variable vcpu_caps_set, ExprStmt target_5) {
		target_5.getExpr().(FunctionCall).getTarget().hasName("set_bit")
		and target_5.getExpr().(FunctionCall).getArgument(0).(AddExpr).getValue()="666"
		and target_5.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcpu_caps_set
}

predicate func_6(Variable vcpu_caps_set, ExprStmt target_6) {
		target_6.getExpr().(FunctionCall).getTarget().hasName("set_bit")
		and target_6.getExpr().(FunctionCall).getArgument(0).(AddExpr).getValue()="654"
		and target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vcpu_caps_set
}

from Function func, Variable via32_cap_1291, Variable vcpu_vuln_whitelist, Variable vcpu_caps_set, LogicalOrExpr target_1, BitwiseAndExpr target_2, NotExpr target_3, FunctionCall target_4, ExprStmt target_5, ExprStmt target_6
where
not func_0(via32_cap_1291, vcpu_vuln_whitelist, vcpu_caps_set, target_1, target_2, target_3, target_4, target_5, target_6, func)
and func_1(via32_cap_1291, target_1)
and func_2(via32_cap_1291, target_2)
and func_3(vcpu_vuln_whitelist, target_3)
and func_4(vcpu_vuln_whitelist, target_4)
and func_5(vcpu_caps_set, target_5)
and func_6(vcpu_caps_set, target_6)
and via32_cap_1291.getType().hasName("u64")
and vcpu_vuln_whitelist.getType() instanceof ArrayType
and vcpu_caps_set.getType() instanceof ArrayType
and via32_cap_1291.(LocalVariable).getFunction() = func
and not vcpu_vuln_whitelist.getParentScope+() = func
and not vcpu_caps_set.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
