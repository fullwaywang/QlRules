/**
 * @name linux-727ba748e110b4de50d142edca9d6a9b7e6111d8-handle_vmon
 * @id cpp/linux/727ba748e110b4de50d142edca9d6a9b7e6111d8/handle-vmon
 * @description linux-727ba748e110b4de50d142edca9d6a9b7e6111d8-arch/x86/kvm/vmx.c-handle_vmon CVE-2018-12904
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vvcpu_7885, IfStmt target_1, ExprStmt target_2, ExprStmt target_3, Function func) {
exists(IfStmt target_0 |
	target_0.getCondition().(FunctionCall).getTarget().hasName("vmx_get_cpl")
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_7885
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("kvm_queue_exception")
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_7885
	and target_0.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="6"
	and target_0.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(Literal).getValue()="1"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getCondition().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vvcpu_7885, IfStmt target_1) {
	target_1.getCondition().(ValueFieldAccess).getTarget().getName()="vmxon"
	and target_1.getCondition().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="nested"
	and target_1.getCondition().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("vcpu_vmx *")
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("nested_vmx_failValid")
	and target_1.getThen().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_7885
	and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(FunctionCall).getTarget().hasName("kvm_skip_emulated_instruction")
	and target_1.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_7885
}

predicate func_2(Parameter vvcpu_7885, ExprStmt target_2) {
	target_2.getExpr().(FunctionCall).getTarget().hasName("kvm_queue_exception")
	and target_2.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_7885
	and target_2.getExpr().(FunctionCall).getArgument(1).(Literal).getValue()="6"
}

predicate func_3(Parameter vvcpu_7885, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("nested_vmx_failValid")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vvcpu_7885
}

from Function func, Parameter vvcpu_7885, IfStmt target_1, ExprStmt target_2, ExprStmt target_3
where
not func_0(vvcpu_7885, target_1, target_2, target_3, func)
and func_1(vvcpu_7885, target_1)
and func_2(vvcpu_7885, target_2)
and func_3(vvcpu_7885, target_3)
and vvcpu_7885.getType().hasName("kvm_vcpu *")
and vvcpu_7885.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
