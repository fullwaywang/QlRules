/**
 * @name linux-bdf533de6968-check_entry
 * @id cpp/linux/bdf533de6968/check-entry
 * @description linux-bdf533de6968-net/ipv4/netfilter/arp_tables.c-check_entry CVE-2016-4998
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(NotExpr target_2, Function func, ReturnStmt target_0) {
		target_0.getExpr().(UnaryMinusExpr).getValue()="-22"
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
		and target_0.getEnclosingFunction() = func
}

predicate func_1(NotExpr target_2, Function func, EmptyStmt target_1) {
		target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, NotExpr target_2) {
		target_2.getOperand().(FunctionCall).getTarget().hasName("arp_checkentry")
		and target_2.getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="arp"
		and target_2.getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("const arpt_entry *")
		and target_2.getEnclosingFunction() = func
}

from Function func, ReturnStmt target_0, EmptyStmt target_1, NotExpr target_2
where
func_0(target_2, func, target_0)
and func_1(target_2, func, target_1)
and func_2(func, target_2)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
