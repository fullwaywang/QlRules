/**
 * @name linux-83c6f2390040f188cc25b270b4befeb5628c1aee-sg_write
 * @id cpp/linux/83c6f2390040f188cc25b270b4befeb5628c1aee/sg-write
 * @description linux-83c6f2390040f188cc25b270b4befeb5628c1aee-drivers/scsi/sg.c-sg_write CVE-2020-12770
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsfp_605, Variable vsrp_606, FunctionCall target_2, ExprStmt target_3, ExprStmt target_4, ExprStmt target_5) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("sg_remove_request")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsfp_605
	and target_0.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vsrp_606
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_5.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getLocation()))
}

predicate func_1(FunctionCall target_2, Function func, ReturnStmt target_1) {
	target_1.getExpr().(UnaryMinusExpr).getValue()="-14"
	and target_1.getParent().(IfStmt).getCondition()=target_2
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, FunctionCall target_2) {
	target_2.getTarget().hasName("copy_from_user")
	and target_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("unsigned char[252]")
	and target_2.getArgument(1).(VariableAccess).getTarget().getType().hasName("const char *")
	and target_2.getArgument(2).(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Variable vsfp_605, Variable vsrp_606, ExprStmt target_3) {
	target_3.getExpr().(FunctionCall).getTarget().hasName("sg_remove_request")
	and target_3.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsfp_605
	and target_3.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vsrp_606
}

predicate func_4(Variable vsfp_605, Variable vsrp_606, ExprStmt target_4) {
	target_4.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("sg_common_write")
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsfp_605
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vsrp_606
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("unsigned char[252]")
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(PointerFieldAccess).getTarget().getName()="timeout"
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsfp_605
	and target_4.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_5(Variable vsrp_606, ExprStmt target_5) {
	target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("sg_io_hdr_t *")
	and target_5.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="header"
	and target_5.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vsrp_606
}

from Function func, Variable vsfp_605, Variable vsrp_606, ReturnStmt target_1, FunctionCall target_2, ExprStmt target_3, ExprStmt target_4, ExprStmt target_5
where
not func_0(vsfp_605, vsrp_606, target_2, target_3, target_4, target_5)
and func_1(target_2, func, target_1)
and func_2(func, target_2)
and func_3(vsfp_605, vsrp_606, target_3)
and func_4(vsfp_605, vsrp_606, target_4)
and func_5(vsrp_606, target_5)
and vsfp_605.getType().hasName("Sg_fd *")
and vsrp_606.getType().hasName("Sg_request *")
and vsfp_605.(LocalVariable).getFunction() = func
and vsrp_606.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
