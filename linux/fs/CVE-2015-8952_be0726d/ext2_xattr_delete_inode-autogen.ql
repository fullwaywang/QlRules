/**
 * @name linux-be0726d33cb8f411945884664924bed3cb8c70ee-ext2_xattr_delete_inode
 * @id cpp/linux/be0726d33cb8f411945884664924bed3cb8c70ee/ext2-xattr-delete-inode
 * @description linux-be0726d33cb8f411945884664924bed3cb8c70ee-fs/ext2/xattr.c-ext2_xattr_delete_inode CVE-2015-8952
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vce_760, FunctionCall target_0) {
	target_0.getTarget().hasName("mb_cache_entry_free")
	and not target_0.getTarget().hasName("mb2_cache_entry_delete_block")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vce_760
}

predicate func_2(Parameter vinode_757, PointerFieldAccess target_10, ExprStmt target_11) {
exists(PointerFieldAccess target_2 |
	target_2.getTarget().getName()="s_mb_cache"
	and target_2.getQualifier().(FunctionCall).getTarget().hasName("EXT2_SB")
	and target_2.getQualifier().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="i_sb"
	and target_2.getQualifier().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinode_757
	and target_10.getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_2.getQualifier().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_2.getQualifier().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_11.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_4(Variable vbh_759, PointerFieldAccess target_4) {
	target_4.getTarget().getName()="b_blocknr"
	and target_4.getQualifier().(VariableAccess).getTarget()=vbh_759
	and target_4.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_5(Variable vbh_759, VariableAccess target_5) {
	target_5.getTarget()=vbh_759
	and target_5.getParent().(PointerFieldAccess).getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
}

predicate func_7(Variable vbh_759, Variable vce_760, Variable vext2_xattr_cache, AssignExpr target_7) {
	target_7.getLValue().(VariableAccess).getTarget()=vce_760
	and target_7.getRValue().(FunctionCall).getTarget().hasName("mb_cache_entry_get")
	and target_7.getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vext2_xattr_cache
	and target_7.getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="b_bdev"
	and target_7.getRValue().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbh_759
	and target_7.getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getTarget().getName()="b_blocknr"
	and target_7.getRValue().(FunctionCall).getArgument(2).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbh_759
}

predicate func_8(Variable vce_760, EqualityOperation target_12, IfStmt target_8) {
	target_8.getCondition().(VariableAccess).getTarget()=vce_760
	and target_8.getThen().(ExprStmt).getExpr() instanceof FunctionCall
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12
}

predicate func_9(Variable vce_760, EqualityOperation target_12, IfStmt target_9) {
	target_9.getCondition().(VariableAccess).getTarget()=vce_760
	and target_9.getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("mb_cache_entry_release")
	and target_9.getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vce_760
	and target_9.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12
}

predicate func_10(Parameter vinode_757, PointerFieldAccess target_10) {
	target_10.getTarget().getName()="i_file_acl"
	and target_10.getQualifier().(FunctionCall).getTarget().hasName("EXT2_I")
	and target_10.getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vinode_757
}

predicate func_11(Parameter vinode_757, ExprStmt target_11) {
	target_11.getExpr().(FunctionCall).getTarget().hasName("ext2_free_blocks")
	and target_11.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vinode_757
	and target_11.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="i_file_acl"
	and target_11.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("EXT2_I")
	and target_11.getExpr().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vinode_757
	and target_11.getExpr().(FunctionCall).getArgument(2).(Literal).getValue()="1"
}

predicate func_12(Variable vbh_759, EqualityOperation target_12) {
	target_12.getLeftOperand().(PointerFieldAccess).getTarget().getName()="h_refcount"
	and target_12.getLeftOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="b_data"
	and target_12.getLeftOperand().(PointerFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbh_759
	and target_12.getRightOperand().(Literal).getValue()="1"
}

from Function func, Parameter vinode_757, Variable vbh_759, Variable vce_760, Variable vext2_xattr_cache, FunctionCall target_0, PointerFieldAccess target_4, VariableAccess target_5, AssignExpr target_7, IfStmt target_8, IfStmt target_9, PointerFieldAccess target_10, ExprStmt target_11, EqualityOperation target_12
where
func_0(vce_760, target_0)
and not func_2(vinode_757, target_10, target_11)
and func_4(vbh_759, target_4)
and func_5(vbh_759, target_5)
and func_7(vbh_759, vce_760, vext2_xattr_cache, target_7)
and func_8(vce_760, target_12, target_8)
and func_9(vce_760, target_12, target_9)
and func_10(vinode_757, target_10)
and func_11(vinode_757, target_11)
and func_12(vbh_759, target_12)
and vinode_757.getType().hasName("inode *")
and vbh_759.getType().hasName("buffer_head *")
and vce_760.getType().hasName("mb_cache_entry *")
and vext2_xattr_cache.getType().hasName("mb_cache *")
and vinode_757.getFunction() = func
and vbh_759.(LocalVariable).getFunction() = func
and vce_760.(LocalVariable).getFunction() = func
and not vext2_xattr_cache.getParentScope+() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
