/**
 * @name linux-b609753cbbd38f8c0affd4956c0af178348523ac-__ext4_read_dirblock
 * @id cpp/linux/b609753cbbd38f8c0affd4956c0af178348523ac/--ext4-read-dirblock
 * @description linux-b609753cbbd38f8c0affd4956c0af178348523ac-fs/ext4/namei.c-__ext4_read_dirblock CVE-2024-42304
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, StringLiteral target_0) {
	target_0.getValue()="Directory hole found for htree %s block"
	and not target_0.getValue()="Directory hole found for htree %s block %u"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Parameter vblock_125, BlockStmt target_8) {
exists(LogicalOrExpr target_1 |
	exists(EqualityOperation obj_0 | obj_0=target_1.getRightOperand() |
		obj_0.getLeftOperand().(VariableAccess).getTarget()=vblock_125
		and obj_0.getRightOperand() instanceof Literal
	)
	and exists(LogicalAndExpr obj_1 | obj_1=target_1.getParent() |
		obj_1.getLeftOperand().(NotExpr).getOperand().(VariableAccess).getTarget().getType().hasName("buffer_head *")
		and obj_1.getRightOperand() instanceof LogicalOrExpr
		and obj_1.getParent().(IfStmt).getThen()=target_8
	)
	and target_1.getLeftOperand() instanceof LogicalOrExpr
)
}

predicate func_5(Parameter vtype_126, BlockStmt target_8, LogicalOrExpr target_5) {
	exists(LogicalAndExpr obj_0 | obj_0=target_5.getParent() |
		obj_0.getLeftOperand().(NotExpr).getOperand().(VariableAccess).getTarget().getType().hasName("buffer_head *")
		and obj_0.getParent().(IfStmt).getThen()=target_8
	)
	and target_5.getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vtype_126
	and target_5.getRightOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vtype_126
}

predicate func_6(Parameter vblock_125, Parameter vtype_126, VariableAccess target_6) {
	exists(FunctionCall obj_0 | obj_0=target_6.getParent() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				exists(ConditionalExpr obj_3 | obj_3=obj_2.getArgument(6) |
					obj_3.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vtype_126
					and obj_3.getThen().(StringLiteral).getValue()="index"
					and obj_3.getElse().(StringLiteral).getValue()="leaf"
				)
				and obj_2.getTarget().hasName("__ext4_error_inode")
				and obj_2.getArgument(0).(VariableAccess).getTarget().getType().hasName("inode *")
				and obj_2.getArgument(1).(VariableAccess).getTarget().getType().hasName("const char *")
				and obj_2.getArgument(2).(VariableAccess).getTarget().getType().hasName("unsigned int")
				and obj_2.getArgument(4).(Literal).getValue()="0"
				and obj_2.getArgument(5) instanceof StringLiteral
			)
		)
	)
	and target_6.getTarget()=vblock_125
}

predicate func_8(Parameter vblock_125, Parameter vtype_126, BlockStmt target_8) {
	exists(ExprStmt obj_0 | obj_0=target_8.getStmt(0) |
		exists(FunctionCall obj_1 | obj_1=obj_0.getExpr() |
			exists(ConditionalExpr obj_2 | obj_2=obj_1.getArgument(6) |
				obj_2.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vtype_126
				and obj_2.getThen().(StringLiteral).getValue()="index"
				and obj_2.getElse().(StringLiteral).getValue()="leaf"
			)
			and obj_1.getTarget().hasName("__ext4_error_inode")
			and obj_1.getArgument(0).(VariableAccess).getTarget().getType().hasName("inode *")
			and obj_1.getArgument(1).(VariableAccess).getTarget().getType().hasName("const char *")
			and obj_1.getArgument(2).(VariableAccess).getTarget().getType().hasName("unsigned int")
			and obj_1.getArgument(3).(VariableAccess).getTarget()=vblock_125
			and obj_1.getArgument(4) instanceof Literal
			and obj_1.getArgument(5) instanceof StringLiteral
		)
	)
}

from Function func, Parameter vblock_125, Parameter vtype_126, StringLiteral target_0, LogicalOrExpr target_5, VariableAccess target_6, BlockStmt target_8
where
func_0(func, target_0)
and not func_1(vblock_125, target_8)
and func_5(vtype_126, target_8, target_5)
and func_6(vblock_125, vtype_126, target_6)
and func_8(vblock_125, vtype_126, target_8)
and vblock_125.getType().hasName("ext4_lblk_t")
and vtype_126.getType().hasName("dirblock_type_t")
and vblock_125.getFunction() = func
and vtype_126.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
