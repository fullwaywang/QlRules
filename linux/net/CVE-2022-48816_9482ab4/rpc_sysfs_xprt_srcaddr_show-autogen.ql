/**
 * @name linux-9482ab4540f5bcc869b44c067ae99b5fca16bd07-rpc_sysfs_xprt_srcaddr_show
 * @id cpp/linux/9482ab4540f5bcc869b44c067ae99b5fca16bd07/rpc-sysfs-xprt-srcaddr-show
 * @description linux-9482ab4540f5bcc869b44c067ae99b5fca16bd07-net/sunrpc/sysfs.c-rpc_sysfs_xprt_srcaddr_show CVE-2022-48816
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vsock_109, IfStmt target_4, ExprStmt target_5, Function func) {
exists(ExprStmt target_0 |
	exists(FunctionCall obj_0 | obj_0=target_0.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="recv_mutex"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vsock_109
			)
		)
		and obj_0.getTarget().hasName("mutex_lock_nested")
		and obj_0.getArgument(1).(Literal).getValue()="0"
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_4.getLocation())
	and target_5.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vsock_109, RelationalOperation target_3) {
exists(LogicalOrExpr target_1 |
	exists(EqualityOperation obj_0 | obj_0=target_1.getLeftOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getLeftOperand() |
			obj_1.getTarget().getName()="sock"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vsock_109
		)
		and obj_0.getRightOperand().(Literal).getValue()="0"
	)
	and target_1.getRightOperand() instanceof RelationalOperation
	and target_1.getParent().(IfStmt).getThen() instanceof GotoStmt
	and target_1.getLeftOperand().(EqualityOperation).getLeftOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getLesserOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_2(Variable vsock_109, ExprStmt target_6, RelationalOperation target_3, Function func) {
exists(ExprStmt target_2 |
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="recv_mutex"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vsock_109
			)
		)
		and obj_0.getTarget().hasName("mutex_unlock")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
	and target_2.getLocation().isBefore(target_6.getLocation())
	and target_3.getLesserOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_2.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_3(Variable vsaddr_108, Variable vsock_109, RelationalOperation target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getLesserOperand() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().getName()="sock"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vsock_109
		)
		and obj_0.getTarget().hasName("kernel_getsockname")
		and obj_0.getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vsaddr_108
	)
	and  (target_3 instanceof GTExpr or target_3 instanceof LTExpr)
	and target_3.getGreaterOperand().(Literal).getValue()="0"
	and target_3.getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_4(Function func, IfStmt target_4) {
	target_4.getCondition() instanceof RelationalOperation
	and target_4.getThen().(GotoStmt).getName() ="out"
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Variable vsock_109, ExprStmt target_5) {
	exists(AssignExpr obj_0 | obj_0=target_5.getExpr() |
		obj_0.getLValue().(VariableAccess).getTarget()=vsock_109
		and obj_0.getRValue().(StmtExpr).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget().getType().hasName("void *")
	)
}

predicate func_6(Function func, ExprStmt target_6) {
	exists(FunctionCall obj_0 | obj_0=target_6.getExpr() |
		obj_0.getTarget().hasName("xprt_put")
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("rpc_xprt *")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_6
}

from Function func, Variable vsaddr_108, Variable vsock_109, RelationalOperation target_3, IfStmt target_4, ExprStmt target_5, ExprStmt target_6
where
not func_0(vsock_109, target_4, target_5, func)
and not func_1(vsock_109, target_3)
and not func_2(vsock_109, target_6, target_3, func)
and func_3(vsaddr_108, vsock_109, target_3)
and func_4(func, target_4)
and func_5(vsock_109, target_5)
and func_6(func, target_6)
and vsaddr_108.getType().hasName("__kernel_sockaddr_storage")
and vsock_109.getType().hasName("sock_xprt *")
and vsaddr_108.(LocalVariable).getFunction() = func
and vsock_109.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
