/**
 * @name linux-13d38c00df97289e6fba2e54193959293fd910d2-ocfs2_find_dir_space_el
 * @id cpp/linux/13d38c00df97289e6fba2e54193959293fd910d2/ocfs2-find-dir-space-el
 * @description linux-13d38c00df97289e6fba2e54193959293fd910d2-fs/ocfs2/dir.c-ocfs2_find_dir_space_el CVE-2024-41015
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vbh_3438, NotExpr target_2, ExprStmt target_3) {
exists(PointerFieldAccess target_0 |
	target_0.getTarget().getName()="b_data"
	and target_0.getQualifier().(VariableAccess).getTarget()=vbh_3438
	and target_2.getOperand().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_0.getQualifier().(VariableAccess).getLocation())
	and target_0.getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation())
)
}

predicate func_2(Variable vbh_3438, NotExpr target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getOperand() |
		obj_0.getTarget().hasName("ocfs2_check_dir_entry")
		and obj_0.getArgument(0).(VariableAccess).getTarget().getType().hasName("inode *")
		and obj_0.getArgument(1).(VariableAccess).getTarget().getType().hasName("ocfs2_dir_entry *")
		and obj_0.getArgument(2).(VariableAccess).getTarget()=vbh_3438
		and obj_0.getArgument(3).(VariableAccess).getTarget().getType().hasName("unsigned long")
	)
}

predicate func_3(Variable vbh_3438, ExprStmt target_3) {
	exists(AssignExpr obj_0 | obj_0=target_3.getExpr() |
		obj_0.getLValue().(PointerDereferenceExpr).getOperand().(VariableAccess).getTarget().getType().hasName("buffer_head **")
		and obj_0.getRValue().(VariableAccess).getTarget()=vbh_3438
	)
}

from Function func, Variable vbh_3438, NotExpr target_2, ExprStmt target_3
where
not func_0(vbh_3438, target_2, target_3)
and func_2(vbh_3438, target_2)
and func_3(vbh_3438, target_3)
and vbh_3438.getType().hasName("buffer_head *")
and vbh_3438.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
