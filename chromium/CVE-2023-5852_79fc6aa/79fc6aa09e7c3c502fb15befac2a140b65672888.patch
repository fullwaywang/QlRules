commit 79fc6aa09e7c3c502fb15befac2a140b65672888	79fc6aa09e7c3c502fb15befac2a140b65672888
Author: Lei Zhang <thestig@chromium.org>
Date:   Wed Sep 13 05:37:27 2023 +0000

    Stop storing Print Preview request data in PrintPreviewUI
    
    Since the Print Preview UI can be reloaded in some rare cases, the
    PrintPreviewUI instance that runs the UI can get destroyed and
    recreated. If this happens, PrintPreviewUI will lose track of some
    values and hand out potentially incorrect values.
    
    Prevent this situation from happening by storing the Print Preview
    request data in PrintPreviewDialogController instead. Divert all data
    getters/setters to use the new data source. PrintPreviewDialogController
    already keeps track of all print preview requests, and it is immune to
    Print Preview UI reloads.
    
    To keep the existing PrintPreviewHandlerTest working, add some test-only
    calls to (dis)associate WebContentses, as the test manually creates its
    own.
    
    To keep tests that navigate directly to chrome://print working, allow
    PrintPreviewHandler to use dummy request data when
    PrintPreviewDialogController does not know about the Print Preview.
    
    Do some cleanups along the way, to tidy things up. In particular,
    avoid including Print Preview headers when Print Preview is not
    available.
    
    Bug: 1480852
    Change-Id: I47754f769a143a9fcd5794144106cd6351e51d0f
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4857212
    Code-Coverage: findit-for-me@appspot.gserviceaccount.com <findit-for-me@appspot.gserviceaccount.com>
    Reviewed-by: Alan Screen <awscreen@chromium.org>
    Commit-Queue: Lei Zhang <thestig@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1195813}

diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
index b2d5a3cbdbaac..cbcd0ad3a0029 100644
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -6838,12 +6838,12 @@ static_library("browser") {
       "//components/printing/browser",
       "//components/printing/browser/headless",
       "//components/printing/browser/print_to_pdf",
-      "//components/printing/common:mojo_interfaces",
       "//components/services/print_compositor/public/cpp",
       "//components/services/print_compositor/public/mojom",
       "//printing",
       "//printing/backend",
     ]
+    public_deps += [ "//components/printing/common:mojo_interfaces" ]
 
     if (is_win) {
       sources += [
diff --git a/chrome/browser/browser_process_impl.cc b/chrome/browser/browser_process_impl.cc
index f1741924f55cb..7f9389cbfb4c4 100644
--- a/chrome/browser/browser_process_impl.cc
+++ b/chrome/browser/browser_process_impl.cc
@@ -70,7 +70,6 @@
 #include "chrome/browser/prefs/chrome_pref_service_factory.h"
 #include "chrome/browser/printing/background_printing_manager.h"
 #include "chrome/browser/printing/print_job_manager.h"
-#include "chrome/browser/printing/print_preview_dialog_controller.h"
 #include "chrome/browser/profiles/profile_manager.h"
 #include "chrome/browser/resource_coordinator/resource_coordinator_parts.h"
 #include "chrome/browser/safe_browsing/safe_browsing_service.h"
@@ -152,12 +151,10 @@
 #include "chrome/browser/media/webrtc/system_media_capture_permissions_stats_mac.h"
 #endif
 
-#if !BUILDFLAG(IS_CHROMEOS_ASH)
-#include "ui/message_center/message_center.h"
-#endif
-
 #if BUILDFLAG(IS_CHROMEOS_ASH)
 #include "components/soda/soda_installer_impl_chromeos.h"
+#else
+#include "ui/message_center/message_center.h"
 #endif
 
 #if BUILDFLAG(IS_ANDROID)
@@ -205,6 +202,10 @@
 #include "content/public/browser/plugin_service.h"
 #endif
 
+#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#include "chrome/browser/printing/print_preview_dialog_controller.h"
+#endif
+
 #if BUILDFLAG(ENABLE_SESSION_SERVICE)
 #include "chrome/browser/sessions/exit_type_service.h"
 #endif
diff --git a/chrome/browser/printing/print_preview_dialog_controller.cc b/chrome/browser/printing/print_preview_dialog_controller.cc
index 1a6740b36343b..c7ba18ac2081e 100644
--- a/chrome/browser/printing/print_preview_dialog_controller.cc
+++ b/chrome/browser/printing/print_preview_dialog_controller.cc
@@ -10,6 +10,7 @@
 #include <vector>
 
 #include "base/auto_reset.h"
+#include "base/check.h"
 #include "base/containers/contains.h"
 #include "base/memory/weak_ptr.h"
 #include "build/branding_buildflags.h"
@@ -204,7 +205,9 @@ PrintPreviewDialogController* PrintPreviewDialogController::GetInstance() {
   return g_browser_process->print_preview_dialog_controller();
 }
 
-void PrintPreviewDialogController::PrintPreview(WebContents* initiator) {
+void PrintPreviewDialogController::PrintPreview(
+    WebContents* initiator,
+    const mojom::RequestPrintPreviewParams& params) {
 #if BUILDFLAG(IS_WIN) && BUILDFLAG(GOOGLE_CHROME_BRANDING)
   PrintViewManagerBase::DisableThirdPartyBlocking();
 #endif
@@ -213,7 +216,7 @@ void PrintPreviewDialogController::PrintPreview(WebContents* initiator) {
     return;
   }
 
-  if (!GetOrCreatePreviewDialog(initiator)) {
+  if (!GetOrCreatePreviewDialog(initiator, params)) {
     auto* print_view_manager = PrintViewManager::FromWebContents(initiator);
     if (print_view_manager) {
       print_view_manager->PrintPreviewDone();
@@ -223,11 +226,14 @@ void PrintPreviewDialogController::PrintPreview(WebContents* initiator) {
 
 WebContents* PrintPreviewDialogController::GetOrCreatePreviewDialogForTesting(
     WebContents* initiator) {
-  return GetOrCreatePreviewDialog(initiator);
+  mojom::RequestPrintPreviewParams params;
+  params.is_modifiable = true;
+  return GetOrCreatePreviewDialog(initiator, params);
 }
 
 WebContents* PrintPreviewDialogController::GetOrCreatePreviewDialog(
-    WebContents* initiator) {
+    WebContents* initiator,
+    const mojom::RequestPrintPreviewParams& params) {
   DCHECK(initiator);
 
   // Get the print preview dialog for `initiator`.
@@ -235,7 +241,7 @@ WebContents* PrintPreviewDialogController::GetOrCreatePreviewDialog(
   if (preview_dialog) {
     return preview_dialog;
   }
-  return CreatePrintPreviewDialog(initiator);
+  return CreatePrintPreviewDialog(initiator, params);
 }
 
 WebContents* PrintPreviewDialogController::GetPrintPreviewForContents(
@@ -247,7 +253,7 @@ WebContents* PrintPreviewDialogController::GetPrintPreviewForContents(
 
   for (const auto& it : preview_dialog_map_) {
     // If `contents` is an initiator.
-    if (contents == it.second) {
+    if (contents == it.second.initiator) {
       // Return the associated preview dialog.
       return it.first;
     }
@@ -258,7 +264,14 @@ WebContents* PrintPreviewDialogController::GetPrintPreviewForContents(
 WebContents* PrintPreviewDialogController::GetInitiator(
     WebContents* preview_dialog) {
   auto it = preview_dialog_map_.find(preview_dialog);
-  return it != preview_dialog_map_.end() ? it->second : nullptr;
+  return it != preview_dialog_map_.end() ? it->second.initiator : nullptr;
+}
+
+const mojom::RequestPrintPreviewParams*
+PrintPreviewDialogController::GetRequestParams(
+    content::WebContents* preview_dialog) const {
+  auto it = preview_dialog_map_.find(preview_dialog);
+  return it != preview_dialog_map_.end() ? &it->second.request_params : nullptr;
 }
 
 void PrintPreviewDialogController::ForEachPreviewDialog(
@@ -285,8 +298,8 @@ void PrintPreviewDialogController::EraseInitiatorInfo(
   if (it == preview_dialog_map_.end())
     return;
 
-  web_contents_collection_.StopObserving(it->second);
-  it->second = nullptr;
+  web_contents_collection_.StopObserving(it->second.initiator);
+  it->second = {/*initiator=*/nullptr, /*request_params=*/{}};
 }
 
 PrintPreviewDialogController::~PrintPreviewDialogController() = default;
@@ -303,7 +316,7 @@ void PrintPreviewDialogController::RenderProcessGone(
   std::vector<WebContents*> closed_preview_dialogs;
   for (auto& it : preview_dialog_map_) {
     WebContents* preview_dialog = it.first;
-    WebContents* initiator = it.second;
+    WebContents* initiator = it.second.initiator;
     if (preview_dialog->GetPrimaryMainFrame()->GetProcess() == rph)
       closed_preview_dialogs.push_back(preview_dialog);
     else if (initiator && initiator->GetPrimaryMainFrame()->GetProcess() == rph)
@@ -390,7 +403,8 @@ void PrintPreviewDialogController::OnPreviewDialogNavigated(
 }
 
 WebContents* PrintPreviewDialogController::CreatePrintPreviewDialog(
-    WebContents* initiator) {
+    WebContents* initiator,
+    const mojom::RequestPrintPreviewParams& params) {
   base::AutoReset<bool> auto_reset(&is_creating_print_preview_dialog_, true);
 
   // The dialog delegates are deleted when the dialog is closed.
@@ -409,7 +423,7 @@ WebContents* PrintPreviewDialogController::CreatePrintPreviewDialog(
   PrintViewManager::CreateForWebContents(preview_dialog);
 
   // Add an entry to the map.
-  preview_dialog_map_[preview_dialog] = initiator;
+  preview_dialog_map_[preview_dialog] = {initiator, params};
 
   // Make the print preview WebContents show up in the task manager.
   task_manager::WebContentsTags::CreateForPrintingContents(preview_dialog);
@@ -441,7 +455,8 @@ void PrintPreviewDialogController::RemoveInitiator(
   // Update the map entry first, so when the print preview dialog gets destroyed
   // and reaches RemovePreviewDialog(), it does not attempt to also remove the
   // initiator's observers.
-  preview_dialog_map_[preview_dialog] = nullptr;
+  preview_dialog_map_[preview_dialog] = {/*initiator=*/nullptr,
+                                         /*request_params=*/{}};
   web_contents_collection_.StopObserving(initiator);
 
   PrintViewManager::FromWebContents(initiator)->PrintPreviewDone();
diff --git a/chrome/browser/printing/print_preview_dialog_controller.h b/chrome/browser/printing/print_preview_dialog_controller.h
index 9166f725d9c04..96ecabc3df9d0 100644
--- a/chrome/browser/printing/print_preview_dialog_controller.h
+++ b/chrome/browser/printing/print_preview_dialog_controller.h
@@ -7,9 +7,11 @@
 
 #include <map>
 
+#include "base/check.h"
 #include "base/functional/callback.h"
 #include "base/memory/ref_counted.h"
 #include "chrome/browser/tab_contents/web_contents_collection.h"
+#include "components/printing/common/print.mojom.h"
 
 class GURL;
 
@@ -46,18 +48,24 @@ class PrintPreviewDialogController
   static bool IsPrintPreviewContentURL(const GURL& url);
 
   // Initiates print preview for `initiator`.
-  void PrintPreview(content::WebContents* initiator);
+  void PrintPreview(content::WebContents* initiator,
+                    const mojom::RequestPrintPreviewParams& params);
 
   // Returns the preview dialog for `contents`.
   // Returns `contents` if `contents` is a preview dialog.
-  // Returns NULL if no preview dialog exists for `contents`.
+  // Returns nullptr if no preview dialog exists for `contents`.
   content::WebContents* GetPrintPreviewForContents(
       content::WebContents* contents) const;
 
   // Returns the initiator for `preview_dialog`.
-  // Returns NULL if no initiator exists for `preview_dialog`.
+  // Returns nullptr if no initiator exists for `preview_dialog`.
   content::WebContents* GetInitiator(content::WebContents* preview_dialog);
 
+  // Returns the request data associated with `preview_dialog`.
+  // Returns nullptr if no data exists for `preview_dialog`.
+  const mojom::RequestPrintPreviewParams* GetRequestParams(
+      content::WebContents* preview_dialog) const;
+
   // Runs `callback` on the dialog of each active print preview operation.
   void ForEachPreviewDialog(
       base::RepeatingCallback<void(content::WebContents*)> callback);
@@ -69,6 +77,24 @@ class PrintPreviewDialogController
   content::WebContents* GetOrCreatePreviewDialogForTesting(
       content::WebContents* initiator);
 
+#if defined(UNIT_TEST)
+  // Exposes a way for tests to manually specify the initiator to preview_dialog
+  // relationship. For use in tests that create their own preview dialogs.
+  void AssociateWebContentsesForTesting(content::WebContents* initiator,
+                                        content::WebContents* preview_dialog) {
+    CHECK(initiator);
+    CHECK(preview_dialog);
+    preview_dialog_map_[preview_dialog].initiator = initiator;
+    preview_dialog_map_[preview_dialog].request_params.is_modifiable = true;
+  }
+  void DisassociateWebContentsesForTesting(
+      content::WebContents* preview_dialog) {
+    CHECK(preview_dialog);
+    size_t erased_count = preview_dialog_map_.erase(preview_dialog);
+    CHECK(erased_count);
+  }
+#endif
+
   bool is_creating_print_preview_dialog() const {
     return is_creating_print_preview_dialog_;
   }
@@ -76,11 +102,16 @@ class PrintPreviewDialogController
  private:
   friend class base::RefCounted<PrintPreviewDialogController>;
 
-  // 1:1 relationship between a print preview dialog and its initiator tab.
+  // Tracks the initiator, as well as some of its Print Preview properties.
+  struct InitiatorData {
+    raw_ptr<content::WebContents> initiator;
+    mojom::RequestPrintPreviewParams request_params;
+  };
+
+  // 1:1 relationship between a print preview dialog and its initiator data.
   // Key: Print preview dialog.
-  // Value: Initiator.
-  using PrintPreviewDialogMap =
-      std::map<content::WebContents*, content::WebContents*>;
+  // Value: Initiator data.
+  using PrintPreviewDialogMap = std::map<content::WebContents*, InitiatorData>;
 
   ~PrintPreviewDialogController() override;
 
@@ -108,12 +139,14 @@ class PrintPreviewDialogController
 
   // Gets/Creates the print preview dialog for `initiator`.
   content::WebContents* GetOrCreatePreviewDialog(
-      content::WebContents* initiator);
+      content::WebContents* initiator,
+      const mojom::RequestPrintPreviewParams& params);
 
   // Creates a new print preview dialog if GetOrCreatePreviewDialog() cannot
   // find a print preview dialog for `initiator`.
   content::WebContents* CreatePrintPreviewDialog(
-      content::WebContents* initiator);
+      content::WebContents* initiator,
+      const mojom::RequestPrintPreviewParams& params);
 
   // Helper function to store the title of the initiator associated with
   // `preview_dialog` in `preview_dialog`'s PrintPreviewUI.
diff --git a/chrome/browser/printing/print_test_utils.cc b/chrome/browser/printing/print_test_utils.cc
index 8db8368df42d9..682b3f324c086 100644
--- a/chrome/browser/printing/print_test_utils.cc
+++ b/chrome/browser/printing/print_test_utils.cc
@@ -11,7 +11,6 @@
 #include "base/strings/utf_string_conversions.h"
 #include "base/values.h"
 #include "chrome/browser/printing/print_view_manager_common.h"
-#include "chrome/browser/ui/webui/print_preview/print_preview_handler.h"
 #include "printing/buildflags/buildflags.h"
 #include "printing/mojom/print.mojom.h"
 #include "printing/print_job_constants.h"
diff --git a/chrome/browser/printing/print_test_utils.h b/chrome/browser/printing/print_test_utils.h
index 77b27c6cea81a..19a871dd55e82 100644
--- a/chrome/browser/printing/print_test_utils.h
+++ b/chrome/browser/printing/print_test_utils.h
@@ -10,18 +10,16 @@
 #include <vector>
 
 #include "base/values.h"
-#include "chrome/browser/ui/webui/print_preview/print_preview_handler.h"
 #include "printing/backend/print_backend.h"
+#include "printing/mojom/print.mojom-forward.h"
 #include "printing/print_settings.h"
 #include "ui/gfx/geometry/size.h"
 
-namespace printing {
-
-namespace mojom {
-enum class PrinterType;
+namespace content {
+class WebContents;
 }
 
-namespace test {
+namespace printing::test {
 
 extern const char kPrinterName[];
 constexpr int kPrinterDpi = 600;
@@ -60,7 +58,6 @@ std::unique_ptr<PrintSettings> MakeUserModifiedPrintSettings(
 // - `has_selection` set to false
 void StartPrint(content::WebContents* web_contents);
 
-}  // namespace test
-}  // namespace printing
+}  // namespace printing::test
 
 #endif  // CHROME_BROWSER_PRINTING_PRINT_TEST_UTILS_H_
diff --git a/chrome/browser/printing/print_view_manager.cc b/chrome/browser/printing/print_view_manager.cc
index 40b0a71a26510..682b11154de7f 100644
--- a/chrome/browser/printing/print_view_manager.cc
+++ b/chrome/browser/printing/print_view_manager.cc
@@ -453,12 +453,10 @@ void PrintViewManager::OnScriptedPrintPreviewCallback(
 
   auto* dialog_controller = PrintPreviewDialogController::GetInstance();
   CHECK(dialog_controller);
-  dialog_controller->PrintPreview(web_contents());
-
   mojom::RequestPrintPreviewParams params;
   params.is_modifiable = source_is_modifiable;
-  PrintPreviewUI::SetInitialParams(
-      dialog_controller->GetPrintPreviewForContents(web_contents()), params);
+  dialog_controller->PrintPreview(web_contents(), params);
+
   PrintPreviewAllowedForTesting();
 }
 
@@ -497,10 +495,8 @@ void PrintViewManager::OnRequestPrintPreviewCallback(
 
   auto* dialog_controller = PrintPreviewDialogController::GetInstance();
   CHECK(dialog_controller);
-  dialog_controller->PrintPreview(web_contents());
+  dialog_controller->PrintPreview(web_contents(), *params);
 
-  PrintPreviewUI::SetInitialParams(
-      dialog_controller->GetPrintPreviewForContents(web_contents()), *params);
   PrintPreviewAllowedForTesting();
 }
 
diff --git a/chrome/browser/ui/blocked_content/popup_blocker_browsertest.cc b/chrome/browser/ui/blocked_content/popup_blocker_browsertest.cc
index 894408e7a6804..e1ac5b9e49f0b 100644
--- a/chrome/browser/ui/blocked_content/popup_blocker_browsertest.cc
+++ b/chrome/browser/ui/blocked_content/popup_blocker_browsertest.cc
@@ -16,7 +16,6 @@
 #include "chrome/browser/content_settings/host_content_settings_map_factory.h"
 #include "chrome/browser/history/history_test_utils.h"
 #include "chrome/browser/policy/profile_policy_connector_builder.h"
-#include "chrome/browser/printing/print_preview_dialog_controller.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/browser/search_engines/template_url_service_factory.h"
 #include "chrome/browser/ui/browser.h"
@@ -83,6 +82,10 @@
 #include "third_party/blink/public/common/switches.h"
 #endif
 
+#if BUILDFLAG(ENABLE_PRINT_PREVIEW)
+#include "chrome/browser/printing/print_preview_dialog_controller.h"
+#endif
+
 using content::NativeWebKeyboardEvent;
 using content::WebContents;
 using testing::_;
diff --git a/chrome/browser/ui/webui/print_preview/print_preview_handler.cc b/chrome/browser/ui/webui/print_preview/print_preview_handler.cc
index 5ad203a52f516..de0d3296f38dc 100644
--- a/chrome/browser/ui/webui/print_preview/print_preview_handler.cc
+++ b/chrome/browser/ui/webui/print_preview/print_preview_handler.cc
@@ -737,7 +737,9 @@ void PrintPreviewHandler::HandleDoPrint(const base::Value::List& args) {
   DCHECK(data->front());
 
   // After validating |settings|, record metrics.
-  bool is_pdf = !print_preview_ui()->source_is_modifiable();
+  const mojom::RequestPrintPreviewParams* request_params = GetRequestParams();
+  CHECK(request_params);
+  bool is_pdf = !request_params->is_modifiable;
   if (last_preview_settings_.has_value())
     ReportPrintSettingsStats(settings, last_preview_settings_.value(), is_pdf);
   {
@@ -933,21 +935,30 @@ void PrintPreviewHandler::SendInitialSettings(
     const std::string& callback_id,
     base::Value::Dict policies,
     const std::string& default_printer) {
+  const mojom::RequestPrintPreviewParams* request_params = GetRequestParams();
+  mojom::RequestPrintPreviewParams dummy_params;
+  if (!request_params) {
+    // This only happens with a direct navigation to chrome://print, which can
+    // happen in some tests. Just use `dummy_params` to set up the test with
+    // some sane values, so it does not crash.
+    dummy_params.is_modifiable = true;
+    request_params = &dummy_params;
+  }
+
   base::Value::Dict initial_settings;
   initial_settings.Set(kDocumentTitle, print_preview_ui()->initiator_title());
   initial_settings.Set(kSettingPreviewModifiable,
-                       print_preview_ui()->source_is_modifiable());
+                       request_params->is_modifiable);
 #if BUILDFLAG(IS_CHROMEOS_ASH)
-  bool source_is_arc = print_preview_ui()->source_is_arc();
+  bool source_is_arc = request_params->is_from_arc;
 #else
   bool source_is_arc = false;
 #endif
   initial_settings.Set(kSettingPreviewIsFromArc, source_is_arc);
   initial_settings.Set(kSettingPrinterName, default_printer);
-  initial_settings.Set(kDocumentHasSelection,
-                       print_preview_ui()->source_has_selection());
+  initial_settings.Set(kDocumentHasSelection, request_params->has_selection);
   initial_settings.Set(kSettingShouldPrintSelectionOnly,
-                       print_preview_ui()->print_selection_only());
+                       request_params->selection_only);
   PrefService* prefs = GetPrefs();
   PrintPreviewStickySettings* sticky_settings =
       PrintPreviewStickySettings::GetInstance();
@@ -1040,6 +1051,13 @@ WebContents* PrintPreviewHandler::GetInitiator() {
   return dialog_controller->GetInitiator(preview_web_contents());
 }
 
+const mojom::RequestPrintPreviewParams*
+PrintPreviewHandler::GetRequestParams() {
+  auto* dialog_controller = PrintPreviewDialogController::GetInstance();
+  CHECK(dialog_controller);
+  return dialog_controller->GetRequestParams(preview_web_contents());
+}
+
 void PrintPreviewHandler::OnPrintPreviewReady(int preview_uid, int request_id) {
   std::string callback_id = GetCallbackId(request_id);
   if (callback_id.empty())
diff --git a/chrome/browser/ui/webui/print_preview/print_preview_handler.h b/chrome/browser/ui/webui/print_preview/print_preview_handler.h
index 42ad2e9273532..e6f9007315214 100644
--- a/chrome/browser/ui/webui/print_preview/print_preview_handler.h
+++ b/chrome/browser/ui/webui/print_preview/print_preview_handler.h
@@ -119,6 +119,7 @@ class PrintPreviewHandler : public content::WebUIMessageHandler {
   virtual void BadMessageReceived();
 
   // Gets the initiator for the print preview dialog.
+  // Virtual so tests can override.
   virtual content::WebContents* GetInitiator();
 
   // Initiates print after any content analysis checks have been passed
@@ -150,6 +151,8 @@ class PrintPreviewHandler : public content::WebUIMessageHandler {
 
   PrintPreviewUI* print_preview_ui();
 
+  const mojom::RequestPrintPreviewParams* GetRequestParams();
+
   PrefService* GetPrefs();
 
   // Checks policy preferences for a deny list of printer types and initializes
diff --git a/chrome/browser/ui/webui/print_preview/print_preview_handler_unittest.cc b/chrome/browser/ui/webui/print_preview/print_preview_handler_unittest.cc
index efdaf2f0310dd..fc87f6cf7e1cc 100644
--- a/chrome/browser/ui/webui/print_preview/print_preview_handler_unittest.cc
+++ b/chrome/browser/ui/webui/print_preview/print_preview_handler_unittest.cc
@@ -9,6 +9,7 @@
 #include <utility>
 #include <vector>
 
+#include "base/check.h"
 #include "base/containers/flat_set.h"
 #include "base/i18n/number_formatting.h"
 #include "base/json/json_writer.h"
@@ -24,6 +25,7 @@
 #include "base/values.h"
 #include "build/build_config.h"
 #include "build/chromeos_buildflags.h"
+#include "chrome/browser/printing/print_preview_dialog_controller.h"
 #include "chrome/browser/printing/print_test_utils.h"
 #include "chrome/browser/printing/print_view_manager.h"
 #include "chrome/browser/ui/webui/print_preview/fake_print_render_frame.h"
@@ -466,9 +468,18 @@ class PrintPreviewHandlerTest : public testing::Test {
 #endif
 
   void SetProfileForInitialSettings(TestingProfile* profile) {
+    auto* dialog_controller = PrintPreviewDialogController::GetInstance();
+    CHECK(dialog_controller);
+    if (preview_web_contents_) {
+      dialog_controller->DisassociateWebContentsesForTesting(
+          preview_web_contents_.get());
+    }
+
     preview_web_contents_ = content::WebContents::Create(
         content::WebContents::CreateParams(profile));
     web_ui_->set_web_contents(preview_web_contents_.get());
+    dialog_controller->AssociateWebContentsesForTesting(
+        initiator_web_contents_.get(), preview_web_contents_.get());
   }
 
   void SetUp() override {
@@ -481,6 +492,8 @@ class PrintPreviewHandlerTest : public testing::Test {
     ash::LoginState::Initialize();
     manager_ = crosapi::CreateCrosapiManagerWithTestRegistry();
 #endif
+
+    // Create the initiator.
     initiator_web_contents_ = content::WebContents::Create(
         content::WebContents::CreateParams(&profile_));
     content::WebContents* initiator = initiator_web_contents_.get();
@@ -488,13 +501,15 @@ class PrintPreviewHandlerTest : public testing::Test {
     // the print code will not bother to send IPCs to a non-live RenderFrame.
     content::NavigationSimulator::NavigateAndCommitFromDocument(
         GURL("about:blank"), initiator->GetPrimaryMainFrame());
-    preview_web_contents_ = content::WebContents::Create(
-        content::WebContents::CreateParams(&profile_));
+
+    // Create the print preview.
+    web_ui_ = std::make_unique<content::TestWebUI>();
+    SetProfileForInitialSettings(&profile_);
+
+    // Create the PrintViewManager and put it to work.
     PrintViewManager::CreateForWebContents(initiator);
     PrintViewManager::FromWebContents(initiator)->PrintPreviewNow(
         initiator->GetPrimaryMainFrame(), false);
-    web_ui_ = std::make_unique<content::TestWebUI>();
-    web_ui_->set_web_contents(preview_web_contents_.get());
 
     printers_.push_back(GetSimplePrinterInfo(test::kPrinterName, true));
     auto printer_handler = CreatePrinterHandler(printers_);
@@ -524,6 +539,11 @@ class PrintPreviewHandlerTest : public testing::Test {
 #endif
     PrintViewManager::FromWebContents(initiator_web_contents_.get())
         ->PrintPreviewDone();
+
+    auto* dialog_controller = PrintPreviewDialogController::GetInstance();
+    CHECK(dialog_controller);
+    dialog_controller->DisassociateWebContentsesForTesting(
+        preview_web_contents_.get());
   }
 
 #if BUILDFLAG(IS_CHROMEOS)
diff --git a/chrome/browser/ui/webui/print_preview/print_preview_ui.cc b/chrome/browser/ui/webui/print_preview/print_preview_ui.cc
index 9e616396c9c97..327dee4ff2f69 100644
--- a/chrome/browser/ui/webui/print_preview/print_preview_ui.cc
+++ b/chrome/browser/ui/webui/print_preview/print_preview_ui.cc
@@ -129,10 +129,6 @@ bool IsValidPageIndex(uint32_t page_index, uint32_t page_count) {
   return page_index < page_count;
 }
 
-bool ShouldUseCompositor(PrintPreviewUI* print_preview_ui) {
-  return IsOopifEnabled() && print_preview_ui->source_is_modifiable();
-}
-
 WebContents* GetInitiator(content::WebUI* web_ui) {
   auto* dialog_controller = PrintPreviewDialogController::GetInstance();
   CHECK(dialog_controller);
@@ -533,6 +529,19 @@ void PrintPreviewUI::NotifyUIPreviewDocumentReady(
   handler_->OnPrintPreviewReady(*id_, request_id);
 }
 
+bool PrintPreviewUI::ShouldUseCompositor() const {
+  if (!IsOopifEnabled()) {
+    return false;
+  }
+
+  auto* dialog_controller = PrintPreviewDialogController::GetInstance();
+  CHECK(dialog_controller);
+  const mojom::RequestPrintPreviewParams* request_params =
+      dialog_controller->GetRequestParams(web_ui()->GetWebContents());
+  CHECK(request_params);
+  return request_params->is_modifiable;
+}
+
 void PrintPreviewUI::OnCompositePdfPageDone(
     uint32_t page_index,
     int document_cookie,
@@ -710,25 +719,6 @@ void PrintPreviewUI::AddPdfPageForNupConversion(
   pages_for_nup_convert_.push_back(std::move(pdf_page));
 }
 
-// static
-void PrintPreviewUI::SetInitialParams(
-    content::WebContents* print_preview_dialog,
-    const mojom::RequestPrintPreviewParams& params) {
-  if (!print_preview_dialog || !print_preview_dialog->GetWebUI())
-    return;
-
-  PrintPreviewUI* print_preview_ui = print_preview_dialog->GetWebUI()
-                                         ->GetController()
-                                         ->GetAs<PrintPreviewUI>();
-  CHECK(print_preview_ui);
-#if BUILDFLAG(IS_CHROMEOS_ASH)
-  print_preview_ui->source_is_arc_ = params.is_from_arc;
-#endif
-  print_preview_ui->source_is_modifiable_ = params.is_modifiable;
-  print_preview_ui->source_has_selection_ = params.has_selection;
-  print_preview_ui->print_selection_only_ = params.selection_only;
-}
-
 // static
 bool PrintPreviewUI::ShouldCancelRequest(
     const absl::optional<int32_t>& preview_ui_id,
@@ -925,8 +915,9 @@ void PrintPreviewUI::DidPrepareDocumentForPreview(int32_t document_cookie,
   // Determine if document composition from individual pages with the print
   // compositor is the desired configuration. Issue a preparation call to the
   // PrintCompositeClient if that hasn't been done yet. Otherwise, return early.
-  if (!ShouldUseCompositor(this))
+  if (!ShouldUseCompositor()) {
     return;
+  }
 
   WebContents* web_contents = GetInitiator(web_ui());
   if (!web_contents)
@@ -968,7 +959,7 @@ void PrintPreviewUI::DidPreviewPage(mojom::DidPreviewPageParamsPtr params,
     return;
   }
 
-  if (ShouldUseCompositor(this)) {
+  if (ShouldUseCompositor()) {
     // Don't bother compositing if this request has been cancelled already.
     if (ShouldCancelRequest(id_, request_id))
       return;
@@ -1010,8 +1001,7 @@ void PrintPreviewUI::MetafileReadyForPrinting(
   // Always try to stop the worker.
   StopWorker(params->document_cookie);
 
-  const bool composite_document_using_individual_pages =
-      ShouldUseCompositor(this);
+  const bool composite_document_using_individual_pages = ShouldUseCompositor();
   const base::ReadOnlySharedMemoryRegion& metafile =
       params->content->metafile_data_region;
 
diff --git a/chrome/browser/ui/webui/print_preview/print_preview_ui.h b/chrome/browser/ui/webui/print_preview/print_preview_ui.h
index 9ae67edac44c1..ee5de1076eea5 100644
--- a/chrome/browser/ui/webui/print_preview/print_preview_ui.h
+++ b/chrome/browser/ui/webui/print_preview/print_preview_ui.h
@@ -92,16 +92,6 @@ class PrintPreviewUI : public ConstrainedWebDialogUI,
 
   const std::u16string& initiator_title() const { return initiator_title_; }
 
-#if BUILDFLAG(IS_CHROMEOS_ASH)
-  bool source_is_arc() const { return source_is_arc_; }
-#endif
-
-  bool source_is_modifiable() const { return source_is_modifiable_; }
-
-  bool source_has_selection() const { return source_has_selection_; }
-
-  bool print_selection_only() const { return print_selection_only_; }
-
   int pages_per_sheet() const { return pages_per_sheet_; }
 
   const gfx::Rect& printable_area() const { return printable_area_; }
@@ -123,10 +113,6 @@ class PrintPreviewUI : public ConstrainedWebDialogUI,
   // Save pdf pages temporarily before ready to do N-up conversion.
   void AddPdfPageForNupConversion(base::ReadOnlySharedMemoryRegion pdf_page);
 
-  // Set initial settings for PrintPreviewUI.
-  static void SetInitialParams(content::WebContents* print_preview_dialog,
-                               const mojom::RequestPrintPreviewParams& params);
-
   // Determines whether to cancel a print preview request based on the request
   // id.
   static bool ShouldCancelRequest(const absl::optional<int32_t>& preview_ui_id,
@@ -240,6 +226,8 @@ class PrintPreviewUI : public ConstrainedWebDialogUI,
       int request_id,
       scoped_refptr<base::RefCountedMemory> data_bytes);
 
+  bool ShouldUseCompositor() const;
+
   // Callbacks for print compositor client.
   void OnPrepareForDocumentToPdfDone(int32_t request_id,
                                      mojom::PrintCompositor::Status status);
@@ -285,20 +273,6 @@ class PrintPreviewUI : public ConstrainedWebDialogUI,
   // Weak pointer to the WebUI handler.
   const raw_ptr<PrintPreviewHandler> handler_;
 
-#if BUILDFLAG(IS_CHROMEOS_ASH)
-  // Indicates whether the source document is from ARC.
-  bool source_is_arc_ = false;
-#endif
-
-  // Indicates whether the source document can be modified.
-  bool source_is_modifiable_ = true;
-
-  // Indicates whether the source document has selection.
-  bool source_has_selection_ = false;
-
-  // Indicates whether only the selection should be printed.
-  bool print_selection_only_ = false;
-
   // Keeps track of whether OnClosePrintPreviewDialog() has been called or not.
   bool dialog_closed_ = false;
 
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index 12221d109a708..4d4f806f4766d 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -453,6 +453,7 @@ static_library("test_support") {
     public_deps += [
       "//printing",
       "//printing/backend",
+      "//printing/mojom",
     ]
   }
 
