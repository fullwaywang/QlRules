commit 294f2fc6da27620a506e6c050241655459ccd6bd
Author: John Fastabend <john.fastabend@gmail.com>
Date:   Tue Mar 24 10:38:37 2020 -0700

    bpf: Verifer, adjust_scalar_min_max_vals to always call update_reg_bounds()
    
    Currently, for all op verification we call __red_deduce_bounds() and
    __red_bound_offset() but we only call __update_reg_bounds() in bitwise
    ops. However, we could benefit from calling __update_reg_bounds() in
    BPF_ADD, BPF_SUB, and BPF_MUL cases as well.
    
    For example, a register with state 'R1_w=invP0' when we subtract from
    it,
    
     w1 -= 2
    
    Before coerce we will now have an smin_value=S64_MIN, smax_value=U64_MAX
    and unsigned bounds umin_value=0, umax_value=U64_MAX. These will then
    be clamped to S32_MIN, U32_MAX values by coerce in the case of alu32 op
    as done in above example. However tnum will be a constant because the
    ALU op is done on a constant.
    
    Without update_reg_bounds() we have a scenario where tnum is a const
    but our unsigned bounds do not reflect this. By calling update_reg_bounds
    after coerce to 32bit we further refine the umin_value to U64_MAX in the
    alu64 case or U32_MAX in the alu32 case above.
    
    Signed-off-by: John Fastabend <john.fastabend@gmail.com>
    Signed-off-by: Alexei Starovoitov <ast@kernel.org>
    Link: https://lore.kernel.org/bpf/158507151689.15666.566796274289413203.stgit@john-Precision-5820-Tower

diff --git a/kernel/bpf/verifier.c b/kernel/bpf/verifier.c
index 559c9afd673c..2ea2a868324e 100644
--- a/kernel/bpf/verifier.c
+++ b/kernel/bpf/verifier.c
@@ -5199,6 +5199,7 @@ static int adjust_scalar_min_max_vals(struct bpf_verifier_env *env,
 		coerce_reg_to_size(dst_reg, 4);
 	}
 
+	__update_reg_bounds(dst_reg);
 	__reg_deduce_bounds(dst_reg);
 	__reg_bound_offset(dst_reg);
 	return 0;
