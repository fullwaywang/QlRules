/**
 * @name linux-9034c87d61be8cff989017740a91701ac8195a1d-trace_create_new_event
 * @id cpp/linux/9034c87d61be8cff989017740a91701ac8195a1d/trace-create-new-event
 * @description linux-9034c87d61be8cff989017740a91701ac8195a1d-kernel/trace/trace_events.c-trace_create_new_event CVE-2023-52879
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vfile_2784, AddressOfExpr target_1, ReturnStmt target_2, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("event_file_get")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vfile_2784
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getFollowingStmt() instanceof ReturnStmt
	and target_1.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_2.getExpr().(VariableAccess).getLocation()))
}

predicate func_1(Variable vfile_2784, AddressOfExpr target_1) {
	target_1.getOperand().(PointerFieldAccess).getTarget().getName()="list"
	and target_1.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vfile_2784
}

predicate func_2(Variable vfile_2784, ReturnStmt target_2) {
	target_2.getExpr().(VariableAccess).getTarget()=vfile_2784
}

from Function func, Variable vfile_2784, AddressOfExpr target_1, ReturnStmt target_2
where
not func_0(vfile_2784, target_1, target_2, func)
and func_1(vfile_2784, target_1)
and func_2(vfile_2784, target_2)
and vfile_2784.getType().hasName("trace_event_file *")
and vfile_2784.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
