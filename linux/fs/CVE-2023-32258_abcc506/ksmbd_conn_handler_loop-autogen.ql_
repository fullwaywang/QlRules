/**
 * @name linux-abcc506a9a71976a8b4c9bf3ee6efd13229c1e19-ksmbd_conn_handler_loop
 * @id cpp/linux/abcc506a9a71976a8b4c9bf3ee6efd13229c1e19/ksmbd-conn-handler-loop
 * @description linux-abcc506a9a71976a8b4c9bf3ee6efd13229c1e19-fs/ksmbd/connection.c-ksmbd_conn_handler_loop CVE-2023-32258
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vconn_279, BlockStmt target_1, VariableCall target_2, AddressOfExpr target_3, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("ksmbd_conn_set_releasing")
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vconn_279
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Function func, BlockStmt target_1) {
	target_1.getStmt(0).(DoStmt).getCondition() instanceof Literal
	and target_1.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(DoStmt).getCondition() instanceof Literal
	and target_1.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__might_sleep")
	and target_1.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("might_resched")
	and target_1.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(EqualityOperation).getLeftOperand().(FunctionCall).getTarget().hasName("atomic_read")
	and target_1.getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(1).(IfStmt).getCondition().(EqualityOperation).getRightOperand() instanceof Literal
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vconn_279, VariableCall target_2) {
	target_2.getExpr().(ValueFieldAccess).getTarget().getName()="process_fn"
	and target_2.getExpr().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("ksmbd_conn_ops")
	and target_2.getArgument(0).(VariableAccess).getTarget()=vconn_279
}

predicate func_3(Variable vconn_279, AddressOfExpr target_3) {
	target_3.getOperand().(PointerFieldAccess).getTarget().getName()="r_count"
	and target_3.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vconn_279
	and target_3.getParent().(FunctionCall).getParent().(EQExpr).getLeftOperand().(FunctionCall).getTarget().hasName("atomic_read")
}

from Function func, Variable vconn_279, BlockStmt target_1, VariableCall target_2, AddressOfExpr target_3
where
not func_0(vconn_279, target_1, target_2, target_3, func)
and func_1(func, target_1)
and func_2(vconn_279, target_2)
and func_3(vconn_279, target_3)
and vconn_279.getType().hasName("ksmbd_conn *")
and vconn_279.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
