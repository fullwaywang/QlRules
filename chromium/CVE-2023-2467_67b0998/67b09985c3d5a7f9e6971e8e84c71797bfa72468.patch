commit 67b09985c3d5a7f9e6971e8e84c71797bfa72468	67b09985c3d5a7f9e6971e8e84c71797bfa72468
Author: Lijin Shen <lazzzis@google.com>
Date:   Thu Mar 2 19:10:26 2023 +0000

    Disable permission dialog buttons for the initial 500ms.
    
    This CL adds a new property in ModalDialog so that in the initial 500ms, none of the buttons does not accept any click event.
    
    This change breaks many tests depending on permission dialog and so
    this CL also adds a helper function to disable this feature in tests
    
    Bug: 1413586
    Change-Id: Id74344bc09c06f5828504cb0e6f503b84472053c
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4242477
    Reviewed-by: Bo Liu <boliu@chromium.org>
    Reviewed-by: Balazs Engedy <engedy@chromium.org>
    Reviewed-by: Theresa Sullivan <twellington@chromium.org>
    Commit-Queue: Lijin Shen <lazzzis@google.com>
    Code-Coverage: Findit <findit-for-me@appspot.gserviceaccount.com>
    Cr-Commit-Position: refs/heads/main@{#1112348}

diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/incognito/IncognitoPermissionLeakageTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/incognito/IncognitoPermissionLeakageTest.java
index 3e8dd38fb5f07..47c1ffbe41cfb 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/incognito/IncognitoPermissionLeakageTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/incognito/IncognitoPermissionLeakageTest.java
@@ -48,6 +48,7 @@ import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
 import org.chromium.chrome.test.util.browser.Features.DisableFeatures;
 import org.chromium.chrome.test.util.browser.Features.EnableFeatures;
 import org.chromium.chrome.test.util.browser.LocationSettingsTestUtil;
+import org.chromium.components.browser_ui.modaldialog.ModalDialogTestUtils;
 import org.chromium.content_public.browser.test.util.JavaScriptUtils;
 import org.chromium.content_public.browser.test.util.TestThreadUtils;
 import org.chromium.device.geolocation.LocationProviderOverrider;
@@ -96,10 +97,12 @@ public class IncognitoPermissionLeakageTest {
         // Ensuring native is initialized before we access the CCT_INCOGNITO feature flag.
         IncognitoDataTestUtils.fireAndWaitForCctWarmup();
         assertTrue(ChromeFeatureList.isEnabled(ChromeFeatureList.CCT_INCOGNITO));
+        ModalDialogTestUtils.overrideEnableButtonTapProtection(false);
     }
 
     @After
     public void tearDown() {
+        ModalDialogTestUtils.overrideEnableButtonTapProtection(true);
         TestThreadUtils.runOnUiThreadBlocking(
                 () -> IncognitoDataTestUtils.closeTabs(mChromeActivityTestRule));
         mTestServer.stopAndDestroyServer();
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/notifications/NotificationTestRule.java b/chrome/android/javatests/src/org/chromium/chrome/browser/notifications/NotificationTestRule.java
index 0d80ee45377e9..107b5279d58d8 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/notifications/NotificationTestRule.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/notifications/NotificationTestRule.java
@@ -13,6 +13,7 @@ import org.chromium.base.test.util.Criteria;
 import org.chromium.base.test.util.CriteriaHelper;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.browser_ui.modaldialog.ModalDialogTestUtils;
 import org.chromium.components.browser_ui.notifications.MockNotificationManagerProxy;
 import org.chromium.components.browser_ui.notifications.MockNotificationManagerProxy.NotificationEntry;
 import org.chromium.components.browser_ui.site_settings.PermissionInfo;
@@ -43,10 +44,12 @@ public class NotificationTestRule extends ChromeTabbedActivityTestRule {
         mMockNotificationManager = new MockNotificationManagerProxy();
         NotificationPlatformBridge.overrideNotificationManagerForTesting(mMockNotificationManager);
         startMainActivityWithURL(UrlConstants.NTP_URL);
+        ModalDialogTestUtils.overrideEnableButtonTapProtection(false);
     }
 
     private void tearDown() {
         NotificationPlatformBridge.overrideNotificationManagerForTesting(null);
+        ModalDialogTestUtils.overrideEnableButtonTapProtection(true);
     }
 
     /**
diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/permissions/PermissionTestRule.java b/chrome/android/javatests/src/org/chromium/chrome/browser/permissions/PermissionTestRule.java
index 975aea40db685..8c5edeae2924c 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/permissions/PermissionTestRule.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/permissions/PermissionTestRule.java
@@ -10,6 +10,8 @@ import androidx.annotation.IdRes;
 
 import org.hamcrest.Matchers;
 import org.junit.Assert;
+import org.junit.runner.Description;
+import org.junit.runners.model.Statement;
 
 import org.chromium.base.test.util.CallbackHelper;
 import org.chromium.base.test.util.Criteria;
@@ -104,6 +106,21 @@ public class PermissionTestRule extends ChromeTabbedActivityTestRule {
         getEmbeddedTestServerRule().setServerUsesHttps(useHttpsServer);
     }
 
+    @Override
+    public Statement apply(Statement base, Description description) {
+        return super.apply(new Statement() {
+            @Override
+            public void evaluate() throws Throwable {
+                try {
+                    ModalDialogTestUtils.overrideEnableButtonTapProtection(false);
+                    base.evaluate();
+                } finally {
+                    ModalDialogTestUtils.overrideEnableButtonTapProtection(true);
+                }
+            }
+        }, description);
+    }
+
     /**
      * Starts an activity and listens for info-bars appearing/disappearing.
      */
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
index 83df7d564e7f3..aefc93973d3ee 100644
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -3355,6 +3355,7 @@ static_library("browser") {
       "//components/bookmarks/common/android",
       "//components/browser_ui/accessibility/android",
       "//components/browser_ui/contacts_picker/android",
+      "//components/browser_ui/modaldialog/android",
       "//components/browser_ui/photo_picker/android",
       "//components/browser_ui/settings/android",
       "//components/browser_ui/share/android",
diff --git a/components/browser_ui/modaldialog/android/BUILD.gn b/components/browser_ui/modaldialog/android/BUILD.gn
index 87cf45a1fbad0..da8d9ece824b8 100644
--- a/components/browser_ui/modaldialog/android/BUILD.gn
+++ b/components/browser_ui/modaldialog/android/BUILD.gn
@@ -4,17 +4,37 @@
 
 import("//build/config/android/rules.gni")
 
+generate_jni("modaldialog_jni_headers") {
+  sources = [ "java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogFeatureList.java" ]
+}
+
+source_set("android") {
+  sources = [
+    "features.cc",
+    "features.h",
+    "modaldialog_feature_list.cc",
+  ]
+  deps = [
+    ":modaldialog_jni_headers",
+    "//base",
+  ]
+}
+
 android_library("java") {
   sources = [
     "java/src/org/chromium/components/browser_ui/modaldialog/AppModalPresenter.java",
+    "java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogFeatureList.java",
     "java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogView.java",
     "java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogViewBinder.java",
     "java/src/org/chromium/components/browser_ui/modaldialog/TabModalPresenter.java",
   ]
+  annotation_processor_deps = [ "//base/android/jni_generator:jni_processor" ]
 
   deps = [
     ":java_resources",
     "//base:base_java",
+    "//base:jni_java",
+    "//build/android:build_java",
     "//components/browser_ui/styles/android:java",
     "//components/browser_ui/widget/android:java",
     "//content/public/android:content_java",
@@ -76,6 +96,7 @@ android_library("unit_device_javatests") {
     ":java",
     ":java_resources",
     ":test_support_java",
+    "//base:base_java",
     "//base:base_java_test_support",
     "//content/public/test/android:content_java_test_support",
     "//third_party/android_deps:espresso_java",
diff --git a/components/browser_ui/modaldialog/android/features.cc b/components/browser_ui/modaldialog/android/features.cc
new file mode 100644
index 0000000000000..7411275ed903e
--- /dev/null
+++ b/components/browser_ui/modaldialog/android/features.cc
@@ -0,0 +1,16 @@
+// Copyright 2023 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "components/browser_ui/modaldialog/android/features.h"
+
+#include "base/feature_list.h"
+#include "base/metrics/field_trial_params.h"
+
+namespace browser_ui {
+
+BASE_FEATURE(kModalDialogButtonProtection,
+             "ModalDialogButtonProtection",
+             base::FEATURE_ENABLED_BY_DEFAULT);
+
+}  // namespace browser_ui
diff --git a/components/browser_ui/modaldialog/android/features.h b/components/browser_ui/modaldialog/android/features.h
new file mode 100644
index 0000000000000..6d7066c9793ff
--- /dev/null
+++ b/components/browser_ui/modaldialog/android/features.h
@@ -0,0 +1,16 @@
+// Copyright 2023 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef COMPONENTS_BROWSER_UI_MODALDIALOG_ANDROID_FEATURES_H_
+#define COMPONENTS_BROWSER_UI_MODALDIALOG_ANDROID_FEATURES_H_
+
+#include "base/feature_list.h"
+
+namespace browser_ui {
+
+BASE_DECLARE_FEATURE(kModalDialogButtonProtection);
+
+}  // namespace browser_ui
+
+#endif  // COMPONENTS_BROWSER_UI_MODALDIALOG_ANDROID_FEATURES_H_
diff --git a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/AppModalPresenter.java b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/AppModalPresenter.java
index b177d6dc7e047..9a709f3044b91 100644
--- a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/AppModalPresenter.java
+++ b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/AppModalPresenter.java
@@ -23,6 +23,9 @@ import org.chromium.ui.modelutil.PropertyModelChangeProcessor;
 
 /** The presenter that shows a {@link ModalDialogView} in an Android dialog. */
 public class AppModalPresenter extends ModalDialogManager.Presenter {
+    // Duration of enter animation. This is an estimation because there is no reliable way to
+    // get duration of AlertDialog's enter animation.
+    private static final long ENTER_ANIMATION_ESTIMATION_MS = 200;
     private final Context mContext;
     private ComponentDialog mDialog;
     private PropertyModelChangeProcessor<PropertyModel, ModalDialogView, PropertyKey>
@@ -84,6 +87,7 @@ public class AppModalPresenter extends ModalDialogManager.Presenter {
         mDialog = new ComponentDialog(mContext, styles[buttonIndex][index]);
         mDialog.setOnCancelListener(dialogInterface
                 -> dismissCurrentDialog(DialogDismissalCause.NAVIGATE_BACK_OR_TOUCH_OUTSIDE));
+
         // Cancel on touch outside should be disabled by default. The ModelChangeProcessor wouldn't
         // notify change if the property is not set during initialization.
         mDialog.setCanceledOnTouchOutside(false);
@@ -95,6 +99,10 @@ public class AppModalPresenter extends ModalDialogManager.Presenter {
             mDialog.setContentView(dialogView);
         }
 
+        mDialog.setOnShowListener((dialogInterface) -> {
+            dialogView.onEnterAnimationStarted(ENTER_ANIMATION_ESTIMATION_MS);
+        });
+
         try {
             mDialog.show();
         } catch (WindowManager.BadTokenException badToken) {
diff --git a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogFeatureList.java b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogFeatureList.java
new file mode 100644
index 0000000000000..07d1aae03e127
--- /dev/null
+++ b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogFeatureList.java
@@ -0,0 +1,45 @@
+// Copyright 2023 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+package org.chromium.components.browser_ui.modaldialog;
+
+import org.chromium.base.FeatureList;
+import org.chromium.base.annotations.JNINamespace;
+import org.chromium.base.annotations.NativeMethods;
+import org.chromium.build.annotations.MainDex;
+
+/**
+ * Provides an API for querying the status of Modaldialog features.
+ */
+// TODO(crbug.com/1060097): Remove/update this once a generalized FeatureList exists.
+@JNINamespace("browser_ui")
+@MainDex
+public class ModalDialogFeatureList {
+    public static final String MODALDIALOG_BUTTON_PROTECTION = "ModalDialogButtonProtection";
+
+    private ModalDialogFeatureList() {}
+
+    /**
+     * Returns whether the specified feature is enabled or not.
+     *
+     * Note: Features queried through this API must be added to the array
+     * |kFeaturesExposedToJava| in
+     * //components/browser_ui/modaldialog/android/modaldialog_feature_list.cc
+     *
+     * @param featureName The name of the feature to query.
+     * @return Whether the feature is enabled or not.
+     */
+    public static boolean isEnabled(String featureName) {
+        Boolean testValue = FeatureList.getTestValueForFeature(featureName);
+        if (testValue != null) return testValue;
+
+        return FeatureList.isNativeInitialized()
+                && ModalDialogFeatureListJni.get().isEnabled(featureName);
+    }
+
+    @NativeMethods
+    interface Natives {
+        boolean isEnabled(String featureName);
+    }
+}
diff --git a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogTestUtils.java b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogTestUtils.java
index 1022c8d3ea4b7..3deb8c294a5d2 100644
--- a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogTestUtils.java
+++ b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogTestUtils.java
@@ -170,4 +170,12 @@ public class ModalDialogTestUtils {
             return model;
         });
     }
+
+    /**
+     * Enable/Disable the {@link ModalDialogProperties#BUTTON_TAP_PROTECTION_PERIOD_MS} feature.
+     * Defaults to true.
+     */
+    public static void overrideEnableButtonTapProtection(boolean enable) {
+        ModalDialogView.overrideEnableButtonTapProtectionForTesting(enable);
+    }
 }
diff --git a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogView.java b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogView.java
index 814714e4b42b7..724abf7ed7d2e 100644
--- a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogView.java
+++ b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogView.java
@@ -20,6 +20,7 @@ import androidx.annotation.IntDef;
 
 import org.chromium.base.Callback;
 import org.chromium.base.Log;
+import org.chromium.base.TimeUtils;
 import org.chromium.base.metrics.RecordHistogram;
 import org.chromium.components.browser_ui.styles.ChromeColors;
 import org.chromium.components.browser_ui.widget.BoundedLinearLayout;
@@ -39,6 +40,10 @@ public class ModalDialogView extends BoundedLinearLayout implements View.OnClick
     private static final String UMA_SECURITY_FILTERED_TOUCH_RESULT =
             "Android.ModalDialog.SecurityFilteredTouchResult";
 
+    private static boolean sEnableButtonTapProtection = true;
+
+    private static long sCurrentTimeMsForTesting;
+
     // Intdef with constants for recording the result of filtering touch events on security
     // sensitive dialogs. Should stay in sync with the SecurityFilteredTouchResult enum defined in
     // tools/metrics/histograms/enums.xml.
@@ -68,6 +73,11 @@ public class ModalDialogView extends BoundedLinearLayout implements View.OnClick
     private Runnable mOnTouchFilteredCallback;
     private ViewGroup mFooterContainer;
     private TextView mFooterMessageView;
+    private long mEnterAnimationMidpointTimestamp = -1;
+    // The duration for which dialog buttons should not react to any tap event after this view is
+    // displayed to prevent potentially unintentional user interactions. A value of zero turns off
+    // this kind of tap-jacking protection.
+    private long mButtonTapProtectionDurationMs;
 
     /**
      * Constructor for inflating from XML.
@@ -117,6 +127,8 @@ public class ModalDialogView extends BoundedLinearLayout implements View.OnClick
 
     @Override
     public void onClick(View view) {
+        if (isWithinButtonTapProtectionPeriod()) return;
+
         if (view == mPositiveButton) {
             mOnButtonClickedCallback.onResult(ModalDialogProperties.ButtonType.POSITIVE);
         } else if (view == mNegativeButton) {
@@ -126,6 +138,33 @@ public class ModalDialogView extends BoundedLinearLayout implements View.OnClick
         }
     }
 
+    // Dialog buttons will not react to any tap event for a short period after this view is
+    // displayed. This is to prevent potentially unintentional user interactions.
+    private boolean isWithinButtonTapProtectionPeriod() {
+        if (!isButtonTapProtectionEnabled()) return false;
+
+        // Not set by feature clients.
+        if (mButtonTapProtectionDurationMs == 0) return false;
+
+        // The view has not even started animating yet.
+        if (mEnterAnimationMidpointTimestamp < 0) return true;
+
+        // True if not showing for sufficient time.
+        return TimeUtils.elapsedRealtimeMillis()
+                <= mEnterAnimationMidpointTimestamp + mButtonTapProtectionDurationMs;
+    }
+
+    /**
+     * Callback when view is starting to appear on screen.
+     * @param animationDuration Duration of enter animation.
+     */
+    void onEnterAnimationStarted(long animationDuration) {
+        // Start button protection as soon as dialog is presented, but timer is kicked off in the
+        // middle of the animation.
+        mEnterAnimationMidpointTimestamp =
+                TimeUtils.elapsedRealtimeMillis() + animationDuration / 2;
+    }
+
     /**
      * @param callback The {@link Callback<Integer>} when a button on the dialog button bar is
      *                 clicked. The {@link Integer} indicates the button type.
@@ -203,6 +242,14 @@ public class ModalDialogView extends BoundedLinearLayout implements View.OnClick
         }
     }
 
+    /**
+     * @param duration The duration for which dialog buttons should not react to any tap event after
+     *         this view is displayed to prevent potentially unintentional user interactions.
+     */
+    void setButtonTapProtectionDurationMs(long duration) {
+        mButtonTapProtectionDurationMs = duration;
+    }
+
     /** Setup touch filters to block events when buttons are obscured by another window. */
     private void setupFilterTouchForSecurity() {
         Button positiveButton = getButton(ModalDialogProperties.ButtonType.POSITIVE);
@@ -388,4 +435,14 @@ public class ModalDialogView extends BoundedLinearLayout implements View.OnClick
         mNegativeButton.setVisibility(negativeButtonVisible ? View.VISIBLE : View.GONE);
         mButtonBar.setVisibility(defaultButtonBarVisible ? View.VISIBLE : View.GONE);
     }
+
+    private boolean isButtonTapProtectionEnabled() {
+        return sEnableButtonTapProtection
+                && ModalDialogFeatureList.isEnabled(
+                        ModalDialogFeatureList.MODALDIALOG_BUTTON_PROTECTION);
+    }
+
+    public static void overrideEnableButtonTapProtectionForTesting(boolean enable) {
+        sEnableButtonTapProtection = enable;
+    }
 }
diff --git a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogViewBinder.java b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogViewBinder.java
index 193d4bf60ea97..a3ce473794c01 100644
--- a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogViewBinder.java
+++ b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogViewBinder.java
@@ -89,6 +89,9 @@ public class ModalDialogViewBinder
             assert !(model.get(ModalDialogProperties.FULLSCREEN_DIALOG)
                     && model.get(ModalDialogProperties.DIALOG_WHEN_LARGE))
                 : "Both FULLSCREEN_DIALOG and DIALOG_WHEN_LARGE cannot be set to true.";
+        } else if (ModalDialogProperties.BUTTON_TAP_PROTECTION_PERIOD_MS == propertyKey) {
+            view.setButtonTapProtectionDurationMs(
+                    model.get(ModalDialogProperties.BUTTON_TAP_PROTECTION_PERIOD_MS));
         } else if (ModalDialogProperties.FOCUS_DIALOG == propertyKey) {
             // Intentionally left empty since this is a property for the dialog container.
         } else {
diff --git a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogViewTest.java b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogViewTest.java
index dc3691477024c..83755b7e7370b 100644
--- a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogViewTest.java
+++ b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/ModalDialogViewTest.java
@@ -8,6 +8,7 @@ import static android.view.ViewGroup.LayoutParams.MATCH_PARENT;
 import static android.view.ViewGroup.LayoutParams.WRAP_CONTENT;
 
 import static androidx.test.espresso.Espresso.onView;
+import static androidx.test.espresso.action.ViewActions.click;
 import static androidx.test.espresso.assertion.ViewAssertions.matches;
 import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;
 import static androidx.test.espresso.matcher.ViewMatchers.isEnabled;
@@ -40,15 +41,20 @@ import androidx.test.filters.MediumTest;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
 import org.hamcrest.TypeSafeMatcher;
+import org.junit.Assert;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.ClassRule;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 
+import org.chromium.base.FakeTimeTestRule;
+import org.chromium.base.FeatureList;
 import org.chromium.base.test.BaseActivityTestRule;
 import org.chromium.base.test.BaseJUnit4ClassRunner;
 import org.chromium.base.test.util.Batch;
+import org.chromium.base.test.util.CallbackHelper;
 import org.chromium.base.test.util.Feature;
 import org.chromium.components.browser_ui.modaldialog.test.R;
 import org.chromium.content_public.browser.test.util.TestThreadUtils;
@@ -57,6 +63,8 @@ import org.chromium.ui.modelutil.PropertyModel;
 import org.chromium.ui.test.util.BlankUiTestActivity;
 import org.chromium.ui.test.util.DisableAnimationsTestRule;
 
+import java.util.Map;
+
 /**
  * Tests for {@link ModalDialogView}.
  */
@@ -69,6 +77,9 @@ public class ModalDialogViewTest {
     public static BaseActivityTestRule<BlankUiTestActivity> activityTestRule =
             new BaseActivityTestRule<>(BlankUiTestActivity.class);
 
+    @Rule
+    public FakeTimeTestRule mFakeTime = new FakeTimeTestRule();
+
     private static Activity sActivity;
     private static Resources sResources;
     private static FrameLayout sContentView;
@@ -469,6 +480,40 @@ public class ModalDialogViewTest {
                 .check(matches(allOf(isDisplayed(), withText(R.string.more))));
     }
 
+    @Test
+    @MediumTest
+    @Feature({"ModalDialog"})
+    public void testButtonTapProtection() {
+        FeatureList.setTestFeatures(
+                Map.of(ModalDialogFeatureList.MODALDIALOG_BUTTON_PROTECTION, true));
+        final var callbackHelper = new CallbackHelper();
+        var controller = new ModalDialogProperties.Controller() {
+            @Override
+            public void onClick(PropertyModel model, int buttonType) {
+                callbackHelper.notifyCalled();
+            }
+
+            @Override
+            public void onDismiss(PropertyModel model, int dismissalCause) {}
+        };
+        createModel(
+                mModelBuilder
+                        .with(ModalDialogProperties.POSITIVE_BUTTON_TEXT, sResources, R.string.ok)
+                        .with(ModalDialogProperties.NEGATIVE_BUTTON_TEXT, sResources,
+                                R.string.cancel)
+                        .with(ModalDialogProperties.BUTTON_TAP_PROTECTION_PERIOD_MS, 100)
+                        .with(ModalDialogProperties.CONTROLLER, controller));
+        onView(withId(R.id.button_bar)).check(matches(isDisplayed()));
+        mModalDialogView.onEnterAnimationStarted(0);
+        onView(withId(R.id.positive_button)).perform(click());
+        Assert.assertEquals(
+                "Not accept click event when button is frozen.", 0, callbackHelper.getCallCount());
+        mFakeTime.advanceMillis(200);
+        onView(withId(R.id.positive_button)).perform(click());
+        Assert.assertEquals(
+                "Button is clickable after time elapses", 1, callbackHelper.getCallCount());
+    }
+
     private static Matcher<View> touchFilterEnabled() {
         return new TypeSafeMatcher<View>() {
             @Override
diff --git a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/TabModalPresenter.java b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/TabModalPresenter.java
index 5141f295d619d..7dd7b451d8345 100644
--- a/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/TabModalPresenter.java
+++ b/components/browser_ui/modaldialog/android/java/src/org/chromium/components/browser_ui/modaldialog/TabModalPresenter.java
@@ -226,6 +226,11 @@ public abstract class TabModalPresenter extends ModalDialogManager.Presenter {
                 .alpha(1f)
                 .setInterpolator(BakedBezierInterpolator.FADE_IN_CURVE)
                 .setListener(new AnimatorListenerAdapter() {
+                    @Override
+                    public void onAnimationStart(Animator animation) {
+                        mDialogView.onEnterAnimationStarted(animation.getDuration());
+                    }
+
                     @Override
                     public void onAnimationEnd(Animator animation) {
                         updateContainerHierarchy(true);
diff --git a/components/browser_ui/modaldialog/android/modaldialog_feature_list.cc b/components/browser_ui/modaldialog/android/modaldialog_feature_list.cc
new file mode 100644
index 0000000000000..316ce678d76db
--- /dev/null
+++ b/components/browser_ui/modaldialog/android/modaldialog_feature_list.cc
@@ -0,0 +1,47 @@
+// Copyright 2023 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/android/jni_string.h"
+#include "base/feature_list.h"
+#include "base/notreached.h"
+#include "components/browser_ui/modaldialog/android/features.h"
+#include "components/browser_ui/modaldialog/android/modaldialog_jni_headers/ModalDialogFeatureList_jni.h"
+
+using base::android::ConvertJavaStringToUTF8;
+using base::android::JavaParamRef;
+
+namespace browser_ui {
+
+namespace {
+
+// Array of features exposed through the Java ContentFeatureList API. Entries in
+// this array may either refer to features defined in the header of this file or
+// in other locations in the code base (e.g. content_features.h).
+const base::Feature* const kFeaturesExposedToJava[] = {
+    &kModalDialogButtonProtection,
+};
+
+// TODO(crbug.com/1060097): Remove this once a generalized FeatureList exists.
+const base::Feature* FindFeatureExposedToJava(const std::string& feature_name) {
+  for (const base::Feature* feature : kFeaturesExposedToJava) {
+    if (feature->name == feature_name) {
+      return feature;
+    }
+  }
+  NOTREACHED() << "Queried feature not found in ModaldiaogFeatureList: "
+               << feature_name;
+  return nullptr;
+}
+
+}  // namespace
+
+static jboolean JNI_ModalDialogFeatureList_IsEnabled(
+    JNIEnv* env,
+    const JavaParamRef<jstring>& jfeature_name) {
+  const base::Feature* feature =
+      FindFeatureExposedToJava(ConvertJavaStringToUTF8(env, jfeature_name));
+  return base::FeatureList::IsEnabled(*feature);
+}
+
+}  // namespace browser_ui
diff --git a/components/permissions/android/java/src/org/chromium/components/permissions/PermissionDialogModel.java b/components/permissions/android/java/src/org/chromium/components/permissions/PermissionDialogModel.java
index a83f2c766e657..a7ee43cc22ac3 100644
--- a/components/permissions/android/java/src/org/chromium/components/permissions/PermissionDialogModel.java
+++ b/components/permissions/android/java/src/org/chromium/components/permissions/PermissionDialogModel.java
@@ -13,6 +13,7 @@ import androidx.core.widget.TextViewCompat;
 
 import org.chromium.components.browser_ui.modaldialog.R;
 import org.chromium.ui.LayoutInflaterUtils;
+import org.chromium.ui.UiUtils;
 import org.chromium.ui.modaldialog.ModalDialogProperties;
 import org.chromium.ui.modelutil.PropertyModel;
 
@@ -42,6 +43,8 @@ class PermissionDialogModel {
                 .with(ModalDialogProperties.CONTENT_DESCRIPTION, delegate.getMessageText())
                 .with(ModalDialogProperties.FILTER_TOUCH_FOR_SECURITY, true)
                 .with(ModalDialogProperties.TOUCH_FILTERED_CALLBACK, touchFilteredCallback)
+                .with(ModalDialogProperties.BUTTON_TAP_PROTECTION_PERIOD_MS,
+                        UiUtils.PROMPT_INPUT_PROTECTION_SHORT_DELAY_MS)
                 .build();
     }
 
diff --git a/ui/android/java/src/org/chromium/ui/UiUtils.java b/ui/android/java/src/org/chromium/ui/UiUtils.java
index a5d498222c199..7ee7ca3f3413a 100644
--- a/ui/android/java/src/org/chromium/ui/UiUtils.java
+++ b/ui/android/java/src/org/chromium/ui/UiUtils.java
@@ -54,6 +54,10 @@ public class UiUtils {
     // Keep this variable in sync with the value defined in file_paths.xml.
     public static final String IMAGE_FILE_PATH = "images";
 
+    // crbug.com/1413586: Prevent potentially unintentional user interaction with any prompt for
+    // this long after the prompt is displayed.
+    public static long PROMPT_INPUT_PROTECTION_SHORT_DELAY_MS = 600;
+
     /**
      * A static map of manufacturers to the version where theming Android UI is completely
      * supported. If there is no entry, it means the manufacturer supports theming at the same
diff --git a/ui/android/java/src/org/chromium/ui/modaldialog/ModalDialogProperties.java b/ui/android/java/src/org/chromium/ui/modaldialog/ModalDialogProperties.java
index 3feb8cfbb387c..cd9c5273b2e47 100644
--- a/ui/android/java/src/org/chromium/ui/modaldialog/ModalDialogProperties.java
+++ b/ui/android/java/src/org/chromium/ui/modaldialog/ModalDialogProperties.java
@@ -17,6 +17,7 @@ import org.chromium.ui.modelutil.PropertyModel.ReadableIntPropertyKey;
 import org.chromium.ui.modelutil.PropertyModel.ReadableObjectPropertyKey;
 import org.chromium.ui.modelutil.PropertyModel.WritableBooleanPropertyKey;
 import org.chromium.ui.modelutil.PropertyModel.WritableIntPropertyKey;
+import org.chromium.ui.modelutil.PropertyModel.WritableLongPropertyKey;
 import org.chromium.ui.modelutil.PropertyModel.WritableObjectPropertyKey;
 
 import java.lang.annotation.Retention;
@@ -188,6 +189,14 @@ public class ModalDialogProperties {
     public static final WritableObjectPropertyKey<OnBackPressedCallback>
             APP_MODAL_DIALOG_BACK_PRESS_HANDLER = new WritableObjectPropertyKey();
 
+    /**
+     * Duration of initial tap protection period after dialog is displayed to user. During this
+     * period, none of dialog buttons will respond to any click event; i.e.:
+     * {@link Controller#onClick(PropertyModel, int)} won't be triggered until it is elapsed.
+     */
+    public static final WritableLongPropertyKey BUTTON_TAP_PROTECTION_PERIOD_MS =
+            new WritableLongPropertyKey();
+
     public static final PropertyKey[] ALL_KEYS = new PropertyKey[] {CONTROLLER, CONTENT_DESCRIPTION,
             TITLE, TITLE_MAX_LINES, TITLE_ICON, MESSAGE_PARAGRAPH_1, MESSAGE_PARAGRAPH_2,
             CUSTOM_VIEW, CUSTOM_BUTTON_BAR_VIEW, POSITIVE_BUTTON_TEXT,
@@ -195,5 +204,6 @@ public class ModalDialogProperties {
             NEGATIVE_BUTTON_CONTENT_DESCRIPTION, NEGATIVE_BUTTON_DISABLED, FOOTER_MESSAGE,
             CANCEL_ON_TOUCH_OUTSIDE, FILTER_TOUCH_FOR_SECURITY, TOUCH_FILTERED_CALLBACK,
             TITLE_SCROLLABLE, BUTTON_STYLES, FULLSCREEN_DIALOG, DIALOG_WHEN_LARGE, FOCUS_DIALOG,
-            EXCEED_MAX_HEIGHT, APP_MODAL_DIALOG_BACK_PRESS_HANDLER};
+            EXCEED_MAX_HEIGHT, APP_MODAL_DIALOG_BACK_PRESS_HANDLER,
+            BUTTON_TAP_PROTECTION_PERIOD_MS};
 }
diff --git a/weblayer/BUILD.gn b/weblayer/BUILD.gn
index 67d1f5bd1495d..fb7ee02dcfdae 100644
--- a/weblayer/BUILD.gn
+++ b/weblayer/BUILD.gn
@@ -716,6 +716,7 @@ source_set("weblayer_lib_base") {
       "//components/browser_ui/accessibility/android",
       "//components/browser_ui/client_certificate/android",
       "//components/browser_ui/contacts_picker/android",
+      "//components/browser_ui/modaldialog/android",
       "//components/browser_ui/photo_picker/android",
       "//components/browser_ui/settings/android",
       "//components/browser_ui/share/android",
