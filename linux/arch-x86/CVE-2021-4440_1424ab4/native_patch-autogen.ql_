/**
 * @name linux-1424ab4bb386df9cc590c73afa55f13e9b00dea2-native_patch
 * @id cpp/linux/1424ab4bb386df9cc590c73afa55f13e9b00dea2/native-patch
 * @description linux-1424ab4bb386df9cc590c73afa55f13e9b00dea2-arch/x86/kernel/paravirt_patch.c-native_patch CVE-2021-4440
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, DivExpr target_0) {
	target_0.getValue()="36"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, DivExpr target_1) {
	target_1.getValue()="35"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Function func, DivExpr target_2) {
	target_2.getValue()="38"
	and target_2.getEnclosingFunction() = func
}

predicate func_3(Function func, DivExpr target_3) {
	target_3.getValue()="37"
	and target_3.getEnclosingFunction() = func
}

predicate func_4(Function func, DivExpr target_4) {
	target_4.getValue()="47"
	and target_4.getEnclosingFunction() = func
}

predicate func_5(Function func, DivExpr target_5) {
	target_5.getValue()="49"
	and target_5.getEnclosingFunction() = func
}

predicate func_6(Function func, DivExpr target_6) {
	target_6.getValue()="50"
	and target_6.getEnclosingFunction() = func
}

predicate func_7(Function func, DivExpr target_7) {
	target_7.getValue()="85"
	and target_7.getEnclosingFunction() = func
}

predicate func_8(Function func, DivExpr target_8) {
	target_8.getValue()="88"
	and target_8.getEnclosingFunction() = func
}

predicate func_9(Function func, PointerDereferenceExpr target_9) {
	target_9.getOperand().(Literal).getValue()="0"
	and target_9.getEnclosingFunction() = func
}

predicate func_10(Function func, SwitchCase target_10) {
	target_10.getExpr().(DivExpr).getValue()="31"
	and target_10.getEnclosingFunction() = func
}

predicate func_11(Parameter vinsn_buff_71, Parameter vlen_72, Variable vpatch_data_xxl, VariableAccess target_12, ReturnStmt target_11) {
	exists(FunctionCall obj_0 | obj_0=target_11.getExpr() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getArgument(2) |
			obj_1.getTarget().getName()="cpu_usergs_sysret64"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vpatch_data_xxl
		)
		and exists(PointerArithmeticOperation obj_2 | obj_2=obj_0.getArgument(3) |
			exists(ValueFieldAccess obj_3 | obj_3=obj_2.getLeftOperand() |
				obj_3.getTarget().getName()="cpu_usergs_sysret64"
				and obj_3.getQualifier().(VariableAccess).getTarget()=vpatch_data_xxl
			)
			and obj_2.getRightOperand().(SizeofExprOperator).getValue()="6"
		)
		and obj_0.getTarget().hasName("paravirt_patch_insns")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vinsn_buff_71
		and obj_0.getArgument(1).(VariableAccess).getTarget()=vlen_72
	)
	and target_11.getParent().(BlockStmt).getParent().(SwitchStmt).getExpr()=target_12
}

predicate func_12(Parameter vtype_71, VariableAccess target_12) {
	target_12.getTarget()=vtype_71
}

from Function func, Parameter vinsn_buff_71, Parameter vlen_72, Variable vpatch_data_xxl, Parameter vtype_71, DivExpr target_0, DivExpr target_1, DivExpr target_2, DivExpr target_3, DivExpr target_4, DivExpr target_5, DivExpr target_6, DivExpr target_7, DivExpr target_8, PointerDereferenceExpr target_9, SwitchCase target_10, ReturnStmt target_11, VariableAccess target_12
where
func_0(func, target_0)
and func_1(func, target_1)
and func_2(func, target_2)
and func_3(func, target_3)
and func_4(func, target_4)
and func_5(func, target_5)
and func_6(func, target_6)
and func_7(func, target_7)
and func_8(func, target_8)
and func_9(func, target_9)
and func_10(func, target_10)
and func_11(vinsn_buff_71, vlen_72, vpatch_data_xxl, target_12, target_11)
and func_12(vtype_71, target_12)
and vinsn_buff_71.getType().hasName("void *")
and vlen_72.getType().hasName("unsigned int")
and vpatch_data_xxl.getType().hasName("const patch_xxl")
and vtype_71.getType().hasName("u8")
and vinsn_buff_71.getFunction() = func
and vlen_72.getFunction() = func
and not vpatch_data_xxl.getParentScope+() = func
and vtype_71.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
