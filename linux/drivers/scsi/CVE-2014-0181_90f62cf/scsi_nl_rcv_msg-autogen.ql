/**
 * @name linux-90f62cf30a78721641e08737bda787552428061e-scsi_nl_rcv_msg
 * @id cpp/linux/90f62cf30a78721641e08737bda787552428061e/scsi-nl-rcv-msg
 * @description linux-90f62cf30a78721641e08737bda787552428061e-drivers/scsi/scsi_netlink.c-scsi_nl_rcv_msg CVE-2014-0181
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(BlockStmt target_2, Function func, FunctionCall target_0) {
	target_0.getTarget().hasName("capable")
	and not target_0.getTarget().hasName("netlink_capable")
	and target_0.getArgument(0).(Literal).getValue()="21"
	and target_0.getParent().(NotExpr).getParent().(IfStmt).getThen()=target_2
	and target_0.getEnclosingFunction() = func
}

predicate func_2(Function func, BlockStmt target_2) {
	target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
	and target_2.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(UnaryMinusExpr).getValue()="-1"
	and target_2.getStmt(1).(GotoStmt).getName() ="next_msg"
	and target_2.getEnclosingFunction() = func
}

from Function func, FunctionCall target_0, BlockStmt target_2
where
func_0(target_2, func, target_0)
and func_2(func, target_2)
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
