commit ed34695e15aba74f45247f1ee2cf7e09d449f925
Author: Nikola Livic <nlivic@gmail.com>
Date:   Mon Mar 29 11:56:49 2021 +0300

    pNFS/flexfiles: fix incorrect size check in decode_nfs_fh()
    
    We (adam zabrocki, alexander matrosov, alexander tereshkin, maksym
    bazalii) observed the check:
    
            if (fh->size > sizeof(struct nfs_fh))
    
    should not use the size of the nfs_fh struct which includes an extra two
    bytes from the size field.
    
    struct nfs_fh {
            unsigned short         size;
            unsigned char          data[NFS_MAXFHSIZE];
    }
    
    but should determine the size from data[NFS_MAXFHSIZE] so the memcpy
    will not write 2 bytes beyond destination.  The proposed fix is to
    compare against the NFS_MAXFHSIZE directly, as is done elsewhere in fs
    code base.
    
    Fixes: d67ae825a59d ("pnfs/flexfiles: Add the FlexFile Layout Driver")
    Signed-off-by: Nikola Livic <nlivic@gmail.com>
    Signed-off-by: Dan Carpenter <dan.carpenter@oracle.com>
    Signed-off-by: Trond Myklebust <trond.myklebust@hammerspace.com>

diff --git a/fs/nfs/flexfilelayout/flexfilelayout.c b/fs/nfs/flexfilelayout/flexfilelayout.c
index 872112bffcab..d383de00d486 100644
--- a/fs/nfs/flexfilelayout/flexfilelayout.c
+++ b/fs/nfs/flexfilelayout/flexfilelayout.c
@@ -106,7 +106,7 @@ static int decode_nfs_fh(struct xdr_stream *xdr, struct nfs_fh *fh)
 	if (unlikely(!p))
 		return -ENOBUFS;
 	fh->size = be32_to_cpup(p++);
-	if (fh->size > sizeof(struct nfs_fh)) {
+	if (fh->size > NFS_MAXFHSIZE) {
 		printk(KERN_ERR "NFS flexfiles: Too big fh received %d\n",
 		       fh->size);
 		return -EOVERFLOW;
