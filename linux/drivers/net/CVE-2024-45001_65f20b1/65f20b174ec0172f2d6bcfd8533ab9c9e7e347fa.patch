commit 65f20b174ec0172f2d6bcfd8533ab9c9e7e347fa
Author: Haiyang Zhang <haiyangz@microsoft.com>
Date:   Fri Aug 9 14:01:24 2024 -0700

    net: mana: Fix RX buf alloc_size alignment and atomic op panic
    
    commit 32316f676b4ee87c0404d333d248ccf777f739bc upstream.
    
    The MANA driver's RX buffer alloc_size is passed into napi_build_skb() to
    create SKB. skb_shinfo(skb) is located at the end of skb, and its alignment
    is affected by the alloc_size passed into napi_build_skb(). The size needs
    to be aligned properly for better performance and atomic operations.
    Otherwise, on ARM64 CPU, for certain MTU settings like 4000, atomic
    operations may panic on the skb_shinfo(skb)->dataref due to alignment fault.
    
    To fix this bug, add proper alignment to the alloc_size calculation.
    
    Sample panic info:
    [  253.298819] Unable to handle kernel paging request at virtual address ffff000129ba5cce
    [  253.300900] Mem abort info:
    [  253.301760]   ESR = 0x0000000096000021
    [  253.302825]   EC = 0x25: DABT (current EL), IL = 32 bits
    [  253.304268]   SET = 0, FnV = 0
    [  253.305172]   EA = 0, S1PTW = 0
    [  253.306103]   FSC = 0x21: alignment fault
    Call trace:
     __skb_clone+0xfc/0x198
     skb_clone+0x78/0xe0
     raw6_local_deliver+0xfc/0x228
     ip6_protocol_deliver_rcu+0x80/0x500
     ip6_input_finish+0x48/0x80
     ip6_input+0x48/0xc0
     ip6_sublist_rcv_finish+0x50/0x78
     ip6_sublist_rcv+0x1cc/0x2b8
     ipv6_list_rcv+0x100/0x150
     __netif_receive_skb_list_core+0x180/0x220
     netif_receive_skb_list_internal+0x198/0x2a8
     __napi_poll+0x138/0x250
     net_rx_action+0x148/0x330
     handle_softirqs+0x12c/0x3a0
    
    Cc: stable@vger.kernel.org
    Fixes: 80f6215b450e ("net: mana: Add support for jumbo frame")
    Signed-off-by: Haiyang Zhang <haiyangz@microsoft.com>
    Reviewed-by: Long Li <longli@microsoft.com>
    Signed-off-by: David S. Miller <davem@davemloft.net>
    Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>

diff --git a/drivers/net/ethernet/microsoft/mana/mana_en.c b/drivers/net/ethernet/microsoft/mana/mana_en.c
index a09001d22b49..ff36a1091cda 100644
--- a/drivers/net/ethernet/microsoft/mana/mana_en.c
+++ b/drivers/net/ethernet/microsoft/mana/mana_en.c
@@ -599,7 +599,11 @@ static void mana_get_rxbuf_cfg(int mtu, u32 *datasize, u32 *alloc_size,
 	else
 		*headroom = XDP_PACKET_HEADROOM;
 
-	*alloc_size = mtu + MANA_RXBUF_PAD + *headroom;
+	*alloc_size = SKB_DATA_ALIGN(mtu + MANA_RXBUF_PAD + *headroom);
+
+	/* Using page pool in this case, so alloc_size is PAGE_SIZE */
+	if (*alloc_size < PAGE_SIZE)
+		*alloc_size = PAGE_SIZE;
 
 	*datasize = mtu + ETH_HLEN;
 }
