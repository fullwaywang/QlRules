/**
 * @name linux-be80a1d3f9dbe5aee79a325964f7037fe2d92f30-check_ld_abs
 * @id cpp/linux/be80a1d3f9dbe5aee79a325964f7037fe2d92f30/check-ld-abs
 * @description linux-be80a1d3f9dbe5aee79a325964f7037fe2d92f30-kernel/bpf/verifier.c-check_ld_abs CVE-2021-4204
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vregs_9599, Variable vctx_reg_9600, Parameter venv_9597, FunctionCall target_0) {
	target_0.getTarget().hasName("check_ctx_reg")
	and not target_0.getTarget().hasName("check_ptr_off_reg")
	and target_0.getArgument(0).(VariableAccess).getTarget()=venv_9597
	and target_0.getArgument(1).(AddressOfExpr).getOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget()=vregs_9599
	and target_0.getArgument(1).(AddressOfExpr).getOperand().(ArrayExpr).getArrayOffset().(VariableAccess).getTarget()=vctx_reg_9600
	and target_0.getArgument(2).(VariableAccess).getTarget()=vctx_reg_9600
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
}

from Function func, Variable vregs_9599, Variable vctx_reg_9600, Parameter venv_9597, FunctionCall target_0
where
func_0(vregs_9599, vctx_reg_9600, venv_9597, target_0)
and vregs_9599.getType().hasName("bpf_reg_state *")
and vctx_reg_9600.getType().hasName("const int")
and venv_9597.getType().hasName("bpf_verifier_env *")
and vregs_9599.(LocalVariable).getFunction() = func
and vctx_reg_9600.(LocalVariable).getFunction() = func
and venv_9597.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
