/**
 * @name openssl-c3829dd8825c654652201e16f8a0a0c46ee3f344-BIO_new_NDEF
 * @id cpp/openssl/c3829dd8825c654652201e16f8a0a0c46ee3f344/bio-new-ndef
 * @description openssl-c3829dd8825c654652201e16f8a0a0c46ee3f344-crypto/asn1/bio_ndef.c-BIO_new_NDEF CVE-2023-0215
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vasn_bio_55, ExprStmt target_8) {
	exists(AssignExpr target_0 |
		target_0.getLValue().(VariableAccess).getType().hasName("BIO *")
		and target_0.getRValue().(VariableAccess).getTarget()=vasn_bio_55
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getRValue().(VariableAccess).getLocation()))
}

predicate func_1(Function func) {
	exists(IfStmt target_1 |
		target_1.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(RelationalOperation).getLesserOperand() instanceof FunctionCall
		and target_1.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
		and target_1.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(RelationalOperation).getLesserOperand() instanceof FunctionCall
		and target_1.getCondition().(LogicalOrExpr).getAnOperand().(LogicalOrExpr).getAnOperand().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
		and target_1.getCondition().(LogicalOrExpr).getAnOperand().(RelationalOperation).getLesserOperand() instanceof FunctionCall
		and target_1.getCondition().(LogicalOrExpr).getAnOperand().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
		and func.getEntryPoint().(BlockStmt).getAStmt()=target_1)
}

predicate func_2(Variable vndef_aux_54, LogicalOrExpr target_10, ExprStmt target_11) {
	exists(AssignExpr target_2 |
		target_2.getLValue().(VariableAccess).getTarget()=vndef_aux_54
		and target_2.getRValue().(Literal).getValue()="0"
		and target_10.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getLocation().isBefore(target_2.getLValue().(VariableAccess).getLocation())
		and target_2.getLValue().(VariableAccess).getLocation().isBefore(target_11.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_3(RelationalOperation target_12, Function func) {
	exists(GotoStmt target_3 |
		target_3.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_3
		and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12
		and target_3.getEnclosingFunction() = func)
}

predicate func_4(Function func) {
	exists(FunctionCall target_4 |
		target_4.getTarget().hasName("BIO_pop")
		and target_4.getArgument(0).(VariableAccess).getType().hasName("BIO *")
		and target_4.getEnclosingFunction() = func)
}

predicate func_5(Variable vasn_bio_55, FunctionCall target_5) {
		target_5.getTarget().hasName("BIO_asn1_set_prefix")
		and target_5.getArgument(0).(VariableAccess).getTarget()=vasn_bio_55
}

predicate func_6(Variable vasn_bio_55, FunctionCall target_6) {
		target_6.getTarget().hasName("BIO_asn1_set_suffix")
		and target_6.getArgument(0).(VariableAccess).getTarget()=vasn_bio_55
}

predicate func_7(Variable vndef_aux_54, Variable vasn_bio_55, FunctionCall target_7) {
		target_7.getTarget().hasName("BIO_ctrl")
		and target_7.getArgument(0).(VariableAccess).getTarget()=vasn_bio_55
		and target_7.getArgument(1).(Literal).getValue()="153"
		and target_7.getArgument(2).(Literal).getValue()="0"
		and target_7.getArgument(3).(VariableAccess).getTarget()=vndef_aux_54
}

predicate func_8(Variable vasn_bio_55, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("BIO *")
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("BIO_push")
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vasn_bio_55
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("BIO *")
}

predicate func_10(Variable vndef_aux_54, Variable vasn_bio_55, LogicalOrExpr target_10) {
		target_10.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getTarget()=vndef_aux_54
		and target_10.getAnOperand().(EqualityOperation).getAnOperand().(Literal).getValue()="0"
		and target_10.getAnOperand().(EqualityOperation).getAnOperand().(VariableAccess).getTarget()=vasn_bio_55
		and target_10.getAnOperand().(EqualityOperation).getAnOperand().(Literal).getValue()="0"
}

predicate func_11(Variable vndef_aux_54, ExprStmt target_11) {
		target_11.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="val"
		and target_11.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vndef_aux_54
		and target_11.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("ASN1_VALUE *")
}

predicate func_12(Function func, RelationalOperation target_12) {
		 (target_12 instanceof GEExpr or target_12 instanceof LEExpr)
		and target_12.getLesserOperand().(VariableCall).getExpr().(PointerFieldAccess).getTarget().getName()="asn1_cb"
		and target_12.getLesserOperand().(VariableCall).getExpr().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("const ASN1_AUX *")
		and target_12.getLesserOperand().(VariableCall).getArgument(0).(Literal).getValue()="10"
		and target_12.getLesserOperand().(VariableCall).getArgument(1).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("ASN1_VALUE *")
		and target_12.getLesserOperand().(VariableCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("const ASN1_ITEM *")
		and target_12.getLesserOperand().(VariableCall).getArgument(3).(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("ASN1_STREAM_ARG")
		and target_12.getGreaterOperand().(Literal).getValue()="0"
		and target_12.getEnclosingFunction() = func
}

from Function func, Variable vndef_aux_54, Variable vasn_bio_55, FunctionCall target_5, FunctionCall target_6, FunctionCall target_7, ExprStmt target_8, LogicalOrExpr target_10, ExprStmt target_11, RelationalOperation target_12
where
not func_0(vasn_bio_55, target_8)
and not func_1(func)
and not func_2(vndef_aux_54, target_10, target_11)
and not func_3(target_12, func)
and not func_4(func)
and func_5(vasn_bio_55, target_5)
and func_6(vasn_bio_55, target_6)
and func_7(vndef_aux_54, vasn_bio_55, target_7)
and func_8(vasn_bio_55, target_8)
and func_10(vndef_aux_54, vasn_bio_55, target_10)
and func_11(vndef_aux_54, target_11)
and func_12(func, target_12)
and vndef_aux_54.getType().hasName("NDEF_SUPPORT *")
and vasn_bio_55.getType().hasName("BIO *")
and vndef_aux_54.(LocalVariable).getFunction() = func
and vasn_bio_55.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
