/**
 * @name linux-497de07d89c1410d76a15bec2bb41f24a2a89f31-simple_set_acl
 * @id cpp/linux/497de07d89c1410d76a15bec2bb41f24a2a89f31/simple-set-acl
 * @description linux-497de07d89c1410d76a15bec2bb41f24a2a89f31-fs/posix_acl.c-simple_set_acl CVE-2017-5551
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vinode_920, Parameter vacl_920, Variable verror_922, FunctionCall target_0) {
	target_0.getTarget().hasName("posix_acl_equiv_mode")
	and not target_0.getTarget().hasName("posix_acl_update_mode")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vacl_920
	and target_0.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="i_mode"
	and target_0.getArgument(1).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vinode_920
	and target_0.getParent().(AssignExpr).getRValue() = target_0
	and target_0.getParent().(AssignExpr).getLValue().(VariableAccess).getTarget()=verror_922
}

predicate func_2(Parameter vacl_920, ExprStmt target_9) {
exists(AddressOfExpr target_2 |
	target_2.getOperand().(VariableAccess).getTarget()=vacl_920
	and target_2.getParent().(FunctionCall).getParent().(AssignExpr).getRValue() instanceof FunctionCall
	and target_2.getOperand().(VariableAccess).getLocation().isBefore(target_9.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getLocation()))
}

predicate func_3(Variable verror_922, ReturnStmt target_10, VariableAccess target_3) {
	target_3.getTarget()=verror_922
	and target_3.getParent().(LTExpr).getGreaterOperand() instanceof Literal
	and target_3.getParent().(LTExpr).getParent().(IfStmt).getThen()=target_10
}

predicate func_4(Variable verror_922, ExprStmt target_11, VariableAccess target_4) {
	target_4.getTarget()=verror_922
	and target_4.getParent().(EQExpr).getRightOperand() instanceof Literal
	and target_4.getParent().(EQExpr).getParent().(IfStmt).getThen()=target_11
}

predicate func_5(Parameter vacl_920, VariableAccess target_5) {
	target_5.getTarget()=vacl_920
	and target_5.getParent().(AssignExpr).getLValue() = target_5
	and target_5.getParent().(AssignExpr).getRValue() instanceof Literal
}

predicate func_6(Variable verror_922, ReturnStmt target_10, RelationalOperation target_6) {
	 (target_6 instanceof GTExpr or target_6 instanceof LTExpr)
	and target_6.getLesserOperand().(VariableAccess).getTarget()=verror_922
	and target_6.getGreaterOperand().(Literal).getValue()="0"
	and target_6.getParent().(IfStmt).getThen()=target_10
}

predicate func_8(Parameter vacl_920, Variable verror_922, EqualityOperation target_12, IfStmt target_8) {
	target_8.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=verror_922
	and target_8.getCondition().(EqualityOperation).getRightOperand().(Literal).getValue()="0"
	and target_8.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vacl_920
	and target_8.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and target_8.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_12
}

predicate func_9(Parameter vinode_920, Parameter vacl_920, ExprStmt target_9) {
	target_9.getExpr().(FunctionCall).getTarget().hasName("set_cached_acl")
	and target_9.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vinode_920
	and target_9.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("int")
	and target_9.getExpr().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vacl_920
}

predicate func_10(RelationalOperation target_6, Function func, ReturnStmt target_10) {
	target_10.getExpr() instanceof Literal
	and target_10.getParent().(IfStmt).getCondition()=target_6
	and target_10.getEnclosingFunction() = func
}

predicate func_11(Function func, ExprStmt target_11) {
	target_11.getExpr() instanceof AssignExpr
	and target_11.getEnclosingFunction() = func
}

predicate func_12(Function func, EqualityOperation target_12) {
	target_12.getLeftOperand().(VariableAccess).getTarget().getType().hasName("int")
	and target_12.getRightOperand().(Literal).getValue()="32768"
	and target_12.getEnclosingFunction() = func
}

from Function func, Parameter vinode_920, Parameter vacl_920, Variable verror_922, FunctionCall target_0, VariableAccess target_3, VariableAccess target_4, VariableAccess target_5, RelationalOperation target_6, IfStmt target_8, ExprStmt target_9, ReturnStmt target_10, ExprStmt target_11, EqualityOperation target_12
where
func_0(vinode_920, vacl_920, verror_922, target_0)
and not func_2(vacl_920, target_9)
and func_3(verror_922, target_10, target_3)
and func_4(verror_922, target_11, target_4)
and func_5(vacl_920, target_5)
and func_6(verror_922, target_10, target_6)
and func_8(vacl_920, verror_922, target_12, target_8)
and func_9(vinode_920, vacl_920, target_9)
and func_10(target_6, func, target_10)
and func_11(func, target_11)
and func_12(func, target_12)
and vinode_920.getType().hasName("inode *")
and vacl_920.getType().hasName("posix_acl *")
and verror_922.getType().hasName("int")
and vinode_920.getFunction() = func
and vacl_920.getFunction() = func
and verror_922.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
