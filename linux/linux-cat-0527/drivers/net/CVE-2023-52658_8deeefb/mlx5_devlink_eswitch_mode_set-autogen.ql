/**
 * @name linux-8deeefb24786ea7950b37bde4516b286c877db00-mlx5_devlink_eswitch_mode_set
 * @id cpp/linux/8deeefb24786ea7950b37bde4516b286c877db00/mlx5-devlink-eswitch-mode-set
 * @description linux-8deeefb24786ea7950b37bde4516b286c877db00-drivers/net/ethernet/mellanox/mlx5/core/eswitch_offloads.c-mlx5_devlink_eswitch_mode_set CVE-2023-52658
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(Variable v__msg_3723, Variable v__extack_3723, PointerFieldAccess target_1) {
	target_1.getTarget().getName()="_msg"
	and target_1.getQualifier().(VariableAccess).getTarget()=v__extack_3723
	and target_1.getParent().(AssignExpr).getLValue() = target_1
	and target_1.getParent().(AssignExpr).getRValue().(VariableAccess).getTarget()=v__msg_3723
}

predicate func_2(Parameter vmode_3707, Variable v__msg_3723, Variable v__extack_3723, Parameter vdevlink_3707, Function func, IfStmt target_2) {
	target_2.getCondition().(LogicalAndExpr).getLeftOperand().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vmode_3707
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getTarget().hasName("esw_offloads_devlink_ns_eq_netdev_ns")
	and target_2.getCondition().(LogicalAndExpr).getRightOperand().(NotExpr).getOperand().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdevlink_3707
	and target_2.getThen().(BlockStmt).getStmt(0).(DoStmt).getCondition().(Literal).getValue()="0"
	and target_2.getThen().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("do_trace_netlink_extack")
	and target_2.getThen().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=v__msg_3723
	and target_2.getThen().(BlockStmt).getStmt(0).(DoStmt).getStmt().(BlockStmt).getStmt(3).(IfStmt).getCondition().(VariableAccess).getTarget()=v__extack_3723
	and target_2.getThen().(BlockStmt).getStmt(1).(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-1"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
}

/*predicate func_3(Variable v__msg_3723, Variable v__extack_3723, LogicalAndExpr target_8, DoStmt target_3) {
	target_3.getCondition().(Literal).getValue()="0"
	and target_3.getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("do_trace_netlink_extack")
	and target_3.getStmt().(BlockStmt).getStmt(2).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=v__msg_3723
	and target_3.getStmt().(BlockStmt).getStmt(3).(IfStmt).getCondition().(VariableAccess).getTarget()=v__extack_3723
	and target_3.getStmt().(BlockStmt).getStmt(3).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="_msg"
	and target_3.getStmt().(BlockStmt).getStmt(3).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=v__extack_3723
	and target_3.getStmt().(BlockStmt).getStmt(3).(IfStmt).getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=v__msg_3723
	and target_3.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8
}

*/
/*predicate func_5(Variable v__msg_3723, ExprStmt target_5) {
	target_5.getExpr().(FunctionCall).getTarget().hasName("do_trace_netlink_extack")
	and target_5.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=v__msg_3723
}

*/
/*predicate func_6(Variable v__msg_3723, Variable v__extack_3723, IfStmt target_6) {
	target_6.getCondition().(VariableAccess).getTarget()=v__extack_3723
	and target_6.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="_msg"
	and target_6.getThen().(ExprStmt).getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=v__extack_3723
	and target_6.getThen().(ExprStmt).getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=v__msg_3723
}

*/
/*predicate func_7(LogicalAndExpr target_8, Function func, ReturnStmt target_7) {
	target_7.getExpr().(UnaryMinusExpr).getValue()="-1"
	and target_7.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_8
	and target_7.getEnclosingFunction() = func
}

*/
predicate func_8(Function func, LogicalAndExpr target_8) {
	target_8.getLeftOperand() instanceof EqualityOperation
	and target_8.getRightOperand() instanceof NotExpr
	and target_8.getEnclosingFunction() = func
}

from Function func, Parameter vmode_3707, Variable v__msg_3723, Variable v__extack_3723, Parameter vdevlink_3707, PointerFieldAccess target_1, IfStmt target_2, LogicalAndExpr target_8
where
func_1(v__msg_3723, v__extack_3723, target_1)
and func_2(vmode_3707, v__msg_3723, v__extack_3723, vdevlink_3707, func, target_2)
and func_8(func, target_8)
and vmode_3707.getType().hasName("u16")
and v__msg_3723.getType().hasName("const char[]")
and v__extack_3723.getType().hasName("netlink_ext_ack *")
and vdevlink_3707.getType().hasName("devlink *")
and vmode_3707.getFunction() = func
and v__msg_3723.(LocalVariable).getFunction() = func
and v__extack_3723.(LocalVariable).getFunction() = func
and vdevlink_3707.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
