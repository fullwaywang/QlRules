/**
 * @name linux-0ad646c81b2182f7fa67ec0c8c825e0ee165696d-tun_set_iff
 * @id cpp/linux/0ad646c81b2182f7fa67ec0c8c825e0ee165696d/tun-set-iff
 * @description linux-0ad646c81b2182f7fa67ec0c8c825e0ee165696d-drivers/net/tun.c-tun_set_iff CVE-2018-7191
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vdev_1958, Variable verr_1959, Variable vname_1998, Parameter vnet_1954, VariableAccess target_4, NotExpr target_5, ExprStmt target_6, ReturnStmt target_7, ExprStmt target_8, NotExpr target_9) {
	exists(ExprStmt target_0 |
		target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=verr_1959
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("dev_get_valid_name")
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vnet_1954
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vdev_1958
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vname_1998
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(10)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4
		and target_5.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation())
		and target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
		and target_7.getExpr().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation())
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getLocation())
		and target_9.getOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Variable verr_1959, VariableAccess target_4) {
	exists(IfStmt target_1 |
		target_1.getCondition().(VariableAccess).getTarget()=verr_1959
		and target_1.getThen() instanceof GotoStmt
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getElse().(BlockStmt).getStmt(11)=target_1
		and target_1.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_4)
}

predicate func_3(Function func, GotoStmt target_3) {
		func.getEntryPoint().(BlockStmt).getAStmt()=target_3
}

predicate func_4(Variable vdev_1958, BlockStmt target_10, VariableAccess target_4) {
		target_4.getTarget()=vdev_1958
		and target_4.getParent().(IfStmt).getThen()=target_10
}

predicate func_5(Variable vdev_1958, NotExpr target_5) {
		target_5.getOperand().(VariableAccess).getTarget()=vdev_1958
}

predicate func_6(Variable vdev_1958, Parameter vnet_1954, ExprStmt target_6) {
		target_6.getExpr().(FunctionCall).getTarget().hasName("dev_net_set")
		and target_6.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vdev_1958
		and target_6.getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vnet_1954
}

predicate func_7(Variable verr_1959, RelationalOperation target_11, ReturnStmt target_7) {
		target_7.getExpr().(VariableAccess).getTarget()=verr_1959
		and target_7.getParent().(IfStmt).getCondition()=target_11
}

predicate func_8(Variable vdev_1958, Variable vname_1998, ExprStmt target_8) {
		target_8.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vdev_1958
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("alloc_netdev_mqs")
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(SizeofTypeOperator).getType() instanceof LongType
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(SizeofTypeOperator).getValue()="10616"
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget()=vname_1998
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(Literal).getValue()="0"
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("int")
		and target_8.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(5).(VariableAccess).getTarget().getType().hasName("int")
}

predicate func_9(Parameter vnet_1954, NotExpr target_9) {
		target_9.getOperand().(FunctionCall).getTarget().hasName("ns_capable")
		and target_9.getOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getTarget().getName()="user_ns"
		and target_9.getOperand().(FunctionCall).getArgument(0).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vnet_1954
		and target_9.getOperand().(FunctionCall).getArgument(1).(Literal).getValue()="12"
}

predicate func_10(Function func, BlockStmt target_10) {
		target_10.getStmt(0).(IfStmt).getCondition().(BitwiseAndExpr).getLeftOperand().(ValueFieldAccess).getTarget().getName()="ifru_flags"
		and target_10.getStmt(0).(IfStmt).getCondition().(BitwiseAndExpr).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="ifr_ifru"
		and target_10.getStmt(0).(IfStmt).getCondition().(BitwiseAndExpr).getLeftOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("ifreq *")
		and target_10.getStmt(0).(IfStmt).getCondition().(BitwiseAndExpr).getRightOperand().(Literal).getValue()="32768"
		and target_10.getStmt(0).(IfStmt).getThen().(ReturnStmt).getExpr().(UnaryMinusExpr).getValue()="-16"
		and target_10.getEnclosingFunction() = func
}

predicate func_11(Variable verr_1959, ReturnStmt target_7, RelationalOperation target_11) {
		 (target_11 instanceof GTExpr or target_11 instanceof LTExpr)
		and target_11.getLesserOperand().(VariableAccess).getTarget()=verr_1959
		and target_11.getGreaterOperand().(Literal).getValue()="0"
		and target_11.getParent().(IfStmt).getThen()=target_7
}

from Function func, Variable vdev_1958, Variable verr_1959, Variable vname_1998, Parameter vnet_1954, GotoStmt target_3, VariableAccess target_4, NotExpr target_5, ExprStmt target_6, ReturnStmt target_7, ExprStmt target_8, NotExpr target_9, BlockStmt target_10, RelationalOperation target_11
where
not func_0(vdev_1958, verr_1959, vname_1998, vnet_1954, target_4, target_5, target_6, target_7, target_8, target_9)
and not func_1(verr_1959, target_4)
and func_3(func, target_3)
and func_4(vdev_1958, target_10, target_4)
and func_5(vdev_1958, target_5)
and func_6(vdev_1958, vnet_1954, target_6)
and func_7(verr_1959, target_11, target_7)
and func_8(vdev_1958, vname_1998, target_8)
and func_9(vnet_1954, target_9)
and func_10(func, target_10)
and func_11(verr_1959, target_7, target_11)
and vdev_1958.getType().hasName("net_device *")
and verr_1959.getType().hasName("int")
and vname_1998.getType().hasName("char *")
and vnet_1954.getType().hasName("net *")
and vdev_1958.(LocalVariable).getFunction() = func
and verr_1959.(LocalVariable).getFunction() = func
and vname_1998.(LocalVariable).getFunction() = func
and vnet_1954.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
