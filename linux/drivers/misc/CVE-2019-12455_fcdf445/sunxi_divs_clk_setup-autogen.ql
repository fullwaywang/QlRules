/**
 * @name linux-fcdf445ff42f036d22178b49cf64e92d527c1330-sunxi_divs_clk_setup
 * @id cpp/linux/fcdf445ff42f036d22178b49cf64e92d527c1330/sunxi-divs-clk-setup
 * @description linux-fcdf445ff42f036d22178b49cf64e92d527c1330-drivers/clk/sunxi/clk-sunxi.c-sunxi_divs_clk_setup CVE-2019-12455
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vderived_name_965, VariableAccess target_1, ExprStmt target_2, ExprStmt target_3) {
	exists(IfStmt target_0 |
		target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getTarget()=vderived_name_965
		and target_0.getThen().(ReturnStmt).getExpr().(Literal).getValue()="0"
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation())
		and target_0.getCondition().(NotExpr).getOperand().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getRValue().(VariableAccess).getLocation()))
}

predicate func_1(Variable vendp_984, BlockStmt target_4, VariableAccess target_1) {
		target_1.getTarget()=vendp_984
		and target_1.getParent().(IfStmt).getThen()=target_4
}

predicate func_2(Variable vderived_name_965, Variable vendp_984, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vderived_name_965
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("kstrndup")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("const char *")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=vendp_984
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerArithmeticOperation).getRightOperand().(VariableAccess).getTarget().getType().hasName("const char *")
		and target_2.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(BitwiseOrExpr).getValue()="3264"
}

predicate func_3(Variable vderived_name_965, ExprStmt target_3) {
		target_3.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getTarget().getName()="name"
		and target_3.getExpr().(AssignExpr).getLValue().(ValueFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("factors_data")
		and target_3.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget()=vderived_name_965
}

predicate func_4(Variable vderived_name_965, Variable vendp_984, BlockStmt target_4) {
		target_4.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vderived_name_965
		and target_4.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("kstrndup")
		and target_4.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("const char *")
		and target_4.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerArithmeticOperation).getLeftOperand().(VariableAccess).getTarget()=vendp_984
		and target_4.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(PointerArithmeticOperation).getRightOperand().(VariableAccess).getTarget().getType().hasName("const char *")
		and target_4.getStmt(0).(ExprStmt).getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(BitwiseOrExpr).getValue()="3264"
}

from Function func, Variable vderived_name_965, Variable vendp_984, VariableAccess target_1, ExprStmt target_2, ExprStmt target_3, BlockStmt target_4
where
not func_0(vderived_name_965, target_1, target_2, target_3)
and func_1(vendp_984, target_4, target_1)
and func_2(vderived_name_965, vendp_984, target_2)
and func_3(vderived_name_965, target_3)
and func_4(vderived_name_965, vendp_984, target_4)
and vderived_name_965.getType().hasName("char *")
and vendp_984.getType().hasName("char *")
and vderived_name_965.(LocalVariable).getFunction() = func
and vendp_984.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
