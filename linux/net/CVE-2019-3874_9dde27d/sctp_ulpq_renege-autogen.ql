/**
 * @name linux-9dde27de3e5efa0d032f3c891a0ca833a0d31911-sctp_ulpq_renege
 * @id cpp/linux/9dde27de3e5efa0d032f3c891a0ca833a0d31911/sctp-ulpq-renege
 * @description linux-9dde27de3e5efa0d032f3c891a0ca833a0d31911-net/sctp/ulpqueue.c-sctp_ulpq_renege CVE-2019-3874
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vchunk_1091, Variable vasoc_1094, Variable vneeded_1096, BlockStmt target_2, PointerFieldAccess target_3, FunctionCall target_4, ValueFieldAccess target_5, ValueFieldAccess target_6, SubExpr target_7, RelationalOperation target_1) {
	exists(LogicalAndExpr target_0 |
		target_0.getAnOperand().(FunctionCall).getTarget().hasName("sk_rmem_schedule")
		and target_0.getAnOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getTarget().getName()="sk"
		and target_0.getAnOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="base"
		and target_0.getAnOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vasoc_1094
		and target_0.getAnOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getTarget().getName()="skb"
		and target_0.getAnOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vchunk_1091
		and target_0.getAnOperand().(FunctionCall).getArgument(2).(VariableAccess).getTarget()=vneeded_1096
		and target_0.getAnOperand() instanceof RelationalOperation
		and target_0.getParent().(IfStmt).getThen()=target_2
		and target_3.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getAnOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_0.getAnOperand().(FunctionCall).getArgument(1).(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_4.getArgument(1).(VariableAccess).getLocation())
		and target_5.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getAnOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_0.getAnOperand().(FunctionCall).getArgument(0).(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_6.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
		and target_7.getLeftOperand().(VariableAccess).getLocation().isBefore(target_0.getAnOperand().(FunctionCall).getArgument(2).(VariableAccess).getLocation())
		and target_0.getAnOperand().(FunctionCall).getArgument(2).(VariableAccess).getLocation().isBefore(target_1.getLesserOperand().(VariableAccess).getLocation()))
}

predicate func_1(Variable vfreed_1095, Variable vneeded_1096, BlockStmt target_2, RelationalOperation target_1) {
		 (target_1 instanceof GEExpr or target_1 instanceof LEExpr)
		and target_1.getGreaterOperand().(VariableAccess).getTarget()=vfreed_1095
		and target_1.getLesserOperand().(VariableAccess).getTarget()=vneeded_1096
		and target_1.getParent().(IfStmt).getThen()=target_2
}

predicate func_2(Function func, BlockStmt target_2) {
		target_2.getStmt(1).(IfStmt).getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getStmt(1).(IfStmt).getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="0"
		and target_2.getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("sctp_ulpq_partial_delivery")
		and target_2.getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("sctp_ulpq *")
		and target_2.getStmt(1).(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("gfp_t")
		and target_2.getStmt(1).(IfStmt).getElse().(IfStmt).getCondition().(EqualityOperation).getAnOperand().(VariableAccess).getTarget().getType().hasName("int")
		and target_2.getStmt(1).(IfStmt).getElse().(IfStmt).getCondition().(EqualityOperation).getAnOperand().(Literal).getValue()="1"
		and target_2.getStmt(1).(IfStmt).getElse().(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("sctp_ulpq_reasm_drain")
		and target_2.getStmt(1).(IfStmt).getElse().(IfStmt).getThen().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("sctp_ulpq *")
		and target_2.getEnclosingFunction() = func
}

predicate func_3(Parameter vchunk_1091, PointerFieldAccess target_3) {
		target_3.getTarget().getName()="length"
		and target_3.getQualifier().(PointerFieldAccess).getTarget().getName()="chunk_hdr"
		and target_3.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vchunk_1091
}

predicate func_4(Parameter vchunk_1091, FunctionCall target_4) {
		target_4.getTarget().hasName("sctp_ulpq_tail_data")
		and target_4.getArgument(0).(VariableAccess).getTarget().getType().hasName("sctp_ulpq *")
		and target_4.getArgument(1).(VariableAccess).getTarget()=vchunk_1091
		and target_4.getArgument(2).(VariableAccess).getTarget().getType().hasName("gfp_t")
}

predicate func_5(Variable vasoc_1094, ValueFieldAccess target_5) {
		target_5.getTarget().getName()="sk"
		and target_5.getQualifier().(PointerFieldAccess).getTarget().getName()="base"
		and target_5.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vasoc_1094
}

predicate func_6(Variable vasoc_1094, ValueFieldAccess target_6) {
		target_6.getTarget().getName()="sk"
		and target_6.getQualifier().(PointerFieldAccess).getTarget().getName()="base"
		and target_6.getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vasoc_1094
}

predicate func_7(Variable vfreed_1095, Variable vneeded_1096, SubExpr target_7) {
		target_7.getLeftOperand().(VariableAccess).getTarget()=vneeded_1096
		and target_7.getRightOperand().(VariableAccess).getTarget()=vfreed_1095
}

from Function func, Parameter vchunk_1091, Variable vasoc_1094, Variable vfreed_1095, Variable vneeded_1096, RelationalOperation target_1, BlockStmt target_2, PointerFieldAccess target_3, FunctionCall target_4, ValueFieldAccess target_5, ValueFieldAccess target_6, SubExpr target_7
where
not func_0(vchunk_1091, vasoc_1094, vneeded_1096, target_2, target_3, target_4, target_5, target_6, target_7, target_1)
and func_1(vfreed_1095, vneeded_1096, target_2, target_1)
and func_2(func, target_2)
and func_3(vchunk_1091, target_3)
and func_4(vchunk_1091, target_4)
and func_5(vasoc_1094, target_5)
and func_6(vasoc_1094, target_6)
and func_7(vfreed_1095, vneeded_1096, target_7)
and vchunk_1091.getType().hasName("sctp_chunk *")
and vasoc_1094.getType().hasName("sctp_association *")
and vfreed_1095.getType().hasName("__u32")
and vneeded_1096.getType().hasName("__u16")
and vchunk_1091.getFunction() = func
and vasoc_1094.(LocalVariable).getFunction() = func
and vfreed_1095.(LocalVariable).getFunction() = func
and vneeded_1096.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
