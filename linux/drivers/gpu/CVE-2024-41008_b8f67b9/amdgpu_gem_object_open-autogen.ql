/**
 * @name linux-b8f67b9ddf4f8fe6dd536590712b5912ad78f99c-amdgpu_gem_object_open
 * @id cpp/linux/b8f67b9ddf4f8fe6dd536590712b5912ad78f99c/amdgpu-gem-object-open
 * @description linux-b8f67b9ddf4f8fe6dd536590712b5912ad78f99c-drivers/gpu/drm/amd/amdgpu/amdgpu_gem.c-amdgpu_gem_object_open CVE-2024-41008
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Function func, StringLiteral target_0) {
	target_0.getValue()="amdgpu: %d: validate_and_fence failed: %d\n"
	and not target_0.getValue()="amdgpu: validate_and_fence failed: %d\n"
	and target_0.getEnclosingFunction() = func
}

predicate func_1(Function func, StringLiteral target_1) {
	target_1.getValue()="amdgpu: %d: validate_and_fence failed: %d\n"
	and not target_1.getValue()="amdgpu: validate_and_fence failed: %d\n"
	and target_1.getEnclosingFunction() = func
}

predicate func_2(ExprStmt target_5, Function func) {
exists(IfStmt target_2 |
	exists(BlockStmt obj_0 | obj_0=target_2.getThen() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(StmtExpr obj_2 | obj_2=obj_1.getExpr() |
				exists(BlockStmt obj_3 | obj_3=obj_2.getStmt() |
					obj_3.getStmt(0).(DoStmt).getCondition() instanceof Literal
					and obj_3.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("_dev_warn")
				)
			)
		)
		and exists(ExprStmt obj_4 | obj_4=obj_0.getStmt(1) |
			exists(FunctionCall obj_5 | obj_5=obj_4.getExpr() |
				obj_5.getTarget().hasName("amdgpu_vm_put_task_info")
				and obj_5.getArgument(0).(VariableAccess).getType().hasName("amdgpu_task_info *")
			)
		)
	)
	and target_2.getCondition().(VariableAccess).getType().hasName("amdgpu_task_info *")
	and target_2.getLocation().isBefore(target_5.getLocation())
	and target_2.getEnclosingFunction() = func
)
}

predicate func_3(Variable vvm_167, VariableAccess target_3) {
	exists(PointerFieldAccess obj_0 | obj_0=target_3.getParent() |
		exists(ValueFieldAccess obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getParent() |
				exists(ExprStmt obj_3 | obj_3=obj_2.getParent() |
					exists(FunctionCall obj_4 | obj_4=obj_3.getExpr() |
						exists(PointerFieldAccess obj_5 | obj_5=obj_4.getArgument(0) |
							obj_5.getTarget().getName()="dev"
							and obj_5.getQualifier().(VariableAccess).getTarget().getType().hasName("amdgpu_device *")
						)
						and obj_4.getTarget().hasName("_dev_warn")
						and obj_4.getArgument(1) instanceof StringLiteral
						and obj_4.getArgument(2) instanceof ValueFieldAccess
						and obj_4.getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
					)
				)
			)
		)
	)
	and target_3.getTarget()=vvm_167
}

predicate func_4(Variable vvm_167, ValueFieldAccess target_4) {
	exists(PointerFieldAccess obj_0 | obj_0=target_4.getQualifier() |
		obj_0.getTarget().getName()="task_info"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vvm_167
	)
	and exists(FunctionCall obj_1 | obj_1=target_4.getParent() |
		exists(ExprStmt obj_2 | obj_2=obj_1.getParent() |
			exists(FunctionCall obj_3 | obj_3=obj_2.getExpr() |
				exists(PointerFieldAccess obj_4 | obj_4=obj_3.getArgument(0) |
					obj_4.getTarget().getName()="dev"
					and obj_4.getQualifier().(VariableAccess).getTarget().getType().hasName("amdgpu_device *")
				)
				and obj_3.getTarget().hasName("_dev_warn")
				and obj_3.getArgument(1) instanceof StringLiteral
				and obj_3.getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
			)
		)
	)
	and target_4.getTarget().getName()="pid"
}

predicate func_5(Function func, ExprStmt target_5) {
	exists(FunctionCall obj_0 | obj_0=target_5.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getArgument(0) |
			obj_1.getTarget().getName()="dev"
			and obj_1.getQualifier().(VariableAccess).getTarget().getType().hasName("amdgpu_device *")
		)
		and obj_0.getTarget().hasName("_dev_warn")
		and obj_0.getArgument(1) instanceof StringLiteral
		and obj_0.getArgument(2) instanceof ValueFieldAccess
		and obj_0.getArgument(3).(VariableAccess).getTarget().getType().hasName("int")
	)
	and target_5.getEnclosingFunction() = func
}

from Function func, Variable vvm_167, StringLiteral target_0, StringLiteral target_1, VariableAccess target_3, ValueFieldAccess target_4, ExprStmt target_5
where
func_0(func, target_0)
and func_1(func, target_1)
and not func_2(target_5, func)
and func_3(vvm_167, target_3)
and func_4(vvm_167, target_4)
and func_5(func, target_5)
and vvm_167.getType().hasName("amdgpu_vm *")
and vvm_167.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
