/**
 * @name linux-9d2231c5d74e13b2a0546fee6737ee4446017903-copy_page_to_iter_pipe
 * @id cpp/linux/9d2231c5d74e13b2a0546fee6737ee4446017903/copy-page-to-iter-pipe
 * @description linux-9d2231c5d74e13b2a0546fee6737ee4446017903-lib/iov_iter.c-copy_page_to_iter_pipe CVE-2022-0847
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vbuf_386, ExprStmt target_1, ExprStmt target_2, ExprStmt target_3, Function func) {
exists(ExprStmt target_0 |
	target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="flags"
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbuf_386
	and target_0.getExpr().(AssignExpr).getRValue().(Literal).getValue()="0"
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(Function func, ExprStmt target_1) {
	target_1.getExpr().(FunctionCall).getTarget().hasName("get_page")
	and target_1.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("page *")
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vbuf_386, ExprStmt target_2) {
	target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="ops"
	and target_2.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbuf_386
	and target_2.getExpr().(AssignExpr).getRValue().(AddressOfExpr).getOperand().(VariableAccess).getTarget().getType().hasName("const pipe_buf_operations")
}

predicate func_3(Variable vbuf_386, ExprStmt target_3) {
	target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getTarget().getName()="page"
	and target_3.getExpr().(AssignExpr).getLValue().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vbuf_386
	and target_3.getExpr().(AssignExpr).getRValue().(VariableAccess).getTarget().getType().hasName("page *")
}

from Function func, Variable vbuf_386, ExprStmt target_1, ExprStmt target_2, ExprStmt target_3
where
not func_0(vbuf_386, target_1, target_2, target_3, func)
and func_1(func, target_1)
and func_2(vbuf_386, target_2)
and func_3(vbuf_386, target_3)
and vbuf_386.getType().hasName("pipe_buffer *")
and vbuf_386.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
