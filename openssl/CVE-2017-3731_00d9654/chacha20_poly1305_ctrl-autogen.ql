/**
 * @name openssl-00d965474b22b54e4275232bc71ee0c699c5cd21-chacha20_poly1305_ctrl
 * @id cpp/openssl/00d965474b22b54e4275232bc71ee0c699c5cd21/chacha20-poly1305-ctrl
 * @description openssl-00d965474b22b54e4275232bc71ee0c699c5cd21-crypto/evp/e_chacha20_poly1305.c-chacha20_poly1305_ctrl CVE-2017-3731
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vlen_395, NotExpr target_1, ExprStmt target_2, ExprStmt target_3) {
	exists(IfStmt target_0 |
		target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vlen_395
		and target_0.getCondition().(RelationalOperation).getGreaterOperand().(Literal).getValue()="16"
		and target_0.getThen().(ReturnStmt).getExpr().(Literal).getValue()="0"
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
		and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_1
		and target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation())
		and target_0.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getLocation().isBefore(target_3.getExpr().(AssignSubExpr).getLValue().(VariableAccess).getLocation()))
}

predicate func_1(BlockStmt target_4, Function func, NotExpr target_1) {
		target_1.getOperand().(PointerFieldAccess).getTarget().getName()="encrypt"
		and target_1.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget().getType().hasName("EVP_CIPHER_CTX *")
		and target_1.getParent().(IfStmt).getThen()=target_4
		and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vlen_395, ExprStmt target_2) {
		target_2.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget()=vlen_395
		and target_2.getExpr().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getLeftOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("unsigned char *")
		and target_2.getExpr().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getLeftOperand().(ArrayExpr).getArrayOffset().(SubExpr).getValue()="11"
		and target_2.getExpr().(AssignExpr).getRValue().(BitwiseOrExpr).getLeftOperand().(BinaryBitwiseOperation).getRightOperand().(Literal).getValue()="8"
		and target_2.getExpr().(AssignExpr).getRValue().(BitwiseOrExpr).getRightOperand().(ArrayExpr).getArrayBase().(VariableAccess).getTarget().getType().hasName("unsigned char *")
		and target_2.getExpr().(AssignExpr).getRValue().(BitwiseOrExpr).getRightOperand().(ArrayExpr).getArrayOffset().(SubExpr).getValue()="12"
}

predicate func_3(Variable vlen_395, ExprStmt target_3) {
		target_3.getExpr().(AssignSubExpr).getLValue().(VariableAccess).getTarget()=vlen_395
		and target_3.getExpr().(AssignSubExpr).getRValue().(Literal).getValue()="16"
}

predicate func_4(Variable vlen_395, BlockStmt target_4) {
		target_4.getStmt(0).(ExprStmt).getExpr().(AssignSubExpr).getLValue().(VariableAccess).getTarget()=vlen_395
		and target_4.getStmt(0).(ExprStmt).getExpr().(AssignSubExpr).getRValue().(Literal).getValue()="16"
		and target_4.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("memcpy")
		and target_4.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("unsigned char[16]")
		and target_4.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("unsigned char *")
		and target_4.getStmt(1).(ExprStmt).getExpr().(FunctionCall).getArgument(2).(SubExpr).getValue()="11"
}

from Function func, Variable vlen_395, NotExpr target_1, ExprStmt target_2, ExprStmt target_3, BlockStmt target_4
where
not func_0(vlen_395, target_1, target_2, target_3)
and func_1(target_4, func, target_1)
and func_2(vlen_395, target_2)
and func_3(vlen_395, target_3)
and func_4(vlen_395, target_4)
and vlen_395.getType().hasName("unsigned int")
and vlen_395.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
