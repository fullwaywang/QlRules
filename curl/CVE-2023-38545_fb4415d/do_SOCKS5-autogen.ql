/**
 * @name curl-fb4415d8aee6c1-do_SOCKS5
 * @id cpp/curl/fb4415d8aee6c1/do-socks5
 * @description curl-fb4415d8aee6c1-lib/socks.c-do_SOCKS5 CVE-2023-38545
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vdata_550, Variable vhostname_len_575, FunctionCall target_0) {
		target_0.getTarget().hasName("Curl_infof")
		and not target_0.getTarget().hasName("Curl_failf")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vdata_550
		and target_0.getArgument(1).(StringLiteral).getValue()="SOCKS5: server resolving disabled for hostnames of length > 255 [actual len=%zu]"
		and target_0.getArgument(2).(VariableAccess).getTarget()=vhostname_len_575
}

predicate func_2(LogicalAndExpr target_7, Function func) {
	exists(ReturnStmt target_2 |
		target_2.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(1)=target_2
		and target_2.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
		and target_2.getEnclosingFunction() = func)
}

predicate func_3(Parameter vdata_550, ExprStmt target_8, LogicalAndExpr target_3) {
		target_3.getAnOperand().(VariableAccess).getTarget()=vdata_550
		and target_3.getAnOperand().(ValueFieldAccess).getTarget().getName()="verbose"
		and target_3.getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getTarget().getName()="set"
		and target_3.getAnOperand().(ValueFieldAccess).getQualifier().(PointerFieldAccess).getQualifier().(VariableAccess).getTarget()=vdata_550
		and target_3.getParent().(IfStmt).getThen()=target_8
}

predicate func_4(LogicalAndExpr target_7, Function func, DoStmt target_4) {
		target_4.getCondition().(Literal).getValue()="0"
		and target_4.getStmt().(BlockStmt).getStmt(0).(IfStmt).getCondition() instanceof LogicalAndExpr
		and target_4.getStmt().(BlockStmt).getStmt(0).(IfStmt).getThen().(ExprStmt).getExpr() instanceof FunctionCall
		and target_4.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_7
		and target_4.getEnclosingFunction() = func
}

/*predicate func_5(Function func, IfStmt target_5) {
		target_5.getCondition() instanceof LogicalAndExpr
		and target_5.getThen().(ExprStmt).getExpr() instanceof FunctionCall
		and target_5.getEnclosingFunction() = func
}

*/
predicate func_6(Variable vsocks5_resolve_local_573, AssignExpr target_6) {
		target_6.getLValue().(VariableAccess).getTarget()=vsocks5_resolve_local_573
		and target_6.getRValue().(Literal).getValue()="1"
}

predicate func_7(Variable vsocks5_resolve_local_573, Variable vhostname_len_575, LogicalAndExpr target_7) {
		target_7.getAnOperand().(NotExpr).getOperand().(VariableAccess).getTarget()=vsocks5_resolve_local_573
		and target_7.getAnOperand().(RelationalOperation).getGreaterOperand().(VariableAccess).getTarget()=vhostname_len_575
		and target_7.getAnOperand().(RelationalOperation).getLesserOperand().(Literal).getValue()="255"
}

predicate func_8(ExprStmt target_8) {
		target_8.getExpr() instanceof FunctionCall
}

from Function func, Parameter vdata_550, Variable vsocks5_resolve_local_573, Variable vhostname_len_575, FunctionCall target_0, LogicalAndExpr target_3, DoStmt target_4, AssignExpr target_6, LogicalAndExpr target_7, ExprStmt target_8
where
func_0(vdata_550, vhostname_len_575, target_0)
and not func_2(target_7, func)
and func_3(vdata_550, target_8, target_3)
and func_4(target_7, func, target_4)
and func_6(vsocks5_resolve_local_573, target_6)
and func_7(vsocks5_resolve_local_573, vhostname_len_575, target_7)
and func_8(target_8)
and vdata_550.getType().hasName("Curl_easy *")
and vsocks5_resolve_local_573.getType().hasName("bool")
and vhostname_len_575.getType().hasName("const size_t")
and vdata_550.getFunction() = func
and vsocks5_resolve_local_573.(LocalVariable).getFunction() = func
and vhostname_len_575.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
