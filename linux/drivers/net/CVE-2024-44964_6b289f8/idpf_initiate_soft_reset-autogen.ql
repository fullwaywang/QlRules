/**
 * @name linux-6b289f8d91537ec1e4f9c7b38b31b90d93b1419b-idpf_initiate_soft_reset
 * @id cpp/linux/6b289f8d91537ec1e4f9c7b38b31b90d93b1419b/idpf-initiate-soft-reset
 * @description linux-6b289f8d91537ec1e4f9c7b38b31b90d93b1419b-drivers/net/ethernet/intel/idpf/idpf_lib.c-idpf_initiate_soft_reset CVE-2024-44964
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vnew_vport_1857, Variable verr_1858, FunctionCall target_0) {
	exists(AssignExpr obj_0 | obj_0=target_0.getParent() |
		obj_0.getRValue() = target_0
		and obj_0.getLValue().(VariableAccess).getTarget()=verr_1858
	)
	and target_0.getTarget().hasName("idpf_vport_queues_alloc")
	and not target_0.getTarget().hasName("idpf_vport_open")
	and target_0.getArgument(0).(VariableAccess).getTarget()=vnew_vport_1857
}

predicate func_2(Variable vnew_vport_1857, ExprStmt target_13, ExprStmt target_14, VariableAccess target_2) {
	target_2.getTarget()=vnew_vport_1857
	and target_2.getParent().(FunctionCall).getParent().(ExprStmt).getExpr() instanceof FunctionCall
	and target_13.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation().isBefore(target_2.getLocation())
	and target_2.getLocation().isBefore(target_14.getExpr().(FunctionCall).getArgument(0).(VariableAccess).getLocation())
}

predicate func_3(Variable verr_1858, IfStmt target_15, IfStmt target_3) {
	target_3.getCondition().(VariableAccess).getTarget()=verr_1858
	and target_3.getThen().(GotoStmt).getName() ="free_vport"
	and target_3.getLocation().isBefore(target_15.getLocation())
}

predicate func_4(Variable verr_1858, IfStmt target_16, IfStmt target_4) {
	target_4.getCondition().(VariableAccess).getTarget()=verr_1858
	and target_4.getThen() instanceof GotoStmt
	and target_4.getLocation().isBefore(target_16.getLocation())
}

predicate func_5(Parameter vvport_1851) {
exists(FunctionCall target_5 |
	exists(PointerFieldAccess obj_0 | obj_0=target_5.getArgument(1) |
		obj_0.getTarget().getName()="num_txq"
		and obj_0.getQualifier().(VariableAccess).getType().hasName("idpf_vport *")
	)
	and exists(PointerFieldAccess obj_1 | obj_1=target_5.getArgument(2) |
		obj_1.getTarget().getName()="num_complq"
		and obj_1.getQualifier().(VariableAccess).getTarget()=vvport_1851
	)
	and exists(PointerFieldAccess obj_2 | obj_2=target_5.getArgument(3) |
		obj_2.getTarget().getName()="num_rxq"
		and obj_2.getQualifier().(VariableAccess).getTarget()=vvport_1851
	)
	and exists(PointerFieldAccess obj_3 | obj_3=target_5.getArgument(4) |
		obj_3.getTarget().getName()="num_bufq"
		and obj_3.getQualifier().(VariableAccess).getTarget()=vvport_1851
	)
	and target_5.getTarget().hasName("idpf_send_add_queues_msg")
	and target_5.getArgument(0).(VariableAccess).getTarget()=vvport_1851
)
}

predicate func_6(Variable vcurrent_state_1855, RelationalOperation target_17, EqualityOperation target_18) {
exists(EqualityOperation target_6 |
	target_6.getLeftOperand().(VariableAccess).getTarget()=vcurrent_state_1855
	and target_6.getParent().(IfStmt).getThen() instanceof GotoStmt
	and target_17.getLesserOperand().(VariableAccess).getLocation().isBefore(target_6.getLeftOperand().(VariableAccess).getLocation())
	and target_6.getLeftOperand().(VariableAccess).getLocation().isBefore(target_18.getLeftOperand().(VariableAccess).getLocation())
)
}

predicate func_8(Parameter vvport_1851, VariableAccess target_8) {
	exists(FunctionCall obj_0 | obj_0=target_8.getParent() |
		exists(AssignExpr obj_1 | obj_1=obj_0.getParent() |
			exists(FunctionCall obj_2 | obj_2=obj_1.getRValue() |
				obj_2.getTarget().hasName("idpf_vport_open")
				and obj_2.getArgument(1) instanceof EnumConstantAccess
			)
		)
	)
	and target_8.getTarget()=vvport_1851
}

predicate func_9(Variable verr_1858, ExprStmt target_19, VariableAccess target_9) {
	target_9.getTarget()=verr_1858
	and target_9.getParent().(IfStmt).getThen() instanceof GotoStmt
	and target_19.getExpr().(AssignExpr).getLValue().(VariableAccess).getLocation().isBefore(target_9.getLocation())
}

predicate func_10(VariableAccess target_9, Function func, GotoStmt target_10) {
	target_10.getName() ="err_reset"
	and target_10.getParent().(IfStmt).getCondition()=target_9
	and target_10.getEnclosingFunction() = func
}

predicate func_11(Parameter vvport_1851, Variable verr_1858, AssignExpr target_11) {
	exists(FunctionCall obj_0 | obj_0=target_11.getRValue() |
		obj_0.getTarget().hasName("idpf_vport_open")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vvport_1851
		and obj_0.getArgument(1) instanceof EnumConstantAccess
	)
	and target_11.getLValue().(VariableAccess).getTarget()=verr_1858
}

predicate func_12(Variable vnew_vport_1857, FunctionCall target_12) {
	target_12.getTarget().hasName("idpf_vport_queues_rel")
	and target_12.getArgument(0).(VariableAccess).getTarget()=vnew_vport_1857
}

predicate func_13(Variable vnew_vport_1857, Function func, ExprStmt target_13) {
	exists(FunctionCall obj_0 | obj_0=target_13.getExpr() |
		obj_0.getTarget().hasName("kfree")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vnew_vport_1857
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_13
}

predicate func_14(Variable vnew_vport_1857, Function func, ExprStmt target_14) {
	exists(FunctionCall obj_0 | obj_0=target_14.getExpr() |
		obj_0.getTarget().hasName("kfree")
		and obj_0.getArgument(0).(VariableAccess).getTarget()=vnew_vport_1857
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_14
}

predicate func_15(Parameter vvport_1851, Variable vcurrent_state_1855, IfStmt target_15) {
	exists(BlockStmt obj_0 | obj_0=target_15.getThen() |
		exists(ExprStmt obj_1 | obj_1=obj_0.getStmt(0) |
			exists(FunctionCall obj_2 | obj_2=obj_1.getExpr() |
				obj_2.getTarget().hasName("idpf_send_delete_queues_msg")
				and obj_2.getArgument(0).(VariableAccess).getTarget()=vvport_1851
			)
		)
	)
	and exists(BlockStmt obj_3 | obj_3=target_15.getElse() |
		exists(ExprStmt obj_4 | obj_4=obj_3.getStmt(0) |
			exists(FunctionCall obj_5 | obj_5=obj_4.getExpr() |
				exists(PointerFieldAccess obj_6 | obj_6=obj_5.getArgument(1) |
					obj_6.getTarget().getName()="flags"
					and obj_6.getQualifier().(VariableAccess).getTarget()=vvport_1851
				)
				and obj_5.getTarget().hasName("set_bit")
			)
		)
		and exists(ExprStmt obj_7 | obj_7=obj_3.getStmt(1) |
			exists(FunctionCall obj_8 | obj_8=obj_7.getExpr() |
				obj_8.getTarget().hasName("idpf_vport_stop")
				and obj_8.getArgument(0).(VariableAccess).getTarget()=vvport_1851
			)
		)
	)
	and target_15.getCondition().(RelationalOperation).getLesserOperand().(VariableAccess).getTarget()=vcurrent_state_1855
}

predicate func_16(Variable vcurrent_state_1855, IfStmt target_16) {
	target_16.getCondition().(EqualityOperation).getLeftOperand().(VariableAccess).getTarget()=vcurrent_state_1855
	and target_16.getThen().(ExprStmt).getExpr() instanceof AssignExpr
}

predicate func_17(Variable vcurrent_state_1855, RelationalOperation target_17) {
	 (target_17 instanceof GEExpr or target_17 instanceof LEExpr)
	and target_17.getLesserOperand().(VariableAccess).getTarget()=vcurrent_state_1855
}

predicate func_18(Variable vcurrent_state_1855, EqualityOperation target_18) {
	target_18.getLeftOperand().(VariableAccess).getTarget()=vcurrent_state_1855
}

predicate func_19(Parameter vvport_1851, Variable verr_1858, ExprStmt target_19) {
	exists(AssignExpr obj_0 | obj_0=target_19.getExpr() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getRValue() |
			obj_1.getTarget().hasName("idpf_set_real_num_queues")
			and obj_1.getArgument(0).(VariableAccess).getTarget()=vvport_1851
		)
		and obj_0.getLValue().(VariableAccess).getTarget()=verr_1858
	)
}

from Function func, Parameter vvport_1851, Variable vcurrent_state_1855, Variable vnew_vport_1857, Variable verr_1858, FunctionCall target_0, VariableAccess target_2, IfStmt target_3, IfStmt target_4, VariableAccess target_8, VariableAccess target_9, GotoStmt target_10, AssignExpr target_11, FunctionCall target_12, ExprStmt target_13, ExprStmt target_14, IfStmt target_15, IfStmt target_16, RelationalOperation target_17, EqualityOperation target_18, ExprStmt target_19
where
func_0(vnew_vport_1857, verr_1858, target_0)
and func_2(vnew_vport_1857, target_13, target_14, target_2)
and func_3(verr_1858, target_15, target_3)
and func_4(verr_1858, target_16, target_4)
and not func_5(vvport_1851)
and not func_6(vcurrent_state_1855, target_17, target_18)
and func_8(vvport_1851, target_8)
and func_9(verr_1858, target_19, target_9)
and func_10(target_9, func, target_10)
and func_11(vvport_1851, verr_1858, target_11)
and func_12(vnew_vport_1857, target_12)
and func_13(vnew_vport_1857, func, target_13)
and func_14(vnew_vport_1857, func, target_14)
and func_15(vvport_1851, vcurrent_state_1855, target_15)
and func_16(vcurrent_state_1855, target_16)
and func_17(vcurrent_state_1855, target_17)
and func_18(vcurrent_state_1855, target_18)
and func_19(vvport_1851, verr_1858, target_19)
and vvport_1851.getType().hasName("idpf_vport *")
and vcurrent_state_1855.getType().hasName("idpf_vport_state")
and vnew_vport_1857.getType().hasName("idpf_vport *")
and verr_1858.getType().hasName("int")
and vvport_1851.getFunction() = func
and vcurrent_state_1855.(LocalVariable).getFunction() = func
and vnew_vport_1857.(LocalVariable).getFunction() = func
and verr_1858.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
