/**
 * @name linux-9e20d028d8d1deb1e7fed18f22ffc01669cf3237-vmw_fence_obj_destroy
 * @id cpp/linux/9e20d028d8d1deb1e7fed18f22ffc01669cf3237/vmw-fence-obj-destroy
 * @description linux-9e20d028d8d1deb1e7fed18f22ffc01669cf3237-drivers/gpu/drm/vmwgfx/vmwgfx_fence.c-vmw_fence_obj_destroy CVE-2024-43863
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vfence_128, ExprStmt target_1, FunctionCall target_5, AddressOfExpr target_6, Function func) {
exists(IfStmt target_0 |
	exists(NotExpr obj_0 | obj_0=target_0.getCondition() |
		exists(FunctionCall obj_1 | obj_1=obj_0.getOperand() |
			exists(AddressOfExpr obj_2 | obj_2=obj_1.getArgument(0) |
				exists(PointerFieldAccess obj_3 | obj_3=obj_2.getOperand() |
					obj_3.getTarget().getName()="head"
					and obj_3.getQualifier().(VariableAccess).getTarget()=vfence_128
				)
			)
			and obj_1.getTarget().hasName("list_empty")
		)
	)
	and exists(BlockStmt obj_4 | obj_4=target_0.getThen() |
		obj_4.getStmt(0) instanceof ExprStmt
		and obj_4.getStmt(1) instanceof ExprStmt
		and obj_4.getStmt(2) instanceof ExprStmt
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_0
	and target_0.getLocation().isBefore(target_1.getLocation())
	and target_5.getArgument(0).(VariableAccess).getLocation().isBefore(target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
	and target_0.getCondition().(NotExpr).getOperand().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation().isBefore(target_6.getOperand().(PointerFieldAccess).getQualifier().(VariableAccess).getLocation())
)
}

predicate func_1(Variable vfman_131, Function func, ExprStmt target_1) {
	exists(FunctionCall obj_0 | obj_0=target_1.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="lock"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vfman_131
			)
		)
		and obj_0.getTarget().hasName("spin_lock")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
}

predicate func_2(Variable vfence_128, Function func, ExprStmt target_2) {
	exists(FunctionCall obj_0 | obj_0=target_2.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="head"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vfence_128
			)
		)
		and obj_0.getTarget().hasName("list_del_init")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_2
}

predicate func_3(Variable vfman_131, Function func, ExprStmt target_3) {
	exists(FunctionCall obj_0 | obj_0=target_3.getExpr() |
		exists(AddressOfExpr obj_1 | obj_1=obj_0.getArgument(0) |
			exists(PointerFieldAccess obj_2 | obj_2=obj_1.getOperand() |
				obj_2.getTarget().getName()="lock"
				and obj_2.getQualifier().(VariableAccess).getTarget()=vfman_131
			)
		)
		and obj_0.getTarget().hasName("spin_unlock")
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_3
}

predicate func_4(Variable vfman_131, Function func, ExprStmt target_4) {
	exists(PrefixDecrExpr obj_0 | obj_0=target_4.getExpr() |
		exists(PointerFieldAccess obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getTarget().getName()="num_fence_objects"
			and obj_1.getQualifier().(VariableAccess).getTarget()=vfman_131
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
}

predicate func_5(Variable vfence_128, FunctionCall target_5) {
	target_5.getTarget().hasName("fman_from_fence")
	and target_5.getArgument(0).(VariableAccess).getTarget()=vfence_128
}

predicate func_6(Variable vfence_128, AddressOfExpr target_6) {
	exists(PointerFieldAccess obj_0 | obj_0=target_6.getOperand() |
		obj_0.getTarget().getName()="head"
		and obj_0.getQualifier().(VariableAccess).getTarget()=vfence_128
	)
}

from Function func, Variable vfence_128, Variable vfman_131, ExprStmt target_1, ExprStmt target_2, ExprStmt target_3, ExprStmt target_4, FunctionCall target_5, AddressOfExpr target_6
where
not func_0(vfence_128, target_1, target_5, target_6, func)
and func_1(vfman_131, func, target_1)
and func_2(vfence_128, func, target_2)
and func_3(vfman_131, func, target_3)
and func_4(vfman_131, func, target_4)
and func_5(vfence_128, target_5)
and func_6(vfence_128, target_6)
and vfence_128.getType().hasName("vmw_fence_obj *")
and vfman_131.getType().hasName("vmw_fence_manager *")
and vfence_128.(LocalVariable).getFunction() = func
and vfman_131.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
