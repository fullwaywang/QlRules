/**
 * @name linux-b6a7719aedd7e5c0f2df7641aa47386111682df4-iptunnel_xmit
 * @id cpp/linux/b6a7719aedd7e5c0f2df7641aa47386111682df4/iptunnel-xmit
 * @description linux-b6a7719aedd7e5c0f2df7641aa47386111682df4-net/ipv4/ip_tunnel_core.c-iptunnel_xmit CVE-2019-10638
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Parameter vsk_49, ExprStmt target_1) {
	exists(FunctionCall target_0 |
		target_0.getTarget().hasName("sock_net")
		and target_0.getArgument(0).(VariableAccess).getTarget()=vsk_49
		and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("__ip_select_ident")
		and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(0).(VariableAccess).getTarget().getType().hasName("iphdr *")
		and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(ConditionalExpr).getCondition().(PointerDereferenceExpr).getOperand().(AddressOfExpr).getOperand().(PointerFieldAccess).getTarget().getName()="gso_segs"
		and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(ConditionalExpr).getCondition().(PointerDereferenceExpr).getOperand().(AddressOfExpr).getOperand().(PointerFieldAccess).getQualifier().(FunctionCall).getTarget().hasName("skb_end_pointer")
		and target_0.getParent().(FunctionCall).getParent().(ExprStmt).getExpr().(FunctionCall).getArgument(1).(ConditionalExpr).getElse().(Literal).getValue()="1"
		and target_0.getArgument(0).(VariableAccess).getLocation().isBefore(target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getLocation()))
}

predicate func_1(Parameter vsk_49, ExprStmt target_1) {
		target_1.getExpr().(AssignExpr).getLValue().(VariableAccess).getTarget().getType().hasName("int")
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("ip_local_out_sk")
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(0).(VariableAccess).getTarget()=vsk_49
		and target_1.getExpr().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(VariableAccess).getTarget().getType().hasName("sk_buff *")
}

from Function func, Parameter vsk_49, ExprStmt target_1
where
not func_0(vsk_49, target_1)
and func_1(vsk_49, target_1)
and vsk_49.getType().hasName("sock *")
and vsk_49.getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
