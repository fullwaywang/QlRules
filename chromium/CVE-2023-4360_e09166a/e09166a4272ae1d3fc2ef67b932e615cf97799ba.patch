commit e09166a4272ae1d3fc2ef67b932e615cf97799ba	e09166a4272ae1d3fc2ef67b932e615cf97799ba
Author: Luis Juan Sanchez Padilla <lusanpad@microsoft.com>
Date:   Wed Jul 26 20:16:44 2023 +0000

    Do not show Eye Dropper if the owner frame is not active.
    
    Currently, while the Eye Dropper is dismissed when a window focus change happens, it can still be opened if the parent frame is not focused on the time of invocation. This gives opening to a scenario in which a different Chrome window is focused but no cursor is shown on the screen as the Eye Dropper grid is being rendered behind the focused window. Attackers could use this opportunity to trick the user into clicking different parts of the screen, such as having the user grant unwanted permissions. This change fixes this issue by ensuring that the frame view is focused when the Eye Dropper is shown.
    
    Bug: 1462723
    Change-Id: I5f7ca420f2cedd07ce03b70966b64ad200bd32df
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4720045
    Reviewed-by: Peter Kasting <pkasting@chromium.org>
    Commit-Queue: Peter Kasting <pkasting@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1175644}

diff --git a/chrome/browser/ui/views/eye_dropper/eye_dropper_browsertest.cc b/chrome/browser/ui/views/eye_dropper/eye_dropper_browsertest.cc
index 5c212120001c3..071d2e678e632 100644
--- a/chrome/browser/ui/views/eye_dropper/eye_dropper_browsertest.cc
+++ b/chrome/browser/ui/views/eye_dropper/eye_dropper_browsertest.cc
@@ -13,6 +13,7 @@
 #include "chrome/browser/ui/test/test_browser_ui.h"
 #include "chrome/test/base/ui_test_utils.h"
 #include "content/public/browser/eye_dropper.h"
+#include "content/public/browser/render_widget_host_view.h"
 #include "content/public/common/content_switches.h"
 #include "content/public/test/browser_test.h"
 #include "ui/display/display_switches.h"
@@ -39,6 +40,7 @@ class EyeDropperBrowserTest : public UiBrowserTest,
                                                  ->tab_strip_model()
                                                  ->GetActiveWebContents()
                                                  ->GetPrimaryMainFrame();
+    parent_frame->GetView()->Focus();
     eye_dropper_ = ShowEyeDropper(parent_frame, /*listener=*/nullptr);
 #endif
   }
diff --git a/chrome/browser/ui/views/eye_dropper/eye_dropper_view_aura.cc b/chrome/browser/ui/views/eye_dropper/eye_dropper_view_aura.cc
index c655baa2bb85e..61b5d74377e82 100644
--- a/chrome/browser/ui/views/eye_dropper/eye_dropper_view_aura.cc
+++ b/chrome/browser/ui/views/eye_dropper/eye_dropper_view_aura.cc
@@ -6,6 +6,7 @@
 
 #include "base/memory/raw_ptr.h"
 #include "build/build_config.h"
+#include "content/public/browser/render_widget_host_view.h"
 #include "ui/aura/client/cursor_client.h"
 #include "ui/aura/client/focus_change_observer.h"
 #include "ui/aura/client/focus_client.h"
@@ -148,7 +149,7 @@ float EyeDropperView::GetDiameter() const {
 std::unique_ptr<content::EyeDropper> ShowEyeDropper(
     content::RenderFrameHost* frame,
     content::EyeDropperListener* listener) {
-  return features::IsEyeDropperEnabled()
+  return (features::IsEyeDropperEnabled() && frame->GetView()->HasFocus())
              ? std::make_unique<EyeDropperView>(frame, listener)
              : nullptr;
 }
diff --git a/chrome/browser/ui/views/eye_dropper/eye_dropper_view_aura_browsertest.cc b/chrome/browser/ui/views/eye_dropper/eye_dropper_view_aura_browsertest.cc
index ccb1474c0106e..5e2d8848102c5 100644
--- a/chrome/browser/ui/views/eye_dropper/eye_dropper_view_aura_browsertest.cc
+++ b/chrome/browser/ui/views/eye_dropper/eye_dropper_view_aura_browsertest.cc
@@ -39,3 +39,15 @@ IN_PROC_BROWSER_TEST_F(EyeDropperViewAuraBrowserTest, ActiveChangeCancel) {
   web_contents->GetRenderWidgetHostView()->Hide();
   EXPECT_TRUE(listener.IsCanceled());
 }
+
+IN_PROC_BROWSER_TEST_F(EyeDropperViewAuraBrowserTest, InactiveWindow) {
+  EyeDropperListener listener;
+  ui_test_utils::NavigateToURLBlockUntilNavigationsComplete(
+      browser(), GURL("about:blank"), 1);
+  content::WebContents* web_contents =
+      browser()->tab_strip_model()->GetActiveWebContents();
+  web_contents->GetRenderWidgetHostView()->Hide();
+  std::unique_ptr<content::EyeDropper> eye_dropper =
+      ShowEyeDropper(web_contents->GetPrimaryMainFrame(), &listener);
+  EXPECT_EQ(eye_dropper, nullptr);
+}
