commit dd8d9efe3251e33dfe19fa0163626aa1b35946d0	dd8d9efe3251e33dfe19fa0163626aa1b35946d0
Author: Eugene Zemtsov <eugene@chromium.org>
Date:   Tue Sep 26 08:26:55 2023 +0000

    webcodecs: Stop changing thread number in VpxVideoEncoder on reconfigure
    
    libvpx doesn't support dynamically changing number of working threads.
    That's why we stop adjusting it even if new frame size would suggest
    a different number of threads.
    
    Adding a new test to exerciser this code path.
    
    Bug: 1486441
    Change-Id: I1ed165fc54ef760acd3a4c2c2adf445e1795855b
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4893034
    Reviewed-by: Dale Curtis <dalecurtis@chromium.org>
    Commit-Queue: Eugene Zemtsov <eugene@chromium.org>
    Reviewed-by: Frank Liberato <liberato@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1201403}

diff --git a/media/video/software_video_encoder_test.cc b/media/video/software_video_encoder_test.cc
index b0c357343ca0f..f4136c2acf5c2 100644
--- a/media/video/software_video_encoder_test.cc
+++ b/media/video/software_video_encoder_test.cc
@@ -344,6 +344,7 @@ class SoftwareVideoEncoderTest
 };
 
 class H264VideoEncoderTest : public SoftwareVideoEncoderTest {};
+class VpxVideoEncoderTest : public SoftwareVideoEncoderTest {};
 class SVCVideoEncoderTest : public SoftwareVideoEncoderTest {};
 
 TEST_P(SoftwareVideoEncoderTest, StopCallbackWrapping) {
@@ -752,6 +753,44 @@ TEST_P(SVCVideoEncoderTest, ChangeLayers) {
   EXPECT_EQ(chunks.size(), total_frames_count);
 }
 
+TEST_P(VpxVideoEncoderTest, ReconfigureWithResize) {
+  int outputs_count = 0;
+  VideoEncoder::Options options;
+  options.frame_size = gfx::Size(1024, 1024);
+
+  VideoEncoder::OutputCB output_cb = base::BindLambdaForTesting(
+      [&](VideoEncoderOutput output,
+          absl::optional<VideoEncoder::CodecDescription> desc) {
+        outputs_count++;
+      });
+
+  encoder_->Initialize(profile_, options, /*info_cb=*/base::DoNothing(),
+                       std::move(output_cb), ValidatingStatusCB());
+
+  auto frame0 = CreateFrame(options.frame_size, pixel_format_, {});
+  encoder_->Encode(frame0, VideoEncoder::EncodeOptions(false),
+                   ValidatingStatusCB());
+
+  options.frame_size = gfx::Size(1000, 608);
+  encoder_->ChangeOptions(options, VideoEncoder::OutputCB(),
+                          ValidatingStatusCB());
+
+  auto frame1 = CreateFrame(options.frame_size, pixel_format_, {});
+  encoder_->Encode(frame1, VideoEncoder::EncodeOptions(false),
+                   ValidatingStatusCB());
+
+  options.frame_size = gfx::Size(16, 720);
+  encoder_->ChangeOptions(options, VideoEncoder::OutputCB(),
+                          ValidatingStatusCB());
+
+  auto frame2 = CreateFrame(options.frame_size, pixel_format_, {});
+  encoder_->Encode(frame2, VideoEncoder::EncodeOptions(false),
+                   ValidatingStatusCB(/* quit_run_loop_on_call */ true));
+
+  RunUntilQuit();
+  EXPECT_EQ(outputs_count, 3);
+}
+
 TEST_P(H264VideoEncoderTest, ReconfigureWithResize) {
   VideoEncoder::Options options;
   gfx::Size size1(320, 200), size2(400, 240);
@@ -1116,6 +1155,11 @@ SwVideoTestParams kVpxParams[] = {
     {VideoCodec::kVP8, VP8PROFILE_ANY, PIXEL_FORMAT_I420},
     {VideoCodec::kVP8, VP8PROFILE_ANY, PIXEL_FORMAT_XRGB}};
 
+INSTANTIATE_TEST_SUITE_P(VpxSpecific,
+                         VpxVideoEncoderTest,
+                         ::testing::ValuesIn(kVpxParams),
+                         PrintTestParams);
+
 INSTANTIATE_TEST_SUITE_P(VpxGeneric,
                          SoftwareVideoEncoderTest,
                          ::testing::ValuesIn(kVpxParams),
@@ -1175,6 +1219,7 @@ INSTANTIATE_TEST_SUITE_P(Av1TemporalSvc,
 #endif  // ENABLE_LIBAOM
 
 GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(H264VideoEncoderTest);
+GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(VpxVideoEncoderTest);
 GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(SVCVideoEncoderTest);
 GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(SoftwareVideoEncoderTest);
 
diff --git a/media/video/vpx_video_encoder.cc b/media/video/vpx_video_encoder.cc
index 5209dd5f1e5a7..371bf5040a5ac 100644
--- a/media/video/vpx_video_encoder.cc
+++ b/media/video/vpx_video_encoder.cc
@@ -643,6 +643,10 @@ void VpxVideoEncoder::ChangeOptions(const Options& options,
     return;
   }
 
+  // libvpx doesn't support adjusting the number of threads
+  // midway through an encoding session. More details: crbug.com/1486441
+  new_config.g_threads = codec_config_.g_threads;
+
   status = ReallocateVpxImageIfNeeded(&vpx_image_, vpx_image_.fmt,
                                       options.frame_size.width(),
                                       options.frame_size.height());
