commit 92a908e24a0150eca0c31ada47db7f5db71ffd4c	92a908e24a0150eca0c31ada47db7f5db71ffd4c
Author: Jakob Kummerow <jkummerow@chromium.org>
Date:   Tue Jul 11 13:38:53 2023 +0200

    [wasm-gc] Merge a few fixes
    
    This commit cherry-picks small parts of:
    crrev.com/c/4669597
    crrev.com/c/4675296
    crrev.com/c/4677170
    that are suitable for backmerging.
    
    Bug: chromium:1462951
    Change-Id: I4b93518b896119768834272ab7642afa4cfabaaf
    Reviewed-on: https://chromium-review.googlesource.com/c/v8/v8/+/4677662
    Commit-Queue: Manos Koukoutos <manoskouk@chromium.org>
    Reviewed-by: Manos Koukoutos <manoskouk@chromium.org>
    Commit-Queue: Jakob Kummerow <jkummerow@chromium.org>
    Auto-Submit: Jakob Kummerow <jkummerow@chromium.org>
    Cr-Commit-Position: refs/branch-heads/11.6@{#16}
    Cr-Branched-From: e29c028f391389a7a60ee37097e3ca9e396d6fa4-refs/heads/11.6.189@{#3}
    Cr-Branched-From: 95cbef20e2aa556a1ea75431a48b36c4de6b9934-refs/heads/main@{#88340}

diff --git a/src/wasm/baseline/liftoff-compiler.cc b/src/wasm/baseline/liftoff-compiler.cc
index 9794e339ba2..45510a4b93b 100644
--- a/src/wasm/baseline/liftoff-compiler.cc
+++ b/src/wasm/baseline/liftoff-compiler.cc
@@ -1980,7 +1980,7 @@ class LiftoffCompiler {
       }
       case kExprExternExternalize: {
         LiftoffRegList pinned;
-        LiftoffRegister ref = pinned.set(__ PopToRegister(pinned));
+        LiftoffRegister ref = pinned.set(__ PopToModifiableRegister(pinned));
         LiftoffRegister null = __ GetUnusedRegister(kGpReg, pinned);
         LoadNullValueForCompare(null.gp(), pinned, kWasmAnyRef);
         Label label;
diff --git a/src/wasm/function-body-decoder-impl.h b/src/wasm/function-body-decoder-impl.h
index 0a8deec3787..5d67da7315b 100644
--- a/src/wasm/function-body-decoder-impl.h
+++ b/src/wasm/function-body-decoder-impl.h
@@ -3172,7 +3172,7 @@ class WasmFullDecoder : public WasmDecoder<ValidationTag, decoding_mode> {
   }
 
   DECODE(BrOnNonNull) {
-    CHECK_PROTOTYPE_OPCODE(gc);
+    CHECK_PROTOTYPE_OPCODE(typed_funcref);
     BranchDepthImmediate imm(this, this->pc_ + 1, validate);
     if (!this->Validate(this->pc_ + 1, imm, control_.size())) return 0;
     Value ref_object = Pop();
@@ -3695,6 +3695,11 @@ class WasmFullDecoder : public WasmDecoder<ValidationTag, decoding_mode> {
     CHECK_PROTOTYPE_OPCODE(return_call);
     SigIndexImmediate imm(this, this->pc_ + 1, validate);
     if (!this->Validate(this->pc_ + 1, imm)) return 0;
+    if (!VALIDATE(this->CanReturnCall(imm.sig))) {
+      this->DecodeError("%s: %s", WasmOpcodes::OpcodeName(kExprReturnCallRef),
+                        "tail call return types mismatch");
+      return 0;
+    }
     Value func_ref = Pop(ValueType::RefNull(imm.index));
     PoppedArgVector args = PopArgs(imm.sig);
     CALL_INTERFACE_IF_OK_AND_REACHABLE(ReturnCallRef, func_ref, imm.sig,
@@ -4635,6 +4640,15 @@ class WasmFullDecoder : public WasmDecoder<ValidationTag, decoding_mode> {
         if (!this->ValidateElementSegment(elem_index_pc, elem_segment)) {
           return 0;
         }
+        ValueType segment_type =
+            this->module_->elem_segments[elem_segment.index].type;
+        if (!VALIDATE(IsSubtypeOf(segment_type, element_type, this->module_))) {
+          this->DecodeError(
+              "array.init_elem: segment type %s is not a subtype of array "
+              "element type %s",
+              segment_type.name().c_str(), element_type.name().c_str());
+          return 0;
+        }
 
         auto [array, array_index, elem_offset, length] = Pop(
             ValueType::RefNull(array_imm.index), kWasmI32, kWasmI32, kWasmI32);
diff --git a/src/wasm/wasm-objects.cc b/src/wasm/wasm-objects.cc
index e53b97962ef..a39a707bd37 100644
--- a/src/wasm/wasm-objects.cc
+++ b/src/wasm/wasm-objects.cc
@@ -278,7 +278,7 @@ void WasmTableObject::SetFunctionTableEntry(Isolate* isolate,
                                             Handle<FixedArray> entries,
                                             int entry_index,
                                             Handle<Object> entry) {
-  if (entry->IsWasmNull(isolate)) {
+  if (entry->IsWasmNull(isolate) || entry->IsNull(isolate)) {
     ClearDispatchTables(isolate, table, entry_index);  // Degenerate case.
     entries->set(entry_index, ReadOnlyRoots(isolate).wasm_null());
     return;
diff --git a/test/unittests/wasm/function-body-decoder-unittest.cc b/test/unittests/wasm/function-body-decoder-unittest.cc
index 39275401241..43a2fd9569f 100644
--- a/test/unittests/wasm/function-body-decoder-unittest.cc
+++ b/test/unittests/wasm/function-body-decoder-unittest.cc
@@ -1131,7 +1131,7 @@ TEST_F(FunctionBodyDecoderTest, UnreachableRefTypes) {
   ExpectValidates(sigs.i_v(), {WASM_UNREACHABLE, kExprCallRef, sig_index});
   ExpectValidates(sigs.i_v(), {WASM_UNREACHABLE, WASM_REF_FUNC(function_index),
                                kExprCallRef, sig_index});
-  ExpectValidates(sigs.v_v(),
+  ExpectValidates(sigs.i_v(),
                   {WASM_UNREACHABLE, kExprReturnCallRef, sig_index});
 
   ExpectValidates(sigs.v_v(),
