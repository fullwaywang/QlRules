/**
 * @name linux-505d9dcb0f7ddf9d075e729523a33d38642ae680-ccp_run_aes_gcm_cmd
 * @id cpp/linux/505d9dcb0f7ddf9d075e729523a33d38642ae680/ccp-run-aes-gcm-cmd
 * @description linux-505d9dcb0f7ddf9d075e729523a33d38642ae680-drivers/crypto/ccp/ccp-ops.c-ccp_run_aes_gcm_cmd CVE-2021-3764
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_0(Variable vtag_632, VariableAccess target_2, AddressOfExpr target_3, ValueFieldAccess target_4) {
exists(ExprStmt target_0 |
	target_0.getExpr().(FunctionCall).getTarget().hasName("ccp_dm_free")
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getTarget()=vtag_632
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getThen().(BlockStmt).getStmt(0)=target_0
	and target_0.getParent().(BlockStmt).getParent().(IfStmt).getCondition()=target_2
	and target_3.getOperand().(VariableAccess).getLocation().isBefore(target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation())
	and target_0.getExpr().(FunctionCall).getArgument(0).(AddressOfExpr).getOperand().(VariableAccess).getLocation().isBefore(target_4.getQualifier().(VariableAccess).getLocation()))
}

predicate func_1(VariableAccess target_2, Function func, GotoStmt target_1) {
	target_1.getName() ="e_tag"
	and target_1.getParent().(IfStmt).getCondition()=target_2
	and target_1.getEnclosingFunction() = func
}

predicate func_2(Variable vret_642, VariableAccess target_2) {
	target_2.getTarget()=vret_642
	and target_2.getParent().(IfStmt).getThen() instanceof GotoStmt
}

predicate func_3(Variable vtag_632, AddressOfExpr target_3) {
	target_3.getOperand().(VariableAccess).getTarget()=vtag_632
	and target_3.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getTarget().hasName("ccp_set_dm_area")
	and target_3.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(1).(Literal).getValue()="0"
	and target_3.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(2).(VariableAccess).getTarget().getType().hasName("scatterlist *")
	and target_3.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(3).(Literal).getValue()="0"
	and target_3.getParent().(FunctionCall).getParent().(AssignExpr).getRValue().(FunctionCall).getArgument(4).(VariableAccess).getTarget().getType().hasName("unsigned int")
}

predicate func_4(Variable vtag_632, ValueFieldAccess target_4) {
	target_4.getTarget().getName()="address"
	and target_4.getQualifier().(VariableAccess).getTarget()=vtag_632
}

from Function func, Variable vtag_632, Variable vret_642, GotoStmt target_1, VariableAccess target_2, AddressOfExpr target_3, ValueFieldAccess target_4
where
not func_0(vtag_632, target_2, target_3, target_4)
and func_1(target_2, func, target_1)
and func_2(vret_642, target_2)
and func_3(vtag_632, target_3)
and func_4(vtag_632, target_4)
and vtag_632.getType().hasName("ccp_dm_workarea")
and vret_642.getType().hasName("int")
and vtag_632.(LocalVariable).getFunction() = func
and vret_642.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
