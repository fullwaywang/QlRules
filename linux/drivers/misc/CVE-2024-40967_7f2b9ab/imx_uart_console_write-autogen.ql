/**
 * @name linux-7f2b9ab6d0b26f16cd38dd9fd91d51899635f7c7-imx_uart_console_write
 * @id cpp/linux/7f2b9ab6d0b26f16cd38dd9fd91d51899635f7c7/imx-uart-console-write
 * @description linux-7f2b9ab6d0b26f16cd38dd9fd91d51899635f7c7-drivers/tty/serial/imx.c-imx_uart_console_write CVE-2024-40967
 * @kind problem
 * @problem.severity error
 * @tags security
 */

import cpp

predicate func_1(WhileStmt target_4, Function func) {
exists(ExprStmt target_1 |
	exists(StmtExpr obj_0 | obj_0=target_1.getExpr() |
		exists(BlockStmt obj_1 | obj_1=obj_0.getStmt() |
			exists(ForStmt obj_2 | obj_2=obj_1.getStmt(4) |
				exists(BlockStmt obj_3 | obj_3=obj_2.getStmt() |
					obj_3.getStmt(3).(IfStmt).getCondition().(VariableAccess).getType().hasName("unsigned long")
					and obj_3.getStmt(4).(ExprStmt).getExpr().(FunctionCall).getTarget().hasName("cpu_relax")
				)
			)
			and exists(ExprStmt obj_4 | obj_4=obj_1.getStmt(6) |
				exists(ConditionalExpr obj_5 | obj_5=obj_4.getExpr() |
					obj_5.getCondition().(BitwiseAndExpr).getLeftOperand().(VariableAccess).getType().hasName("unsigned int")
					and obj_5.getThen().(Literal).getValue()="0"
					and obj_5.getElse().(UnaryMinusExpr).getValue()="-110"
				)
			)
			and obj_1.getStmt(3).(IfStmt).getCondition().(LogicalAndExpr).getRightOperand().(VariableAccess).getType().hasName("unsigned long")
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_1
	and target_1.getLocation().isBefore(target_4.getLocation())
)
}

predicate func_3(Variable vsport_2024, FunctionCall target_3) {
	target_3.getTarget().hasName("imx_uart_readl")
	and target_3.getArgument(0).(VariableAccess).getTarget()=vsport_2024
	and target_3.getArgument(1).(Literal).getValue()="152"
}

predicate func_4(Function func, WhileStmt target_4) {
	exists(NotExpr obj_0 | obj_0=target_4.getCondition() |
		exists(BitwiseAndExpr obj_1 | obj_1=obj_0.getOperand() |
			obj_1.getLeftOperand() instanceof FunctionCall
			and obj_1.getRightOperand().(BinaryBitwiseOperation).getValue()="8"
		)
	)
	and func.getEntryPoint().(BlockStmt).getAStmt()=target_4
}

from Function func, Variable vsport_2024, FunctionCall target_3, WhileStmt target_4
where
not func_1(target_4, func)
and func_3(vsport_2024, target_3)
and func_4(func, target_4)
and vsport_2024.getType().hasName("imx_port *")
and vsport_2024.(LocalVariable).getFunction() = func
select func, func.getFile().toString() + ":" + func.getLocation().getStartLine().toString()
