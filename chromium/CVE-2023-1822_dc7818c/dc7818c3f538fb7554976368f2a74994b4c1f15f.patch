commit dc7818c3f538fb7554976368f2a74994b4c1f15f	dc7818c3f538fb7554976368f2a74994b4c1f15f
Author: Michael Thiessen <mthiesse@chromium.org>
Date:   Mon Apr 24 16:19:42 2023 +0000

    Fix BlockFrameRenavigations
    
    This kill switch for this was turned off in M112 because server
    redirects are considered as having the same InitiatorFrameToken as the
    navigation that preceeded them, so we were detecting them as cross-frame
    re-navigations even through it's really the frame navigating itself.
    
    This change excludes redirects from being considered as cross-frame
    re-navigations and tracks whether something along the redirect chain was
    previously considered a re-navigation to avoid client redirects allowing
    external navigation after a cross-frame re-navigation.
    
    Bug: 1066555
    Change-Id: Ief97ec8d88ef9ec50b1d8dfc393b93db62378e8f
    Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/4456971
    Reviewed-by: Yaron Friedman <yfriedman@chromium.org>
    Code-Coverage: Findit <findit-for-me@appspot.gserviceaccount.com>
    Commit-Queue: Michael Thiessen <mthiesse@chromium.org>
    Cr-Commit-Position: refs/heads/main@{#1134649}

diff --git a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
index 6abd79dccb546..7ef6d8e73f676 100644
--- a/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
+++ b/chrome/android/javatests/src/org/chromium/chrome/browser/externalnav/UrlOverridingTest.java
@@ -196,6 +196,10 @@ public class UrlOverridingTest {
             BASE_PATH + "subframe_navigation_child.html";
     private static final String NAVIGATION_FROM_RENAVIGATE_FRAME =
             BASE_PATH + "renavigate_frame.html";
+    private static final String NAVIGATION_FROM_RENAVIGATE_FRAME_WITH_REDIRECT =
+            BASE_PATH + "renavigate_frame_with_redirect.html";
+    private static final String NAVIGATION_FROM_WINDOW_REDIRECT =
+            BASE_PATH + "navigation_from_window_redirect.html";
 
     private static final String OTHER_BROWSER_PACKAGE = "com.other.browser";
     // Needs to be a real package on the device so we can get an icon from it. It will not be
@@ -1536,6 +1540,28 @@ public class UrlOverridingTest {
         Assert.assertNull(getCurrentExternalNavigationMessage());
     }
 
+    @Test
+    @LargeTest
+    @Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_FRAME_RENAVIGATIONS_NAME})
+    public void testWindowRenavigationServerRedirect() throws Exception {
+        String finalUrl = mTestServer.getURL(HELLO_PAGE);
+        mActivityTestRule.startMainActivityOnBlankPage();
+        OverrideUrlLoadingResult result = loadUrlAndWaitForIntentUrl(
+                mTestServer.getURL(NAVIGATION_FROM_RENAVIGATE_FRAME_WITH_REDIRECT), true, true,
+                false, finalUrl, true, null, PageTransition.LINK, true);
+        Assert.assertEquals(OverrideUrlLoadingResultType.NO_OVERRIDE, result.getResultType());
+        Assert.assertNull(getCurrentExternalNavigationMessage());
+    }
+
+    @Test
+    @LargeTest
+    @Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_FRAME_RENAVIGATIONS_NAME})
+    public void testWindowServerRedirect() throws Exception {
+        mActivityTestRule.startMainActivityOnBlankPage();
+        loadUrlAndWaitForIntentUrl(
+                mTestServer.getURL(NAVIGATION_FROM_WINDOW_REDIRECT), true, true, true, null, true);
+    }
+
     @Test
     @LargeTest
     @Features.EnableFeatures({ExternalIntentsFeatures.BLOCK_INTENTS_TO_SELF_NAME})
diff --git a/chrome/test/data/android/url_overriding/navigation_from_window_redirect.html b/chrome/test/data/android/url_overriding/navigation_from_window_redirect.html
new file mode 100644
index 0000000000000..6a7c145003b93
--- /dev/null
+++ b/chrome/test/data/android/url_overriding/navigation_from_window_redirect.html
@@ -0,0 +1,13 @@
+<!DOCTYPE html>
+<html>
+<head>
+  <meta name="viewport"
+    content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+</head>
+<body>
+<a target='_blank' href='/server-redirect?intent%3A%2F%2Ftest%2F%23Intent%3Bscheme%3Dexternalappscheme%3Bend'>
+  Click to open App!!
+  <div style='height:10000px; width:100%;'></div>
+</a>
+</body>
+</html>
diff --git a/chrome/test/data/android/url_overriding/renavigate_frame_with_redirect.html b/chrome/test/data/android/url_overriding/renavigate_frame_with_redirect.html
new file mode 100644
index 0000000000000..e1f6cfec90ed2
--- /dev/null
+++ b/chrome/test/data/android/url_overriding/renavigate_frame_with_redirect.html
@@ -0,0 +1,22 @@
+<!DOCTYPE html>
+<html>
+<head>
+  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
+  <script>
+    function openWindow() {
+      var x = window.open("hello.html");
+      var interval = setInterval(function () {
+        if (!x.document.URL.includes("hello.html")) return;
+        if (x.document.readyState !== "complete") return;
+        x.location.href = "/server-redirect?intent%3A%2F%2Ftest%2F%23Intent%3Bscheme%3Dexternalappscheme%3Bend";
+        clearInterval(interval);
+      }, 10);
+    };
+  </script>
+</head>
+
+<body style='height:10000px;' onclick='openWindow();'>
+  Click page to open App!!
+</body>
+
+</html>
diff --git a/components/external_intents/android/external_intents_features.cc b/components/external_intents/android/external_intents_features.cc
index 329a74650bc3a..97e3c47a2a5c5 100644
--- a/components/external_intents/android/external_intents_features.cc
+++ b/components/external_intents/android/external_intents_features.cc
@@ -30,8 +30,8 @@ BASE_FEATURE(kExternalNavigationDebugLogs,
              base::FEATURE_DISABLED_BY_DEFAULT);
 
 BASE_FEATURE(kBlockFrameRenavigations,
-             "BlockFrameRenavigations",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             "BlockFrameRenavigations2",
+             base::FEATURE_ENABLED_BY_DEFAULT);
 
 BASE_FEATURE(kDoNotRequireSpecializedCCTHandler,
              "DoNotRequireSpecializedCCTHandler",
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
index 1aa3cef2ff393..121380772aaae 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalIntentsFeatures.java
@@ -18,7 +18,7 @@ import org.chromium.base.annotations.NativeMethods;
 @JNINamespace("external_intents")
 public class ExternalIntentsFeatures extends Features {
     public static final String EXTERNAL_NAVIGATION_DEBUG_LOGS_NAME = "ExternalNavigationDebugLogs";
-    public static final String BLOCK_FRAME_RENAVIGATIONS_NAME = "BlockFrameRenavigations";
+    public static final String BLOCK_FRAME_RENAVIGATIONS_NAME = "BlockFrameRenavigations2";
     public static final String DO_NOT_REQUIRE_SPECIALIZED_CCT_HANDLER_NAME =
             "DoNotRequireSpecializedCCTHandler";
     public static final String BLOCK_INTENTS_TO_SELF_NAME = "BlockIntentsToSelf";
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
index ea8988d8e06d9..37b95e88cbaa2 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/ExternalNavigationHandler.java
@@ -1004,7 +1004,7 @@ public class ExternalNavigationHandler {
 
         // Ensure the navigation was started with a user gesture so that inactive pages can't launch
         // apps unexpectedly, unless we trust the calling app for a CCT/TWA.
-        if (initialState.isRendererInitiated && !initialState.hasUserGesture()) {
+        if (initialState.isRendererInitiated && !initialState.hasUserGesture) {
             if (isExternalProtocol) handler.maybeLogExternalRedirectBlockedWithMissingGesture();
             if (debug()) Log.i(TAG, "Navigation chain started without a gesture.");
             return NavigationChainResult.REQUIRES_PROMPT;
@@ -1262,8 +1262,19 @@ public class ExternalNavigationHandler {
      */
     private boolean isCrossFrameRenavigation(ExternalNavigationParams params) {
         if (!ExternalIntentsFeatures.BLOCK_FRAME_RENAVIGATIONS.isEnabled()) return false;
+
+        if (params.getRedirectHandler().navigationChainPerformedCrossFrameNavigation()) {
+            if (debug()) Log.i(TAG, "Navigation chain used cross-frame re-navigation.");
+            return true;
+        }
+
         if (params.isInitialNavigationInFrame() || !params.isCrossFrameNavigation()) return false;
+        // Server redirects can be seen as cross frame to the initial navigation in the frame, but
+        // are still controlled by the site in the frame.
+        if (params.isRedirect()) return false;
+
         if (debug()) Log.i(TAG, "Cross-frame re-navigation.");
+        params.getRedirectHandler().setPerformedCrossFrameNavigation();
         return true;
     }
 
@@ -1518,6 +1529,10 @@ public class ExternalNavigationHandler {
         boolean isIntentWithSupportedProtocol = UrlUtilities.hasIntentScheme(params.getUrl())
                 && UrlUtilities.isAcceptedScheme(intentDataUrl);
 
+        // Needs to be checked first as a failure for this reason is persisted through the
+        // navigation chain, and other failures should not cause this check to be skipped.
+        if (isCrossFrameRenavigation(params)) return OverrideUrlLoadingResult.forNoOverride();
+
         if (shouldBlockAllExternalAppLaunches(params, incomingIntentRedirect)) {
             return OverrideUrlLoadingResult.forNoOverride();
         }
@@ -1563,8 +1578,6 @@ public class ExternalNavigationHandler {
             return OverrideUrlLoadingResult.forNoOverride();
         }
 
-        if (isCrossFrameRenavigation(params)) return OverrideUrlLoadingResult.forNoOverride();
-
         QueryIntentActivitiesSupplier resolvingInfos =
                 new QueryIntentActivitiesSupplier(targetIntent);
 
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
index 45f83d18ee5e4..ce44a1c7c01f0 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/InterceptNavigationDelegateImpl.java
@@ -157,9 +157,6 @@ public class InterceptNavigationDelegateImpl extends InterceptNavigationDelegate
         mClient.onNavigationStarted(navigationHandle);
 
         RedirectHandler redirectHandler = mClient.getOrCreateRedirectHandler();
-        if (crossFrame && ExternalIntentsFeatures.BLOCK_FRAME_RENAVIGATIONS.isEnabled()) {
-            redirectHandler.clearUserGesture();
-        }
 
         OverrideUrlLoadingResult result = shouldOverrideUrlLoading(redirectHandler, escapedUrl,
                 navigationHandle.pageTransition(), navigationHandle.isRedirect(),
diff --git a/components/external_intents/android/java/src/org/chromium/components/external_intents/RedirectHandler.java b/components/external_intents/android/java/src/org/chromium/components/external_intents/RedirectHandler.java
index 79588d627be87..3a63ac1641f2d 100644
--- a/components/external_intents/android/java/src/org/chromium/components/external_intents/RedirectHandler.java
+++ b/components/external_intents/android/java/src/org/chromium/components/external_intents/RedirectHandler.java
@@ -70,26 +70,18 @@ public class RedirectHandler {
         public final boolean isFromTyping;
         public final boolean isFromFormSubmit;
         public final boolean isFromIntent;
-        private boolean mHasUserGesture;
+        public final boolean hasUserGesture;
 
         public InitialNavigationState(boolean isRendererInitiated, boolean hasUserGesture,
                 boolean isFromReload, boolean isFromTyping, boolean isFromFormSubmit,
                 boolean isFromIntent) {
             this.isRendererInitiated = isRendererInitiated;
-            mHasUserGesture = hasUserGesture;
+            this.hasUserGesture = hasUserGesture;
             this.isFromReload = isFromReload;
             this.isFromTyping = isFromTyping;
             this.isFromFormSubmit = isFromFormSubmit;
             this.isFromIntent = isFromIntent;
         }
-
-        public boolean hasUserGesture() {
-            return mHasUserGesture;
-        }
-
-        private void clearUserGesture() {
-            mHasUserGesture = false;
-        }
     }
 
     private class NavigationChainState {
@@ -100,6 +92,7 @@ public class RedirectHandler {
         // TODO(https://crbug.com/1286053): Plumb through the user activation time from blink.
         final long mNavigationChainStartTime = currentRealtime();
         boolean mUsedBackOrForward;
+        boolean mPerformedCrossFrameNavigation;
         final InitialNavigationState mInitialNavigationState;
 
         NavigationChainState(boolean hasUserStartedNonInitialNavigation,
@@ -173,14 +166,6 @@ public class RedirectHandler {
         mIsPrefetchLoadForIntent = false;
     }
 
-    /**
-     * Clears the user gesture bit for the current Navigation Chain.
-     */
-    public void clearUserGesture() {
-        if (mNavigationChainState == null) return;
-        mNavigationChainState.mInitialNavigationState.clearUserGesture();
-    }
-
     /**
      * Will cause shouldNotOverrideUrlLoading() to return true until a new user-initiated navigation
      * occurs.
@@ -397,7 +382,7 @@ public class RedirectHandler {
 
     public void maybeLogExternalRedirectBlockedWithMissingGesture() {
         if (!mNavigationChainState.mInitialNavigationState.isRendererInitiated
-                || mNavigationChainState.mInitialNavigationState.hasUserGesture()) {
+                || mNavigationChainState.mInitialNavigationState.hasUserGesture) {
             return;
         }
 
@@ -410,6 +395,14 @@ public class RedirectHandler {
                 "Android.Intent.BlockedExternalNavLastGestureTime", millisSinceLastGesture);
     }
 
+    public void setPerformedCrossFrameNavigation() {
+        mNavigationChainState.mPerformedCrossFrameNavigation = true;
+    }
+
+    public boolean navigationChainPerformedCrossFrameNavigation() {
+        return mNavigationChainState.mPerformedCrossFrameNavigation;
+    }
+
     // Facilitates simulated waiting in tests.
     @VisibleForTesting
     public long currentRealtime() {
